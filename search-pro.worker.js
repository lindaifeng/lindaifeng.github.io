const V=Object.entries,et=Object.fromEntries,st="ENTRIES",L="KEYS",T="VALUES",_="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===_)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==_).join("")}value(){return E(this._path).node.get(_)}result(){switch(this._type){case T:return this.value();case L:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],nt=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return R(e,t,s,n,i,1,o,""),n},R=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const c of e.keys())if(c===_){const a=o[d-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let h=0;h<c.length;++h,++a){const g=c[h],m=i*a,p=m-i;let l=o[m];const f=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let F=f;F<y;++F){const v=g!==t[F],z=o[p+F]+ +v,A=o[p+F+1]+1,w=o[m+F]+1,j=o[m+F+1]=Math.min(z,A,w);j<l&&(l=j)}if(l>s)continue t}R(e.get(c),t,s,n,o,a,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==_&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,st)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return nt(this._tree,t,s)}get(t){const s=k(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=k(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new D(this,L)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,I(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},k=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return k(e.get(s),t.slice(s.length))},I=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const c=new Map;c.set(u.slice(r),d),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(_),s.size===0)W(n);else if(s.size===1){const[o,u]=s.entries().next().value;q(n,o,u)}}},W=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&q(e.slice(0,-1),n,o)}},q=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],ut=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,M="or",$="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},N=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,lt=()=>new Map,b=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[M]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),N(n.terms,u)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);N(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},at=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},gt={k:1.2,b:.7,d:.5},mt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:M,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},pt={combineWith:$,prefix:(e,t,s)=>t===s.length-1},Ft={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},_t={...Ft,...U},K=Symbol("*"),yt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,u]of e._documentIds){const i=n.boostDocument?n.boostDocument(u,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},X=(e,t=M)=>{if(e.length===0)return new Map;const s=t.toLowerCase(),n=ht[s];if(!n)throw new Error(`Invalid combination operator: ${t}`);return e.reduce(n)||new Map},S=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const c of Object.keys(u)){const a=u[c],h=e._fieldIds[c],g=o.get(h);if(g==null)continue;let m=g.size;const p=e._avgFieldLength[h];for(const l of g.keys()){if(!e._documentIds.has(l)){ft(e,h,l,s),m-=1;continue}const f=i?i(e._documentIds.get(l),s,e._storedFields.get(l)):1;if(!f)continue;const y=g.get(l),F=e._fieldLength.get(l)[h],v=dt(y,m,e._documentCount,F,p,r),z=n*a*f*v,A=d.get(l);if(A){A.score+=z,ct(A.terms,t);const w=G(A.match,s);w?w.push(c):A.match[s]=[c]}else d.set(l,{score:z,terms:[t],match:{[s]:[c]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((l,f)=>({...l,[f]:G(n.boost,f)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:c,prefix:a}={...J.weights,...i},h=e._index.get(t.term),g=S(e,t.term,t.term,1,h,o,u,d);let m,p;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(r,Math.round(t.term.length*l)):l;f&&(p=e._index.fuzzyGet(t.term,f))}if(m)for(const[l,f]of m){const y=l.length-t.term.length;if(!y)continue;p?.delete(l);const F=a*l.length/(l.length+.3*y);S(e,t.term,l,F,f,o,u,d,g)}if(p)for(const l of p.keys()){const[f,y]=p.get(l);if(!y)continue;const F=c*l.length/(l.length+y);S(e,t.term,l,F,f,o,u,d,g)}return g},Y=(e,t,s={})=>{if(t===K)return yt(e,s);if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(g=>Y(e,g,a));return X(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,c=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(at(i)).map(a=>At(e,a,i));return X(c,i.combineWith)},Q=(e,t,s={})=>{const n=Y(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const c=r.length||1,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(d),queryTerms:r,match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return t===K&&s.boostDocument==null&&e._options.searchOptions.boostDocument==null||o.sort(P),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of Q(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(P),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?_t:t.autoVacuum;this._options={...mt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...pt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=b(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=b(u),h._avgFieldLength=i,h._storedFields=b(r),h._dirtCount=d||0,h._index=new C;for(const[g,m]of h._documentIds)h._idToShortId.set(m,g);for(const[g,m]of e){const p=new Map;for(const l of Object.keys(m)){let f=m[l];c===1&&(f=f.ds),p.set(parseInt(l,10),b(f))}h._index.set(g,p)}return h},B=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let h="";i===0?h=c.length>20?`… ${c.slice(-20)}`:c:a?h=c.length+i>100?`${c.slice(0,100-i)}… `:c:h=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const c=d+n.length;if(r(e.slice(u,d)),u=c,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},wt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),xt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),Z=(e,t,s={})=>{const n={};return Q(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),c=u.includes("#"),[a,h]=u.split(/[#@]/),g=Number(a),m=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(y=>!y.includes(l))),{contents:p}=n[g]??={title:"",contents:[]};if(d)p.push([{type:"customField",id:g,index:h,display:m.map(l=>o.c.map(f=>B(f,l))).flat().filter(l=>l!==null)},r]);else{const l=m.map(f=>B(o.h,f)).filter(f=>f!==null);if(l.length&&p.push([{type:c?"heading":"title",id:g,...c&&{anchor:h},display:l},r]),"t"in o)for(const f of o.t){const y=m.map(F=>B(f,F)).filter(F=>F!==null);y.length&&p.push([{type:"text",id:g,...c&&{anchor:h},display:y},r])}}}),V(n).sort(([,o],[,u])=>"max"==="total"?wt(o,u):xt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=ut(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},tt=(e,t,s={})=>{const n=Ct(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:o})=>o);return e.includes(" ")?n:n.filter(o=>!o.includes(" "))},bt=et(V(JSON.parse("{\"/\":{\"documentCount\":3339,\"nextId\":3339,\"documentIds\":{\"0\":\"0\",\"1\":\"1\",\"2\":\"1#介绍\",\"3\":\"2\",\"4\":\"2@0\",\"5\":\"3\",\"6\":\"3@0\",\"7\":\"3@1\",\"8\":\"4\",\"9\":\"4@0\",\"10\":\"4@1\",\"11\":\"5\",\"12\":\"5#markdown-介绍\",\"13\":\"5#markdown-配置\",\"14\":\"5#markdown-扩展\",\"15\":\"5#vuepress-扩展\",\"16\":\"5#主题扩展\",\"17\":\"5#选项卡\",\"18\":\"5#脚注\",\"19\":\"5#导入文件\",\"20\":\"5#tex-语法\",\"21\":\"5#任务列表\",\"22\":\"5#图片增强\",\"23\":\"5#上下角标\",\"24\":\"5#组件\",\"25\":\"5@0\",\"26\":\"5@1\",\"27\":\"6\",\"28\":\"6#页面标题\",\"29\":\"6#页面信息\",\"30\":\"6#页面内容\",\"31\":\"6#组件\",\"32\":\"6@0\",\"33\":\"6@1\",\"34\":\"7\",\"35\":\"7#概述\",\"36\":\"7#知识要点\",\"37\":\"7#_1-核心概念\",\"38\":\"7#_2-支持的数据类型\",\"39\":\"7#_3-mongodb的主要优势\",\"40\":\"7#知识扩展\",\"41\":\"7#_1-设计思想\",\"42\":\"7#_2-避坑指南\",\"43\":\"7#_3-深度思考题\",\"44\":\"8\",\"45\":\"8#概述\",\"46\":\"8#知识要点\",\"47\":\"8#_1-插入数据\",\"48\":\"8#_2-查询数据\",\"49\":\"8#_3-更新数据\",\"50\":\"8#_4-删除数据\",\"51\":\"8#知识扩展\",\"52\":\"8#_1-设计思想\",\"53\":\"8#_2-避坑指南\",\"54\":\"8#_3-深度思考题\",\"55\":\"9\",\"56\":\"9#概述\",\"57\":\"9#知识要点\",\"58\":\"9#_1-聚合管道\",\"59\":\"9#_2-mapreduce\",\"60\":\"9#_3-单目聚合函数\",\"61\":\"9#知识扩展\",\"62\":\"9#_1-设计思想\",\"63\":\"9#_2-避坑指南\",\"64\":\"9#_3-深度思考题\",\"65\":\"10\",\"66\":\"10#概述\",\"67\":\"10#知识要点\",\"68\":\"10#_1-索引优化\",\"69\":\"10#_2-复制集\",\"70\":\"10#_3-分片\",\"71\":\"10#_4-事务\",\"72\":\"10#知识扩展\",\"73\":\"10#_1-设计思想\",\"74\":\"10#_2-避坑指南\",\"75\":\"10#_3-深度思考题\",\"76\":\"11\",\"77\":\"11#概述\",\"78\":\"11#知识要点\",\"79\":\"11#_1-数据库命令\",\"80\":\"11#_1-1-基本数据库命令\",\"81\":\"11#_1-2-用户管理命令\",\"82\":\"11#_2-集合命令\",\"83\":\"11#_3-文档操作命令\",\"84\":\"11#_3-1-插入文档\",\"85\":\"11#_3-2-查询文档\",\"86\":\"11#_3-3-更新文档\",\"87\":\"11#_3-4-删除文档\",\"88\":\"11#_4-高级命令\",\"89\":\"11#_4-1-聚合命令\",\"90\":\"11#_4-2-索引命令\",\"91\":\"11#_4-3-事务命令\",\"92\":\"11#知识扩展\",\"93\":\"11#_1-设计思想\",\"94\":\"11#_2-避坑指南\",\"95\":\"11#_3-深度思考题\",\"96\":\"12\",\"97\":\"12#mysql-双主从-已测试\",\"98\":\"12#一、添加配置文件\",\"99\":\"12#二、创建用户\",\"100\":\"12#三、分别给用户授予复制权限\",\"101\":\"12#四、分别重启服务\",\"102\":\"12#五、配置主从机\",\"103\":\"12#七、分别利用命令启动slave\",\"104\":\"12#八、测试结果\",\"105\":\"12#mysql-单主从-步骤有问题\",\"106\":\"12#一、添加配置文件-1\",\"107\":\"12#二、创建用户-1\",\"108\":\"12#三、分别给用户授予复制权限-1\",\"109\":\"12#四、分别重启服务-1\",\"110\":\"12#五、配置从机\",\"111\":\"12#七、利用命令启动slave\",\"112\":\"12#八、测试结果-1\",\"113\":\"12#如果出现slave-io-running-no的机器上操作\",\"114\":\"13\",\"115\":\"13#二、mysql5-7-ssl的配置与启用\",\"116\":\"13#三、配置ssl安全认证\",\"117\":\"14\",\"118\":\"14#mysql5-7升级小版本-windows\",\"119\":\"14#一、关闭并删除mysql服务\",\"120\":\"14#二、替换mysql-相关文件\",\"121\":\"14#三、启动mysql服务\",\"122\":\"14#四、执行升级操作\",\"123\":\"14#五、重启mysql服务并验证版本\",\"124\":\"15\",\"125\":\"15#mysql错误码\",\"126\":\"16\",\"127\":\"16#redis介绍\",\"128\":\"16#为什么redis这么快\",\"129\":\"16#为什么要用redis\",\"130\":\"16#redis应用场景\",\"131\":\"16#redis数据类型\",\"132\":\"16#string类型\",\"133\":\"16#hash类型\",\"134\":\"16#list类型\",\"135\":\"16#set类型\",\"136\":\"16#redis持久化\",\"137\":\"16#什么是持久化\",\"138\":\"16#rdb文件存储\",\"139\":\"16#aof文件存储\",\"140\":\"16#aof执行策略\",\"141\":\"16#rdb与aof对比-优缺点\",\"142\":\"16#rdb与aof应用场景\",\"143\":\"17\",\"144\":\"17#redis线程模型\",\"145\":\"17#_1-redis数据删除与淘汰策略\",\"146\":\"17#_1-1-过期数据\",\"147\":\"17#_1-1-1-redis中的数据特征\",\"148\":\"17#_1-1-2-时效性数据的存储结构\",\"149\":\"17#_1-2-数据删除策略\",\"150\":\"17#_1-2-1-数据删除策略的目标\",\"151\":\"17#_1-2-2-定时删除\",\"152\":\"17#_1-2-3-惰性删除\",\"153\":\"17#_1-2-4-定期删除\",\"154\":\"17#_1-2-5-删除策略对比\",\"155\":\"17#_1-3-数据淘汰策略-逐出算法\",\"156\":\"17#_1-3-1-淘汰策略概述\",\"157\":\"17#_1-3-2-策略配置\",\"158\":\"17#_2-主从复制\",\"159\":\"17#_2-1-主从复制简介\",\"160\":\"17#_2-1-1-高可用\",\"161\":\"17#_2-1-2-主从复制概念\",\"162\":\"17#_2-1-3-主从复制的作用\",\"163\":\"17#_2-2-主从复制工作流程\",\"164\":\"17#_2-2-1-主从复制的工作流程-三个阶段\",\"165\":\"17#_2-2-1-1-阶段一-建立连接\",\"166\":\"17#_2-2-1-2-阶段二-数据同步\",\"167\":\"17#_2-2-1-3-阶段三-命令传播\",\"168\":\"17#_2-2-2-流程更新-全量复制-部分复制\",\"169\":\"17#_2-2-3-心跳机制\",\"170\":\"17#_2-3-主从复制常见问题\",\"171\":\"17#_2-3-1-频繁的全量复制\",\"172\":\"17#_2-3-2-频繁的网络中断\",\"173\":\"17#_2-3-3-数据不一致\",\"174\":\"17#_3-哨兵模式\",\"175\":\"17#_3-1-哨兵简介\",\"176\":\"17#_3-1-1-哨兵概念\",\"177\":\"17#_3-1-2-哨兵作用\",\"178\":\"17#_3-2-启用哨兵\",\"179\":\"17#_3-3-哨兵工作原理\",\"180\":\"17#_3-3-1-监控\",\"181\":\"17#_3-3-2-通知\",\"182\":\"17#_3-3-3-故障转移\",\"183\":\"17#_4-集群cluster\",\"184\":\"17#_4-1-集群简介\",\"185\":\"17#_4-2-cluster集群结构设计\",\"186\":\"17#_4-3-cluster集群结构搭建\",\"187\":\"18\",\"188\":\"18#企业级解决方案\",\"189\":\"18#缓存预热\",\"190\":\"18#缓存雪崩\",\"191\":\"18#缓存击穿\",\"192\":\"18#缓存穿透\",\"193\":\"18#性能指标监控\",\"194\":\"19\",\"195\":\"19#概述\",\"196\":\"19#知识要点\",\"197\":\"19#_1-基础命令\",\"198\":\"19#_1-1-连接命令\",\"199\":\"19#_1-2-键命令\",\"200\":\"19#_2-字符串命令\",\"201\":\"19#_3-哈希命令\",\"202\":\"19#_4-列表命令\",\"203\":\"19#_5-集合命令\",\"204\":\"19#_6-有序集合命令\",\"205\":\"19#_7-高级命令\",\"206\":\"19#_7-1-事务命令\",\"207\":\"19#_7-2-持久化命令\",\"208\":\"19#_7-3-集群命令\",\"209\":\"19#知识扩展\",\"210\":\"19#_1-设计思想\",\"211\":\"19#_2-避坑指南\",\"212\":\"19#_3-深度思考题\",\"213\":\"20\",\"214\":\"20#docker安装nginx\",\"215\":\"20#_1、安装nginx镜像\",\"216\":\"20#_2、创建nginx容器\",\"217\":\"20#docker安装redis\",\"218\":\"20#_1、安装-redis-镜像\",\"219\":\"20#_2、运行容器\",\"220\":\"20#docker安装mongo\",\"221\":\"20#_1、安装mongodb-镜像\",\"222\":\"20#_2、运行-mongo-容器\",\"223\":\"20#_3、进入容器创建密码\",\"224\":\"20#docker安装mysql\",\"225\":\"20#_1、拉取镜像\",\"226\":\"20#_2、创建并启动mysql服务容器\",\"227\":\"20#_3、修改mysql访问权限\",\"228\":\"20#_4、授权\",\"229\":\"20#_5、修改root用户密码\",\"230\":\"20#_6、刷新权限\",\"231\":\"20#docker安装nacos\",\"232\":\"20#_1、下载官方nacos2-0-3提取sql脚本\",\"233\":\"20#_2-拉取支持m1芯片的镜像\",\"234\":\"20#_3、启动容器\",\"235\":\"20#_4、进入容器修改yml文件\",\"236\":\"20#_5、重新启动容器-登录控制台\",\"237\":\"20#docker安装seata\",\"238\":\"20#_1、拉取镜像-1\",\"239\":\"20#_2、运行\",\"240\":\"20#_3、将容器的文件同步到宿主机\",\"241\":\"20#_4、停止并删除seata-容器\",\"242\":\"20#_5、重新生成新seata-容器\",\"243\":\"20#_6、进入数据卷\",\"244\":\"20#_7、重启\",\"245\":\"20#_8、验证\",\"246\":\"20#docker安装rocketmq\",\"247\":\"20#下载官方dockerfile\",\"248\":\"20#_1、选择m1适合的版本\",\"249\":\"20#_2、编写broker-conf\",\"250\":\"20#_3、进行docker编排\",\"251\":\"20#_4、访问console\",\"252\":\"20#docker安装rabbitmq\",\"253\":\"20#_1-查找镜像\",\"254\":\"20#_2-拉取镜像\",\"255\":\"20#_3-查看镜像、启动并配置映射\",\"256\":\"20#_5-开启页面访问\",\"257\":\"20#_6、访问页面端\",\"258\":\"21\",\"259\":\"21#mac或windows安装node环境\",\"260\":\"21#安装node环境\",\"261\":\"21#更换镜像源\",\"262\":\"21#安装管理node版本工具\",\"263\":\"21#windows安装包管理器\",\"264\":\"21#mac安装包管理器\",\"265\":\"21#扩展命令\",\"266\":\"21#切换node版本\",\"267\":\"22\",\"268\":\"23\",\"269\":\"23#工具类模板\",\"270\":\"23#示例代码\",\"271\":\"23#_1-流式处理大容量数据\",\"272\":\"23#_2-并行导出优化\",\"273\":\"23#_3-高度可配置\",\"274\":\"23#_4-完善的异常处理\",\"275\":\"23#_5-标准化文件下载\",\"276\":\"23#_6-泛型支持\",\"277\":\"23#_7-高性能excel生成\",\"278\":\"23#_8-简洁的api设计\",\"279\":\"24\",\"280\":\"25\",\"281\":\"26\",\"282\":\"27\",\"283\":\"28\",\"284\":\"29\",\"285\":\"30\",\"286\":\"31\",\"287\":\"32\",\"288\":\"33\",\"289\":\"34\",\"290\":\"35\",\"291\":\"36\",\"292\":\"37\",\"293\":\"38\",\"294\":\"39\",\"295\":\"40\",\"296\":\"40#alibaba-java-coding-guidelines-代码规范插件\",\"297\":\"40#介绍\",\"298\":\"40#sonarlint-代码优化插件\",\"299\":\"40#rainbow-brackets-括号标色\",\"300\":\"40#lombok-自定生成实体类方法\",\"301\":\"40#maven-helper-maven依赖辅助插件\",\"302\":\"40#maven-search-maven依赖查询插件\",\"303\":\"41\",\"304\":\"41#jwt-优势-问题\",\"305\":\"41#jwt-的几个特点\",\"306\":\"41#基于-jwt-的实践\",\"307\":\"41#java-jwt实现案例\",\"308\":\"42\",\"309\":\"42#概述\",\"310\":\"42#知识要点\",\"311\":\"42#_1-spring的核心特性\",\"312\":\"42#_2-spring的历史\",\"313\":\"42#_3-spring的整体架构\",\"314\":\"42#知识扩展\",\"315\":\"42#设计思想\",\"316\":\"42#避坑指南\",\"317\":\"42#深度思考题\",\"318\":\"43\",\"319\":\"43#概述\",\"320\":\"43#知识要点\",\"321\":\"43#_1-ioc容器\",\"322\":\"43#_2-依赖注入的方式\",\"323\":\"43#_3-代码示例\",\"324\":\"43#构造函数注入\",\"325\":\"43#setter方法注入\",\"326\":\"43#字段注入\",\"327\":\"43#_4-bean的作用域\",\"328\":\"43#知识扩展\",\"329\":\"43#设计思想\",\"330\":\"43#避坑指南\",\"331\":\"43#深度思考题\",\"332\":\"44\",\"333\":\"44#概述\",\"334\":\"44#知识要点\",\"335\":\"44#_1-aop的核心概念\",\"336\":\"44#_2-通知的类型\",\"337\":\"44#_3-代码示例\",\"338\":\"44#切面类的定义\",\"339\":\"44#启用aop\",\"340\":\"44#_4-切点表达式\",\"341\":\"44#知识扩展\",\"342\":\"44#设计思想\",\"343\":\"44#避坑指南\",\"344\":\"44#深度思考题\",\"345\":\"45\",\"346\":\"45#概述\",\"347\":\"45#知识要点\",\"348\":\"45#_1-事务的基本概念\",\"349\":\"45#_2-编程式事务管理\",\"350\":\"45#_3-声明式事务管理\",\"351\":\"45#_4-代码示例\",\"352\":\"45#基于注解的事务管理\",\"353\":\"45#启用事务管理\",\"354\":\"45#编程式事务管理\",\"355\":\"45#_5-事务的隔离级别和传播行为\",\"356\":\"45#知识扩展\",\"357\":\"45#设计思想\",\"358\":\"45#避坑指南\",\"359\":\"45#深度思考题\",\"360\":\"46\",\"361\":\"46#概述\",\"362\":\"46#知识要点\",\"363\":\"46#_1-jdbc支持\",\"364\":\"46#_2-orm框架集成\",\"365\":\"46#_3-代码示例\",\"366\":\"46#jdbctemplate的使用\",\"367\":\"46#配置数据源\",\"368\":\"46#mybatis的集成\",\"369\":\"46#_4-数据源管理\",\"370\":\"46#知识扩展\",\"371\":\"46#设计思想\",\"372\":\"46#避坑指南\",\"373\":\"46#深度思考题\",\"374\":\"47\",\"375\":\"47#概述\",\"376\":\"47#知识要点\",\"377\":\"47#_1-spring-mvc\",\"378\":\"47#_2-restful-api开发\",\"379\":\"47#_3-代码示例\",\"380\":\"47#控制器的定义\",\"381\":\"47#restful-api的定义\",\"382\":\"47#配置spring-mvc\",\"383\":\"47#_4-拦截器和过滤器\",\"384\":\"47#知识扩展\",\"385\":\"47#设计思想\",\"386\":\"47#避坑指南\",\"387\":\"47#深度思考题\",\"388\":\"48\",\"389\":\"48#一、概述\",\"390\":\"48#二、知识要点\",\"391\":\"48#_1-springboot的核心特性\",\"392\":\"48#_2-第一个springboot应用\",\"393\":\"48#_3-项目结构\",\"394\":\"48#_4-依赖管理\",\"395\":\"48#三、知识扩展\",\"396\":\"48#_1-设计思想\",\"397\":\"48#_2-避坑指南\",\"398\":\"48#_3-深度思考题\",\"399\":\"49\",\"400\":\"49#一、概述\",\"401\":\"49#二、知识要点\",\"402\":\"49#_1-配置文件类型\",\"403\":\"49#_1-1-properties配置\",\"404\":\"49#_1-2-yaml配置\",\"405\":\"49#_2-配置优先级\",\"406\":\"49#_3-配置-profiles\",\"407\":\"49#_4-读取配置\",\"408\":\"49#三、知识扩展\",\"409\":\"49#_1-设计思想\",\"410\":\"49#_2-避坑指南\",\"411\":\"49#_3-深度思考题\",\"412\":\"50\",\"413\":\"50#一、概述\",\"414\":\"50#二、知识要点\",\"415\":\"50#_1-bean的创建与条件判断\",\"416\":\"50#_2-内置服务器的切换\",\"417\":\"50#_3-enable注解原理\",\"418\":\"50#_4-import原理\",\"419\":\"50#_5-enableautoconfiguration注解\",\"420\":\"50#三、知识扩展\",\"421\":\"50#_1-设计思想\",\"422\":\"50#_2-避坑指南\",\"423\":\"50#_3-深度思考题\",\"424\":\"51\",\"425\":\"51#一、概述\",\"426\":\"51#二、知识要点\",\"427\":\"51#_1-restful-api\",\"428\":\"51#_2-参数校验\",\"429\":\"51#_3-异常处理\",\"430\":\"51#_4-拦截器\",\"431\":\"51#三、知识扩展\",\"432\":\"51#_1-设计思想\",\"433\":\"51#_2-避坑指南\",\"434\":\"51#_3-深度思考题\",\"435\":\"52\",\"436\":\"52#一、概述\",\"437\":\"52#二、知识要点\",\"438\":\"52#_1-jdbc\",\"439\":\"52#_2-mybatis\",\"440\":\"52#_3-jpa\",\"441\":\"52#_4-事务管理\",\"442\":\"52#三、知识扩展\",\"443\":\"52#_1-设计思想\",\"444\":\"52#_2-避坑指南\",\"445\":\"52#_3-深度思考题\",\"446\":\"53\",\"447\":\"53#一、概述\",\"448\":\"53#二、知识要点\",\"449\":\"53#_1-单元测试\",\"450\":\"53#_2-集成测试\",\"451\":\"53#_3-安全认证\",\"452\":\"53#_4-授权\",\"453\":\"53#三、知识扩展\",\"454\":\"53#_1-设计思想\",\"455\":\"53#_2-避坑指南\",\"456\":\"53#_3-深度思考题\",\"457\":\"54\",\"458\":\"54#springboot底层原理实现\",\"459\":\"54#一、自动装配原理一bean的创建\",\"460\":\"54#二、自动装配原理二内置服务器的切换\",\"461\":\"54#三、自动装配原理三enable注解原理\",\"462\":\"54#四、自动装配原理四-import原理\",\"463\":\"54#五、自动装配原理五-enableautoconfiguration注解\",\"464\":\"55\",\"465\":\"55#概述\",\"466\":\"55#知识要点\",\"467\":\"55#_1-语言增强\",\"468\":\"55#_1-1-局部变量类型推断增强\",\"469\":\"55#_1-2-lambda参数的var支持\",\"470\":\"55#_2-api更新\",\"471\":\"55#_2-1-http客户端api-standard\",\"472\":\"55#_2-2-字符串增强方法\",\"473\":\"55#_2-3-集合增强\",\"474\":\"55#_2-4-optional增强\",\"475\":\"55#_3-性能优化\",\"476\":\"55#_3-1-zgc-z-garbage-collector\",\"477\":\"55#_3-2-epsilon垃圾收集器\",\"478\":\"55#_4-工具改进\",\"479\":\"55#_4-1-单文件程序启动\",\"480\":\"55#_4-2-飞行记录器-jfr\",\"481\":\"55#_5-安全增强\",\"482\":\"55#_5-1-tls-1-3支持\",\"483\":\"55#_5-2-移除不安全的加密算法\",\"484\":\"55#知识扩展\",\"485\":\"55#_1-设计思想\",\"486\":\"55#_1-模块化系统的成熟\",\"487\":\"55#_2-性能与可用性的平衡\",\"488\":\"55#_3-标准化与生态整合\",\"489\":\"55#_2-避坑指南\",\"490\":\"55#_1-模块化迁移问题\",\"491\":\"55#_2-http客户端的异常处理\",\"492\":\"55#_3-zgc的使用注意事项\",\"493\":\"55#_3-深度思考题\",\"494\":\"55#思考题1-java-11的http客户端相比第三方库-如okhttp、apache-httpclient-有哪些优势和不足\",\"495\":\"55#思考题2-如何利用java-11的特性优化现有java应用\",\"496\":\"56\",\"497\":\"56#概述\",\"498\":\"56#知识要点\",\"499\":\"56#_1-npe错误消息的革命性改进\",\"500\":\"56#_1-1-基础变量空值提示\",\"501\":\"56#_1-2-链式调用空值定位\",\"502\":\"56#_1-3-复杂表达式空值追踪\",\"503\":\"56#_2-实现原理与技术细节\",\"504\":\"56#_2-1-编译器层面的支持\",\"505\":\"56#_2-2-字节码层面的变化\",\"506\":\"56#_2-3-性能影响与优化\",\"507\":\"56#_3-配置与兼容性\",\"508\":\"56#_3-1-禁用增强npe消息\",\"509\":\"56#_3-2-向后兼容性保障\",\"510\":\"56#_3-3-与其他工具的集成\",\"511\":\"56#知识扩展\",\"512\":\"56#_1-设计思想\",\"513\":\"56#_1-开发者体验优先\",\"514\":\"56#_2-渐进式改进策略\",\"515\":\"56#_3-数据驱动的优化\",\"516\":\"56#_2-避坑指南\",\"517\":\"56#_1-不要过度依赖npe消息\",\"518\":\"56#_2-注意日志系统对npe消息的处理\",\"519\":\"56#_3-警惕反射和动态代理场景\",\"520\":\"56#_3-深度思考题\",\"521\":\"56#思考题1-java-17的npe增强特性与optional类的关系是什么-它们能互相替代吗\",\"522\":\"56#思考题2-在大型项目迁移到java-17后-如何充分利用npe增强特性改进代码质量\",\"523\":\"57\",\"524\":\"57#概述\",\"525\":\"57#知识要点\",\"526\":\"57#_1-虚拟线程与平台线程的区别\",\"527\":\"57#_2-虚拟线程的创建方式\",\"528\":\"57#_3-虚拟线程的实现原理\",\"529\":\"57#_4-虚拟线程的适用场景\",\"530\":\"57#知识扩展\",\"531\":\"57#设计思想\",\"532\":\"57#避坑指南\",\"533\":\"57#深度思考题\",\"534\":\"58\",\"535\":\"58#概述\",\"536\":\"58#知识要点\",\"537\":\"58#_1-lambda表达式\",\"538\":\"58#_2-函数式接口\",\"539\":\"58#_3-方法引用\",\"540\":\"58#_4-接口默认方法和静态方法\",\"541\":\"58#_4-1-默认方法\",\"542\":\"58#_4-2-静态方法\",\"543\":\"58#_5-stream-api\",\"544\":\"58#_6-optional类\",\"545\":\"58#_7-新的日期时间api\",\"546\":\"58#知识扩展\",\"547\":\"58#_1-设计思想\",\"548\":\"58#_1-函数式编程范式的引入\",\"549\":\"58#_2-接口演进与向后兼容性\",\"550\":\"58#_3-stream-api的设计哲学\",\"551\":\"58#_2-避坑指南\",\"552\":\"58#_1-lambda表达式中的变量捕获\",\"553\":\"58#_2-stream-api的陷阱\",\"554\":\"58#_3-optional类的正确使用\",\"555\":\"58#_3-深度思考题\",\"556\":\"58#思考题1-java-8的lambda表达式是如何实现的-与匿名内部类有何区别\",\"557\":\"58#思考题2-如何在java-8中实现函数式接口的组合\",\"558\":\"59\",\"559\":\"59#概述\",\"560\":\"59#知识扩展\",\"561\":\"59#_1-设计思想\",\"562\":\"59#_1-向后兼容性优先\",\"563\":\"59#_2-模块化与标准化\",\"564\":\"59#_3-开源与社区驱动\",\"565\":\"59#_2-避坑指南\",\"566\":\"59#_1-版本迁移问题\",\"567\":\"59#_2-依赖管理陷阱\",\"568\":\"59#_3-框架选择策略\",\"569\":\"59#_3-深度思考题\",\"570\":\"59#思考题1-java生态系统如何保持向后兼容性的同时实现创新\",\"571\":\"59#思考题2-微服务架构对java生态系统产生了哪些影响\",\"572\":\"59#知识要点\",\"573\":\"59#_1-java语言与jdk的演进\",\"574\":\"59#_1-java的诞生与早期发展-1995-2004\",\"575\":\"59#_2-java-8的里程碑式更新-2014\",\"576\":\"59#_2-企业级java平台的演进\",\"577\":\"59#_1-从j2ee到jakarta-ee\",\"578\":\"59#_2-核心规范发展\",\"579\":\"59#_3-框架生态的崛起\",\"580\":\"59#_1-spring-framework的发展\",\"581\":\"59#_2-orm框架的演进\",\"582\":\"59#_4-构建工具的演变\",\"583\":\"59#_1-ant-2000年\",\"584\":\"59#_2-maven-2004年\",\"585\":\"59#_3-gradle-2012年\",\"586\":\"60\",\"587\":\"60#核心理论\",\"588\":\"60#_1-1-并发与并行的区别\",\"589\":\"60#_1-2-线程与进程的关系\",\"590\":\"60#_1-3-并发编程的挑战\",\"591\":\"60#代码实践\",\"592\":\"60#_2-1-创建线程的三种方式\",\"593\":\"60#_2-2-线程安全的计数器实现\",\"594\":\"60#设计思想\",\"595\":\"60#_3-1-并发编程模型\",\"596\":\"60#_3-2-不可变对象设计\",\"597\":\"60#_3-3-线程池设计理念\",\"598\":\"60#避坑指南\",\"599\":\"60#_4-1-synchronized关键字的正确使用\",\"600\":\"60#_4-2-volatile关键字的局限性\",\"601\":\"60#_4-3-threadlocal的内存泄漏风险\",\"602\":\"60#深度思考题\",\"603\":\"61\",\"604\":\"61#核心理论\",\"605\":\"61#_1-1-线程生命周期\",\"606\":\"61#_1-2-线程调度机制\",\"607\":\"61#_1-3-线程中断机制\",\"608\":\"61#代码实践\",\"609\":\"61#_2-1-线程状态转换示例\",\"610\":\"61#_2-2-线程中断处理\",\"611\":\"61#设计思想\",\"612\":\"61#_3-1-线程协作模式\",\"613\":\"61#_3-2-线程安全的单例模式\",\"614\":\"61#避坑指南\",\"615\":\"61#_4-1-线程启动与运行的区别\",\"616\":\"61#_4-2-避免线程优先级反转\",\"617\":\"61#_4-3-正确停止线程\",\"618\":\"61#深度思考题\",\"619\":\"62\",\"620\":\"62#核心理论\",\"621\":\"62#_1-1-线程池的工作原理\",\"622\":\"62#_1-2-线程池的核心参数\",\"623\":\"62#_1-3-常见线程池类型\",\"624\":\"62#代码实践\",\"625\":\"62#_2-1-自定义线程池实现\",\"626\":\"62#_2-2-线程池监控与调优\",\"627\":\"62#设计思想\",\"628\":\"62#_3-1-线程池的设计模式\",\"629\":\"62#_3-2-线程池参数调优策略\",\"630\":\"62#避坑指南\",\"631\":\"62#_4-1-避免使用executors创建线程池\",\"632\":\"62#_4-2-正确处理线程池中的异常\",\"633\":\"62#_4-3-线程池的优雅关闭\",\"634\":\"62#深度思考题\",\"635\":\"63\",\"636\":\"63#核心理论\",\"637\":\"63#_1-1-锁的基本概念\",\"638\":\"63#_1-2-锁的分类\",\"639\":\"63#_1-3-aqs框架原理\",\"640\":\"63#代码实践\",\"641\":\"63#_2-1-synchronized关键字使用场景\",\"642\":\"63#_2-2-reentrantlock实现生产者-消费者模型\",\"643\":\"63#_2-3-读写锁优化并发读性能\",\"644\":\"63#设计思想\",\"645\":\"63#_3-1-锁优化技术\",\"646\":\"63#_3-2-无锁编程思想\",\"647\":\"63#避坑指南\",\"648\":\"63#_4-1-死锁的产生与避免\",\"649\":\"63#_4-2-synchronized与lock的选择\",\"650\":\"63#_4-3-锁的过度使用\",\"651\":\"63#深度思考题\",\"652\":\"64\",\"653\":\"64#核心理论\",\"654\":\"64#_1-1-并发关键字概述\",\"655\":\"64#_1-2-关键字的内存语义\",\"656\":\"64#_1-3-happens-before规则\",\"657\":\"64#代码实践\",\"658\":\"64#_2-1-volatile关键字的正确使用\",\"659\":\"64#_2-2-synchronized与volatile的组合使用\",\"660\":\"64#_2-3-wait-notify实现线程协作\",\"661\":\"64#设计思想\",\"662\":\"64#_3-1-关键字的底层实现\",\"663\":\"64#_3-2-无锁编程与cas\",\"664\":\"64#避坑指南\",\"665\":\"64#_4-1-volatile的误用\",\"666\":\"64#_4-2-synchronized的使用陷阱\",\"667\":\"64#_4-3-wait-notify的正确姿势\",\"668\":\"64#深度思考题\",\"669\":\"65\",\"670\":\"65#核心理论\",\"671\":\"65#_1-1-原子类的概念与作用\",\"672\":\"65#_1-2-原子类的分类\",\"673\":\"65#_1-3-cas操作原理\",\"674\":\"65#代码实践\",\"675\":\"65#_2-1-基本类型原子类使用示例\",\"676\":\"65#_2-2-解决aba问题的atomicstampedreference\",\"677\":\"65#_2-3-高性能累加器longadder\",\"678\":\"65#设计思想\",\"679\":\"65#_3-1-原子类的无锁设计\",\"680\":\"65#_3-2-longadder的分段累加设计\",\"681\":\"65#_3-3-原子类与不可变对象\",\"682\":\"65#避坑指南\",\"683\":\"65#_4-1-cas的aba问题\",\"684\":\"65#_4-2-原子类的过度使用\",\"685\":\"65#_4-3-longadder的内存开销\",\"686\":\"65#深度思考题\",\"687\":\"66\",\"688\":\"66#核心理论\",\"689\":\"66#_1-1-jvm定义与作用\",\"690\":\"66#_1-2-jvm架构组成\",\"691\":\"66#_1-3-jvm运行时数据区域\",\"692\":\"66#代码实践\",\"693\":\"66#_2-1-查看jvm内存结构示例\",\"694\":\"66#_2-2-jvm参数设置与内存监控\",\"695\":\"66#设计思想\",\"696\":\"66#_3-1-jvm跨平台设计理念\",\"697\":\"66#_3-2-栈与堆的分离设计\",\"698\":\"66#_3-3-垃圾回收机制设计\",\"699\":\"66#避坑指南\",\"700\":\"66#_4-1-堆内存溢出-oom\",\"701\":\"66#_4-2-栈溢出-stackoverflowerror\",\"702\":\"66#_4-3-方法区溢出\",\"703\":\"66#深度思考题\",\"704\":\"67\",\"705\":\"67#核心理论\",\"706\":\"67#_1-1-jvm内存区域划分\",\"707\":\"67#_1-2-各内存区域详解\",\"708\":\"67#_1-3-内存分配策略\",\"709\":\"67#代码实践\",\"710\":\"67#_2-1-内存区域oom异常演示\",\"711\":\"67#_2-2-对象内存布局分析\",\"712\":\"67#设计思想\",\"713\":\"67#_3-1-内存分代回收思想\",\"714\":\"67#_3-2-栈帧结构设计\",\"715\":\"67#_3-3-元空间替代永久代的设计考量\",\"716\":\"67#避坑指南\",\"717\":\"67#_4-1-堆内存参数设置\",\"718\":\"67#_4-2-大对象处理\",\"719\":\"67#_4-3-元空间优化\",\"720\":\"67#深度思考题\",\"721\":\"68\",\"722\":\"68#核心理论\",\"723\":\"68#_1-1-类文件格式概述\",\"724\":\"68#_1-2-类文件结构详解\",\"725\":\"68#_1-3-常量池类型\",\"726\":\"68#代码实践\",\"727\":\"68#_2-1-查看类文件结构\",\"728\":\"68#_2-2-解析常量池示例\",\"729\":\"68#_2-3-自定义类加载器读取类文件\",\"730\":\"68#设计思想\",\"731\":\"68#_3-1-类文件的二进制格式设计\",\"732\":\"68#_3-2-常量池的共享设计\",\"733\":\"68#_3-3-属性表的可扩展性设计\",\"734\":\"68#避坑指南\",\"735\":\"68#_4-1-版本号不兼容问题\",\"736\":\"68#_4-2-常量池溢出\",\"737\":\"68#_4-3-类文件验证失败\",\"738\":\"68#深度思考题\",\"739\":\"69\",\"740\":\"69#核心理论\",\"741\":\"69#_1-1-类加载的生命周期\",\"742\":\"69#_1-2-类加载的双亲委派模型\",\"743\":\"69#_1-3-类初始化时机\",\"744\":\"69#代码实践\",\"745\":\"69#_2-1-双亲委派模型演示\",\"746\":\"69#_2-2-自定义类加载器实现\",\"747\":\"69#_2-3-打破双亲委派模型\",\"748\":\"69#设计思想\",\"749\":\"69#_3-1-双亲委派模型的安全设计\",\"750\":\"69#_3-2-类加载器的隔离性设计\",\"751\":\"69#_3-3-延迟加载与按需加载\",\"752\":\"69#避坑指南\",\"753\":\"69#_4-1-类加载器泄漏\",\"754\":\"69#_4-2-双亲委派模型的局限性\",\"755\":\"69#_4-3-类版本冲突\",\"756\":\"69#深度思考题\",\"757\":\"70\",\"758\":\"70#核心理论\",\"759\":\"70#_1-1-垃圾回收基本概念\",\"760\":\"70#_1-2-对象存活判定算法\",\"761\":\"70#_1-2-1-引用计数法\",\"762\":\"70#_1-2-2-可达性分析算法\",\"763\":\"70#_1-3-垃圾回收算法\",\"764\":\"70#_1-3-1-标记-清除算法-mark-sweep\",\"765\":\"70#_1-3-2-标记-复制算法-mark-copy\",\"766\":\"70#_1-3-3-标记-整理算法-mark-compact\",\"767\":\"70#_1-3-4-分代收集算法\",\"768\":\"70#_1-4-垃圾收集器\",\"769\":\"70#_1-4-1-新生代收集器\",\"770\":\"70#_1-4-2-老年代收集器\",\"771\":\"70#代码实践\",\"772\":\"70#_2-1-查看jvm默认垃圾收集器\",\"773\":\"70#_2-2-手动触发垃圾回收-不推荐在生产环境使用\",\"774\":\"70#_2-3-分析gc日志\",\"775\":\"70#设计思想\",\"776\":\"70#_3-1-分代回收的设计理念\",\"777\":\"70#_3-2-cms收集器的并发设计\",\"778\":\"70#_3-3-g1收集器的region化内存布局\",\"779\":\"70#避坑指南\",\"780\":\"70#_4-1-不要过度依赖system-gc\",\"781\":\"70#_4-2-避免内存泄漏\",\"782\":\"70#_4-3-合理设置堆内存大小\",\"783\":\"70#_4-4-cms收集器的常见问题\",\"784\":\"70#深度思考题\",\"785\":\"71\",\"786\":\"71#核心理论\",\"787\":\"71#_1-1-jvm参数分类\",\"788\":\"71#_1-1-1-标准参数-standard-options\",\"789\":\"71#_1-1-2-非标准参数-non-standard-options\",\"790\":\"71#_1-1-3-高级参数-advanced-options\",\"791\":\"71#_1-2-内存管理参数\",\"792\":\"71#_1-2-1-堆内存参数\",\"793\":\"71#_1-2-2-非堆内存参数\",\"794\":\"71#_1-3-gc相关参数\",\"795\":\"71#_1-3-1-垃圾收集器选择\",\"796\":\"71#_1-3-2-gc日志参数\",\"797\":\"71#_1-3-3-gc调优参数\",\"798\":\"71#_1-4-其他常用参数\",\"799\":\"71#代码实践\",\"800\":\"71#_2-1-查看jvm参数\",\"801\":\"71#_2-1-1-查看jvm默认参数\",\"802\":\"71#_2-1-2-查看进程jvm参数\",\"803\":\"71#_2-2-设置jvm参数示例\",\"804\":\"71#_2-2-1-基本堆内存配置\",\"805\":\"71#_2-2-2-g1收集器配置\",\"806\":\"71#_2-2-3-生产环境常用配置\",\"807\":\"71#_2-3-分析jvm参数配置\",\"808\":\"71#设计思想\",\"809\":\"71#_3-1-参数设计的权衡原则\",\"810\":\"71#_3-2-分代思想在参数中的体现\",\"811\":\"71#_3-3-自适应调优理念\",\"812\":\"71#避坑指南\",\"813\":\"71#_4-1-堆内存设置不当\",\"814\":\"71#_4-2-元空间溢出\",\"815\":\"71#_4-3-过度调优\",\"816\":\"71#_4-4-忽略gc日志\",\"817\":\"71#_4-5-错误使用废弃参数\",\"818\":\"71#深度思考题\",\"819\":\"72\",\"820\":\"72#核心理论\",\"821\":\"72#_1-1-jvm参数分类\",\"822\":\"72#_1-1-1-标准参数-standard-options\",\"823\":\"72#_1-1-2-非标准参数-non-standard-options\",\"824\":\"72#_1-1-3-高级参数-advanced-options\",\"825\":\"72#_1-2-内存管理参数\",\"826\":\"72#_1-2-1-堆内存参数\",\"827\":\"72#_1-2-2-非堆内存参数\",\"828\":\"72#_1-3-gc相关参数\",\"829\":\"72#_1-3-1-垃圾收集器选择\",\"830\":\"72#_1-3-2-gc日志参数\",\"831\":\"72#_1-3-3-gc调优参数\",\"832\":\"72#_1-4-其他常用参数\",\"833\":\"72#代码实践\",\"834\":\"72#_2-1-查看jvm参数\",\"835\":\"72#_2-1-1-查看jvm默认参数\",\"836\":\"72#_2-1-2-查看进程jvm参数\",\"837\":\"72#_2-2-设置jvm参数示例\",\"838\":\"72#_2-2-1-基本堆内存配置\",\"839\":\"72#_2-2-2-g1收集器配置\",\"840\":\"72#_2-2-3-生产环境常用配置\",\"841\":\"72#_2-3-分析jvm参数配置\",\"842\":\"72#设计思想\",\"843\":\"72#_3-1-参数设计的权衡原则\",\"844\":\"72#_3-2-分代思想在参数中的体现\",\"845\":\"72#_3-3-自适应调优理念\",\"846\":\"72#避坑指南\",\"847\":\"72#_4-1-堆内存设置不当\",\"848\":\"72#_4-2-元空间溢出\",\"849\":\"72#_4-3-过度调优\",\"850\":\"72#_4-4-忽略gc日志\",\"851\":\"72#_4-5-错误使用废弃参数\",\"852\":\"72#深度思考题\",\"853\":\"73\",\"854\":\"73#核心理论\",\"855\":\"73#_1-1-jvm参数分类\",\"856\":\"73#_1-1-1-标准参数-standard-options\",\"857\":\"73#_1-1-2-非标准参数-non-standard-options\",\"858\":\"73#_1-1-3-高级参数-advanced-options\",\"859\":\"73#_1-2-内存管理参数\",\"860\":\"73#_1-2-1-堆内存参数\",\"861\":\"73#_1-2-2-非堆内存参数\",\"862\":\"73#_1-3-gc相关参数\",\"863\":\"73#_1-3-1-垃圾收集器选择\",\"864\":\"73#_1-3-2-gc日志参数\",\"865\":\"73#_1-3-3-gc调优参数\",\"866\":\"73#_1-4-其他常用参数\",\"867\":\"73#代码实践\",\"868\":\"73#_2-1-查看jvm参数\",\"869\":\"73#_2-1-1-查看jvm默认参数\",\"870\":\"73#_2-1-2-查看进程jvm参数\",\"871\":\"73#_2-2-设置jvm参数示例\",\"872\":\"73#_2-2-1-基本堆内存配置\",\"873\":\"73#_2-2-2-g1收集器配置\",\"874\":\"73#_2-2-3-生产环境常用配置\",\"875\":\"73#_2-3-分析jvm参数配置\",\"876\":\"73#设计思想\",\"877\":\"73#_3-1-参数设计的权衡原则\",\"878\":\"73#_3-2-分代思想在参数中的体现\",\"879\":\"73#_3-3-自适应调优理念\",\"880\":\"73#避坑指南\",\"881\":\"73#_4-1-堆内存设置不当\",\"882\":\"73#_4-2-元空间溢出\",\"883\":\"73#_4-3-过度调优\",\"884\":\"73#_4-4-忽略gc日志\",\"885\":\"73#_4-5-错误使用废弃参数\",\"886\":\"73#深度思考题\",\"887\":\"74\",\"888\":\"74#核心理论\",\"889\":\"74#_1-1-jvm参数分类\",\"890\":\"74#_1-1-1-标准参数-standard-options\",\"891\":\"74#_1-1-2-非标准参数-non-standard-options\",\"892\":\"74#_1-1-3-高级参数-advanced-options\",\"893\":\"74#_1-2-内存管理参数\",\"894\":\"74#_1-2-1-堆内存参数\",\"895\":\"74#_1-2-2-非堆内存参数\",\"896\":\"74#_1-3-gc相关参数\",\"897\":\"74#_1-3-1-垃圾收集器选择\",\"898\":\"74#_1-3-2-gc日志参数\",\"899\":\"74#_1-3-3-gc调优参数\",\"900\":\"74#_1-4-其他常用参数\",\"901\":\"74#代码实践\",\"902\":\"74#_2-1-查看jvm参数\",\"903\":\"74#_2-1-1-查看jvm默认参数\",\"904\":\"74#_2-1-2-查看进程jvm参数\",\"905\":\"74#_2-2-设置jvm参数示例\",\"906\":\"74#_2-2-1-基本堆内存配置\",\"907\":\"74#_2-2-2-g1收集器配置\",\"908\":\"74#_2-2-3-生产环境常用配置\",\"909\":\"74#_2-3-分析jvm参数配置\",\"910\":\"74#设计思想\",\"911\":\"74#_3-1-参数设计的权衡原则\",\"912\":\"74#_3-2-分代思想在参数中的体现\",\"913\":\"74#_3-3-自适应调优理念\",\"914\":\"74#避坑指南\",\"915\":\"74#_4-1-堆内存设置不当\",\"916\":\"74#_4-2-元空间溢出\",\"917\":\"74#_4-3-过度调优\",\"918\":\"74#_4-4-忽略gc日志\",\"919\":\"74#_4-5-错误使用废弃参数\",\"920\":\"74#深度思考题\",\"921\":\"75\",\"922\":\"75#概述\",\"923\":\"75#知识要点\",\"924\":\"75#_1-依赖声明\",\"925\":\"75#_2-依赖范围\",\"926\":\"75#_3-依赖传递\",\"927\":\"75#_4-依赖冲突\",\"928\":\"75#_5-依赖排除\",\"929\":\"75#知识扩展\",\"930\":\"75#设计思想\",\"931\":\"75#避坑指南\",\"932\":\"75#深度思考题\",\"933\":\"76\",\"934\":\"76#概述\",\"935\":\"76#知识要点\",\"936\":\"76#_1-pom文件\",\"937\":\"76#_2-坐标系统\",\"938\":\"76#_3-依赖管理\",\"939\":\"76#_4-仓库机制\",\"940\":\"76#_5-生命周期\",\"941\":\"76#_6-插件系统\",\"942\":\"76#知识扩展\",\"943\":\"76#设计思想\",\"944\":\"76#避坑指南\",\"945\":\"76#深度思考题\",\"946\":\"77\",\"947\":\"77#概述\",\"948\":\"77#知识要点\",\"949\":\"77#_1-生命周期优化\",\"950\":\"77#跳过测试\",\"951\":\"77#增量构建\",\"952\":\"77#_2-依赖管理优化\",\"953\":\"77#排除不必要的依赖\",\"954\":\"77#统一管理依赖版本\",\"955\":\"77#_3-插件配置优化\",\"956\":\"77#配置编译器插件\",\"957\":\"77#配置构建缓存\",\"958\":\"77#_4-构建性能优化\",\"959\":\"77#并行构建\",\"960\":\"77#离线构建\",\"961\":\"77#_5-多模块项目优化\",\"962\":\"77#模块拆分\",\"963\":\"77#依赖继承\",\"964\":\"77#知识扩展\",\"965\":\"77#设计思想\",\"966\":\"77#避坑指南\",\"967\":\"77#深度思考题\",\"968\":\"78\",\"969\":\"78#概述\",\"970\":\"78#知识要点\",\"971\":\"78#_1-本地仓库\",\"972\":\"78#本地仓库的位置\",\"973\":\"78#配置本地仓库\",\"974\":\"78#_2-中央仓库\",\"975\":\"78#中央仓库的地址\",\"976\":\"78#中央仓库的特点\",\"977\":\"78#_3-私服仓库\",\"978\":\"78#私服仓库的优点\",\"979\":\"78#常用的私服仓库\",\"980\":\"78#_4-镜像仓库\",\"981\":\"78#配置镜像仓库\",\"982\":\"78#常用的镜像仓库\",\"983\":\"78#_5-仓库配置\",\"984\":\"78#配置远程仓库\",\"985\":\"78#配置快照仓库\",\"986\":\"78#知识扩展\",\"987\":\"78#设计思想\",\"988\":\"78#避坑指南\",\"989\":\"78#深度思考题\",\"990\":\"79\",\"991\":\"79#一、注册jira账号\",\"992\":\"79#二、创建issue问题工单\",\"993\":\"79#三、确认回复邮件\",\"994\":\"79#四、上传至中央仓库\",\"995\":\"79#_1、上传snapshot版本-快照版本\",\"996\":\"79#下载gpg签名工具\",\"997\":\"79#命令生成秘钥\",\"998\":\"79#配置settings-xml\",\"999\":\"79#配置pom-xml\",\"1000\":\"79#上传项目\",\"1001\":\"79#_2、上传release版本-稳定版本\",\"1002\":\"79#修改-settings-xml\",\"1003\":\"79#修改-pom-xml\",\"1004\":\"79#发布-release\",\"1005\":\"79#常见报错问题\",\"1006\":\"80\",\"1007\":\"80#概述\",\"1008\":\"80#知识要点\",\"1009\":\"80#_1-冲突原因\",\"1010\":\"80#_1-1-传递依赖\",\"1011\":\"80#_1-2-版本不兼容\",\"1012\":\"80#_1-3-重复依赖\",\"1013\":\"80#_2-解决策略\",\"1014\":\"80#_2-1-最短路径优先\",\"1015\":\"80#_2-2-声明顺序优先\",\"1016\":\"80#_2-3-排除依赖\",\"1017\":\"80#_2-4-版本锁定\",\"1018\":\"80#_2-5-直接依赖\",\"1019\":\"80#_3-冲突分析\",\"1020\":\"80#_3-1-使用mvn-dependency-tree命令\",\"1021\":\"80#_3-2-使用ide工具\",\"1022\":\"80#_4-最佳实践\",\"1023\":\"80#_4-1-统一版本管理\",\"1024\":\"80#_4-2-最小化依赖\",\"1025\":\"80#_4-3-定期检查依赖\",\"1026\":\"80#_4-4-使用可靠的依赖\",\"1027\":\"80#知识扩展\",\"1028\":\"80#设计思想\",\"1029\":\"80#避坑指南\",\"1030\":\"80#深度思考题\",\"1031\":\"81\",\"1032\":\"81#核心理论\",\"1033\":\"81#_1-1-java语法体系概览\",\"1034\":\"81#_1-2-语法基础核心考点\",\"1035\":\"81#代码实践\",\"1036\":\"81#_2-1-关键字应用场景\",\"1037\":\"81#_2-1-1-static关键字用法\",\"1038\":\"81#_2-1-2-final关键字用法\",\"1039\":\"81#_2-2-数据类型与类型转换\",\"1040\":\"81#_2-2-1-基本类型与包装类\",\"1041\":\"81#_2-2-2-string特性与操作\",\"1042\":\"81#_2-3-控制流程与异常处理\",\"1043\":\"81#_2-3-1-循环结构效率对比\",\"1044\":\"81#_2-3-2-异常处理最佳实践\",\"1045\":\"81#设计思想\",\"1046\":\"81#_3-1-java语法设计哲学\",\"1047\":\"81#_3-2-语法特性背后的设计考量\",\"1048\":\"81#_3-2-1-string不可变性设计\",\"1049\":\"81#_3-2-2-自动装箱与拆箱的权衡\",\"1050\":\"81#避坑指南\",\"1051\":\"81#_4-1-关键字使用误区\",\"1052\":\"81#_4-1-1-static关键字常见错误\",\"1053\":\"81#_4-1-2-final关键字使用陷阱\",\"1054\":\"81#_4-2-类型转换与字符串操作问题\",\"1055\":\"81#_4-2-1-类型转换异常处理\",\"1056\":\"81#_4-2-2-string操作性能问题\",\"1057\":\"81#深度思考题\",\"1058\":\"81#思考题1-java中的值传递与引用传递区别\",\"1059\":\"81#思考题2-jdk-8到jdk-21的语法特性演进\",\"1060\":\"82\",\"1061\":\"82#概述\",\"1062\":\"82#核心理论\",\"1063\":\"82#_1-注解的本质与分类\",\"1064\":\"82#_2-元注解详解\",\"1065\":\"82#_3-注解的生命周期\",\"1066\":\"82#_4-jdk8注解新特性\",\"1067\":\"82#代码实践\",\"1068\":\"82#面试题1-实现一个简单的日志注解\",\"1069\":\"82#面试题2-实现一个基于注解的参数校验器\",\"1070\":\"82#设计思想\",\"1071\":\"82#_1-元数据驱动开发\",\"1072\":\"82#_2-aop与注解结合\",\"1073\":\"82#_3-编译期代码生成\",\"1074\":\"82#_4-约定优于配置\",\"1075\":\"82#避坑指南\",\"1076\":\"82#_1-常见错误案例\",\"1077\":\"82#错误1-错误的保留策略\",\"1078\":\"82#错误2-误解-inherited注解\",\"1079\":\"82#错误3-注解属性默认值问题\",\"1080\":\"82#_2-性能优化技巧\",\"1081\":\"82#技巧1-缓存注解解析结果\",\"1082\":\"82#技巧2-优先使用编译期注解处理器\",\"1083\":\"82#技巧3-减少高频代码中的注解解析\",\"1084\":\"82#_3-版本兼容性处理\",\"1085\":\"82#深度思考题\",\"1086\":\"82#思考题1-注解与xml配置相比有哪些优缺点-在什么场景下应该选择注解-什么场景下应该选择xml\",\"1087\":\"82#思考题2-如何实现一个注解处理器-在编译期检查代码规范\",\"1088\":\"83\",\"1089\":\"83#概述\",\"1090\":\"83#核心理论\",\"1091\":\"83#_1-sip协议基本概念\",\"1092\":\"83#_2-sip消息结构\",\"1093\":\"83#代码实践\",\"1094\":\"83#_1-sip客户端基本实现\",\"1095\":\"83#_2-sip消息解析工具类\",\"1096\":\"83#设计思想\",\"1097\":\"83#_1-sip协议设计原则\",\"1098\":\"83#_1-简洁性\",\"1099\":\"83#_2-模块化\",\"1100\":\"83#_3-无状态性\",\"1101\":\"83#_2-sip与其他协议的对比\",\"1102\":\"83#避坑指南\",\"1103\":\"83#_1-网络环境问题\",\"1104\":\"83#_1-nat穿透问题\",\"1105\":\"83#_2-防火墙限制\",\"1106\":\"83#_2-协议实现问题\",\"1107\":\"83#_1-消息解析异常\",\"1108\":\"83#_2-事务状态管理\",\"1109\":\"83#深度思考题\",\"1110\":\"83#_1-设计一个支持百万级并发的sip服务器需要考虑哪些关键技术点\",\"1111\":\"83#_1-协议处理层优化\",\"1112\":\"83#_2-架构设计要点\",\"1113\":\"83#_3-性能优化策略\",\"1114\":\"83#_2-如何解决sip协议在移动网络环境下的可靠性问题\",\"1115\":\"83#_1-信令优化\",\"1116\":\"83#_2-会话保持\",\"1117\":\"83#_3-网络适配\",\"1118\":\"84\",\"1119\":\"84#概述\",\"1120\":\"84#知识要点\",\"1121\":\"84#_1-并发基础概念\",\"1122\":\"84#_1-1-什么是线程和进程-它们的区别是什么\",\"1123\":\"84#_1-2-什么是并发和并行\",\"1124\":\"84#_2-线程安全\",\"1125\":\"84#_2-1-什么是线程安全-如何实现线程安全\",\"1126\":\"84#_2-2-什么是原子操作-java-中的原子类有哪些\",\"1127\":\"84#_3-锁机制\",\"1128\":\"84#_3-1-什么是死锁-如何避免死锁\",\"1129\":\"84#_3-2-synchronized-和-reentrantlock-的区别是什么\",\"1130\":\"84#_4-并发容器\",\"1131\":\"84#_4-1-并发容器和普通容器的区别是什么\",\"1132\":\"84#_4-2-java-中的并发容器有哪些\",\"1133\":\"84#_5-线程池\",\"1134\":\"84#_5-1-为什么要使用线程池\",\"1135\":\"84#_5-2-java-中的线程池有哪些类型\",\"1136\":\"84#知识扩展\",\"1137\":\"84#设计思想\",\"1138\":\"84#避坑指南\",\"1139\":\"84#深度思考题\",\"1140\":\"85\",\"1141\":\"85#概述\",\"1142\":\"85#知识要点\",\"1143\":\"85#_1-内存结构\",\"1144\":\"85#堆\",\"1145\":\"85#栈\",\"1146\":\"85#_2-类加载机制\",\"1147\":\"85#类加载器\",\"1148\":\"85#_3-垃圾回收\",\"1149\":\"85#垃圾判断算法\",\"1150\":\"85#垃圾回收算法\",\"1151\":\"85#_4-性能优化\",\"1152\":\"85#知识扩展\",\"1153\":\"85#设计思想\",\"1154\":\"85#避坑指南\",\"1155\":\"85#深度思考题\",\"1156\":\"86\",\"1157\":\"86#概述\",\"1158\":\"86#知识要点\",\"1159\":\"86#一、数组经典面试题\",\"1160\":\"86#_1-数组的初始化与遍历\",\"1161\":\"86#_2-数组排序与查找\",\"1162\":\"86#_3-二维数组的螺旋遍历\",\"1163\":\"86#二、字符串经典面试题\",\"1164\":\"86#_1-字符串反转\",\"1165\":\"86#_2-判断字符串是否为回文\",\"1166\":\"86#_3-字符串中的第一个唯一字符\",\"1167\":\"86#知识扩展\",\"1168\":\"86#设计思想\",\"1169\":\"86#避坑指南\",\"1170\":\"86#深度思考题\",\"1171\":\"87\",\"1172\":\"87#核心理论\",\"1173\":\"87#_1-1-集合框架体系结构\",\"1174\":\"87#_1-2-集合框架核心接口对比\",\"1175\":\"87#_1-3-面试高频考点分类\",\"1176\":\"87#代码实践\",\"1177\":\"87#_2-1-集合初始化与遍历方式\",\"1178\":\"87#_2-1-1-常见集合初始化\",\"1179\":\"87#_2-1-2-集合遍历方式性能对比\",\"1180\":\"87#_2-2-高频面试题实现\",\"1181\":\"87#_2-2-1-hashmap手写实现-简化版\",\"1182\":\"87#_2-2-2-集合去重与排序\",\"1183\":\"87#设计思想\",\"1184\":\"87#_3-1-集合框架设计模式应用\",\"1185\":\"87#_3-1-1-迭代器模式-iterator\",\"1186\":\"87#_3-1-2-装饰器模式-decorator\",\"1187\":\"87#_3-2-集合选择策略\",\"1188\":\"87#避坑指南\",\"1189\":\"87#_4-1-集合使用常见错误\",\"1190\":\"87#_4-1-1-concurrentmodificationexception异常\",\"1191\":\"87#_4-1-2-集合转换与不可变性问题\",\"1192\":\"87#_4-2-性能优化建议\",\"1193\":\"87#_4-2-1-初始容量设置\",\"1194\":\"87#_4-2-2-集合工具类使用陷阱\",\"1195\":\"87#深度思考题\",\"1196\":\"87#思考题1-hashmap在jdk-7和jdk-8中的实现差异及性能影响\",\"1197\":\"87#思考题2-如何实现一个线程安全的hashmap-对比concurrenthashmap的实现原理\",\"1198\":\"87#思考题3-集合框架在jdk-1-8到jdk-21的演进及新特性\",\"1199\":\"88\",\"1200\":\"88#概述\",\"1201\":\"88#知识要点\",\"1202\":\"88#_1-核心概念\",\"1203\":\"88#_1-1-封装\",\"1204\":\"88#_1-2-继承\",\"1205\":\"88#_1-3-多态\",\"1206\":\"88#_1-4-抽象\",\"1207\":\"88#_2-设计原则\",\"1208\":\"88#_2-1-单一职责原则\",\"1209\":\"88#_2-2-开闭原则\",\"1210\":\"88#_2-3-里氏替换原则\",\"1211\":\"88#_2-4-接口隔离原则\",\"1212\":\"88#_2-5-依赖倒置原则\",\"1213\":\"88#知识扩展\",\"1214\":\"88#设计思想\",\"1215\":\"88#避坑指南\",\"1216\":\"88#深度思考题\",\"1217\":\"89\",\"1218\":\"89#概述\",\"1219\":\"89#知识要点\",\"1220\":\"89#_1-io流基础概念辨析\",\"1221\":\"89#_1-1-字节流与字符流的区别\",\"1222\":\"89#_1-2-节点流与处理流的区别\",\"1223\":\"89#_2-核心api使用与实现原理\",\"1224\":\"89#_2-1-缓冲流的实现原理与性能优势\",\"1225\":\"89#_2-2-对象序列化与反序列化\",\"1226\":\"89#_3-nio核心组件与应用\",\"1227\":\"89#_3-1-nio与bio的本质区别\",\"1228\":\"89#_3-2-selector的工作原理\",\"1229\":\"89#知识扩展\",\"1230\":\"89#设计思想\",\"1231\":\"89#io流设计模式分析\",\"1232\":\"89#零拷贝技术原理\",\"1233\":\"89#避坑指南\",\"1234\":\"89#_1-资源未正确关闭\",\"1235\":\"89#_2-缓冲区使用不当\",\"1236\":\"89#_3-字符编码问题\",\"1237\":\"89#_4-selector空轮询问题\",\"1238\":\"89#深度思考题\",\"1239\":\"90\",\"1240\":\"90#概述\",\"1241\":\"90#知识要点\",\"1242\":\"90#_1-异常基础概念辨析\",\"1243\":\"90#_1-1-异常与错误的区别\",\"1244\":\"90#_1-2-受检异常与非受检异常的选择\",\"1245\":\"90#_2-异常处理机制深度解析\",\"1246\":\"90#_2-1-try-catch-finally执行顺序\",\"1247\":\"90#_2-2-try-with-resources实现原理\",\"1248\":\"90#_3-异常处理最佳实践面试题\",\"1249\":\"90#_3-1-如何设计自定义异常\",\"1250\":\"90#_3-2-异常处理对性能的影响\",\"1251\":\"90#知识扩展\",\"1252\":\"90#设计思想\",\"1253\":\"90#避坑指南\",\"1254\":\"90#深度思考题\",\"1255\":\"91\",\"1256\":\"91#概述\",\"1257\":\"91#知识要点\",\"1258\":\"91#_1-反射基础概念辨析\",\"1259\":\"91#_1-1-什么是反射\",\"1260\":\"91#_1-2-class对象是什么-有哪些获取方式\",\"1261\":\"91#_1-3-反射api主要包含哪些类\",\"1262\":\"91#_2-反射机制实现原理\",\"1263\":\"91#_2-1-反射的底层实现机制是什么\",\"1264\":\"91#_2-2-反射调用的性能为什么比直接调用差-如何优化\",\"1265\":\"91#_3-反射的应用场景\",\"1266\":\"91#_3-1-反射在框架开发中有哪些应用\",\"1267\":\"91#_3-2-反射与动态代理的关系是什么\",\"1268\":\"91#_4-反射常见面试题\",\"1269\":\"91#_4-1-如何通过反射获取和设置私有字段的值\",\"1270\":\"91#_4-2-如何通过反射调用私有方法\",\"1271\":\"91#_4-3-反射是否破坏了java的封装性-为什么\",\"1272\":\"91#知识扩展\",\"1273\":\"91#_1-设计思想\",\"1274\":\"91#_2-避坑指南\",\"1275\":\"91#_2-1-安全风险\",\"1276\":\"91#_2-2-性能问题\",\"1277\":\"91#_2-3-兼容性问题\",\"1278\":\"91#_3-深度思考题\",\"1279\":\"91#思考题1-为什么java中的class对象是单例的\",\"1280\":\"91#思考题2-如何通过反射创建数组\",\"1281\":\"91#思考题3-反射在java模块化系统-jigsaw-中有哪些限制\",\"1282\":\"92\",\"1283\":\"92#概述\",\"1284\":\"92#核心理论\",\"1285\":\"92#_1-泛型基础概念辨析\",\"1286\":\"92#_1-1-泛型的本质与作用\",\"1287\":\"92#_1-2-泛型与重载的区别\",\"1288\":\"92#_1-3-泛型与数组的对比\",\"1289\":\"92#_2-类型擦除深度解析\",\"1290\":\"92#_2-1-类型擦除的三个阶段\",\"1291\":\"92#_2-2-类型擦除引发的常见问题\",\"1292\":\"92#代码实践\",\"1293\":\"92#_1-泛型面试高频编程题\",\"1294\":\"92#_1-1-实现泛型单例模式\",\"1295\":\"92#_1-2-泛型方法实现两数交换\",\"1296\":\"92#_1-3-通配符应用-实现通用集合拷贝\",\"1297\":\"92#设计思想\",\"1298\":\"92#_1-泛型设计的开闭原则体现\",\"1299\":\"92#_2-泛型与依赖注入的协同\",\"1300\":\"92#避坑指南\",\"1301\":\"92#_1-避免泛型类型的无意识绕开\",\"1302\":\"92#_2-正确使用泛型通配符\",\"1303\":\"92#_3-泛型方法返回值的类型推断陷阱\",\"1304\":\"92#深度思考题\",\"1305\":\"92#思考题\",\"1306\":\"92#思考题回答\",\"1307\":\"93\",\"1308\":\"93#概述\",\"1309\":\"93#核心理论\",\"1310\":\"93#_1-tcp-ip协议深度解析\",\"1311\":\"93#_1-1-tcp三次握手与四次挥手\",\"1312\":\"93#_1-2-tcp可靠传输机制\",\"1313\":\"93#_2-java-io模型演进\",\"1314\":\"93#_2-1-bio-blocking-io\",\"1315\":\"93#_2-2-nio-non-blocking-io\",\"1316\":\"93#_2-3-aio-asynchronous-io\",\"1317\":\"93#_3-网络编程核心概念\",\"1318\":\"93#_3-1-阻塞与非阻塞\",\"1319\":\"93#_3-2-同步与异步\",\"1320\":\"93#_3-3-多路复用\",\"1321\":\"93#_3-4-零拷贝\",\"1322\":\"93#代码实践\",\"1323\":\"93#_1-网络编程常见面试题\",\"1324\":\"93#_1-1-实现简单的http服务器\",\"1325\":\"93#_1-2-解决tcp粘包问题\",\"1326\":\"93#_1-3-实现线程安全的连接池\",\"1327\":\"93#设计思想\",\"1328\":\"93#_1-reactor模式\",\"1329\":\"93#_2-网络编程中的设计模式\",\"1330\":\"93#_2-1-观察者模式\",\"1331\":\"93#_2-2-工厂模式\",\"1332\":\"93#_2-3-责任链模式\",\"1333\":\"93#_2-4-装饰器模式\",\"1334\":\"93#避坑指南\",\"1335\":\"93#_1-常见网络编程错误\",\"1336\":\"93#_1-1-连接泄漏\",\"1337\":\"93#_1-2-忽略异常处理\",\"1338\":\"93#_1-3-缓冲区使用不当\",\"1339\":\"93#_1-4-未设置so-timeout\",\"1340\":\"93#_2-性能优化建议\",\"1341\":\"93#_2-1-使用nio而非bio\",\"1342\":\"93#_2-2-合理设置缓冲区大小\",\"1343\":\"93#_2-3-使用连接池\",\"1344\":\"93#_2-4-启用tcp-nodelay\",\"1345\":\"93#_2-5-使用零拷贝技术\",\"1346\":\"93#_2-6-异步处理业务逻辑\",\"1347\":\"93#深度思考题\",\"1348\":\"94\",\"1349\":\"94#elk登录认证\",\"1350\":\"94#一、elasticsearch安全认证\",\"1351\":\"94#_1、编辑-elasticsearch-配置文件\",\"1352\":\"94#_2、加上开启验证功能配置\",\"1353\":\"94#_3、保存重启-elasticsearch-服务\",\"1354\":\"94#_4、设置密码\",\"1355\":\"94#_5、验证是否生效\",\"1356\":\"94#二、kibana安全认证\",\"1357\":\"94#_1、方法一\",\"1358\":\"94#_2、方法二\",\"1359\":\"94#_3、重启服务\",\"1360\":\"94#_4、、验证是否生效\",\"1361\":\"94#三、logstash安全认证\",\"1362\":\"94#_1、修改logstash配置文件\",\"1363\":\"94#_2、添加es账号和密码\",\"1364\":\"94#_3、重启服务-1\",\"1365\":\"94#四、修改用户密码-可选\",\"1366\":\"95\",\"1367\":\"95#各中间件默认端口\",\"1368\":\"95#设置开启自启动\",\"1369\":\"95#zookpeeper\",\"1370\":\"95#kafka\",\"1371\":\"95#elasticsearch\",\"1372\":\"95#logstash\",\"1373\":\"95#kibana\",\"1374\":\"95#扩展指令\",\"1375\":\"96\",\"1376\":\"96#什么是nginx\",\"1377\":\"96#为什么要用nginx\",\"1378\":\"96#为什么nginx性能这么高\",\"1379\":\"96#nginx怎么处理请求的\",\"1380\":\"96#什么是正向代理和反向代理\",\"1381\":\"96#使用-反向代理服务器的优点是什么\",\"1382\":\"96#nginx的优缺点\",\"1383\":\"96#nginx应用场景\",\"1384\":\"96#nginx目录结构有哪些\",\"1385\":\"96#nginx配置文件nginx-conf有哪些属性模块\",\"1386\":\"96#nginx静态资源\",\"1387\":\"96#如何用nginx解决前端跨域问题\",\"1388\":\"96#nginx虚拟主机怎么配置\",\"1389\":\"96#基于虚拟主机配置域名\",\"1390\":\"96#基于端口的虚拟主机\",\"1391\":\"96#location的作用是什么\",\"1392\":\"96#location的语法能说出来吗\",\"1393\":\"96#location正则案例\",\"1394\":\"96#限流怎么做的\",\"1395\":\"96#_1、正常限制访问频率-正常流量\",\"1396\":\"96#_2、突发限制访问频率-突发流量\",\"1397\":\"96#_3、-限制并发连接数\",\"1398\":\"96#漏桶流算法和令牌桶算法知道\",\"1399\":\"96#漏桶算法\",\"1400\":\"96#令牌桶算法\",\"1401\":\"96#为什么要做动静分离\",\"1402\":\"96#nginx怎么做的动静分离\",\"1403\":\"96#nginx负载均衡的算法怎么实现的-策略有哪些\",\"1404\":\"96#_1-轮询-默认\",\"1405\":\"96#_2-权重-weight\",\"1406\":\"96#_3-ip-hash-ip绑定\",\"1407\":\"96#_4-fair-第三方插件\",\"1408\":\"96#_5-url-hash-第三方插件\",\"1409\":\"96#nginx配置高可用性怎么配置\",\"1410\":\"96#nginx怎么判断别ip不可访问\",\"1411\":\"96#怎么限制浏览器访问\",\"1412\":\"96#rewrite全局变量是什么\",\"1413\":\"97\",\"1414\":\"97#_1、http与https的区别\",\"1415\":\"97#nginx配置https\",\"1416\":\"97#一、安装nginx的ssl模块\",\"1417\":\"97#二、配置ssl证书\",\"1418\":\"98\",\"1419\":\"98#以htpasswd为例\",\"1420\":\"98#一、安装生成密码工具\",\"1421\":\"98#二、生成密码文件\",\"1422\":\"98#三、查看密码文件\",\"1423\":\"98#四、修改配置文件拦截站点或请求\",\"1424\":\"98#五、重启nginx并验证是否访问受限\",\"1425\":\"98#以openssl为例\",\"1426\":\"98#一、新建-passwd文件\",\"1427\":\"98#二、修改nginx配置文件\",\"1428\":\"98#三、重启nginx并验证是否访问受限\",\"1429\":\"99\",\"1430\":\"99#_1-1、ajax介绍\",\"1431\":\"99#_1-2、原生js实现ajax\",\"1432\":\"99#_1-3、原生js实现ajax详解\",\"1433\":\"99#_1-4、jquery的get方式实现ajax\",\"1434\":\"99#_1-5、jquery的post方式实现ajax\",\"1435\":\"99#_1-6、jquery的通用方式实现ajax\",\"1436\":\"99#_1-7、小结\",\"1437\":\"99#_2-1、json回顾\",\"1438\":\"99#_2-2、json转换工具的介绍\",\"1439\":\"99#_2-3、json转换练习\",\"1440\":\"99#_2-4、小结\",\"1441\":\"99#_4-1、案例效果和环境准备\",\"1442\":\"99#_4-2、案例的分析\",\"1443\":\"99#_4-3、案例的实现\",\"1444\":\"99#_4-4、点击按钮分页\",\"1445\":\"100\",\"1446\":\"100#_1-1、jquery介绍\",\"1447\":\"100#_1-2、jquery快速入门\",\"1448\":\"100#_1-3、小结\",\"1449\":\"100#_2-1、js对象和jquery对象转换\",\"1450\":\"100#_2-2、事件的基本使用\",\"1451\":\"100#_2-3、时间的绑定和解绑\",\"1452\":\"100#_2-4、时间的切换\",\"1453\":\"100#_2-5、遍历操作\",\"1454\":\"100#_2-6、小结\",\"1455\":\"100#_3-1、基本选择器\",\"1456\":\"100#_3-2、层级选择器\",\"1457\":\"100#_3-3、属性选择器\",\"1458\":\"100#_3-4、过滤器选择器\",\"1459\":\"100#_3-5、表单属性选择器\",\"1460\":\"100#_3-6、小结\",\"1461\":\"100#_4-1、操作文本\",\"1462\":\"100#_4-2、操作对象\",\"1463\":\"100#_4-3、操作样式\",\"1464\":\"100#_4-4、操作属性\",\"1465\":\"100#_4-5、小结\",\"1466\":\"100#_5-1、案例效果\",\"1467\":\"100#_5-2、分析和实现\",\"1468\":\"100#_6-1、案例效果\",\"1469\":\"100#_6-2、动态切换小图的分析和实现\",\"1470\":\"100#_6-3、显示大图的分析和实现\",\"1471\":\"101\",\"1472\":\"101#注意事项\",\"1473\":\"101#一、yum安装\",\"1474\":\"101#_1、导入仓库源\",\"1475\":\"101#_2、查看可安装的软件包\",\"1476\":\"101#_3、选择-ml-或-lt-版本安装\",\"1477\":\"101#_4、查看现有内核启动顺序\",\"1478\":\"101#_5、修改默认启动项\",\"1479\":\"101#二、rpm安装\",\"1480\":\"101#_1、查找版本\",\"1481\":\"101#_2、共需要下载三个类型-rpm\",\"1482\":\"101#_3、安装内核\",\"1483\":\"101#_4、确认已安装内核版本\",\"1484\":\"101#_5、设置启动\",\"1485\":\"101#三、源码安装\",\"1486\":\"101#_1、安装核心软件包\",\"1487\":\"101#_2、创建内核编译目录\",\"1488\":\"101#_3、获取内核源码\",\"1489\":\"101#_4、解压内核代码\",\"1490\":\"101#_5、内核配置\",\"1491\":\"101#高级配置\",\"1492\":\"101#_6、编译和安装\",\"1493\":\"101#编译内核\",\"1494\":\"101#安装内核\",\"1495\":\"101#_7、设置启动\",\"1496\":\"101#四、卸载-降级-内核\",\"1497\":\"101#_1、查看系统当前内核版本\",\"1498\":\"101#_2、查看系统中全部内核\",\"1499\":\"101#_3、删除指定内核\",\"1500\":\"102\",\"1501\":\"103\",\"1502\":\"103#一、以ssh-ip直连的方式实现文件同步。\",\"1503\":\"103#二、以模块组件方式实现文件同步。\",\"1504\":\"103#三、定期实现文件同步\",\"1505\":\"104\",\"1506\":\"104#一、安装elasticsearch\",\"1507\":\"104#elk简介\",\"1508\":\"104#_1、拉取镜像\",\"1509\":\"104#_2、创建挂载目录\",\"1510\":\"104#_3、赋予权限\",\"1511\":\"104#_4、创建挂载es配置\",\"1512\":\"104#_5、运行elasticsearch\",\"1513\":\"104#_6、验证安装是否成功\",\"1514\":\"104#二、安装kibana\",\"1515\":\"104#_1、下载镜像\",\"1516\":\"104#_2、获取elasticsearch容器ip\",\"1517\":\"104#_3、新建配置文件\",\"1518\":\"104#_4、运行kibana\",\"1519\":\"104#_5、访问\",\"1520\":\"104#_6、检查kibana容器配置文件\",\"1521\":\"104#三、安装logstash\",\"1522\":\"104#_1、获取logstash镜像\",\"1523\":\"104#_2、编辑logstash-yml配置文件\",\"1524\":\"104#_3、编辑logstash-conf文件\",\"1525\":\"104#_4、配置修改后重启服务\",\"1526\":\"104#_5、运行logstash\",\"1527\":\"104#_6、测试es接收logstash数据\",\"1528\":\"104#四、安装kafka\",\"1529\":\"104#_1、启动zookeeper容器\",\"1530\":\"104#_2、启动kafka容器\",\"1531\":\"104#_3、测试kafka\",\"1532\":\"104#_4、创建topic\",\"1533\":\"104#_5、查看topic-list\",\"1534\":\"104#_6、发送消息\",\"1535\":\"104#_7、接收消息\",\"1536\":\"105\",\"1537\":\"105#_1、skywalking由三个部分组成\",\"1538\":\"105#_2、配置关系\",\"1539\":\"105#一、kubesphere创建oap\",\"1540\":\"105#_1、填写镜像路径\",\"1541\":\"105#_2、使用默认端口\",\"1542\":\"105#_3、填写环境变量-设置数据源\",\"1543\":\"105#二、kubesphere创建ui\",\"1544\":\"105#_1、填写镜像路径-1\",\"1545\":\"105#_2、使用默认端口-1\",\"1546\":\"105#_3、填写环境变量-连接oap\",\"1547\":\"105#_4、访问页面\",\"1548\":\"105#三、项目配置\",\"1549\":\"105#四、自定义镜像\",\"1550\":\"105#_1、下载对应版本skywalking-agent\",\"1551\":\"105#_2-、编写dockerfile\",\"1552\":\"105#_3、构建自定义镜像\",\"1553\":\"105#五、问题说明\",\"1554\":\"105#问题一\",\"1555\":\"105#原因分析\",\"1556\":\"105#问题二\",\"1557\":\"105#jdk字体类初始化异常问题-java-lang-noclassdeffounderror-could-not-initialize-class-sun-font-sunfontmanager\",\"1558\":\"105#问题三\",\"1559\":\"105#问题四\",\"1560\":\"105#kubesphere安装-es配置文件\",\"1561\":\"105#skywalking操作说明\",\"1562\":\"105#_1、访问skywalking-ui面板\",\"1563\":\"105#_2、访问演示接口\",\"1564\":\"105#日志接入\",\"1565\":\"106\",\"1566\":\"106#docker安装各软件-汇总\",\"1567\":\"106#一、docker安装oracle-12c\",\"1568\":\"106#_1、拉取oracle-12c镜像\",\"1569\":\"106#_2、创建并启动容器\",\"1570\":\"106#_3、修改oracle账号密码设置\",\"1571\":\"106#_4、物理机连接oracle-12c\",\"1572\":\"106#拓展\",\"1573\":\"106#oracle创建表空间与用户\",\"1574\":\"106#重启oracle服务\",\"1575\":\"106#更多常用\",\"1576\":\"106#二、docker安装mysql\",\"1577\":\"106#创建第一台mysql-1\",\"1578\":\"106#创建第二台mysql-2\",\"1579\":\"106#二、arm安装mysql-裸机\",\"1580\":\"106#_1、卸载\",\"1581\":\"106#_2、-下载\",\"1582\":\"106#_3、安装\",\"1583\":\"106#_4、-按照以下顺序安装需要的包\",\"1584\":\"106#_5、-初始化\",\"1585\":\"106#_6、-启动\",\"1586\":\"106#常见错误\",\"1587\":\"106#三、docker安装部署tomcat\",\"1588\":\"106#_1、搜索tomcat镜像\",\"1589\":\"106#_2、拉取tomcat镜像\",\"1590\":\"106#_3、创建容器-设置端口映射、目录映射\",\"1591\":\"106#_4、测试\",\"1592\":\"106#三、docker安装部署nginx\",\"1593\":\"106#_1、搜索nginx镜像\",\"1594\":\"106#_2、拉取nginx镜像\",\"1595\":\"106#_3、创建容器-设置端口映射、目录映射-1\",\"1596\":\"106#_4、测试-1\",\"1597\":\"106#四、docker安装部署redis\",\"1598\":\"106#_1、搜索redis镜像\",\"1599\":\"106#_2、拉取redis镜像\",\"1600\":\"106#_3、创建容器-设置端口映射\",\"1601\":\"106#_4、测试-2\",\"1602\":\"106#五、docker安装部署postgresql\",\"1603\":\"106#_1、搜索postgres镜像\",\"1604\":\"106#_2、拉取postgres镜像\",\"1605\":\"106#_3、创建挂载目录\",\"1606\":\"106#_4、创建容器-设置端口映射\",\"1607\":\"106#_5、修改密码-可选\",\"1608\":\"107\",\"1609\":\"107#一、安装前须知\",\"1610\":\"107#前提环境\",\"1611\":\"107#二、在线安装docker\",\"1612\":\"107#配置相关yum源\",\"1613\":\"107#安装docker\",\"1614\":\"107#启动docker\",\"1615\":\"107#配置加速\",\"1616\":\"107#三、离线安装docker\",\"1617\":\"107#下载安装包\",\"1618\":\"107#解压缩\",\"1619\":\"107#移动文件\",\"1620\":\"107#将docker注册为系统服务\",\"1621\":\"107#配置dcker仓库路径\",\"1622\":\"107#四、离线安装docker-compose\",\"1623\":\"107#下载安装包-1\",\"1624\":\"107#配置\",\"1625\":\"107#五、安装harbor-在线-离线\",\"1626\":\"107#_1、下载安装包拷贝到linux中\",\"1627\":\"107#_2、修改配置文件\",\"1628\":\"107#_3、执行安装脚本\",\"1629\":\"107#_4、查看镜像\",\"1630\":\"107#_5、访问harbor\",\"1631\":\"107#六、kubesphere及k8s安装\",\"1632\":\"107#在线安装\",\"1633\":\"107#_1、下载安装脚本\",\"1634\":\"107#_2、安装失败回滚\",\"1635\":\"107#离线安装\",\"1636\":\"107#_1、安装k8s插件\",\"1637\":\"107#_2、安装k8s\",\"1638\":\"107#_3、安装失败回滚\",\"1639\":\"107#七、离线安装中间件与项目\",\"1640\":\"107#_1、sql文件导入\",\"1641\":\"107#_2、java8、nacos、xxl-job、pdf镜像打包\",\"1642\":\"107#_3、创建harbor仓库名\",\"1643\":\"107#_4、docker启动nacos\",\"1644\":\"107#_5、docker启动xxl-job\",\"1645\":\"107#_6、项目文件打包\",\"1646\":\"107#_7、打包上传\",\"1647\":\"107#八、kubesphere自制应用-yaml形式\",\"1648\":\"107#_1-nacos\",\"1649\":\"107#_2-xxl-job\",\"1650\":\"107#_3-devops-cloud-cluster\",\"1651\":\"107#九、拉通流水线\",\"1652\":\"107#创建流水线工程-devops-cloud-auto\",\"1653\":\"107#创建所需凭证\",\"1654\":\"107#创建流水线\",\"1655\":\"107#可视化界面创建\",\"1656\":\"107#配置文件形式构建\",\"1657\":\"107#十、扩展\",\"1658\":\"107#kubeshpere添加新节点\",\"1659\":\"107#删除节点\",\"1660\":\"107#指定pod运行在固定ip上\",\"1661\":\"107#数据挂载\",\"1662\":\"107#允许访问网络\",\"1663\":\"107#十一、常见问题\",\"1664\":\"107#https参数未设置-the-protocol-is-https-but-attribute-ssl-cert-is-not-set\",\"1665\":\"107#启动harbor报-failed-to-setup-ip-tables-unable-to-enable-skip-dnat-rule\",\"1666\":\"107#连接私服报-http-server-gave-http-response-to-https-client\",\"1667\":\"107#docker磁盘空间不足-error-cannot-create-temporary-directory-fatal-error-runtime-out-of-memory\",\"1668\":\"107#镜像不存在-no-such-image-perl-latest\",\"1669\":\"107#连接超过重试次数-connection-reset-by-peer-see-docker-run-help\",\"1670\":\"108\",\"1671\":\"108#一、移除以前docker相关包\",\"1672\":\"108#二、配置相关yum源\",\"1673\":\"108#三、安装docker\",\"1674\":\"108#四、启动docker\",\"1675\":\"108#五、配置加速\",\"1676\":\"108#一、通过kubekey安装工具安装\",\"1677\":\"108#二、在线安装\",\"1678\":\"108#一、前期准备\",\"1679\":\"108#_1、创建企业空间\",\"1680\":\"108#_2、创建项目管理\",\"1681\":\"108#_3、项目管理中配置镜像仓库密钥\",\"1682\":\"108#_4、安装好相关环境\",\"1683\":\"108#_1、nacos部署\",\"1684\":\"108#_1-相关数据库配置\",\"1685\":\"108#_2、自制应用创建nacos-yml形式\",\"1686\":\"108#二、xxl-job部署\",\"1687\":\"108#_1-新建xxl-job数据库\",\"1688\":\"108#_2-自制应用创建xxl-job\",\"1689\":\"108#三、redis部署\",\"1690\":\"108#_1-配置中心创建配置\",\"1691\":\"108#_2-创建存储卷\",\"1692\":\"108#_3-创建容器\",\"1693\":\"108#_4-添加存储卷\",\"1694\":\"108#_5-挂载配置文件\",\"1695\":\"108#二、项目代码配置\",\"1696\":\"108#一、pom文件\",\"1697\":\"108#二、配置dockerfile构建构建文件-每个服务都要\",\"1698\":\"108#三、项目中流水线构建deployment容器所需的配置文件-每个服务都要\",\"1699\":\"108#三、拉通流水线\",\"1700\":\"108#一、创建流水线工程-devops-cloud-auto\",\"1701\":\"108#二、创建所需凭证\",\"1702\":\"108#_1、新建镜像仓库凭证\",\"1703\":\"108#_2、新建kubeconfig\",\"1704\":\"108#三、创建流水线\",\"1705\":\"108#_1-代理环境-maven\",\"1706\":\"108#_2-代码检出\",\"1707\":\"108#_3-集成测试环境制品构建\",\"1708\":\"108#_4-清理部署\",\"1709\":\"108#_5-发布测试环境\",\"1710\":\"108#_6-运行部署\",\"1711\":\"108#_7-可选-使用配置文件形式构建流水线\",\"1712\":\"108#_8-问题\",\"1713\":\"108#四、自制服务应用\",\"1714\":\"108#五、安装harbor\",\"1715\":\"108#_1、下载安装包拷贝到linux中\",\"1716\":\"108#_2、修改配置文件\",\"1717\":\"108#_3、执行安装脚本\",\"1718\":\"108#_4、查看镜像\",\"1719\":\"108#_5、访问harbor\",\"1720\":\"109\",\"1721\":\"109#_1-切换权限为root\",\"1722\":\"109#_2-查看版本\",\"1723\":\"109#_3-查看centos中自带的jdk\",\"1724\":\"109#_4-删除红色划线部分\",\"1725\":\"109#_5-检查是否删除成功\",\"1726\":\"109#_6-下载jdk\",\"1727\":\"109#_7-把jdk上传至centos中。\",\"1728\":\"109#_8-在根的usr文件夹里面新建一个java文件夹\",\"1729\":\"109#_9-把压缩包拷贝到-usr-java文件夹当中\",\"1730\":\"109#_10-进入到-usr-java-去解压。\",\"1731\":\"109#_11-配置环境变量\",\"1732\":\"109#_12-让当前环境变量生效\",\"1733\":\"110\",\"1734\":\"110#_1、mongo的安装教程-linux\",\"1735\":\"110#_2、安装中遇到的问题\",\"1736\":\"110#_3、创建mongo账户\",\"1737\":\"110#_2-创建普通用户\",\"1738\":\"110#_4、开启mongo审计功能\",\"1739\":\"110#_5、日志详情介绍\",\"1740\":\"111\",\"1741\":\"111#一、安装前须知\",\"1742\":\"111#二、在线安装docker\",\"1743\":\"111#配置相关yum源\",\"1744\":\"111#安装docker\",\"1745\":\"111#启动docker\",\"1746\":\"111#配置加速\",\"1747\":\"111#在线安装docker-compose\",\"1748\":\"111#三、离线安装docker\",\"1749\":\"111#下载安装包\",\"1750\":\"111#解压缩\",\"1751\":\"111#移动文件\",\"1752\":\"111#将docker注册为系统服务\",\"1753\":\"111#配置dcker仓库路径\",\"1754\":\"111#四、离线安装docker-compose\",\"1755\":\"111#下载安装包-1\",\"1756\":\"111#配置\",\"1757\":\"111#验证\",\"1758\":\"112\",\"1759\":\"112#一、知识沉淀\",\"1760\":\"112#主从复制\",\"1761\":\"112#副本集\",\"1762\":\"112#二、实战操作\",\"1763\":\"112#_1、mongo主从模式\",\"1764\":\"112#_2、mongo副本集\",\"1765\":\"113\",\"1766\":\"113#_1、下载安装包\",\"1767\":\"113#_2、上传安装包\",\"1768\":\"113#_3、解压-mysql-的安装包\",\"1769\":\"113#_4、安装客户端\",\"1770\":\"113#_5、安装服务端\",\"1771\":\"113#_6、修改mysql默认字符集\",\"1772\":\"113#_7、-启动mysql服务\",\"1773\":\"113#_8、登录mysql\",\"1774\":\"113#_9、修改mysql登录密码\",\"1775\":\"113#_10、授予远程连接权限\",\"1776\":\"113#_11、关闭linux系统防火墙\",\"1777\":\"113#_12、重启mysql服务\",\"1778\":\"113#_13、卸载-mysql\",\"1779\":\"114\",\"1780\":\"115\",\"1781\":\"115#一、下载redis软件\",\"1782\":\"115#二、解压并安装redis\",\"1783\":\"115#三、移动redis目录\",\"1784\":\"115#四、编译\",\"1785\":\"115#五、安装\",\"1786\":\"115#六、启动redis\",\"1787\":\"115#七、redis-conf配置文件讲解\",\"1788\":\"115#八、常见问题\",\"1789\":\"116\",\"1790\":\"116#docker容器内下载vim\",\"1791\":\"116#查看docker容器日志\",\"1792\":\"116#容器间数据相互拷贝\",\"1793\":\"116#容器构建\",\"1794\":\"116#容器打包成一个镜像\",\"1795\":\"116#镜像重命名\",\"1796\":\"116#关闭自动重启\",\"1797\":\"116#docker登录\",\"1798\":\"116#docker镜像导入导出\",\"1799\":\"116#docker镜像拉取与推送\",\"1800\":\"116#查看镜像架构\",\"1801\":\"116#磁盘镜像满了-删除镜像\",\"1802\":\"116#清理所有无用镜像\",\"1803\":\"116#重新加载daemon-json配置\",\"1804\":\"116#重启docker服务\",\"1805\":\"116#查看docker服务状态\",\"1806\":\"116#查看容器ip信息\",\"1807\":\"116#创建网桥\",\"1808\":\"116#查看k8s详细信息\",\"1809\":\"116#查看-docker-在-linux-中占用了多少内存\",\"1810\":\"116#实时查看容器的资源使用情况\",\"1811\":\"116#显示docker容器和物理主机挂载目录信息\",\"1812\":\"117\",\"1813\":\"117#_1、mongo数据备份与恢复\",\"1814\":\"117#_2、mongo-更新多条-要加multi-true\",\"1815\":\"118\",\"1816\":\"118#_1、查看用户连接权限\",\"1817\":\"118#_2、查看mysql某个用户的权限\",\"1818\":\"118#_3、查看相关连接参数\",\"1819\":\"118#_4、修改密码\",\"1820\":\"118#_5、刷新权限\",\"1821\":\"118#_6、赋予任何主机访问权限\",\"1822\":\"118#_7、修改密码过期时间\",\"1823\":\"118#_8、命令行导出文件\",\"1824\":\"118#_9、重启服务\",\"1825\":\"118#_10-sql导库\",\"1826\":\"118#_11、-查看最大连接数\",\"1827\":\"118#_12、更新数据到另一张表\",\"1828\":\"118#_13、重置自增序列\",\"1829\":\"118#_14、mysql修改表名\",\"1830\":\"118#_15、查看是否开启binglog日志-on开启\",\"1831\":\"119\",\"1832\":\"120\",\"1833\":\"120#查看表空间信息\",\"1834\":\"121\",\"1835\":\"122\",\"1836\":\"122#基本操作\",\"1837\":\"122#linux关机-重启\",\"1838\":\"122#查看系统-cpu信息\",\"1839\":\"122#建立软连接\",\"1840\":\"122#rpm相关\",\"1841\":\"122#sshkey\",\"1842\":\"122#命令重命名\",\"1843\":\"122#同步服务器时间\",\"1844\":\"122#后台运行命令\",\"1845\":\"122#强制活动用户退出\",\"1846\":\"122#查看命令路径\",\"1847\":\"122#查看进程所有打开最大fd数\",\"1848\":\"122#配置dns\",\"1849\":\"122#nslookup-查看域名路由表\",\"1850\":\"122#last-最近登录信息列表\",\"1851\":\"122#设置固定ip\",\"1852\":\"122#查看进程内加载的环境变量\",\"1853\":\"122#查看进程树找到服务器进程\",\"1854\":\"122#查看进程启动路径\",\"1855\":\"122#添加用户-配置sudo权限\",\"1856\":\"122#强制关闭进程名包含xxx的所有进程\",\"1857\":\"122#vim操作\",\"1858\":\"122#打开只读文件-修改后需要保存时-不用切换用户即可保存的方式\",\"1859\":\"122#查看磁盘-文件目录基本信息\",\"1860\":\"122#wc命令\",\"1861\":\"122#常用压缩-解压缩命令\",\"1862\":\"122#压缩命令\",\"1863\":\"122#解压缩命令\",\"1864\":\"122#变更文件所属用户-用户组\",\"1865\":\"122#cp-scp-mkdir\",\"1866\":\"122#比较两个文件\",\"1867\":\"122#日志输出的字节数-可以用作性能测试\",\"1868\":\"122#查看-去除特殊字符\",\"1869\":\"122#处理因系统原因引起的文件中特殊字符的问题\",\"1870\":\"122#tee-重定向的同时输出到屏幕\",\"1871\":\"122#grep\",\"1872\":\"122#awk\",\"1873\":\"122#find检索命令\",\"1874\":\"122#查看什么进程使用了该端口\",\"1875\":\"122#获取本机ip地址\",\"1876\":\"122#iptables\",\"1877\":\"122#nc命令-tcp调试利器\",\"1878\":\"122#tcpdump\",\"1879\":\"122#跟踪网络路由路径\",\"1880\":\"122#ss\",\"1881\":\"122#netstat\",\"1882\":\"122#top\",\"1883\":\"122#dmesg-查看系统日志\",\"1884\":\"122#iostat-磁盘io情况监控\",\"1885\":\"122#free-内存使用情况\",\"1886\":\"122#sar-查看网络吞吐状态\",\"1887\":\"122#vmstat-给定时间监控cpu使用率-内存使用-虚拟内存交互-io读写\",\"1888\":\"123\",\"1889\":\"123#一、进程相关命令\",\"1890\":\"123#_1、查询文件位置\",\"1891\":\"123#_2、查看tomcat实时日志\",\"1892\":\"123#_3、查看进程及端口-linux-win\",\"1893\":\"123#二、jar包相关命令\",\"1894\":\"123#_1、解压jar包\",\"1895\":\"123#_2、运行jar包\",\"1896\":\"123#_3、windows后台运行jar脚本\",\"1897\":\"123#_4、打包上传\",\"1898\":\"123#_5、打包下载\",\"1899\":\"123#_6、查看日志\",\"1900\":\"123#三、权限相关命令\",\"1901\":\"123#_1、赋予所有权限\",\"1902\":\"123#四、系统相关命令\",\"1903\":\"123#_1、查看系统版本\",\"1904\":\"123#_2、安装rpm\",\"1905\":\"123#_3、重启网卡linux\",\"1906\":\"123#_4、查看已执行命令历史\",\"1907\":\"123#_5、linux同步网络时间\",\"1908\":\"123#_6、查看文件大小\",\"1909\":\"123#_7、linux新建定时任务\",\"1910\":\"123#_8、查看操作系统日志\",\"1911\":\"123#_9、检测硬盘大小\",\"1912\":\"123#_10、模拟启动一个监听端口\",\"1913\":\"124\",\"1914\":\"124#_1、curl命令发送post请求\",\"1915\":\"124#_2、命令行下载远程文件\",\"1916\":\"124#_3、检测ip和端口通畅\",\"1917\":\"124#_4、跟踪路由\",\"1918\":\"124#_5、linux网卡开机自启动\",\"1919\":\"124#_6、linux刷新网卡\",\"1920\":\"124#_7、网络传输\",\"1921\":\"125\",\"1922\":\"125#linux防火墙常用命令\",\"1923\":\"125#启动、停止和重启防火墙\",\"1924\":\"125#防火墙规则配置\",\"1925\":\"125#添加端口\",\"1926\":\"125#移除端口\",\"1927\":\"125#添加服务\",\"1928\":\"125#移除服务\",\"1929\":\"125#防火墙规则查询\",\"1930\":\"125#列出所有开放的端口\",\"1931\":\"125#列出所有区域\",\"1932\":\"125#列出特定区域的所有配置\",\"1933\":\"125#防火墙其他常用命令\",\"1934\":\"125#查看版本\",\"1935\":\"125#查看帮助信息\",\"1936\":\"125#将设置为开机自启\",\"1937\":\"125#禁止开机自启\",\"1938\":\"125#是否设置为开机自启\",\"1939\":\"125#扩展\",\"1940\":\"125#zone的概念\",\"1941\":\"126\",\"1942\":\"126#概述\",\"1943\":\"126#知识要点\",\"1944\":\"126#_1-api文档的重要性\",\"1945\":\"126#_2-api文档的基本要素\",\"1946\":\"126#_3-api文档的规范\",\"1947\":\"126#_4-代码示例\",\"1948\":\"126#接口定义示例\",\"1949\":\"126#接口实现示例\",\"1950\":\"126#知识扩展\",\"1951\":\"126#设计思想\",\"1952\":\"126#避坑指南\",\"1953\":\"126#深度思考题\",\"1954\":\"127\",\"1955\":\"127#概述\",\"1956\":\"127#知识要点\",\"1957\":\"127#_1-文档管理体系的重要性\",\"1958\":\"127#_2-文档管理体系的基本要素\",\"1959\":\"127#_3-文档管理体系的设计原则\",\"1960\":\"127#_4-文档管理体系的实现示例\",\"1961\":\"127#文档分类示例\",\"1962\":\"127#文档管理类示例\",\"1963\":\"127#知识扩展\",\"1964\":\"127#设计思想\",\"1965\":\"127#避坑指南\",\"1966\":\"127#深度思考题\",\"1967\":\"128\",\"1968\":\"128#概述\",\"1969\":\"128#知识要点\",\"1970\":\"128#_1-文档生态系统的重要性\",\"1971\":\"128#_2-文档生态系统的基本要素\",\"1972\":\"128#_3-文档生态系统的设计原则\",\"1973\":\"128#_4-文档生态系统的实现示例\",\"1974\":\"128#文档工具类示例\",\"1975\":\"128#文档流程示例\",\"1976\":\"128#知识扩展\",\"1977\":\"128#设计思想\",\"1978\":\"128#避坑指南\",\"1979\":\"128#深度思考题\",\"1980\":\"129\",\"1981\":\"129#概述\",\"1982\":\"129#知识要点\",\"1983\":\"129#_1-文档自动化工具的重要性\",\"1984\":\"129#_2-文档自动化工具的基本类型\",\"1985\":\"129#_3-文档自动化工具的设计原则\",\"1986\":\"129#_4-文档自动化工具的实现示例\",\"1987\":\"129#文档生成工具示例\",\"1988\":\"129#文档测试工具示例\",\"1989\":\"129#知识扩展\",\"1990\":\"129#设计思想\",\"1991\":\"129#避坑指南\",\"1992\":\"129#深度思考题\",\"1993\":\"130\",\"1994\":\"130#_1-命名基本原则\",\"1995\":\"130#_2-具体命名规则\",\"1996\":\"130#_2-1-类名\",\"1997\":\"130#_2-2-方法名\",\"1998\":\"130#_2-3-变量名\",\"1999\":\"130#_2-4-常量名\",\"2000\":\"130#_2-5-包名\",\"2001\":\"130#_3-避坑指南\",\"2002\":\"130#_4-命名规范检查工具\",\"2003\":\"131\",\"2004\":\"131#_1-架构设计基本原则\",\"2005\":\"131#_1-1-solid原则在架构中的应用\",\"2006\":\"131#_2-分层架构设计\",\"2007\":\"131#_2-1-经典四层架构\",\"2008\":\"131#_3-微服务架构设计\",\"2009\":\"131#_3-1-服务拆分策略\",\"2010\":\"131#_3-2-服务通信模式\",\"2011\":\"131#_4-架构安全性设计\",\"2012\":\"131#_4-1-认证与授权\",\"2013\":\"131#_5-避坑指南\",\"2014\":\"131#_6-深度思考题\",\"2015\":\"132\",\"2016\":\"132#_1-规范自动化工具链\",\"2017\":\"132#_1-1-静态代码分析工具\",\"2018\":\"132#_1-2-工具集成配置\",\"2019\":\"132#_2-ci-cd中的规范集成\",\"2020\":\"132#_2-1-github-actions工作流配置\",\"2021\":\"132#_2-2-质量门禁设置\",\"2022\":\"132#_3-代码评审流程与规范执行\",\"2023\":\"132#_3-1-评审-checklist\",\"2024\":\"132#_3-2-自动化评审工具\",\"2025\":\"132#_4-规范合规度量与改进\",\"2026\":\"132#_4-1-关键指标监控\",\"2027\":\"132#_4-2-持续改进流程\",\"2028\":\"132#_5-避坑指南\",\"2029\":\"132#_6-深度思考题\",\"2030\":\"133\",\"2031\":\"133#_1-代码风格规范\",\"2032\":\"133#_1-1-缩进与空格\",\"2033\":\"133#_1-2-大括号位置\",\"2034\":\"133#_2-注释规范\",\"2035\":\"133#_2-1-javadoc注释\",\"2036\":\"133#_3-异常处理规范\",\"2037\":\"133#_3-1-异常使用原则\",\"2038\":\"133#_4-并发编程规范\",\"2039\":\"133#_4-1-线程安全\",\"2040\":\"133#_5-避坑指南\",\"2041\":\"133#_6-深度思考题\",\"2042\":\"133#_7-代码规范检查工具配置\",\"2043\":\"133#_8-单元测试规范\",\"2044\":\"133#_8-1-单元测试基本原则\",\"2045\":\"133#_8-2-测试范围与要求\",\"2046\":\"133#_8-3-测试方法命名规范\",\"2047\":\"133#_8-4-bcde测试原则\",\"2048\":\"133#_8-5-数据库测试规范\",\"2049\":\"133#_9-错误码规范\",\"2050\":\"133#_9-1-错误码格式\",\"2051\":\"133#_9-2-错误码设计原则\",\"2052\":\"133#_10-npe防护规范\",\"2053\":\"133#_10-1-常见npe场景\",\"2054\":\"133#_10-2-npe防护措施\",\"2055\":\"133#_8-5-数据库测试规范-1\",\"2056\":\"133#_11-集合处理规范\",\"2057\":\"133#_11-1-集合初始化\",\"2058\":\"133#_11-2-集合判空\",\"2059\":\"133#_11-3-集合遍历\",\"2060\":\"133#_12-控制语句规范\",\"2061\":\"133#_12-1-if-else语句\",\"2062\":\"133#_12-2-switch-case语句\",\"2063\":\"133#_12-2-数据库测试规范\",\"2064\":\"133#_13-安全规约\",\"2065\":\"133#_13-1-输入验证\",\"2066\":\"133#_13-2-sql注入防护\",\"2067\":\"133#_13-3-xss防护\",\"2068\":\"133#_13-4-敏感信息保护\",\"2069\":\"133#_14-日志规范\",\"2070\":\"133#_14-1-日志级别使用\",\"2071\":\"133#_14-2-日志内容规范\",\"2072\":\"133#_14-3-日志工具选择与配置\",\"2073\":\"134\",\"2074\":\"134#概述\",\"2075\":\"134#知识要点\",\"2076\":\"134#_1-访问控制关键字\",\"2077\":\"134#_2-类与对象相关关键字\",\"2078\":\"134#_3-流程控制关键字\",\"2079\":\"134#_4-异常处理关键字\",\"2080\":\"134#_5-变量类型关键字\",\"2081\":\"134#_6-保留关键字\",\"2082\":\"134#知识扩展\",\"2083\":\"134#设计思想\",\"2084\":\"134#避坑指南\",\"2085\":\"134#深度思考题\",\"2086\":\"135\",\"2087\":\"135#概述\",\"2088\":\"135#知识要点\",\"2089\":\"135#_1-单行注释\",\"2090\":\"135#_2-多行注释\",\"2091\":\"135#_3-文档注释\",\"2092\":\"135#知识扩展\",\"2093\":\"135#设计思想\",\"2094\":\"135#避坑指南\",\"2095\":\"135#深度思考题\",\"2096\":\"136\",\"2097\":\"136#概述\",\"2098\":\"136#知识要点\",\"2099\":\"136#_1-基本数据类型\",\"2100\":\"136#_2-引用数据类型\",\"2101\":\"136#_3-数据类型转换\",\"2102\":\"136#知识扩展\",\"2103\":\"136#设计思想\",\"2104\":\"136#避坑指南\",\"2105\":\"136#深度思考题\",\"2106\":\"137\",\"2107\":\"137#概述\",\"2108\":\"137#知识要点\",\"2109\":\"137#_1-算术运算符\",\"2110\":\"137#_2-关系运算符\",\"2111\":\"137#_3-逻辑运算符\",\"2112\":\"137#_4-位运算符\",\"2113\":\"137#_5-赋值运算符\",\"2114\":\"137#_6-条件运算符\",\"2115\":\"137#_7-其他运算符\",\"2116\":\"137#知识扩展\",\"2117\":\"137#设计思想\",\"2118\":\"137#避坑指南\",\"2119\":\"137#深度思考题\",\"2120\":\"138\",\"2121\":\"138#概述\",\"2122\":\"138#知识要点\",\"2123\":\"138#_1-顺序结构\",\"2124\":\"138#_2-分支结构\",\"2125\":\"138#_2-1-if-else\",\"2126\":\"138#_2-2-switch-case\",\"2127\":\"138#_3-循环结构\",\"2128\":\"138#_3-1-for\",\"2129\":\"138#_3-2-while\",\"2130\":\"138#_3-3-do-while\",\"2131\":\"138#_4-跳转结构\",\"2132\":\"138#_4-1-break\",\"2133\":\"138#_4-2-continue\",\"2134\":\"138#_4-3-return\",\"2135\":\"138#知识扩展\",\"2136\":\"138#设计思想\",\"2137\":\"138#避坑指南\",\"2138\":\"138#深度思考题\",\"2139\":\"139\",\"2140\":\"139#概述\",\"2141\":\"139#知识要点\",\"2142\":\"139#_2-1-数组的定义与初始化\",\"2143\":\"139#_2-1-1-数组声明\",\"2144\":\"139#_2-1-2-数组初始化\",\"2145\":\"139#_2-2-数组的访问与遍历\",\"2146\":\"139#_2-2-1-数组访问\",\"2147\":\"139#_2-2-2-数组遍历\",\"2148\":\"139#_2-3-数组的常用操作\",\"2149\":\"139#_2-3-1-数组排序\",\"2150\":\"139#_2-3-2-数组查找\",\"2151\":\"139#_2-3-3-数组复制\",\"2152\":\"139#_2-4-数组的内存特性\",\"2153\":\"139#知识扩展\",\"2154\":\"139#_3-1-设计思想\",\"2155\":\"139#_3-1-1-数组的优缺点\",\"2156\":\"139#_3-1-2-数组与集合的选择\",\"2157\":\"139#_3-2-避坑指南\",\"2158\":\"139#_3-2-1-数组越界异常\",\"2159\":\"139#_3-2-2-空指针异常\",\"2160\":\"139#_3-3-深度思考题\",\"2161\":\"139#思考题参考答案\",\"2162\":\"140\",\"2163\":\"140#概述\",\"2164\":\"140#知识要点\",\"2165\":\"140#_2-1-二维数组的定义与初始化\",\"2166\":\"140#_2-1-1-二维数组声明\",\"2167\":\"140#_2-1-2-二维数组初始化\",\"2168\":\"140#_2-2-二维数组的访问与遍历\",\"2169\":\"140#_2-2-1-元素访问\",\"2170\":\"140#_2-2-2-数组遍历\",\"2171\":\"140#_2-3-二维数组的内存结构\",\"2172\":\"140#_2-4-二维数组的常用操作\",\"2173\":\"140#_2-4-1-矩阵转置\",\"2174\":\"140#_2-4-2-矩阵相加\",\"2175\":\"140#知识扩展\",\"2176\":\"140#_3-1-设计思想\",\"2177\":\"140#_3-1-1-二维数组的适用场景\",\"2178\":\"140#_3-1-2-多维数组的替代方案\",\"2179\":\"140#_3-2-避坑指南\",\"2180\":\"140#_3-2-1-不规则数组的空指针问题\",\"2181\":\"140#_3-2-2-数组长度陷阱\",\"2182\":\"140#_3-3-深度思考题\",\"2183\":\"140#思考题参考答案\",\"2184\":\"141\",\"2185\":\"141#概述\",\"2186\":\"141#知识要点\",\"2187\":\"141#_2-1-字符串的创建与初始化\",\"2188\":\"141#_2-1-1-字符串创建方式\",\"2189\":\"141#_2-1-2-字符串常量池机制\",\"2190\":\"141#_2-2-字符串的不可变性\",\"2191\":\"141#_2-2-1-不可变性的表现\",\"2192\":\"141#_2-2-2-不可变性的好处\",\"2193\":\"141#_2-3-字符串常用方法\",\"2194\":\"141#_2-3-1-字符串比较\",\"2195\":\"141#_2-3-2-字符串查找\",\"2196\":\"141#_2-3-3-字符串截取与替换\",\"2197\":\"141#_2-3-4-字符串分割与拼接\",\"2198\":\"141#_2-4-字符串与其他类型转换\",\"2199\":\"141#知识扩展\",\"2200\":\"141#_3-1-设计思想\",\"2201\":\"141#_3-1-1-string、stringbuilder与stringbuffer\",\"2202\":\"141#_3-1-2-字符串拼接性能对比\",\"2203\":\"141#_3-2-避坑指南\",\"2204\":\"141#_3-2-1-字符串比较使用-的陷阱\",\"2205\":\"141#_3-2-2-字符串空值判断\",\"2206\":\"141#_3-3-深度思考题\",\"2207\":\"141#思考题参考答案\",\"2208\":\"142\",\"2209\":\"142#概述\",\"2210\":\"142#知识要点\",\"2211\":\"142#_2-1-基础循环打印法\",\"2212\":\"142#_2-1-1-for循环打印一维数组\",\"2213\":\"142#_2-1-2-增强for循环打印数组\",\"2214\":\"142#_2-1-3-嵌套循环打印二维数组\",\"2215\":\"142#_2-2-arrays工具类打印法\",\"2216\":\"142#_2-2-1-arrays-tostring-打印一维数组\",\"2217\":\"142#_2-2-2-arrays-deeptostring-打印多维数组\",\"2218\":\"142#_2-2-3-arrays-aslist-配合打印\",\"2219\":\"142#_2-3-java-8-流api打印法\",\"2220\":\"142#_2-3-1-使用stream-foreach-打印\",\"2221\":\"142#_2-3-2-使用collectors-joining-格式化打印\",\"2222\":\"142#_2-4-常见数组类型打印对比\",\"2223\":\"142#_2-4-1-基本类型数组\",\"2224\":\"142#_2-4-2-对象数组\",\"2225\":\"142#知识扩展\",\"2226\":\"142#_3-1-设计思想\",\"2227\":\"142#_3-1-1-数组打印方法性能对比\",\"2228\":\"142#_3-1-2-自定义数组打印工具类\",\"2229\":\"142#_3-2-避坑指南\",\"2230\":\"142#_3-2-1-直接打印数组引用的陷阱\",\"2231\":\"142#_3-2-2-多维数组打印的问题\",\"2232\":\"142#_3-2-3-对象数组打印无意义内容\",\"2233\":\"142#_3-3-深度思考题\",\"2234\":\"142#思考题参考答案\",\"2235\":\"143\",\"2236\":\"143#概述\",\"2237\":\"143#知识要点\",\"2238\":\"143#_2-1-字符串常量的定义与特性\",\"2239\":\"143#_2-1-1-字符串常量的声明方式\",\"2240\":\"143#_2-1-2-不可变性的底层实现\",\"2241\":\"143#_2-2-字符串常量池机制\",\"2242\":\"143#_2-2-1-常量池的内存结构\",\"2243\":\"143#_2-2-2-字符串常量池的工作流程\",\"2244\":\"143#_2-3-string-intern-方法\",\"2245\":\"143#_2-3-1-intern-方法的基本使用\",\"2246\":\"143#_2-3-2-jdk版本中intern-行为差异\",\"2247\":\"143#_2-4-字符串常量的比较操作\",\"2248\":\"143#_2-4-1-与equals-的区别\",\"2249\":\"143#_2-4-2-常量折叠现象\",\"2250\":\"143#知识扩展\",\"2251\":\"143#_3-1-设计思想\",\"2252\":\"143#_3-1-1-字符串常量池的设计目的\",\"2253\":\"143#_3-1-2-字符串常量-vs-字符串对象\",\"2254\":\"143#_3-2-避坑指南\",\"2255\":\"143#_3-2-1-字符串常量比较错误\",\"2256\":\"143#_3-2-2-过度使用intern-方法\",\"2257\":\"143#_3-2-3-字符串拼接性能问题\",\"2258\":\"144\",\"2259\":\"144#概述\",\"2260\":\"144#知识要点\",\"2261\":\"144#_2-1-可变字符串核心类\",\"2262\":\"144#_2-1-1-类继承关系与核心结构\",\"2263\":\"144#_2-1-2-类定义与核心字段\",\"2264\":\"144#_2-2-stringbuilder的使用\",\"2265\":\"144#_2-2-1-基本操作方法\",\"2266\":\"144#_2-2-2-链式调用特性\",\"2267\":\"144#_2-3-stringbuffer的使用\",\"2268\":\"144#_2-3-1-线程安全实现\",\"2269\":\"144#_2-3-2-多线程环境使用示例\",\"2270\":\"144#_2-4-容量管理机制\",\"2271\":\"144#_2-4-1-容量与长度的区别\",\"2272\":\"144#_2-4-2-扩容机制\",\"2273\":\"144#知识扩展\",\"2274\":\"144#_3-1-设计思想\",\"2275\":\"144#_3-1-1-stringbuilder-vs-stringbuffer-vs-string\",\"2276\":\"144#_3-1-2-性能对比测试\",\"2277\":\"144#_3-2-避坑指南\",\"2278\":\"144#_3-2-1-初始容量设置不当\",\"2279\":\"144#_3-2-2-多线程误用stringbuilder\",\"2280\":\"144#_3-2-3-不必要的tostring-调用\",\"2281\":\"144#_3-3-深度思考题\",\"2282\":\"144#思考题参考答案\",\"2283\":\"145\",\"2284\":\"145#概述\",\"2285\":\"145#知识要点\",\"2286\":\"145#_2-1-string类的定义与结构\",\"2287\":\"145#_2-1-1-类定义与继承关系\",\"2288\":\"145#_2-1-2-核心字段-jdk8\",\"2289\":\"145#_2-1-3-jdk9及以上版本的结构变化\",\"2290\":\"145#_2-2-构造方法实现\",\"2291\":\"145#_2-2-1-常用构造方法-jdk8\",\"2292\":\"145#_2-2-2-构造方法的深拷贝特性\",\"2293\":\"145#_2-3-核心方法源码解析\",\"2294\":\"145#_2-3-1-equals-方法\",\"2295\":\"145#_2-3-2-hashcode-方法\",\"2296\":\"145#_2-3-3-substring-方法\",\"2297\":\"145#_2-3-4-intern-方法\",\"2298\":\"145#_2-4-不可变性机制\",\"2299\":\"145#_2-4-1-不可变性的实现方式\",\"2300\":\"145#_2-4-2-不可变性的好处\",\"2301\":\"145#_2-5-字符串常量池实现\",\"2302\":\"145#_2-5-1-常量池存储位置变迁\",\"2303\":\"145#_2-5-2-字符串创建与常量池交互\",\"2304\":\"145#_2-5-3-字符串拼接与常量池\",\"2305\":\"145#知识扩展\",\"2306\":\"145#_3-1-设计思想\",\"2307\":\"145#_3-1-1-不可变对象设计模式\",\"2308\":\"145#_3-1-2-享元模式在常量池中的应用\",\"2309\":\"145#_3-2-性能优化\",\"2310\":\"145#_3-2-1-字符串拼接性能对比\",\"2311\":\"145#_3-2-2-合理使用intern-方法\",\"2312\":\"146\",\"2313\":\"146#核心理论\",\"2314\":\"146#_1-1-list接口概述\",\"2315\":\"146#_1-2-list接口的继承体系\",\"2316\":\"146#_1-3-主要实现类对比\",\"2317\":\"146#_1-4-底层数据结构详解\",\"2318\":\"146#_1-4-1-arraylist的动态数组\",\"2319\":\"146#_1-4-2-linkedlist的双向链表\",\"2320\":\"146#_1-5-list接口的jdk版本特性\",\"2321\":\"146#代码实践\",\"2322\":\"146#_2-1-list的初始化与基本操作\",\"2323\":\"146#_2-1-1-初始化方式对比\",\"2324\":\"146#_2-1-2-常用操作示例\",\"2325\":\"146#_2-2-list的遍历方式\",\"2326\":\"146#_2-3-list的排序与查找\",\"2327\":\"146#_2-4-arraylist与linkedlist性能对比\",\"2328\":\"146#_2-5-线程安全的list实现\",\"2329\":\"146#_2-6-list的高级操作-jdk-8\",\"2330\":\"146#设计思想\",\"2331\":\"146#_3-1-接口与实现分离原则\",\"2332\":\"146#_3-2-迭代器模式\",\"2333\":\"146#_3-3-动态数组与链表的设计权衡\",\"2334\":\"146#arraylist的设计思想\",\"2335\":\"146#linkedlist的设计思想\",\"2336\":\"146#_3-4-不可变集合设计\",\"2337\":\"146#_3-5-装饰器模式\",\"2338\":\"146#避坑指南\",\"2339\":\"146#_4-1-常见异常及解决方案\",\"2340\":\"146#_4-1-1-concurrentmodificationexception-并发修改异常\",\"2341\":\"146#_4-1-2-indexoutofboundsexception-索引越界异常\",\"2342\":\"146#_4-1-3-unsupportedoperationexception-不支持操作异常\",\"2343\":\"146#_4-2-arraylist的性能陷阱\",\"2344\":\"146#_4-2-1-频繁扩容问题\",\"2345\":\"146#_4-2-2-数组复制开销\",\"2346\":\"146#_4-2-3-sublist-方法的陷阱\",\"2347\":\"146#_4-3-linkedlist的使用误区\",\"2348\":\"146#_4-3-1-随机访问性能问题\",\"2349\":\"146#_4-3-2-作为队列使用的最佳实践\",\"2350\":\"146#_4-4-线程安全问题\",\"2351\":\"146#_4-4-1-arraylist的线程不安全\",\"2352\":\"146#_4-4-2-迭代器的弱一致性\",\"2353\":\"146#深度思考题\",\"2354\":\"146#思考题1-arraylist和linkedlist的性能对比及适用场景\",\"2355\":\"146#思考题2-arraylist的扩容机制及优化\",\"2356\":\"146#思考题3-如何实现一个线程安全的list\",\"2357\":\"146#思考题4-list的排序算法实现\",\"2358\":\"146#思考题5-jdk-9-中不可变集合的实现原理\",\"2359\":\"147\",\"2360\":\"147#一、核心理论\",\"2361\":\"147#_1-1-set接口概述\",\"2362\":\"147#_1-2-继承体系\",\"2363\":\"147#_1-3-主要实现类对比\",\"2364\":\"147#_1-4-底层数据结构详解\",\"2365\":\"147#_1-4-1-hashset\",\"2366\":\"147#_1-4-2-treeset\",\"2367\":\"147#_1-5-jdk版本特性\",\"2368\":\"147#二、代码实践\",\"2369\":\"147#_2-1-初始化与基本操作\",\"2370\":\"147#_2-2-遍历方式\",\"2371\":\"147#_2-3-排序与查找\",\"2372\":\"147#_2-4-集合运算\",\"2373\":\"147#_2-5-线程安全的set实现\",\"2374\":\"147#三、设计思想\",\"2375\":\"147#_3-1-接口与实现分离\",\"2376\":\"147#_3-2-哈希表设计\",\"2377\":\"147#_3-3-红黑树应用\",\"2378\":\"147#_3-4-不可变集合设计\",\"2379\":\"147#_3-5-装饰器模式\",\"2380\":\"147#四、避坑指南\",\"2381\":\"147#_4-1-常见异常及解决方案\",\"2382\":\"147#_4-1-1-concurrentmodificationexception\",\"2383\":\"147#_4-1-2-nullpointerexception\",\"2384\":\"147#_4-2-hashset性能陷阱\",\"2385\":\"147#_4-2-1-哈希冲突\",\"2386\":\"147#_4-2-2-初始容量和负载因子\",\"2387\":\"147#_4-3-treeset使用误区\",\"2388\":\"147#_4-3-1-自定义对象排序\",\"2389\":\"147#_4-4-线程安全问题\",\"2390\":\"147#五、深度思考题\",\"2391\":\"147#思考题1-hashset、linkedhashset和treeset的性能对比及适用场景\",\"2392\":\"147#思考题2-如何实现一个线程安全的hashset\",\"2393\":\"147#思考题3-hashset如何检查元素是否重复\",\"2394\":\"147#思考题4-jdk-8中hashset的红黑树优化原理\",\"2395\":\"147#思考题5-不可变set的实现原理及应用场景\",\"2396\":\"148\",\"2397\":\"148#一、核理论\",\"2398\":\"148#_1-1-map接口概述\",\"2399\":\"148#_1-2-继承体系\",\"2400\":\"148#_1-3-主要实现类对比\",\"2401\":\"148#_1-4-底层数据结构详解\",\"2402\":\"148#_1-4-1-hashmap数据结构-jdk8\",\"2403\":\"148#_1-4-2-concurrenthashmap数据结构演变\",\"2404\":\"148#_1-5-jdk版本特性\",\"2405\":\"148#二、代码实践\",\"2406\":\"148#_2-1-初始化与基本操作\",\"2407\":\"148#_2-2-遍历方式\",\"2408\":\"148#_2-3-排序与查找\",\"2409\":\"148#_2-4-hashmap与treemap性能对比\",\"2410\":\"148#_2-5-线程安全的map实现\",\"2411\":\"148#三、设计思想\",\"2412\":\"148#_3-1-接口与实现分离\",\"2413\":\"148#_3-2-哈希表设计\",\"2414\":\"148#_3-3-红黑树应用\",\"2415\":\"148#_3-4-不可变集合设计\",\"2416\":\"148#_3-5-并发设计\",\"2417\":\"148#四、避坑指南\",\"2418\":\"148#_4-1-常见异常及解决方案\",\"2419\":\"148#_4-1-1-nullpointerexception\",\"2420\":\"148#_4-1-2-concurrentmodificationexception\",\"2421\":\"148#_4-2-hashmap性能陷阱\",\"2422\":\"148#_4-2-1-哈希冲突\",\"2423\":\"148#_4-2-2-频繁扩容\",\"2424\":\"148#_4-3-线程安全问题\",\"2425\":\"148#五、深度思考题\",\"2426\":\"148#思考题1-hashmap和concurrenthashmap的实现原理及性能对比\",\"2427\":\"148#思考题2-如何实现一个自定义的lru缓存\",\"2428\":\"148#思考题3-hashmap在jdk8中的优化有哪些\",\"2429\":\"148#思考题4-如何实现线程安全的hashmap\",\"2430\":\"149\",\"2431\":\"149#一、核理论\",\"2432\":\"149#_1-1-arraylist类结构分析\",\"2433\":\"149#_1-2-核心成员变量\",\"2434\":\"149#_1-3-版本差异特性\",\"2435\":\"149#二、代码实践\",\"2436\":\"149#_2-1-构造方法实现\",\"2437\":\"149#_2-2-添加元素核心方法\",\"2438\":\"149#_2-3-扩容机制实现\",\"2439\":\"149#_2-4-获取和修改元素\",\"2440\":\"149#_2-5-删除元素操作\",\"2441\":\"149#_2-6-迭代器实现\",\"2442\":\"149#三、设计思想\",\"2443\":\"149#_3-1-动态数组设计\",\"2444\":\"149#_3-2-快速失败机制\",\"2445\":\"149#_3-3-内存优化策略\",\"2446\":\"149#_3-4-接口设计原则\",\"2447\":\"149#四、避坑指南\",\"2448\":\"149#_4-1-并发修改异常\",\"2449\":\"149#_4-2-扩容性能问题\",\"2450\":\"149#_4-3-数组下标越界\",\"2451\":\"149#_4-4-内存泄漏风险\",\"2452\":\"149#_4-5-自动装箱性能损耗\",\"2453\":\"149#五、深度思考题\",\"2454\":\"149#思考题1-arraylist和vector的区别及适用场景\",\"2455\":\"149#思考题2-arraylist的扩容为什么是1-5倍而不是2倍或其他倍数\",\"2456\":\"149#思考题3-如何实现一个线程安全的arraylist\",\"2457\":\"150\",\"2458\":\"150#一、核心理论\",\"2459\":\"150#_1-1-queue接口概述\",\"2460\":\"150#_1-2-继承体系\",\"2461\":\"150#_1-3-主要实现类对比\",\"2462\":\"150#_1-4-核心操作对比\",\"2463\":\"150#_1-5-jdk版本特性\",\"2464\":\"150#二、代码实践\",\"2465\":\"150#_2-1-基本操作示例\",\"2466\":\"150#_2-2-生产者-消费者模型实现\",\"2467\":\"150#_2-3-延迟队列应用\",\"2468\":\"150#_2-4-双端队列实现栈和队列\",\"2469\":\"150#三、设计思想\",\"2470\":\"150#_3-1-接口设计模式\",\"2471\":\"150#_3-2-阻塞队列实现原理\",\"2472\":\"150#_3-3-优先级队列设计\",\"2473\":\"150#_3-4-并发队列设计\",\"2474\":\"150#四、避坑指南\",\"2475\":\"150#_4-1-常见异常及解决方案\",\"2476\":\"150#_4-1-1-nosuchelementexception\",\"2477\":\"150#_4-1-2-illegalstateexception\",\"2478\":\"150#_4-2-线程安全问题\",\"2479\":\"150#_4-3-priorityqueue陷阱\",\"2480\":\"150#_4-3-1-无序遍历\",\"2481\":\"150#_4-3-2-null元素\",\"2482\":\"150#五、深度思考题\",\"2483\":\"150#思考题1-阻塞队列如何实现线程间通信\",\"2484\":\"150#思考题2-arraydeque与linkedlist作为队列和栈的性能对比\",\"2485\":\"150#思考题3-如何实现一个线程安全的非阻塞队列\",\"2486\":\"150#思考题4-delayqueue的实现原理及应用场景\",\"2487\":\"151\",\"2488\":\"151#一、核理论\",\"2489\":\"151#_1-1-linkedlist类结构分析\",\"2490\":\"151#_1-2-核心成员变量与内部类\",\"2491\":\"151#_1-3-版本差异特性\",\"2492\":\"151#二、代码实践\",\"2493\":\"151#_2-1-构造方法实现\",\"2494\":\"151#_2-2-添加元素核心方法\",\"2495\":\"151#_2-3-获取和修改元素\",\"2496\":\"151#_2-4-删除元素操作\",\"2497\":\"151#_2-5-双端队列特有方法\",\"2498\":\"151#_2-6-迭代器实现\",\"2499\":\"151#三、设计思想\",\"2500\":\"151#_3-1-双向链表设计\",\"2501\":\"151#_3-2-索引访问优化\",\"2502\":\"151#_3-3-双端队列实现\",\"2503\":\"151#_3-4-与arraylist的设计对比\",\"2504\":\"151#四、避坑指南\",\"2505\":\"151#_4-1-随机访问性能问题\",\"2506\":\"151#_4-2-误用linkedlist作为栈或队列\",\"2507\":\"151#_4-3-并发修改异常\",\"2508\":\"151#_4-4-内存泄漏风险\",\"2509\":\"151#_4-5-错误的集合转换\",\"2510\":\"151#五、深度思考题\",\"2511\":\"151#思考题1-linkedlist和arraylist的性能对比及适用场景\",\"2512\":\"151#思考题2-linkedlist如何实现lru缓存\",\"2513\":\"151#思考题3-linkedlist的线程安全问题及解决方案\",\"2514\":\"152\",\"2515\":\"152#一、核心理论\",\"2516\":\"152#_1-1-并发集合概述\",\"2517\":\"152#_1-2-并发集合体系\",\"2518\":\"152#_1-3-并发集合对比\",\"2519\":\"152#_1-4-并发级别\",\"2520\":\"152#_1-5-jdk版本演进\",\"2521\":\"152#二、代码实践\",\"2522\":\"152#_2-1-concurrenthashmap使用示例\",\"2523\":\"152#_2-2-copyonwritearraylist使用示例\",\"2524\":\"152#_2-3-并发队列性能对比\",\"2525\":\"152#_2-4-并发集合在实际项目中的应用\",\"2526\":\"152#三、设计思想\",\"2527\":\"152#_3-1-concurrenthashmap实现原理\",\"2528\":\"152#_3-2-写时复制容器原理\",\"2529\":\"152#_3-3-非阻塞队列算法\",\"2530\":\"152#_3-4-并发集合的迭代特性\",\"2531\":\"152#四、避坑指南\",\"2532\":\"152#_4-1-concurrenthashmap常见问题\",\"2533\":\"152#_4-1-1-size-方法的陷阱\",\"2534\":\"152#_4-1-2-原子操作的重要性\",\"2535\":\"152#_4-2-copyonwritearraylist使用误区\",\"2536\":\"152#_4-2-1-内存占用问题\",\"2537\":\"152#_4-2-2-迭代器数据一致性\",\"2538\":\"152#_4-3-阻塞队列使用不当\",\"2539\":\"152#_4-3-1-队列容量设置不合理\",\"2540\":\"152#五、深度思考题\",\"2541\":\"152#思考题1-concurrenthashmap在jdk-7和jdk-8中的实现差异\",\"2542\":\"152#思考题2-如何选择合适的并发集合\",\"2543\":\"152#思考题3-并发集合的弱一致性实现原理\",\"2544\":\"152#思考题4-如何实现一个自定义的并发安全集合\",\"2545\":\"153\",\"2546\":\"153#一、核理论\",\"2547\":\"153#_1-1-stack与queue类结构分析\",\"2548\":\"153#_1-2-核心成员变量\",\"2549\":\"153#_1-3-jdk版本特性差异\",\"2550\":\"153#二、代码实践\",\"2551\":\"153#_2-1-stack核心方法实现\",\"2552\":\"153#_2-2-arraydeque核心方法实现\",\"2553\":\"153#_2-3-实际应用示例\",\"2554\":\"153#_2-3-1-使用stack实现括号匹配\",\"2555\":\"153#_2-3-2-使用queue实现生产者-消费者模型\",\"2556\":\"153#三、设计思想\",\"2557\":\"153#_3-1-stack的设计缺陷\",\"2558\":\"153#_3-2-arraydeque的高效设计\",\"2559\":\"153#_3-3-接口与实现分离原则\",\"2560\":\"153#四、避坑指南\",\"2561\":\"153#_4-1-stack的线程安全问题\",\"2562\":\"153#_4-2-queue的add-与offer-区别\",\"2563\":\"153#_4-3-arraydeque的null元素问题\",\"2564\":\"153#五、深度思考题\",\"2565\":\"154\",\"2566\":\"154#一、核理论\",\"2567\":\"154#_1-1-priorityqueue类结构分析\",\"2568\":\"154#_1-2-核心成员变量\",\"2569\":\"154#_1-3-jdk版本特性差异\",\"2570\":\"154#二、代码实践\",\"2571\":\"154#_2-1-构造方法实现\",\"2572\":\"154#_2-2-核心方法实现\",\"2573\":\"154#_2-2-1-入队操作-offer\",\"2574\":\"154#_2-2-2-出队操作-poll\",\"2575\":\"154#_2-2-3-堆调整核心算法\",\"2576\":\"154#_2-3-实际应用示例\",\"2577\":\"154#_2-3-1-自定义对象排序\",\"2578\":\"154#_2-3-2-使用comparator实现降序排序\",\"2579\":\"154#三、设计思想\",\"2580\":\"154#_3-1-二叉堆数据结构\",\"2581\":\"154#_3-2-动态扩容机制\",\"2582\":\"154#_3-3-优先级排序策略\",\"2583\":\"154#四、避坑指南\",\"2584\":\"154#_4-1-空元素异常\",\"2585\":\"154#_4-2-无序遍历\",\"2586\":\"154#_4-3-线程不安全\",\"2587\":\"154#_4-4-初始容量选择\",\"2588\":\"154#五、深度思考题\",\"2589\":\"155\",\"2590\":\"155#一、核心理论\",\"2591\":\"155#_1-1-hashmap与hashset类结构分析\",\"2592\":\"155#_1-2-核心成员变量\",\"2593\":\"155#hashmap核心变量\",\"2594\":\"155#hashset核心变量\",\"2595\":\"155#_1-3-jdk版本特性差异\",\"2596\":\"155#hashmap版本演进\",\"2597\":\"155#二、代码实践\",\"2598\":\"155#_2-1-hashmap核心方法实现\",\"2599\":\"155#_2-1-1-哈希计算与索引定位\",\"2600\":\"155#_2-1-2-put方法实现\",\"2601\":\"155#_2-1-3-扩容机制-resize\",\"2602\":\"155#_2-2-hashset核心方法实现\",\"2603\":\"155#_2-3-实际应用示例\",\"2604\":\"155#_2-3-1-hashmap性能优化示例\",\"2605\":\"155#_2-3-2-自定义对象作为hashmap键\",\"2606\":\"155#三、设计思想\",\"2607\":\"155#_3-1-哈希表数据结构\",\"2608\":\"155#_3-2-哈希冲突解决策略\",\"2609\":\"155#_3-3-动态扩容机制\",\"2610\":\"155#_3-4-fail-fast机制\",\"2611\":\"155#四、避坑指南\",\"2612\":\"155#_4-1-键的哈希值不可变\",\"2613\":\"155#_4-2-线程安全问题\",\"2614\":\"155#_4-3-初始容量选择\",\"2615\":\"155#_4-4-遍历方式选择\",\"2616\":\"155#五、深度思考题\",\"2617\":\"156\",\"2618\":\"156#一、核心理论\",\"2619\":\"156#_1-1-类结构分析\",\"2620\":\"156#_1-2-核心成员变量\",\"2621\":\"156#linkedhashmap核心变量\",\"2622\":\"156#linkedhashset核心变量\",\"2623\":\"156#_1-3-双向链表节点结构\",\"2624\":\"156#_1-4-jdk版本特性\",\"2625\":\"156#二、代码实践\",\"2626\":\"156#_2-1-linkedhashmap核心方法实现\",\"2627\":\"156#_2-1-1-初始化方法\",\"2628\":\"156#_2-1-2-put方法实现\",\"2629\":\"156#_2-1-3-get方法实现\",\"2630\":\"156#_2-1-4-remove方法实现\",\"2631\":\"156#_2-2-linkedhashset核心方法实现\",\"2632\":\"156#_2-3-lru缓存实现示例\",\"2633\":\"156#三、设计思想\",\"2634\":\"156#_3-1-数据结构设计\",\"2635\":\"156#_3-2-迭代顺序保证\",\"2636\":\"156#_3-3-性能权衡\",\"2637\":\"156#_3-4-接口设计原则\",\"2638\":\"156#四、避坑指南\",\"2639\":\"156#_4-1-性能陷阱\",\"2640\":\"156#_4-2-并发问题\",\"2641\":\"156#_4-3-序列化问题\",\"2642\":\"156#_4-4-正确实现lru缓存\",\"2643\":\"156#五、深度思考题\",\"2644\":\"157\",\"2645\":\"157#一、核理论\",\"2646\":\"157#_1-1-treemap与treeset类结构分析\",\"2647\":\"157#_1-2-核心成员变量\",\"2648\":\"157#treemap核心变量\",\"2649\":\"157#treeset核心变量\",\"2650\":\"157#_1-3-红黑树特性\",\"2651\":\"157#_1-4-jdk版本特性差异\",\"2652\":\"157#二、代码实践\",\"2653\":\"157#_2-1-treemap核心方法实现\",\"2654\":\"157#_2-1-1-红黑树节点结构\",\"2655\":\"157#_2-1-2-put方法实现\",\"2656\":\"157#_2-1-3-红黑树插入后修复\",\"2657\":\"157#_2-1-4-旋转操作\",\"2658\":\"157#_2-2-treeset核心方法实现\",\"2659\":\"157#_2-3-实际应用示例\",\"2660\":\"157#_2-3-1-自定义排序示例\",\"2661\":\"157#_2-3-2-导航方法使用示例\",\"2662\":\"157#三、设计思想\",\"2663\":\"157#_3-1-红黑树数据结构\",\"2664\":\"157#_3-2-排序机制\",\"2665\":\"157#_3-3-视图机制\",\"2666\":\"157#_3-4-与hashmap的对比\",\"2667\":\"157#四、避坑指南\",\"2668\":\"157#_4-1-键的可比较性\",\"2669\":\"157#_4-2-键的不可变性\",\"2670\":\"157#_4-3-线程安全问题\",\"2671\":\"157#_4-4-性能陷阱\",\"2672\":\"157#五、深度思考题\",\"2673\":\"158\",\"2674\":\"158#核理論\",\"2675\":\"158#_1-1-类结构分析\",\"2676\":\"158#_1-2-弱引用机制\",\"2677\":\"158#_1-3-jdk版本特性\",\"2678\":\"158#代码实践\",\"2679\":\"158#_2-1-核心成员变量\",\"2680\":\"158#_2-2-entry节点实现\",\"2681\":\"158#_2-3-清理过期条目\",\"2682\":\"158#_2-4-get方法实现\",\"2683\":\"158#_2-5-put方法实现\",\"2684\":\"158#_2-6-扩容机制\",\"2685\":\"158#_2-7-weakhashmap缓存示例\",\"2686\":\"158#设计思想\",\"2687\":\"158#_3-1-数据结构设计\",\"2688\":\"158#_3-2-自动清理策略\",\"2689\":\"158#_3-3-性能权衡\",\"2690\":\"158#避坑指南\",\"2691\":\"158#_4-1-键的强引用问题\",\"2692\":\"158#_4-2-线程安全问题\",\"2693\":\"158#_4-3-值的内存泄漏\",\"2694\":\"158#_4-4-迭代行为不可预测\",\"2695\":\"158#深度思考题\",\"2696\":\"158#思考题1-weakhashmap与hashmap的红黑树实现有何不同\",\"2697\":\"158#思考题2-如何实现一个线程安全的weakhashmap\",\"2698\":\"158#思考题3-weakhashmap、softreference和phantomreference在缓存实现中有何区别\",\"2699\":\"159\",\"2700\":\"159#核心理论\",\"2701\":\"159#_1-1-时间复杂度定义与表示法\",\"2702\":\"159#_1-2-常见时间复杂度类型\",\"2703\":\"159#_1-3-空间复杂度基础\",\"2704\":\"159#_1-4-摊还时间复杂度\",\"2705\":\"159#代码实践\",\"2706\":\"159#_2-1-复杂度分析实例\",\"2707\":\"159#_2-1-1-常数时间复杂度o-1\",\"2708\":\"159#_2-1-2-线性时间复杂度o-n\",\"2709\":\"159#_2-1-3-平方时间复杂度o-n2\",\"2710\":\"159#_2-1-4-对数时间复杂度o-log-n\",\"2711\":\"159#_2-2-递归算法复杂度分析\",\"2712\":\"159#_2-3-集合框架操作复杂度分析\",\"2713\":\"159#设计思想\",\"2714\":\"159#_3-1-复杂度优化策略\",\"2715\":\"159#_3-1-1-空间换时间\",\"2716\":\"159#_3-1-2-时间换空间\",\"2717\":\"159#_3-2-复杂度分析在系统设计中的应用\",\"2718\":\"159#避坑指南\",\"2719\":\"159#_4-1-常见复杂度分析错误\",\"2720\":\"159#_4-1-1-忽略常数因子\",\"2721\":\"159#_4-1-2-混淆最好、最坏和平均情况\",\"2722\":\"159#_4-2-面试中的复杂度陷阱\",\"2723\":\"159#_4-2-1-隐藏的复杂度\",\"2724\":\"159#_4-2-2-递归调用栈溢出风险\",\"2725\":\"159#深度思考题\",\"2726\":\"159#思考题1-如何分析嵌套循环的时间复杂度\",\"2727\":\"159#思考题2-如何在不使用额外空间的情况下优化时间复杂度\",\"2728\":\"159#思考题3-如何评估一个系统的性能瓶颈并进行优化\",\"2729\":\"160\",\"2730\":\"160#概述\",\"2731\":\"160#知识要点\",\"2732\":\"160#_2-1-封装\",\"2733\":\"160#_2-1-1-访问控制修饰符\",\"2734\":\"160#_2-1-2-javabean规范\",\"2735\":\"160#_2-2-继承\",\"2736\":\"160#_2-2-1-继承的基本语法\",\"2737\":\"160#_2-2-2-方法重写-override\",\"2738\":\"160#_2-2-3-super关键字\",\"2739\":\"160#_2-3-多态\",\"2740\":\"160#_2-3-1-向上转型\",\"2741\":\"160#_2-3-2-方法重载-overload\",\"2742\":\"160#_2-3-3-接口与多态\",\"2743\":\"160#知识扩展\",\"2744\":\"160#_3-1-设计思想\",\"2745\":\"160#_3-1-1-里氏替换原则\",\"2746\":\"160#_3-1-2-开闭原则\",\"2747\":\"160#_3-2-避坑指南\",\"2748\":\"160#_3-2-1-继承滥用\",\"2749\":\"160#_3-2-2-多态误用\",\"2750\":\"160#_3-2-3-封装过度\",\"2751\":\"160#_3-3-深度思考题\",\"2752\":\"160#思考题1-重载和重写的区别是什么\",\"2753\":\"160#思考题2-java为什么不支持多继承\",\"2754\":\"160#思考题3-如何理解-多态是封装和继承的延伸\",\"2755\":\"161\",\"2756\":\"161#概述\",\"2757\":\"161#知识要点\",\"2758\":\"161#_2-1-类\",\"2759\":\"161#_2-1-1-类的定义与结构\",\"2760\":\"161#_2-1-2-类的加载机制\",\"2761\":\"161#_2-1-3-类的修饰符\",\"2762\":\"161#_2-2-包\",\"2763\":\"161#_2-2-1-包的命名规范\",\"2764\":\"161#_2-3-变量\",\"2765\":\"161#_2-2-2-包的访问控制\",\"2766\":\"161#_2-3-1-数据类型\",\"2767\":\"161#_2-3-2-变量作用域\",\"2768\":\"161#_2-2-3-包导入语法\",\"2769\":\"161#_3-1-设计思想\",\"2770\":\"161#_3-1-1-单一职责原则\",\"2771\":\"161#_3-1-3-封装原则\",\"2772\":\"161#_3-1-4-接口隔离原则\",\"2773\":\"161#_3-2-避坑指南\",\"2774\":\"161#_3-2-2-变量作用域过大\",\"2775\":\"161#_3-2-3-静态变量滥用\",\"2776\":\"161#_3-2-4-基本类型与包装类型混用\",\"2777\":\"161#_3-2-2-变量作用域过大-1\",\"2778\":\"161#_3-3-深度思考题\",\"2779\":\"161#思考题2-如何设计一个不可变对象\",\"2780\":\"161#思考题3-jdk8中的接口有哪些新特性\",\"2781\":\"162\",\"2782\":\"162#概述\",\"2783\":\"162#知识要点\",\"2784\":\"162#_1-方法的定义与结构\",\"2785\":\"162#_2-参数传递机制\",\"2786\":\"162#_3-方法重载-overload\",\"2787\":\"162#知识扩展\",\"2788\":\"162#设计思想\",\"2789\":\"162#避坑指南\",\"2790\":\"162#深度思考题\",\"2791\":\"163\",\"2792\":\"163#概述\",\"2793\":\"163#知识要点\",\"2794\":\"163#_1-权限修饰符作用范围\",\"2795\":\"163#_2-private修饰符\",\"2796\":\"163#_3-default修饰符-包私有\",\"2797\":\"163#_4-protected修饰符\",\"2798\":\"163#_5-public修饰符\",\"2799\":\"163#知识扩展\",\"2800\":\"163#设计思想\",\"2801\":\"163#避坑指南\",\"2802\":\"163#深度思考题\",\"2803\":\"164\",\"2804\":\"164#概述\",\"2805\":\"164#知识要点\",\"2806\":\"164#_1-关键字分类与特性\",\"2807\":\"164#_1-访问控制关键字\",\"2808\":\"164#_2-类与方法修饰关键字\",\"2809\":\"164#_3-流程控制关键字\",\"2810\":\"164#_2-特殊关键字\",\"2811\":\"164#知识扩展\",\"2812\":\"164#设计思想\",\"2813\":\"164#避坑指南\",\"2814\":\"164#深度思考题\",\"2815\":\"165\",\"2816\":\"165#概述\",\"2817\":\"165#知识要点\",\"2818\":\"165#_1-枚举的基本定义\",\"2819\":\"165#_2-枚举的核心特性\",\"2820\":\"165#_3-枚举的常用方法\",\"2821\":\"165#_4-带成员的枚举\",\"2822\":\"165#_5-枚举与switch结合\",\"2823\":\"165#知识扩展\",\"2824\":\"165#设计思想\",\"2825\":\"165#避坑指南\",\"2826\":\"165#深度思考题\",\"2827\":\"166\",\"2828\":\"166#概述\",\"2829\":\"166#知识要点\",\"2830\":\"166#_1-文件流的分类与特点\",\"2831\":\"166#_2-fileinputstream的使用\",\"2832\":\"166#_3-fileoutputstream的使用\",\"2833\":\"166#_4-filereader和filewriter的使用\",\"2834\":\"166#知识扩展\",\"2835\":\"166#设计思想\",\"2836\":\"166#避坑指南\",\"2837\":\"166#深度思考题\",\"2838\":\"167\",\"2839\":\"167#概述\",\"2840\":\"167#知识要点\",\"2841\":\"167#_1-inputstream抽象类\",\"2842\":\"167#_2-outputstream抽象类\",\"2843\":\"167#_3-字节流的基本使用\",\"2844\":\"167#_4-字节数组流\",\"2845\":\"167#_5-数据流\",\"2846\":\"167#知识扩展\",\"2847\":\"167#设计思想\",\"2848\":\"167#避坑指南\",\"2849\":\"167#深度思考题\",\"2850\":\"168\",\"2851\":\"168#概述\",\"2852\":\"168#知识要点\",\"2853\":\"168#_1-reader抽象类\",\"2854\":\"168#_2-writer抽象类\",\"2855\":\"168#_3-字符流与字节流的转换\",\"2856\":\"168#_4-缓冲字符流\",\"2857\":\"168#_5-字符数组流和字符串流\",\"2858\":\"168#知识扩展\",\"2859\":\"168#设计思想\",\"2860\":\"168#避坑指南\",\"2861\":\"168#深度思考题\",\"2862\":\"169\",\"2863\":\"169#概述\",\"2864\":\"169#知识要点\",\"2865\":\"169#_1-缓冲流的工作原理\",\"2866\":\"169#_2-字节缓冲流\",\"2867\":\"169#_3-字符缓冲流\",\"2868\":\"169#_4-缓冲流的性能优势\",\"2869\":\"169#_5-缓冲流的特殊方法\",\"2870\":\"169#知识扩展\",\"2871\":\"169#设计思想\",\"2872\":\"169#避坑指南\",\"2873\":\"169#深度思考题\",\"2874\":\"170\",\"2875\":\"170#概述\",\"2876\":\"170#知识要点\",\"2877\":\"170#_1-转换流的作用与原理\",\"2878\":\"170#_2-inputstreamreader详解\",\"2879\":\"170#_3-outputstreamwriter详解\",\"2880\":\"170#_4-转换流与缓冲流的结合使用\",\"2881\":\"170#_5-字符编码的处理\",\"2882\":\"170#知识扩展\",\"2883\":\"170#设计思想\",\"2884\":\"170#避坑指南\",\"2885\":\"170#深度思考题\",\"2886\":\"171\",\"2887\":\"171#概述\",\"2888\":\"171#知识要点\",\"2889\":\"171#_1-序列流的工作原理\",\"2890\":\"171#_2-sequenceinputstream的构造方法\",\"2891\":\"171#_3-组合两个输入流的示例\",\"2892\":\"171#_4-组合多个输入流的示例\",\"2893\":\"171#_5-序列流的实际应用场景\",\"2894\":\"171#知识扩展\",\"2895\":\"171#设计思想\",\"2896\":\"171#避坑指南\",\"2897\":\"171#深度思考题\",\"2898\":\"172\",\"2899\":\"172#概述\",\"2900\":\"172#知识要点\",\"2901\":\"172#_1-打印流的核心特点\",\"2902\":\"172#_2-printstream详解\",\"2903\":\"172#_3-printwriter详解\",\"2904\":\"172#_4-自动刷新机制\",\"2905\":\"172#_5-格式化输出详解\",\"2906\":\"172#知识扩展\",\"2907\":\"172#设计思想\",\"2908\":\"172#避坑指南\",\"2909\":\"172#深度思考题\",\"2910\":\"173\",\"2911\":\"173#概述\",\"2912\":\"173#知识要点\",\"2913\":\"173#_1-nio与传统io的主要区别\",\"2914\":\"173#_2-缓冲区-buffer-详解\",\"2915\":\"173#_3-通道-channel-详解\",\"2916\":\"173#_4-选择器-selector-详解\",\"2917\":\"173#_5-内存映射文件\",\"2918\":\"173#知识扩展\",\"2919\":\"173#设计思想\",\"2920\":\"173#避坑指南\",\"2921\":\"173#深度思考题\",\"2922\":\"174\",\"2923\":\"174#概述\",\"2924\":\"174#知识要点\",\"2925\":\"174#_1-异常体系结构\",\"2926\":\"174#_2-异常的分类\",\"2927\":\"174#_3-异常的基本使用\",\"2928\":\"174#知识扩展\",\"2929\":\"174#设计思想\",\"2930\":\"174#避坑指南\",\"2931\":\"174#深度思考题\",\"2932\":\"175\",\"2933\":\"175#概述\",\"2934\":\"175#知识要点\",\"2935\":\"175#_1-异常的底层实现机制\",\"2936\":\"175#_2-堆栈跟踪-stack-trace\",\"2937\":\"175#_3-异常链-exception-chaining\",\"2938\":\"175#_4-自定义异常设计\",\"2939\":\"175#知识扩展\",\"2940\":\"175#设计思想\",\"2941\":\"175#避坑指南\",\"2942\":\"175#深度思考题\",\"2943\":\"176\",\"2944\":\"176#概述\",\"2945\":\"176#知识要点\",\"2946\":\"176#_1-异常处理的核心原则\",\"2947\":\"176#_1-1-明确性原则\",\"2948\":\"176#_1-2-专一性原则\",\"2949\":\"176#_1-3-及时性原则\",\"2950\":\"176#_2-异常处理实用模式\",\"2951\":\"176#_2-1-try-with-resources自动资源管理\",\"2952\":\"176#_2-2-异常转换模式\",\"2953\":\"176#_2-3-异常聚合模式\",\"2954\":\"176#_3-不同层级的异常处理策略\",\"2955\":\"176#_3-1-业务层异常处理\",\"2956\":\"176#_3-2-控制器层异常统一处理\",\"2957\":\"176#知识扩展\",\"2958\":\"176#设计思想\",\"2959\":\"176#避坑指南\",\"2960\":\"176#深度思考题\",\"2961\":\"177\",\"2962\":\"177#概述\",\"2963\":\"177#知识要点\",\"2964\":\"177#_1-反射的核心类与获取方式\",\"2965\":\"177#_1-1-class类\",\"2966\":\"177#_1-2-反射核心api\",\"2967\":\"177#_2-反射的基本操作\",\"2968\":\"177#_2-1-获取类的基本信息\",\"2969\":\"177#_2-2-创建对象\",\"2970\":\"177#_2-3-调用方法\",\"2971\":\"177#_2-4-访问属性\",\"2972\":\"177#知识扩展\",\"2973\":\"177#设计思想\",\"2974\":\"177#避坑指南\",\"2975\":\"177#深度思考题\",\"2976\":\"178\",\"2977\":\"178#概述\",\"2978\":\"178#知识要点\",\"2979\":\"178#_1-类加载与class对象生成流程\",\"2980\":\"178#_1-1-类加载的生命周期\",\"2981\":\"178#_1-2-class对象在jvm中的存储\",\"2982\":\"178#_2-反射成员查找机制\",\"2983\":\"178#_2-1-方法查找流程\",\"2984\":\"178#_2-2-字段查找流程\",\"2985\":\"178#_3-反射调用的底层实现\",\"2986\":\"178#_3-1-反射调用与直接调用的区别\",\"2987\":\"178#_3-2-反射调用的字节码实现\",\"2988\":\"178#_4-反射中的访问控制\",\"2989\":\"178#_4-1-accessibleobject与访问控制\",\"2990\":\"178#_4-2-安全管理器对反射的限制\",\"2991\":\"178#知识扩展\",\"2992\":\"178#设计思想\",\"2993\":\"178#避坑指南\",\"2994\":\"178#深度思考题\",\"2995\":\"179\",\"2996\":\"179#概述\",\"2997\":\"179#知识要点\",\"2998\":\"179#_1-反射在框架设计中的应用\",\"2999\":\"179#_1-1-spring-ioc容器的反射应用\",\"3000\":\"179#_1-2-mybatis中的反射应用\",\"3001\":\"179#_2-反射与注解处理\",\"3002\":\"179#_2-1-自定义注解处理器\",\"3003\":\"179#_2-2-基于反射的注解验证框架\",\"3004\":\"179#_3-反射与动态代理\",\"3005\":\"179#_3-1-jdk动态代理实现事务管理\",\"3006\":\"179#_4-反射在序列化与反序列化中的应用\",\"3007\":\"179#_4-1-通用对象深拷贝工具\",\"3008\":\"179#知识扩展\",\"3009\":\"179#设计思想\",\"3010\":\"179#避坑指南\",\"3011\":\"179#深度思考题\",\"3012\":\"180\",\"3013\":\"180#概述\",\"3014\":\"180#知识要点\",\"3015\":\"180#_1-泛型的基本概念\",\"3016\":\"180#_1-1-什么是泛型\",\"3017\":\"180#_1-2-为什么需要泛型\",\"3018\":\"180#_2-泛型类与泛型接口\",\"3019\":\"180#_2-1-泛型类的定义与使用\",\"3020\":\"180#_2-2-多类型参数的泛型类\",\"3021\":\"180#_2-3-泛型接口的定义与实现\",\"3022\":\"180#_3-泛型方法\",\"3023\":\"180#_3-1-泛型方法的定义\",\"3024\":\"180#_3-2-静态泛型方法\",\"3025\":\"180#_3-3-限定类型参数\",\"3026\":\"180#知识扩展\",\"3027\":\"180#_1-设计思想\",\"3028\":\"180#_2-避坑指南\",\"3029\":\"180#_3-深度思考题\",\"3030\":\"181\",\"3031\":\"181#概述\",\"3032\":\"181#知识要点\",\"3033\":\"181#_1-泛型类型擦除机制\",\"3034\":\"181#_1-1-什么是类型擦除\",\"3035\":\"181#_1-2-类型擦除的影响\",\"3036\":\"181#_1-3-桥接方法-bridge-method\",\"3037\":\"181#_2-泛型通配符详解\",\"3038\":\"181#_2-1-无界通配符\",\"3039\":\"181#_2-2-上界通配符-extends-t\",\"3040\":\"181#_2-3-下界通配符-super-t\",\"3041\":\"181#_2-4-pecs原则\",\"3042\":\"182\",\"3043\":\"182#概述\",\"3044\":\"182#知识要点\",\"3045\":\"182#_1-java集合框架中的泛型应用\",\"3046\":\"182#_1-1-核心集合接口与泛型\",\"3047\":\"182#_1-2-collections工具类的泛型方法\",\"3048\":\"182#_2-spring框架中的泛型应用\",\"3049\":\"182#_2-1-依赖注入中的泛型自动装配\",\"3050\":\"182#_2-2-spring-data-jpa的泛型repository\",\"3051\":\"182#_3-mybatis中的泛型应用\",\"3052\":\"182#_3-1-泛型mapper接口\",\"3053\":\"182#_3-2-泛型resultmap\",\"3054\":\"183\",\"3055\":\"183#概述\",\"3056\":\"183#知识要点\",\"3057\":\"183#_1-网络模型\",\"3058\":\"183#_1-1-osi七层模型\",\"3059\":\"183#_1-2-tcp-ip四层模型\",\"3060\":\"183#_2-核心传输协议\",\"3061\":\"183#_2-1-tcp协议\",\"3062\":\"183#_2-2-udp协议\",\"3063\":\"183#_3-java-socket编程基础\",\"3064\":\"183#_3-1-socket概念\",\"3065\":\"183#_3-2-tcp通信流程\",\"3066\":\"183#_3-3-udp通信示例\",\"3067\":\"183#知识扩展\",\"3068\":\"183#设计思想\",\"3069\":\"183#避坑指南\",\"3070\":\"183#深度思考题\",\"3071\":\"184\",\"3072\":\"184#概述\",\"3073\":\"184#知识要点\",\"3074\":\"184#_1-tcp协议深度解析\",\"3075\":\"184#_1-1-拥塞控制机制\",\"3076\":\"184#_1-2-流量控制机制\",\"3077\":\"184#_2-java-io模型演进\",\"3078\":\"184#_2-1-bio-阻塞io-模型\",\"3079\":\"184#_2-2-nio-非阻塞io-模型\",\"3080\":\"184#_2-3-aio-异步io-模型\",\"3081\":\"184#_3-网络并发处理模型\",\"3082\":\"184#_3-1-线程池模型\",\"3083\":\"184#_3-2-reactor模式\",\"3084\":\"184#_4-分布式通信设计\",\"3085\":\"184#_4-1-序列化协议\",\"3086\":\"184#_4-2-负载均衡\",\"3087\":\"184#_4-3-容错机制\",\"3088\":\"184#知识扩展\",\"3089\":\"184#设计思想\",\"3090\":\"184#避坑指南\",\"3091\":\"184#深度思考题\",\"3092\":\"185\",\"3093\":\"185#概述\",\"3094\":\"185#知识要点\",\"3095\":\"185#_1-jvm网络监控工具\",\"3096\":\"185#_1-1-jdk自带监控工具\",\"3097\":\"185#_1-2-第三方监控工具\",\"3098\":\"185#_2-网络诊断命令工具\",\"3099\":\"185#_2-1-系统级网络诊断\",\"3100\":\"185#_2-2-java应用网络诊断\",\"3101\":\"185#_3-日志分析与可视化\",\"3102\":\"185#_3-1-日志框架集成\",\"3103\":\"185#_3-2-日志聚合与分析工具\",\"3104\":\"185#_3-3-分布式追踪系统\",\"3105\":\"185#_4-网络性能测试工具\",\"3106\":\"185#_4-1-基准测试工具\",\"3107\":\"185#_4-2-网络性能分析工具\",\"3108\":\"185#知识扩展\",\"3109\":\"185#设计思想\",\"3110\":\"185#避坑指南\",\"3111\":\"185#深度思考题\",\"3112\":\"186\",\"3113\":\"186#概述\",\"3114\":\"186#知识要点\",\"3115\":\"186#_1-nio核心组件\",\"3116\":\"186#_1-1-buffer缓冲区\",\"3117\":\"186#_1-2-channel通道\",\"3118\":\"186#_1-3-selector选择器\",\"3119\":\"186#_2-异步编程模型\",\"3120\":\"186#_2-1-java-nio-2-aio\",\"3121\":\"186#_2-2-reactor模式\",\"3122\":\"186#_3-netty框架实战\",\"3123\":\"186#_3-1-netty简介\",\"3124\":\"186#_3-2-netty核心组件\",\"3125\":\"186#_3-3-netty服务端示例\",\"3126\":\"186#_3-4-netty粘包-拆包解决方案\",\"3127\":\"186#知识扩展\",\"3128\":\"186#设计思想\",\"3129\":\"186#避坑指南\",\"3130\":\"186#深度思考题\",\"3131\":\"187\",\"3132\":\"187#概述\",\"3133\":\"187#知识要点\",\"3134\":\"187#_1-注解的定义与使用\",\"3135\":\"187#_2-元注解\",\"3136\":\"187#_3-内置注解\",\"3137\":\"187#_4-自定义注解与解析\",\"3138\":\"187#知识扩展\",\"3139\":\"187#设计思想\",\"3140\":\"187#避坑指南\",\"3141\":\"187#深度思考题\",\"3142\":\"188\",\"3143\":\"188#概述\",\"3144\":\"188#知识要点\",\"3145\":\"188#_1-注解的底层实现原理\",\"3146\":\"188#_2-注解的编译期处理\",\"3147\":\"188#_2-1-源码注解处理器-apt\",\"3148\":\"188#_2-2-字节码级别处理\",\"3149\":\"188#_3-注解的运行时解析机制\",\"3150\":\"188#_4-注解与反射的性能影响\",\"3151\":\"188#知识扩展\",\"3152\":\"188#设计思想\",\"3153\":\"188#避坑指南\",\"3154\":\"188#深度思考题\",\"3155\":\"189\",\"3156\":\"189#概述\",\"3157\":\"189#知识要点\",\"3158\":\"189#_1-spring生态中的注解应用\",\"3159\":\"189#_1-1-依赖注入与组件扫描\",\"3160\":\"189#_1-2-事务管理与aop\",\"3161\":\"189#_2-自定义注解处理器开发\",\"3162\":\"189#_2-1-实现一个简单的builder模式生成器\",\"3163\":\"189#_3-orm框架中的注解映射\",\"3164\":\"189#_3-1-mybatis注解配置\",\"3165\":\"189#_3-2-jpa注解映射\",\"3166\":\"189#_4-注解驱动的测试框架\",\"3167\":\"189#知识扩展\",\"3168\":\"189#设计思想\",\"3169\":\"189#避坑指南\",\"3170\":\"189#深度思考题\",\"3171\":\"190\",\"3172\":\"190#概述\",\"3173\":\"190#知识要点\",\"3174\":\"190#_1-sip基本概念\",\"3175\":\"190#_1-1-sip的定义与作用\",\"3176\":\"190#_1-2-sip与相关协议的关系\",\"3177\":\"190#_1-3-sip-url格式\",\"3178\":\"190#_2-sip协议结构\",\"3179\":\"190#_2-1-sip消息类型\",\"3180\":\"190#_2-2-sip消息格式\",\"3181\":\"190#_3-sip核心组件\",\"3182\":\"190#_3-1-用户代理-ua\",\"3183\":\"190#_3-2-代理服务器-proxy-server\",\"3184\":\"190#_3-3-注册服务器-registrar\",\"3185\":\"190#_3-4-重定向服务器-redirect-server\",\"3186\":\"190#_4-sip会话流程\",\"3187\":\"190#_4-1-注册流程\",\"3188\":\"190#_4-2-会话建立流程-invite流程\",\"3189\":\"190#_4-3-会话终止流程\",\"3190\":\"190#_5-java中的sip编程基础\",\"3191\":\"190#知识扩展\",\"3192\":\"190#设计思想\",\"3193\":\"190#避坑指南\",\"3194\":\"190#_1-网络地址转换-nat-问题\",\"3195\":\"190#_2-消息重传与超时\",\"3196\":\"190#_3-状态码处理\",\"3197\":\"190#深度思考题\",\"3198\":\"190#思考题1-sip协议与http协议有哪些异同点\",\"3199\":\"190#思考题2-如何在java中实现一个简单的sip注册客户端\",\"3200\":\"191\",\"3201\":\"191#概述\",\"3202\":\"191#知识要点\",\"3203\":\"191#_1-sip协议底层实现\",\"3204\":\"191#_1-1-sip协议栈架构\",\"3205\":\"191#_1-2-sip消息解析机制\",\"3206\":\"191#_1-3-传输层适配\",\"3207\":\"191#_2-事务与对话管理\",\"3208\":\"191#_2-1-sip事务状态机\",\"3209\":\"191#_2-2-对话生命周期管理\",\"3210\":\"191#_3-sip消息路由机制\",\"3211\":\"191#_3-1-路由规则与处理流程\",\"3212\":\"191#_3-2-代理服务器路由逻辑\",\"3213\":\"191#_4-sip安全机制\",\"3214\":\"191#_4-1-sip-tls加密\",\"3215\":\"191#_4-2-sip身份认证\",\"3216\":\"191#_5-java-sip高级编程特性\",\"3217\":\"191#_5-1-异步事件处理模型\",\"3218\":\"191#_5-2-高并发sip服务器设计\",\"3219\":\"191#知识扩展\",\"3220\":\"191#设计思想\",\"3221\":\"191#避坑指南\",\"3222\":\"191#_1-事务超时与重传处理\",\"3223\":\"191#_2-对话状态维护\",\"3224\":\"191#_3-nat穿透问题\",\"3225\":\"191#_4-性能优化策略\",\"3226\":\"191#深度思考题\",\"3227\":\"191#思考题1-sip事务与tcp连接的关系是什么-它们如何协同工作保证消息可靠传输\",\"3228\":\"191#思考题2-如何设计一个支持百万级并发会话的sip服务器架构\",\"3229\":\"192\",\"3230\":\"192#概述\",\"3231\":\"192#知识要点\",\"3232\":\"192#_1-sip与webrtc集成\",\"3233\":\"192#_2-企业级sip服务器集群部署\",\"3234\":\"192#_1-集群架构设计\",\"3235\":\"192#_2-会话状态同步\",\"3236\":\"192#_3-sip安全机制实现\",\"3237\":\"192#_1-tls加密传输\",\"3238\":\"192#_2-身份认证机制\",\"3239\":\"192#_4-sip性能优化实践\",\"3240\":\"192#_1-异步消息处理\",\"3241\":\"192#_2-连接复用与池化\",\"3242\":\"192#_5-实际应用案例分析\",\"3243\":\"192#_1-企业ip-pbx系统\",\"3244\":\"192#_2-云通信平台集成\",\"3245\":\"193\",\"3246\":\"193#_1-镜像导入导出\",\"3247\":\"193#docker-compose示例\",\"3248\":\"193#一、安装docker-compose\",\"3249\":\"193#二、卸载docker-compose\",\"3250\":\"193#三、-使用docker-compose编排nginx-springboot项目\",\"3251\":\"193@0\",\"3252\":\"193@1\",\"3253\":\"194\",\"3254\":\"194#三种通讯方式\",\"3255\":\"194#一、通过容器ip访问-不推荐\",\"3256\":\"194#二、通过主机ip访问-不推荐\",\"3257\":\"194#三、建立容器链接-推荐\",\"3258\":\"195\",\"3259\":\"195#harbor升级方案\",\"3260\":\"195#环境检查\",\"3261\":\"195#获取最新镜像\",\"3262\":\"195#删除原harbor\",\"3263\":\"195#安装新harbor\",\"3264\":\"196\",\"3265\":\"196#_2-1-主机名\",\"3266\":\"196#_2-2-ip地址\",\"3267\":\"196#_2-3-主机名与ip地址解析\",\"3268\":\"196#_2-4-主机安全设置\",\"3269\":\"196#_2-5-主机时钟同步\",\"3270\":\"196#_2-6-关闭swap\",\"3271\":\"196#_2-7-配置内核路由转发\",\"3272\":\"196#_5-1-rancher访问\",\"3273\":\"196#_5-2-通过rancher创建kubernetes集群\",\"3274\":\"196#_8-1-持久化存储类准备\",\"3275\":\"196#_8-1-1-nfs服务\",\"3276\":\"196#_8-1-2-存储卷\",\"3277\":\"196#_8-2-mysql数据库部署\",\"3278\":\"196#_8-2-1-pvc准备\",\"3279\":\"196#_8-2-2-mysql部署\",\"3280\":\"196#_8-2-2-mysql访问\",\"3281\":\"196#_8-2-2-1-方案一-通过rancher-web界面访问\",\"3282\":\"196#_8-2-2-2-方案二-通过主机访问\",\"3283\":\"197\",\"3284\":\"198\",\"3285\":\"199\",\"3286\":\"200\",\"3287\":\"201\",\"3288\":\"202\",\"3289\":\"203\",\"3290\":\"204\",\"3291\":\"205\",\"3292\":\"206\",\"3293\":\"207\",\"3294\":\"208\",\"3295\":\"209\",\"3296\":\"210\",\"3297\":\"211\",\"3298\":\"212\",\"3299\":\"213\",\"3300\":\"214\",\"3301\":\"215\",\"3302\":\"216\",\"3303\":\"217\",\"3304\":\"218\",\"3305\":\"219\",\"3306\":\"220\",\"3307\":\"221\",\"3308\":\"222\",\"3309\":\"223\",\"3310\":\"224\",\"3311\":\"225\",\"3312\":\"226\",\"3313\":\"227\",\"3314\":\"228\",\"3315\":\"229\",\"3316\":\"230\",\"3317\":\"231\",\"3318\":\"232\",\"3319\":\"233\",\"3320\":\"234\",\"3321\":\"235\",\"3322\":\"236\",\"3323\":\"237\",\"3324\":\"238\",\"3325\":\"239\",\"3326\":\"240\",\"3327\":\"241\",\"3328\":\"242\",\"3329\":\"243\",\"3330\":\"244\",\"3331\":\"245\",\"3332\":\"246\",\"3333\":\"247\",\"3334\":\"248\",\"3335\":\"249\",\"3336\":\"250\",\"3337\":\"251\",\"3338\":\"252\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1,22],\"1\":[1],\"2\":[1,12],\"3\":[1],\"4\":[null,null,1],\"5\":[1,18],\"6\":[null,null,1],\"7\":[null,null,1],\"8\":[1,20],\"9\":[null,null,1],\"10\":[null,null,1],\"11\":[2,10],\"12\":[2,8],\"13\":[2,12],\"14\":[2,11],\"15\":[2,10],\"16\":[1,10],\"17\":[1,1],\"18\":[1,2],\"19\":[1,1],\"20\":[2,25],\"21\":[1,5],\"22\":[1,2],\"23\":[1,3],\"24\":[1],\"25\":[null,null,1],\"26\":[null,null,1],\"27\":[1,3],\"28\":[1,19],\"29\":[1,20],\"30\":[1,12],\"31\":[1,13],\"32\":[null,null,1],\"33\":[null,null,2],\"34\":[2],\"35\":[1,6],\"36\":[1],\"37\":[2,37],\"38\":[2,16],\"39\":[2,25],\"40\":[1],\"41\":[2,6],\"42\":[2,9],\"43\":[2,32],\"44\":[3],\"45\":[1,9],\"46\":[1],\"47\":[2,33],\"48\":[2,32],\"49\":[2,29],\"50\":[2,21],\"51\":[1],\"52\":[2,8],\"53\":[2,14],\"54\":[2,31],\"55\":[3],\"56\":[1,9],\"57\":[1],\"58\":[2,47],\"59\":[2,29],\"60\":[2,26],\"61\":[1],\"62\":[2,5],\"63\":[2,12],\"64\":[2,25],\"65\":[2],\"66\":[1,8],\"67\":[1],\"68\":[2,32],\"69\":[2,25],\"70\":[2,21],\"71\":[2,28],\"72\":[1],\"73\":[2,7],\"74\":[2,15],\"75\":[2,23],\"76\":[2],\"77\":[1,8],\"78\":[1],\"79\":[2],\"80\":[2,14],\"81\":[3,23],\"82\":[2,15],\"83\":[2],\"84\":[3,21],\"85\":[3,22],\"86\":[2,20],\"87\":[3,12],\"88\":[2],\"89\":[3,32],\"90\":[3,18],\"91\":[3,29],\"92\":[1],\"93\":[2,13],\"94\":[2,22],\"95\":[2,34],\"96\":[1],\"97\":[4,4],\"98\":[2,22],\"99\":[2,19],\"100\":[2,17],\"101\":[2,10],\"102\":[2,31],\"103\":[2,5],\"104\":[2,5],\"105\":[4],\"106\":[1,19],\"107\":[2,11],\"108\":[2,15],\"109\":[2,11],\"110\":[2,28],\"111\":[2,6],\"112\":[2,27],\"113\":[1,78],\"114\":[1,52],\"115\":[4,88],\"116\":[2,20],\"117\":[2],\"118\":[3,30],\"119\":[2,31],\"120\":[3,15],\"121\":[2,71],\"122\":[2,149],\"123\":[2,18],\"124\":[1],\"125\":[1,2100],\"126\":[2],\"127\":[1,15],\"128\":[2,24],\"129\":[2,52],\"130\":[1,61],\"131\":[1,22],\"132\":[1,18],\"133\":[1,10],\"134\":[1,11],\"135\":[1,15],\"136\":[1,25],\"137\":[1,49],\"138\":[1,50],\"139\":[1,30],\"140\":[1,70],\"141\":[3,23],\"142\":[1,40],\"143\":[2],\"144\":[1],\"145\":[2],\"146\":[2],\"147\":[1,20],\"148\":[3,14],\"149\":[3],\"150\":[3,11],\"151\":[3,17],\"152\":[4,19],\"153\":[4,59],\"154\":[4,19],\"155\":[5],\"156\":[3,30],\"157\":[4,67],\"158\":[2],\"159\":[3],\"160\":[3,31],\"161\":[3,66],\"162\":[4,24],\"163\":[2,9],\"164\":[5],\"165\":[4,71],\"166\":[4,77],\"167\":[5,90],\"168\":[5,2],\"169\":[3,53],\"170\":[3],\"171\":[4,61],\"172\":[3,39],\"173\":[3,24],\"174\":[2],\"175\":[3],\"176\":[3,15],\"177\":[4,22],\"178\":[3,44],\"179\":[2,4],\"180\":[3,19],\"181\":[3,5],\"182\":[2,58],\"183\":[2,8],\"184\":[3,9],\"185\":[3,19],\"186\":[3,108],\"187\":[2],\"188\":[1],\"189\":[1,44],\"190\":[1,99],\"191\":[1,65],\"192\":[1,87],\"193\":[1,120],\"194\":[2],\"195\":[1,7],\"196\":[1],\"197\":[2],\"198\":[2,19],\"199\":[3,28],\"200\":[2,33],\"201\":[2,31],\"202\":[2,29],\"203\":[2,27],\"204\":[2,45],\"205\":[2],\"206\":[3,13],\"207\":[3,10],\"208\":[3,20],\"209\":[1],\"210\":[2,13],\"211\":[2,24],\"212\":[2,33],\"213\":[4],\"214\":[1],\"215\":[2,3],\"216\":[2,106],\"217\":[1],\"218\":[4,4],\"219\":[2,63],\"220\":[1],\"221\":[3,4],\"222\":[5,8],\"223\":[2,21],\"224\":[1,4],\"225\":[2,5],\"226\":[2,12],\"227\":[2,11],\"228\":[2,10],\"229\":[2,11],\"230\":[2,3],\"231\":[1],\"232\":[1,181],\"233\":[2,14],\"234\":[2,42],\"235\":[2,72],\"236\":[3,7],\"237\":[1,15],\"238\":[2,7],\"239\":[2,12],\"240\":[2,6],\"241\":[1,5],\"242\":[3,35],\"243\":[2,11],\"244\":[2,4],\"245\":[2,6],\"246\":[1,7],\"247\":[1,8],\"248\":[2,15],\"249\":[3,28],\"250\":[2,65],\"251\":[2,5],\"252\":[1],\"253\":[2,3],\"254\":[2,3],\"255\":[3,17],\"256\":[2,10],\"257\":[2,8],\"258\":[1],\"259\":[1],\"260\":[1,8],\"261\":[1,21],\"262\":[1,1],\"263\":[1,17],\"264\":[1,70],\"265\":[1,10],\"266\":[1,18],\"267\":[1,83],\"268\":[1],\"269\":[1,115],\"270\":[1,51],\"271\":[2,10],\"272\":[2,9],\"273\":[2,5],\"274\":[2,9],\"275\":[2,6],\"276\":[2,8],\"277\":[2,6],\"278\":[2,27],\"279\":[2,86],\"280\":[1,103],\"281\":[5,53],\"282\":[2,26],\"283\":[1,141],\"284\":[1,55],\"285\":[1,86],\"286\":[1,231],\"287\":[1,36],\"288\":[1,42],\"289\":[1,176],\"290\":[1,36],\"291\":[2,57],\"292\":[2,63],\"293\":[2,60],\"294\":[1,33],\"295\":[1],\"296\":[5],\"297\":[1,7],\"298\":[2,12],\"299\":[3,7],\"300\":[2],\"301\":[3,5],\"302\":[3,10],\"303\":[2,75],\"304\":[3,66],\"305\":[2,46],\"306\":[3,106],\"307\":[1,74],\"308\":[2],\"309\":[1,11],\"310\":[1],\"311\":[2,23],\"312\":[2,18],\"313\":[2,15],\"314\":[1],\"315\":[1,6],\"316\":[1,7],\"317\":[1,19],\"318\":[3],\"319\":[1,11],\"320\":[1],\"321\":[2,14],\"322\":[2,8],\"323\":[2],\"324\":[1,13],\"325\":[1,14],\"326\":[1,12],\"327\":[2,14],\"328\":[1],\"329\":[1,5],\"330\":[1,7],\"331\":[1,18],\"332\":[3],\"333\":[1,11],\"334\":[1],\"335\":[2,24],\"336\":[2,19],\"337\":[2],\"338\":[1,40],\"339\":[1,7],\"340\":[2,13],\"341\":[1],\"342\":[1,8],\"343\":[1,7],\"344\":[1,24],\"345\":[2],\"346\":[1,5],\"347\":[1],\"348\":[2,27],\"349\":[2,4],\"350\":[2,5],\"351\":[2],\"352\":[1,16],\"353\":[1,16],\"354\":[1,25],\"355\":[2,11],\"356\":[1],\"357\":[1,5],\"358\":[1,9],\"359\":[1,33],\"360\":[2],\"361\":[1,11],\"362\":[1],\"363\":[2,9],\"364\":[2,10],\"365\":[2],\"366\":[1,33],\"367\":[1,27],\"368\":[1,23],\"369\":[2,12],\"370\":[1],\"371\":[1,9],\"372\":[1,10],\"373\":[1,25],\"374\":[3],\"375\":[1,10],\"376\":[1],\"377\":[3,22],\"378\":[3,14],\"379\":[2],\"380\":[1,26],\"381\":[2,33],\"382\":[2,29],\"383\":[2,10],\"384\":[1],\"385\":[1,7],\"386\":[1,13],\"387\":[1,31],\"388\":[2],\"389\":[2,7],\"390\":[2],\"391\":[2,16],\"392\":[2,21],\"393\":[2,19],\"394\":[2,27],\"395\":[2],\"396\":[2,11],\"397\":[2,9],\"398\":[2,20],\"399\":[2],\"400\":[2,5],\"401\":[2],\"402\":[2],\"403\":[2,17],\"404\":[3,18],\"405\":[2,9],\"406\":[3,21],\"407\":[2,31],\"408\":[2],\"409\":[2,11],\"410\":[2,8],\"411\":[2,19],\"412\":[2],\"413\":[2,7],\"414\":[2],\"415\":[2,22],\"416\":[2,23],\"417\":[2,19],\"418\":[2,10],\"419\":[2,20],\"420\":[2],\"421\":[2,9],\"422\":[2,11],\"423\":[2,39],\"424\":[3],\"425\":[2,8],\"426\":[2],\"427\":[3,38],\"428\":[2,57],\"429\":[2,39],\"430\":[2,46],\"431\":[2],\"432\":[2,9],\"433\":[2,11],\"434\":[2,73],\"435\":[2],\"436\":[2,7],\"437\":[2],\"438\":[2,74],\"439\":[2,100],\"440\":[2,70],\"441\":[2,26],\"442\":[2],\"443\":[2,10],\"444\":[2,9],\"445\":[2,57],\"446\":[2],\"447\":[2,8],\"448\":[2],\"449\":[2,42],\"450\":[2,45],\"451\":[2,58],\"452\":[2,20],\"453\":[2],\"454\":[2,10],\"455\":[2,8],\"456\":[2,146],\"457\":[1],\"458\":[1,3],\"459\":[3,69],\"460\":[2,10],\"461\":[2,34],\"462\":[3,24],\"463\":[3,76],\"464\":[3],\"465\":[1,15],\"466\":[1],\"467\":[2],\"468\":[2,28],\"469\":[3,33],\"470\":[2],\"471\":[5,85],\"472\":[2,45],\"473\":[3,23],\"474\":[3,21],\"475\":[2],\"476\":[7,23],\"477\":[3,16],\"478\":[2],\"479\":[3,28],\"480\":[5,25],\"481\":[2],\"482\":[4,11],\"483\":[3,7],\"484\":[1],\"485\":[2],\"486\":[3,13],\"487\":[3,9],\"488\":[3,8],\"489\":[2],\"490\":[3,38],\"491\":[3,28],\"492\":[3,9],\"493\":[2],\"494\":[8,34],\"495\":[4,36],\"496\":[3],\"497\":[1,14],\"498\":[1],\"499\":[2,9],\"500\":[2,41],\"501\":[3,38],\"502\":[3,38],\"503\":[2,4],\"504\":[3,21],\"505\":[2,6],\"506\":[3,6],\"507\":[2,4],\"508\":[3,6],\"509\":[3,4],\"510\":[2,12],\"511\":[1],\"512\":[2],\"513\":[3,5],\"514\":[3,11],\"515\":[3,5],\"516\":[2],\"517\":[3,30],\"518\":[3,15],\"519\":[3,14],\"520\":[2],\"521\":[5,44],\"522\":[5,26],\"523\":[3],\"524\":[1,10],\"525\":[1],\"526\":[2,26],\"527\":[2,34],\"528\":[2,7],\"529\":[2,49],\"530\":[1],\"531\":[1,7],\"532\":[1,16],\"533\":[1,25],\"534\":[3],\"535\":[1,8],\"536\":[1],\"537\":[2,50],\"538\":[2,65],\"539\":[2,53],\"540\":[2,4],\"541\":[3,27],\"542\":[3,25],\"543\":[3,84],\"544\":[2,63],\"545\":[2,84],\"546\":[1],\"547\":[2],\"548\":[3,13],\"549\":[3,11],\"550\":[4,19],\"551\":[2],\"552\":[3,22],\"553\":[4,34],\"554\":[3,26],\"555\":[2],\"556\":[5,25],\"557\":[4,44],\"558\":[2],\"559\":[1,10],\"560\":[1],\"561\":[2,3],\"562\":[3,11],\"563\":[3,13],\"564\":[3,6],\"565\":[2,3],\"566\":[3,29],\"567\":[3,27],\"568\":[3,6],\"569\":[2],\"570\":[3,21],\"571\":[3,19],\"572\":[1],\"573\":[2,3],\"574\":[5,44],\"575\":[5,53],\"576\":[2,2],\"577\":[4,11],\"578\":[3,35],\"579\":[2,2],\"580\":[4,27],\"581\":[3,4],\"582\":[2,2],\"583\":[4,21],\"584\":[4,46],\"585\":[4,18],\"586\":[4],\"587\":[1],\"588\":[2,7],\"589\":[3,5],\"590\":[3,10],\"591\":[1],\"592\":[3,51],\"593\":[2,19],\"594\":[1],\"595\":[3,6],\"596\":[3,6],\"597\":[2,5],\"598\":[1],\"599\":[3,5],\"600\":[3,6],\"601\":[3,5],\"602\":[1,37],\"603\":[4],\"604\":[1],\"605\":[2,15],\"606\":[3,8],\"607\":[3,8],\"608\":[1],\"609\":[3,45],\"610\":[2,36],\"611\":[1],\"612\":[3,9],\"613\":[3,16],\"614\":[1],\"615\":[3,7],\"616\":[3,5],\"617\":[3,7],\"618\":[1,33],\"619\":[4],\"620\":[1],\"621\":[2,8],\"622\":[3,18],\"623\":[3,9],\"624\":[1],\"625\":[3,58],\"626\":[2,62],\"627\":[1],\"628\":[3,8],\"629\":[3,13],\"630\":[1],\"631\":[3,6],\"632\":[3,9],\"633\":[3,9],\"634\":[1,34],\"635\":[3],\"636\":[1],\"637\":[2,5],\"638\":[3,20],\"639\":[3,9],\"640\":[1],\"641\":[3,15],\"642\":[3,49],\"643\":[3,30],\"644\":[1],\"645\":[3,13],\"646\":[3,6],\"647\":[1],\"648\":[3,10],\"649\":[3,8],\"650\":[3,5],\"651\":[1,34],\"652\":[4],\"653\":[1],\"654\":[2,15],\"655\":[3,9],\"656\":[4,20],\"657\":[1],\"658\":[3,27],\"659\":[2,21],\"660\":[4,26],\"661\":[1],\"662\":[3,14],\"663\":[3,28],\"664\":[1],\"665\":[3,7],\"666\":[3,3],\"667\":[4,6],\"668\":[1,24],\"669\":[4],\"670\":[1],\"671\":[2,10],\"672\":[3,23],\"673\":[3,13],\"674\":[1],\"675\":[3,53],\"676\":[2,55],\"677\":[3,44],\"678\":[1],\"679\":[3,5],\"680\":[3,6],\"681\":[2,5],\"682\":[1],\"683\":[3,6],\"684\":[3,4],\"685\":[3,5],\"686\":[1,31],\"687\":[3],\"688\":[1],\"689\":[2,9],\"690\":[3,16],\"691\":[3,20],\"692\":[1],\"693\":[3,41],\"694\":[2,35],\"695\":[1],\"696\":[3,8],\"697\":[3,9],\"698\":[2,10],\"699\":[1],\"700\":[5,9],\"701\":[5,8],\"702\":[3,9],\"703\":[1,29],\"704\":[3],\"705\":[1],\"706\":[2,13],\"707\":[3,29],\"708\":[3,14],\"709\":[1],\"710\":[3,62],\"711\":[2,38],\"712\":[1],\"713\":[3,14],\"714\":[3,10],\"715\":[2,8],\"716\":[1],\"717\":[3,17],\"718\":[3,8],\"719\":[3,10],\"720\":[1,38],\"721\":[3],\"722\":[1],\"723\":[2,8],\"724\":[3,43],\"725\":[3,13],\"726\":[1],\"727\":[3,27],\"728\":[2,65],\"729\":[3,57],\"730\":[1],\"731\":[3,8],\"732\":[3,7],\"733\":[2,7],\"734\":[1],\"735\":[3,10],\"736\":[3,8],\"737\":[3,7],\"738\":[1,32],\"739\":[3],\"740\":[1],\"741\":[2,22],\"742\":[3,27],\"743\":[3,17],\"744\":[1],\"745\":[3,37],\"746\":[2,83],\"747\":[3,59],\"748\":[1],\"749\":[3,8],\"750\":[3,7],\"751\":[2,5],\"752\":[1],\"753\":[3,9],\"754\":[3,8],\"755\":[3,5],\"756\":[1,38],\"757\":[2],\"758\":[1],\"759\":[2,15],\"760\":[3],\"761\":[3,12],\"762\":[3,15],\"763\":[3],\"764\":[7,8],\"765\":[8,17],\"766\":[7,16],\"767\":[4,16],\"768\":[3,3],\"769\":[3,13],\"770\":[4,24],\"771\":[1],\"772\":[3,28],\"773\":[4,29],\"774\":[3,39],\"775\":[1],\"776\":[3,18],\"777\":[3,21],\"778\":[2,9],\"779\":[1],\"780\":[5,10],\"781\":[3,23],\"782\":[3,10],\"783\":[2,16],\"784\":[1,43],\"785\":[3],\"786\":[1],\"787\":[2,2],\"788\":[5,9],\"789\":[7,9],\"790\":[6,14],\"791\":[3],\"792\":[3,30],\"793\":[3,11],\"794\":[3],\"795\":[3,17],\"796\":[4,15],\"797\":[3,13],\"798\":[3,12],\"799\":[1],\"800\":[3],\"801\":[3,4],\"802\":[3,6],\"803\":[2],\"804\":[3,5],\"805\":[2,13],\"806\":[3,21],\"807\":[3,9],\"808\":[1],\"809\":[3,15],\"810\":[3,5],\"811\":[2,9],\"812\":[1],\"813\":[3,16],\"814\":[3,8],\"815\":[3,10],\"816\":[2,6],\"817\":[3,6],\"818\":[1,57],\"819\":[3],\"820\":[1],\"821\":[2,2],\"822\":[5,9],\"823\":[7,9],\"824\":[6,14],\"825\":[3],\"826\":[3,30],\"827\":[3,11],\"828\":[3],\"829\":[3,17],\"830\":[4,15],\"831\":[3,13],\"832\":[3,12],\"833\":[1],\"834\":[3],\"835\":[3,4],\"836\":[3,6],\"837\":[2],\"838\":[3,5],\"839\":[2,13],\"840\":[3,21],\"841\":[3,9],\"842\":[1],\"843\":[3,15],\"844\":[3,5],\"845\":[2,9],\"846\":[1],\"847\":[3,16],\"848\":[3,8],\"849\":[3,10],\"850\":[2,6],\"851\":[3,6],\"852\":[1,57],\"853\":[3],\"854\":[1],\"855\":[2,2],\"856\":[5,9],\"857\":[7,9],\"858\":[6,14],\"859\":[3],\"860\":[3,30],\"861\":[3,11],\"862\":[3],\"863\":[3,17],\"864\":[4,15],\"865\":[3,13],\"866\":[3,12],\"867\":[1],\"868\":[3],\"869\":[3,4],\"870\":[3,6],\"871\":[2],\"872\":[3,5],\"873\":[2,13],\"874\":[3,21],\"875\":[3,9],\"876\":[1],\"877\":[3,15],\"878\":[3,5],\"879\":[2,9],\"880\":[1],\"881\":[3,16],\"882\":[3,8],\"883\":[3,10],\"884\":[2,6],\"885\":[3,6],\"886\":[1,57],\"887\":[3],\"888\":[1],\"889\":[2,2],\"890\":[5,9],\"891\":[7,9],\"892\":[6,14],\"893\":[3],\"894\":[3,30],\"895\":[3,11],\"896\":[3],\"897\":[3,17],\"898\":[4,15],\"899\":[3,13],\"900\":[3,12],\"901\":[1],\"902\":[3],\"903\":[3,4],\"904\":[3,6],\"905\":[2],\"906\":[3,5],\"907\":[2,13],\"908\":[3,21],\"909\":[3,9],\"910\":[1],\"911\":[3,15],\"912\":[3,5],\"913\":[2,9],\"914\":[1],\"915\":[3,16],\"916\":[3,8],\"917\":[3,10],\"918\":[2,6],\"919\":[3,6],\"920\":[1,57],\"921\":[1],\"922\":[1,6],\"923\":[1],\"924\":[2,21],\"925\":[2,18],\"926\":[2,20],\"927\":[2,11],\"928\":[2,18],\"929\":[1],\"930\":[1,9],\"931\":[1,13],\"932\":[1,28],\"933\":[2],\"934\":[1,7],\"935\":[1],\"936\":[2,51],\"937\":[2,11],\"938\":[2,32],\"939\":[2,6],\"940\":[2,14],\"941\":[2,28],\"942\":[1],\"943\":[1,9],\"944\":[1,11],\"945\":[1,28],\"946\":[2],\"947\":[1,5],\"948\":[1],\"949\":[2,9],\"950\":[1,13],\"951\":[1,5],\"952\":[2,2],\"953\":[1,20],\"954\":[1,17],\"955\":[2,2],\"956\":[1,29],\"957\":[1,24],\"958\":[2,2],\"959\":[1,8],\"960\":[1,7],\"961\":[2,2],\"962\":[1,9],\"963\":[1,20],\"964\":[1],\"965\":[1,11],\"966\":[1,13],\"967\":[1,31],\"968\":[2],\"969\":[1,7],\"970\":[1],\"971\":[2,3],\"972\":[1,7],\"973\":[1,11],\"974\":[2,3],\"975\":[1,10],\"976\":[1,4],\"977\":[2,3],\"978\":[1,4],\"979\":[1,6],\"980\":[2,3],\"981\":[1,23],\"982\":[1,15],\"983\":[2,2],\"984\":[1,25],\"985\":[1,24],\"986\":[1],\"987\":[1,11],\"988\":[1,12],\"989\":[1,32],\"990\":[1,25],\"991\":[2,7],\"992\":[2,23],\"993\":[2,57],\"994\":[2,82],\"995\":[4,14],\"996\":[1,8],\"997\":[1,77],\"998\":[2,46],\"999\":[2,201],\"1000\":[1,18],\"1001\":[4,5],\"1002\":[3,5],\"1003\":[3,56],\"1004\":[2,61],\"1005\":[2,105],\"1006\":[2],\"1007\":[1,6],\"1008\":[1],\"1009\":[2,2],\"1010\":[2,4],\"1011\":[3,3],\"1012\":[3,3],\"1013\":[2,2],\"1014\":[3,3],\"1015\":[2,3],\"1016\":[3,21],\"1017\":[3,18],\"1018\":[3,15],\"1019\":[2],\"1020\":[4,12],\"1021\":[3,5],\"1022\":[2],\"1023\":[3,3],\"1024\":[3,3],\"1025\":[3,6],\"1026\":[2,5],\"1027\":[1],\"1028\":[1,14],\"1029\":[1,11],\"1030\":[1,37],\"1031\":[2],\"1032\":[1],\"1033\":[2,4],\"1034\":[3,30],\"1035\":[1],\"1036\":[3],\"1037\":[3,67],\"1038\":[3,56],\"1039\":[2],\"1040\":[3,72],\"1041\":[2,87],\"1042\":[3],\"1043\":[4,50],\"1044\":[3,81],\"1045\":[1],\"1046\":[3,27],\"1047\":[3],\"1048\":[4,11],\"1049\":[3,14],\"1050\":[1],\"1051\":[3],\"1052\":[3,35],\"1053\":[4,49],\"1054\":[3],\"1055\":[4,59],\"1056\":[3,70],\"1057\":[1],\"1058\":[2,50],\"1059\":[4,49],\"1060\":[2],\"1061\":[1,9],\"1062\":[1],\"1063\":[2,17],\"1064\":[2,33],\"1065\":[2,15],\"1066\":[2,32],\"1067\":[1],\"1068\":[2,101],\"1069\":[2,105],\"1070\":[1],\"1071\":[2,12],\"1072\":[2,11],\"1073\":[2,11],\"1074\":[2,9],\"1075\":[1],\"1076\":[2],\"1077\":[2,14],\"1078\":[3,23],\"1079\":[2,20],\"1080\":[2],\"1081\":[2,22],\"1082\":[2,3],\"1083\":[2,4],\"1084\":[2,3],\"1085\":[1],\"1086\":[5,34],\"1087\":[4,115],\"1088\":[2],\"1089\":[1,10],\"1090\":[1],\"1091\":[2,7],\"1092\":[2,64],\"1093\":[1],\"1094\":[2,189],\"1095\":[2,65],\"1096\":[1],\"1097\":[2,3],\"1098\":[3,8],\"1099\":[3,6],\"1100\":[3,6],\"1101\":[2,20],\"1102\":[1],\"1103\":[2],\"1104\":[3,35],\"1105\":[3,10],\"1106\":[2],\"1107\":[3,10],\"1108\":[3,6],\"1109\":[1],\"1110\":[3,4],\"1111\":[3,83],\"1112\":[3,9],\"1113\":[3,9],\"1114\":[3,5],\"1115\":[3,8],\"1116\":[3,9],\"1117\":[3,11],\"1118\":[2],\"1119\":[1,10],\"1120\":[1],\"1121\":[2],\"1122\":[4,13],\"1123\":[4,26],\"1124\":[2],\"1125\":[5,26],\"1126\":[5,22],\"1127\":[2],\"1128\":[5,10],\"1129\":[7,21],\"1130\":[2],\"1131\":[4,5],\"1132\":[5,24],\"1133\":[2],\"1134\":[4,5],\"1135\":[5,22],\"1136\":[1],\"1137\":[1,6],\"1138\":[1,16],\"1139\":[1,56],\"1140\":[2],\"1141\":[1,10],\"1142\":[1],\"1143\":[2,2],\"1144\":[1,22],\"1145\":[1,24],\"1146\":[2,7],\"1147\":[1,27],\"1148\":[2,3],\"1149\":[1,6],\"1150\":[1,34],\"1151\":[2,38],\"1152\":[1],\"1153\":[1,11],\"1154\":[1,12],\"1155\":[1,31],\"1156\":[2],\"1157\":[1,5],\"1158\":[1],\"1159\":[2],\"1160\":[2,66],\"1161\":[2,82],\"1162\":[2,73],\"1163\":[2],\"1164\":[2,72],\"1165\":[2,68],\"1166\":[2,69],\"1167\":[1],\"1168\":[1,16],\"1169\":[1,19],\"1170\":[1,69],\"1171\":[2],\"1172\":[1],\"1173\":[2,7],\"1174\":[3,27],\"1175\":[3,17],\"1176\":[1],\"1177\":[3],\"1178\":[3,63],\"1179\":[3,60],\"1180\":[2],\"1181\":[5,88],\"1182\":[2,86],\"1183\":[1],\"1184\":[3],\"1185\":[5,42],\"1186\":[6,60],\"1187\":[3,4],\"1188\":[1],\"1189\":[3],\"1190\":[3,66],\"1191\":[4,60],\"1192\":[3],\"1193\":[4,37],\"1194\":[3,61],\"1195\":[1],\"1196\":[4,45],\"1197\":[3,46],\"1198\":[5,54],\"1199\":[2],\"1200\":[1,8],\"1201\":[1],\"1202\":[2],\"1203\":[2,35],\"1204\":[3,23],\"1205\":[3,31],\"1206\":[3,25],\"1207\":[2],\"1208\":[3,24],\"1209\":[2,36],\"1210\":[3,25],\"1211\":[3,28],\"1212\":[3,27],\"1213\":[1],\"1214\":[1,8],\"1215\":[1,16],\"1216\":[1,54],\"1217\":[2],\"1218\":[1,12],\"1219\":[1],\"1220\":[2],\"1221\":[2,91],\"1222\":[3,90],\"1223\":[2],\"1224\":[3,93],\"1225\":[2,89],\"1226\":[2],\"1227\":[3,31],\"1228\":[3,126],\"1229\":[1],\"1230\":[1],\"1231\":[1,27],\"1232\":[1,80],\"1233\":[1],\"1234\":[2,27],\"1235\":[2,23],\"1236\":[2,23],\"1237\":[2,31],\"1238\":[1,231],\"1239\":[2],\"1240\":[1,9],\"1241\":[1],\"1242\":[2],\"1243\":[2,41],\"1244\":[3,15],\"1245\":[2],\"1246\":[5,34],\"1247\":[4,35],\"1248\":[2],\"1249\":[3,33],\"1250\":[3,53],\"1251\":[1],\"1252\":[1,14],\"1253\":[1,39],\"1254\":[1,76],\"1255\":[2],\"1256\":[1,8],\"1257\":[1],\"1258\":[2],\"1259\":[3,9],\"1260\":[5,49],\"1261\":[4,19],\"1262\":[2],\"1263\":[4,20],\"1264\":[4,75],\"1265\":[2],\"1266\":[4,31],\"1267\":[4,65],\"1268\":[2],\"1269\":[4,56],\"1270\":[4,56],\"1271\":[5,22],\"1272\":[1],\"1273\":[2,15],\"1274\":[2],\"1275\":[3,11],\"1276\":[2,10],\"1277\":[3,10],\"1278\":[2],\"1279\":[3,11],\"1280\":[3,38],\"1281\":[5,28],\"1282\":[2],\"1283\":[1,11],\"1284\":[1],\"1285\":[2],\"1286\":[2,12],\"1287\":[3,22],\"1288\":[3,24],\"1289\":[2],\"1290\":[3,28],\"1291\":[2,10],\"1292\":[1],\"1293\":[2],\"1294\":[2,23],\"1295\":[3,46],\"1296\":[4,36],\"1297\":[1],\"1298\":[2,9],\"1299\":[2,7],\"1300\":[1],\"1301\":[2,18],\"1302\":[2,4],\"1303\":[2,13],\"1304\":[1,8],\"1305\":[1],\"1306\":[1],\"1307\":[2],\"1308\":[1,8],\"1309\":[1],\"1310\":[3],\"1311\":[2,39],\"1312\":[3,83],\"1313\":[3,4],\"1314\":[6,75],\"1315\":[6,134],\"1316\":[6,11],\"1317\":[2],\"1318\":[3,7],\"1319\":[3,5],\"1320\":[2,4],\"1321\":[3,68],\"1322\":[1],\"1323\":[2],\"1324\":[2,113],\"1325\":[3,67],\"1326\":[3,93],\"1327\":[1],\"1328\":[2,28],\"1329\":[2],\"1330\":[3,5],\"1331\":[2,5],\"1332\":[3,78],\"1333\":[3,7],\"1334\":[1],\"1335\":[2],\"1336\":[2,36],\"1337\":[3,58],\"1338\":[3,51],\"1339\":[4,23],\"1340\":[2],\"1341\":[3,3],\"1342\":[2,4],\"1343\":[3,3],\"1344\":[4,4],\"1345\":[3,3],\"1346\":[3,3],\"1347\":[1,104],\"1348\":[1],\"1349\":[1,16],\"1350\":[2,3],\"1351\":[4,8],\"1352\":[2,8],\"1353\":[4,6],\"1354\":[2,25],\"1355\":[2,10],\"1356\":[2,2],\"1357\":[2,15],\"1358\":[2,15],\"1359\":[2,6],\"1360\":[2,7],\"1361\":[2],\"1362\":[2,12],\"1363\":[2,21],\"1364\":[2,7],\"1365\":[4,10],\"1366\":[2],\"1367\":[2,17],\"1368\":[1,16],\"1369\":[1,44],\"1370\":[1,32],\"1371\":[1,42],\"1372\":[1,49],\"1373\":[1,38],\"1374\":[1,14],\"1375\":[1],\"1376\":[2,14],\"1377\":[2,23],\"1378\":[2,5],\"1379\":[2,27],\"1380\":[2,5],\"1381\":[3,5],\"1382\":[2,17],\"1383\":[2,18],\"1384\":[2,57],\"1385\":[3,62],\"1386\":[2,3],\"1387\":[2,4],\"1388\":[2,13],\"1389\":[1,25],\"1390\":[1,30],\"1391\":[2,4],\"1392\":[2,23],\"1393\":[1,36],\"1394\":[2,11],\"1395\":[4,38],\"1396\":[4,41],\"1397\":[2,38],\"1398\":[2],\"1399\":[1,17],\"1400\":[1,13],\"1401\":[2,25],\"1402\":[2,30],\"1403\":[3,8],\"1404\":[4,10],\"1405\":[3,20],\"1406\":[5,13],\"1407\":[4,17],\"1408\":[5,16],\"1409\":[2,35],\"1410\":[2,13],\"1411\":[2,11],\"1412\":[2,70],\"1413\":[1],\"1414\":[2,45],\"1415\":[1],\"1416\":[1,56],\"1417\":[2,88],\"1418\":[1,38],\"1419\":[2,11],\"1420\":[2,26],\"1421\":[2,15],\"1422\":[2,14],\"1423\":[2,18],\"1424\":[2,6],\"1425\":[2,2],\"1426\":[3,13],\"1427\":[2,18],\"1428\":[2,6],\"1429\":[1],\"1430\":[2,19],\"1431\":[3,134],\"1432\":[3,52],\"1433\":[3,82],\"1434\":[3,82],\"1435\":[3,102],\"1436\":[3,62],\"1437\":[3,17],\"1438\":[2,30],\"1439\":[3,95],\"1440\":[3,206],\"1441\":[3,13],\"1442\":[3,15],\"1443\":[3,195],\"1444\":[2,180],\"1445\":[1,2],\"1446\":[2,22],\"1447\":[3,64],\"1448\":[3,20],\"1449\":[3,41],\"1450\":[2,67],\"1451\":[3,20],\"1452\":[3,25],\"1453\":[3,34],\"1454\":[3,32],\"1455\":[3,69],\"1456\":[3,73],\"1457\":[2,55],\"1458\":[3,84],\"1459\":[3,86],\"1460\":[3,27],\"1461\":[3,67],\"1462\":[3,121],\"1463\":[3,92],\"1464\":[2,91],\"1465\":[3,37],\"1466\":[3],\"1467\":[3,121],\"1468\":[3],\"1469\":[3,133],\"1470\":[3,31],\"1471\":[2,8],\"1472\":[1,18],\"1473\":[2],\"1474\":[2,17],\"1475\":[2,13],\"1476\":[6,14],\"1477\":[2,9],\"1478\":[2,48],\"1479\":[2,3],\"1480\":[2,19],\"1481\":[3,19],\"1482\":[2,15],\"1483\":[2,31],\"1484\":[2,37],\"1485\":[2],\"1486\":[2,15],\"1487\":[2,7],\"1488\":[2,30],\"1489\":[2,15],\"1490\":[2,13],\"1491\":[1,15],\"1492\":[2],\"1493\":[1,5],\"1494\":[1,10],\"1495\":[2,38],\"1496\":[4,28],\"1497\":[2,14],\"1498\":[2,32],\"1499\":[2,42],\"1500\":[1,21],\"1501\":[1,61],\"1502\":[4,22],\"1503\":[3,112],\"1504\":[2,108],\"1505\":[2,6],\"1506\":[2],\"1507\":[1,70],\"1508\":[2,6],\"1509\":[2,8],\"1510\":[2,20],\"1511\":[2,18],\"1512\":[2,37],\"1513\":[2,83],\"1514\":[2],\"1515\":[2,5],\"1516\":[2,14],\"1517\":[2,35],\"1518\":[2,25],\"1519\":[2,5],\"1520\":[2,48],\"1521\":[2],\"1522\":[2,5],\"1523\":[3,31],\"1524\":[3,30],\"1525\":[2,3],\"1526\":[2,33],\"1527\":[2,62],\"1528\":[2,17],\"1529\":[2,21],\"1530\":[2,77],\"1531\":[2,19],\"1532\":[2,22],\"1533\":[3,16],\"1534\":[2,18],\"1535\":[2,131],\"1536\":[2,50],\"1537\":[2,11],\"1538\":[2,17],\"1539\":[2,1],\"1540\":[2],\"1541\":[2,2],\"1542\":[3,18],\"1543\":[2],\"1544\":[2],\"1545\":[2],\"1546\":[3,13],\"1547\":[3,6],\"1548\":[2,78],\"1549\":[2,4],\"1550\":[1],\"1551\":[1,53],\"1552\":[1,19],\"1553\":[3],\"1554\":[1,9],\"1555\":[1,12],\"1556\":[1],\"1557\":[11,29],\"1558\":[1,53],\"1559\":[1,22],\"1560\":[1,51],\"1561\":[1,13],\"1562\":[3,15],\"1563\":[2,31],\"1564\":[1,123],\"1565\":[3],\"1566\":[3],\"1567\":[2],\"1568\":[1,16],\"1569\":[1,97],\"1570\":[1,44],\"1571\":[1,5],\"1572\":[1],\"1573\":[1,36],\"1574\":[1,22],\"1575\":[1,41],\"1576\":[2,20],\"1577\":[2,71],\"1578\":[2,239],\"1579\":[4,21],\"1580\":[2,12],\"1581\":[2,26],\"1582\":[2,16],\"1583\":[2,17],\"1584\":[2,8],\"1585\":[2,17],\"1586\":[2,82],\"1587\":[2],\"1588\":[2,3],\"1589\":[2,3],\"1590\":[4,21],\"1591\":[2,1],\"1592\":[2],\"1593\":[2,3],\"1594\":[2,3],\"1595\":[4,83],\"1596\":[2,1],\"1597\":[2],\"1598\":[2,3],\"1599\":[2,5],\"1600\":[3,9],\"1601\":[2,10],\"1602\":[2],\"1603\":[2,3],\"1604\":[2,5],\"1605\":[2,4],\"1606\":[3,18],\"1607\":[4,23],\"1608\":[2,2],\"1609\":[2,19],\"1610\":[1,124],\"1611\":[2],\"1612\":[1,17],\"1613\":[1,19],\"1614\":[1,4],\"1615\":[1,34],\"1616\":[2],\"1617\":[1,17],\"1618\":[1,8],\"1619\":[1,7],\"1620\":[1,56],\"1621\":[1,32],\"1622\":[3],\"1623\":[1,15],\"1624\":[1,34],\"1625\":[4],\"1626\":[2,29],\"1627\":[2,9],\"1628\":[2,5],\"1629\":[2,5],\"1630\":[2,22],\"1631\":[2],\"1632\":[1,49],\"1633\":[2,44],\"1634\":[2,42],\"1635\":[1,53],\"1636\":[2,42],\"1637\":[2,70],\"1638\":[2,209],\"1639\":[2],\"1640\":[2,23],\"1641\":[6,49],\"1642\":[2,45],\"1643\":[2,34],\"1644\":[3,71],\"1645\":[2,7],\"1646\":[2,17],\"1647\":[4,5],\"1648\":[3,130],\"1649\":[4,116],\"1650\":[5,129],\"1651\":[2],\"1652\":[4],\"1653\":[1,6],\"1654\":[1,12],\"1655\":[1,22],\"1656\":[1,104],\"1657\":[2],\"1658\":[2,19],\"1659\":[2,9],\"1660\":[2,124],\"1661\":[2,135],\"1662\":[2,12],\"1663\":[2],\"1664\":[12,8],\"1665\":[12,7],\"1666\":[10,34],\"1667\":[13,107],\"1668\":[7,2],\"1669\":[10,40],\"1670\":[2,3],\"1671\":[2,31],\"1672\":[2,36],\"1673\":[2,19],\"1674\":[2,4],\"1675\":[2,81],\"1676\":[2,6],\"1677\":[3,144],\"1678\":[2,6],\"1679\":[2,2],\"1680\":[2,7],\"1681\":[2,2],\"1682\":[2,12],\"1683\":[2],\"1684\":[2,177],\"1685\":[4,148],\"1686\":[3,6],\"1687\":[3,214],\"1688\":[3,129],\"1689\":[2],\"1690\":[2,2],\"1691\":[2,2],\"1692\":[2,11],\"1693\":[2,4],\"1694\":[2,14],\"1695\":[2],\"1696\":[2,16],\"1697\":[4,51],\"1698\":[4,124],\"1699\":[2],\"1700\":[5],\"1701\":[2],\"1702\":[2,2],\"1703\":[2,3],\"1704\":[2,13],\"1705\":[3],\"1706\":[2,4],\"1707\":[2,8],\"1708\":[2,2],\"1709\":[2,2],\"1710\":[2,11],\"1711\":[3,120],\"1712\":[3,16],\"1713\":[2,145],\"1714\":[2,43],\"1715\":[2,32],\"1716\":[2,4],\"1717\":[2,5],\"1718\":[2,5],\"1719\":[2,9],\"1720\":[1],\"1721\":[2,2],\"1722\":[2,11],\"1723\":[2,14],\"1724\":[2,20],\"1725\":[2,4],\"1726\":[2],\"1727\":[3,4],\"1728\":[2,3],\"1729\":[4,9],\"1730\":[6,7],\"1731\":[2,28],\"1732\":[2,3],\"1733\":[1,3],\"1734\":[4,100],\"1735\":[1,33],\"1736\":[2,81],\"1737\":[2,26],\"1738\":[2,96],\"1739\":[2,104],\"1740\":[2],\"1741\":[2,38],\"1742\":[2],\"1743\":[1,17],\"1744\":[1,19],\"1745\":[1,4],\"1746\":[1,34],\"1747\":[2,30],\"1748\":[2],\"1749\":[1,14],\"1750\":[1,8],\"1751\":[1,7],\"1752\":[1,56],\"1753\":[1,32],\"1754\":[3],\"1755\":[1,16],\"1756\":[1,13],\"1757\":[1,3],\"1758\":[1],\"1759\":[3,17],\"1760\":[2,23],\"1761\":[1,1],\"1762\":[3],\"1763\":[2,47],\"1764\":[2,224],\"1765\":[1,21],\"1766\":[2],\"1767\":[2,19],\"1768\":[4,15],\"1769\":[2,16],\"1770\":[2,15],\"1771\":[2,24],\"1772\":[2,4],\"1773\":[2,19],\"1774\":[2,9],\"1775\":[2,35],\"1776\":[2,3],\"1777\":[2,3],\"1778\":[3,44],\"1779\":[1,95],\"1780\":[1,45],\"1781\":[2,22],\"1782\":[2,14],\"1783\":[2,21],\"1784\":[2,10],\"1785\":[2,24],\"1786\":[2,48],\"1787\":[3,59],\"1788\":[2,155],\"1789\":[1],\"1790\":[1,11],\"1791\":[1,4],\"1792\":[1,4],\"1793\":[1,18],\"1794\":[1,16],\"1795\":[1,15],\"1796\":[1,13],\"1797\":[1,5],\"1798\":[1,18],\"1799\":[1,24],\"1800\":[1,11],\"1801\":[2,7],\"1802\":[1,4],\"1803\":[2,3],\"1804\":[1,3],\"1805\":[1,3],\"1806\":[1,6],\"1807\":[1,4],\"1808\":[1,12],\"1809\":[5,26],\"1810\":[1,2],\"1811\":[1,11],\"1812\":[1],\"1813\":[2,23],\"1814\":[5,15],\"1815\":[1],\"1816\":[2,5],\"1817\":[3,5],\"1818\":[2,6],\"1819\":[2,26],\"1820\":[2,3],\"1821\":[2,25],\"1822\":[2,11],\"1823\":[2,17],\"1824\":[2,3],\"1825\":[2,20],\"1826\":[2,10],\"1827\":[2,21],\"1828\":[2,10],\"1829\":[2,8],\"1830\":[3,5],\"1831\":[1,71],\"1832\":[1],\"1833\":[1,79],\"1834\":[1,23],\"1835\":[1,75],\"1836\":[1],\"1837\":[2,7],\"1838\":[2,38],\"1839\":[1,7],\"1840\":[1,7],\"1841\":[1,22],\"1842\":[1,8],\"1843\":[1,6],\"1844\":[1,15],\"1845\":[1,7],\"1846\":[1,2],\"1847\":[1,2],\"1848\":[1,4],\"1849\":[2,3],\"1850\":[2,5],\"1851\":[1,14],\"1852\":[1,11],\"1853\":[1,2],\"1854\":[1,7],\"1855\":[2,13],\"1856\":[1,12],\"1857\":[1,30],\"1858\":[4,5],\"1859\":[2,13],\"1860\":[1,11],\"1861\":[2],\"1862\":[1,6],\"1863\":[1,8],\"1864\":[2,4],\"1865\":[3,33],\"1866\":[1,5],\"1867\":[2,13],\"1868\":[2,17],\"1869\":[1,32],\"1870\":[2,8],\"1871\":[1,23],\"1872\":[1,25],\"1873\":[1,42],\"1874\":[1,3],\"1875\":[1,15],\"1876\":[1,40],\"1877\":[2,23],\"1878\":[1,13],\"1879\":[1,19],\"1880\":[1,39],\"1881\":[1,77],\"1882\":[1,94],\"1883\":[2,1],\"1884\":[2,42],\"1885\":[2,50],\"1886\":[2,27],\"1887\":[5,153],\"1888\":[1],\"1889\":[2],\"1890\":[3,3],\"1891\":[3,4],\"1892\":[5,25],\"1893\":[2],\"1894\":[3,5],\"1895\":[2,20],\"1896\":[2,9],\"1897\":[2,20],\"1898\":[2,30],\"1899\":[2,9],\"1900\":[2],\"1901\":[3,3],\"1902\":[2],\"1903\":[3,16],\"1904\":[2,8],\"1905\":[2,3],\"1906\":[2,1],\"1907\":[2,31],\"1908\":[2,9],\"1909\":[2,9],\"1910\":[2,8],\"1911\":[2,5],\"1912\":[2,3],\"1913\":[1],\"1914\":[2,19],\"1915\":[2,4],\"1916\":[2,13],\"1917\":[2,13],\"1918\":[2,43],\"1919\":[2,6],\"1920\":[2,15],\"1921\":[1],\"1922\":[1],\"1923\":[2,16],\"1924\":[1],\"1925\":[2,10],\"1926\":[2,8],\"1927\":[2,7],\"1928\":[2,7],\"1929\":[1],\"1930\":[2,6],\"1931\":[2,6],\"1932\":[2,8],\"1933\":[1],\"1934\":[2,3],\"1935\":[2,3],\"1936\":[2,3],\"1937\":[2,3],\"1938\":[2,4],\"1939\":[1],\"1940\":[1,54],\"1941\":[2],\"1942\":[1,7],\"1943\":[1],\"1944\":[2,14],\"1945\":[2,19],\"1946\":[2,18],\"1947\":[2],\"1948\":[1,26],\"1949\":[1,50],\"1950\":[1],\"1951\":[1,6],\"1952\":[1,11],\"1953\":[1,21],\"1954\":[2],\"1955\":[1,8],\"1956\":[1],\"1957\":[2,15],\"1958\":[2,18],\"1959\":[2,19],\"1960\":[2],\"1961\":[1,18],\"1962\":[1,62],\"1963\":[1],\"1964\":[1,8],\"1965\":[1,11],\"1966\":[1,25],\"1967\":[2],\"1968\":[1,11],\"1969\":[1],\"1970\":[2,16],\"1971\":[2,23],\"1972\":[2,18],\"1973\":[2],\"1974\":[1,51],\"1975\":[1,39],\"1976\":[1],\"1977\":[1,6],\"1978\":[1,11],\"1979\":[1,24],\"1980\":[2],\"1981\":[1,10],\"1982\":[1],\"1983\":[2,16],\"1984\":[2,23],\"1985\":[2,19],\"1986\":[2],\"1987\":[1,47],\"1988\":[1,33],\"1989\":[1],\"1990\":[1,6],\"1991\":[1,11],\"1992\":[1,24],\"1993\":[2,7],\"1994\":[2,8],\"1995\":[2],\"1996\":[3,9],\"1997\":[2,14],\"1998\":[3,14],\"1999\":[3,21],\"2000\":[3,8],\"2001\":[2,5],\"2002\":[2,6],\"2003\":[2],\"2004\":[2],\"2005\":[2,11],\"2006\":[2],\"2007\":[3,74],\"2008\":[2],\"2009\":[3,3],\"2010\":[3,9],\"2011\":[2],\"2012\":[3,40],\"2013\":[2,15],\"2014\":[2,22],\"2015\":[2],\"2016\":[2],\"2017\":[2,10],\"2018\":[3,39],\"2019\":[3],\"2020\":[4,55],\"2021\":[2,6],\"2022\":[2],\"2023\":[4,5],\"2024\":[3,9],\"2025\":[2],\"2026\":[3,4],\"2027\":[3,41],\"2028\":[2,8],\"2029\":[2,34],\"2030\":[2],\"2031\":[2],\"2032\":[2,13],\"2033\":[3,16],\"2034\":[2],\"2035\":[3,35],\"2036\":[2],\"2037\":[3,28],\"2038\":[2],\"2039\":[3,25],\"2040\":[2,7],\"2041\":[2,12],\"2042\":[2,17],\"2043\":[2],\"2044\":[3,11],\"2045\":[3,7],\"2046\":[3,13],\"2047\":[3,37],\"2048\":[3,6],\"2049\":[2],\"2050\":[3,17],\"2051\":[3,46],\"2052\":[2],\"2053\":[3,8],\"2054\":[3,50],\"2055\":[3,6],\"2056\":[2],\"2057\":[3,26],\"2058\":[3,18],\"2059\":[3,36],\"2060\":[2],\"2061\":[4,34],\"2062\":[4,41],\"2063\":[3,6],\"2064\":[2],\"2065\":[3,62],\"2066\":[3,25],\"2067\":[3,7],\"2068\":[3,33],\"2069\":[2],\"2070\":[3,15],\"2071\":[3,35],\"2072\":[3,52],\"2073\":[2],\"2074\":[1,8],\"2075\":[1],\"2076\":[2,25],\"2077\":[2,42],\"2078\":[2,53],\"2079\":[2,36],\"2080\":[2,39],\"2081\":[2,5],\"2082\":[1],\"2083\":[1,13],\"2084\":[1,18],\"2085\":[1,34],\"2086\":[2],\"2087\":[1,6],\"2088\":[1],\"2089\":[2,23],\"2090\":[2,19],\"2091\":[2,34],\"2092\":[1],\"2093\":[1,13],\"2094\":[1,15],\"2095\":[1,36],\"2096\":[2],\"2097\":[1,7],\"2098\":[1],\"2099\":[2,62],\"2100\":[2,46],\"2101\":[2,45],\"2102\":[1],\"2103\":[1,14],\"2104\":[1,15],\"2105\":[1,40],\"2106\":[2],\"2107\":[1,5],\"2108\":[1],\"2109\":[2,36],\"2110\":[2,33],\"2111\":[2,26],\"2112\":[2,45],\"2113\":[2,33],\"2114\":[2,20],\"2115\":[2,35],\"2116\":[1],\"2117\":[1,15],\"2118\":[1,13],\"2119\":[1,53],\"2120\":[2],\"2121\":[1,5],\"2122\":[1],\"2123\":[2,18],\"2124\":[2,2],\"2125\":[4,28],\"2126\":[3,32],\"2127\":[2,2],\"2128\":[3,30],\"2129\":[3,21],\"2130\":[3,22],\"2131\":[2,2],\"2132\":[3,26],\"2133\":[3,26],\"2134\":[3,29],\"2135\":[1],\"2136\":[1,16],\"2137\":[1,17],\"2138\":[1,41],\"2139\":[3],\"2140\":[1,7],\"2141\":[1],\"2142\":[3,4],\"2143\":[3,12],\"2144\":[3,37],\"2145\":[2,4],\"2146\":[3,19],\"2147\":[2,30],\"2148\":[3,7],\"2149\":[4,20],\"2150\":[3,21],\"2151\":[3,23],\"2152\":[3,4],\"2153\":[1],\"2154\":[3],\"2155\":[3,14],\"2156\":[4,6],\"2157\":[3],\"2158\":[4,25],\"2159\":[3,20],\"2160\":[2,6],\"2161\":[1,45],\"2162\":[3],\"2163\":[1,7],\"2164\":[1],\"2165\":[3,3],\"2166\":[3,11],\"2167\":[3,29],\"2168\":[2,3],\"2169\":[3,22],\"2170\":[2,42],\"2171\":[3,4],\"2172\":[3],\"2173\":[4,24],\"2174\":[3,26],\"2175\":[1],\"2176\":[3],\"2177\":[3,13],\"2178\":[4,11],\"2179\":[3],\"2180\":[4,21],\"2181\":[3,31],\"2182\":[2,5],\"2183\":[1,36],\"2184\":[3],\"2185\":[1,10],\"2186\":[1],\"2187\":[3,3],\"2188\":[3,36],\"2189\":[3,19],\"2190\":[2,14],\"2191\":[3,18],\"2192\":[2,10],\"2193\":[3],\"2194\":[4,32],\"2195\":[3,32],\"2196\":[3,37],\"2197\":[4,24],\"2198\":[3,35],\"2199\":[1],\"2200\":[3],\"2201\":[4,20],\"2202\":[4,26],\"2203\":[3],\"2204\":[4,24],\"2205\":[3,25],\"2206\":[2,7],\"2207\":[1,50],\"2208\":[4],\"2209\":[1,10],\"2210\":[1],\"2211\":[3,4],\"2212\":[3,27],\"2213\":[3,25],\"2214\":[4,33],\"2215\":[2,8],\"2216\":[5,34],\"2217\":[4,33],\"2218\":[5,22],\"2219\":[4,6],\"2220\":[6,36],\"2221\":[5,28],\"2222\":[3,3],\"2223\":[4,31],\"2224\":[3,35],\"2225\":[1],\"2226\":[3],\"2227\":[3,32],\"2228\":[4,50],\"2229\":[3],\"2230\":[4,22],\"2231\":[3,26],\"2232\":[3,28],\"2233\":[2,12],\"2234\":[1,48],\"2235\":[4],\"2236\":[1,8],\"2237\":[1],\"2238\":[3,5],\"2239\":[3,32],\"2240\":[3,27],\"2241\":[2,4],\"2242\":[3],\"2243\":[2,33],\"2244\":[5,4],\"2245\":[5,30],\"2246\":[4,41],\"2247\":[3,6],\"2248\":[5,29],\"2249\":[3,33],\"2250\":[1],\"2251\":[3],\"2252\":[3,8],\"2253\":[6,24],\"2254\":[3],\"2255\":[4,23],\"2256\":[4,29],\"2257\":[3,9],\"2258\":[4],\"2259\":[1,10],\"2260\":[1],\"2261\":[3,7],\"2262\":[3],\"2263\":[3,41],\"2264\":[2,4],\"2265\":[3,46],\"2266\":[2,23],\"2267\":[3,5],\"2268\":[4,18],\"2269\":[3,58],\"2270\":[3,3],\"2271\":[4,42],\"2272\":[3,44],\"2273\":[1],\"2274\":[3],\"2275\":[6,24],\"2276\":[4,48],\"2277\":[3],\"2278\":[4,17],\"2279\":[3,21],\"2280\":[4,27],\"2281\":[2,19],\"2282\":[1,51],\"2283\":[4],\"2284\":[1,12],\"2285\":[1],\"2286\":[3],\"2287\":[3,23],\"2288\":[5,24],\"2289\":[4,31],\"2290\":[2,3],\"2291\":[5,50],\"2292\":[2,29],\"2293\":[3],\"2294\":[5,47],\"2295\":[4,39],\"2296\":[4,36],\"2297\":[5,20],\"2298\":[3,2],\"2299\":[4,19],\"2300\":[3,9],\"2301\":[3,2],\"2302\":[4],\"2303\":[3,32],\"2304\":[4,34],\"2305\":[1],\"2306\":[3],\"2307\":[3,16],\"2308\":[4,12],\"2309\":[3],\"2310\":[4,23],\"2311\":[4,41],\"2312\":[4],\"2313\":[1],\"2314\":[2,63],\"2315\":[3],\"2316\":[3,28],\"2317\":[3],\"2318\":[3,77],\"2319\":[4,37],\"2320\":[3,46],\"2321\":[1],\"2322\":[3],\"2323\":[3,56],\"2324\":[3,69],\"2325\":[2,71],\"2326\":[3,69],\"2327\":[3,111],\"2328\":[3,79],\"2329\":[6,112],\"2330\":[1],\"2331\":[3,19],\"2332\":[3,17],\"2333\":[2,3],\"2334\":[1,10],\"2335\":[1,9],\"2336\":[3,16],\"2337\":[3,13],\"2338\":[1],\"2339\":[3],\"2340\":[5,44],\"2341\":[6,25],\"2342\":[6,19],\"2343\":[3],\"2344\":[4,18],\"2345\":[3,15],\"2346\":[5,24],\"2347\":[3],\"2348\":[4,28],\"2349\":[4,20],\"2350\":[2],\"2351\":[3,16],\"2352\":[3,28],\"2353\":[1],\"2354\":[2,44],\"2355\":[2,64],\"2356\":[2,101],\"2357\":[2,64],\"2358\":[3,118],\"2359\":[5],\"2360\":[2],\"2361\":[2,9],\"2362\":[3],\"2363\":[3,31],\"2364\":[3],\"2365\":[3,8],\"2366\":[4,7],\"2367\":[3,14],\"2368\":[2],\"2369\":[3,77],\"2370\":[2,49],\"2371\":[3,53],\"2372\":[3,43],\"2373\":[3,34],\"2374\":[2],\"2375\":[3,5],\"2376\":[3,8],\"2377\":[2,9],\"2378\":[3,11],\"2379\":[3,7],\"2380\":[2],\"2381\":[3],\"2382\":[3,37],\"2383\":[4,7],\"2384\":[3],\"2385\":[4,9],\"2386\":[3,22],\"2387\":[3],\"2388\":[4,37],\"2389\":[2,11],\"2390\":[2],\"2391\":[3,23],\"2392\":[2,46],\"2393\":[2,22],\"2394\":[3,18],\"2395\":[2,31],\"2396\":[4],\"2397\":[2],\"2398\":[2,9],\"2399\":[3],\"2400\":[3,32],\"2401\":[3],\"2402\":[5],\"2403\":[4,4],\"2404\":[3,18],\"2405\":[2],\"2406\":[3,64],\"2407\":[2,80],\"2408\":[3,82],\"2409\":[3,66],\"2410\":[3,58],\"2411\":[2],\"2412\":[3,5],\"2413\":[3,8],\"2414\":[2,9],\"2415\":[3,8],\"2416\":[3,10],\"2417\":[2],\"2418\":[3],\"2419\":[3,29],\"2420\":[4,37],\"2421\":[3],\"2422\":[4,11],\"2423\":[3,21],\"2424\":[3,10],\"2425\":[2],\"2426\":[2,14],\"2427\":[2,68],\"2428\":[2,22],\"2429\":[2,52],\"2430\":[5],\"2431\":[2],\"2432\":[2,9],\"2433\":[3,35],\"2434\":[3,41],\"2435\":[2],\"2436\":[3,50],\"2437\":[2,74],\"2438\":[3,53],\"2439\":[3,58],\"2440\":[3,71],\"2441\":[3,75],\"2442\":[2],\"2443\":[3,3],\"2444\":[3,17],\"2445\":[2,21],\"2446\":[3,15],\"2447\":[2],\"2448\":[3,50],\"2449\":[3,29],\"2450\":[3,46],\"2451\":[2,36],\"2452\":[3,40],\"2453\":[2],\"2454\":[2,41],\"2455\":[3,39],\"2456\":[2,82],\"2457\":[5],\"2458\":[2],\"2459\":[2,12],\"2460\":[3],\"2461\":[3,45],\"2462\":[3,20],\"2463\":[3,19],\"2464\":[2],\"2465\":[3,78],\"2466\":[3,91],\"2467\":[3,73],\"2468\":[3,55],\"2469\":[2],\"2470\":[3,7],\"2471\":[3,2],\"2472\":[2,14],\"2473\":[3,6],\"2474\":[2],\"2475\":[3],\"2476\":[3,21],\"2477\":[4,27],\"2478\":[3,28],\"2479\":[3],\"2480\":[4,30],\"2481\":[4,17],\"2482\":[2],\"2483\":[2,17],\"2484\":[2,26],\"2485\":[2,71],\"2486\":[2,22],\"2487\":[5],\"2488\":[2],\"2489\":[2,12],\"2490\":[3,32],\"2491\":[3,34],\"2492\":[2],\"2493\":[3,17],\"2494\":[2,85],\"2495\":[3,70],\"2496\":[3,77],\"2497\":[3,90],\"2498\":[3,101],\"2499\":[2],\"2500\":[3,5],\"2501\":[3,8],\"2502\":[2,4],\"2503\":[3,30],\"2504\":[2],\"2505\":[3,46],\"2506\":[3,43],\"2507\":[3,45],\"2508\":[2,51],\"2509\":[3,31],\"2510\":[2],\"2511\":[2,72],\"2512\":[2,125],\"2513\":[2,151],\"2514\":[5],\"2515\":[2],\"2516\":[2,8],\"2517\":[3],\"2518\":[3,36],\"2519\":[3,16],\"2520\":[3,23],\"2521\":[2],\"2522\":[3,72],\"2523\":[2,77],\"2524\":[3,87],\"2525\":[3,62],\"2526\":[2],\"2527\":[3,15],\"2528\":[3,10],\"2529\":[2,7],\"2530\":[3,8],\"2531\":[2],\"2532\":[3],\"2533\":[4,27],\"2534\":[4,35],\"2535\":[3],\"2536\":[4,38],\"2537\":[3,28],\"2538\":[3],\"2539\":[4,31],\"2540\":[2],\"2541\":[4,46],\"2542\":[2,43],\"2543\":[2,41],\"2544\":[2,82],\"2545\":[6],\"2546\":[2],\"2547\":[2,9],\"2548\":[3,9],\"2549\":[3,12],\"2550\":[2],\"2551\":[3,26],\"2552\":[2,21],\"2553\":[3],\"2554\":[4,30],\"2555\":[4,47],\"2556\":[2],\"2557\":[3,7],\"2558\":[3,4],\"2559\":[2,5],\"2560\":[2],\"2561\":[3,4],\"2562\":[5,8],\"2563\":[3,4],\"2564\":[2,25],\"2565\":[6],\"2566\":[2],\"2567\":[2,5],\"2568\":[3,11],\"2569\":[3,16],\"2570\":[2],\"2571\":[3,26],\"2572\":[2],\"2573\":[5,36],\"2574\":[4,22],\"2575\":[3,39],\"2576\":[3],\"2577\":[4,48],\"2578\":[3,24],\"2579\":[2],\"2580\":[3,14],\"2581\":[3,7],\"2582\":[2,5],\"2583\":[2],\"2584\":[3,3],\"2585\":[3,20],\"2586\":[3,12],\"2587\":[2,5],\"2588\":[2,32],\"2589\":[7],\"2590\":[2],\"2591\":[2,7],\"2592\":[3],\"2593\":[1,15],\"2594\":[1,5],\"2595\":[3],\"2596\":[1,26],\"2597\":[2],\"2598\":[3],\"2599\":[3,33],\"2600\":[3,81],\"2601\":[6,78],\"2602\":[2,27],\"2603\":[3],\"2604\":[4,38],\"2605\":[3,48],\"2606\":[2],\"2607\":[3,13],\"2608\":[3,11],\"2609\":[2,14],\"2610\":[4,9],\"2611\":[2],\"2612\":[3,30],\"2613\":[3,24],\"2614\":[3,23],\"2615\":[2,25],\"2616\":[2,43],\"2617\":[7],\"2618\":[2],\"2619\":[2,6],\"2620\":[3],\"2621\":[1,10],\"2622\":[1,5],\"2623\":[3,21],\"2624\":[3,13],\"2625\":[2],\"2626\":[3],\"2627\":[3,21],\"2628\":[3,49],\"2629\":[4,40],\"2630\":[4,24],\"2631\":[2,33],\"2632\":[3,73],\"2633\":[2],\"2634\":[3,8],\"2635\":[3,8],\"2636\":[2,11],\"2637\":[3,12],\"2638\":[2],\"2639\":[3,10],\"2640\":[3,20],\"2641\":[3,9],\"2642\":[2,33],\"2643\":[2,42],\"2644\":[6],\"2645\":[2],\"2646\":[2,7],\"2647\":[3],\"2648\":[1,10],\"2649\":[1,6],\"2650\":[3,20],\"2651\":[3,16],\"2652\":[2],\"2653\":[3],\"2654\":[3,22],\"2655\":[3,66],\"2656\":[4,39],\"2657\":[4,21],\"2658\":[2,31],\"2659\":[3],\"2660\":[4,58],\"2661\":[3,43],\"2662\":[2],\"2663\":[3,13],\"2664\":[3,11],\"2665\":[2,15],\"2666\":[3,28],\"2667\":[2],\"2668\":[3,20],\"2669\":[3,35],\"2670\":[3,21],\"2671\":[2,13],\"2672\":[2,45],\"2673\":[4],\"2674\":[1],\"2675\":[2,11],\"2676\":[3,16],\"2677\":[3,13],\"2678\":[1],\"2679\":[3,32],\"2680\":[2,47],\"2681\":[3,34],\"2682\":[3,38],\"2683\":[3,50],\"2684\":[3,57],\"2685\":[3,55],\"2686\":[1],\"2687\":[3,13],\"2688\":[3,16],\"2689\":[2,14],\"2690\":[1],\"2691\":[3,28],\"2692\":[3,18],\"2693\":[3,22],\"2694\":[2,20],\"2695\":[1],\"2696\":[3,13],\"2697\":[3,46],\"2698\":[4,26],\"2699\":[4],\"2700\":[1],\"2701\":[2,8],\"2702\":[3,41],\"2703\":[3,6],\"2704\":[3,36],\"2705\":[1],\"2706\":[3],\"2707\":[4,29],\"2708\":[5,37],\"2709\":[6,40],\"2710\":[7,36],\"2711\":[2,33],\"2712\":[3,37],\"2713\":[1],\"2714\":[3],\"2715\":[3,40],\"2716\":[4,30],\"2717\":[3,17],\"2718\":[1],\"2719\":[3],\"2720\":[3,5],\"2721\":[5,34],\"2722\":[3],\"2723\":[4,30],\"2724\":[3,23],\"2725\":[1],\"2726\":[3,29],\"2727\":[3,46],\"2728\":[3,41],\"2729\":[3],\"2730\":[1,12],\"2731\":[1],\"2732\":[3,8],\"2733\":[3,37],\"2734\":[3,32],\"2735\":[2,8],\"2736\":[3,31],\"2737\":[4,32],\"2738\":[3,27],\"2739\":[3,4],\"2740\":[4,19],\"2741\":[5,24],\"2742\":[3,50],\"2743\":[1],\"2744\":[3],\"2745\":[3,28],\"2746\":[4,31],\"2747\":[3],\"2748\":[4,37],\"2749\":[3,22],\"2750\":[3,30],\"2751\":[2],\"2752\":[3,21],\"2753\":[3,14],\"2754\":[4,19],\"2755\":[6],\"2756\":[1,9],\"2757\":[1],\"2758\":[3,7],\"2759\":[3,35],\"2760\":[3,10],\"2761\":[4,24],\"2762\":[2,6],\"2763\":[3,31],\"2764\":[3,3],\"2765\":[2,30],\"2766\":[4,28],\"2767\":[3,15],\"2768\":[3,19],\"2769\":[3],\"2770\":[3,28],\"2771\":[3,11],\"2772\":[4,3],\"2773\":[3],\"2774\":[3,6],\"2775\":[3,7],\"2776\":[4,7],\"2777\":[3,6],\"2778\":[2],\"2779\":[3,32],\"2780\":[3,8],\"2781\":[5],\"2782\":[1,7],\"2783\":[1],\"2784\":[2,31],\"2785\":[2,39],\"2786\":[4,26],\"2787\":[1],\"2788\":[1,8],\"2789\":[1,8],\"2790\":[1,10],\"2791\":[3],\"2792\":[1,12],\"2793\":[1],\"2794\":[2,12],\"2795\":[2,24],\"2796\":[4,18],\"2797\":[2,27],\"2798\":[2,20],\"2799\":[1],\"2800\":[1,9],\"2801\":[1,12],\"2802\":[1,9],\"2803\":[4],\"2804\":[1,8],\"2805\":[1],\"2806\":[2,2],\"2807\":[3,7],\"2808\":[3,42],\"2809\":[3,41],\"2810\":[2,26],\"2811\":[1],\"2812\":[1,6],\"2813\":[1,10],\"2814\":[1,9],\"2815\":[4],\"2816\":[1,12],\"2817\":[1],\"2818\":[2,20],\"2819\":[2,31],\"2820\":[2,24],\"2821\":[2,32],\"2822\":[2,24],\"2823\":[1],\"2824\":[1,22],\"2825\":[1,13],\"2826\":[1,19],\"2827\":[3],\"2828\":[1,8],\"2829\":[1],\"2830\":[2,23],\"2831\":[2,64],\"2832\":[2,52],\"2833\":[2,55],\"2834\":[1],\"2835\":[1,16],\"2836\":[1,23],\"2837\":[1,81],\"2838\":[4],\"2839\":[1,13],\"2840\":[1],\"2841\":[2,38],\"2842\":[2,19],\"2843\":[2,55],\"2844\":[2,53],\"2845\":[2,65],\"2846\":[1],\"2847\":[1,14],\"2848\":[1,32],\"2849\":[1,118],\"2850\":[4],\"2851\":[1,10],\"2852\":[1],\"2853\":[2,38],\"2854\":[2,32],\"2855\":[2,59],\"2856\":[2,54],\"2857\":[2,58],\"2858\":[1],\"2859\":[1,14],\"2860\":[1,40],\"2861\":[1,103],\"2862\":[4],\"2863\":[1,14],\"2864\":[1],\"2865\":[2,19],\"2866\":[2,65],\"2867\":[2,56],\"2868\":[2,89],\"2869\":[2,20],\"2870\":[1],\"2871\":[1,12],\"2872\":[1,40],\"2873\":[1,108],\"2874\":[3],\"2875\":[1,10],\"2876\":[1],\"2877\":[2,25],\"2878\":[2,55],\"2879\":[2,51],\"2880\":[2,54],\"2881\":[2,55],\"2882\":[1],\"2883\":[1,17],\"2884\":[1,35],\"2885\":[1,104],\"2886\":[4],\"2887\":[1,11],\"2888\":[1],\"2889\":[2,15],\"2890\":[2,16],\"2891\":[2,44],\"2892\":[2,60],\"2893\":[2,65],\"2894\":[1],\"2895\":[1,18],\"2896\":[1,27],\"2897\":[1,121],\"2898\":[4],\"2899\":[1,19],\"2900\":[1],\"2901\":[2,28],\"2902\":[2,68],\"2903\":[2,74],\"2904\":[2,48],\"2905\":[2,64],\"2906\":[1],\"2907\":[1,12],\"2908\":[1,36],\"2909\":[1,111],\"2910\":[4],\"2911\":[1,32],\"2912\":[1],\"2913\":[2,32],\"2914\":[4,88],\"2915\":[4,70],\"2916\":[4,128],\"2917\":[2,72],\"2918\":[1],\"2919\":[1,16],\"2920\":[1,44],\"2921\":[1,227],\"2922\":[2],\"2923\":[1,10],\"2924\":[1],\"2925\":[2,16],\"2926\":[2,14],\"2927\":[2,49],\"2928\":[1],\"2929\":[1,15],\"2930\":[1,15],\"2931\":[1,27],\"2932\":[2],\"2933\":[1,8],\"2934\":[1],\"2935\":[2,36],\"2936\":[5,44],\"2937\":[5,36],\"2938\":[2,36],\"2939\":[1],\"2940\":[1,13],\"2941\":[1,15],\"2942\":[1,56],\"2943\":[2],\"2944\":[1,8],\"2945\":[1],\"2946\":[2],\"2947\":[2,38],\"2948\":[3,19],\"2949\":[3,30],\"2950\":[2],\"2951\":[5,37],\"2952\":[2,24],\"2953\":[3,38],\"2954\":[2],\"2955\":[3,52],\"2956\":[3,49],\"2957\":[1],\"2958\":[1,13],\"2959\":[1,64],\"2960\":[1,64],\"2961\":[2],\"2962\":[1,10],\"2963\":[1],\"2964\":[2],\"2965\":[2,54],\"2966\":[3,16],\"2967\":[2],\"2968\":[3,66],\"2969\":[2,70],\"2970\":[3,79],\"2971\":[3,72],\"2972\":[1],\"2973\":[1,15],\"2974\":[1,71],\"2975\":[1,39],\"2976\":[2],\"2977\":[1,13],\"2978\":[1],\"2979\":[2,4],\"2980\":[2,49],\"2981\":[3,15],\"2982\":[2,7],\"2983\":[3,74],\"2984\":[2,54],\"2985\":[2,3],\"2986\":[3,81],\"2987\":[3,45],\"2988\":[2,3],\"2989\":[3,63],\"2990\":[3,52],\"2991\":[1],\"2992\":[1,26],\"2993\":[1,79],\"2994\":[1,50],\"2995\":[2],\"2996\":[1,17],\"2997\":[1],\"2998\":[2],\"2999\":[3,129],\"3000\":[3,116],\"3001\":[2,3],\"3002\":[3,152],\"3003\":[2,136],\"3004\":[2,4],\"3005\":[3,156],\"3006\":[2,4],\"3007\":[3,192],\"3008\":[1],\"3009\":[1,29],\"3010\":[1,105],\"3011\":[1,71],\"3012\":[2],\"3013\":[1,13],\"3014\":[1],\"3015\":[2],\"3016\":[3,13],\"3017\":[4,36],\"3018\":[2],\"3019\":[3,41],\"3020\":[2,28],\"3021\":[3,29],\"3022\":[2],\"3023\":[3,56],\"3024\":[3,45],\"3025\":[2,54],\"3026\":[1],\"3027\":[2,12],\"3028\":[2,17],\"3029\":[2,15],\"3030\":[2],\"3031\":[1,10],\"3032\":[1],\"3033\":[2],\"3034\":[3,39],\"3035\":[3,52],\"3036\":[6,24],\"3037\":[2],\"3038\":[4,32],\"3039\":[5,31],\"3040\":[6,25],\"3041\":[3,43],\"3042\":[2],\"3043\":[1,13],\"3044\":[1],\"3045\":[2],\"3046\":[2,51],\"3047\":[3,30],\"3048\":[2],\"3049\":[3,42],\"3050\":[4,51],\"3051\":[2],\"3052\":[3,48],\"3053\":[3,32],\"3054\":[2],\"3055\":[1,9],\"3056\":[1],\"3057\":[2],\"3058\":[2,13],\"3059\":[4,11],\"3060\":[2],\"3061\":[3,10],\"3062\":[2,10],\"3063\":[3],\"3064\":[3,10],\"3065\":[3,96],\"3066\":[2,79],\"3067\":[1],\"3068\":[1,18],\"3069\":[1,32],\"3070\":[1,95],\"3071\":[2],\"3072\":[1,9],\"3073\":[1],\"3074\":[2],\"3075\":[2,27],\"3076\":[3,6],\"3077\":[3],\"3078\":[5,36],\"3079\":[4,77],\"3080\":[5,10],\"3081\":[2],\"3082\":[3,37],\"3083\":[3,11],\"3084\":[2],\"3085\":[3,85],\"3086\":[3,84],\"3087\":[3,73],\"3088\":[1],\"3089\":[1,20],\"3090\":[1,31],\"3091\":[1,70],\"3092\":[2],\"3093\":[1,9],\"3094\":[1],\"3095\":[2],\"3096\":[2,36],\"3097\":[3,56],\"3098\":[2],\"3099\":[3,32],\"3100\":[2,56],\"3101\":[2],\"3102\":[3,50],\"3103\":[3,32],\"3104\":[2,76],\"3105\":[2],\"3106\":[3,23],\"3107\":[3,43],\"3108\":[1],\"3109\":[1,27],\"3110\":[1,31],\"3111\":[1,76],\"3112\":[2],\"3113\":[1,18],\"3114\":[1],\"3115\":[2],\"3116\":[2,74],\"3117\":[3,85],\"3118\":[3,117],\"3119\":[2],\"3120\":[6,101],\"3121\":[2,29],\"3122\":[2],\"3123\":[3,19],\"3124\":[3,14],\"3125\":[2,98],\"3126\":[4,26],\"3127\":[1],\"3128\":[1,17],\"3129\":[1,20],\"3130\":[1,51],\"3131\":[2],\"3132\":[1,10],\"3133\":[1],\"3134\":[2,30],\"3135\":[2,41],\"3136\":[2,39],\"3137\":[2,61],\"3138\":[1],\"3139\":[1,8],\"3140\":[1,15],\"3141\":[1,41],\"3142\":[2],\"3143\":[1,8],\"3144\":[1],\"3145\":[2,24],\"3146\":[2,3],\"3147\":[5,80],\"3148\":[2,3],\"3149\":[2,45],\"3150\":[2,29],\"3151\":[1],\"3152\":[1,15],\"3153\":[1,14],\"3154\":[1,78],\"3155\":[2],\"3156\":[1,9],\"3157\":[1],\"3158\":[2,5],\"3159\":[2,39],\"3160\":[3,34],\"3161\":[2,4],\"3162\":[3,89],\"3163\":[2,3],\"3164\":[3,47],\"3165\":[3,47],\"3166\":[2,50],\"3167\":[1],\"3168\":[1,12],\"3169\":[1,14],\"3170\":[1,92],\"3171\":[2],\"3172\":[1,20],\"3173\":[1],\"3174\":[2],\"3175\":[2,20],\"3176\":[3,20],\"3177\":[4,22],\"3178\":[2],\"3179\":[3,41],\"3180\":[2,76],\"3181\":[2],\"3182\":[5,14],\"3183\":[6,18],\"3184\":[4,6],\"3185\":[6,7],\"3186\":[2],\"3187\":[3,8],\"3188\":[5,18],\"3189\":[3,7],\"3190\":[2,224],\"3191\":[1],\"3192\":[1,16],\"3193\":[1],\"3194\":[4,10],\"3195\":[2,9],\"3196\":[2,9],\"3197\":[1],\"3198\":[3,30],\"3199\":[3,85],\"3200\":[2],\"3201\":[1,17],\"3202\":[1],\"3203\":[2],\"3204\":[2,18],\"3205\":[3,133],\"3206\":[3,91],\"3207\":[2],\"3208\":[3,159],\"3209\":[2,124],\"3210\":[2],\"3211\":[3,15],\"3212\":[3,90],\"3213\":[2],\"3214\":[4,77],\"3215\":[3,174],\"3216\":[3],\"3217\":[3,58],\"3218\":[3,127],\"3219\":[1],\"3220\":[1,42],\"3221\":[1],\"3222\":[2,39],\"3223\":[2,42],\"3224\":[2,53],\"3225\":[2,44],\"3226\":[1],\"3227\":[4,43],\"3228\":[3,55],\"3229\":[2],\"3230\":[1,9],\"3231\":[1],\"3232\":[2,56],\"3233\":[2,2],\"3234\":[3],\"3235\":[3,48],\"3236\":[2,4],\"3237\":[3,74],\"3238\":[3,64],\"3239\":[2,4],\"3240\":[3,56],\"3241\":[3,38],\"3242\":[2],\"3243\":[4,2],\"3244\":[3,54],\"3245\":[1,123],\"3246\":[2,408],\"3247\":[3],\"3248\":[3,32],\"3249\":[3,9],\"3250\":[3,105],\"3251\":[null,null,1],\"3252\":[null,null,1],\"3253\":[1],\"3254\":[1],\"3255\":[4,8],\"3256\":[4,31],\"3257\":[4,26],\"3258\":[1],\"3259\":[1],\"3260\":[1,15],\"3261\":[1,14],\"3262\":[1,21],\"3263\":[1,36],\"3264\":[1,15],\"3265\":[3,9],\"3266\":[2,62],\"3267\":[3,25],\"3268\":[3,18],\"3269\":[3,9],\"3270\":[3,15],\"3271\":[3,78],\"3272\":[3,5],\"3273\":[3,199],\"3274\":[3],\"3275\":[3,63],\"3276\":[4,109],\"3277\":[3],\"3278\":[4,43],\"3279\":[3,7],\"3280\":[3],\"3281\":[6,3],\"3282\":[4,147],\"3283\":[1,3],\"3284\":[1],\"3285\":[1],\"3286\":[1],\"3287\":[1],\"3288\":[1],\"3289\":[1],\"3290\":[1],\"3291\":[1],\"3292\":[1],\"3293\":[1],\"3294\":[1],\"3295\":[1],\"3296\":[1],\"3297\":[2],\"3298\":[1],\"3299\":[2],\"3300\":[2],\"3301\":[2],\"3302\":[1],\"3303\":[1],\"3304\":[1],\"3305\":[1],\"3306\":[1],\"3307\":[1],\"3308\":[1],\"3309\":[1],\"3310\":[1],\"3311\":[1],\"3312\":[1],\"3313\":[1],\"3314\":[1],\"3315\":[1],\"3316\":[1],\"3317\":[1],\"3318\":[1],\"3319\":[1],\"3320\":[1],\"3321\":[2],\"3322\":[1],\"3323\":[2],\"3324\":[2],\"3325\":[4],\"3326\":[3],\"3327\":[3],\"3328\":[3],\"3329\":[3],\"3330\":[3],\"3331\":[3],\"3332\":[3],\"3333\":[3],\"3334\":[3],\"3335\":[1],\"3336\":[1],\"3337\":[1],\"3338\":[1]},\"averageFieldLength\":[2.280163240025019,29.64016510711798,0.6018492185740518],\"storedFields\":{\"0\":{\"h\":\"项目主页\",\"t\":[\"是什么？\",\" 自己写文的目的是为了记录自己对知识点的掌握程度，在未来的发展过程中不断的巩固，从而形成一个自己熟悉且较为完备的知识体系。 \",\"为什么？\",\"Tip:\",\"盖好一栋大厦的关键在于打好地基，但后期的维护和补丁也不可或缺，做笔记并不是目的，目的是为了掌握知识点。\",\" 知识只有被系统性的归纳起来，才能建立起知识体系，碎片化、零散化地去学习，否则会让自己陷入一种自我麻痹且极度自信的状态，会让你产生一种所有知识都懂假象，随便提起来一些知识点也都能说上两嘴，但是不能深究，一旦深入一点，就好像缓存穿透一般，所有的刨根问底都将造成真实伤害。 \"]},\"1\":{\"h\":\"门户主页\"},\"2\":{\"h\":\"介绍\",\"t\":[\"这是一个档案主页的案例。\",\"要使用此布局，你应该在页面 Frontmatter 中设置 home: true 和 portfolio: true。\",\"相关配置文档请见 档案主页。\"]},\"3\":{\"h\":\"主要功能与配置演示\"},\"4\":{\"c\":[\"使用指南\"]},\"5\":{\"h\":\"布局与功能禁用\",\"t\":[\"你可以通过设置页面的 Frontmatter，在页面禁用功能与布局。\",\"本页面就是一个示例，禁用了如下功能:\",\"导航栏\",\"侧边栏\",\"路径导航\",\"页面信息\",\"贡献者\",\"编辑此页链接\",\"更新时间\",\"上一篇/下一篇 链接\",\"评论\",\"页脚\",\"返回顶部按钮\"]},\"6\":{\"c\":[\"使用指南\"]},\"7\":{\"c\":[\"禁用\"]},\"8\":{\"h\":\"布局\",\"t\":[\"布局包括:\",\"导航栏\",\"侧边栏\",\"页脚\",\"同时每个页面包含:\",\"路径导航\",\"标题和页面信息\",\"TOC (文章标题列表)\",\"贡献者、更新时间等页面元信息\",\"评论\",\"主题也带有以下元素:\",\"夜间模式按钮\",\"返回顶部按钮\",\"打印按钮\",\"你可以在主题选项和页面的 frontmatter 中自定义它们。\"]},\"9\":{\"c\":[\"指南\"]},\"10\":{\"c\":[\"布局\"]},\"11\":{\"h\":\"Markdown 展示\",\"t\":[\"VuePress 主要从 Markdown 文件生成页面。因此，你可以使用它轻松生成文档或博客站点。\",\"你需要创建并编写 Markdown，以便 VuePress 可以根据文件结构将它们转换为不同的页面。\"]},\"12\":{\"h\":\"Markdown 介绍\",\"t\":[\"如果你是一个新手，还不会编写 Markdown，请先阅读 Markdown 介绍 和 Markdown 演示。\"]},\"13\":{\"h\":\"Markdown 配置\",\"t\":[\"VuePress 通过 Frontmatter 为每个 Markdown 页面引入配置。\",\"Frontmatter\",\"Frontmatter 是 VuePress 中很重要的一个概念，请阅读 Frontmatter 介绍 了解详情。\"]},\"14\":{\"h\":\"Markdown 扩展\",\"t\":[\"VuePress 会使用 markdown-it 来解析 Markdown 内容，因此可以借助于 markdown-it 插件来实现 语法扩展 。\"]},\"15\":{\"h\":\"VuePress 扩展\",\"t\":[\"为了丰富文档写作，VuePress 对 Markdown 语法进行了扩展。\",\"关于这些扩展，请阅读 VuePress 中的 Markdown 扩展。\"]},\"16\":{\"h\":\"主题扩展\",\"t\":[\"通过 vuepress-plugin-md-enhance，主题扩展了更多 Markdown 语法，提供更加丰富的写作功能。\"]},\"17\":{\"h\":\"选项卡\",\"t\":[\"查看详情\"]},\"18\":{\"h\":\"脚注\",\"t\":[\"此文字有脚注^first.\",\"查看详情\"]},\"19\":{\"h\":\"导入文件\",\"t\":[\"查看详情\"]},\"20\":{\"h\":\"TeX 语法\",\"t\":[\"$$ \\\\frac {\\\\partial^r} {\\\\partial \\\\omega^r} \\\\left(\\\\frac {y^{\\\\omega}} {\\\\omega}\\\\right) = \\\\left(\\\\frac {y^{\\\\omega}} {\\\\omega}\\\\right) \\\\left{(\\\\log y)^r + \\\\sum_{i=1}^r \\\\frac {(-1)^i r \\\\cdots (r-i+1) (\\\\log y)^{r-i}} {\\\\omega^i} \\\\right} $$\",\"查看详情\"]},\"21\":{\"h\":\"任务列表\",\"t\":[\" 计划 1\",\" 计划 2\",\"查看详情\"]},\"22\":{\"h\":\"图片增强\",\"t\":[\"支持为图片设置颜色模式和大小。\",\"查看详情\"]},\"23\":{\"h\":\"上下角标\",\"t\":[\"19th H2O\",\"查看详情\"]},\"24\":{\"h\":\"组件\"},\"25\":{\"c\":[\"使用指南\"]},\"26\":{\"c\":[\"Markdown\"]},\"27\":{\"h\":\"页面配置\",\"t\":[\"more 注释之前的内容被视为文章摘要。\"]},\"28\":{\"h\":\"页面标题\",\"t\":[\"The first H1 title in Markdown will be regarded as page title.\",\"Markdown 中的第一个 H1 标题会被视为页面标题。\",\"你可以在 Markdown 的 Frontmatter 中设置页面标题。\",\"--- title: 页面标题 ---\"]},\"29\":{\"h\":\"页面信息\",\"t\":[\"你可以在 Markdown 的 Frontmatter 中设置页面信息。\",\"作者设置为 Ms.Hope。\",\"写作日期为 2020 年 1 月 1 日\",\"分类为 “使用指南”\",\"标签为 “页面配置” 和 “使用指南”\"]},\"30\":{\"h\":\"页面内容\",\"t\":[\"你可以自由在这里书写你的 Markdown。\",\"图片引入\",\"你可以将图片和 Markdown 文件放置在一起使用相对路径进行引用。\",\"对于 .vuepress/public 文件夹的图片，请使用绝对链接 / 进行引用。\"]},\"31\":{\"h\":\"组件\",\"t\":[\"每个 Markdown 页面都会被转换为一个 Vue 组件，这意味着你可以在 Markdown 中使用 Vue 语法：\",\"{{ 1 + 1 }}\",\"{{ i }}\",\"你也可以创建并引入你自己的组件。\"]},\"32\":{\"c\":[\"使用指南\"]},\"33\":{\"c\":[\"页面配置\",\"使用指南\"]},\"34\":{\"h\":\"1. Mongo数据库概述\"},\"35\":{\"h\":\"概述\",\"t\":[\"MongoDB是一个开源的NoSQL文档数据库，它使用类似JSON的BSON格式来存储数据。MongoDB的设计理念是提供高性能、高可用性和易扩展性的数据库解决方案，适合处理大量的非结构化或半结构化数据。\"]},\"36\":{\"h\":\"知识要点\"},\"37\":{\"h\":\"1. 核心概念\",\"t\":[\"文档(Document): MongoDB中最基本的数据单元，类似于关系型数据库中的行，使用BSON格式存储。\",\"集合(Collection): 文档的集合，类似于关系型数据库中的表，但不需要固定的 schema。\",\"数据库(Database): 集合的容器，一个MongoDB实例可以包含多个数据库。\",\"字段(Field): 文档中的键值对，类似于关系型数据库中的列。\",\"// 示例：MongoDB中的文档结构 { \\\"_id\\\": ObjectId(\\\"60f7a4b3e9a2c34567890123\\\"), \\\"name\\\": \\\"张三\\\", \\\"age\\\": 30, \\\"address\\\": { \\\"city\\\": \\\"北京\\\", \\\"street\\\": \\\"朝阳区\\\" }, \\\"hobbies\\\": [\\\"读书\\\", \\\"旅行\\\"] }\"]},\"38\":{\"h\":\"2. 支持的数据类型\",\"t\":[\"基本类型: 字符串、数字、布尔值、null\",\"复杂类型: 数组、对象、日期、正则表达式\",\"特殊类型: ObjectId、Binary Data、Code、Timestamp\"]},\"39\":{\"h\":\"3. MongoDB的主要优势\",\"t\":[\"** schema 灵活性**: 不需要预定义表结构，可以灵活地存储不同结构的数据。\",\"查询能力: 支持丰富的查询操作，包括过滤、排序、分页等。\",\"索引支持: 支持多种类型的索引，提高查询性能。\",\"聚合框架: 提供强大的聚合功能，可以进行复杂的数据处理。\",\"高可用性: 通过复制集(replica set)实现高可用性和数据冗余。\",\"可扩展性: 通过分片(sharding)实现水平扩展。\"]},\"40\":{\"h\":\"知识扩展\"},\"41\":{\"h\":\"1. 设计思想\",\"t\":[\"MongoDB的设计思想是拥抱数据的多样性和变化性，不再强制要求数据符合固定的 schema，而是允许数据结构随着应用的发展而演变。这种设计理念使得MongoDB特别适合处理快速变化的业务需求和非结构化数据。\"]},\"42\":{\"h\":\"2. 避坑指南\",\"t\":[\"不要过度使用嵌套文档，这会使查询和更新变得复杂。\",\"合理设计索引，避免创建过多的索引导致写性能下降。\",\"注意数据一致性问题，MongoDB默认是最终一致性的。\",\"对于大量的小文档，考虑使用批量操作来提高性能。\"]},\"43\":{\"h\":\"3. 深度思考题\",\"t\":[\"MongoDB和关系型数据库的主要区别是什么？各自的适用场景是什么？\",\"什么是CAP定理？MongoDB是如何在CAP之间做出权衡的？\",\"为什么说MongoDB是无模式的？这带来了哪些优势和挑战？\",\"深度思考题回答:\",\"MongoDB和关系型数据库的主要区别在于数据模型、schema灵活性、扩展方式等。关系型数据库适合处理结构化数据、复杂的事务和关联查询；MongoDB适合处理非结构化或半结构化数据、需要快速迭代的业务需求和大规模的数据存储。\",\"CAP定理指出，一个分布式系统不可能同时满足一致性(Consistency)、可用性(Availability)和分区容错性(Partition Tolerance)。MongoDB在设计上优先考虑了可用性和分区容错性，同时提供了一些机制来提高一致性，如读写关注级别。\",\"MongoDB的无模式是指不需要预定义表结构，文档可以有不同的字段和结构。这带来的优势是灵活性高、开发效率高；挑战是数据一致性难以保证、查询和索引设计更加复杂。\"]},\"44\":{\"h\":\"2. Mongo数据库实践-增删改查\"},\"45\":{\"h\":\"概述\",\"t\":[\"增删改查(CRUD)是数据库操作的基础，MongoDB提供了丰富的API来支持这些操作。本章将详细介绍MongoDB中的CRUD操作，包括插入数据、查询数据、更新数据和删除数据。\"]},\"46\":{\"h\":\"知识要点\"},\"47\":{\"h\":\"1. 插入数据\",\"t\":[\"插入单个文档: 使用insertOne()方法\",\"插入多个文档: 使用insertMany()方法\",\"// 示例：插入单个文档 Document document = new Document(); document.append(\\\"name\\\", \\\"张三\\\"); document.append(\\\"age\\\", 30); document.append(\\\"address\\\", new Document(\\\"city\\\", \\\"北京\\\").append(\\\"street\\\", \\\"朝阳区\\\")); document.append(\\\"hobbies\\\", Arrays.asList(\\\"读书\\\", \\\"旅行\\\")); collection.insertOne(document); // 示例：插入多个文档 List<Document> documents = new ArrayList<>(); // 添加多个文档... collection.insertMany(documents);\"]},\"48\":{\"h\":\"2. 查询数据\",\"t\":[\"查询所有文档: 使用find()方法\",\"查询单个文档: 使用findOne()方法\",\"条件查询: 使用查询过滤器\",\"排序: 使用sort()方法\",\"分页: 使用skip()和limit()方法\",\"// 示例：查询所有文档 FindIterable<Document> documents = collection.find(); // 示例：条件查询 Document filter = new Document(\\\"age\\\", new Document(\\\"$gt\\\", 25)); FindIterable<Document> documents = collection.find(filter); // 示例：排序和分页 FindIterable<Document> documents = collection.find() .sort(new Document(\\\"age\\\", 1)) .skip(10) .limit(5);\"]},\"49\":{\"h\":\"3. 更新数据\",\"t\":[\"更新单个文档: 使用updateOne()方法\",\"更新多个文档: 使用updateMany()方法\",\"替换文档: 使用replaceOne()方法\",\"更新操作符: 如$set, $inc, $push等\",\"// 示例：更新单个文档 Document filter = new Document(\\\"name\\\", \\\"张三\\\"); Document update = new Document(\\\"$set\\\", new Document(\\\"age\\\", 31)); collection.updateOne(filter, update); // 示例：更新多个文档 Document filter = new Document(\\\"age\\\", new Document(\\\"$lt\\\", 30)); Document update = new Document(\\\"$inc\\\", new Document(\\\"age\\\", 1)); collection.updateMany(filter, update);\"]},\"50\":{\"h\":\"4. 删除数据\",\"t\":[\"删除单个文档: 使用deleteOne()方法\",\"删除多个文档: 使用deleteMany()方法\",\"删除所有文档: 使用空过滤器\",\"// 示例：删除单个文档 Document filter = new Document(\\\"name\\\", \\\"张三\\\"); collection.deleteOne(filter); // 示例：删除多个文档 Document filter = new Document(\\\"age\\\", new Document(\\\"$gt\\\", 40)); collection.deleteMany(filter);\"]},\"51\":{\"h\":\"知识扩展\"},\"52\":{\"h\":\"1. 设计思想\",\"t\":[\"MongoDB的CRUD操作设计遵循了简单直观的原则，API设计类似于自然语言，容易理解和使用。同时，MongoDB提供了丰富的选项和参数，使得操作更加灵活，可以满足各种复杂的业务需求。\"]},\"53\":{\"h\":\"2. 避坑指南\",\"t\":[\"插入数据时，确保设置了合适的索引，否则查询性能会下降。\",\"查询数据时，尽量避免全表扫描，使用过滤器来限制返回的文档数量。\",\"更新数据时，尽量使用$set操作符而不是替换整个文档，这样可以减少网络传输和写入开销。\",\"删除数据时，要小心谨慎，确保过滤器正确，避免误删数据。\"]},\"54\":{\"h\":\"3. 深度思考题\",\"t\":[\"什么是MongoDB中的批量操作？它有什么优势？\",\"如何在MongoDB中实现分页查询？有哪些注意事项？\",\"什么是乐观并发控制？MongoDB是如何实现的？\",\"深度思考题回答:\",\"批量操作是指一次性执行多个操作，如insertMany(), updateMany(), deleteMany()等。它的优势是减少网络传输次数，提高操作效率。\",\"在MongoDB中，可以使用skip()和limit()方法来实现分页查询。需要注意的是，当skip()的参数很大时，性能会下降，因为MongoDB需要跳过大量的文档。可以考虑使用基于游标的分页方式来优化。\",\"乐观并发控制是一种并发控制机制，它假设冲突很少发生，因此不进行锁操作，而是在提交时检查是否有冲突。MongoDB通过_id字段和版本控制来实现乐观并发控制。\"]},\"55\":{\"h\":\"3.Mongo数据库进阶-聚合操作\"},\"56\":{\"h\":\"概述\",\"t\":[\"聚合操作是MongoDB中的高级查询功能，它允许我们对数据进行复杂的处理和分析，如分组、筛选、排序、计算等。MongoDB提供了两种主要的聚合方式：聚合管道和MapReduce。\"]},\"57\":{\"h\":\"知识要点\"},\"58\":{\"h\":\"1. 聚合管道\",\"t\":[\"聚合管道是一系列的操作，每个操作接收输入文档，处理后输出结果文档，然后传递给下一个操作。\",\"常用管道阶段: \",\"$match: 过滤文档\",\"$group: 分组文档\",\"$sort: 排序文档\",\"$skip/$limit: 分页\",\"$project: 投影文档\",\"$unwind: 展开数组\",\"$lookup: 左连接其他集合\",\"// 示例：聚合管道 List<Document> pipeline = Arrays.asList( new Document(\\\"$match\\\", new Document(\\\"age\\\", new Document(\\\"$gt\\\", 25))), new Document(\\\"$group\\\", new Document(\\\"_id\\\", \\\"$address.city\\\") .append(\\\"count\\\", new Document(\\\"$sum\\\", 1)) .append(\\\"avgAge\\\", new Document(\\\"$avg\\\", \\\"$age\\\"))), new Document(\\\"$sort\\\", new Document(\\\"count\\\", -1)) ); AggregateIterable<Document> result = collection.aggregate(pipeline);\"]},\"59\":{\"h\":\"2. MapReduce\",\"t\":[\"MapReduce是一种分布式计算模型，它包括两个主要阶段：map阶段和reduce阶段。\",\"map阶段: 将数据分解成键值对\",\"reduce阶段: 合并相同键的值\",\"// 示例：MapReduce String mapFunction = \\\"function() { emit(this.address.city, 1); }\\\"; String reduceFunction = \\\"function(key, values) { return Array.sum(values); }\\\"; MapReduceIterable<Document> result = collection.mapReduce(mapFunction, reduceFunction);\"]},\"60\":{\"h\":\"3. 单目聚合函数\",\"t\":[\"单目聚合函数是针对整个集合的聚合操作，如计数、求和、平均值等。\",\"count(): 计算文档数量\",\"distinct(): 查找指定字段的不同值\",\"aggregateOne(): 执行聚合操作并返回单个结果\",\"// 示例：单目聚合函数 long count = collection.countDocuments(); List<String> cities = collection.distinct(\\\"address.city\\\", String.class).into(new ArrayList<>());\"]},\"61\":{\"h\":\"知识扩展\"},\"62\":{\"h\":\"1. 设计思想\",\"t\":[\"MongoDB的聚合系统设计灵感来自于Unix管道，它允许我们通过组合简单的操作来构建复杂的查询。这种设计理念使得聚合操作既灵活又强大，可以满足各种复杂的数据处理需求。\"]},\"63\":{\"h\":\"2. 避坑指南\",\"t\":[\"聚合管道的顺序很重要，尽量将$match放在前面，以减少后续操作的数据量。\",\"对于大数据集，考虑使用索引来提高聚合操作的性能。\",\"注意聚合操作的内存限制，如果操作的数据量过大，可能会导致性能问题或失败。\",\"MapReduce虽然强大，但性能通常比聚合管道低，尽量使用聚合管道。\"]},\"64\":{\"h\":\"3. 深度思考题\",\"t\":[\"聚合管道和MapReduce的主要区别是什么？各自的适用场景是什么？\",\"如何优化聚合操作的性能？\",\"什么是覆盖索引？它在聚合操作中有什么作用？\",\"深度思考题回答:\",\"聚合管道是一系列的操作，每个操作处理输入文档并输出结果文档，然后传递给下一个操作；MapReduce是一种分布式计算模型，包括map阶段和reduce阶段。聚合管道适合处理中等规模的数据和复杂的查询；MapReduce适合处理大规模的数据和复杂的计算。\",\"优化聚合操作的性能可以从以下几个方面入手：使用合适的索引、合理安排管道阶段的顺序、限制返回的数据量、避免不必要的计算等。\",\"覆盖索引是一种特殊的索引，它包含了查询所需的所有字段，使得MongoDB不需要读取文档就可以返回查询结果。在聚合操作中，覆盖索引可以显著提高性能，特别是对于那些只需要访问索引中包含的字段的操作。\"]},\"65\":{\"h\":\"4. Mongo数据库高级用法\"},\"66\":{\"h\":\"概述\",\"t\":[\"MongoDB提供了许多高级功能，使得它可以适应各种复杂的业务场景。本章将介绍MongoDB的一些高级用法，包括索引优化、复制集、分片、事务等。\"]},\"67\":{\"h\":\"知识要点\"},\"68\":{\"h\":\"1. 索引优化\",\"t\":[\"索引是提高查询性能的关键，MongoDB支持多种类型的索引。\",\"单字段索引: 基于单个字段创建的索引\",\"复合索引: 基于多个字段创建的索引\",\"多键索引: 针对数组字段创建的索引\",\"地理空间索引: 针对地理空间数据创建的索引\",\"文本索引: 针对文本数据创建的索引\",\"哈希索引: 基于哈希函数创建的索引\",\"// 示例：创建复合索引 collection.createIndex(new Document(\\\"name\\\", 1).append(\\\"age\\\", -1)); // 示例：查看索引 List<Document> indexes = collection.listIndexes().into(new ArrayList<>());\"]},\"69\":{\"h\":\"2. 复制集\",\"t\":[\"复制集是一组MongoDB实例，它们维护相同的数据集，提供高可用性和数据冗余。\",\"主节点: 负责处理写操作\",\"从节点: 复制主节点的数据，处理读操作\",\"仲裁节点: 不存储数据，只参与选举\",\"// 示例：连接到复制集 MongoClient mongoClient = MongoClients.create(\\\"mongodb://host1:27017,host2:27017,host3:27017/?replicaSet=myReplicaSet\\\");\"]},\"70\":{\"h\":\"3. 分片\",\"t\":[\"分片是一种水平扩展方式，它将数据分布在多个服务器上。\",\"分片键: 用于确定数据分布的字段\",\"分片集群: 由mongos、config服务器和分片服务器组成\",\"分片策略: 包括范围分片和哈希分片\",\"// 示例：连接到分片集群 MongoClient mongoClient = MongoClients.create(\\\"mongodb://mongos1:27017,mongos2:27017\\\");\"]},\"71\":{\"h\":\"4. 事务\",\"t\":[\"MongoDB支持多文档事务，使得我们可以在多个文档上执行原子操作。\",\"开始事务: 使用startSession()和startTransaction()方法\",\"提交事务: 使用commitTransaction()方法\",\"回滚事务: 使用abortTransaction()方法\",\"// 示例：使用事务 ClientSession clientSession = mongoClient.startSession(); try { clientSession.startTransaction(); // 执行操作... clientSession.commitTransaction(); } catch (Exception e) { clientSession.abortTransaction(); } finally { clientSession.close(); }\"]},\"72\":{\"h\":\"知识扩展\"},\"73\":{\"h\":\"1. 设计思想\",\"t\":[\"MongoDB的高级功能设计遵循了可扩展性和高可用性的原则，使得它可以适应各种复杂的业务场景。无论是处理大量的数据、保证数据的可用性，还是确保数据的一致性，MongoDB都提供了相应的解决方案。\"]},\"74\":{\"h\":\"2. 避坑指南\",\"t\":[\"索引虽然可以提高查询性能，但也会增加写操作的开销，要合理设计索引。\",\"复制集可以提供高可用性，但不能提供水平扩展，对于大量的数据，需要使用分片。\",\"分片虽然可以提供水平扩展，但也会增加系统的复杂性，要谨慎使用。\",\"事务虽然可以保证数据的一致性，但也会增加性能开销，对于不需要严格一致性的场景，可以考虑使用其他方式。\"]},\"75\":{\"h\":\"3. 深度思考题\",\"t\":[\"什么是MongoDB中的读写关注级别？它们有什么作用？\",\"如何选择合适的分片键？\",\"复制集和分片的主要区别是什么？各自的适用场景是什么？\",\"深度思考题回答:\",\"读写关注级别是控制MongoDB读写操作的一致性和可用性的机制。读关注级别控制了读取的数据的新鲜度；写关注级别控制了写操作的确认方式。\",\"选择合适的分片键需要考虑以下几个因素：数据分布的均匀性、查询的频率、写入的频率等。一个好的分片键应该能够使得数据均匀分布在各个分片上，同时能够满足查询的需求。\",\"复制集是一组维护相同数据集的MongoDB实例，主要用于提供高可用性和数据冗余；分片是一种水平扩展方式，主要用于处理大量的数据。复制集适合处理需要高可用性但数据量不是特别大的场景；分片适合处理数据量非常大，单个服务器无法处理的场景。\"]},\"76\":{\"h\":\"5. Mongo数据库命令参考\"},\"77\":{\"h\":\"概述\",\"t\":[\"MongoDB提供了丰富的命令集来操作数据库、集合和文档。本章节将详细介绍MongoDB的常用命令，包括数据库命令、集合命令、文档操作命令以及高级命令，帮助开发者快速掌握MongoDB的使用技巧。\"]},\"78\":{\"h\":\"知识要点\"},\"79\":{\"h\":\"1. 数据库命令\"},\"80\":{\"h\":\"1.1 基本数据库命令\",\"t\":[\"# 查看所有数据库 show dbs # 切换到指定数据库，如果不存在则创建 use databaseName # 查看当前使用的数据库 db # 删除当前数据库 db.dropDatabase() # 查看数据库统计信息 db.stats()\"]},\"81\":{\"h\":\"1.2 用户管理命令\",\"t\":[\"# 创建用户 use admin db.createUser({ user: \\\"username\\\", pwd: \\\"password\\\", roles: [{ role: \\\"roleName\\\", db: \\\"databaseName\\\" }] }) # 查看用户 show users # 修改用户 db.updateUser( \\\"username\\\", { pwd: \\\"newPassword\\\", roles: [{ role: \\\"newRole\\\", db: \\\"databaseName\\\" }] } ) # 删除用户 db.dropUser(\\\"username\\\")\"]},\"82\":{\"h\":\"2. 集合命令\",\"t\":[\"# 查看当前数据库中的所有集合 show collections # 创建集合 db.createCollection(\\\"collectionName\\\") # 删除集合 db.collectionName.drop() # 查看集合统计信息 db.collectionName.stats() # 重命名集合 db.collectionName.renameCollection(\\\"newCollectionName\\\")\"]},\"83\":{\"h\":\"3. 文档操作命令\"},\"84\":{\"h\":\"3.1 插入文档\",\"t\":[\"# 插入单个文档 db.collectionName.insertOne({ name: \\\"张三\\\", age: 30, address: { city: \\\"北京\\\", street: \\\"朝阳区\\\" }, hobbies: [\\\"读书\\\", \\\"旅行\\\"] }) # 插入多个文档 db.collectionName.insertMany([ { name: \\\"张三\\\", age: 30 }, { name: \\\"李四\\\", age: 25 } ])\"]},\"85\":{\"h\":\"3.2 查询文档\",\"t\":[\"# 查询所有文档 db.collectionName.find() # 查询单个文档 db.collectionName.findOne() # 条件查询 db.collectionName.find({ age: { $gt: 25 } }) # 投影查询（只返回指定字段） db.collectionName.find({ age: { $gt: 25 } }, { name: 1, age: 1 }) # 排序 db.collectionName.find().sort({ age: 1 }) # 分页 db.collectionName.find().skip(10).limit(5)\"]},\"86\":{\"h\":\"3.3 更新文档\",\"t\":[\"# 更新单个文档 db.collectionName.updateOne({ name: \\\"张三\\\" }, { $set: { age: 31 } }) # 更新多个文档 db.collectionName.updateMany({ age: { $lt: 30 } }, { $inc: { age: 1 } }) # 替换文档 db.collectionName.replaceOne({ name: \\\"张三\\\" }, { name: \\\"张三\\\", age: 31, address: \\\"北京市朝阳区\\\" })\"]},\"87\":{\"h\":\"3.4 删除文档\",\"t\":[\"# 删除单个文档 db.collectionName.deleteOne({ name: \\\"张三\\\" }) # 删除多个文档 db.collectionName.deleteMany({ age: { $gt: 40 } })\"]},\"88\":{\"h\":\"4. 高级命令\"},\"89\":{\"h\":\"4.1 聚合命令\",\"t\":[\"# 聚合管道 db.collectionName.aggregate([ { $match: { age: { $gt: 25 } } }, { $group: { _id: \\\"$address.city\\\", count: { $sum: 1 } } }, { $sort: { count: -1 } } ]) # MapReduce db.collectionName.mapReduce( function() { emit(this.address.city, 1); }, function(key, values) { return Array.sum(values); }, { out: \\\"resultCollection\\\" } ) # 单目聚合函数 db.collectionName.count() db.collectionName.distinct(\\\"age\\\")\"]},\"90\":{\"h\":\"4.2 索引命令\",\"t\":[\"# 创建索引 db.collectionName.createIndex({ name: 1 }) # 创建复合索引 db.collectionName.createIndex({ name: 1, age: -1 }) # 查看索引 db.collectionName.getIndexes() # 删除索引 db.collectionName.dropIndex(\\\"indexName\\\") db.collectionName.dropIndexes() # 删除所有索引（除了_id索引）\"]},\"91\":{\"h\":\"4.3 事务命令\",\"t\":[\"# 开始事务 const session = db.getMongo().startSession(); session.startTransaction(); try { # 执行操作 session.getDatabase(\\\"test\\\").collection(\\\"users\\\").insertOne({ name: \\\"张三\\\", age: 30 }); # 提交事务 session.commitTransaction(); } catch (error) { # 回滚事务 session.abortTransaction(); } finally { # 关闭会话 session.endSession(); }\"]},\"92\":{\"h\":\"知识扩展\"},\"93\":{\"h\":\"1. 设计思想\",\"t\":[\"MongoDB的命令设计遵循了以下原则：\",\"简洁明了：命令名称通常是描述性的英文单词或缩写，易于记忆和使用。\",\"一致性：相同类型的命令具有相似的格式和行为。\",\"高效性：命令被设计为尽可能高效地执行，减少网络传输和内存使用。\",\"灵活性：许多命令支持多种参数组合，以适应不同的使用场景。\"]},\"94\":{\"h\":\"2. 避坑指南\",\"t\":[\"查询性能：避免全表扫描，使用索引来提高查询性能。\",\"数据一致性：MongoDB默认是最终一致性的，对于需要强一致性的场景，可以使用事务或读写关注级别。\",\"内存管理：监控MongoDB的内存使用情况，避免内存溢出。\",\"批量操作：对于大量数据的操作，使用批量命令（如insertMany、updateMany等），减少网络开销。\",\"命令安全：避免在生产环境中使用某些危险命令（如dropDatabase、dropCollection等），除非你确信它们的执行是安全的。\"]},\"95\":{\"h\":\"3. 深度思考题\",\"t\":[\"什么是MongoDB的读写关注级别？\",\"回答：MongoDB的读写关注级别控制了读写操作的一致性和可用性。读关注级别决定了从哪个节点读取数据，写关注级别决定了写操作需要确认的节点数量。\",\"如何优化MongoDB的查询性能？\",\"回答：优化MongoDB的查询性能可以从以下几个方面入手：\",\"使用索引来加速查询\",\"避免全表扫描\",\"合理设计数据模型\",\"使用投影查询来减少返回的数据量\",\"分页查询时使用合适的策略\",\"什么是MongoDB的聚合管道？它有什么优势？\",\"回答：MongoDB的聚合管道是一种数据处理框架，它允许我们通过一系列的阶段来处理数据。每个阶段接收输入，处理数据，并将结果传递给下一个阶段。聚合管道的优势包括：\",\"灵活性：可以组合多个阶段来构建复杂的查询\",\"高效性：数据在管道中流动，减少了中间结果的存储\",\"可扩展性：可以处理大量的数据\",\"如何安全地执行MongoDB的危险命令？\",\"回答：安全地执行MongoDB的危险命令可以从以下几个方面入手：\",\"限制命令的执行权限\",\"在执行命令前进行备份\",\"在测试环境中验证命令的效果\",\"避免在高峰时段执行危险命令\",\"使用事务来确保操作的原子性\"]},\"96\":{\"h\":\"Linux安装mysql主从模式\"},\"97\":{\"h\":\"Mysql 双主从(已测试)\",\"t\":[\"前提：两个数据库数据一致，没有服务在做写入操作。\"]},\"98\":{\"h\":\"一、添加配置文件\",\"t\":[\"master1和master2二台服务器，分别到/etc/my.cnf配置文件， 在mysqld里添加一下属性\",\"#master1上 [mysqld] server-id=101 log-bin = mysql-bin auto-increment-increment = 2 auto-increment-offset = 1000 #master2上 [mysqld] server-id=103 log-bin = mysql-bin auto-increment-increment = 2 auto-increment-offset = 1001\"]},\"99\":{\"h\":\"二、创建用户\",\"t\":[\"进入Mysql，分别为二台master创建各种的用户供对方使用\",\"#master1的机器上 mysql> CREATE USER 'master1'@'%' IDENTIFIED BY '123456'; #master2的机器上 mysql> CREATE USER 'master2'@'%' IDENTIFIED BY '123456';\",\"(1819错误密码长度限制问题：set global validate_password_policy=0;)\"]},\"100\":{\"h\":\"三、分别给用户授予复制权限\",\"t\":[\"#master1的机器上 mysql> GRANT REPLICATION SLAVE ON *.* TO 'master1'@'%' IDENTIFIED BY '123456'; 刷新 Mysql>flush privileges; #master2的机器上 mysql> GRANT REPLICATION SLAVE ON *.* TO 'master2'@'%' IDENTIFIED BY '123456'; 刷新 Mysql>flush privileges;\"]},\"101\":{\"h\":\"四、分别重启服务\",\"t\":[\"登录mysql用户，通过show master status; 查看二进制文件名称还有pos位置，为slave配置复制位置\",\"service mysqld restart;\",\"img\"]},\"102\":{\"h\":\"五、配置主从机\",\"t\":[\"分别切换master，注意master_log_file还有master_log_pos mysql里面操作\",\"#master1的机器上 mysql> change master to master_host='192.168.137.103',master_user='master2',master_password='123456',master_log_file='mysql-bin.000003',master_log_pos=951; #master2的机器上 mysql> change master to master_host='192.168.137.101',master_user='master1',master_password='123456',master_log_file='mysql-bin.000004',master_log_pos=698;\"]},\"103\":{\"h\":\"七、分别利用命令启动slave\",\"t\":[\"mysql> start slave; 关闭slave stop slave\"]},\"104\":{\"h\":\"八、测试结果\",\"t\":[\"在master1上创建数据库，master2是否能同步，然后再在master2上创建表写数据，看master1能否同步。\",\"img\"]},\"105\":{\"h\":\"Mysql 单主从（步骤有问题）\"},\"106\":{\"h\":\"\",\"t\":[\"master1和master2二台服务器，修改master1/etc/my.cnf配置文件， 在mysqld里添加一下属性\",\"#master1上 [mysqld] server-id=101 log-bin = mysql-bin auto-increment-increment = 2 auto-increment-offset = 1000\"]},\"107\":{\"h\":\"二、创建用户\",\"t\":[\"进入Mysql，创建用户供从库使用\",\"#master1的机器上 mysql> CREATE USER 'master1'@'%' IDENTIFIED BY '123456';\"]},\"108\":{\"h\":\"三、分别给用户授予复制权限\",\"t\":[\"#master1的机器上 mysql> GRANT REPLICATION SLAVE ON *.* TO 'master1'@'%' IDENTIFIED BY '123456'; 刷新 Mysql>flush privileges;\"]},\"109\":{\"h\":\"四、分别重启服务\",\"t\":[\"登录mysql用户，通过show master status 查看二进制文件名称还有pos位置，为slave配置复制位置\",\"service mysqld restart; show master status;\",\"img\"]},\"110\":{\"h\":\"五、配置从机\",\"t\":[\"切换master，注意master_log_file还有master_log_pos mysql里面操作\",\"#master2的机器上 mysql> change master to master_host='192.168.232.54',master_user='master1',master_password='HNS@gtjy1.0',master_log_file='mysql-bin.000022',master_log_pos=154;\"]},\"111\":{\"h\":\"七、利用命令启动slave\",\"t\":[\"mysql> start slave; //关闭slave stop slave;\"]},\"112\":{\"h\":\"八、测试结果\",\"t\":[\"在master1上创建数据库，master2是否能同步。\",\"查看slave状态： show slave status；\",\"img\",\"安装完成之后，所有mysql重启就可以了\",\"如果是Slave_SQL_Running：no\",\"img\",\"*解决办法如下：*\",\"MariaDB [(none)]> stop slave; MariaDB [(none)]> SET GLOBAL SQL_SLAVE_SKIP_COUNTER=1; START SLAVE; MariaDB [(none)]> start slave; MariaDB [(none)]> show slave status; show slave status\\\\G;\"]},\"113\":{\"h\":\"\",\"t\":[\"MariaDB [(none)]> stop slave; MariaDB [(none)]> CHANGE MASTER TO MASTER_LOG_FILE='mysql-bin.000026',MASTER_LOG_POS=0; MariaDB [(none)]> slave start; MariaDB [(none)]> show slave status；\",\"删除savlue\",\"stop slave; Query OK, 0 rows affected (0.06 sec) reset slave;\",\"删除5张表，并重新导入脚本\",\"use mysql drop table slave_master_info; drop table slave_relay_log_info; drop table slave_worker_info; drop table innodb_index_stats; drop table innodb_table_stats; source /usr/coolpad/mysql/share/mysql_system_tables.sql\",\"(2)重新启动数据库\",\"注：这一步是必须的，否则无法正常配置双主架构。\",\"特别注意，数据库主从日志很大\",\"(一般位置为/var/lib//mysql/或/usr/local/mysql/var/）\",\"<2>设置只保留30天的binlog\",\"(临时，重启mysql这个参数会失败)\",\"set global expire_logs_days = 30;\",\"(永久，my.cnf中添加，重启后生效)、\",\"expire_logs_days = 30\",\"查看当前的日志保存天数\",\"show variables like ‘expire_logs_days’;\",\"数据库重启后，mysql主动配置也需要重启。\"]},\"114\":{\"h\":\"MySql开启SSL安全认证\",\"t\":[\"【思考】：为什么要开启ssl认证？\",\"SSL（Secure Socket Layer：安全套接字层）利用数据加密、身份验证和消息完整性验证机制，为基于TCP等可靠连接的应用层协议提供安全性保证。\",\"SSL协议提供的功能主要有：\",\"1、 数据传输的机密性：利用对称密钥算法对传输的数据进行加密。 2.、身份验证机制：基于证书利用数字签名方法对服务器和客户端进行身份验证，其中客户端的身份验证是可选的。 3、 消息完整性验证：消息传输过程中使用MAC算法来检验消息的完整性。\",\"如果用户的传输不是通过SSL的方式，那么其在网络中数据都是以明文进行传输的，而这给别有用心的人带来了可乘之机。所以，现在很多大型网站都开启了SSL功能。同样地，在我们数据库方面，如果客户端连接服务器获取数据不是使用SSL连接，那么在传输过程中，数据就有可能被窃取。\",\"【测试方式】在MySQL服务器端通过tshark抓包的方式来模拟窃取数据。验证、对比，未使用SSL和使用SSL两者在安全性上有什么不同？\",\"1、未使用SSL和使用SSL安全性对比\",\"1）未使用ssl：在客户端上对数据库做插入数据操作。服务端进行抓包\",\"img\",\"img\",\"【结论】未使用SSL情况下，在数据库服务器端可以通过抓包的方式获取数据，安全性不高。\",\"2）使用ssl：与上述同样的操作。\",\"img\",\"img\",\"【结论】没有抓到该语句，采用SSL加密后，tshark抓不到数据，安全性高。\"]},\"115\":{\"h\":\"二、Mysql5.7 SSL的配置与启用\",\"t\":[\"在MySQL5.7安装初始化阶段，我们发现比之前版本多了一步操作，而这个操作就是安装SSL的。\",\"shell> bin/mysqld --initialize --user=mysql # MySQL 5.7.6 and up shell> bin/mysql_ssl_rsa_setup # MySQL 5.7.6 and up\",\"当运行完这个命令后，默认会在data_dir目录下生成以下pem文件，这些文件就是用于启用SSL功能的：\",\"[root mysql_data]# ll *.pem -rw------- 1 mysql mysql 1675 Jun 12 17:22 ca-key.pem #CA私钥 -rw-r--r-- 1 mysql mysql 1074 Jun 12 17:22 ca.pem #自签的CA证书，客户端连接也需要提供 -rw-r--r-- 1 mysql mysql 1078 Jun 12 17:22 client-cert.pem #客户端连接服务器端需要提供的证书文件 -rw------- 1 mysql mysql 1675 Jun 12 17:22 client-key.pem #客户端连接服务器端需要提供的私钥文件-rw------- 1 mysql mysql 1675 Jun 12 17:22 private_key.pem #私钥/公钥对的私有成员-rw-r--r-- 1 mysql mysql 451 Jun 12 17:22 public_key.pem #私钥/公钥对的共有成员-rw-r--r-- 1 mysql mysql 1078 Jun 12 17:22 server-cert.pem #服务器端证书文件-rw------- 1 mysql mysql 1675 Jun 12 17:22 server-key.pem #服务器端私钥文件\",\"这时从数据库服务器本地进入MySQL命令行，你可以看到如下变量值：\",\"root> mysql -h 10.126.xxx.xxx -udba -p ###查看SSL开启情况 dba:(none)> show global variables like '%ssl%'; +---------------+-----------------+ | Variable_name | Value | +---------------+-----------------+ | have_openssl | YES | | have_ssl | YES | #已经开启了SSL | ssl_ca | ca.pem | | ssl_capath | | | ssl_cert | server-cert.pem | | ssl_cipher | | | ssl_crl | | | ssl_crlpath | | | ssl_key | server-key.pem | +---------------+-----------------+\",\"【注意】：如果用户是采用本地localhost或者sock连接数据库，那么不会使用SSL方式了\"]},\"116\":{\"h\":\"三、配置SSL安全认证\",\"t\":[\"如果安装MySQL57时没有运行过mysql_ssl_rsa_setup，那么如何开启SSL呢？\",\"1)、关闭MySQL服务 2)、运行mysql_ssl_rsa_setup 命令 3)、到data_dir目录下修改.pem文件的所属权限用户为mysql chown -R mysql.mysql *.pem 4)、启动MySQL服务\"]},\"117\":{\"h\":\"Mysql5.7升级小版本\"},\"118\":{\"h\":\"mysql5.7升级小版本-windows\",\"t\":[\"在centos7环境中从5.7.26升级到5.7.37请看：密码：qot9\",\"https://zrzyjyb.yuque.com/docs/share/eba5d4c6-b5bf-4e1b-ac46-b75e3be1f18b\",\"应用场景：mysql 5.7.20升级到当前最新的5.7.31 ，Windows环境\",\"官网下载链接：https://dev.mysql.com/downloads/mysql/5.7.html\",\"注意：操作前mysql数据一定一定先备份，以免安装过程中出问题能够补救\"]},\"119\":{\"h\":\"一、关闭并删除mysql服务\",\"t\":[\"先记录一下mysql的安装路径\",\"//查看mysql安装路径 select @@basedir as basePath from dual; //查看mysql data数据存放路径 show global variables like '%datadir%';\",\"再服务窗口关闭mysql服务\",\"//cmd切换盘符e: //cd到安装路径bin目录下 E:/MySQL/mysql>cd bin //移除mysql服务 E:/MySQL/mysql/bin>mysqld —remove Service successfully removed. E:/MySQL/mysql/bin>cd .. E:/MySQL/mysql>cd ..\"]},\"120\":{\"h\":\"二、替换mysql 相关文件\",\"t\":[\"将mysql文件夹改名，然后将新版本解压命名为mysql将原来的my.ini和data目录拷贝到mysql文件夹中\",\"E:/MySQL>cd mysql E:/MySQL>cd bin //安装mysql服务 E:/MySQL/mysql>mysqld —install Service successfully installed.\"]},\"121\":{\"h\":\"三、启动mysql服务\",\"t\":[\"重新打开服务窗口，启动mysql服务\",\"E:/MySQL/mysql>cd bin E:/MySQL/mysql/bin>mysql -u root -p 输入原先的密码 //查看mysql版本 mysql> select version(); +—————-+ | version() | +—————-+ | 5.7.37 | +—————-+ 1 row in set (0.00 sec) mysql> exit Bye\",\"第三步操作能正常启动可直接跳到第四步。\",\"注意：我在本机上测试，一，二步操作完后，第三步服务能够启动。但在生产环境下却启动不起来。\",\"我在cmd输入启动命令：net start msql的时候提示“服务报告没有任何错误”。\",\"原因：安装完mysql服务后迫不及待的开启mysql服务，在mysql5.7以上版本中默认没有一个data目录，即没有初始化服务。需要先初始化mysql才可以启动服务mysqld --initialize-insecure，否则会报 “服务没有报告任何错误”，启动失败。\",\"1）我这里是因为生产上的mysql数据存放目录data在其他文件夹中，我替换了mysql安装目录后，配置文件my.ini中直接将数据存放目录引导至data所在路径，结果报错。\",\"2）将data路径放置mysql安装目录下，修改配置文件数据存放路径datadir即可，即可启动成功。\",\"3）还是启动不成功就执行mysqld --initialize-insecure将数据库初始化，然后在启动，注意初始化后你的数据库相当于重置了，是一个全新的数据库，需要重新设置密码，导库操作。\"]},\"122\":{\"h\":\"四、执行升级操作\",\"t\":[\"E:/MySQL/mysql/bin>mysql_upgrade.exe -uroot -p 密码 提示： mysql_upgrade: [Warning] Using a password on the command line interface can be i nsecure. Checking if update is needed. Checking server version. Running queries to upgrade MySQL server. Checking system database. mysql.columns_priv OK mysql.db OK mysql.engine_cost OK mysql.event OK mysql.func OK mysql.general_log OK mysql.gtid_executed OK mysql.help_category OK mysql.help_keyword OK mysql.help_relation OK mysql.help_topic OK mysql.innodb_index_stats OK mysql.innodb_table_stats OK mysql.ndb_binlog_index OK mysql.plugin OK mysql.proc OK mysql.procs_priv OK mysql.proxies_priv OK mysql.server_cost OK mysql.servers OK mysql.slave_master_info OK mysql.slave_relay_log_info OK mysql.slave_worker_info OK mysql.slow_log OK mysql.tables_priv OK mysql.time_zone OK mysql.time_zone_leap_second OK mysql.time_zone_name OK mysql.time_zone_transition OK mysql.time_zone_transition_type OK mysql.user OK Found outdated sys schema version 1.5.1. Upgrading the sys schema. Checking databases. ejabberd.archive OK ejabberd.archive_prefs OK ejabberd.archive_search_result OK ejabberd.archive_search_task OK ejabberd.bosh OK ejabberd.caps_features OK ejabberd.carboncopy OK ejabberd.im_muc_room_member OK ejabberd.im_muc_room_stat OK ejabberd.im_sys_config OK ejabberd.im_unread_message OK ejabberd.irc_custom OK ejabberd.last OK ejabberd.motd OK ejabberd.msg_item OK ejabberd.muc_online_room OK ejabberd.muc_online_users OK ejabberd.muc_registered OK ejabberd.muc_room OK ejabberd.muc_room_dissolved OK ejabberd.oauth_token OK ejabberd.privacy_default_list OK ejabberd.privacy_list OK ejabberd.privacy_list_data OK ejabberd.private_storage OK ejabberd.proxy65 OK ejabberd.pubsub_item OK ejabberd.pubsub_node OK ejabberd.pubsub_node_option OK ejabberd.pubsub_node_owner OK ejabberd.pubsub_state OK ejabberd.pubsub_subscription_opt OK ejabberd.roster_version OK ejabberd.rostergroups OK ejabberd.rosterusers OK ejabberd.route OK ejabberd.sm OK ejabberd.spool OK ejabberd.sr_group OK ejabberd.sr_user OK ejabberd.user_favorite_contact OK ejabberd.user_favorite_group_def OK ejabberd.user_mc_room OK ejabberd.user_sign OK ejabberd.users OK ejabberd.vcard OK ejabberd.vcard_search OK sys.sys_config OK Upgrade process completed successfully. Checking if update is needed.\"]},\"123\":{\"h\":\"五、重启mysql服务并验证版本\",\"t\":[\"重启mysql服务\",\"//进入mysql E:/MySQL/mysql/bin>mysql -u root -p 密码： //查看版本 mysql> select version(); //查看数据库 mysql> show databases;\",\"完毕\"]},\"124\":{\"h\":\"Mysql错误码\"},\"125\":{\"h\":\"Mysql错误码\",\"t\":[\"错误：1000 SQLSTATE: HY000 (ER_HASHCHK)\",\"消息：hashchk\",\"· 错误：1001 SQLSTATE: HY000 (ER_NISAMCHK)\",\"消息：isamchk\",\"· 错误：1002 SQLSTATE: HY000 (ER_NO)\",\"消息：NO\",\"· 错误：1003 SQLSTATE: HY000 (ER_YES)\",\"消息：YES\",\"· 错误：1004 SQLSTATE: HY000 (ER_CANT_CREATE_FILE)\",\"消息：无法创建文件'%s' (errno: %d)\",\"· 错误：1005 SQLSTATE: HY000 (ER_CANT_CREATE_TABLE)\",\"消息：无法创建表'%s' (errno: %d)\",\"· 错误：1006 SQLSTATE: HY000 (ER_CANT_CREATE_DB)\",\"消息：无法创建数据库'%s' (errno: %d)\",\"· 错误：1007 SQLSTATE: HY000 (ER_DB_CREATE_EXISTS)\",\"消息：无法创建数据库'%s'，数据库已存在。\",\"· 错误：1008 SQLSTATE: HY000 (ER_DB_DROP_EXISTS)\",\"消息：无法撤销数据库'%s'，数据库不存在。\",\"· 错误：1009 SQLSTATE: HY000 (ER_DB_DROP_DELETE)\",\"消息：撤销数据库时出错（无法删除'%s'，errno: %d）\",\"· 错误：1010 SQLSTATE: HY000 (ER_DB_DROP_RMDIR)\",\"消息：撤销数据库时出错（can't rmdir '%s', errno: %d）\",\"· 错误：1011 SQLSTATE: HY000 (ER_CANT_DELETE_FILE)\",\"消息：删除'%s'时出错 (errno: %d)\",\"· 错误：1012 SQLSTATE: HY000 (ER_CANT_FIND_SYSTEM_REC)\",\"消息：无法读取系统表中的记录。\",\"· 错误：1013 SQLSTATE: HY000 (ER_CANT_GET_STAT)\",\"消息：无法获取'%s'的状态(errno: %d)\",\"· 错误：1014 SQLSTATE: HY000 (ER_CANT_GET_WD)\",\"消息：无法获得工作目录(errno: %d)\",\"· 错误：1015 SQLSTATE: HY000 (ER_CANT_LOCK)\",\"消息：无法锁定文件(errno: %d)\",\"· 错误：1016 SQLSTATE: HY000 (ER_CANT_OPEN_FILE)\",\"消息：无法打开文件：'%s' (errno: %d)\",\"· 错误：1017 SQLSTATE: HY000 (ER_FILE_NOT_FOUND)\",\"消息：无法找到文件： '%s' (errno: %d)\",\"· 错误：1018 SQLSTATE: HY000 (ER_CANT_READ_DIR)\",\"消息：无法读取'%s'的目录 (errno: %d)\",\"· 错误：1019 SQLSTATE: HY000 (ER_CANT_SET_WD)\",\"消息：无法为'%s'更改目录 (errno: %d)\",\"· 错误：1020 SQLSTATE: HY000 (ER_CHECKREAD)\",\"消息：自上次读取以来表'%s'中的记录已改变。\",\"· 错误：1021 SQLSTATE: HY000 (ER_DISK_FULL)\",\"消息：磁盘满(%s)；等待某人释放一些空间...\",\"· 错误：1022 SQLSTATE: 23000 (ER_DUP_KEY)\",\"消息：无法写入；复制表'%s'的 键。\",\"· 错误：1023 SQLSTATE: HY000 (ER_ERROR_ON_CLOSE)\",\"消息：关闭'%s'时出错 (errno: %d)\",\"· 错误：1024 SQLSTATE: HY000 (ER_ERROR_ON_READ)\",\"消息：读取文件'%s'时出错 (errno: %d)\",\"· 错误：1025 SQLSTATE: HY000 (ER_ERROR_ON_RENAME)\",\"消息：将'%s'重命名为'%s'时出错 (errno: %d)\",\"· 错误：1026 SQLSTATE: HY000 (ER_ERROR_ON_WRITE)\",\"消息：写入文件'%s'时出错 (errno: %d)\",\"· 错误：1027 SQLSTATE: HY000 (ER_FILE_USED)\",\"消息：'%s'已锁定，拒绝更改。\",\"· 错误：1028 SQLSTATE: HY000 (ER_FILSORT_ABORT)\",\"消息：分类失败\",\"· 错误：1029 SQLSTATE: HY000 (ER_FORM_NOT_FOUND)\",\"消息：对于'%s'，视图'%s'不存在。\",\"· 错误：1030 SQLSTATE: HY000 (ER_GET_ERRNO)\",\"消息：从存储引擎中获得错误%d。\",\"· 错误：1031 SQLSTATE: HY000 (ER_ILLEGAL_HA)\",\"消息：关于'%s'的表存储引擎不含该选项。\",\"· 错误：1032 SQLSTATE: HY000 (ER_KEY_NOT_FOUND)\",\"消息：无法在'%s'中找到记录。\",\"· 错误：1033 SQLSTATE: HY000 (ER_NOT_FORM_FILE)\",\"消息：文件中的不正确信息：'%s'\",\"· 错误：1034 SQLSTATE: HY000 (ER_NOT_KEYFILE)\",\"消息：对于表'%s'， 键文件不正确，请尝试修复。\",\"· 错误：1035 SQLSTATE: HY000 (ER_OLD_KEYFILE)\",\"消息：旧的键文件，对于表'%s'，请修复之！\",\"· 错误：1036 SQLSTATE: HY000 (ER_OPEN_AS_READONLY)\",\"消息：表'%s'是只读的。\",\"· 错误：1037 SQLSTATE: HY001 (ER_OUTOFMEMORY)\",\"消息：内存溢出，重启服务器并再次尝试（需要%d字节）。\",\"· 错误：1038 SQLSTATE: HY001 (ER_OUT_OF_SORTMEMORY)\",\"消息：分类内存溢出，增加服务器的分类缓冲区大小。\",\"· 错误：1039 SQLSTATE: HY000 (ER_UNEXPECTED_EOF)\",\"消息：读取文件'%s'时出现意外EOF (errno: %d)\",\"· 错误：1040 SQLSTATE: 08004 (ER_CON_COUNT_ERROR)\",\"消息：连接过多。\",\"· 错误：1041 SQLSTATE: HY000 (ER_OUT_OF_RESOURCES)\",\"消息：内存溢出，请检查是否mysqld或其他进程使用了所有可用内存，如不然，或许应使用'ulimit'允许mysqld使用更多内存，或增加交换空间的大小。\",\"· 错误：1042 SQLSTATE: 08S01 (ER_BAD_HOST_ERROR)\",\"消息：无法获得该地址给出的主机名。\",\"· 错误：1043 SQLSTATE: 08S01 (ER_HANDSHAKE_ERROR)\",\"消息：不良握手\",\"· 错误：1044 SQLSTATE: 42000 (ER_DBACCESS_DENIED_ERROR)\",\"消息：拒绝用户'%s'@'%s'访问数据库'%s'。\",\"· 错误：1045 SQLSTATE: 28000 (ER_ACCESS_DENIED_ERROR)\",\"消息：拒绝用户'%s'@'%s'的访问（使用密码：%s）\",\"· 错误：1046 SQLSTATE: 3D000 (ER_NO_DB_ERROR)\",\"消息：未选择数据库。\",\"· 错误：1047 SQLSTATE: 08S01 (ER_UNKNOWN_COM_ERROR)\",\"消息：未知命令。\",\"· 错误：1048 SQLSTATE: 23000 (ER_BAD_NULL_ERROR)\",\"消息：列'%s'不能为空。\",\"· 错误：1049 SQLSTATE: 42000 (ER_BAD_DB_ERROR)\",\"消息：未知数据库'%s'。\",\"· 错误：1050 SQLSTATE: 42S01 (ER_TABLE_EXISTS_ERROR)\",\"消息：表'%s'已存在。\",\"· 错误：1051 SQLSTATE: 42S02 (ER_BAD_TABLE_ERROR)\",\"消息：未知表'%s'。\",\"· 错误：1052 SQLSTATE: 23000 (ER_NON_UNIQ_ERROR)\",\"消息：%s中的列'%s'不明确。\",\"· 错误：1053 SQLSTATE: 08S01 (ER_SERVER_SHUTDOWN)\",\"消息：在操作过程中服务器关闭。\",\"· 错误：1054 SQLSTATE: 42S22 (ER_BAD_FIELD_ERROR)\",\"消息：'%s'中的未知列'%s'。\",\"· 错误：1055 SQLSTATE: 42000 (ER_WRONG_FIELD_WITH_GROUP)\",\"消息：'%s'不在GROUP BY中。\",\"· 错误：1056 SQLSTATE: 42000 (ER_WRONG_GROUP_FIELD)\",\"消息：无法在'%s'上创建组。\",\"· 错误：1057 SQLSTATE: 42000 (ER_WRONG_SUM_SELECT)\",\"消息：语句中有sum函数和相同语句中的列。\",\"· 错误：1058 SQLSTATE: 21S01 (ER_WRONG_VALUE_COUNT)\",\"消息：列计数不匹配值计数。\",\"· 错误：1059 SQLSTATE: 42000 (ER_TOO_LONG_IDENT)\",\"消息：ID名称'%s'过长。\",\"· 错误：1060 SQLSTATE: 42S21 (ER_DUP_FIELDNAME)\",\"消息：重复列名'%s'。\",\"· 错误：1061 SQLSTATE: 42000 (ER_DUP_KEYNAME)\",\"消息：重复键名称'%s'。\",\"· 错误：1062 SQLSTATE: 23000 (ER_DUP_ENTRY)\",\"消息：键%d的重复条目'%s'。\",\"· 错误：1063 SQLSTATE: 42000 (ER_WRONG_FIELD_SPEC)\",\"消息：对于列'%s'，列分类符不正确。\",\"· 错误：1064 SQLSTATE: 42000 (ER_PARSE_ERROR)\",\"消息：在行%d上，%s靠近'%s'。\",\"· 错误：1065 SQLSTATE: 42000 (ER_EMPTY_QUERY)\",\"消息：查询为空。\",\"· 错误：1066 SQLSTATE: 42000 (ER_NONUNIQ_TABLE)\",\"消息：非唯一的表/别名：'%s'\",\"· 错误：1067 SQLSTATE: 42000 (ER_INVALID_DEFAULT)\",\"消息：关于'%s'的无效默认值。\",\"· 错误：1068 SQLSTATE: 42000 (ER_MULTIPLE_PRI_KEY)\",\"消息：定义了多个主键。\",\"· 错误：1069 SQLSTATE: 42000 (ER_TOO_MANY_KEYS)\",\"消息：指定了过多键：允许的最大键数是%d。\",\"· 错误：1070 SQLSTATE: 42000 (ER_TOO_MANY_KEY_PARTS)\",\"消息：指定了过多键部分：允许的最大键部分是%d。\",\"· 错误：1071 SQLSTATE: 42000 (ER_TOO_LONG_KEY)\",\"消息：指定的键过长，最大键长度是%d字节。\",\"· 错误：1072 SQLSTATE: 42000 (ER_KEY_COLUMN_DOES_NOT_EXITS)\",\"消息：键列'%s'在表中不存在。\",\"· 错误：1073 SQLSTATE: 42000 (ER_BLOB_USED_AS_KEY)\",\"消息：BLOB列'%s'不能与已使用的表类型用在 键说明中。\",\"· 错误：1074 SQLSTATE: 42000 (ER_TOO_BIG_FIELDLENGTH)\",\"消息：对于列'%s'，列长度过大 (max = %d)，请使用BLOB或TEXT取而代之。\",\"· 错误：1075 SQLSTATE: 42000 (ER_WRONG_AUTO_KEY)\",\"消息：不正确的表定义，只能有1个auto列，而且必须将其定义为 键。\",\"· 错误：1076 SQLSTATE: HY000 (ER_READY)\",\"消息：%s，连接就绪。版本：'%s'，套接字：'%s'，端口：%d\",\"· 错误：1077 SQLSTATE: HY000 (ER_NORMAL_SHUTDOWN)\",\"消息：%s，正常关闭。\",\"· 错误：1078 SQLSTATE: HY000 (ER_GOT_SIGNAL)\",\"消息：%s，获得信号%d。放弃！\",\"· 错误：1079 SQLSTATE: HY000 (ER_SHUTDOWN_COMPLETE)\",\"消息：%s，关闭完成\",\"· 错误：1080 SQLSTATE: 08S01 (ER_FORCING_CLOSE)\",\"消息：%s，强制关闭线程%ld，用户：'%s'\",\"· 错误：1081 SQLSTATE: 08S01 (ER_IPSOCK_ERROR)\",\"消息：无法创建IP套接字\",\"· 错误：1082 SQLSTATE: 42S12 (ER_NO_SUCH_INDEX)\",\"消息：表'%s'中没有与CREATE INDEX中索引类似的索引，重新创建表。\",\"· 错误：1083 SQLSTATE: 42000 (ER_WRONG_FIELD_TERMINATORS)\",\"消息：字段分隔符参量不是预期的，请参考手册。\",\"· 错误：1084 SQLSTATE: 42000 (ER_BLOBS_AND_NO_TERMINATED)\",\"消息：不能与BLOB一起使用固定行长度，请使用'fields terminated by'。\",\"· 错误：1085 SQLSTATE: HY000 (ER_TEXTFILE_NOT_READABLE)\",\"消息：文件'%s'必须在数据库目录下，或能被所有人读取。\",\"· 错误：1086 SQLSTATE: HY000 (ER_FILE_EXISTS_ERROR)\",\"消息：文件'%s'已存在。\",\"· 错误：1087 SQLSTATE: HY000 (ER_LOAD_INFO)\",\"消息：记录，%ld；已删除，%ld；已跳过，%ld；警告，%ld\",\"· 错误：1088 SQLSTATE: HY000 (ER_ALTER_INFO)\",\"消息：记录，%ld；重复，%ld\",\"· 错误：1089 SQLSTATE: HY000 (ER_WRONG_SUB_KEY)\",\"消息：不正确的子部分键，使用的键部分不是字符串，所用的长度长于键部分，或存储引擎不支持唯一子键。\",\"· 错误：1090 SQLSTATE: 42000 (ER_CANT_REMOVE_ALL_FIELDS)\",\"消息：不能用ALTER TABLE删除所有列，请使用DROP TABLE取而代之。\",\"· 错误：1091 SQLSTATE: 42000 (ER_CANT_DROP_FIELD_OR_KEY)\",\"消息：不能撤销'%s'，请检查列/键是否存在。\",\"· 错误：1092 SQLSTATE: HY000 (ER_INSERT_INFO)\",\"消息：记录，%ld；复制，%ld；告警，%ld\",\"· 错误：1093 SQLSTATE: HY000 (ER_UPDATE_TABLE_USED)\",\"消息：不能在FROM子句中制定要更新的目标表'%s'。\",\"· 错误：1094 SQLSTATE: HY000 (ER_NO_SUCH_THREAD)\",\"消息：未知线程ID：%lu\",\"· 错误：1095 SQLSTATE: HY000 (ER_KILL_DENIED_ERROR)\",\"消息：你不是线程%lu的所有者。\",\"· 错误：1096 SQLSTATE: HY000 (ER_NO_TABLES_USED)\",\"消息：未使用任何表。\",\"· 错误：1097 SQLSTATE: HY000 (ER_TOO_BIG_SET)\",\"消息：列%s和SET的字符串过多。\",\"· 错误：1098 SQLSTATE: HY000 (ER_NO_UNIQUE_LOGFILE)\",\"消息：不能生成唯一的日志文件名%s.(1-999)\",\"· 错误：1099 SQLSTATE: HY000 (ER_TABLE_NOT_LOCKED_FOR_WRITE)\",\"消息：表'%s'已用READ锁定，不能更新。\",\"· 错误：1100 SQLSTATE: HY000 (ER_TABLE_NOT_LOCKED)\",\"消息：未使用LOCK TABLES锁定表'%s'。\",\"· 错误：1101 SQLSTATE: 42000 (ER_BLOB_CANT_HAVE_DEFAULT)\",\"消息：BLOB/TEXT列'%s'不能有默认值。\",\"· 错误：1102 SQLSTATE: 42000 (ER_WRONG_DB_NAME)\",\"消息：不正确的数据库名'%s'。\",\"· 错误：1103 SQLSTATE: 42000 (ER_WRONG_TABLE_NAME)\",\"消息：不正确的表名'%s'。\",\"· 错误：1104 SQLSTATE: 42000 (ER_TOO_BIG_SELECT)\",\"消息：SELECT将检查超过MAX_JOIN_SIZE的行，如果SELECT正常，请检查WHERE，并使用SET SQL_BIG_SELECTS=1或SET SQL_MAX_JOIN_SIZE=#。\",\"· 错误：1105 SQLSTATE: HY000 (ER_UNKNOWN_ERROR)\",\"消息：未知错误。\",\"· 错误：1106 SQLSTATE: 42000 (ER_UNKNOWN_PROCEDURE)\",\"消息：未知过程'%s'\",\"· 错误：1107 SQLSTATE: 42000 (ER_WRONG_PARAMCOUNT_TO_PROCEDURE)\",\"消息：对于过程'%s'，参数计数不正确\",\"· 错误：1108 SQLSTATE: HY000 (ER_WRONG_PARAMETERS_TO_PROCEDURE)\",\"消息：对于过程'%s'，参数不正确\",\"· 错误：1109 SQLSTATE: 42S02 (ER_UNKNOWN_TABLE)\",\"消息：%s中的未知表%s\",\"· 错误：1110 SQLSTATE: 42000 (ER_FIELD_SPECIFIED_TWICE)\",\"消息：列'%s'被指定了两次。\",\"· 错误：1111 SQLSTATE: HY000 (ER_INVALID_GROUP_FUNC_USE)\",\"消息：无效的分组函数使用\",\"· 错误：1112 SQLSTATE: 42000 (ER_UNSUPPORTED_EXTENSION)\",\"消息：表'%s'使用了该MySQL版本中不存在的扩展。\",\"· 错误：1113 SQLSTATE: 42000 (ER_TABLE_MUST_HAVE_COLUMNS)\",\"消息：1个表至少要有1列。\",\"· 错误：1114 SQLSTATE: HY000 (ER_RECORD_FILE_FULL)\",\"消息：表'%s'已满。\",\"· 错误：1115 SQLSTATE: 42000 (ER_UNKNOWN_CHARACTER_SET)\",\"消息：未知字符集'%s'。\",\"· 错误：1116 SQLSTATE: HY000 (ER_TOO_MANY_TABLES)\",\"消息：表过多，MySQL在1个联合操作中只能使用%d个表。\",\"· 错误：1117 SQLSTATE: HY000 (ER_TOO_MANY_FIELDS)\",\"消息：列过多。\",\"· 错误：1118 SQLSTATE: 42000 (ER_TOO_BIG_ROWSIZE)\",\"消息：行的大小过大。对于所使用的表类型，不包括BLOB，最大行大小为%ld。必须将某些列更改为TEXT或BLOB。\",\"· 错误：1119 SQLSTATE: HY000 (ER_STACK_OVERRUN)\",\"消息：线程堆栈溢出，已使用，%ld堆栈的%ld。如果需要，请使用'mysqld -O thread_stack=#'指定较大的堆栈。\",\"· 错误：1120 SQLSTATE: 42000 (ER_WRONG_OUTER_JOIN)\",\"消息：在OUTER JOIN中发现交叉关联，请检查ON条件。\",\"· 错误：1121 SQLSTATE: 42000 (ER_NULL_COLUMN_IN_INDEX)\",\"消息：列'%s'与UNIQUE或INDEX一起使用，但未定义为NOT NULL。\",\"· 错误：1122 SQLSTATE: HY000 (ER_CANT_FIND_UDF)\",\"消息：无法加载函数'%s'。\",\"· 错误：1123 SQLSTATE: HY000 (ER_CANT_INITIALIZE_UDF)\",\"消息：无法初始化函数'%s'; %s\",\"· 错误：1124 SQLSTATE: HY000 (ER_UDF_NO_PATHS)\",\"消息：对于共享库，不允许任何路径。\",\"· 错误：1125 SQLSTATE: HY000 (ER_UDF_EXISTS)\",\"消息：函数'%s'已存在。\",\"· 错误：1126 SQLSTATE: HY000 (ER_CANT_OPEN_LIBRARY)\",\"消息：不能打开共享库'%s' (errno: %d %s)\",\"· 错误：1127 SQLSTATE: HY000 (ER_CANT_FIND_DL_ENTRY)\",\"消息：不能发现库中的符号'%s'。\",\"· 错误：1128 SQLSTATE: HY000 (ER_FUNCTION_NOT_DEFINED)\",\"消息：函数'%s'未定义。\",\"· 错误：1129 SQLSTATE: HY000 (ER_HOST_IS_BLOCKED)\",\"消息：由于存在很多连接错误，主机'%s'被屏蔽，请用'mysqladmin flush-hosts'解除屏蔽。\",\"· 错误：1130 SQLSTATE: HY000 (ER_HOST_NOT_PRIVILEGED)\",\"消息：不允许将主机'%s'连接到该MySQL服务器。\",\"· 错误：1131 SQLSTATE: 42000 (ER_PASSWORD_ANONYMOUS_USER)\",\"消息：你正在已匿名用户身份使用MySQL，不允许匿名用户更改密码。\",\"· 错误：1132 SQLSTATE: 42000 (ER_PASSWORD_NOT_ALLOWED)\",\"消息：必须有更新mysql数据库中表的权限才能更改密码。\",\"· 错误：1133 SQLSTATE: 42000 (ER_PASSWORD_NO_MATCH)\",\"消息：无法在用户表中找到匹配行。\",\"· 错误：1134 SQLSTATE: HY000 (ER_UPDATE_INFO)\",\"消息：行匹配，%ld；已更改，%ld；警告，%ld\",\"· 错误：1135 SQLSTATE: HY000 (ER_CANT_CREATE_THREAD)\",\"消息：无法创建新线程(errno %d)，如果未出现内存溢出，请参阅手册以了解可能的与操作系统有关的缺陷。\",\"· 错误：1136 SQLSTATE: 21S01 (ER_WRONG_VALUE_COUNT_ON_ROW)\",\"消息：列计数不匹配行%ld上的值计数。\",\"· 错误：1137 SQLSTATE: HY000 (ER_CANT_REOPEN_TABLE)\",\"消息：无法再次打开表'%s'。\",\"· 错误：1138 SQLSTATE: 22004 (ER_INVALID_USE_OF_NULL)\",\"消息：NULL值使用无效。\",\"· 错误：1139 SQLSTATE: 42000 (ER_REGEXP_ERROR)\",\"消息：获得来自regexp的错误'%s'。\",\"· 错误：1140 SQLSTATE: 42000 (ER_MIX_OF_GROUP_FUNC_AND_FIELDS)\",\"消息：如果没有GROUP BY子句，GROUP列 (MIN(),MAX(),COUNT(),...)与非GROUP列的混合不合法。\",\"· 错误：1141 SQLSTATE: 42000 (ER_NONEXISTING_GRANT)\",\"消息：没有为主机'%s'上的用户'%s'定义这类授权。\",\"· 错误：1142 SQLSTATE: 42000 (ER_TABLEACCESS_DENIED_ERROR)\",\"消息：拒绝用户'%s'@'%s'在表'%s'上使用%s命令。\",\"· 错误：1143 SQLSTATE: 42000 (ER_COLUMNACCESS_DENIED_ERROR)\",\"消息：拒绝用户'%s'@'%s'在表'%s'的'%s'上使用%s命令。\",\"· 错误：1144 SQLSTATE: 42000 (ER_ILLEGAL_GRANT_FOR_TABLE)\",\"消息：非法GRANT/REVOKE命令，请参阅手册以了解可使用那种权限。\",\"· 错误：1145 SQLSTATE: 42000 (ER_GRANT_WRONG_HOST_OR_USER)\",\"消息：GRANT的主机或用户参量过长。\",\"· 错误：1146 SQLSTATE: 42S02 (ER_NO_SUCH_TABLE)\",\"消息：表'%s.%s'不存在。\",\"· 错误：1147 SQLSTATE: 42000 (ER_NONEXISTING_TABLE_GRANT)\",\"消息：在表'%s'上没有为主机'%s'上的用户'%s'定义的这类授权。\",\"· 错误：1148 SQLSTATE: 42000 (ER_NOT_ALLOWED_COMMAND)\",\"消息：所使用的命令在该MySQL版本中不允许。\",\"· 错误：1149 SQLSTATE: 42000 (ER_SYNTAX_ERROR)\",\"消息：存在SQL语法错误，请参阅与你的MySQL版本对应的手册，以了解正确的语法。\",\"· 错误：1150 SQLSTATE: HY000 (ER_DELAYED_CANT_CHANGE_LOCK)\",\"消息：对于表%s，延迟的插入线程不能获得请求的锁定。\",\"· 错误：1151 SQLSTATE: HY000 (ER_TOO_MANY_DELAYED_THREADS)\",\"消息：使用的延迟线程过多。\",\"· 错误：1152 SQLSTATE: 08S01 (ER_ABORTING_CONNECTION)\",\"消息：与数据库'%s'和用户'%s'的连接%ld失败 (%s)\",\"· 错误：1153 SQLSTATE: 08S01 (ER_NET_PACKET_TOO_LARGE)\",\"消息：获得信息包大于'max_allowed_packet'字节。\",\"· 错误：1154 SQLSTATE: 08S01 (ER_NET_READ_ERROR_FROM_PIPE)\",\"消息：获得来自连接管道的读错误。\",\"· 错误：1155 SQLSTATE: 08S01 (ER_NET_FCNTL_ERROR)\",\"消息：获得来自fcntl()的错误。\",\"· 错误：1156 SQLSTATE: 08S01 (ER_NET_PACKETS_OUT_OF_ORDER)\",\"消息：获得信息包无序。\",\"· 错误：1157 SQLSTATE: 08S01 (ER_NET_UNCOMPRESS_ERROR)\",\"消息：无法解压缩通信信息包。\",\"· 错误：1158 SQLSTATE: 08S01 (ER_NET_READ_ERROR)\",\"消息：读取通信信息包时出错。\",\"· 错误：1159 SQLSTATE: 08S01 (ER_NET_READ_INTERRUPTED)\",\"消息：读取通信信息包时出现超时。\",\"· 错误：1160 SQLSTATE: 08S01 (ER_NET_ERROR_ON_WRITE)\",\"消息：写入通信信息包时出错。\",\"· 错误：1161 SQLSTATE: 08S01 (ER_NET_WRITE_INTERRUPTED)\",\"消息：写入通信信息包时出现超时。\",\"· 错误：1162 SQLSTATE: 42000 (ER_TOO_LONG_STRING)\",\"消息：结果字符串长于'max_allowed_packet'字节。\",\"· 错误：1163 SQLSTATE: 42000 (ER_TABLE_CANT_HANDLE_BLOB)\",\"消息：所使用的表类型不支持BLOB/TEXT列。\",\"· 错误：1164 SQLSTATE: 42000 (ER_TABLE_CANT_HANDLE_AUTO_INCREMENT)\",\"消息：所使用的表类型不支持AUTO_INCREMENT列。\",\"· 错误：1165 SQLSTATE: HY000 (ER_DELAYED_INSERT_TABLE_LOCKED)\",\"消息：由于用LOCK TABLES锁定了表，INSERT DELAYED不能与表'%s'一起使用。\",\"· 错误：1166 SQLSTATE: 42000 (ER_WRONG_COLUMN_NAME)\",\"消息：不正确的列名'%s'。\",\"· 错误：1167 SQLSTATE: 42000 (ER_WRONG_KEY_COLUMN)\",\"消息：所使用的存储引擎不能为列'%s'编制索引。\",\"· 错误：1168 SQLSTATE: HY000 (ER_WRONG_MRG_TABLE)\",\"消息：MERGE表中的所有表未同等定义。\",\"· 错误：1169 SQLSTATE: 23000 (ER_DUP_UNIQUE)\",\"消息：由于唯一性限制，不能写入到表'%s'。\",\"· 错误：1170 SQLSTATE: 42000 (ER_BLOB_KEY_WITHOUT_LENGTH)\",\"消息：在未指定键长度的键说明中使用了BLOB/TEXT列'%s'。\",\"· 错误：1171 SQLSTATE: 42000 (ER_PRIMARY_CANT_HAVE_NULL)\",\"消息：PRIMARY KEY的所有部分必须是NOT NULL，如果需要为NULL的关键字，请使用UNIQUE取而代之。\",\"· 错误：1172 SQLSTATE: 42000 (ER_TOO_MANY_ROWS)\",\"消息：结果有1个以上的行组成。\",\"· 错误：1173 SQLSTATE: 42000 (ER_REQUIRES_PRIMARY_KEY)\",\"消息：该表类型要求主键。\",\"· 错误：1174 SQLSTATE: HY000 (ER_NO_RAID_COMPILED)\",\"消息：该MySQL版本是未使用RAID支持而编译的。\",\"· 错误：1175 SQLSTATE: HY000 (ER_UPDATE_WITHOUT_KEY_IN_SAFE_MODE)\",\"消息：你正在使用安全更新模式，而且试图在不使用WHERE的情况下更新使用了KEY列的表。\",\"· 错误：1176 SQLSTATE: HY000 (ER_KEY_DOES_NOT_EXITS)\",\"消息：在表'%s'中，键'%s'不存在。\",\"· 错误：1177 SQLSTATE: 42000 (ER_CHECK_NO_SUCH_TABLE)\",\"消息：无法打开表。\",\"· 错误：1178 SQLSTATE: 42000 (ER_CHECK_NOT_IMPLEMENTED)\",\"消息：用于表的引擎不支持%s。\",\"· 错误：1179 SQLSTATE: 25000 (ER_CANT_DO_THIS_DURING_AN_TRANSACTION)\",\"消息：不允许在事务中执行该命令。\",\"· 错误：1180 SQLSTATE: HY000 (ER_ERROR_DURING_COMMIT)\",\"消息：在COMMIT期间出现错误%d。\",\"· 错误：1181 SQLSTATE: HY000 (ER_ERROR_DURING_ROLLBACK)\",\"消息：在ROLLBACK期间出现错误%d。\",\"· 错误：1182 SQLSTATE: HY000 (ER_ERROR_DURING_FLUSH_LOGS)\",\"消息：在FLUSH_LOGS期间出现错误%d。\",\"· 错误：1183 SQLSTATE: HY000 (ER_ERROR_DURING_CHECKPOINT)\",\"消息：在CHECKPOINT期间出现错误%d。\",\"· 错误：1184 SQLSTATE: 08S01 (ER_NEW_ABORTING_CONNECTION)\",\"消息：与数据库'%s'、用户'%s'和主机'%s'的连接%ld失败 (%s)。\",\"· 错误：1185 SQLSTATE: HY000 (ER_DUMP_NOT_IMPLEMENTED)\",\"消息：针对表的存储引擎不支持二进制表转储。\",\"· 错误：1186 SQLSTATE: HY000 (ER_FLUSH_MASTER_BINLOG_CLOSED)\",\"消息：Binlog已关闭，不能RESET MASTER。\",\"· 错误：1187 SQLSTATE: HY000 (ER_INDEX_REBUILD)\",\"消息：重新创建转储表'%s'的索引失败。\",\"· 错误：1188 SQLSTATE: HY000 (ER_MASTER)\",\"消息：来自主连接'%s'的错误。\",\"· 错误：1189 SQLSTATE: 08S01 (ER_MASTER_NET_READ)\",\"消息：读取主连接时出现网络错误。\",\"· 错误：1190 SQLSTATE: 08S01 (ER_MASTER_NET_WRITE)\",\"消息：写入主连接时出现网络错误。\",\"· 错误：1191 SQLSTATE: HY000 (ER_FT_MATCHING_KEY_NOT_FOUND)\",\"消息：无法找到与列列表匹配的FULLTEXT索引。\",\"· 错误：1192 SQLSTATE: HY000 (ER_LOCK_OR_ACTIVE_TRANSACTION)\",\"消息：由于存在活动的锁定表或活动的事务，不能执行给定的命令。\",\"· 错误：1193 SQLSTATE: HY000 (ER_UNKNOWN_SYSTEM_VARIABLE)\",\"消息：未知的系统变量'%s'。\",\"· 错误：1194 SQLSTATE: HY000 (ER_CRASHED_ON_USAGE)\",\"消息：表'%s'被标记为崩溃，应予以修复。\",\"· 错误：1195 SQLSTATE: HY000 (ER_CRASHED_ON_REPAIR)\",\"消息：表'%s'被标记为崩溃，而且上次修复失败（自动？）\",\"· 错误：1196 SQLSTATE: HY000 (ER_WARNING_NOT_COMPLETE_ROLLBACK)\",\"消息：不能回滚某些非事务性已变动表。\",\"· 错误：1197 SQLSTATE: HY000 (ER_TRANS_CACHE_FULL)\",\"消息：多语句事务要求更多的'max_binlog_cache_size'存储字节，增大mysqld变量，并再次尝试。\",\"· 错误：1198 SQLSTATE: HY000 (ER_SLAVE_MUST_STOP)\",\"消息：运行从实例时不能执行该操作，请首先运行STOP SLAVE。\",\"· 错误：1199 SQLSTATE: HY000 (ER_SLAVE_NOT_RUNNING)\",\"消息：该操作需要运行的从实例，请配置SLAVE并执行START SLAVE。\",\"· 错误：1200 SQLSTATE: HY000 (ER_BAD_SLAVE)\",\"消息：服务器未配置为从服务器，请更正config文件，或使用CHANGE MASTER TO。\",\"· 错误：1201 SQLSTATE: HY000 (ER_MASTER_INFO)\",\"消息：无法初始化主服务器信息结构，在MySQL错误日志中可找到更多错误消息。\",\"· 错误：1202 SQLSTATE: HY000 (ER_SLAVE_THREAD)\",\"消息：无法创建从线程，请检查系统资源。\",\"· 错误：1203 SQLSTATE: 42000 (ER_TOO_MANY_USER_CONNECTIONS)\",\"消息：用户%s已有了超过'max_user_connections'的活动连接。\",\"· 错误：1204 SQLSTATE: HY000 (ER_SET_CONSTANTS_ONLY)\",\"消息：或许仅应与SET一起使用常量表达式。\",\"· 错误：1205 SQLSTATE: HY000 (ER_LOCK_WAIT_TIMEOUT)\",\"消息：超过了锁定等待超时，请尝试重新启动事务。\",\"· 错误：1206 SQLSTATE: HY000 (ER_LOCK_TABLE_FULL)\",\"消息：总的锁定数超出了锁定表的大小。\",\"· 错误：1207 SQLSTATE: 25000 (ER_READ_ONLY_TRANSACTION)\",\"消息：在READ UNCOMMITTED事务期间，无法获得更新锁定。\",\"· 错误：1208 SQLSTATE: HY000 (ER_DROP_DB_WITH_READ_LOCK)\",\"消息：当线程保持为全局读锁定时，不允许DROP DATABASE。\",\"· 错误：1209 SQLSTATE: HY000 (ER_CREATE_DB_WITH_READ_LOCK)\",\"消息：当线程保持为全局读锁定时，不允许CREATE DATABASE。\",\"· 错误：1210 SQLSTATE: HY000 (ER_WRONG_ARGUMENTS)\",\"消息：为%s提供的参量不正确。\",\"· 错误：1211 SQLSTATE: 42000 (ER_NO_PERMISSION_TO_CREATE_USER)\",\"消息：不允许'%s'@'%s'创建新用户。\",\"· 错误：1212 SQLSTATE: HY000 (ER_UNION_TABLES_IN_DIFFERENT_DIR)\",\"消息：不正确的表定义，所有的MERGE表必须位于相同的数据库中。\",\"· 错误：1213 SQLSTATE: 40001 (ER_LOCK_DEADLOCK)\",\"消息：试图获取锁定时发现死锁，请尝试重新启动事务。\",\"· 错误：1214 SQLSTATE: HY000 (ER_TABLE_CANT_HANDLE_FT)\",\"消息：所使用的表类型不支持FULLTEXT索引。\",\"· 错误：1215 SQLSTATE: HY000 (ER_CANNOT_ADD_FOREIGN)\",\"消息：无法添加外键约束。\",\"· 错误：1216 SQLSTATE: 23000 (ER_NO_REFERENCED_ROW)\",\"消息：无法添加或更新子行，外键约束失败。\",\"· 错误：1217 SQLSTATE: 23000 (ER_ROW_IS_REFERENCED)\",\"消息：无法删除或更新父行，外键约束失败。\",\"· 错误：1218 SQLSTATE: 08S01 (ER_CONNECT_TO_MASTER)\",\"消息：连接至主服务器%s时出错。\",\"· 错误：1219 SQLSTATE: HY000 (ER_QUERY_ON_MASTER)\",\"消息：在主服务器%s上执行查询时出错。\",\"· 错误：1220 SQLSTATE: HY000 (ER_ERROR_WHEN_EXECUTING_COMMAND)\",\"消息：执行命令%s: %s时出错。\",\"· 错误：1221 SQLSTATE: HY000 (ER_WRONG_USAGE)\",\"消息：%s和%s的用法不正确。\",\"· 错误：1222 SQLSTATE: 21000 (ER_WRONG_NUMBER_OF_COLUMNS_IN_SELECT)\",\"消息：所使用的SELECT语句有不同的列数。\",\"· 错误：1223 SQLSTATE: HY000 (ER_CANT_UPDATE_WITH_READLOCK)\",\"消息：由于存在冲突的读锁定，无法执行查询。\",\"· 错误：1224 SQLSTATE: HY000 (ER_MIXING_NOT_ALLOWED)\",\"消息：禁止混合事务性表和非事务性表。\",\"· 错误：1225 SQLSTATE: HY000 (ER_DUP_ARGUMENT)\",\"消息：在语句中使用了两次选项'%s'。\",\"· 错误：1226 SQLSTATE: 42000 (ER_USER_LIMIT_REACHED)\",\"消息：用户'%s'超出了'%s'资源（当前值：%ld）。\",\"· 错误：1227 SQLSTATE: 42000 (ER_SPECIFIC_ACCESS_DENIED_ERROR)\",\"消息：拒绝访问，需要%s权限才能执行该操作。\",\"· 错误：1228 SQLSTATE: HY000 (ER_LOCAL_VARIABLE)\",\"消息：变量'%s'是1种SESSION变量，不能与SET GLOBAL一起使用。\",\"· 错误：1229 SQLSTATE: HY000 (ER_GLOBAL_VARIABLE)\",\"消息：变量'%s'是1种GLOBAL变量，应使用SET GLOBAL来设置它。\",\"· 错误：1230 SQLSTATE: 42000 (ER_NO_DEFAULT)\",\"消息：变量'%s'没有默认值。\",\"· 错误：1231 SQLSTATE: 42000 (ER_WRONG_VALUE_FOR_VAR)\",\"消息：变量'%s'不能设置为值'%s'。\",\"· 错误：1232 SQLSTATE: 42000 (ER_WRONG_TYPE_FOR_VAR)\",\"消息：变量'%s'的参量类型不正确。\",\"· 错误：1233 SQLSTATE: HY000 (ER_VAR_CANT_BE_READ)\",\"消息：变量'%s'只能被设置，不能被读取。\",\"· 错误：1234 SQLSTATE: 42000 (ER_CANT_USE_OPTION_HERE)\",\"消息：不正确的'%s'用法/位置。\",\"· 错误：1235 SQLSTATE: 42000 (ER_NOT_SUPPORTED_YET)\",\"消息：该MySQL版本尚不支持'%s'。\",\"· 错误：1236 SQLSTATE: HY000 (ER_MASTER_FATAL_ERROR_READING_BINLOG)\",\"消息：从二进制日志读取数据时，获得来自主服务器的致命错误%d: '%s'。\",\"· 错误：1237 SQLSTATE: HY000 (ER_SLAVE_IGNORED_TABLE)\",\"消息：由于“replicate-*-table”规则，从SQL线程忽略了查询。。\",\"· 错误：1238 SQLSTATE: HY000 (ER_INCORRECT_GLOBAL_LOCAL_VAR)\",\"消息：变量'%s'是一种%s变量。\",\"· 错误：1239 SQLSTATE: 42000 (ER_WRONG_FK_DEF)\",\"消息：对于 '%s': %s， 外键定义不正确。\",\"· 错误：1240 SQLSTATE: HY000 (ER_KEY_REF_DO_NOT_MATCH_TABLE_REF)\",\"消息：键引用和表引用不匹配。\",\"· 错误：1241 SQLSTATE: 21000 (ER_OPERAND_COLUMNS)\",\"消息：操作数应包含%d列。\",\"· 错误：1242 SQLSTATE: 21000 (ER_SUBQUERY_NO_1_ROW)\",\"消息：子查询返回1行以上。\",\"· 错误：1243 SQLSTATE: HY000 (ER_UNKNOWN_STMT_HANDLER)\",\"消息：指定给%s的未知预处理语句句柄。\",\"· 错误：1244 SQLSTATE: HY000 (ER_CORRUPT_HELP_DB)\",\"消息：帮助数据库崩溃或不存在。\",\"· 错误：1245 SQLSTATE: HY000 (ER_CYCLIC_REFERENCE)\",\"消息：对子查询的循环引用。\",\"· 错误：1246 SQLSTATE: HY000 (ER_AUTO_CONVERT)\",\"消息：将列'%s'从%s转换为%s。\",\"· 错误：1247 SQLSTATE: 42S22 (ER_ILLEGAL_REFERENCE)\",\"消息：引用'%s'不被支持 (%s)。\",\"· 错误：1248 SQLSTATE: 42000 (ER_DERIVED_MUST_HAVE_ALIAS)\",\"消息：所有的导出表必须有自己的别名。\",\"· 错误：1249 SQLSTATE: 01000 (ER_SELECT_REDUCED)\",\"消息：在优化期间简化了选择%u。\",\"· 错误：1250 SQLSTATE: 42000 (ER_TABLENAME_NOT_ALLOWED_HERE)\",\"消息：来自某一SELECT的表'%s'不能在%s中使用。\",\"· 错误：1251 SQLSTATE: 08004 (ER_NOT_SUPPORTED_AUTH_MODE)\",\"消息：客户端不支持服务器请求的鉴定协议，请考虑升级MySQL客户端。\",\"· 错误：1252 SQLSTATE: 42000 (ER_SPATIAL_CANT_HAVE_NULL)\",\"消息：SPATIAL索引的所有部分必须是NOT NULL。\",\"· 错误：1253 SQLSTATE: 42000 (ER_COLLATION_CHARSET_MISMATCH)\",\"消息：对于CHARACTER SET '%s'，COLLATION '%s'无效。\",\"· 错误：1254 SQLSTATE: HY000 (ER_SLAVE_WAS_RUNNING)\",\"消息：从服务器正在运行。\",\"· 错误：1255 SQLSTATE: HY000 (ER_SLAVE_WAS_NOT_RUNNING)\",\"消息：从服务器已停止。\",\"· 错误：1256 SQLSTATE: HY000 (ER_TOO_BIG_FOR_UNCOMPRESS)\",\"消息：解压的数据过大，最大大小为%d（也可能是，解压数据的长度已损坏）。\",\"· 错误：1257 SQLSTATE: HY000 (ER_ZLIB_Z_MEM_ERROR)\",\"消息：ZLIB，无足够内存。\",\"· 错误：1258 SQLSTATE: HY000 (ER_ZLIB_Z_BUF_ERROR)\",\"消息：ZLIB，输出缓冲区内无足够空间（也可能是，解压数据的长度已损坏）。\",\"· 错误：1259 SQLSTATE: HY000 (ER_ZLIB_Z_DATA_ERROR)\",\"消息：ZLIB，输入数据已损坏。\",\"· 错误：1260 SQLSTATE: HY000 (ER_CUT_VALUE_GROUP_CONCAT)\",\"消息：%d行被GROUP_CONCAT()截去。\",\"· 错误：1261 SQLSTATE: 01000 (ER_WARN_TOO_FEW_RECORDS)\",\"消息：行%ld不包含所有列的数据。\",\"· 错误：1262 SQLSTATE: 01000 (ER_WARN_TOO_MANY_RECORDS)\",\"消息：行%ld被解短，它包含的数据大于输入列中的数据。\",\"· 错误：1263 SQLSTATE: 22004 (ER_WARN_NULL_TO_NOTNULL)\",\"消息：列被设为默认值，在行%ld上将NULL提供给了NOT NULL列。\",\"· 错误：1264 SQLSTATE: 22003 (ER_WARN_DATA_OUT_OF_RANGE)\",\"消息：为行%ld上的列'%s'调整超出范围的值。\",\"· 错误：1265 SQLSTATE: 01000 (WARN_DATA_TRUNCATED)\",\"消息：为行%ld上的列'%s'截短数据。\",\"· 错误：1266 SQLSTATE: HY000 (ER_WARN_USING_OTHER_HANDLER)\",\"消息：为表%s使用存储引擎%s。\",\"· 错误：1267 SQLSTATE: HY000 (ER_CANT_AGGREGATE_2COLLATIONS)\",\"消息：对于操作'%s'，非法混合了校对(%s,%s)和(%s,%s)。\",\"· 错误：1268 SQLSTATE: HY000 (ER_DROP_USER)\",\"消息：无法撤销1个或多个请求的用户。\",\"· 错误：1269 SQLSTATE: HY000 (ER_REVOKE_GRANTS)\",\"消息：无法撤销所有权限，为1个或多个请求的用户授权。\",\"· 错误：1270 SQLSTATE: HY000 (ER_CANT_AGGREGATE_3COLLATIONS)\",\"消息：对于操作'%s'，非法混合了校对(%s,%s)、(%s,%s)和(%s,%s)。\",\"· 错误：1271 SQLSTATE: HY000 (ER_CANT_AGGREGATE_NCOLLATIONS)\",\"消息：对于操作'%s'，非法混合了校对。\",\"· 错误：1272 SQLSTATE: HY000 (ER_VARIABLE_IS_NOT_STRUCT)\",\"消息：变量'%s'不是变量组分（不能用作XXXX.variable_name）。\",\"· 错误：1273 SQLSTATE: HY000 (ER_UNKNOWN_COLLATION)\",\"消息：未知校对'%s'。\",\"· 错误：1274 SQLSTATE: HY000 (ER_SLAVE_IGNORED_SSL_PARAMS)\",\"消息：由于该MySQL从服务器是在不支持SSL的情况下编译的，CHANGE MASTER中的SSL参数被忽略，随后，如果启动了具备SSL功能的MySQL，可使用这些参数。\",\"· 错误：1275 SQLSTATE: HY000 (ER_SERVER_IS_IN_SECURE_AUTH_MODE)\",\"消息：服务器正运行在“--secure-auth”模式下，但'%s'@'%s'有1个采用旧格式的密码，请将密码更改为新格式。\",\"· 错误：1276 SQLSTATE: HY000 (ER_WARN_FIELD_RESOLVED)\",\"消息：SELECT #%d的字段或引用'%s%s%s%s%s'是在SELECT #%d中确定的。\",\"· 错误：1277 SQLSTATE: HY000 (ER_BAD_SLAVE_UNTIL_COND)\",\"消息：对于START SLAVE UNTIL，不正确的参数或参数组合。\",\"· 错误：1278 SQLSTATE: HY000 (ER_MISSING_SKIP_SLAVE)\",\"消息：与START SLAVE UNTIL一起执行按步复制时，建议使用“--skip-slave-start”，否则，如果发生未预料的从服务器mysqld重启，间出现问题。\",\"· 错误：1279 SQLSTATE: HY000 (ER_UNTIL_COND_IGNORED)\",\"消息：SQL线程未启动，因而UNTIL选项被忽略。\",\"· 错误：1280 SQLSTATE: 42000 (ER_WRONG_NAME_FOR_INDEX)\",\"消息：不正确的索引名'%s'。\",\"· 错误：1281 SQLSTATE: 42000 (ER_WRONG_NAME_FOR_CATALOG)\",\"消息：不正确的目录名'%s'。\",\"· 错误：1282 SQLSTATE: HY000 (ER_WARN_QC_RESIZE)\",\"消息：查询高速缓冲设置大小%lu时失败，新的查询高速缓冲的大小是%lu。\",\"· 错误：1283 SQLSTATE: HY000 (ER_BAD_FT_COLUMN)\",\"消息：列'%s'不能是FULLTEXT索引的一部分。\",\"· 错误：1284 SQLSTATE: HY000 (ER_UNKNOWN_KEY_CACHE)\",\"消息：未知的键高速缓冲'%s'。\",\"· 错误：1285 SQLSTATE: HY000 (ER_WARN_HOSTNAME_WONT_WORK)\",\"消息：MySQL是在“--skip-name-resolve”模式下启动的，必须在不使用该开关的情况下重启它，以便该授权能起作用。\",\"· 错误：1286 SQLSTATE: 42000 (ER_UNKNOWN_STORAGE_ENGINE)\",\"消息：未知的表引擎'%s'。\",\"· 错误：1287 SQLSTATE: HY000 (ER_WARN_DEPRECATED_SYNTAX)\",\"消息：'%s'已过时，请使用'%s'取而代之。\",\"· 错误：1288 SQLSTATE: HY000 (ER_NON_UPDATABLE_TABLE)\",\"消息：%s的目标表%s不可更新。\",\"· 错误：1289 SQLSTATE: HY000 (ER_FEATURE_DISABLED)\",\"消息：'%s'特性已被禁止，要想使其工作，需要用'%s'创建MySQL。\",\"· 错误：1290 SQLSTATE: HY000 (ER_OPTION_PREVENTS_STATEMENT)\",\"消息：MySQL正使用%s选项运行，因此不能执行该语句。\",\"· 错误：1291 SQLSTATE: HY000 (ER_DUPLICATED_VALUE_IN_TYPE)\",\"消息：列'%s'在%s中有重复值'%s'。\",\"· 错误：1292 SQLSTATE: 22007 (ER_TRUNCATED_WRONG_VALUE)\",\"消息：截短了不正确的%s值: '%s'\",\"· 错误：1293 SQLSTATE: HY000 (ER_TOO_MUCH_AUTO_TIMESTAMP_COLS)\",\"消息：不正确的表定义，在DEFAULT或ON UPDATE子句中，对于CURRENT_TIMESTAMP，只能有一个TIMESTAMP列。\",\"· 错误：1294 SQLSTATE: HY000 (ER_INVALID_ON_UPDATE)\",\"消息：对于'%s'列，ON UPDATE子句无效。\",\"· 错误：1295 SQLSTATE: HY000 (ER_UNSUPPORTED_PS)\",\"消息：在预处理语句协议中，尚不支持该命令。\",\"· 错误：1296 SQLSTATE: HY000 (ER_GET_ERRMSG)\",\"消息：从%s获得错误%d '%s'。\",\"· 错误：1297 SQLSTATE: HY000 (ER_GET_TEMPORARY_ERRMSG)\",\"消息：从%s获得临时错误%d '%s'。\",\"· 错误：1298 SQLSTATE: HY000 (ER_UNKNOWN_TIME_ZONE)\",\"消息：未知或不正确的时区: '%s'\",\"· 错误：1299 SQLSTATE: HY000 (ER_WARN_INVALID_TIMESTAMP)\",\"消息：在行%ld的列'%s'中存在无效的TIMESTAMP值。\",\"· 错误：1300 SQLSTATE: HY000 (ER_INVALID_CHARACTER_STRING)\",\"消息：无效的%s字符串: '%s'\",\"· 错误：1301 SQLSTATE: HY000 (ER_WARN_ALLOWED_PACKET_OVERFLOWED)\",\"消息：%s()的结果大于max_allowed_packet (%ld)，已截短\",\"· 错误：1302 SQLSTATE: HY000 (ER_CONFLICTING_DECLARATIONS)\",\"消息：冲突声明：'%s%s'和'%s%s'\",\"· 错误：1303 SQLSTATE: 2F003 (ER_SP_NO_RECURSIVE_CREATE)\",\"消息：不能从另一个存储子程序中创建%s。\",\"· 错误：1304 SQLSTATE: 42000 (ER_SP_ALREADY_EXISTS)\",\"消息：%s %s已存在。\",\"· 错误：1305 SQLSTATE: 42000 (ER_SP_DOES_NOT_EXIST)\",\"消息：%s %s不存在。\",\"· 错误：1306 SQLSTATE: HY000 (ER_SP_DROP_FAILED)\",\"消息：DROP %s %s失败\",\"· 错误：1307 SQLSTATE: HY000 (ER_SP_STORE_FAILED)\",\"消息：CREATE %s %s失败。\",\"· 错误：1308 SQLSTATE: 42000 (ER_SP_LILABEL_MISMATCH)\",\"消息：%s无匹配标签: %s\",\"· 错误：1309 SQLSTATE: 42000 (ER_SP_LABEL_REDEFINE)\",\"消息：重新定义标签%s\",\"· 错误：1310 SQLSTATE: 42000 (ER_SP_LABEL_MISMATCH)\",\"消息：末端标签%s无匹配项\",\"· 错误：1311 SQLSTATE: 01000 (ER_SP_UNINIT_VAR)\",\"消息：正在引用未初始化的变量%s。\",\"· 错误：1312 SQLSTATE: 0A000 (ER_SP_BADSELECT)\",\"消息：PROCEDURE %s不能在给定场景下返回结果集。\",\"· 错误：1313 SQLSTATE: 42000 (ER_SP_BADRETURN)\",\"消息：仅在FUNCTION中允许RETURN。\",\"· 错误：1314 SQLSTATE: 0A000 (ER_SP_BADSTATEMENT)\",\"消息：在存储程序中不允许%s。\",\"· 错误：1315 SQLSTATE: 42000 (ER_UPDATE_LOG_DEPRECATED_IGNORED)\",\"消息：更新日志已被放弃，并用二进制日志取代，SET SQL_LOG_UPDATE被忽略。\",\"· 错误：1316 SQLSTATE: 42000 (ER_UPDATE_LOG_DEPRECATED_TRANSLATED)\",\"消息：更新日志已被放弃，并用二进制日志取代，SET SQL_LOG_UPDATE已被截短为SET SQL_LOG_BIN。\",\"· 错误：1317 SQLSTATE: 70100 (ER_QUERY_INTERRUPTED)\",\"消息：查询执行被中断。\",\"· 错误：1318 SQLSTATE: 42000 (ER_SP_WRONG_NO_OF_ARGS)\",\"消息：对于%s %s，参量数目不正确，预期为%u，但却是%u。\",\"· 错误：1319 SQLSTATE: 42000 (ER_SP_COND_MISMATCH)\",\"消息：未定义的CONDITION: %s\",\"· 错误：1320 SQLSTATE: 42000 (ER_SP_NORETURN)\",\"消息：在FUNCTION %s中未发现RETURN。\",\"· 错误：1321 SQLSTATE: 2F005 (ER_SP_NORETURNEND)\",\"消息：FUNCTION %s结束时缺少RETURN。\",\"· 错误：1322 SQLSTATE: 42000 (ER_SP_BAD_CURSOR_QUERY)\",\"消息：光标语句必须是SELECT。\",\"· 错误：1323 SQLSTATE: 42000 (ER_SP_BAD_CURSOR_SELECT)\",\"消息：光标SELECT不得有INTO。\",\"· 错误：1324 SQLSTATE: 42000 (ER_SP_CURSOR_MISMATCH)\",\"消息：未定义的CURSOR: %s\",\"· 错误：1325 SQLSTATE: 24000 (ER_SP_CURSOR_ALREADY_OPEN)\",\"消息：光标已打开\",\"· 错误：1326 SQLSTATE: 24000 (ER_SP_CURSOR_NOT_OPEN)\",\"消息：光标未打开\",\"· 错误：1327 SQLSTATE: 42000 (ER_SP_UNDECLARED_VAR)\",\"消息：未声明的变量：%s\",\"· 错误：1328 SQLSTATE: HY000 (ER_SP_WRONG_NO_OF_FETCH_ARGS)\",\"消息：不正确的FETCH变量数目。\",\"· 错误：1329 SQLSTATE: 02000 (ER_SP_FETCH_NO_DATA)\",\"消息：FETCH无数据。\",\"· 错误：1330 SQLSTATE: 42000 (ER_SP_DUP_PARAM)\",\"消息：重复参数: %s\",\"· 错误：1331 SQLSTATE: 42000 (ER_SP_DUP_VAR)\",\"消息：重复变量: %s\",\"· 错误：1332 SQLSTATE: 42000 (ER_SP_DUP_COND)\",\"消息：重复条件: %s\",\"· 错误：1333 SQLSTATE: 42000 (ER_SP_DUP_CURS)\",\"消息：重复光标: %s\",\"· 错误：1334 SQLSTATE: HY000 (ER_SP_CANT_ALTER)\",\"消息：ALTER %s %s失败。\",\"· 错误：1335 SQLSTATE: 0A000 (ER_SP_SUBSELECT_NYI)\",\"消息：不支持Subselect值。\",\"· 错误：1336 SQLSTATE: 0A000 (ER_STMT_NOT_ALLOWED_IN_SF_OR_TRG)\",\"消息：在存储函数或触发程序中，不允许%s。\",\"· 错误：1337 SQLSTATE: 42000 (ER_SP_VARCOND_AFTER_CURSHNDLR)\",\"消息：光标或句柄声明后面的变量或条件声明。\",\"· 错误：1338 SQLSTATE: 42000 (ER_SP_CURSOR_AFTER_HANDLER)\",\"消息：句柄声明后面的光标声明。\",\"· 错误：1339 SQLSTATE: 20000 (ER_SP_CASE_NOT_FOUND)\",\"消息：对于CASE语句，未发现Case。\",\"· 错误：1340 SQLSTATE: HY000 (ER_FPARSER_TOO_BIG_FILE)\",\"消息：配置文件'%s'过大。\",\"· 错误：1341 SQLSTATE: HY000 (ER_FPARSER_BAD_HEADER)\",\"消息：文件'%s'中存在残缺的文件类型标题。\",\"· 错误：1342 SQLSTATE: HY000 (ER_FPARSER_EOF_IN_COMMENT)\",\"消息：解析'%s'时，文件意外结束。\",\"· 错误：1343 SQLSTATE: HY000 (ER_FPARSER_ERROR_IN_PARAMETER)\",\"消息：解析参数'%s'时出错（行：'%s'）。\",\"· 错误：1344 SQLSTATE: HY000 (ER_FPARSER_EOF_IN_UNKNOWN_PARAMETER)\",\"消息：跳过未知参数'%s'时，文件意外结束。\",\"· 错误：1345 SQLSTATE: HY000 (ER_VIEW_NO_EXPLAIN)\",\"消息：EXPLAIN/SHOW无法发出，缺少对基本表的权限。\",\"· 错误：1346 SQLSTATE: HY000 (ER_FRM_UNKNOWN_TYPE)\",\"消息：文件'%s'在其题头中有未知的类型'%s'。\",\"· 错误：1347 SQLSTATE: HY000 (ER_WRONG_OBJECT)\",\"消息：'%s.%s'不是%s。\",\"· 错误：1348 SQLSTATE: HY000 (ER_NONUPDATEABLE_COLUMN)\",\"消息：列'%s'不可更新。\",\"· 错误：1349 SQLSTATE: HY000 (ER_VIEW_SELECT_DERIVED)\",\"消息：视图的SELECT在FROM子句中包含子查询。\",\"· 错误：1350 SQLSTATE: HY000 (ER_VIEW_SELECT_CLAUSE)\",\"消息：视图的SELECT包含'%s'子句。\",\"· 错误：1351 SQLSTATE: HY000 (ER_VIEW_SELECT_VARIABLE)\",\"消息：视图的SELECT包含1个变量或参数。\",\"· 错误：1352 SQLSTATE: HY000 (ER_VIEW_SELECT_TMPTABLE)\",\"消息：视图的SELECT引用了临时表'%s'。\",\"· 错误：1353 SQLSTATE: HY000 (ER_VIEW_WRONG_LIST)\",\"消息：视图的SELECT和视图的字段列表有不同的列计数。\",\"· 错误：1354 SQLSTATE: HY000 (ER_WARN_VIEW_MERGE)\",\"消息：此时，不能在这里使用视图合并算法（假定未定义算法）。\",\"· 错误：1355 SQLSTATE: HY000 (ER_WARN_VIEW_WITHOUT_KEY)\",\"消息：正在更新的视图没有其基本表的完整键。\",\"· 错误：1356 SQLSTATE: HY000 (ER_VIEW_INVALID)\",\"消息：视图'%s.%s'引用了无效的表、列、或函数，或视图的定义程序／调用程序缺少使用它们的权限。\",\"· 错误：1357 SQLSTATE: HY000 (ER_SP_NO_DROP_SP)\",\"消息：无法从另一个存储子程序中撤销或更改%s。\",\"· 错误：1358 SQLSTATE: HY000 (ER_SP_GOTO_IN_HNDLR)\",\"消息：在存储子程序句柄中不允许GOTO。\",\"· 错误：1359 SQLSTATE: HY000 (ER_TRG_ALREADY_EXISTS)\",\"消息：触发程序已存在。\",\"· 错误：1360 SQLSTATE: HY000 (ER_TRG_DOES_NOT_EXIST)\",\"消息：触发程序不存在。\",\"· 错误：1361 SQLSTATE: HY000 (ER_TRG_ON_VIEW_OR_TEMP_TABLE)\",\"消息：触发程序的'%s'是视图或临时表。\",\"· 错误：1362 SQLSTATE: HY000 (ER_TRG_CANT_CHANGE_ROW)\",\"消息：在%strigger中，不允许更新%s行。\",\"· 错误：1363 SQLSTATE: HY000 (ER_TRG_NO_SUCH_ROW_IN_TRG)\",\"消息：在%s触发程序中没有%s行。\",\"· 错误：1364 SQLSTATE: HY000 (ER_NO_DEFAULT_FOR_FIELD)\",\"消息：字段'%s'没有默认值。\",\"· 错误：1365 SQLSTATE: 22012 (ER_DIVISION_BY_ZERO)\",\"消息：被0除。\",\"· 错误：1366 SQLSTATE: HY000 (ER_TRUNCATED_WRONG_VALUE_FOR_FIELD)\",\"消息：不正确的%s值，'%s'，对于行%ld 上的列'%s'。\",\"· 错误：1367 SQLSTATE: 22007 (ER_ILLEGAL_VALUE_FOR_TYPE)\",\"消息：解析过程中发现非法%s '%s'值。\",\"· 错误：1368 SQLSTATE: HY000 (ER_VIEW_NONUPD_CHECK)\",\"消息：不可更新视图'%s.%s'上的CHECK OPTION。\",\"· 错误：1369 SQLSTATE: HY000 (ER_VIEW_CHECK_FAILED)\",\"消息：CHECK OPTION失败，'%s.%s'\",\"· 错误：1370 SQLSTATE: 42000 (ER_PROCACCESS_DENIED_ERROR)\",\"消息：对于子程序'%s'，拒绝用户'%s'@'%s'使用%s命令。\",\"· 错误：1371 SQLSTATE: HY000 (ER_RELAY_LOG_FAIL)\",\"消息：清除旧中继日志失败，%s\",\"· 错误：1372 SQLSTATE: HY000 (ER_PASSWD_LENGTH)\",\"消息：密码混编应是%d位的十六进制数。\",\"· 错误：1373 SQLSTATE: HY000 (ER_UNKNOWN_TARGET_BINLOG)\",\"消息：在binlog索引中未发现目标日志。\",\"· 错误：1374 SQLSTATE: HY000 (ER_IO_ERR_LOG_INDEX_READ)\",\"消息：读取日志索引文件时出现I/O错误。\",\"· 错误：1375 SQLSTATE: HY000 (ER_BINLOG_PURGE_PROHIBITED)\",\"消息：服务器配置不允许binlog清除。\",\"· 错误：1376 SQLSTATE: HY000 (ER_FSEEK_FAIL)\",\"消息：fseek()失败。\",\"· 错误：1377 SQLSTATE: HY000 (ER_BINLOG_PURGE_FATAL_ERR)\",\"消息：在日志清除过程中出现致命错误。\",\"· 错误：1378 SQLSTATE: HY000 (ER_LOG_IN_USE)\",\"消息：可清除的日志正在使用，不能清除。\",\"· 错误：1379 SQLSTATE: HY000 (ER_LOG_PURGE_UNKNOWN_ERR)\",\"消息：在日志清除过程中出现未知错误。\",\"· 错误：1380 SQLSTATE: HY000 (ER_RELAY_LOG_INIT)\",\"消息：初始化中继日志位置失败，%s\",\"· 错误：1381 SQLSTATE: HY000 (ER_NO_BINARY_LOGGING)\",\"消息：未使用二进制日志功能。\",\"· 错误：1382 SQLSTATE: HY000 (ER_RESERVED_SYNTAX)\",\"消息：'%s'语法保留给MySQL服务器内部使用。\",\"· 错误：1383 SQLSTATE: HY000 (ER_WSAS_FAILED)\",\"消息：WSAStartup失败。\",\"· 错误：1384 SQLSTATE: HY000 (ER_DIFF_GROUPS_PROC)\",\"消息：尚不能用不同的组处理过程。\",\"· 错误：1385 SQLSTATE: HY000 (ER_NO_GROUP_FOR_PROC)\",\"消息：对于该过程，SELECT必须有1个组。\",\"· 错误：1386 SQLSTATE: HY000 (ER_ORDER_WITH_PROC)\",\"消息：不能与该过程一起使用ORDER子句。\",\"· 错误：1387 SQLSTATE: HY000 (ER_LOGGING_PROHIBIT_CHANGING_OF)\",\"消息：二进制日志功能和复制功能禁止更改全局服务器%s。\",\"· 错误：1388 SQLSTATE: HY000 (ER_NO_FILE_MAPPING)\",\"消息：无法映射文件: %s, errno: %d\",\"· 错误：1389 SQLSTATE: HY000 (ER_WRONG_MAGIC)\",\"消息：%s中有错\",\"· 错误：1390 SQLSTATE: HY000 (ER_PS_MANY_PARAM)\",\"消息：预处理语句包含过多的占位符。\",\"· 错误：1391 SQLSTATE: HY000 (ER_KEY_PART_0)\",\"消息：键部分'%s'的长度不能为0。\",\"· 错误：1392 SQLSTATE: HY000 (ER_VIEW_CHECKSUM)\",\"消息：视图文本校验和失败。\",\"· 错误：1393 SQLSTATE: HY000 (ER_VIEW_MULTIUPDATE)\",\"消息：无法通过联合视图'%s.%s'更改1个以上的基本表。\",\"· 错误：1394 SQLSTATE: HY000 (ER_VIEW_NO_INSERT_FIELD_LIST)\",\"消息：不能在没有字段列表的情况下插入联合视图'%s.%s'。\",\"· 错误：1395 SQLSTATE: HY000 (ER_VIEW_DELETE_MERGE_VIEW)\",\"消息：不能从联合视图'%s.%s'中删除。\",\"· 错误：1396 SQLSTATE: HY000 (ER_CANNOT_USER)\",\"消息：对于%s的操作%s失败。\",\"· 错误：1397 SQLSTATE: XAE04 (ER_XAER_NOTA)\",\"消息：XAER_NOTA: 未知XID\",\"· 错误：1398 SQLSTATE: XAE05 (ER_XAER_INVAL)\",\"消息：XAER_INVAL: 无效参量（或不支持的命令）\",\"· 错误：1399 SQLSTATE: XAE07 (ER_XAER_RMFAIL)\",\"消息：XAER_RMFAIL: 当全局事务处于%s状态时，不能执行命令。\",\"· 错误：1400 SQLSTATE: XAE09 (ER_XAER_OUTSIDE)\",\"消息：XAER_OUTSIDE: 某些工作是在全局事务外完成的。\",\"· 错误：1401 SQLSTATE: XAE03 (ER_XAER_RMERR)\",\"消息：XAER_RMERR: 在事务分支中出现致命错误，请检查数据一致性。\",\"· 错误：1402 SQLSTATE: XA100 (ER_XA_RBROLLBACK)\",\"消息：XA_RBROLLBACK: 回滚了事务分支。\",\"· 错误：1403 SQLSTATE: 42000 (ER_NONEXISTING_PROC_GRANT)\",\"消息：在子程序'%s'上没有为主机'%s'上的用户'%s'定义的这类授权。\",\"· 错误：1404 SQLSTATE: HY000 (ER_PROC_AUTO_GRANT_FAIL)\",\"消息：无法授予EXECUTE和ALTER ROUTINE权限。\",\"· 错误：1405 SQLSTATE: HY000 (ER_PROC_AUTO_REVOKE_FAIL)\",\"消息：无法撤销已放弃子程序上的所有权限。\",\"· 错误：1406 SQLSTATE: 22001 (ER_DATA_TOO_LONG)\",\"消息：对于行%ld上的列'%s'来说，数据过长。\",\"· 错误：1407 SQLSTATE: 42000 (ER_SP_BAD_SQLSTATE)\",\"消息：不良SQLSTATE: '%s'\",\"· 错误：1408 SQLSTATE: HY000 (ER_STARTUP)\",\"消息：%s，连接就绪；版本，'%s'；套接字，'%s'；端口，%d %s\",\"· 错误：1409 SQLSTATE: HY000 (ER_LOAD_FROM_FIXED_SIZE_ROWS_TO_VAR)\",\"消息：不能从具有固定大小行的文件中将值加载到变量。\",\"· 错误：1410 SQLSTATE: 42000 (ER_CANT_CREATE_USER_WITH_GRANT)\",\"消息：不允许用GRANT创建用户。\",\"· 错误：1411 SQLSTATE: HY000 (ER_WRONG_VALUE_FOR_TYPE)\",\"消息：不正确的%s值，'%s'，对于函数%s\",\"· 错误：1412 SQLSTATE: HY000 (ER_TABLE_DEF_CHANGED)\",\"消息：表定义已更改，请再次尝试事务。\",\"· 错误：1413 SQLSTATE: 42000 (ER_SP_DUP_HANDLER)\",\"消息：在相同块中声明了重复句柄。\",\"· 错误：1414 SQLSTATE: 42000 (ER_SP_NOT_VAR_ARG)\",\"消息：子程序%s的OUT或INOUT参量不是变量。\",\"· 错误：1415 SQLSTATE: 0A000 (ER_SP_NO_RETSET)\",\"消息：不允许从%s返回结果集。\",\"· 错误：1416 SQLSTATE: 22003 (ER_CANT_CREATE_GEOMETRY_OBJECT)\",\"消息：不能从发送给GEOMETRY字段的数据中获取几何对象。\",\"· 错误：1417 SQLSTATE: HY000 (ER_FAILED_ROUTINE_BREAK_BINLOG)\",\"消息：1个子程序失败，在其声明没有NO SQL或READS SQL DATA，而且二进制日志功能已启用，如果更新了非事务性表，二进制日志将丢失其变化信息。\",\"· 错误：1418 SQLSTATE: HY000 (ER_BINLOG_UNSAFE_ROUTINE)\",\"消息：在该子程序的在其声明没有DETERMINISTIC、NO SQL或READS SQL DATA，而且二进制日志功能已启用（你或许打算使用不太安全的log_bin_trust_routine_creators变量）。\",\"· 错误：1419 SQLSTATE: HY000 (ER_BINLOG_CREATE_ROUTINE_NEED_SUPER)\",\"消息：你没有SUPER权限，而且二进制日志功能已启用（你或许打算使用不太安全的log_bin_trust_routine_creators变量）。\",\"· 错误：1420 SQLSTATE: HY000 (ER_EXEC_STMT_WITH_OPEN_CURSOR)\",\"消息：不能执行该预处理语句，该预处理语句有与之相关的打开光标。请复位语句并再次执行。\",\"· 错误：1421 SQLSTATE: HY000 (ER_STMT_HAS_NO_OPEN_CURSOR)\",\"消息：语句(%lu)没有打开的光标。\",\"· 错误：1422 SQLSTATE: HY000 (ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG)\",\"消息：在存储函数或触发程序中，不允许显式或隐式提交。\",\"· 错误：1423 SQLSTATE: HY000 (ER_NO_DEFAULT_FOR_VIEW_FIELD)\",\"消息：视图'%s.%s'基本表的字段没有默认值。\",\"· 错误：1424 SQLSTATE: HY000 (ER_SP_NO_RECURSION)\",\"消息：不允许递归存储子程序。\",\"· 错误：1425 SQLSTATE: 42000 (ER_TOO_BIG_SCALE)\",\"消息：为列'%s'指定了过大的标度%d。最大为%d。\",\"· 错误：1426 SQLSTATE: 42000 (ER_TOO_BIG_PRECISION)\",\"消息：为列'%s'指定了过高的精度%d。最大为%d。\",\"· 错误：1427 SQLSTATE: 42000 (ER_M_BIGGER_THAN_D)\",\"消息：对于float(M,D)、double(M,D)或decimal(M,D)，M必须>= D (列'%s')。\",\"· 错误：1428 SQLSTATE: HY000 (ER_WRONG_LOCK_OF_SYSTEM_TABLE)\",\"消息：不能将系统'%s.%s'表的写锁定与其他表结合起来。\",\"· 错误：1429 SQLSTATE: HY000 (ER_CONNECT_TO_FOREIGN_DATA_SOURCE)\",\"消息：无法连接到外部数据源，数据库'%s'！\",\"· 错误：1430 SQLSTATE: HY000 (ER_QUERY_ON_FOREIGN_DATA_SOURCE)\",\"消息：处理作用在外部数据源上的查询时出现问题。数据源错误：'%s'\",\"· 错误：1431 SQLSTATE: HY000 (ER_FOREIGN_DATA_SOURCE_DOESNT_EXIST)\",\"消息：你试图引用的外部数据源不存在。数据源错误：'%s'\",\"· 错误：1432 SQLSTATE: HY000 (ER_FOREIGN_DATA_STRING_INVALID_CANT_CREATE)\",\"消息：无法创建联合表。数据源连接字符串'%s'格式不正确。\",\"· 错误：1433 SQLSTATE: HY000 (ER_FOREIGN_DATA_STRING_INVALID)\",\"消息：数据源连接字符串'%s'格式不正确。\",\"· 错误：1434 SQLSTATE: HY000 (ER_CANT_CREATE_FEDERATED_TABLE)\",\"消息：无法创建联合表。外部数据源错误：'%s'\",\"· 错误：1435 SQLSTATE: HY000 (ER_TRG_IN_WRONG_SCHEMA)\",\"消息：触发程序位于错误的方案中。\",\"· 错误：1436 SQLSTATE: HY000 (ER_STACK_OVERRUN_NEED_MORE)\",\"消息：线程堆栈溢出，%ld字节堆栈用了%ld字节，并需要%ld字节。请使用'mysqld -O thread_stack=#'指定更大的堆栈。\",\"· 错误：1437 SQLSTATE: 42000 (ER_TOO_LONG_BODY)\",\"消息：'%s'的子程序主体过长。\",\"· 错误：1438 SQLSTATE: HY000 (ER_WARN_CANT_DROP_DEFAULT_KEYCACHE)\",\"消息：无法撤销默认的keycache。\",\"· 错误：1439 SQLSTATE: 42000 (ER_TOO_BIG_DISPLAYWIDTH)\",\"消息：对于列'%s'，显示宽度超出范围(max = %d)\",\"· 错误：1440 SQLSTATE: XAE08 (ER_XAER_DUPID)\",\"消息：XAER_DUPID: XID已存在\",\"· 错误：1441 SQLSTATE: 22008 (ER_DATETIME_FUNCTION_OVERFLOW)\",\"消息：日期时间函数，%s字段溢出。\",\"· 错误：1442 SQLSTATE: HY000 (ER_CANT_UPDATE_USED_TABLE_IN_SF_OR_TRG)\",\"消息：由于它已被调用了该存储函数／触发程序的语句使用，不能在存储函数／触发程序中更新表'%s'。\",\"· 错误：1443 SQLSTATE: HY000 (ER_VIEW_PREVENT_UPDATE)\",\"消息：表'%s'的定义不允许在表'%s上执行操作%s。\",\"· 错误：1444 SQLSTATE: HY000 (ER_PS_NO_RECURSION)\",\"消息：预处理语句包含引用了相同语句的存储子程序调用。不允许以这类递归方式执行预处理语句。\",\"· 错误：1445 SQLSTATE: HY000 (ER_SP_CANT_SET_AUTOCOMMIT)\",\"消息：不允许从存储函数或触发程序设置autocommit。\",\"· 错误：1446 SQLSTATE: HY000 (ER_NO_VIEW_USER)\",\"消息：视图定义人不完全合格。\",\"· 错误：1447 SQLSTATE: HY000 (ER_VIEW_FRM_NO_USER)\",\"消息：视图%s.%s没有定义人信息（旧的表格式）。当前用户将被当作定义人。请重新创建视图！\",\"· 错误：1448 SQLSTATE: HY000 (ER_VIEW_OTHER_USER)\",\"消息：需要SUPER权限才能创建具有%s@%s定义器的视图。\",\"· 错误：1449 SQLSTATE: HY000 (ER_NO_SUCH_USER)\",\"消息：没有注册的%s@%s。\",\"· 错误：1450 SQLSTATE: HY000 (ER_FORBID_SCHEMA_CHANGE)\",\"消息：不允许将方案从'%s'变为'%s'。\",\"· 错误：1451 SQLSTATE: 23000 (ER_ROW_IS_REFERENCED_2)\",\"消息：不能删除或更新父行，外键约束失败(%s)。\",\"· 错误：1452 SQLSTATE: 23000 (ER_NO_REFERENCED_ROW_2)\",\"消息：不能添加或更新子行，外键约束失败(%s)。\",\"· 错误：1453 SQLSTATE: 42000 (ER_SP_BAD_VAR_SHADOW)\",\"消息：必须用...引用变量，或重新命名变量。\",\"· 错误：1454 SQLSTATE: HY000 (ER_PARTITION_REQUIRES_VALUES_ERROR)\",\"消息：对于每个分区，%s PARTITIONING需要VALUES %s的定义。\",\"· 错误：1455 SQLSTATE: HY000 (ER_PARTITION_WRONG_VALUES_ERROR)\",\"消息：在分区定义中，只有%s PARTITIONING能使用VALUES %s。\",\"· 错误：1456 SQLSTATE: HY000 (ER_PARTITION_MAXVALUE_ERROR)\",\"消息：MAXVALUE只能在最后1个分区定义中使用。\",\"· 错误：1457 SQLSTATE: HY000 (ER_PARTITION_SUBPARTITION_ERROR)\",\"消息：子分区只能是哈希分区，并按键分区。\",\"· 错误：1458 SQLSTATE: HY000 (ER_PARTITION_WRONG_NO_PART_ERROR)\",\"消息：定义了错误的分区数，与前面的设置不匹配。\",\"· 错误：1459 SQLSTATE: HY000 (ER_PARTITION_WRONG_NO_SUBPART_ERROR)\",\"消息：定义了错误的子分区数，与前面的设置不匹配。\",\"· 错误：1460 SQLSTATE: HY000 (ER_CONST_EXPR_IN_PARTITION_FUNC_ERROR)\",\"消息：在分区（子分区）函数中不允许使用常量／随机表达式。\",\"· 错误：1461 SQLSTATE: HY000 (ER_NO_CONST_EXPR_IN_RANGE_OR_LIST_ERROR)\",\"消息：RANGE/LIST VALUES中的表达式必须是常量。\",\"· 错误：1462 SQLSTATE: HY000 (ER_FIELD_NOT_FOUND_PART_ERROR)\",\"消息：在表中未发现分区函数字段列表中的字段。\",\"· 错误：1463 SQLSTATE: HY000 (ER_LIST_OF_FIELDS_ONLY_IN_HASH_ERROR)\",\"消息：仅在KEY分区中允许使用字段列表。\",\"· 错误：1464 SQLSTATE: HY000 (ER_INCONSISTENT_PARTITION_INFO_ERROR)\",\"消息：frm文件中的分区信息与能够写入到frm文件中的不一致。\",\"· 错误：1465 SQLSTATE: HY000 (ER_PARTITION_FUNC_NOT_ALLOWED_ERROR)\",\"消息：%s函数返回了错误类型。\",\"· 错误：1466 SQLSTATE: HY000 (ER_PARTITIONS_MUST_BE_DEFINED_ERROR)\",\"消息：对于%s分区，必须定义每个分区。\",\"· 错误：1467 SQLSTATE: HY000 (ER_RANGE_NOT_INCREASING_ERROR)\",\"消息：对于各分区，VALUES LESS THAN值必须严格增大。\",\"· 错误：1468 SQLSTATE: HY000 (ER_INCONSISTENT_TYPE_OF_FUNCTIONS_ERROR)\",\"消息：VALUES值必须与分区函数具有相同的类型。\",\"· 错误：1469 SQLSTATE: HY000 (ER_MULTIPLE_DEF_CONST_IN_LIST_PART_ERROR)\",\"消息：Multiple definition of same constant in list partitioning\",\"· 错误：1470 SQLSTATE: HY000 (ER_PARTITION_ENTRY_ERROR)\",\"消息：在查询中，不能独立使用分区功能。\",\"· 错误：1471 SQLSTATE: HY000 (ER_MIX_HANDLER_ERROR)\",\"消息：在该MySQL版本中，不允许分区中的句柄组合。\",\"· 错误：1472 SQLSTATE: HY000 (ER_PARTITION_NOT_DEFINED_ERROR)\",\"消息：对于分区引擎，有必要定义所有的%s。\",\"· 错误：1473 SQLSTATE: HY000 (ER_TOO_MANY_PARTITIONS_ERROR)\",\"消息：定义了过多分区。\",\"· 错误：1474 SQLSTATE: HY000 (ER_SUBPARTITION_ERROR)\",\"消息：对于子分区，仅能将RANGE/LIST分区与HASH/KEY分区混合起来。\",\"· 错误：1475 SQLSTATE: HY000 (ER_CANT_CREATE_HANDLER_FILE)\",\"消息：无法创建特定的句柄文件。\",\"· 错误：1476 SQLSTATE: HY000 (ER_BLOB_FIELD_IN_PART_FUNC_ERROR)\",\"消息：在分区函数中，不允许使用BLOB字段。\",\"· 错误：1477 SQLSTATE: HY000 (ER_CHAR_SET_IN_PART_FIELD_ERROR)\",\"消息：如果为分区函数选择了二进制校对，才允许使用VARCHAR。\",\"· 错误：1478 SQLSTATE: HY000 (ER_UNIQUE_KEY_NEED_ALL_FIELDS_IN_PF)\",\"消息：在分区函数中，%s需要包含所有文件。\",\"· 错误：1479 SQLSTATE: HY000 (ER_NO_PARTS_ERROR)\",\"消息：%s的数目= 0不是允许的值。\",\"· 错误：1480 SQLSTATE: HY000 (ER_PARTITION_MGMT_ON_NONPARTITIONED)\",\"消息：无法在非分区表上进行分区管理。\",\"· 错误：1481 SQLSTATE: HY000 (ER_DROP_PARTITION_NON_EXISTENT)\",\"消息：分区列表中的错误出现变化。\",\"· 错误：1482 SQLSTATE: HY000 (ER_DROP_LAST_PARTITION)\",\"消息：不能删除所有分区，请使用DROP TABLE取而代之。\",\"· 错误：1483 SQLSTATE: HY000 (ER_COALESCE_ONLY_ON_HASH_PARTITION)\",\"消息：COALESCE PARTITION仅能在HASH/KEY分区上使用。\",\"· 错误：1484 SQLSTATE: HY000 (ER_ONLY_ON_RANGE_LIST_PARTITION)\",\"消息：%s PARTITION仅能在RANGE/LIST分区上使用。\",\"· 错误：1485 SQLSTATE: HY000 (ER_ADD_PARTITION_SUBPART_ERROR)\",\"消息：试图用错误的子分区数增加分区。\",\"· 错误：1486 SQLSTATE: HY000 (ER_ADD_PARTITION_NO_NEW_PARTITION)\",\"消息：必须至少添加1个分区。\",\"· 错误：1487 SQLSTATE: HY000 (ER_COALESCE_PARTITION_NO_PARTITION)\",\"消息：必须至少合并1个分区。\",\"· 错误：1488 SQLSTATE: HY000 (ER_REORG_PARTITION_NOT_EXIST)\",\"消息：重组的分区数超过了已有的分区数。\",\"· 错误：1489 SQLSTATE: HY000 (ER_SAME_NAME_PARTITION)\",\"消息：在表中，所有分区必须有唯一的名称。\",\"· 错误：1490 SQLSTATE: HY000 (ER_CONSECUTIVE_REORG_PARTITIONS)\",\"消息：重组分区集合时，它们必须连续。\",\"· 错误：1491 SQLSTATE: HY000 (ER_REORG_OUTSIDE_RANGE)\",\"消息：新分区的范围超过了已重组分区的范围。\",\"· 错误：1492 SQLSTATE: HY000 (ER_DROP_PARTITION_FAILURE)\",\"消息：在该版本的句柄中，不支持撤销分区。\",\"· 错误：1493 SQLSTATE: HY000 (ER_DROP_PARTITION_WHEN_FK_DEFINED)\",\"消息：在表上定义了外键约束时，不能舍弃分区。\",\"· 错误：1494 SQLSTATE: HY000 (ER_PLUGIN_IS_NOT_LOADED)\",\"消息：未加载插件'%s'\",\"B.2. 客户端错误代码和消息 客户端错误信息来自下述源文件：\",\"· 圆括号中的错误值和符号与include/errmsg.h MySQL源文件中的定义对应。\",\"· 消息值与libmysql/errmsg.c文件中列出的错误消息对应。%d和%s分别代表数值和字符串，显示时，它们将被消息值取代。\",\"由于更新很频繁，这些文件中可能包含这里未列出的额外错误消息。\",\"· 错误：2000 (CR_UNKNOWN_ERROR)\",\"消息：未知MySQL错误。\",\"· 错误：2001 (CR_SOCKET_CREATE_ERROR)\",\"消息：不能创建UNIX套接字(%d)\",\"· 错误：2002 (CR_CONNECTION_ERROR)\",\"消息：不能通过套接字'%s' (%d)连接到本地MySQL服务器。\",\"· 错误：2003 (CR_CONN_HOST_ERROR)\",\"消息：不能连接到'%s' (%d)上的MySQL服务器。\",\"· 错误：2004 (CR_IPSOCK_ERROR)\",\"消息：不能创建TCP/IP套接字(%d)\",\"· 错误：2005 (CR_UNKNOWN_HOST)\",\"消息：未知的MySQL服务器主机'%s' (%d)\",\"· 错误：2006 (CR_SERVER_GONE_ERROR)\",\"消息：MySQL服务器不可用。\",\"· 错误：2007 (CR_VERSION_ERROR)\",\"消息：协议不匹配，服务器版本= %d，客户端版本= %d\",\"· 错误：2008 (CR_OUT_OF_MEMORY)\",\"消息：MySQL客户端内存溢出。\",\"· 错误：2009 (CR_WRONG_HOST_INFO)\",\"消息：错误的主机信息\",\"· 错误：2010 (CR_LOCALHOST_CONNECTION)\",\"消息：通过UNIX套接字连接的本地主机。\",\"· 错误：2011 (CR_TCP_CONNECTION)\",\"消息：%s，通过TCP/IP\",\"· 错误：2012 (CR_SERVER_HANDSHAKE_ERR)\",\"消息：服务器握手过程中出错。\",\"· 错误：2013 (CR_SERVER_LOST)\",\"消息：查询过程中丢失了与MySQL服务器的连接。\",\"· 错误：2014 (CR_COMMANDS_OUT_OF_SYNC)\",\"消息：命令不同步，你现在不能运行该命令。\",\"· 错误：2015 (CR_NAMEDPIPE_CONNECTION)\",\"消息：命名管道，%s\",\"· 错误：2016 (CR_NAMEDPIPEWAIT_ERROR)\",\"消息：无法等待命名管道，主机，%s；管道，%s (%lu)\",\"· 错误：2017 (CR_NAMEDPIPEOPEN_ERROR)\",\"消息：无法打开命名管道，主机，%s；管道，%s (%lu)\",\"· 错误：2018 (CR_NAMEDPIPESETSTATE_ERROR)\",\"消息：无法设置命名管道的状态，主机，%s；管道，%s (%lu)\",\"· 错误：2019 (CR_CANT_READ_CHARSET)\",\"消息：无法初始化字符集%s (路径：%s)\",\"· 错误：2020 (CR_NET_PACKET_TOO_LARGE)\",\"消息：获得的信息包大于'max_allowed_packet'字节。\",\"· 错误：2021 (CR_EMBEDDED_CONNECTION)\",\"消息：嵌入式服务器。\",\"· 错误：2022 (CR_PROBE_SLAVE_STATUS)\",\"消息：SHOW SLAVE STATUS出错：\",\"· 错误：2023 (CR_PROBE_SLAVE_HOSTS)\",\"消息：SHOW SLAVE HOSTS出错：\",\"· 错误：2024 (CR_PROBE_SLAVE_CONNECT)\",\"消息：连接到从服务器时出错：\",\"· 错误：2025 (CR_PROBE_MASTER_CONNECT)\",\"消息：连接到主服务器时出错：\",\"· 错误：2026 (CR_SSL_CONNECTION_ERROR)\",\"消息：SSL连接错误\",\"· 错误：2027 (CR_MALFORMED_PACKET)\",\"消息：残缺信息包。\",\"· 错误：2028 (CR_WRONG_LICENSE)\",\"消息：该客户端库仅授权给具有'%s'许可的MySQL服务器使用。\",\"· 错误：2029 (CR_NULL_POINTER)\",\"消息：空指针的无效使用。\",\"· 错误：2030 (CR_NO_PREPARE_STMT)\",\"消息：语句未准备好。\",\"· 错误：2031 (CR_PARAMS_NOT_BOUND)\",\"消息：没有为预处理语句中的参数提供数据。\",\"· 错误：2032 (CR_DATA_TRUNCATED)\",\"消息：数据截短。\",\"· 错误：2033 (CR_NO_PARAMETERS_EXISTS)\",\"消息：语句中不存在任何参数。\",\"· 错误：2034 (CR_INVALID_PARAMETER_NO)\",\"消息：无效的参数编号。\",\"· 错误：2035 (CR_INVALID_BUFFER_USE)\",\"消息：不能为非字符串／非二进制数据类型发送长数据（参数：%d）。\",\"· 错误：2036 (CR_UNSUPPORTED_PARAM_TYPE)\",\"消息：正使用不支持的缓冲区类型， %d （参数：%d）\",\"· 错误：2037 (CR_SHARED_MEMORY_CONNECTION)\",\"消息：共享内存，%s\",\"· 错误：2038 (CR_SHARED_MEMORY_CONNECT_REQUEST_ERROR)\",\"消息：不能打开共享内存，客户端不能创建请求事件(%lu)\",\"· 错误：2039 (CR_SHARED_MEMORY_CONNECT_ANSWER_ERROR)\",\"消息：不能打开共享内存，未收到服务器的应答事件(%lu)\",\"· 错误：2040 (CR_SHARED_MEMORY_CONNECT_FILE_MAP_ERROR)\",\"消息：不能打开共享内存，服务器不能分配文件映射(%lu)\",\"· 错误：2041 (CR_SHARED_MEMORY_CONNECT_MAP_ERROR)\",\"消息：不能打开共享内存，服务器不能获得文件映射的指针(%lu)\",\"· 错误：2042 (CR_SHARED_MEMORY_FILE_MAP_ERROR)\",\"消息：不能打开共享内存，客户端不能分配文件映射(%lu)\",\"· 错误：2043 (CR_SHARED_MEMORY_MAP_ERROR)\",\"消息：不能打开共享内存，客户端不能获得文件映射的指针(%lu)\",\"· 错误：2044 (CR_SHARED_MEMORY_EVENT_ERROR)\",\"消息：不能打开共享内存，客户端不能创建%s事件(%lu)\",\"· 错误：2045 (CR_SHARED_MEMORY_CONNECT_ABANDONED_ERROR)\",\"消息：不能打开共享内存，无来自服务器的应答 (%lu)\",\"· 错误：2046 (CR_SHARED_MEMORY_CONNECT_SET_ERROR)\",\"消息：不能打开共享内存，不能将请求事件发送到服务器(%lu)\",\"· 错误：2047 (CR_CONN_UNKNOW_PROTOCOL)\",\"消息：错误或未知协议\",\"· 错误：2048 (CR_INVALID_CONN_HANDLE)\",\"消息：无效的连接句柄\",\"· 错误：2049 (CR_SECURE_AUTH)\",\"消息：拒绝使用旧鉴定协议（早于4.1.1）的连接（开启了客户端'secure_auth'选项）。\",\"· 错误：2050 (CR_FETCH_CANCELED)\",\"消息：行检索被mysql_stmt_close()调用取消。\",\"· 错误：2051 (CR_NO_DATA)\",\"消息：在未事先获取行的情况下试图读取列。\",\"· 错误：2052 (CR_NO_STMT_METADATA)\",\"消息：预处理语句不含元数据。\",\"· 错误：2053 (CR_NO_RESULT_SET)\",\"消息：在没有与语句相关的结果集时试图读取行。\",\"· 错误：2054 (CR_NOT_IMPLEMENTED)\",\"消息：该特性尚未实施。\"]},\"126\":{\"h\":\"1. Redis基础\"},\"127\":{\"h\":\"Redis介绍\",\"t\":[\"是一个基于 C 语言开发的开源 NoSQL 数据库。\",\"Redis 的数据是保存在内存中的（内存数据库，支持持久化），因此读写速度非常快，被广泛应用于分布式缓存方向。并且，Redis 存储的是 KV 键值对数据\"]},\"128\":{\"h\":\"为什么Redis这么快？\",\"t\":[\"Redis 内部做了非常多的性能优化，比较重要的有下面 3 点：\",\"Redis 基于内存，内存的访问速度比磁盘快很多；\",\"Redis 基于 Reactor 模式设计开发了一套高效的事件处理模型，主要是单线程事件循环和 IO 多路复用（Redis 线程模式后面会详细介绍到）；\",\"Redis 内置了多种优化过后的数据类型/结构实现，性能非常高。\",\"Redis 通信协议实现简单且解析高效。\",\"那既然都这么快了，为什么不直接用 Redis 当主数据库呢？主要是因为内存成本太高且 Redis 提供的数据持久化仍然有数据丢失的风险。\"]},\"129\":{\"h\":\"为什么要用Redis？\",\"t\":[\"1、访问速度更快\",\"传统数据库数据保存在磁盘，而 Redis 基于内存，内存的访问速度比磁盘快很多。引入 Redis 之后，我们可以把一些高频访问的数据放到 Redis 中，这样下次就可以直接从内存中读取，速度可以提升几十倍甚至上百倍。\",\"2、高并发\",\"一般像 MySQL 这类的数据库的 QPS 大概都在 4k 左右（4 核 8g） ，但是使用 Redis 缓存之后很容易达到 5w+，甚至能达到 10w+（就单机 Redis 的情况，Redis 集群的话会更高）。\",\"QPS（Query Per Second）：服务器每秒可以执行的查询次数；\",\"由此可见，直接操作缓存能够承受的数据库请求数量是远远大于直接访问数据库的，所以我们可以考虑把数据库中的部分数据转移到缓存中去，这样用户的一部分请求会直接到缓存这里而不用经过数据库。进而，我们也就提高了系统整体的并发。\",\"3、功能全面\",\"Redis 除了可以用作缓存之外，还可以用于分布式锁、限流、消息队列、延时队列等场景，功能强大！\"]},\"130\":{\"h\":\"Redis应用场景\",\"t\":[\"分布式锁：通过 Redis 来做分布式锁是一种比较常见的方式。通常情况下，我们都是基于 Redisson 来实现分布式锁\",\"限流：一般是通过 Redis + Lua 脚本的方式来实现限流。如果不想自己写 Lua 脚本的话，也可以直接利用 Redisson 中的 RateLimiter 来实现分布式限流，其底层实现就是基于 Lua 代码+令牌桶算法。\",\"消息队列：Redis 自带的 List 数据结构可以作为一个简单的队列使用。Redis 5.0 中增加的 Stream 类型的数据结构更加适合用来做消息队列。它比较类似于 Kafka，有主题和消费组的概念，支持消息持久化以及 ACK 机制。\",\"延时队列：Redisson 内置了延时队列（基于 Sorted Set 实现的）。\",\"分布式 Session ：利用 String 或者 Hash 数据类型保存 Session 数据，所有的服务器都可以访问。\",\"复杂业务场景：通过 Redis 以及 Redis 扩展（比如 Redisson）提供的数据结构，我们可以很方便地完成很多复杂的业务场景比如通过 Bitmap 统计活跃用户、通过 Sorted Set 维护排行榜。\",\"……\"]},\"131\":{\"h\":\"Redis数据类型\",\"t\":[\"5 种基础数据类型：String（字符串）、List（列表）、Set（集合）、Hash（散列）、Zset（有序集合）\",\"3 种特殊数据类型：HyperLogLog（基数统计）、Bitmap （位图）、Geospatial (地理位置)\",\"Redis 数据类型概览\"]},\"132\":{\"h\":\"\",\"t\":[\"适合存简单数据\",\"存储的数据：单个数据，最简单的数据存储类型，也是最常用的数据存储类型。\",\"string，他就是存一个字符串，注意是value那一部分是一个字符串，它是redis中最基本、最简单的存储数据的格式。\",\"存储数据的格式：一个存储空间保存一个数据\",\"每一个空间中只能保存一个字符串信息，这个信息里边如果是存的纯数字，他也能当数字使用，我们来看一下，这是我们的数据的存储空间。\",\"redis存储空间\"]},\"133\":{\"h\":\"\",\"t\":[\"适合存对象\",\"新的存储需求：对一系列存储的数据进行编组，方便管理，典型应用存储对象信息\",\"需要的存储结构：一个存储空间保存多个键值对数据\",\"hash类型：底层使用哈希表结构实现数据存储\",\"hash结构图\"]},\"134\":{\"h\":\"\",\"t\":[\"适合存有顺序的数据\",\"数据存储需求：存储多个数据，并对数据进入存储空间的顺序进行区分\",\"需要的存储结构：一个存储空间保存多个数据，且通过数据可以体现进入顺序\",\"list类型：保存多个数据，底层使用双向链表存储结构实现\",\"list2\"]},\"135\":{\"h\":\"\",\"t\":[\"适合存不重复value的数据\",\"新的存储需求：存储大量的数据，在查询方面提供更高的效率\",\"需要的存储结构：能够保存大量的数据，高效的内部存储机制，便于查询\",\"set类型：与hash存储结构完全相同，仅存储键，不存储值（nil），并且值是不允许重复的\",\"set4\"]},\"136\":{\"h\":\"Redis持久化\",\"t\":[\"不知道大家有没有遇见过，就是正工作的时候停电了，如果你用的是笔记本电脑还好，你有电池，但如果你用的是台式机呢，那恐怕就比较灾难了，假如你现在正在写一个比较重要的文档，如果你要使用的是word，这种办公自动化软件的话，他一旦遇到停电，其实你不用担心，因为它会给你生成一些其他的文件。\",\"我们说自动恢复，其实基于的一个前提就是他提前把你的数据给存起来了。你平常操作的所有信息都是在内存中的，而我们真正的信息是保存在硬盘中的，内存中的信息断电以后就消失了，硬盘中的信息断电以后还可以保留下来\",\"将文件由内存中保存到硬盘中的这个过程，我们叫做数据保存，也就叫做持久化。但是把它保存下来不是你的目的，最终你还要把它再读取出来，它加载到内存中这个过程，我们叫做数据恢复\"]},\"137\":{\"h\":\"什么是持久化\",\"t\":[\"(1)什么是持久化？\",\"利用永久性存储介质将数据进行保存，在特定的时间将保存的数据进行恢复的工作机制称为持久化 。\",\"持久化用于防止数据的意外丢失，确保数据安全性。\",\"(2)持久化过程保存什么？\",\"我们知道一点，计算机中的数据全部都是二进制，如果现在我要你给我保存一组数据的话，你有什么样的方式呢，其实最简单的就是现在长什么样，我就记下来就行了，那么这种是记录纯粹的数据，也叫做快照存储，也就是它保存的是某一时刻的数据状态。\",\"还有一种形式，它不记录你的数据，它记录你所有的操作过程，比如说大家用idea的时候，有没有遇到过写错了ctrl+z撤销，然后ctrl+y还能恢复，这个地方它也是在记录，但是记录的是你所有的操作过程，那我想问一下，操作过程，我都给你留下来了，你说数据还会丢吗？肯定不会丢，因为你所有的操作过程我都保存了。这种保存操作过程的存储，用专业术语来说可以说是日志，这是两种不同的保存数据的形式啊。\",\"持久化2\",\"总结一下：\",\"第一种RDB文件：将当前数据状态进行保存，快照形式，存储数据结果，存储格式简单，关注点在数据。\",\"第二种AOF文件：将数据的操作过程进行保存，日志形式，存储操作过程，存储格式复杂，关注点在数据的操作过程。\"]},\"138\":{\"h\":\"\",\"t\":[\"save指令的执行会阻塞当前Redis服务器，直到当前RDB过程完成为止，有可能会造成长时间阻塞，线上环境不建议使用。 save bgsave指令，bg其实是background的意思，后台执行的意思 bgsave\",\"启动方式2\",\"rdb启动方式3\",\"当执行bgsave的时候，客户端发出bgsave指令给到redis服务器。注意，这个时候服务器马上回一个结果告诉客户端后台已经开始了，与此同时它会创建一个子进程，使用Linux的fork函数创建一个子进程，让这个子进程去执行save相关的操作，此时我们可以想一下，我们主进程一直在处理指令，而子进程在执行后台的保存，它会不会干扰到主进程的执行吗？\",\"答案是不会，所以说他才是主流方案。子进程开始执行之后，它就会创建啊RDB文件把它存起来，操作完以后他会把这个结果返回，也就是说bgsave的过程分成两个过程，第一个是服务端拿到指令直接告诉客户端开始执行了；另外一个过程是一个子进程在完成后台的保存操作，操作完以后回一个消息。\",\"RDB优点：\",\"RDB是一个紧凑压缩的二进制文件，存储效率较高\",\"RDB内部存储的是redis在某个时间点的数据快照，非常适合用于数据备份，全量复制等场景\",\"RDB恢复数据的速度要比AOF快很多\",\"应用：服务器中每X小时执行bgsave备份，并将RDB文件拷贝到远程机器中，用于灾难恢复。\",\"RDB缺点\",\"RDB方式无论是执行指令还是利用配置，无法做到实时持久化，具有较大的可能性丢失数据\",\"bgsave指令每次运行要执行fork操作创建子进程，要牺牲掉一些性能\",\"Redis的众多版本中未进行RDB文件格式的版本统一，有可能出现各版本服务之间数据格式无法兼容现象\"]},\"139\":{\"h\":\"AOF文件存储\",\"t\":[\"AOF(append only file)持久化：以独立日志的方式记录每次写命令，重启时再重新执行AOF文件中命令 达到恢复数据的目的。与RDB相比可以简单理解为由记录数据改为记录数据产生的变化\",\"AOF的主要作用是解决了数据持久化的实时性，目前已经是Redis持久化的主流方式\",\"为什么要有AOF,这得从RDB的存储的弊端说起：\",\"存储数据量较大，效率较低，基于快照思想，每次读写都是全部数据，当数据量巨大时，效率非常低\",\"大数据量下的IO性能较低\",\"基于fork创建子进程，内存产生额外消耗\",\"宕机带来的数据丢失风险\",\"那解决的思路是什么呢？\",\"不写全数据，仅记录部分数据\",\"降低区分数据是否改变的难度，改记录数据为记录操作过程\",\"对所有操作均进行记录，排除丢失数据的风险\"]},\"140\":{\"h\":\"AOF执行策略\",\"t\":[\"AOF写数据三种策略(appendfsync)\",\"always(每次）：每次写入操作均同步到AOF文件中数据零误差，性能较低，不建议使用。\",\"everysec（每秒）：每秒将缓冲区中的指令同步到AOF文件中，在系统突然宕机的情况下丢失1秒内的数据 数据准确性较高，性能较高，建议使用，也是默认配置\",\"no（系统控制）：由操作系统控制每次同步到AOF文件的周期，整体过程不可控\",\"什么叫AOF重写？\",\"随着命令不断写入AOF，文件会越来越大，为了解决这个问题，Redis引入了AOF重写机制压缩文件体积。AOF文件重 写是将Redis进程内的数据转化为写命令同步到新AOF文件的过程。简单说就是将对同一个数据的若干个条命令执行结果转化成最终结果数据对应的指令进行记录。\",\"AOF重写作用\",\"降低磁盘占用量，提高磁盘利用率\",\"提高持久化效率，降低持久化写时间，提高IO性能\",\"降低数据恢复用时，提高数据恢复效率\",\"AOF重写规则\",\"进程内具有时效性的数据，并且数据已超时将不再写入文件\",\"非写入类的无效指令将被忽略，只保留最终数据的写入命令\",\"如del key1、 hdel key2、srem key3、set key4 111、set key4 222等\",\"如select指令虽然不更改数据，但是更改了数据的存储位置，此类命令同样需要记录\",\"对同一数据的多条写命令合并为一条命令\",\"如lpushlist1 a、lpush list1 b、lpush list1 c可以转化为：lpush list1 a b c。\",\"为防止数据量过大造成客户端缓冲区溢出，对list、set、hash、zset等类型，每条指令最多写入64个元素\",\"手动重写： bgrewriteaof\",\"3\",\"AOF工作流程\"]},\"141\":{\"h\":\"RDB与AOF对比（优缺点）\",\"t\":[\"持久化方式\",\"RDB\",\"AOF\",\"占用存储空间\",\"小（数据级：压缩）\",\"大（指令级：重写）\",\"存储速度\",\"慢\",\"快\",\"恢复速度\",\"快\",\"慢\",\"数据安全性\",\"会丢失数据\",\"依据策略决定\",\"资源消耗\",\"高/重量级\",\"低/轻量级\",\"启动优先级\",\"低\",\"高\"]},\"142\":{\"h\":\"RDB与AOF应用场景\",\"t\":[\"RDB与AOF的选择之惑\",\"对数据非常敏感，建议使用默认的AOF持久化方案\",\"AOF持久化策略使用everysecond，每秒钟fsync一次。该策略redis仍可以保持很好的处理性能，当出 现问题时，最多丢失0-1秒内的数据。\",\"注意：由于AOF文件存储体积较大，且恢复速度较慢\",\"数据呈现阶段有效性，建议使用RDB持久化方案\",\"数据可以良好的做到阶段内无丢失（该阶段是开发者或运维人员手工维护的），且恢复速度较快，阶段 点数据恢复通常采用RDB方案\",\"注意：利用RDB实现紧凑的数据持久化会使Redis降的很低，慎重总结：\",\"综合比对\",\"RDB与AOF的选择实际上是在做一种权衡，每种都有利有弊\",\"如不能承受数分钟以内的数据丢失，对业务数据非常敏感，选用AOF\",\"如能承受数分钟以内的数据丢失，且追求大数据集的恢复速度，选用RDB\",\"灾难恢复选用RDB\",\"双保险策略，同时开启 RDB和 AOF，重启后，Redis优先使用 AOF 来恢复数据，降低丢失数据的量\"]},\"143\":{\"h\":\"2. Redis高级\"},\"144\":{\"h\":\"Redis线程模型\"},\"145\":{\"h\":\"1.Redis数据删除与淘汰策略\"},\"146\":{\"h\":\"1.1 过期数据\"},\"147\":{\"h\":\"\",\"t\":[\"Redis是一种内存级数据库，所有数据均存放在内存中，内存中的数据可以通过TTL指令获取其状态\",\"TTL返回的值有三种情况：正数，-1，-2\",\"正数：代表该数据在内存中还能存活的时间\",\"-1：永久有效的数据\",\"2 ：已经过期的数据 或被删除的数据 或 未定义的数据\",\"删除策略就是针对已过期数据的处理策略，已过期的数据是真的就立即删除了吗？其实也不是，我们会有多种删除策略，是分情况的，在不同的场景下使用不同的删除方式会有不同效果，这也正是我们要将的数据的删除策略的问题\"]},\"148\":{\"h\":\"1.1.2 时效性数据的存储结构\",\"t\":[\"在Redis中，如何给数据设置它的失效周期呢？数据的时效在redis中如何存储呢？看下图：\",\"过期数据是一块独立的存储空间，Hash结构，field是内存地址，value是过期时间，保存了所有key的过期描述，在最终进行过期处理的时候，对该空间的数据进行检测， 当时间到期之后通过field找到内存该地址处的数据，然后进行相关操作。\"]},\"149\":{\"h\":\"1.2 数据删除策略\"},\"150\":{\"h\":\"1.2.1 数据删除策略的目标\",\"t\":[\"在内存占用与CPU占用之间寻找一种平衡，顾此失彼都会造成整体redis性能的下降，甚至引发服务器宕机或 内存泄露\",\"针对过期数据要进行删除的时候都有哪些删除策略呢？\",\"1.定时删除\",\"2.惰性删除\",\"3.定期删除\"]},\"151\":{\"h\":\"1.2.2 定时删除\",\"t\":[\"创建一个定时器，当key设置有过期时间，且过期时间到达时，由定时器任务立即执行对键的删除操作\",\"优点：节约内存，到时就删除，快速释放掉不必要的内存占用\",\"缺点：CPU压力很大，无论CPU此时负载量多高，均占用CPU，会影响redis服务器响应时间和指令吞吐量\",\"总结：用处理器性能换取存储空间（拿时间换空间）\"]},\"152\":{\"h\":\"1.2.3 惰性删除\",\"t\":[\"数据到达过期时间，不做处理。等下次访问该数据时，我们需要判断\",\"如果未过期，返回数据\",\"发现已过期，删除，返回不存在\",\"优点：节约CPU性能，发现必须删除的时候才删除\",\"缺点：内存压力很大，出现长期占用内存的数据\",\"总结：用存储空间换取处理器性能（拿时间换空间）\"]},\"153\":{\"h\":\"1.2.4 定期删除\",\"t\":[\"定时删除和惰性删除这两种方案都是走的极端，那有没有折中方案？\",\"我们来讲redis的定期删除方案：\",\"Redis启动服务器初始化时，读取配置server.hz的值，默认为10\",\"每秒钟执行server.hz次serverCron()-------->databasesCron()--------->activeExpireCycle()\",\"**activeExpireCycle()**对每个expires[*]逐一进行检测，每次执行耗时：250ms/server.hz\",\"对某个expires[*]检测时，随机挑选W个key检测\",\" 如果key超时，删除key 如果一轮中删除的key的数量>W*25%，循环该过程 如果一轮中删除的key的数量≤W*25%，检查下一个expires[*]，0-15循环 W取值=ACTIVE_EXPIRE_CYCLE_LOOKUPS_PER_LOOP属性值\",\"参数current_db用于记录activeExpireCycle() 进入哪个expires[*] 执行\",\"如果activeExpireCycle()执行时间到期，下次从current_db继续向下执行\",\"总的来说：定期删除就是周期性轮询redis库中的时效性数据，采用随机抽取的策略，利用过期数据占比的方式控制删除频度\",\"特点1：CPU性能占用设置有峰值，检测频度可自定义设置\",\"特点2：内存压力不是很大，长期占用内存的冷数据会被持续清理\",\"总结：周期性抽查存储空间（随机抽查，重点抽查）\"]},\"154\":{\"h\":\"1.2.5 删除策略对比\",\"t\":[\"1：定时删除：\",\"节约内存，无占用, 不分时段占用CPU资源，频度高, 拿时间换空间\",\"2：惰性删除：\",\"内存占用严重 延时执行，CPU利用率高 拿空间换时间\",\"3：定期删除：\",\"内存定期随机清理 每秒花费固定的CPU资源维护内存 随机抽查，重点抽查\"]},\"155\":{\"h\":\"1.3 数据淘汰策略（逐出算法）\"},\"156\":{\"h\":\"1.3.1 淘汰策略概述\",\"t\":[\"什么叫数据淘汰策略？什么样的应用场景需要用到数据淘汰策略？\",\"当新数据进入redis时，如果内存不足怎么办？在执行每一个命令前，会调用**freeMemoryIfNeeded()**检测内存是否充足。如果内存不满足新 加入数据的最低存储要求，redis要临时删除一些数据为当前指令清理存储空间。清理数据的策略称为逐出算法。\",\"注意：逐出数据的过程不是100%能够清理出足够的可使用的内存空间，如果不成功则反复执行。当对所有数据尝试完毕， 如不能达到内存清理的要求，将出现错误信息如下\",\"(error) OOM command not allowed when used memory >'maxmemory'\"]},\"157\":{\"h\":\"1.3.2 策略配置\",\"t\":[\"影响数据淘汰的相关配置如下：\",\"1：最大可使用内存，即占用物理内存的比例，默认值为0，表示不限制。生产环境中根据需求设定，通常设置在50%以上\",\"maxmemory ?mb\",\"2：每次选取待删除数据的个数，采用随机获取数据的方式作为待检测删除数据\",\"maxmemory-samples count\",\"3：对数据进行删除的选择策略\",\"maxmemory-policy policy\",\"那数据删除的策略policy到底有几种呢？一共是3类8种\",\"第一类：检测易失数据（可能会过期的数据集server.db[i].expires ）\",\"volatile-lru：挑选最近最少使用的数据淘汰 volatile-lfu：挑选最近使用次数最少的数据淘汰 volatile-ttl：挑选将要过期的数据淘汰 volatile-random：任意选择数据淘汰\",\"第二类：检测全库数据（所有数据集server.db[i].dict ）\",\"allkeys-lru：挑选最近最少使用的数据淘汰 allkeLyRs-lfu：：挑选最近使用次数最少的数据淘汰 allkeys-random：任意选择数据淘汰，相当于随机\",\"第三类：放弃数据驱逐\",\"no-enviction（驱逐）：禁止驱逐数据(redis4.0中默认策略)，会引发OOM(Out Of Memory)\",\"注意：这些策略是配置到哪个属性上？怎么配置？如下所示\",\"maxmemory-policy volatile-lru\",\"数据淘汰策略配置依据\",\"使用INFO命令输出监控信息，查询缓存 hit 和 miss 的次数，根据业务需求调优Redis配置\"]},\"158\":{\"h\":\"2.主从复制\"},\"159\":{\"h\":\"2.1 主从复制简介\"},\"160\":{\"h\":\"2.1.1 高可用\",\"t\":[\"首先我们要理解互联网应用因为其独有的特性我们演化出的三高架构\",\"高并发\",\"应用要提供某一业务要能支持很多客户端同时访问的能力，我们称为并发，高并发意思就很明确了\",\"高性能\",\"性能带给我们最直观的感受就是：速度快，时间短\",\"高可用\",\"可用性：一年中应用服务正常运行的时间占全年时间的百分比，如下图：表示了应用服务在全年宕机的时间\",\"我们把这些时间加在一起就是全年应用服务不可用的时间，然后我们可以得到应用服务全年可用的时间\",\"4小时27分15秒+11分36秒+2分16秒=4小时41分7秒=16867秒\",\"1年=3652460*60=31536000秒\",\"可用性=（31536000-16867）/31536000*100%=99.9465151%\",\"业界可用性目标5个9，即99.999%，即服务器年宕机时长低于315秒，约5.25分钟\"]},\"161\":{\"h\":\"2.1.2 主从复制概念\",\"t\":[\"知道了三高的概念之后，我们想：你的“Redis”是否高可用？那我们要来分析单机redis的风险与问题\",\"问题1.机器故障\",\"现象：硬盘故障、系统崩溃\",\"本质：数据丢失，很可能对业务造成灾难性打击\",\"结论：基本上会放弃使用redis.\",\"问题2.容量瓶颈\",\"现象：内存不足，从16G升级到64G，从64G升级到128G，无限升级内存\",\"本质：穷，硬件条件跟不上\",\"结论：放弃使用redis\",\"结论：\",\"为了避免单点Redis服务器故障，准备多台服务器，互相连通。将数据复制多个副本保存在不同的服务器上，连接在一起，并保证数据是同步的。即使有其中一台服务器宕机，其他服务器依然可以继续提供服务，实现Redis的高可用，同时实现数据冗余备份。\",\"多台服务器连接方案：\",\"提供数据方：master\",\"主服务器，主节点，主库主客户端\",\"接收数据方：slave\",\"从服务器，从节点，从库\",\"从客户端\",\"需要解决的问题：\",\"数据同步（master的数据复制到slave中）\",\"这里我们可以来解释主从复制的概念：\",\"概念：主从复制即将master中的数据即时、有效的复制到slave中\",\"特征：一个master可以拥有多个slave，一个slave只对应一个master\",\"职责：master和slave各自的职责不一样\",\"master:\",\"写数据 执行写操作时，将出现变化的数据自动同步到slave 读数据（可忽略）\",\"slave:\",\"读数据 写数据（禁止）\"]},\"162\":{\"h\":\"2.1.3 主从复制的作用\",\"t\":[\"读写分离：master写、slave读，提高服务器的读写负载能力\",\"负载均衡：基于主从结构，配合读写分离，由slave分担master负载，并根据需求的变化，改变slave的数 量，通过多个从节点分担数据读取负载，大大提高Redis服务器并发量与数据吞吐量\",\"故障恢复：当master出现问题时，由slave提供服务，实现快速的故障恢复\",\"数据冗余：实现数据热备份，是持久化之外的一种数据冗余方式\",\"高可用基石：基于主从复制，构建哨兵模式与集群，实现Redis的高可用方案\"]},\"163\":{\"h\":\"2.2 主从复制工作流程\",\"t\":[\"主从复制过程大体可以分为3个阶段\",\"建立连接阶段（即准备阶段）\",\"数据同步阶段\",\"命令传播阶段（反复同步）\",\"而命令的传播其实有4种，分别如下：\"]},\"164\":{\"h\":\"2.2.1 主从复制的工作流程（三个阶段）\"},\"165\":{\"h\":\"2.2.1.1 阶段一：建立连接\",\"t\":[\"建立slave到master的连接，使master能够识别slave，并保存slave端口号\",\"流程如下：\",\"步骤1：设置master的地址和端口，保存master信息\",\"步骤2：建立socket连接\",\"步骤3：发送ping命令（定时器任务）\",\"步骤4：身份验证\",\"步骤5：发送slave端口信息\",\"至此，主从连接成功！\",\"当前状态：\",\"slave：保存master的地址与端口\",\"master：保存slave的端口\",\"总体：之间创建了连接的socket\",\"master和slave互联\",\"接下来就要通过某种方式将master和slave连接到一起\",\"方式一：客户端发送命令\",\"slaveof masterip masterport\",\"方式二：启动服务器参数\",\"redis-server --slaveof masterip masterport\",\"方式三：服务器配置（主流方式）\",\"slaveof masterip masterport\",\"slave系统信息\",\"master_link_down_since_seconds masterhost & masterport\",\"master系统信息\",\"uslave_listening_port(多个)\",\"主从断开连接\",\"断开slave与master的连接，slave断开连接后，不会删除已有数据，只是不再接受master发送的数据\",\"slaveof no one\",\"授权访问\",\"master客户端发送命令设置密码\",\"requirepass password\",\"master配置文件设置密码\",\"config set requirepass password config get requirepass\",\"slave客户端发送命令设置密码\",\"auth password\",\"slave配置文件设置密码\",\"masterauth password\",\"slave启动服务器设置密码\",\"redis-server –a password\"]},\"166\":{\"h\":\"2.2.1.2 阶段二：数据同步\",\"t\":[\"在slave初次连接master后，复制master中的所有数据到slave\",\"将slave的数据库状态更新成master当前的数据库状态\",\"同步过程如下：\",\"步骤1：请求同步数据\",\"步骤2：创建RDB同步数据\",\"步骤3：恢复RDB同步数据\",\"步骤4：请求部分同步数据\",\"步骤5：恢复部分同步数据\",\"至此，数据同步工作完成！\",\"当前状态：\",\"slave：具有master端全部数据，包含RDB过程接收的数据\",\"master：保存slave当前数据同步的位置\",\"总体：之间完成了数据克隆\",\"数据同步阶段master说明\",\"1：如果master数据量巨大，数据同步阶段应避开流量高峰期，避免造成master阻塞，影响业务正常执行\",\"2：复制缓冲区大小设定不合理，会导致数据溢出。如进行全量复制周期太长，进行部分复制时发现数据已经存在丢失的情况，必须进行第二次全量复制，致使slave陷入死循环状态。\",\"repl-backlog-size ?mb\",\"master单机内存占用主机内存的比例不应过大，建议使用50%-70%的内存，留下30%-50%的内存用于执 行bgsave命令和创建复制缓冲区\",\"数据同步阶段slave说明\",\"为避免slave进行全量复制、部分复制时服务器响应阻塞或数据不同步，建议关闭此期间的对外服务\",\" slave-serve-stale-data yes|no\",\"数据同步阶段，master发送给slave信息可以理解master是slave的一个客户端，主动向slave发送命令\",\"多个slave同时对master请求数据同步，master发送的RDB文件增多，会对带宽造成巨大冲击，如果master带宽不足，因此数据同步需要根据业务需求，适量错峰\",\"slave过多时，建议调整拓扑结构，由一主多从结构变为树状结构，中间的节点既是master，也是 slave。注意使用树状结构时，由于层级深度，导致深度越高的slave与最顶层master间数据同步延迟 较大，数据一致性变差，应谨慎选择\"]},\"167\":{\"h\":\"2.2.1.3 阶段三：命令传播\",\"t\":[\"当master数据库状态被修改后，导致主从服务器数据库状态不一致，此时需要让主从数据同步到一致的状态，同步的动作称为命令传播\",\"master将接收到的数据变更命令发送给slave，slave接收命令后执行命令\",\"命令传播阶段的部分复制\",\"命令传播阶段出现了断网现象：\",\"网络闪断闪连：忽略\",\"短时间网络中断：部分复制\",\"长时间网络中断：全量复制\",\"这里我们主要来看部分复制，部分复制的三个核心要素\",\"服务器的运行 id（run id）\",\"主服务器的复制积压缓冲区\",\"主从服务器的复制偏移量\",\"服务器运行ID（runid）\",\"概念：服务器运行ID是每一台服务器每次运行的身份识别码，一台服务器多次运行可以生成多个运行id 组成：运行id由40位字符组成，是一个随机的十六进制字符 例如：fdc9ff13b9bbaab28db42b3d50f852bb5e3fcdce 作用：运行id被用于在服务器间进行传输，识别身份 如果想两次操作均对同一台服务器进行，必须每次操作携带对应的运行id，用于对方识别 实现方式：运行id在每台服务器启动时自动生成的，master在首次连接slave时，会将自己的运行ID发送给slave， slave保存此ID，通过info Server命令，可以查看节点的runid\",\"复制缓冲区\",\"概念：复制缓冲区，又名复制积压缓冲区，是一个先进先出（FIFO）的队列，用于存储服务器执行过的命令，每次传播命令，master都会将传播的命令记录下来，并存储在复制缓冲区 复制缓冲区默认数据存储空间大小是1M 当入队元素的数量大于队列长度时，最先入队的元素会被弹出，而新元素会被放入队列 作用：用于保存master收到的所有指令（仅影响数据变更的指令，例如set，select） 数据来源：当master接收到主客户端的指令时，除了将指令执行，会将该指令存储到缓冲区中\",\"复制缓冲区内部工作原理：\",\"组成\",\"偏移量\",\"概念：一个数字，描述复制缓冲区中的指令字节位置\",\"分类：\",\"master复制偏移量：记录发送给所有slave的指令字节对应的位置（多个）\",\"slave复制偏移量：记录slave接收master发送过来的指令字节对应的位置（一个）\",\"作用：同步信息，比对master与slave的差异，当slave断线后，恢复数据使用\",\"数据来源：\",\"master端：发送一次记录一次\",\"slave端：接收一次记录一次\",\"字节值\",\"工作原理\",\"通过offset区分不同的slave当前数据传播的差异\",\"master记录已发送的信息对应的offset\",\"slave记录已接收的信息对应的offset\"]},\"168\":{\"h\":\"2.2.2 流程更新(全量复制/部分复制)\",\"t\":[\"我们再次的总结一下主从复制的三个阶段的工作流程：\"]},\"169\":{\"h\":\"2.2.3 心跳机制\",\"t\":[\"什么是心跳机制？\",\"进入命令传播阶段候，master与slave间需要进行信息交换，使用心跳机制进行维护，实现双方连接保持在线\",\"master心跳：\",\"内部指令：PING\",\"周期：由repl-ping-slave-period决定，默认10秒\",\"作用：判断slave是否在线\",\"查询：INFO replication 获取slave最后一次连接时间间隔，lag项维持在0或1视为正常\",\"slave心跳任务\",\"内部指令：REPLCONF ACK\",\"周期：1秒\",\"作用1：汇报slave自己的复制偏移量，获取最新的数据变更指令\",\"作用2：判断master是否在线\",\"心跳阶段注意事项：\",\"当slave多数掉线，或延迟过高时，master为保障数据稳定性，将拒绝所有信息同步\",\"min-slaves-to-write 2 min-slaves-max-lag 8\",\"slave数量少于2个，或者所有slave的延迟都大于等于8秒时，强制关闭master写功能，停止数据同步\",\"slave数量由slave发送REPLCONF ACK命令做确认\",\"slave延迟由slave发送REPLCONF ACK命令做确认\",\"至此：我们可以总结出完整的主从复制流程：\"]},\"170\":{\"h\":\"2.3 主从复制常见问题\"},\"171\":{\"h\":\"2.3.1 频繁的全量复制\",\"t\":[\"伴随着系统的运行，master的数据量会越来越大，一旦master重启，runid将发生变化，会导致全部slave的全量复制操作\",\"内部优化调整方案：\",\"1：master内部创建master_replid变量，使用runid相同的策略生成，长度41位，并发送给所有slave\",\"2：在master关闭时执行命令shutdown save，进行RDB持久化,将runid与offset保存到RDB文件中\",\"repl-id repl-offset 通过redis-check-rdb命令可以查看该信息\",\"3：master重启后加载RDB文件，恢复数据，重启后，将RDB文件中保存的repl-id与repl-offset加载到内存中\",\"master_repl_id=repl master_repl_offset =repl-offset 通过info命令可以查看该信息\",\"作用：本机保存上次runid，重启后恢复该值，使所有slave认为还是之前的master\",\"第二种出现频繁全量复制的问题现象：网络环境不佳，出现网络中断，slave不提供服务\",\"问题原因：复制缓冲区过小，断网后slave的offset越界，触发全量复制\",\"最终结果：slave反复进行全量复制\",\"解决方案：修改复制缓冲区大小\",\"repl-backlog-size ?mb\",\"建议设置如下：\",\"1.测算从master到slave的重连平均时长second\",\"2.获取master平均每秒产生写命令数据总量write_size_per_second\",\"3.最优复制缓冲区空间 = 2 * second * write_size_per_second\"]},\"172\":{\"h\":\"2.3.2 频繁的网络中断\",\"t\":[\"问题现象：master的CPU占用过高 或 slave频繁断开连接\",\"问题原因\",\"slave每1秒发送REPLCONFACK命令到master 当slave接到了慢查询时（keys * ，hgetall等），会大量占用CPU性能 master每1秒调用复制定时函数replicationCron()，比对slave发现长时间没有进行响应\",\"最终结果：master各种资源（输出缓冲区、带宽、连接等）被严重占用\",\"解决方案：通过设置合理的超时时间，确认是否释放slave\",\"repl-timeout seconds\",\"该参数定义了超时时间的阈值（默认60秒），超过该值，释放slave\",\"问题现象：slave与master连接断开\",\"问题原因\",\"master发送ping指令频度较低 master设定超时时间较短 ping指令在网络中存在丢包\",\"解决方案：提高ping指令发送的频度\",\"repl-ping-slave-period seconds\",\"超时时间repl-time的时间至少是ping指令频度的5到10倍，否则slave很容易判定超时\"]},\"173\":{\"h\":\"2.3.3 数据不一致\",\"t\":[\"问题现象：多个slave获取相同数据不同步\",\"问题原因：网络信息不同步，数据发送有延迟\",\"解决方案\",\"优化主从间的网络环境，通常放置在同一个机房部署，如使用阿里云等云服务器时要注意此现象 监控主从节点延迟（通过offset）判断，如果slave延迟过大，暂时屏蔽程序对该slave的数据访问\",\"slave-serve-stale-data yes|no\",\"开启后仅响应info、slaveof等少数命令（慎用，除非对数据一致性要求很高）\"]},\"174\":{\"h\":\"3.哨兵模式\"},\"175\":{\"h\":\"3.1 哨兵简介\"},\"176\":{\"h\":\"3.1.1 哨兵概念\",\"t\":[\"首先我们来看一个业务场景：如果redis的master宕机了，此时应该怎么办？\",\"那此时我们可能需要从一堆的slave中重新选举出一个新的master，那这个操作过程是什么样的呢？这里面会有什么问题出现呢？\",\"要实现这些功能，我们就需要redis的哨兵，那哨兵是什么呢？\",\"哨兵\",\"哨兵(sentinel) 是一个分布式系统，用于对主从结构中的每台服务器进行监控，当出现故障时通过投票机制选择新的master并将所有slave连接到新的master。\"]},\"177\":{\"h\":\"3.1.2 哨兵作用\",\"t\":[\"哨兵的作用：\",\"监控：监控master和slave\",\"不断的检查master和slave是否正常运行\",\"master存活检测、master与slave运行情况检测\",\"通知（提醒）：当被监控的服务器出现问题时，向其他（哨兵间，客户端）发送通知\",\"自动故障转移：断开master与slave连接，选取一个slave作为master，将其他slave连接新的master，并告知客户端新的服务器地址\",\"注意：哨兵也是一台redis服务器，只是不提供数据相关服务，通常哨兵的数量配置为单数\"]},\"178\":{\"h\":\"3.2 启用哨兵\",\"t\":[\"配置哨兵\",\"配置一拖二的主从结构（利用之前的方式启动即可）\",\"配置三个哨兵（配置相同，端口不同），参看sentinel.conf\",\"1：设置哨兵监听的主服务器信息， sentinel_number表示参与投票的哨兵数量\",\"sentinel monitor master_name master_host master_port sentinel_number\",\"2：设置判定服务器宕机时长，该设置控制是否进行主从切换\",\"sentinel down-after-milliseconds master_name million_seconds\",\"3：设置故障切换的最大超时时\",\"sentinel failover-timeout master_name million_seconds\",\"4：设置主从切换后，同时进行数据同步的slave数量，数值越大，要求网络资源越高，数值越小，同步时间越长\",\"sentinel parallel-syncs master_name sync_slave_number\",\"启动哨兵\",\"redis-sentinel filename\"]},\"179\":{\"h\":\"3.3 哨兵工作原理\",\"t\":[\"哨兵在进行主从切换过程中经历三个阶段\",\"监控\",\"通知\",\"故障转移\"]},\"180\":{\"h\":\"3.3.1 监控\",\"t\":[\"用于同步各个节点的状态信息\",\"获取各个sentinel的状态（是否在线）\",\"获取master的状态\",\"master属性 prunid prole：master 各个slave的详细信息\",\"获取所有slave的状态（根据master中的slave信息）\",\"slave属性 prunid prole：slave pmaster_host、master_port poffset\",\"其内部的工作原理具体如下：\"]},\"181\":{\"h\":\"3.3.2 通知\",\"t\":[\"sentinel在通知阶段要不断的去获取master/slave的信息，然后在各个sentinel之间进行共享，具体的流程如下：\"]},\"182\":{\"h\":\"3.3.3 故障转移\",\"t\":[\"当master宕机后sentinel是如何知晓并判断出master是真的宕机了呢？我们来看具体的操作流程\",\"当sentinel认定master下线之后，此时需要决定更换master，那这件事由哪个sentinel来做呢？这时候sentinel之间要进行选举，如下图所示：\",\"在选举的时候每一个人手里都有一票，而每一个人的又都想当这个处理事故的人，那怎么办？大家就开始抢，于是每个人都会发出一个指令，在内网里边告诉大家我要当选举人，比如说现在的sentinel1和sentinel4发出这个选举指令了，那么sentinel2既能接到sentinel1的也能接到sentinel4的，接到了他们的申请以后呢，sentinel2他就会把他的一票投给其中一方，投给谁呢？谁先过来我投给谁，假设sentinel1先过来，所以这个票就给到了sentinel1。那么给过去以后呢，现在sentinel1就拿到了一票，按照这样的一种形式，最终会有一个选举结果。对应的选举最终得票多的，那自然就成为了处理事故的人。需要注意在这个过程中有可能会存在失败的现象，就是一轮选举完没有选取，那就会接着进行第二轮第三轮直到完成选举。\",\"接下来就是由选举胜出的sentinel去从slave中选一个新的master出来的工作，这个流程是什么样的呢？\",\"首先它有一个在服务器列表中挑选备选master的原则\",\"不在线的OUT\",\"响应慢的OUT\",\"与原master断开时间久的OUT\",\"优先原则\",\"优先级 offset runid\",\"选出新的master之后，发送指令（ sentinel ）给其他的slave：\",\"向新的master发送slaveof no one\",\"向其他slave发送slaveof 新masterIP端口\",\"总结：故障转移阶段\",\"发现问题，主观下线与客观下线\",\"竞选负责人\",\"优选新master\",\"新master上任，其他slave切换master，原master作为slave故障恢复后连接\"]},\"183\":{\"h\":\"4.集群cluster\",\"t\":[\"现状问题：业务发展过程中遇到的峰值瓶颈\",\"redis提供的服务OPS可以达到10万/秒，当前业务OPS已经达到10万/秒\",\"内存单机容量达到256G，当前业务需求内存容量1T\",\"使用集群的方式可以快速解决上述问题\"]},\"184\":{\"h\":\"4.1 集群简介\",\"t\":[\"集群就是使用网络将若干台计算机联通起来，并提供统一的管理方式，使其对外呈现单机的服务效果\",\"集群作用：\",\"分散单台服务器的访问压力，实现负载均衡\",\"分散单台服务器的存储压力，实现可扩展性\",\"降低单台服务器宕机带来的业务灾难\"]},\"185\":{\"h\":\"4.2 Cluster集群结构设计\",\"t\":[\"数据存储设计：\",\"通过算法设计，计算出key应该保存的位置\",\"将所有的存储空间计划切割成16384份，每台主机保存一部分\",\"注意：每份代表的是一个存储空间，不是一个key的保存空间\",\"将key按照计算出的结果放到对应的存储空间\",\"那redis的集群是如何增强可扩展性的呢？譬如我们要增加一个集群节点\",\"当我们查找数据时，集群是如何操作的呢？\",\"各个数据库相互通信，保存各个库中槽的编号数据\",\"一次命中，直接返回\",\"一次未命中，告知具体位置\"]},\"186\":{\"h\":\"4.3 Cluster集群结构搭建\",\"t\":[\"首先要明确的几个要点：\",\"配置服务器（3主3从）\",\"建立通信（Meet）\",\"分槽（Slot）\",\"搭建主从（master-slave）\",\"Cluster配置\",\"是否启用cluster，加入cluster节点\",\"cluster-enabled yes|no\",\"cluster配置文件名，该文件属于自动生成，仅用于快速查找文件并查询文件内容\",\"cluster-config-file filename\",\"节点服务响应超时时间，用于判定该节点是否下线或切换为从节点\",\"cluster-node-timeout milliseconds\",\"master连接的slave最小数量\",\"cluster-migration-barrier min_slave_number\",\"Cluster节点操作命令\",\"查看集群节点信息\",\"cluster nodes\",\"更改slave指向新的master\",\"cluster replicate master-id\",\"发现一个新节点，新增master\",\"cluster meet ip:port\",\"忽略一个没有solt的节点\",\"cluster forget server_id\",\"手动故障转移\",\"cluster failover\",\"集群操作命令：\",\"创建集群\",\"redis-cli –-cluster create masterhost1:masterport1 masterhost2:masterport2 masterhost3:masterport3 [masterhostn:masterportn …] slavehost1:slaveport1 slavehost2:slaveport2 slavehost3:slaveport3 -–cluster-replicas n\",\"注意：master与slave的数量要匹配，一个master对应n个slave，由最后的参数n决定\",\"master与slave的匹配顺序为第一个master与前n个slave分为一组，形成主从结构\",\"添加master到当前集群中，连接时可以指定任意现有节点地址与端口\",\"redis-cli --cluster add-node new-master-host:new-master-port now-host:now-port\",\"添加slave\",\"redis-cli --cluster add-node new-slave-host:new-slave-port master-host:master-port --cluster-slave --cluster-master-id masterid\",\"删除节点，如果删除的节点是master，必须保障其中没有槽slot\",\"redis-cli --cluster del-node del-slave-host:del-slave-port del-slave-id\",\"重新分槽，分槽是从具有槽的master中划分一部分给其他master，过程中不创建新的槽\",\"redis-cli --cluster reshard new-master-host:new-master:port --cluster-from src- master-id1, src-master-id2, src-master-idn --cluster-to target-master-id -- cluster-slots slots\",\"注意：将需要参与分槽的所有masterid不分先后顺序添加到参数中，使用，分隔\",\"指定目标得到的槽的数量，所有的槽将平均从每个来源的master处获取\",\"重新分配槽，从具有槽的master中分配指定数量的槽到另一个master中，常用于清空指定master中的槽\",\"redis-cli --cluster reshard src-master-host:src-master-port --cluster-from src- master-id --cluster-to target-master-id --cluster-slots slots --cluster-yes\"]},\"187\":{\"h\":\"3. Redis面试题\"},\"188\":{\"h\":\"企业级解决方案\"},\"189\":{\"h\":\"缓存预热\",\"t\":[\"场景：“宕机”\",\"服务器启动后迅速宕机\",\"问题排查：\",\"1.请求数量较高，大量的请求过来之后都需要去从缓存中获取数据，但是缓存中又没有，此时从数据库中查找数据然后将数据再存入缓存，造成了短期内对redis的高强度操作从而导致问题\",\"2.主从之间数据吞吐量较大，数据同步操作频度较高\",\"解决方案：\",\"前置准备工作：\",\"1.日常例行统计数据访问记录，统计访问频度较高的热点数据\",\"2.利用LRU数据删除策略，构建数据留存队列例如：storm与kafka配合\",\"准备工作：\",\"1.将统计结果中的数据分类，根据级别，redis优先加载级别较高的热点数据\",\"2.利用分布式多服务器同时进行数据读取，提速数据加载过程\",\"3.热点数据主从同时预热\",\"实施：\",\"4.使用脚本程序固定触发数据预热过程\",\"5.如果条件允许，使用了CDN（内容分发网络），效果会更好\",\"总的来说：缓存预热就是系统启动前，提前将相关的缓存数据直接加载到缓存系统。避免在用户请求的时候，先查询数据库，然后再将数据缓存的问题！用户直接查询事先被预热的缓存数据！\"]},\"190\":{\"h\":\"缓存雪崩\",\"t\":[\"场景：数据库服务器崩溃，一连串的场景会随之儿来\",\"1.系统平稳运行过程中，忽然数据库连接量激增\",\"2.应用服务器无法及时处理请求\",\"3.大量408，500错误页面出现\",\"4.客户反复刷新页面获取数据\",\"5.数据库崩溃\",\"6.应用服务器崩溃\",\"7.重启应用服务器无效\",\"8.Redis服务器崩溃\",\"9.Redis集群崩溃\",\"10.重启数据库后再次被瞬间流量放倒\",\"问题排查：\",\"1.在一个较短的时间内，缓存中较多的key集中过期\",\"2.此周期内请求访问过期的数据，redis未命中，redis向数据库获取数据\",\"3.数据库同时接收到大量的请求无法及时处理\",\"4.Redis大量请求被积压，开始出现超时现象\",\"5.数据库流量激增，数据库崩溃\",\"6.重启后仍然面对缓存中无数据可用\",\"7.Redis服务器资源被严重占用，Redis服务器崩溃\",\"8.Redis集群呈现崩塌，集群瓦解\",\"9.应用服务器无法及时得到数据响应请求，来自客户端的请求数量越来越多，应用服务器崩溃\",\"10.应用服务器，redis，数据库全部重启，效果不理想\",\"总而言之就两点：短时间范围内，大量key集中过期\",\"解决方案\",\"思路：\",\"1.更多的页面静态化处理\",\"2.构建多级缓存架构\",\"Nginx缓存+redis缓存+ehcache缓存 \",\"3.检测Mysql严重耗时业务进行优化\",\"对数据库的瓶颈排查：例如超时查询、耗时较高事务等 \",\"4.灾难预警机制\",\"监控redis服务器性能指标 CPU占用、CPU使用率 内存容量 查询平均响应时间 线程数 \",\"5.限流、降级\",\"短时间范围内牺牲一些客户体验，限制一部分请求访问，降低应用服务器压力，待业务低速运转后再逐步放开访问\",\"落地实践：\",\"1.LRU与LFU切换\",\"2.数据有效期策略调整\",\"根据业务数据有效期进行分类错峰，A类90分钟，B类80分钟，C类70分钟 过期时间使用固定时间+随机值的形式，稀释集中到期的key的数量 \",\"3.超热数据使用永久key\",\"4.定期维护（自动+人工）\",\"对即将过期数据做访问量分析，确认是否延时，配合访问量统计，做热点数据的延时 \",\"5.加锁：慎用！\",\"总的来说：缓存雪崩就是瞬间过期数据量太大，导致对数据库服务器造成压力。如能够有效避免过期时间集中，可以有效解决雪崩现象的 出现（约40%），配合其他策略一起使用，并监控服务器的运行数据，根据运行记录做快速调整。\"]},\"191\":{\"h\":\"缓存击穿\",\"t\":[\"场景：还是数据库服务器崩溃，但是跟之前的场景有点不太一样\",\"1.系统平稳运行过程中\",\"2.数据库连接量瞬间激增\",\"3.Redis服务器无大量key过期\",\"4.Redis内存平稳，无波动\",\"5.Redis服务器CPU正常\",\"6.数据库崩溃\",\"问题排查：\",\"1.Redis中某个key过期，该key访问量巨大\",\"2.多个数据请求从服务器直接压到Redis后，均未命中\",\"3.Redis在短时间内发起了大量对数据库中同一数据的访问\",\"总而言之就两点：单个key高热数据，key过期\",\"解决方案：\",\"1.预先设定\",\"以电商为例，每个商家根据店铺等级，指定若干款主打商品，在购物节期间，加大此类信息key的过期时长 注意：购物节不仅仅指当天，以及后续若干天，访问峰值呈现逐渐降低的趋势\",\"2.现场调整\",\"监控访问量，对自然流量激增的数据延长过期时间或设置为永久性key \",\"3.后台刷新数据\",\"启动定时任务，高峰期来临之前，刷新数据有效期，确保不丢失 \",\"4.二级缓存\",\"设置不同的失效时间，保障不会被同时淘汰就行 \",\"5.加锁\",\"分布式锁，防止被击穿，但是要注意也是性能瓶颈，慎重！ \",\"总的来说：缓存击穿就是单个高热数据过期的瞬间，数据访问量较大，未命中redis后，发起了大量对同一数据的数据库访问，导致对数 据库服务器造成压力。应对策略应该在业务数据分析与预防方面进行，配合运行监控测试与即时调整策略，毕竟单个key的过 期监控难度较高，配合雪崩处理策略即可。\"]},\"192\":{\"h\":\"缓存穿透\",\"t\":[\"场景：数据库服务器又崩溃了，跟之前的一样吗？\",\"1.系统平稳运行过程中\",\"2.应用服务器流量随时间增量较大\",\"3.Redis服务器命中率随时间逐步降低\",\"4.Redis内存平稳，内存无压力\",\"5.Redis服务器CPU占用激增\",\"6.数据库服务器压力激增\",\"7.数据库崩溃\",\"问题排查：\",\"1.Redis中大面积出现未命中\",\"2.出现非正常URL访问\",\"问题分析：\",\"获取的数据在数据库中也不存在，数据库查询未得到对应数据\",\"Redis获取到null数据未进行持久化，直接返回\",\"下次此类数据到达重复上述过程\",\"出现黑客攻击服务器\",\"解决方案：\",\"1.缓存null\",\"对查询结果为null的数据进行缓存（长期使用，定期清理），设定短时限，例如30-60秒，最高5分钟 \",\"2.白名单策略\",\"提前预热各种分类数据id对应的bitmaps，id作为bitmaps的offset，相当于设置了数据白名单。当加载正常数据时放行，加载异常数据时直接拦截（效率偏低）\",\"使用布隆过滤器（有关布隆过滤器的命中问题对当前状况可以忽略）\",\"2.实施监控\",\"实时监控redis命中率（业务正常范围时，通常会有一个波动值）与null数据的占比 非活动时段波动：通常检测3-5倍，超过5倍纳入重点排查对象 活动时段波动：通常检测10-50倍，超过50倍纳入重点排查对象 根据倍数不同，启动不同的排查流程。然后使用黑名单进行防控（运营） \",\"4.key加密\",\"问题出现后，临时启动防灾业务key，对key进行业务层传输加密服务，设定校验程序，过来的key校验 例如每天随机分配60个加密串，挑选2到3个，混淆到页面数据id中，发现访问key不满足规则，驳回数据访问 \",\"总的来说：缓存击穿是指访问了不存在的数据，跳过了合法数据的redis数据缓存阶段，每次访问数据库，导致对数据库服务器造成压力。通常此类数据的出现量是一个较低的值，当出现此类情况以毒攻毒，并及时报警。应对策略应该在临时预案防范方面多做文章。\",\"无论是黑名单还是白名单，都是对整体系统的压力，警报解除后尽快移除。\"]},\"193\":{\"h\":\"性能指标监控\",\"t\":[\"redis中的监控指标如下：\",\"性能指标：Performance\",\"响应请求的平均时间:\",\"latency\",\"平均每秒处理请求总数\",\"instantaneous_ops_per_sec\",\"缓存查询命中率（通过查询总次数与查询得到非nil数据总次数计算而来）\",\"hit_rate(calculated)\",\"内存指标：Memory\",\"当前内存使用量\",\"used_memory\",\"内存碎片率（关系到是否进行碎片整理）\",\"mem_fragmentation_ratio\",\"为避免内存溢出删除的key的总数量\",\"evicted_keys\",\"基于阻塞操作（BLPOP等）影响的客户端数量\",\"blocked_clients\",\"基本活动指标：Basic_activity\",\"当前客户端连接总数\",\"connected_clients\",\"当前连接slave总数\",\"connected_slaves\",\"最后一次主从信息交换距现在的秒\",\"master_last_io_seconds_ago\",\"key的总数\",\"keyspace\",\"持久性指标：Persistence\",\"当前服务器最后一次RDB持久化的时间\",\"rdb_last_save_time\",\"当前服务器最后一次RDB持久化后数据变化总量\",\"rdb_changes_since_last_save\",\"错误指标：Error\",\"被拒绝连接的客户端总数（基于达到最大连接值的因素）\",\"rejected_connections\",\"key未命中的总次数\",\"keyspace_misses\",\"主从断开的秒数\",\"master_link_down_since_seconds\",\"要对redis的相关指标进行监控，我们可以采用一些用具：\",\"CloudInsight Redis\",\"Prometheus\",\"Redis-stat\",\"Redis-faina\",\"RedisLive\",\"zabbix\",\"也有一些命令工具：\",\"benchmark\",\"测试当前服务器的并发性能\",\"redis-benchmark [-h ] [-p ] [-c ] [-n <requests]> [-k ]\",\"范例1：50个连接，10000次请求对应的性能\",\"redis-benchmark\",\"范例2：100个连接，5000次请求对应的性能\",\"redis-benchmark -c 100 -n 5000\",\"redis-cli\",\"monitor：启动服务器调试信息\",\"monitor\",\"slowlog：慢日志 \",\"获取慢查询日志\",\"slowlog [operator]\",\"get ：获取慢查询日志信息\",\"len ：获取慢查询日志条目数\",\"reset ：重置慢查询日志\",\"相关配置\",\"slowlog-log-slower-than 1000 #设置慢查询的时间下线，单位：微妙 slowlog-max-len 100 #设置慢查询命令对应的日志显示长度，单位：命令数\"]},\"194\":{\"h\":\"4. Redis命令参考\"},\"195\":{\"h\":\"概述\",\"t\":[\"Redis是一个基于内存的键值对数据库，提供了丰富的命令集来操作数据。本章节将详细介绍Redis的常用命令，包括基础命令、数据类型相关命令以及高级命令，帮助开发者快速掌握Redis的使用技巧。\"]},\"196\":{\"h\":\"知识要点\"},\"197\":{\"h\":\"1. 基础命令\"},\"198\":{\"h\":\"1.1 连接命令\",\"t\":[\"# 连接到Redis服务器 redis-cli -h host -p port -a password # 切换数据库 SELECT index # 查看当前数据库中的key数量 DBSIZE # 清空当前数据库 FLUSHDB # 清空所有数据库 FLUSHALL\"]},\"199\":{\"h\":\"1.2 键命令\",\"t\":[\"# 查看所有键 KEYS pattern # 检查键是否存在 EXISTS key # 删除键 DEL key1 key2 ... # 重命名键 RENAME key newkey # 查看键的类型 TYPE key # 设置键的过期时间(秒) EXPIRE key seconds # 设置键的过期时间(毫秒) PEXPIRE key milliseconds # 查看键的剩余生存时间(秒) TTL key # 查看键的剩余生存时间(毫秒) PTTL key # 移除键的过期时间 PERSIST key\"]},\"200\":{\"h\":\"2. 字符串命令\",\"t\":[\"# 设置键值 SET key value # 设置键值及过期时间 SET key value EX seconds SET key value PX milliseconds # 获取键值 GET key # 递增数值 INCR key # 递减数值 DECR key # 增加指定数值 INCRBY key increment # 减少指定数值 DECRBY key decrement # 追加字符串 APPEND key value # 获取字符串长度 STRLEN key # 获取子字符串 GETRANGE key start end # 设置子字符串 SETRANGE key offset value\"]},\"201\":{\"h\":\"3. 哈希命令\",\"t\":[\"# 设置哈希字段值 HSET key field value # 获取哈希字段值 HGET key field # 获取多个哈希字段值 HMGET key field1 field2 ... # 设置多个哈希字段值 HMSET key field1 value1 field2 value2 ... # 查看哈希中是否存在指定字段 HEXISTS key field # 删除哈希中的字段 HDEL key field1 field2 ... # 获取哈希中字段的数量 HLEN key # 获取哈希中所有字段 HKEYS key # 获取哈希中所有值 HVALS key # 获取哈希中所有字段和值 HGETALL key # 哈希字段值递增 HINCRBY key field increment\"]},\"202\":{\"h\":\"4. 列表命令\",\"t\":[\"# 在列表头部添加元素 LPUSH key value1 value2 ... # 在列表尾部添加元素 RPUSH key value1 value2 ... # 在列表头部移除并返回元素 LPOP key # 在列表尾部移除并返回元素 RPOP key # 获取列表长度 LLEN key # 获取列表指定范围内的元素 LRANGE key start stop # 移除列表中指定值的元素 LREM key count value # 截取列表 LTRIM key start stop # 获取列表指定索引位置的元素 LINDEX key index # 设置列表指定索引位置的元素 LSET key index value\"]},\"203\":{\"h\":\"5. 集合命令\",\"t\":[\"# 向集合中添加元素 SADD key member1 member2 ... # 从集合中移除元素 SREM key member1 member2 ... # 查看集合中的元素 SMEMBERS key # 检查元素是否在集合中 SISMEMBER key member # 获取集合的大小 SCARD key # 计算两个集合的交集 SINTER key1 key2 # 计算两个集合的并集 SUNION key1 key2 # 计算两个集合的差集 SDIFF key1 key2 # 随机获取集合中的一个元素 SRANDMEMBER key # 随机移除并返回集合中的一个元素 SPOP key\"]},\"204\":{\"h\":\"6. 有序集合命令\",\"t\":[\"# 向有序集合中添加元素 ZADD key score1 member1 score2 member2 ... # 从有序集合中移除元素 ZREM key member1 member2 ... # 获取有序集合的大小 ZCARD key # 获取有序集合中指定范围内的元素 ZRANGE key start stop [WITHSCORES] # 获取有序集合中指定分数范围内的元素 ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count] # 获取元素在有序集合中的排名 ZRANK key member # 获取元素在有序集合中的分数 ZSCORE key member # 增加有序集合中元素的分数 ZINCRBY key increment member # 计算两个有序集合的交集 ZINTERSTORE destination numkeys key1 key2 ... [WEIGHTS weight1 weight2 ...] [AGGREGATE SUM|MIN|MAX] # 计算两个有序集合的并集 ZUNIONSTORE destination numkeys key1 key2 ... [WEIGHTS weight1 weight2 ...] [AGGREGATE SUM|MIN|MAX]\"]},\"205\":{\"h\":\"7. 高级命令\"},\"206\":{\"h\":\"7.1 事务命令\",\"t\":[\"# 开始事务 MULTI # 执行事务 EXEC # 取消事务 DISCARD # 监视键 WATCH key1 key2 ... # 取消监视 UNWATCH\"]},\"207\":{\"h\":\"7.2 持久化命令\",\"t\":[\"# 同步保存数据到磁盘 SAVE # 异步保存数据到磁盘 BGSAVE # 查看AOF日志重写进度 BGREWRITEAOF # 查看持久化信息 INFO persistence\"]},\"208\":{\"h\":\"7.3 集群命令\",\"t\":[\"# 查看节点信息 CLUSTER INFO # 查看节点列表 CLUSTER NODES # 创建集群 CLUSTER MEET ip port # 分配槽位 CLUSTER ADDSLOTS slot1 slot2 ... # 迁移槽位 CLUSTER SETSLOT slot IMPORTING node-id\"]},\"209\":{\"h\":\"知识扩展\"},\"210\":{\"h\":\"1. 设计思想\",\"t\":[\"Redis的命令设计遵循了以下原则：\",\"简洁明了：命令名称通常是描述性的英文单词或缩写，易于记忆和使用。\",\"一致性：相同类型的命令具有相似的格式和行为。\",\"高效性：命令被设计为尽可能高效地执行，减少网络传输和内存使用。\",\"灵活性：许多命令支持多种参数组合，以适应不同的使用场景。\"]},\"211\":{\"h\":\"2. 避坑指南\",\"t\":[\"KEYS命令慎用：在生产环境中，应避免使用KEYS *命令，因为它会遍历所有键，可能导致Redis服务器阻塞。\",\"过期时间设置：设置过期时间时，应根据业务需求合理设置，避免过短或过长的过期时间。\",\"事务注意事项：Redis的事务不是原子的，如果其中一个命令失败，其他命令仍然会执行。\",\"内存管理：应监控Redis的内存使用情况，避免内存溢出。\",\"批量操作：对于大量数据的操作，应使用批量命令（如HMSET、MSET等），减少网络开销。\"]},\"212\":{\"h\":\"3. 深度思考题\",\"t\":[\"为什么Redis的命令通常是大写的？\",\"回答：Redis的命令通常是大写的，这是一种约定俗成的做法，有助于区分命令和参数。在实际使用中，Redis也支持小写命令，但大写命令更符合行业惯例。\",\"什么是Redis的惰性删除策略？\",\"回答：Redis的惰性删除策略是指，当数据到达过期时间时，不立即删除，而是等到下次访问该数据时才检查是否过期，如果已过期则删除。这种策略可以减少CPU的开销，但可能会导致内存占用过高。\",\"如何优化Redis的命令执行效率？\",\"回答：优化Redis的命令执行效率可以从以下几个方面入手：\",\"使用批量命令减少网络开销\",\"避免在Redis中执行复杂的计算\",\"合理设置过期时间\",\"使用管道（pipeline）技术减少网络往返次数\",\"优化数据结构选择，根据业务场景选择合适的数据类型\",\"什么是Redis的管道技术？\",\"回答：Redis的管道技术允许客户端一次性发送多个命令，而不需要等待每个命令的响应。这样可以减少网络往返次数，提高吞吐量。管道技术特别适合于需要执行大量命令的场景。\"]},\"213\":{\"h\":\"M1 Docker各应用安装（汇总）\"},\"214\":{\"h\":\"Docker安装Nginx\"},\"215\":{\"h\":\"1、安装Nginx镜像\",\"t\":[\"docker pull nginx\"]},\"216\":{\"h\":\"2、创建Nginx容器\",\"t\":[\"docker run -it -d \\\\ --name nginx \\\\ -p 80:80 \\\\ -v /home/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \\\\ -v /home/nginx/www:/home/nginx/www \\\\ -v /home/nginx/logs:/var/log/nginx \\\\ --privileged --net=host nginx\",\"配置文件要先在宿主机创建好\",\"其中 /home/nginx/www 表示存放的打包的资源根目录\",\"#nginx.conf配置 worker_processes 1; events { worker_connections 1024; } http { include mime.types; default_type application/octet-stream; sendfile on; #tcp_nopush on; #keepalive_timeout 0; keepalive_timeout 65; #gzip on; server { listen 9999; server_name localhost; # Vue路由模式为history需添加的配置 location / { if (!-e $request_filename) { rewrite ^(.*)$ /index.html?s=$1 last; break; } root /home/nginx/www; index index.html; } # 获取真实IP以及Websocket需添加的配置 proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header REMOTE-HOST $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \\\"upgrade\\\"; # 客户端Body大小限制（文件上传大小限制配置） client_max_body_size 5m; error_page 500 502 503 504 404 /50x.html; location = /50x.html { root html; } } }\"]},\"217\":{\"h\":\"Docker安装Redis\"},\"218\":{\"h\":\"1、安装 Redis 镜像\",\"t\":[\"docker pull redis:latest\"]},\"219\":{\"h\":\"2、运行容器\",\"t\":[\"docker run -itd --name redis-test -p 6379:6379 redis #挂载方式 docker run --restart=always --log-opt max-size=100m --log-opt max-file=2 -p 6379:6379 --name myredis -v /Users/ldf/app/dockerVolume/redis/config/redis.conf:/etc/redis/redis.conf -v /Users/ldf/app/dockerVolume/redis/config/data:/data -d redis redis-server /etc/redis/redis.conf --appendonly yes --requirepass 123456\",\"3、进入容器\",\"docker exec -it redis-test /bin/bash #设置密码 cd /usr/local/bin ./redis-cli #查看密码 config get requirepass #设置密码 config set requirepass 123456 #验证 auth 123456\",\"4、命令行设置的密码在服务重启后失效，所以一般不使用这种方式。\",\"在redis根目录下找到redis.windows.conf配置文件，搜索requirepass，找到注释密码行，添加密码如下：\",\"# requirepass foobared requirepass tenny //注意，行前不能有空格 #设置不生效，知道配置文件启动 redis-server.exe redis.windows.conf\"]},\"220\":{\"h\":\"Docker安装Mongo\"},\"221\":{\"h\":\"1、安装MongoDB 镜像\",\"t\":[\"docker pull mongo:latest\"]},\"222\":{\"h\":\"2、运行 mongo 容器：\",\"t\":[\"docker run -itd --name mongo -p 27017:27017 mongo --auth\"]},\"223\":{\"h\":\"3、进入容器创建密码\",\"t\":[\"docker exec -it mongo mongo admin # 创建一个名为 admin，密码为 123456 的用户。 > db.createUser({ user:'admin',pwd:'123456',roles:[ { role:'userAdminAnyDatabase', db: 'admin'},\\\"readWriteAnyDatabase\\\"]}); # 尝试使用上面创建的用户信息进行连接。 > db.auth('admin', '123456')\"]},\"224\":{\"h\":\"Docker安装Mysql\",\"t\":[\"M1芯片是arm64架构，也称作aarch64架构，只能运行arm64/aarch64架构的程序\"]},\"225\":{\"h\":\"1、拉取镜像\",\"t\":[\"docker pull mysql/mysql-server:latest\"]},\"226\":{\"h\":\"2、创建并启动MySQL服务容器\",\"t\":[\"docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql/mysql-server\"]},\"227\":{\"h\":\"3、修改mysql访问权限\",\"t\":[\"这时使用宿主机连接没有授权访问，需要进入mysql修改mysql访问权限。\",\"docker exec -it mysql bash mysql -u root -p 123456\"]},\"228\":{\"h\":\"4、授权\",\"t\":[\"CREATE USER 'root'@'%' IDENTIFIED BY 'root'; GRANT ALL ON *.* TO 'root'@'%';\"]},\"229\":{\"h\":\"5、修改root用户密码\",\"t\":[\"ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY '123456';\"]},\"230\":{\"h\":\"6、刷新权限\",\"t\":[\"flush privileges;\"]},\"231\":{\"h\":\"Docker安装Nacos\"},\"232\":{\"h\":\"脚本\",\"t\":[\"将脚本写入mysql库中\",\"/******************************************/ /* 数据库全名 = nacos_config */ /* 表名称 = config_info */ /******************************************/ CREATE TABLE `config_info` ( `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id', `data_id` varchar(255) NOT NULL COMMENT 'data_id', `group_id` varchar(255) DEFAULT NULL, `content` longtext NOT NULL COMMENT 'content', `md5` varchar(32) DEFAULT NULL COMMENT 'md5', `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间', `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间', `src_user` text COMMENT 'source user', `src_ip` varchar(50) DEFAULT NULL COMMENT 'source ip', `app_name` varchar(128) DEFAULT NULL, `tenant_id` varchar(128) DEFAULT '' COMMENT '租户字段', `c_desc` varchar(256) DEFAULT NULL, `c_use` varchar(64) DEFAULT NULL, `effect` varchar(64) DEFAULT NULL, `type` varchar(64) DEFAULT NULL, `c_schema` text, PRIMARY KEY (`id`), UNIQUE KEY `uk_configinfo_datagrouptenant` (`data_id`,`group_id`,`tenant_id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='config_info'; /******************************************/ /* 数据库全名 = nacos_config */ /* 表名称 = config_info_aggr */ /******************************************/ CREATE TABLE `config_info_aggr` ( `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id', `data_id` varchar(255) NOT NULL COMMENT 'data_id', `group_id` varchar(255) NOT NULL COMMENT 'group_id', `datum_id` varchar(255) NOT NULL COMMENT 'datum_id', `content` longtext NOT NULL COMMENT '内容', `gmt_modified` datetime NOT NULL COMMENT '修改时间', `app_name` varchar(128) DEFAULT NULL, `tenant_id` varchar(128) DEFAULT '' COMMENT '租户字段', PRIMARY KEY (`id`), UNIQUE KEY `uk_configinfoaggr_datagrouptenantdatum` (`data_id`,`group_id`,`tenant_id`,`datum_id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='增加租户字段'; /******************************************/ /* 数据库全名 = nacos_config */ /* 表名称 = config_info_beta */ /******************************************/ CREATE TABLE `config_info_beta` ( `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id', `data_id` varchar(255) NOT NULL COMMENT 'data_id', `group_id` varchar(128) NOT NULL COMMENT 'group_id', `app_name` varchar(128) DEFAULT NULL COMMENT 'app_name', `content` longtext NOT NULL COMMENT 'content', `beta_ips` varchar(1024) DEFAULT NULL COMMENT 'betaIps', `md5` varchar(32) DEFAULT NULL COMMENT 'md5', `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间', `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间', `src_user` text COMMENT 'source user', `src_ip` varchar(50) DEFAULT NULL COMMENT 'source ip', `tenant_id` varchar(128) DEFAULT '' COMMENT '租户字段', PRIMARY KEY (`id`), UNIQUE KEY `uk_configinfobeta_datagrouptenant` (`data_id`,`group_id`,`tenant_id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='config_info_beta'; /******************************************/ /* 数据库全名 = nacos_config */ /* 表名称 = config_info_tag */ /******************************************/ CREATE TABLE `config_info_tag` ( `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id', `data_id` varchar(255) NOT NULL COMMENT 'data_id', `group_id` varchar(128) NOT NULL COMMENT 'group_id', `tenant_id` varchar(128) DEFAULT '' COMMENT 'tenant_id', `tag_id` varchar(128) NOT NULL COMMENT 'tag_id', `app_name` varchar(128) DEFAULT NULL COMMENT 'app_name', `content` longtext NOT NULL COMMENT 'content', `md5` varchar(32) DEFAULT NULL COMMENT 'md5', `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间', `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间', `src_user` text COMMENT 'source user', `src_ip` varchar(50) DEFAULT NULL COMMENT 'source ip', PRIMARY KEY (`id`), UNIQUE KEY `uk_configinfotag_datagrouptenanttag` (`data_id`,`group_id`,`tenant_id`,`tag_id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='config_info_tag'; /******************************************/ /* 数据库全名 = nacos_config */ /* 表名称 = config_tags_relation */ /******************************************/ CREATE TABLE `config_tags_relation` ( `id` bigint(20) NOT NULL COMMENT 'id', `tag_name` varchar(128) NOT NULL COMMENT 'tag_name', `tag_type` varchar(64) DEFAULT NULL COMMENT 'tag_type', `data_id` varchar(255) NOT NULL COMMENT 'data_id', `group_id` varchar(128) NOT NULL COMMENT 'group_id', `tenant_id` varchar(128) DEFAULT '' COMMENT 'tenant_id', `nid` bigint(20) NOT NULL AUTO_INCREMENT, PRIMARY KEY (`nid`), UNIQUE KEY `uk_configtagrelation_configidtag` (`id`,`tag_name`,`tag_type`), KEY `idx_tenant_id` (`tenant_id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='config_tag_relation'; /******************************************/ /* 数据库全名 = nacos_config */ /* 表名称 = group_capacity */ /******************************************/ CREATE TABLE `group_capacity` ( `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT '主键ID', `group_id` varchar(128) NOT NULL DEFAULT '' COMMENT 'Group ID，空字符表示整个集群', `quota` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '配额，0表示使用默认值', `usage` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '使用量', `max_size` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '单个配置大小上限，单位为字节，0表示使用默认值', `max_aggr_count` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '聚合子配置最大个数，，0表示使用默认值', `max_aggr_size` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值', `max_history_count` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '最大变更历史数量', `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间', `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间', PRIMARY KEY (`id`), UNIQUE KEY `uk_group_id` (`group_id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='集群、各Group容量信息表'; /******************************************/ /* 数据库全名 = nacos_config */ /* 表名称 = his_config_info */ /******************************************/ CREATE TABLE `his_config_info` ( `id` bigint(64) unsigned NOT NULL, `nid` bigint(20) unsigned NOT NULL AUTO_INCREMENT, `data_id` varchar(255) NOT NULL, `group_id` varchar(128) NOT NULL, `app_name` varchar(128) DEFAULT NULL COMMENT 'app_name', `content` longtext NOT NULL, `md5` varchar(32) DEFAULT NULL, `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP, `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP, `src_user` text, `src_ip` varchar(50) DEFAULT NULL, `op_type` char(10) DEFAULT NULL, `tenant_id` varchar(128) DEFAULT '' COMMENT '租户字段', PRIMARY KEY (`nid`), KEY `idx_gmt_create` (`gmt_create`), KEY `idx_gmt_modified` (`gmt_modified`), KEY `idx_did` (`data_id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='多租户改造'; /******************************************/ /* 数据库全名 = nacos_config */ /* 表名称 = tenant_capacity */ /******************************************/ CREATE TABLE `tenant_capacity` ( `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT '主键ID', `tenant_id` varchar(128) NOT NULL DEFAULT '' COMMENT 'Tenant ID', `quota` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '配额，0表示使用默认值', `usage` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '使用量', `max_size` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '单个配置大小上限，单位为字节，0表示使用默认值', `max_aggr_count` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '聚合子配置最大个数', `max_aggr_size` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值', `max_history_count` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '最大变更历史数量', `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间', `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间', PRIMARY KEY (`id`), UNIQUE KEY `uk_tenant_id` (`tenant_id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='租户容量信息表'; CREATE TABLE `tenant_info` ( `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id', `kp` varchar(128) NOT NULL COMMENT 'kp', `tenant_id` varchar(128) default '' COMMENT 'tenant_id', `tenant_name` varchar(128) default '' COMMENT 'tenant_name', `tenant_desc` varchar(256) DEFAULT NULL COMMENT 'tenant_desc', `create_source` varchar(32) DEFAULT NULL COMMENT 'create_source', `gmt_create` bigint(20) NOT NULL COMMENT '创建时间', `gmt_modified` bigint(20) NOT NULL COMMENT '修改时间', PRIMARY KEY (`id`), UNIQUE KEY `uk_tenant_info_kptenantid` (`kp`,`tenant_id`), KEY `idx_tenant_id` (`tenant_id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='tenant_info'; CREATE TABLE `users` ( `username` varchar(50) NOT NULL PRIMARY KEY, `password` varchar(500) NOT NULL, `enabled` boolean NOT NULL ); CREATE TABLE `roles` ( `username` varchar(50) NOT NULL, `role` varchar(50) NOT NULL, UNIQUE INDEX `idx_user_role` (`username` ASC, `role` ASC) USING BTREE ); CREATE TABLE `permissions` ( `role` varchar(50) NOT NULL, `resource` varchar(255) NOT NULL, `action` varchar(8) NOT NULL, UNIQUE INDEX `uk_role_permission` (`role`,`resource`,`action`) USING BTREE ); INSERT INTO users (username, password, enabled) VALUES ('nacos', '$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu', TRUE); INSERT INTO roles (username, role) VALUES ('nacos', 'ROLE_ADMIN');\"]},\"233\":{\"h\":\"2.拉取支持M1芯片的镜像\",\"t\":[\"这里选择zhusaidong/nacos-server-m1的镜像，官方的版本同样也是不支持M1芯片的\",\"docker pull zhusaidong/nacos-server-m1:2.0.3 #要带上版本号，默认latest拉取不下来\"]},\"234\":{\"h\":\"3、启动容器\",\"t\":[\"这里以单点的模式为例,Docker启动需要暴露8848 9848 9849三个端口\",\"docker run --env MODE=standalone --name nacos2.0.3 -d -p 8848:8848 -p 9848:9848 -p 9849:9849 zhusaidong/nacos-server-m1:2.0.3 #建议挂载配置文件和日志信息，方便直接在宿主机修改配置信息 docker run --name nacos -p 8848:8848 \\\\ --privileged=true \\\\ --restart=always \\\\ -e JVM_XMS=256m \\\\ -e JVM_XMX=256m \\\\ -e MODE=standalone \\\\ -e PREFER_HOST_MODE=hostname \\\\ -v /Users/ldf/app/dockerVolume/nacos/logs:/home/nacos/logs \\\\ -v /Users/ldf/app/dockerVolume/nacos/conf/application.properties:/home/nacos/conf/application.properties \\\\ -d zhusaidong/nacos-server-m1:2.0.3\"]},\"235\":{\"h\":\"4、进入容器修改yml文件\",\"t\":[\"cd /conf vim application.properties\",\"#修改数据源配置 # spring server.servlet.contextPath=${SERVER_SERVLET_CONTEXTPATH:/nacos} server.contextPath=/nacos server.port=${NACOS_APPLICATION_PORT:8848} spring.datasource.platform=mysql nacos.cmdb.dumpTaskInterval=3600 nacos.cmdb.eventTaskInterval=10 nacos.cmdb.labelTaskInterval=300 nacos.cmdb.loadDataAtStart=false db.num=${MYSQL_DATABASE_NUM:1} db.url.0=jdbc:mysql://host.docker.internal:3306/nacos_config?characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true&useUnicode=true&useSSL=false&serverTimezone=UTC #db.url.1=jdbc:mysql://${MYSQL_SERVICE_HOST}:${MYSQL_SERVICE_PORT:3306}/${MYSQL_SERVICE_DB_NAME}?${MYSQL_SERVICE_DB_PARAM:characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true&useSSL=false} db.user=root db.password=123456 ### The auth system to use, currently only 'nacos' is supported: nacos.core.auth.system.type=${NACOS_AUTH_SYSTEM_TYPE:nacos}\"]},\"236\":{\"h\":\"5、重新启动容器，登录控制台\",\"t\":[\"http://127.0.0.1:8848/nacos 初始账密nacos/nacos\"]},\"237\":{\"h\":\"Docker安装Seata\",\"t\":[\"seata启动成功但是没日志，也一直注册不到nacos注册中心\",\"原因：用的镜像不对，得用适配m1芯片的seata镜像\",\"下载适配m1芯片的seata镜像，地址如下：https://hub.docker.com/r/fancyfong/seata/tags\"]},\"238\":{\"h\":\"1、拉取镜像\",\"t\":[\"docker pull fancyfong/seata:1.4.1_arm64\"]},\"239\":{\"h\":\"2、运行\",\"t\":[\"docker run --name seata-server -p 8091:8091 -d fancyfong/seata:1.4.1_arm64\"]},\"240\":{\"h\":\"3、将容器的文件同步到宿主机\",\"t\":[\"docker cp seata-server:/seata-server /home/dockerdata/seata\"]},\"241\":{\"h\":\"容器\",\"t\":[\"docker stop seata-server docker rm seata-server\"]},\"242\":{\"h\":\"5、重新生成新seata 容器\",\"t\":[\"docker run -d --restart always --name seata-server -p 8091:8091 -v /home/dockerdata/seata/seata-server:/seata-server -e SEATA_IP=127.0.0.1 -e SEATA_PORT=8091 fancyfong/seata:1.4.1_arm64\",\"-d --restart always 开机自启； --name seata-server 容器名 -p 8091:8091 端口映射 -v /home/dockerdata/seata/seata-server:/seata-server 宿主机 目录/home/dockerdata/seata/seata-server与seata容器目录/seata-server形成docker容器数据卷，数据互通 -e SEATA_IP=127.0.0.1 可选, 指定seata-server启动的IP -e SEATA_PORT=8091 可选, 指定seata-server启动的端口, 默认为 8091\"]},\"243\":{\"h\":\"6、进入数据卷\",\"t\":[\"/home/dockerdata/seata/seata-server/resources修改文件registry.conf\",\"cd /home/dockerdata/seata/seata-server/resources vim registry.conf\"]},\"244\":{\"h\":\"7、重启\",\"t\":[\"docker restart seata-server\"]},\"245\":{\"h\":\"8、验证\",\"t\":[\"​ 查看日志\",\"docker logs seata-server\"]},\"246\":{\"h\":\"Docker安装RocketMQ\",\"t\":[\"基础环境：mac M1\",\"本地docker版本：20.10.6\"]},\"247\":{\"h\":\"下载官方Dockerfile\",\"t\":[\"git clone https://github.com/apache/rocketmq-docker.git\"]},\"248\":{\"h\":\"1、选择M1适合的版本\",\"t\":[\"cd image-build sh build-image.sh RMQ-VERSION BASE-IMAGE (我执行的:sh build-image.sh 4.8.0 alpine ) sh build-image.sh 4.8.0 alpine\",\"这里由于下载速度慢,需要等好一会\"]},\"249\":{\"h\":\"2、编写broker.conf\",\"t\":[\"brokerClusterName = DefaultCluster brokerName = broker-a brokerId = 0 deleteWhen = 04 fileReservedTime = 48 brokerRole = ASYNC_MASTER flushDiskType = ASYNC_FLUSH namesrvAddr=127.0.0.1:9876 # 本机局域网IP(自己的局域网ip，非localhost) brokerIP1= 192.168.31.73\"]},\"250\":{\"h\":\"3、进行Docker编排\",\"t\":[\"修改自定义好的broker.conf路径\",\"version: '3' services: # rocketmq namesrv: image: apacherocketmq/rocketmq:4.8.0-alpine container_name: rmqnamesrv restart: on-failure ports: - 9876:9876 environment: JAVA_OPT: -server -Xms256m -Xmx256m command: sh mqnamesrv broker: image: apacherocketmq/rocketmq:4.8.0-alpine container_name: rmqbroker restart: on-failure ports: - 10909:10909 - 10911:10911 - 10912:10912 volumes: # 自定义的编写broker.conf路径 - ./rocketmq/broker/conf/broker.conf:/home/rocketmq/rocketmq-4.8.0/conf/broker.conf command: sh mqbroker -n namesrv:9876 -c /home/rocketmq/rocketmq-4.8.0/conf/broker.conf depends_on: - namesrv rocketmq-console: image: candice0630/rocketmq-console-ng:2.0 container_name: rmqconsole restart: on-failure ports: - 19876:8080 environment: JAVA_OPTS: -Drocketmq.config.namesrvAddr=namesrv:9876 -Drocketmq.config.isVIPChannel=false depends_on: - namesrv\",\"运行文件\",\"docker-compose -f rocketmq.yml -p rocketMQ up -d\",\"image-20220926154916024\"]},\"251\":{\"h\":\"4、访问console\",\"t\":[\"http://localhost:19876\",\"image-20220926154944976\"]},\"252\":{\"h\":\"Docker安装RabbitMq\"},\"253\":{\"h\":\"1.查找镜像\",\"t\":[\"docker search rabbitMq\"]},\"254\":{\"h\":\"2.拉取镜像\",\"t\":[\"docker pull rabbitmq\"]},\"255\":{\"h\":\"3.查看镜像、启动并配置映射\",\"t\":[\"docker images docker run \\\\ -e RABBITMQ_DEFAULT_USER=guest \\\\ -e RABBITMQ_DEFAULT_PASS=guest \\\\ --name mq \\\\ --hostname localhost \\\\ -p 15672:15672 \\\\ -p 5672:5672 \\\\ -d \\\\ rabbitmq\"]},\"256\":{\"h\":\"5.开启页面访问\",\"t\":[\"docker ps docker exec -it 2da0 bash rabbitmq-plugins enable rabbitmq_management\"]},\"257\":{\"h\":\"6、访问页面端\",\"t\":[\"http://localhost:15672\",\"username:guest password:guest\",\"image-20220926155229138\"]},\"258\":{\"h\":\"Mac安装Node环境\"},\"259\":{\"h\":\"Mac或Windows安装Node环境\"},\"260\":{\"h\":\"安装node环境\",\"t\":[\"Node官网下载对应系统版本：下载地址\",\"验证是否安装成功：npm是一个NodeJS包管理和分发工具\",\"查看安装版本 node -v npm -v\"]},\"261\":{\"h\":\"更换镜像源\",\"t\":[\"查看初始npm源(默认国外的镜像源地址比较慢改为国内的)\",\"npm config get registry\",\"更换镜像为淘宝镜像\",\"npm config set registry https://registry.npm.taobao.org/\",\"检查配置是否成功\",\"npm config get registry\",\"全局安装基于淘宝源的cnpm（可选）\",\"npm install cnpm@6.1.1 -g\",\"执行命令查看cnpm是否安装成功\",\"cnpm -v\"]},\"262\":{\"h\":\"安装管理Node版本工具\",\"t\":[\"管理Node版本可以使用n或nvm这两种工具\"]},\"263\":{\"h\":\"Windows安装包管理器\",\"t\":[\"Windows安装nvm包管理器(可选)\",\"安装包下载\",\"查看版本：\",\"nvm -v\",\"安装node版本：\",\"nvm install 10.16.0\",\"切换node 版本：\",\"nvm use 8.14.1\"]},\"264\":{\"h\":\"Mac安装包管理器\",\"t\":[\"mac一般都会安装包管理器Homebrew，可以使用 Homebrew 安装 n或nvm:\",\"brew install n brew install nvm\",\"如果你还没有安装Homebrew，先在终端执行以下命令安装Homebrew：\",\"/bin/bash -c \\\"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\\\"\",\"Mac安装n包管理器(可选)\",\"安装 node版本管理工具 n\",\"sudo npm install -g n\",\"检查安装成功：\",\"n --version\",\"安装你需要的版本的node\",\"sudo n <node版本号> 如： sudo n 11.0.0\",\"Mac安装nvm包管理器(可选)\",\"要安装或更新 nvm，需要手动下载并运行脚本，或使用以下 cURL 或 Wget 命令：\",\"cURL下载 curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash Wget下载 wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash\",\"⚠️在执行到这里的时候,可能会产生如下报错fatal: unable to access 'https://github.com/nvm-sh/nvm.git/' 执行以下命令，然后重新执行` cURL 或 Wget 命令\",\"git config --global --unset http.proxy git config --global --unset https.proxy\",\"查看版本：\",\"nvm -v\"]},\"265\":{\"h\":\"扩展命令\",\"t\":[\"// 安装最新版本 sudo n latest // 安装稳定版本 sudo n stable // 删除某个版本 sudo n rm <版本号>\"]},\"266\":{\"h\":\"切换node版本\",\"t\":[\"在macOS上切换Node.js版本，可以使用n或nvm这两种工具\",\"如果你已经安装了n，切换版本的命令如下：\",\"# 切换到Node.js 14.17.0版本 n 14.17.0\",\"如果你使用的是nvm（Node Version Manager），切换版本的命令如下\",\"# 切换到Node.js 14.17.0版本 nvm use 14.17.0\"]},\"267\":{\"h\":\"AOP日志埋点\",\"t\":[\"一、Spring AOP切面方法的执行顺序\",\"@Around 通知方法将目标方法封装起来 @Before 通知方法会在目标方法调用之前执行 @After 通知方法会在目标方法返回或者异常后执行 @AfterReturning 通知方法会在目标方法返回时执行 @Afterthrowing 通知方法会在目标方法抛出异常时执行 这里以一个返回正常的情况为例：（异常替换最后一步即可）\",\"1、自定义注解做打点标记\",\"@documented @Retention(RetentionPolicy.RUNTIME) @Target({ElementType.METHOD}) public @interface ControllerMethodLog { }\",\"2、AOP实现注解标记方法做切面，打印日志信息 注意要在启动类扫描这个class，并且添加 @EnableAspectJAutoProxy(proxyTargetClass = true)\",\"@Slf4j @Component @Aspect public class ControllerMethodLogAspect { @Pointcut(\\\"@annotation(com.xiyuan.demo.annotation.ControllerMethodLog)\\\") public void pointCut() { } @Before(\\\"pointCut()\\\") public void doBefore(JoinPoint joinPoint) { MethodSignature signature = (MethodSignature) joinPoint.getSignature(); Method method = signature.getMethod(); ControllerMethodLog annotation = method.getAnnotation(ControllerMethodLog.class); if (Objects.isNull(annotation)) { return; } String methodName = method.getDeclaringClass().getSimpleName() + \\\".\\\" + method.getName(); log.info(\\\"start {}：入参：{}\\\", methodName, JSON.toJSonString(joinPoint.getArgs())); } @AfterReturning(value = \\\"pointCut()\\\", returning = \\\"result\\\") public void afterReturn(JoinPoint joinPoint, Object result) { MethodSignature signature = (MethodSignature) joinPoint.getSignature(); Method method = signature.getMethod(); ControllerMethodLog annotation = method.getAnnotation(ControllerMethodLog.class); if (Objects.isNull(annotation)) { return; } String methodName = method.getDeclaringClass().getSimpleName() + \\\".\\\" + method.getName(); log.info(\\\"end {}：响应：{}\\\", methodName, JSON.toJSonString(result)); } }\"]},\"268\":{\"h\":\"Excel导出工具类\"},\"269\":{\"h\":\"工具类模板\",\"t\":[\"import com.alibaba.excel.EasyExcel; import com.alibaba.excel.ExcelWriter; import com.alibaba.excel.support.ExcelTypeEnum; import com.alibaba.excel.write.metadata.WriteSheet; import jakarta.servlet.http.HttpServletResponse; import java.io.IOException; import java.net.URLEncoder; import java.nio.charset.StandardCharsets; import java.util.concurrent.ThreadLocalRandom; import java.util.function.Consumer; import java.util.function.Supplier; import java.util.stream.Collectors; import java.util.stream.Stream; /** * Excel 导出工具类 * @author ldf */ public class ExcelExporter { /** * 导出Excel文件 * @param <T> 数据类型 * @param response HttpServletResponse对象 * @param fileName 文件名 * @param dataStreamSupplier 数据流提供者(业务数据查询逻辑,流式输出) * @param clazz 数据类型Class * @param sheetConfigurator Sheet配置器 * @throws IOException IO异常 */ public static <T> void export( HttpServletResponse response, String fileName, Supplier<Stream<? extends T>> dataStreamSupplier, Class<T> clazz, Consumer<WriteSheet> sheetConfigurator) throws IOException { // 设置响应编码 response.setCharacterEncoding(\\\"utf-8\\\"); // 设置文件下载头 response.setHeader(\\\"Content-Disposition\\\", \\\"attachment;filename=\\\" + encodeFileName(fileName)); try (ExcelWriter writer = EasyExcel.write(response.getOutputStream(), clazz).excelType(ExcelTypeEnum.XLS).build(); Stream<T> stream = (Stream<T>) dataStreamSupplier.get()) { // 创建Sheet配置 WriteSheet sheet = EasyExcel.writerSheet(\\\"Sheet1\\\").build(); if (sheetConfigurator != null) { sheetConfigurator.accept(sheet); // 应用自定义Sheet配置 } // 并行写入 stream.collect(Collectors.groupingByConcurrent( item -> ThreadLocalRandom.current().nextInt(4), // 分4个并行组 Collectors.toList() )).values().parallelStream() .forEach(chunk -> writer.write(chunk, sheet)); } } private static String encodeFileName(String name) { return URLEncoder.encode(name, StandardCharsets.UTF_8); } }\"]},\"270\":{\"h\":\"示例代码\",\"t\":[\" @GetMapping(\\\"exportValidReportingErrorLog\\\") public void exportValidReportingErrorLog(@RequestParam String beginTime, @RequestParam String endTime, HttpServletResponse response) throws IOException { String fileName = FeedbackInfoUtil.getFeedBackInfoFileName(beginTime, endTime, \\\"反馈结果-{}-{}.xls\\\"); // 获取业务数据导出 ExcelExporter.export(response, fileName, () -> { List<FeedbackInfo> feedbackInfoList = feedbackInfoUtil.getFeedbackInfoList(beginTime, endTime); return feedbackInfoList.stream(); }, FeedbackInfo.class, writeSheet -> writeSheet.setSheetName(\\\"反馈结果\\\")); }\",\"这个 [ExcelExporter](file:///Users/ldf/app/ideaWorkSpace/zhongzhi/data-bootstrap/src/main/java/cn/devops/utils/ExcelExporter.java#L21-L62) 工具类具有以下几个显著的优点：\"]},\"271\":{\"h\":\"1.\",\"t\":[\"使用 Supplier<Stream<? extends T>> 作为数据源输入，支持流式处理大数据集，避免内存溢出（OOM）\",\"特别适合导出百万级数据，不会一次性加载所有数据到内存\"]},\"272\":{\"h\":\"2.\",\"t\":[\"通过 Collectors.groupingByConcurrent 和 parallelStream() 实现数据分片并行写入\",\"默认分4个并行组（可调整），充分利用多核CPU提高导出速度\"]},\"273\":{\"h\":\"3.\",\"t\":[\"通过 sheetConfigurator 参数支持自定义Sheet配置\",\"可灵活设置表头样式、列宽等Excel特性\"]},\"274\":{\"h\":\"4.\",\"t\":[\"使用 try-with-resources 确保资源自动关闭\",\"明确声明 throws IOException 提醒调用方处理异常\"]},\"275\":{\"h\":\"5.\",\"t\":[\"自动处理文件名编码（支持中文等特殊字符）\",\"正确设置 HTTP 响应头，确保浏览器正确识别下载文件\"]},\"276\":{\"h\":\"6.\",\"t\":[\"使用泛型 <T> 设计，可以导出任意类型的对象列表\",\"通过 Class<T> clazz 参数自动识别数据类型生成对应格式\"]},\"277\":{\"h\":\"7.\",\"t\":[\"基于阿里EasyExcel框架，避免传统POI的内存问题\",\"支持.xls格式（兼容性更好）\"]},\"278\":{\"h\":\"8.\",\"t\":[\"单方法入口，参数明确\",\"业务逻辑与导出逻辑解耦（数据查询与导出分离）\",\"典型使用场景示例：\",\"// 业务代码只需要关注数据获取 ExcelExporter.export( response, \\\"用户数据.xls\\\", () -> userService.findLargeData().stream(), // 流式数据源 User.class, sheet -> { sheet.setSheetName(\\\"用户列表\\\"); // 自定义配置 // 可添加其他配置... } );\",\"这个工具类特别适合需要导出大量数据的后台管理系统，在保证功能完整性的同时，兼顾了性能和内存安全。\"]},\"279\":{\"h\":\"Hutool-Jwt校验\",\"t\":[\"package cn.rock.util; import cn.hutool.core.bean.BeanUtil; import cn.hutool.core.date.DateField; import cn.hutool.core.date.DateTime; import cn.hutool.core.util.SystemPropsUtil; import cn.hutool.jwt.JWT; import cn.hutool.jwt.JWTUtil; import cn.rock.domain.constant.RockConstant; import java.util.Map; /** * @author ldf */ public class JwtUtil { /** * 密钥 */ private static final String TOKEN_KEY = SystemPropsUtil.get(\\\"TOKEN_KEY\\\", \\\"6ed86be5f96fd2d5aa0adb4bc35d064d\\\"); /** * 创建token * * @param o 参数Map或者Bean对象 id+name * @return token */ public static String create(Object o) { DateTime now = DateTime.now(); Map<String, Object> params = BeanUtil.beanToMap(o); params.put(JWT.EXPIRES_AT, now.offsetNew(DateField.SECOND, RockConstant.TOKEN_TIMEOUT));// 过期时间 params.put(JWT.NOT_BEFORE, now);// 生效时间 params.put(JWT.ISSUED_AT, now);// 签发时间 return JWTUtil.createToken(params, TOKEN_KEY.getBytes()); } /** * 验证token * * @param token token * @return 结果集 */ public static boolean verify(String token) { JWT jwt = parse(token); jwt.setKey(TOKEN_KEY.getBytes()); return jwt.verify() && jwt.validate(RockConstant.TOKEN_TIMEOUT); } /** * 获取参数bean * * @param token token * @param <T>clazz * @return 结果集 */ public static <T> T getPayload(String token, Class<T> clazz) { return BeanUtil.toBean(parse(token).getPayload(), clazz); } /** * 获取参数值 * * @param name lambda获取Bean属性名称 * @return 结果集 */ public static Object getValue(String token, String name) { return parse(token).getPayload(name); } /** * 解析token * * @param token token * @return 结果集 */ public static JWT parse(String token) { return JWTUtil.parseToken(token); } }\"]},\"280\":{\"h\":\"Kubeshpere流水线配置\",\"t\":[\" pipeline { agent { node { label 'maven' } } stages { stage('代码检出') { agent none steps { git(branch: 'dev', url: 'http://47.110.61.65/devops-studio/gateway-hub.git', credentialsId: 'github-id', changelog: true, poll: false) } } stage('集成测试环境制品构建') { agent none steps { container('maven') { withCredentials([usernamePassword(credentialsId : 'dockerhub-id' ,passwordVariable : 'DOCKER_PASSWORD' ,usernameVariable : 'DOCKER_USERNAME' ,)]) { sh 'echo \\\"$DOCKER_PASSWORD\\\" | docker login $REGISTRY -u \\\"$DOCKER_USERNAME\\\" --password-stdin' } sh 'mvn clean package -P k8s -Dmaven.test.skip=true dockerfile:build dockerfile:push' } } } stage('发布测试环境') { agent none steps { container('maven') { withCredentials([ kubeconfigFile( credentialsId: env.KUBECONFIG_CREDENTIAL_ID, variable: 'KUBECONFIG') ]) { sh 'kubectl rollout restart deployments/devops-system-v1 -n $ENV_NUMBER' sh 'kubectl rollout restart deployments/devops-workflow-core-v1 -n $ENV_NUMBER' sh 'kubectl rollout restart deployments/gateway-main-service-v1 -n $ENV_NUMBER' sh 'kubectl rollout restart deployments/gateway-api-service-v1 -n $ENV_NUMBER' sh 'kubectl rollout restart deployments/gateway-app-service-v1 -n $ENV_NUMBER' sh 'kubectl rollout restart deployments/gateway-business-v1 -n $ENV_NUMBER' sh 'kubectl rollout restart deployments/gateway-bootstrap-v1 -n $ENV_NUMBER' sh 'kubectl rollout restart deployments/gateway-upstream-service-v1 -n $ENV_NUMBER' } } } } } environment { DOCKER_CREDENTIAL_ID = 'dockerhub-id' KUBECONFIG_CREDENTIAL_ID = 'kubeconfig-id' REGISTRY = '192.168.179.188:8080' DOCKERHUB_NAMESPACE = 'zhongzhi' DOCKER_USERNAME = 'admin' DOCKER_PASSWORD = 'Basedept8023.' ENV_NUMBER = 'gateway-new' } }\"]},\"281\":{\"h\":\"List集合-交集,并集,差集,补集\",\"t\":[\"原文链接：https://blog.csdn.net/qq_46239275/article/details/121849257\",\"<dependency> <groupId>org.apache.commons</groupId> <artifactId>commons-collections4</artifactId> <version>4.1</version> </dependency>\",\"//获取两个集合并集（自动去重）- 两集合加在一起，覆盖重复的部分 public static List<String> getUnion(List<String> list1, List<String> list2){ List<String> union = (List<String>) CollectionUtils.union(list1, list2); return union; } //获取两个集合交集- 两集合相同的部分 public static List<String> getIntersection(List<String> list1,List<String> list2){ List<String> intersection = (List<String>)CollectionUtils.intersection(list1, list2); return intersection; } //获取两个集合交集的补集 即（list1 + list2 - 交集）-两集和各不相同的部分 public static List<String> getDisjunction(List<String> list1,List<String> list2){ List<String> disjunction = (List<String>)CollectionUtils.disjunction(list1, list2); return disjunction; } //获取两个集合的差集（list1 - 交集）->该集合与交集不同的部分 public static List<String> getSubtract(List<String> list1,List<String> list2){ List<String> subtract = (List<String>)CollectionUtils.subtract(list1, list2); return subtract; }\"]},\"282\":{\"h\":\"Long类型精度丢失-全局处理\",\"t\":[\"1、全局处理方式\",\"@Configuration public class JacksonConfig { /** * Jackson全局转化long类型为String，解决jackson序列化时long类型缺失精度问题 * @return Jackson2ObjectMapperBuilderCustomizer 注入的对象 */ @Bean public Jackson2ObjectMapperBuilderCustomizer jackson2ObjectMapperBuilderCustomizer() { return jacksonObjectMapperBuilder -> jacksonObjectMapperBuilder .serializerByType(Long.class, ToStringSerializer.instance) .serializerByType(Long.TYPE, ToStringSerializer.instance); } } //2、局部处理方式 @JsonSerialize(using = ToStringSerializer.class)\"]},\"283\":{\"h\":\"Map高阶用法\",\"t\":[\"1、初始化建值对（无键或值则执行value方法，有值则返回） computeIfAbsent(K,V)；\",\"示例： 1.1、首先会判断map中是否有对应的Key； 1.2、如果没有对应的Key，则会创建一个满足Value类型的数据结构放入到Key对应的Value中，随后执行value中的操作； 1.3、如果有对应的Key且value有值，则会直接返回值，不会执行value中的操作.\",\"HashMap<String, List<Integer>> map = new HashMap<>(); /** * 首先，Map中没有 \\\"hadoop\\\" 这个Key，所以会创建一个满足Value类型的数据结构放入到Key对应的Value中 * 随后对该Value对应的值进行操作，如下代码是：value赋值为18， * 下一下再执行，则直接返回value值，不再执行value中的方法。 */ map.computeIfAbsent(\\\"hadoop\\\", key -> 18); System.out.println(map);\",\"2、有key则执行value中的操作（新值换旧值） computeIfPresent(K,V)；\",\"示例：\",\"HashMap<String, List<Integer>> map = new HashMap<>(); /** * Map中没有 \\\"hadoop\\\" 这个Key，则不执行 * Map中有 \\\"hadoop\\\" 这个Key，则执行Value对应的值进行操作，如下代码是：value赋值为18， */ map.computeIfPresent(\\\"hadoop\\\", key -> 18); System.out.println(map);\",\"缓存工具类\",\" /** * 缓存工具类 * * @author ldf * @code May there be no bugs in the world! */ @SuppressWarnings(\\\"unchecked\\\") public class CacheUtil { // 线程安全（分段锁） private static final Map<Object, Object> CACHE_MAP = new ConcurrentHashMap<>(); /** * 从缓存中获取指定键对应的值，如果不存在，则通过给定的Supplier获取值，并将其放入缓存中。 * * @param key 缓存中的键 * @param supplier 当缓存中不存在指定键时，用于生成新值的Supplier * @param <T> 缓存中值的类型 * @return 缓存中指定键对应的值，如果不存在，则通过Supplier生成新值并返回 * @throws RuntimeException 如果在通过Supplier生成新值时发生异常，则抛出RuntimeException */ public static <T> T getCacheMap(Object key, Supplier<T> supplier) { // 如果不存在，则调用supplier来获取值，并将其放入缓存中 return (T) CACHE_MAP.computeIfAbsent(key, k -> { try { return supplier.get(); } catch (Exception e) { throw new RuntimeException(e); } }); } /** * 根据给定的键从缓存映射中移除对应的键值对。 * * @param key 要移除的键，类型为Object。 */ public static void removeCacheMapByKey(Object key) { CACHE_MAP.remove(key); } /** * 根据前缀键移除缓存映射中的条目 * * @param prefixKey 前缀键，用于匹配缓存映射中的键 * 如果此参数为null，则直接返回，不做任何操作，防止空指针异常 * 该方法通过遍历缓存映射（CACHE_MAP）中的条目， * 移除所有键（Key）以给定前缀键（prefixKey）开头的条目。 * 此方法直接在迭代过程中移除符合条件的条目， * 避免了在遍历过程中直接修改集合可能导致的并发修改异常。 */ public static void removeCacheMapByPrefixKey(Object prefixKey) { // 直接在迭代器中移除，避免并发修改异常 CACHE_MAP.entrySet().removeIf(entry -> entry.getKey() != null && entry.getKey().toString().startsWith(prefixKey.toString())); } public static void main(String[] args) { CacheUtil.getCacheMap(\\\"key\\\", () -> \\\"function method\\\"); }\"]},\"284\":{\"h\":\"Page手动分页工具类\",\"t\":[\"/** * @Author：清峰 * @Description： List集合分页工具类 */ public class PageListUtils { /** * 分页函数 * * @param currentPage 当前页数 * @param pageSize 每一页的数据条数 * @param list 要进行分页的数据列表 * @return 当前页要展示的数据 */ public static Page<?> getPages(Integer currentPage, Integer pageSize, List list) { Page page = new Page(); int size = CollUtil.isNotEmpty(list) ? list.size() : 0; if (pageSize > size) { pageSize = size; } // 求出最大页数，防止currentPage越界 if (pageSize > 0) { int maxPage = size % pageSize == 0 ? size / pageSize : size / pageSize + 1; if (currentPage > maxPage) { currentPage = maxPage; } } // 当前页第一条数据的下标 int curIdx = currentPage > 1 ? (currentPage - 1) * pageSize : 0; List pageList = new ArrayList(); // 将当前页的数据放进pageList for (int i = 0; i < pageSize && curIdx + i < size; i++) { pageList.add(list.get(curIdx + i)); } page.setCurrent(currentPage).setSize(pageSize).setTotal(size).setRecords(pageList); return page; } }\"]},\"285\":{\"h\":\"RestTemplate访问网络对象\",\"t\":[\"RestTemplate访问网络对象\",\"1、创建RestTemplate对象 2、调用exchange方法，给定参数 3、封装entity对象，给定请求头请求体参数 4、封装请求头信息new Hearder() 5、封装请求体信息（看需要什么格式的请求体Json，map） 6、获取响应对象，获取响应\",\"1、Get方法远程调用\",\"RestTemplate restTemplate=new RestTemplate(); String url=\\\"http://127.0.0.1:80/rest/gateway/immovables/queryWarrant?ZJH=\\\"+ZJH+\\\"&BDCDYH=\\\"+BDCDYH+\\\"&BDCQZH=\\\"+BDCQZH; HttpHeaders headers=new HttpHeaders(); headers.set(\\\"systemid\\\",\\\"market01\\\"); headers.set(\\\"identitytoken\\\",identitytoken); headers.set(\\\"Content-Type\\\",\\\"application/json;charset=UTF-8\\\"); HttpEntity entity=new HttpEntity(null,headers); ResponseEntity<String> responseEntity=restTemplate.exchange(url,HttpMethod.GET,entity,String.class); if(responseEntity.getStatusCodeValue()==200){ String body=responseEntity.getBody(); }\",\"2、Post方法远程调用\",\"RestTemplate restTemplate=new RestTemplate(); //2、设置url路径 String url=\\\"http://127.0.0.1:80/rest/gateway/immovables/queryWarrant\\\"; //4、封装请求头 HttpHeaders headers=new HttpHeaders(); headers.set(\\\"systemid\\\",\\\"market01\\\"); headers.set(\\\"identitytoken\\\",identitytoken); headers.set(\\\"Content-Type\\\",\\\"application/json;charset=UTF-8\\\"); //5、封装请求体 HashMap<String, String> map=new HashMap<>(); map.put(\\\"key\\\",\\\"value\\\"); String s=JSON.toJSONString(map); //3、封装请求参数 HttpEntity entity=new HttpEntity(reqBody,headers); //1、远程调用 ResponseEntity<String> responseEntity=restTemplate.exchange(url,HttpMethod.GET,entity,String.class); //6、获取响应体 if(responseEntity.getStatusCodeValue()==200){ String body=responseEntity.getBody(); }\"]},\"286\":{\"h\":\"Zip压缩下载工具类\",\"t\":[\"/** * 文件下载，与多文件压缩包下载 * 文件下载后缓存目录文件要删除，文件名可采用日期加随机数命名以防重名覆盖文件 */ import java.io.*; import java.net.URL; import java.util.Arrays; import java.util.LinkedList; import java.util.List; import java.util.Objects; import java.util.zip.ZipEntry; import java.util.zip.ZipOutputStream; import javax.servlet.http.HttpServletResponse; import lombok.extern.slf4j.Slf4j; import org.springframework.web.context.request.RequestContextHolder; import org.springframework.web.context.request.ServletRequestAttributes; /** * 压缩下载工具类 */ @Slf4j public class CompressDownloadUtil { private CompressDownloadUtil() {} public static void main(String[] args) throws Exception { String str = \\\"https://factormarket.obs.cn-south-1.myhuaweicloud.com:443/res/app/market/202104/606ef3f987837f030f1b35fe.png?AccessKeyId=6UIOQ9TM69G2AALRN2AH&Expires=1653884153&Signature=HTSuFPPpahYa5DfMjApUvPRjxKM%3D\\\"; String str1 = \\\"https://factormarket.obs.cn-south-1.myhuaweicloud.com:443/res/app/market/202104/606ef3f987837f030f1b35fe.png?AccessKeyId=6UIOQ9TM69G2AALRN2AH&Expires=1653884153&Signature=HTSuFPPpahYa5DfMjApUvPRjxKM%3D\\\"; LinkedList<String> list = new LinkedList<>(); list.add(str); list.add(str1); LinkedList<String> linkedList = new LinkedList<>(); linkedList.add(\\\"竞得人\\\"); linkedList.add(\\\"营业执照\\\"); File[] files = new File[list.size()]; for (int i = 0; i < list.size(); i++) { URL url = new URL(list.get(i)); InputStream inputStream = url.openStream(); files[i] =inputStreamToFile(inputStream, linkedList.get(i)); } //File file = FileUtil.file(\\\"list.zip\\\"); //File zipFile = ZipUtil.zip(file, false, files); //ZipOutputStream zos = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(zipFile))); //HttpServletResponse response = AppContext.getResponse(); //HttpServletResponse response = ServletContext.getResponse(); //HttpServletResponse response = RequestUtil.getResponse(); HttpServletResponse response = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getResponse(); compressZip(Arrays.asList(files),response.getOutputStream()); //file.renameTo() } /** * 工具类 * inputStream 转 File */ public static File inputStreamToFile(InputStream ins, String name) throws Exception{ //System.getProperty(\\\"java.io.tmpdir\\\")获取操作系统的缓存临时目录 String tmpPath = System.getProperty(\\\"java.io.tmpdir\\\") + File.separator + name; File file = new File(tmpPath); if (file.exists()) { return file; } OutputStream os = new FileOutputStream(file); int bytesRead; int len = 8192; byte[] buffer = new byte[len]; while ((bytesRead = ins.read(buffer, 0, len)) != -1) { os.write(buffer, 0, bytesRead); } os.close(); ins.close(); return file; } /** * 设置下载响应头 * * @param response * @return * @author hongwei.lian * @date 2018年9月7日 下午3:01:59 */ public static HttpServletResponse setDownloadResponse(HttpServletResponse response, String downloadName) throws UnsupportedEncodingException { response.reset(); response.setCharacterEncoding(\\\"utf-8\\\"); response.setContentType(\\\"application/octet-stream\\\"); //response.setHeader(\\\"Content-Disposition\\\", \\\"attachment;fileName*=UTF-8''\\\"+ downloadName); response.setHeader(\\\"Content-Disposition\\\", \\\"attachment; filename=\\\" + java.net.URLEncoder.encode(downloadName, \\\"UTF-8\\\")); //防止中文乱码 return response; } /** * 字符串转换为整型数组 * * @param param * @return * @author hongwei.lian * @date 2018年9月6日 下午6:38:39 */ public static Integer[] toIntegerArray(String param) { return Arrays.stream(param.split(\\\",\\\")) .map(Integer::valueOf) .toArray(Integer[]::new); } /** * 将多个文件压缩到指定输出流中 * * @param files 需要压缩的文件列表 * @param outputStream 压缩到指定的输出流 * @author hongwei.lian * @date 2018年9月7日 下午3:11:59 */ public static void compressZip(List<File> files, OutputStream outputStream) { ZipOutputStream zipOutStream = null; try { //-- 包装成ZIP格式输出流 zipOutStream = new ZipOutputStream(new BufferedOutputStream(outputStream)); // -- 设置压缩方法 zipOutStream.setMethod(ZipOutputStream.DEFLATED); //-- 将多文件循环写入压缩包 for (int i = 0; i < files.size(); i++) { File file = files.get(i); FileInputStream filenputStream = new FileInputStream(file); byte[] data = new byte[(int) file.length()]; filenputStream.read(data); //-- 添加ZipEntry，并ZipEntry中写入文件流，这里，加上i是防止要下载的文件有重名的导致下载失败 zipOutStream.putNextEntry(new ZipEntry(i + file.getName())); zipOutStream.write(data); filenputStream.close(); zipOutStream.closeEntry(); } } catch (IOException e) { log.error(CompressDownloadUtil.class.getName(), \\\"downloadallfiles\\\", e); } finally { try { if (Objects.nonNull(zipOutStream)) { zipOutStream.flush(); zipOutStream.close(); } if (Objects.nonNull(outputStream)) { outputStream.close(); } } catch (IOException e) { log.error(CompressDownloadUtil.class.getName(), \\\"downloadallfiles\\\", e); } } } /** * 下载文件 * * @param outputStream 下载输出流 * @param zipFilePath 需要下载文件的路径 * @author hongwei.lian * @date 2018年9月7日 下午3:27:08 */ public static void downloadFile(OutputStream outputStream, String zipFilePath) { File zipFile = new File(zipFilePath); if (!zipFile.exists()) { //-- 需要下载压塑包文件不存在 return ; } FileInputStream inputStream = null; try { inputStream = new FileInputStream(zipFile); byte[] data = new byte[(int) zipFile.length()]; inputStream.read(data); outputStream.write(data); outputStream.flush(); } catch (IOException e) { log.error(CompressDownloadUtil.class.getName(), \\\"downloadZip\\\", e); } finally { try { if (Objects.nonNull(inputStream)) { inputStream.close(); } if (Objects.nonNull(outputStream)) { outputStream.close(); } } catch (IOException e) { log.error(CompressDownloadUtil.class.getName(), \\\"downloadZip\\\", e); } } } /** * 删除指定路径的文件 * * @param filepath * @author hongwei.lian * @date 2018年9月7日 下午3:44:53 */ public static void deleteFile(String filepath) { File file = new File(filepath); deleteFile(file); } /** * 删除指定文件 * * @param file * @author hongwei.lian * @date 2018年9月7日 下午3:45:58 */ public static void deleteFile(File file) { //-- 路径为文件且不为空则进行删除 if (file.isFile() && file.exists()) { file.delete(); } } }\"]},\"287\":{\"h\":\"函数式接口抛出异常\",\"t\":[\" /** 优雅的抛出异常 */ public class Demo2 { public static void main(String[] args) { // 1、自定义函数接口 ExceptionUtil.throwMsg(true).throwMsg(\\\"抛出异常消息\\\"); // 2、采用内置的函数接口 ExceptionUtil.throwMsg(()-> true,\\\"抛出异常消息\\\"); } }\",\"​\",\"class ExceptionUtil { // 1、自定义函数接口 public static ThrowMessage throwMsg(boolean isTrue) { return (msg) -> { if (isTrue) { throw new RuntimeException(msg); } }; } public static ThrowMessage throwMsg1(boolean isTrue){ return new ThrowMessage() { @Override public void throwMsg(String msg) { if (isTrue) { throw new RuntimeException(msg); } } }; } // 2、采用内置的函数接口 public static void throwMsg(Supplier<Boolean> supplier,String msg){ if (supplier.get()){ throw new RuntimeException(msg); } } } // 1、自定义函数接口 @FunctionalInterface interface ThrowMessage { void throwMsg(String msg); }\"]},\"288\":{\"h\":\"分批插入数据\",\"t\":[\"分批插入,一次最多插入1000条\",\"IntStream.range(0, (dataQualityRuleResultDocumentList.size() + BATCH_SIZE - 1) / BATCH_SIZE) .forEach(batchIndex -> { int startIndex = batchIndex * BATCH_SIZE; int endIndex = Math.min((batchIndex + 1) * BATCH_SIZE, dataQualityRuleResultDocumentList.size()); List<Document> batch = dataQualityRuleResultDocumentList.subList(startIndex, endIndex);\",\"执行批量插入\",\"MongoDb.getMongoCollection(DataQualityRuleResultDocument.COLLECTION_NAME).insertMany(batch, new InsertManyOptions().ordered(false)); });\",\"将总数据按指定数量分批:IntStream.range() ,防止超出但又不足一批的数量:(dataQualityRuleResultDocumentList.size() +\",\"(BATCH_SIZE - 1) / BATCH_SIZE\",\"batchIndex 批次 startIndex 开始索引 endIndex 结束索引 通过将批次索引加1再乘以每批的大小来得到的，但是不能超过列表的实际大小Math.min来确保\"]},\"289\":{\"h\":\"字符串变量替换\",\"t\":[\"package com.ldf.myaustin.utils; import cn.hutool.core.bean.BeanUtil; import cn.hutool.core.util.ReflectUtil; import cn.hutool.json.JSONObject; import cn.hutool.json.JSONUtil; import com.ldf.myaustin.entity.enums.SendChannel; import com.ldf.myaustin.entity.pojo.MessageTemplate; import com.ldf.myaustin.model.message.sms.pojo.MessageContentModel; import org.springframework.util.PropertyPlaceholderHelper; import javax.validation.constraints.NotNull; import java.util.Map; import java.util.Set; /** * Spring适配方式 * 字符串内任意符号{$var} 被替换为map中任意变量内容 */ public class PropertyPlaceUtil { private static final String prefixStr = \\\"{$\\\"; private static final String suffixStr = \\\"}\\\"; /** * 根据指定符号替换变量内容 * * @param templateStr 指定符号 * @param val 变量集 * @return 替换变量后的内容 */ public static String replaceStrFromMap(String templateStr, Map<String, String> val) { PropertyPlaceholderHelper placeholderHelper = new PropertyPlaceholderHelper(prefixStr, suffixStr); templateStr = placeholderHelper.replacePlaceholders(templateStr, new PropertyPlaceholderHelper.PlaceholderResolver() { @Override public String resolvePlaceholder(@NotNull String placeholderName) { return val.get(placeholderName); } }); return templateStr; } /** * 根据发送类型创建指定对象，封装消息内容(父类引用指向子类对象) * * @param messageTemplate 消息模版信息 * @param varMap 变量集合 * @param isReplaceVar 是否替换变量 * @return 消息内容对象 */ public static MessageContentModel fillIMessageContentModel(MessageTemplate messageTemplate, Map<String, String> varMap, boolean isReplaceVar) { SendChannel sendChannel = messageTemplate.getSendChannel(); //获取内容实现类 Class className = sendChannel.getClassName(); //创建其子类对象指向父类对象 MessageContentModel newInstance = (MessageContentModel) ReflectUtil.newInstance(className); //解析模版内容 String msgContent = messageTemplate.getMsgContent(); JSONObject contentObj = JSONUtil.parseObj(msgContent); //对象中的属性值做变量替换 if (isReplaceVar) { replaceVarFromMapMethod(varMap, contentObj); } //赋值给新对象 BeanUtil.copyProperties(contentObj, newInstance); return newInstance; } private static void replaceVarFromMapMethod(Map<String, String> varMap, JSONObject contentObj) { Set<Map.Entry<String, Object>> entries = contentObj.entrySet(); for (Map.Entry<String, Object> entry : entries) { String value = (String) entry.getValue(); String formatContent = PropertyPlaceUtil.replaceStrFromMap(value, varMap); entry.setValue(formatContent); } } } /** * java se适配 * * @Author： 清峰 * @Description： 自定义属性值替换工具类 * <p> * 字符串内任意符号${xxx} 被替换为map中任意变量内容 */ public class PropertyPlaceUtil { private static final String DYNAMIC_PARAM_PREFIX = \\\"${\\\"; private static final String DYNAMIC_PARAM_SUFFIX = \\\"}\\\"; /** * 单变量 * * @param content 内容模版 * @param variable 变量 * @return 结果集 */ public static String processDynamicParamWithSingleParam(String content, String variable) { int begin = content.indexOf(DYNAMIC_PARAM_PREFIX); int end = content.indexOf(DYNAMIC_PARAM_SUFFIX); if (begin == -1 || end == -1 || begin > end) { return content; } String substring = content.substring(begin, end + 1); return content.replace(substring, variable); } /** * 多变量，data 为 key - value 形式 * * @param content 内容模版 * @param variableMap 变量集 * @return 结果集 */ public static String processDynamicParams(String content, Map<String, String> variableMap) { int begin = content.indexOf(DYNAMIC_PARAM_PREFIX); int end = content.indexOf(DYNAMIC_PARAM_SUFFIX); if (begin == -1 || end == -1 || begin > end) { return content; } String startContent = content.substring(0, begin); String substring = content.substring(begin, end + 1); if (StrUtil.isNotEmpty(substring)) { String key = substring.replace(DYNAMIC_PARAM_PREFIX, \\\"\\\").replace(DYNAMIC_PARAM_SUFFIX, \\\"\\\"); String value = variableMap.get(key); if (value != null) { startContent = startContent + value; } else { startContent += substring; } } int length = content.length(); if (length == end + 1) { return startContent; } else { return startContent + processDynamicParams(content.substring(end + 1, length), variableMap); } } public static void main(String[] args) { String str = \\\"变量1为${code1},变量2为${code2},变量3为${code2}\\\"; Map<String, String> map = new HashMap<>(2); map.put(\\\"code1\\\", \\\"代码1\\\"); map.put(\\\"code2\\\", \\\"代码2\\\"); String params = processDynamicParams(str, map); System.out.println(params); } }\"]},\"290\":{\"h\":\"工具类SpringUtil\",\"t\":[\"import org.springframework.beans.BeansException; import org.springframework.context.ApplicationContext; import org.springframework.context.ApplicationContextAware; import org.springframework.stereotype.Component; @Component public class SpringUtil implements ApplicationContextAware { // Spring应用上下文环境 private static ApplicationContext applicationContext; @Override public void setApplicationContext(ApplicationContext applicationContext) throws BeansException { SpringUtil.applicationContext = applicationContext; } public static ApplicationContext getApplicationContext() { return applicationContext; } @SuppressWarnings(\\\"unchecked\\\") public static <T> T getBean(String name) throws BeansException { return (T) applicationContext.getBean(name); } @SuppressWarnings(\\\"unchecked\\\") public static <T> T getBean(Class<?> clz) throws BeansException { return (T) applicationContext.getBean(clz); } }\"]},\"291\":{\"h\":\"设计模式-模板模式\",\"t\":[\"优点： 公共的逻辑代码抽取，代码复用 父类控制行为，子类具体实现 封装不变的部分，重写可变的部分，易扩展\",\"缺点： 每来一个子类就要定义一套子类的规范，项目的体积会越来越大。\",\"// 1、炸鸡的父类 public abstract class AbstractFriedChicken { /** * 定义一套制作炸鸡的步骤 * */ protected final void makeFriedChicken(){ breed(); slaughter(); Fried(); } // 养殖方法 等待子类实现 protected abstract void breed(); // 屠宰方法 等待子类实现 protected abstract void slaughter(); // 油炸方法 等待子类实现 protected abstract void Fried(); }\",\"// 2、炸鸡的各个子类继承父类，实现抽象方法 // 肯德基厂家制作炸鸡 public class KFC extends AbstractFriedChicken { /** * 肯德基厂家养殖 */ @Override protected void breed() { System.out.println(\\\"肯德基养殖鸡每天喂食2次\\\"); } /** * 肯德基厂家屠宰 */ @Override protected void slaughter() { System.out.println(\\\"肯德基用机器屠宰\\\"); } /** * 肯德基厂家油炸 */ @Override protected void Fried() { System.out.println(\\\"肯德基油炸的油半天换一次\\\"); } } // 3、调用制作炸鸡的步骤方法 public class Test public static void main(String[] args) { AbstractFriedchicken fkc = new KFC(); fkc.makeFriedChicken(); } }\"]},\"292\":{\"h\":\"设计模式-策略模式\",\"t\":[\"策略模式的优点： 1)干掉繁琐的 if、switch 判断逻辑； 2)代码优雅、可复用、可读性好； 3)符合开闭原则，扩展性好、便于维护；\",\"策略模式的缺点： 1)策略如果很多的话，会造成策略类膨胀； 2)使用者必须清楚所有的策略类及其用途；\",\"1、定义一个策略接口\",\"public interface IHttpMethodDealModel { /** * 支持请求方式 * @return 请求方式 */ HttpMethodEnum isSupport(); /** * 请求处理 * @return 响应结果 */ String reqDeal(GatewayApiTestConfig gatewayApiTestConfig); }\",\"2、定义各个策略子类，实现该接口\",\"@Component @Slf4j public class HttpGetMethodDeal implements IHttpMethodDealModel { @Override public HttpMethodEnum isSupport() { return HttpMethodEnum.GET; } @Override public String reqDeal() { //子类具体实现逻辑 } }\",\"3、具体实现\",\"@Autowired private List<IHttpMethodDealModel> httpMethodDealModelList; //过滤出符合条件的策略者（apiRequestType为GET、POST等） IHttpMethodDealModel methodDealModel = httpMethodDealModelList.stream() .filter(x -> x.isSupport().equals(apiRequestType)) .findFirst() .orElse(null); methodDealModel.reqDeal();\"]},\"293\":{\"h\":\"设计模式-责任链模式\",\"t\":[\"一、简单示例 将一个接口多个实现，一个逻辑类将接口封装到集合中 初始化时将子类实现添加到集合中，循环执行集合则按顺序执行\",\"import java.util.LinkedList; import java.util.List; /** * 接口 */ interface ChainFilter { void doFilter(String str); } /** * 实现类1 */ class ChainA implements ChainFilter { @Override public void doFilter(String str) { System.out.println(\\\"AAA\\\"); } } /** * 实现类2 */ class ChainB implements ChainFilter { @Override public void doFilter(String str) { System.out.println(\\\"BBB\\\"); } } /** * 逻辑类-关键点（子类实现添加到接口集合中） */ class ChainFiltersTemplate { private List<ChainFilter> chainFilters; public List<ChainFilter> getChainFilters() { return chainFilters; } public void addChainFilters(ChainFilter chainFilter) { if (chainFilters == null) { chainFilters = new LinkedList<>(); } chainFilters.add(chainFilter); } } /** * 测试示例 */ public class Demo { public static void main(String[] args) { //初始化时将顺序定义好 ChainFiltersTemplate template = new ChainFiltersTemplate(); template.addChainFilters(new ChainA()); template.addChainFilters(new ChainB()); template.addChainFilters(new ChainB()); //循环执行责任链 List<ChainFilter> chainFilters = template.getChainFilters(); for (ChainFilter chainFilter : chainFilters) { chainFilter.doFilter(\\\"参数\\\"); } } }\"]},\"294\":{\"h\":\"转义请求url路径带有中文字符\",\"t\":[\"http://127.0.0.1:9997/file/地震应急预案（二级）.docx //对中文路径进行截取转义 int lastIndexOf = downloadUrl.lastIndexOf('/'); String fileName = downloadUrl.substring(lastIndexOf + 1); // 转义关键代码 String newFileName = URLEncoder.encode(fileName, \\\"utf-8\\\"); String subUrl = downloadUrl.substring(0,lastIndexOf + 1); String newUrl = subUrl + newFileName; URL url = new URL(newUrl); HttpURLConnection conn = (HttpURLConnection) url.openConnection();\"]},\"295\":{\"h\":\"IDEA常用插件\"},\"296\":{\"h\":\"Alibaba Java Coding Guidelines 代码规范插件\"},\"297\":{\"h\":\"介绍\",\"t\":[\"首当其冲的必定是阿里的代码规范插件Alibaba Java Coding Guidelines，从我还是小白时到现在这款插件已经陪伴了我几年光阴。我愿称它为你最少最少要遵守的代码规范。\"]},\"298\":{\"h\":\"SonarLint 代码优化插件\",\"t\":[\"会检查你代码中需要优化的地方，并且给出修改示例，配合Alibaba Java Coding Guidelines使用，治好代码审查员的强迫症。不推荐初级开发使用，因为过于智能，会自动给出代码替代方案，对于初级开发容易养成依赖，反而降低代码能力\"]},\"299\":{\"h\":\"rainbow brackets 括号标色\",\"t\":[\"彩虹括号插件，让你的括号成对标色，更加容易分辨括号是否缺失，重点推荐！！！支持xml、java等文件。\"]},\"300\":{\"h\":\"Lombok 自定生成实体类方法\"},\"301\":{\"h\":\"Maven Helper maven依赖辅助插件\",\"t\":[\"maven管理工具，maven项目必装，快速排查依赖冲突、了解依赖关系。\"]},\"302\":{\"h\":\"maven search maven依赖查询插件\",\"t\":[\"不用再登录https://mvnrepository.com/查询依赖了，直接在idea中查询，Tools->maven search打开，然后输入你想要查询的依赖名，可针对各个版本直接拷贝依赖\"]},\"303\":{\"h\":\"JWT 介绍\",\"t\":[\"JWT 是 JSON Web Token 的缩写，JWT 本身没有定义任何技术实现，它只是定义了一种基于 Token 的会话管理的规则，涵盖 Token 需要包含的标准内容和 Token 的生成过程。\",\"首先，俺们先来看看一个 JWT Token 长这样。\",\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1NDQ1MTE3NDMsImp0aSI6IjYxYmVmNjkyLTE4M2ItNGYxYy1hZjE1LWUwMDM0MTczNzkxOSJ9.CZzB2-JI1oPRFxNMaoFz9-9cKGTYVXkOC2INMoEYNNA\",\"仔细辨别会发现它由 A.B.C 三部分组成，这三部分依次是头部（Header）、负载（Payload）、签名（Signature），头部和负载以 JSON 形式存在，这就是 JWT 中的 JSON，三部分的内容都分别单独经过了 Base64 编码，以 . 拼接成一个 JWT Token。\",\"头部（Header）\",\"JWT 的 Header 中存储了所使用的加密算法和 Token 类型。\",\"{ \\\"alg\\\": \\\"HS256\\\", \\\"typ\\\": \\\"JWT\\\" }\",\"负载（Payload）\",\"Payload 是负载，JWT 规范规定了一些字段，并推荐使用，开发者也可以自己指定字段和内容，例如下面的内容。\",\"{ id: 1024 username: 'admin', exp: 1544602234 }\",\"需要注意的是，Payload的内容只经过了 Base64 编码，对客户端来说当于明文存储，所以不要放置敏感信息。\",\"签名（Signature）\",\"Signature 部分用来验证 JWT Token 是否被篡改，所以这部分会使用一个 Secret 将前两部分加密，逻辑如下。\",\"HMACSHA256(base64UrlEncode(header) + \\\".\\\" + base64UrlEncode(payload), secret)\"]},\"304\":{\"h\":\"JWT 优势 & 问题\",\"t\":[\"思考一下：\",\"为什么要用JWT？\",\"互联网服务离不开用户认证，传统的认证方式是通过cookie和session的方式进行认证，但是分布式web应用的普及，通过session 管理用户登录状态成本越来越高，你想想看，当业务服务分布在多台服务器时，该怎么进行session认证呢。\",\"有人会说，每个业务服务都保持session同步不就好了，你细想，是不是要维护每台session，每台服务器都要读取 session，还有串session的风险，代价是不是很大。\",\"有人还会说，像sso一样，所有请求先经过认证服务，session只在认证服务上保存不就好了。其实这种方式也为尝不可，只是每个用户都会产生一个session进行维护，客户端还需维护cookie，session量大起来了的话复杂度也随之提高了，session的存取都会占用服务器资源，用户量很大的情况下，会产生各种问题，性能比较低下。\",\"优势\",\"​ JWT 拥有基于 Token 的会话管理方式所拥有的一切优势，不依赖 Cookie，使得其可以防止 CSRF 攻击，也能在禁用 Cookie 的浏览器环境中正常运行。\",\"问题\",\"​ 而 JWT 的最大优势是服务端不再需要存储 Session，使得服务端认证鉴权业务可以方便扩展，避免存储 Session 所需要引入的 Redis 等组件，降低了系统架构复杂度。但这也是 JWT 最大的劣势，由于有效期存储在 Token 中，JWT Token 一旦签发，就会在有效期内一直可用，无法在服务端废止，当用户进行登出操作，只能依赖客户端删除掉本地存储的 JWT Token，如果需要禁用用户，单纯使用 JWT 就无法做到了。\"]},\"305\":{\"h\":\"JWT 的几个特点\",\"t\":[\"（1）JWT 默认是不加密，但也是可以加密的。生成原始 Token 以后，可以用密钥再加密一次。\",\"（2）JWT 不加密的情况下，不能将秘密数据写入 JWT。\",\"（3）JWT 不仅可以用于认证，也可以用于交换信息。有效使用 JWT，可以降低服务器查询数据库的次数。\",\"（4）JWT 的最大缺点是，由于服务器不保存 session 状态，因此无法在使用过程中废止某个 token，或者更改 token 的权限。也就是说，一旦 JWT 签发了，在到期之前就会始终有效，除非服务器部署额外的逻辑。\",\"（5）JWT 本身包含了认证信息，一旦泄露，任何人都可以获得该令牌的所有权限。为了减少盗用，JWT 的有效期应该设置得比较短。对于一些比较重要的权限，使用时应该再次对用户进行认证。\",\"（6）为了减少盗用，JWT 不应该使用 HTTP 协议明码传输，要使用 HTTPS 协议传输。\"]},\"306\":{\"h\":\"基于 JWT 的实践\",\"t\":[\"既然 JWT 依然存在诸多问题，甚至无法满足一些业务上的需求，但是我们依然可以基于 JWT 在实践中进行一些改进，来形成一个折中的方案\",\"Token续期\",\"对于了解jwt的同学来说,jwt有个弊端,jwt不允许续签时间,时间到期,token就过期。以下实践方案也是续签的一直思路。\",\"在 JWT 的实践中，引入 Refresh Token，将会话管理流程改进如下。\",\"客户端使用用户名密码进行认证\",\"服务端生成有效时间较短的 Access Token（例如 10 分钟），和有效时间较长的 Refresh Token（例如 7 天）\",\"客户端访问需要认证的接口时，携带 Access Token\",\"如果 Access Token 没有过期，服务端鉴权后返回给客户端需要的数据\",\"如果携带 Access Token 访问需要认证的接口时鉴权失败（例如返回 401 错误），则客户端使用 Refresh Token 向刷新接口申请新的 Access Token\",\"如果 Refresh Token 没有过期，服务端向客户端下发新的 Access Token（也可下发新的Refresh Token以达到未退出浏览器未关闭一直登录的状态）\",\"客户端使用新的 Access Token 访问需要认证的接口\",\"如果 Refresh Token 过期，则重新使用用户名密码进行认证\",\"img\",\"​ 将生成的 Refresh Token 以及过期时间存储在服务端的数据库中，由于 Refresh Token 不会在客户端请求业务接口时验证，只有在申请新的 Access Token 时才会验证，所以将 Refresh Token 存储在数据库中，不会对业务接口的响应时间造成影响，也不需要像 Session 一样一直保持在内存中以应对大量的请求。\",\"​ 上述的架构，提供了服务端禁用用户 Token 的方式，当用户需要登出或禁用用户时，只需要将服务端的 Refresh Token 禁用或删除，用户就会在 Access Token 过期后，由于无法获取到新的 Access Token 而再也无法访问需要认证的接口。这样的方式虽然会有一定的窗口期（取决于 Access Token 的失效时间），但是结合用户登出时客户端删除 Access Token 的操作，基本上可以适应常规情况下对用户认证鉴权的精度要求。\",\"我习惯的实现方式：\",\"用户注册/登录时，服务端会分配给该用户一个token，有效期30天，入库后下发给客户端。\",\"客户端可以将该token放在header里，也可以放在请求json中。放在cookie中自然也可以的，取决于具体业务场景和实现约定。\",\"服务端的权限系统对用户鉴权，若鉴权通过则执行业务逻辑；否则提示用户重新登录。\",\"优点：\",\"同样不依赖Cookie。\",\"用户登录后会生成新token，老token自动失效。即只允许用户登录一个设备。\",\"服务端可以随时踢掉用户当前的登录状态，服务端只需要重置token即可。随后的客户端请求所携带的token都会被服务端判定失效，把客户端打回登录界面。\",\"用户登出，则只需要客户端删除存储的token即可，服务端不必理会。下次用户登录时，服务端自会重新给该用户分配一个新的token。\"]},\"307\":{\"h\":\"\",\"t\":[\"1、倒入依赖\",\"<dependency> <groupId>com.auth0</groupId> <artifactId>java-jwt</artifactId> <version>3.10.3</version> </dependency>\",\"2、创建token\",\" /** * 创建token * @param user * @return */ public static String createToken(Users user){ Calendar calendar = Calendar.getInstance(); calendar.add(Calendar.DATE,TIME_OUT_DAY); String token = JWT.create() .withClaim(\\\"id\\\", user.getId()) .withClaim(\\\"key\\\", DigestUtils.md5DigestAsHex(user.getPassword().getBytes())) .withExpiresAt(calendar.getTime()) .sign(Algorithm.HMAC256(SECRET)); return token; }\",\"3、生成token\",\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1NDQ1MTE3NDMsImp0aSI6IjYxYmVmNjkyLTE4M2ItNGYxYy1hZjE1LWUwMDM0MTczNzkxOSJ9.CZzB2-JI1oPRFxNMaoFz9-9cKGTYVXkOC2INMoEYNNA\",\"4、校验token是否过期\",\" /** * 校验token是否过期 * @param decodedJWT * @return */ public static boolean needCreate(DecodedJWT decodedJWT){ Date timeoutDate = decodedJWT.getExpiresAt(); Calendar calendar = Calendar.getInstance(); calendar.add(Calendar.DATE,TIME_OUT_DAY - NEED_CREATE_DAY); if(timeoutDate.before(calendar.getTime())){ return true; } return false; }\"]},\"308\":{\"h\":\"1. Spring框架概述\"},\"309\":{\"h\":\"概述\",\"t\":[\"Spring是一个开源的轻量级Java开发框架，它简化了企业级应用程序的开发。Spring的核心是控制反转(IoC)和面向切面编程(AOP)，它提供了全面的基础设施支持，包括数据访问、事务管理、Web开发等。\"]},\"310\":{\"h\":\"知识要点\"},\"311\":{\"h\":\"1. Spring的核心特性\",\"t\":[\"控制反转(IoC): 传统的Java应用程序中，对象的创建和依赖关系由应用程序自身管理，而在Spring中，这些由Spring容器管理。\",\"面向切面编程(AOP): 允许将横切关注点（如日志、事务）从业务逻辑中分离出来。\",\"轻量级: Spring的核心JAR文件很小，不会给应用程序带来额外的负担。\",\"非侵入性: 应用程序代码不需要实现Spring特定的接口。\",\"可测试性: Spring的设计使得测试变得容易。\",\"模块化: Spring由多个模块组成，可以根据需要选择使用。\"]},\"312\":{\"h\":\"2. Spring的历史\",\"t\":[\"2002年，Rod Johnson发布了《Expert One-On-One J2EE Design and Development》一书，其中包含了Spring的早期思想。\",\"2003年，Spring框架正式发布。\",\"随着时间的推移，Spring不断发展，现在已经成为Java开发中最受欢迎的框架之一。\"]},\"313\":{\"h\":\"3. Spring的整体架构\",\"t\":[\"核心容器: 包含BeanFactory和ApplicationContext，负责对象的创建和管理。\",\"AOP模块: 提供面向切面编程的支持。\",\"事务模块: 提供声明式事务管理的支持。\",\"数据访问模块: 提供对JDBC、ORM框架等的支持。\",\"Web模块: 提供对Web开发的支持。\",\"集成模块: 提供与其他框架的集成支持。\"]},\"314\":{\"h\":\"知识扩展\"},\"315\":{\"h\":\"设计思想\",\"t\":[\"Spring的设计思想是简化Java开发，它通过以下方式实现:\",\"提供一个统一的编程模型\",\"消除样板代码\",\"促进良好的编程实践\",\"提供对第三方框架的集成支持\"]},\"316\":{\"h\":\"避坑指南\",\"t\":[\"不要过度使用Spring的特性，保持代码简洁。\",\"注意版本兼容性问题，不同版本的Spring可能有不同的API。\",\"避免在XML配置文件中放入过多的配置，考虑使用Java配置。\"]},\"317\":{\"h\":\"深度思考题\",\"t\":[\"深度思考题: Spring的控制反转(IoC)和依赖注入(DI)有什么区别？ 思考题回答: 控制反转是一种设计原则，它将对象的创建和管理从应用程序转移到框架；而依赖注入是实现控制反转的一种方式，它通过构造函数、setter方法或字段注入依赖对象。\",\"深度思考题: 为什么说Spring是轻量级的？ 思考题回答: Spring的核心JAR文件很小（大约1MB左右），而且它不需要任何特殊的容器就可以运行，此外，Spring的非侵入性设计也使得应用程序不会依赖于Spring的特定API。\"]},\"318\":{\"h\":\"2. Spring IOC与DI详解\"},\"319\":{\"h\":\"概述\",\"t\":[\"控制反转(IoC)和依赖注入(DI)是Spring框架的核心概念。IoC是一种设计原则，它将对象的创建和管理从应用程序转移到框架；而DI是实现IoC的一种方式，它通过构造函数、setter方法或字段注入依赖对象。\"]},\"320\":{\"h\":\"知识要点\"},\"321\":{\"h\":\"1. IoC容器\",\"t\":[\"BeanFactory: 是IoC容器的基本接口，提供了获取bean、检查bean是否存在等基本功能。\",\"ApplicationContext: 是BeanFactory的子接口，提供了更多的功能，如国际化支持、事件传播等。\",\"常见的ApplicationContext实现: ClassPathXmlApplicationContext、FileSystemXmlApplicationContext、AnnotationConfigApplicationContext等。\"]},\"322\":{\"h\":\"2. 依赖注入的方式\",\"t\":[\"构造函数注入: 通过构造函数的参数注入依赖对象。\",\"Setter方法注入: 通过setter方法注入依赖对象。\",\"字段注入: 直接在字段上使用@Autowired注解注入依赖对象。\"]},\"323\":{\"h\":\"3. 代码示例\"},\"324\":{\"h\":\"构造函数注入\",\"t\":[\"public class UserService { private UserDao userDao; // 构造函数注入 public UserService(UserDao userDao) { this.userDao = userDao; } public void saveUser() { userDao.save(); } }\"]},\"325\":{\"h\":\"Setter方法注入\",\"t\":[\"public class UserService { private UserDao userDao; // Setter方法注入 public void setUserDao(UserDao userDao) { this.userDao = userDao; } public void saveUser() { userDao.save(); } }\"]},\"326\":{\"h\":\"字段注入\",\"t\":[\"public class UserService { // 字段注入 @Autowired private UserDao userDao; public void saveUser() { userDao.save(); } }\"]},\"327\":{\"h\":\"4. Bean的作用域\",\"t\":[\"singleton: 默认值，整个应用程序中只有一个bean实例。\",\"prototype: 每次请求都会创建一个新的bean实例。\",\"request: 每个HTTP请求创建一个新的bean实例，仅在Web应用中有效。\",\"session: 每个HTTP会话创建一个新的bean实例，仅在Web应用中有效。\",\"global-session: 每个全局HTTP会话创建一个新的bean实例，仅在Portlet应用中有效。\"]},\"328\":{\"h\":\"知识扩展\"},\"329\":{\"h\":\"设计思想\",\"t\":[\"IoC的设计思想是解耦，它通过将对象的创建和管理从应用程序转移到框架，使得应用程序更加关注业务逻辑，而不是对象的创建和管理。\"]},\"330\":{\"h\":\"避坑指南\",\"t\":[\"尽量使用构造函数注入，因为它可以确保依赖对象在实例化时就被注入。\",\"避免循环依赖，即两个或多个对象相互依赖。\",\"注意bean的作用域，避免在多线程环境下使用不正确的作用域。\"]},\"331\":{\"h\":\"深度思考题\",\"t\":[\"深度思考题: 构造函数注入和Setter方法注入各有什么优缺点？ 思考题回答: 构造函数注入的优点是可以确保依赖对象在实例化时就被注入，缺点是当依赖对象较多时，构造函数会变得很长；Setter方法注入的优点是可以在实例化后再注入依赖对象，缺点是不能确保依赖对象在实例化时就被注入。\",\"深度思考题: 什么是循环依赖？Spring是如何解决循环依赖的？ 思考题回答: 循环依赖是指两个或多个对象相互依赖，例如A依赖于B，B又依赖于A。Spring通过三级缓存机制解决循环依赖，具体来说，Spring会先创建bean的实例，然后再注入依赖对象。\"]},\"332\":{\"h\":\"3. Spring AOP编程\"},\"333\":{\"h\":\"概述\",\"t\":[\"面向切面编程(AOP)是Spring框架的另一个核心概念，它允许将横切关注点（如日志、事务）从业务逻辑中分离出来。AOP的核心思想是将应用程序中的关注点分离，使得代码更加清晰、可维护。\"]},\"334\":{\"h\":\"知识要点\"},\"335\":{\"h\":\"1. AOP的核心概念\",\"t\":[\"切面(Aspect): 横切关注点的模块化，它包含了通知和切点。\",\"连接点(Joinpoint): 程序执行过程中的一个点，如方法的执行、异常的抛出等。\",\"通知(Advice): 切面在特定连接点上执行的动作，包括前置通知、后置通知、环绕通知、异常通知和最终通知。\",\"切点(Pointcut): 定义了哪些连接点会被拦截，通常使用表达式来定义。\",\"引入(Introduction): 允许向现有的类添加新的方法或字段。\"]},\"336\":{\"h\":\"2. 通知的类型\",\"t\":[\"前置通知(Before): 在连接点执行之前执行的通知。\",\"后置通知(After): 在连接点执行之后执行的通知，无论连接点是否正常执行。\",\"返回通知(After-returning): 在连接点正常执行之后执行的通知。\",\"异常通知(After-throwing): 在连接点抛出异常之后执行的通知。\",\"环绕通知(Around): 包围连接点的通知，它可以在连接点执行之前和之后执行，甚至可以控制是否执行连接点。\"]},\"337\":{\"h\":\"3. 代码示例\"},\"338\":{\"h\":\"切面类的定义\",\"t\":[\"@Aspect @Component public class LoggingAspect { // 前置通知 @Before(\\\"execution(* com.example.service.*.*(..))\\\") public void logBefore(JoinPoint joinPoint) { System.out.println(\\\"Before method: \\\" + joinPoint.getSignature().getName()); } // 后置通知 @After(\\\"execution(* com.example.service.*.*(..))\\\") public void logAfter(JoinPoint joinPoint) { System.out.println(\\\"After method: \\\" + joinPoint.getSignature().getName()); } // 环绕通知 @Around(\\\"execution(* com.example.service.*.*(..))\\\") public Object logAround(ProceedingJoinPoint proceedingJoinPoint) throws Throwable { System.out.println(\\\"Around method start: \\\" + proceedingJoinPoint.getSignature().getName()); Object result = proceedingJoinPoint.proceed(); System.out.println(\\\"Around method end: \\\" + proceedingJoinPoint.getSignature().getName()); return result; } }\"]},\"339\":{\"h\":\"启用AOP\",\"t\":[\"@Configuration @EnableAspectJAutoProxy public class AppConfig { // 配置其他bean }\"]},\"340\":{\"h\":\"4. 切点表达式\",\"t\":[\"execution: 用于匹配方法执行的连接点。\",\"within: 用于匹配特定类型内的所有方法。\",\"this: 用于匹配特定类型的bean的方法。\",\"target: 用于匹配特定目标类型的方法。\",\"args: 用于匹配特定参数类型的方法。\",\"@annotation: 用于匹配带有特定注解的方法。\"]},\"341\":{\"h\":\"知识扩展\"},\"342\":{\"h\":\"设计思想\",\"t\":[\"AOP的设计思想是关注点分离，它通过将横切关注点（如日志、事务）从业务逻辑中分离出来，使得代码更加清晰、可维护。\"]},\"343\":{\"h\":\"避坑指南\",\"t\":[\"避免过度使用AOP，否则会导致代码难以理解和调试。\",\"注意切点表达式的精度，避免拦截不必要的方法。\",\"注意通知的执行顺序，特别是当有多个切面时。\"]},\"344\":{\"h\":\"深度思考题\",\"t\":[\"深度思考题: 环绕通知和其他通知有什么区别？ 思考题回答: 环绕通知包围连接点，它可以在连接点执行之前和之后执行，甚至可以控制是否执行连接点；而其他通知只在连接点的特定时刻执行，不能控制连接点的执行。\",\"深度思考题: 什么是AspectJ？它和Spring AOP有什么区别？ 思考题回答: AspectJ是一个完整的AOP框架，它提供了更强大的AOP功能，包括编译时织入、加载时织入等；而Spring AOP是基于代理的AOP实现，它只支持运行时织入，而且只支持方法级别的连接点。不过，Spring AOP可以集成AspectJ，以获得更强大的AOP功能。\"]},\"345\":{\"h\":\"4. Spring事务管理\"},\"346\":{\"h\":\"概述\",\"t\":[\"事务管理是企业级应用程序开发中不可或缺的一部分，它确保了数据的一致性和完整性。Spring提供了强大的事务管理支持，包括编程式事务管理和声明式事务管理。\"]},\"347\":{\"h\":\"知识要点\"},\"348\":{\"h\":\"1. 事务的基本概念\",\"t\":[\"事务: 是一组原子性的操作，要么全部执行成功，要么全部执行失败。\",\"ACID特性: 原子性(Atomicity)、一致性(Consistency)、隔离性(Isolation)和持久性(Durability)。\",\"事务的隔离级别: 读未提交(Read Uncommitted)、读提交(Read Committed)、可重复读(Repeatable Read)和串行化(Serializable)。\",\"事务的传播行为: 定义了当一个事务方法调用另一个事务方法时，事务如何传播。\"]},\"349\":{\"h\":\"2. 编程式事务管理\",\"t\":[\"使用TransactionTemplate或PlatformTransactionManager手动管理事务。\",\"优点是可以更精细地控制事务，但缺点是代码会变得更加复杂。\"]},\"350\":{\"h\":\"3. 声明式事务管理\",\"t\":[\"基于AOP实现，通过注解或XML配置来管理事务。\",\"优点是代码更加简洁，但缺点是不能像编程式事务管理那样精细地控制事务。\"]},\"351\":{\"h\":\"4. 代码示例\"},\"352\":{\"h\":\"基于注解的事务管理\",\"t\":[\"@Service public class UserService { @Autowired private UserDao userDao; // 声明式事务管理 @Transactional public void saveUser(User user) { userDao.save(user); } }\"]},\"353\":{\"h\":\"启用事务管理\",\"t\":[\"@Configuration @EnableTransactionManagement public class AppConfig { @Bean public DataSource dataSource() { // 配置数据源 return new DriverManagerDataSource(); } @Bean public PlatformTransactionManager transactionManager(DataSource dataSource) { return new DataSourceTransactionManager(dataSource); } }\"]},\"354\":{\"h\":\"编程式事务管理\",\"t\":[\"@Service public class UserService { @Autowired private UserDao userDao; @Autowired private TransactionTemplate transactionTemplate; // 编程式事务管理 public void saveUser(User user) { transactionTemplate.execute(new TransactionCallbackWithoutResult() { @Override protected void doInTransactionWithoutResult(TransactionStatus status) { userDao.save(user); } }); } }\"]},\"355\":{\"h\":\"5. 事务的隔离级别和传播行为\",\"t\":[\"隔离级别: 决定了事务之间的隔离程度，避免了脏读、不可重复读和幻读等问题。\",\"传播行为: 定义了当一个事务方法调用另一个事务方法时，事务如何传播，如REQUIRED、SUPPORTS、MANDATORY等。\"]},\"356\":{\"h\":\"知识扩展\"},\"357\":{\"h\":\"设计思想\",\"t\":[\"Spring的事务管理设计思想是简化事务管理，它通过提供声明式事务管理，使得开发者可以专注于业务逻辑，而不是事务管理的细节。\"]},\"358\":{\"h\":\"避坑指南\",\"t\":[\"尽量使用声明式事务管理，因为它更加简洁。\",\"注意事务的边界，避免将不必要的操作包含在事务中。\",\"注意事务的隔离级别和传播行为的选择，避免出现并发问题。\",\"避免在事务中执行耗时的操作，因为这会导致数据库连接被长时间占用。\"]},\"359\":{\"h\":\"深度思考题\",\"t\":[\"深度思考题: 声明式事务管理和编程式事务管理各有什么优缺点？ 思考题回答: 声明式事务管理的优点是代码更加简洁，缺点是不能像编程式事务管理那样精细地控制事务；编程式事务管理的优点是可以更精细地控制事务，缺点是代码会变得更加复杂。\",\"深度思考题: 什么是事务的传播行为？Spring支持哪些传播行为？ 思考题回答: 事务的传播行为定义了当一个事务方法调用另一个事务方法时，事务如何传播。Spring支持以下传播行为：\",\"REQUIRED: 如果当前没有事务，就创建一个新事务；如果当前有事务，就加入到这个事务中。\",\"SUPPORTS: 如果当前有事务，就加入到这个事务中；如果当前没有事务，就以非事务的方式执行。\",\"MANDATORY: 如果当前有事务，就加入到这个事务中；如果当前没有事务，就抛出异常。\",\"REQUIRES_NEW: 无论当前是否有事务，都创建一个新的事务。\",\"NOT_SUPPORTED: 以非事务的方式执行，如果当前有事务，就暂停这个事务。\",\"NEVER: 以非事务的方式执行，如果当前有事务，就抛出异常。\",\"NESTED: 如果当前有事务，就创建一个嵌套的事务；如果当前没有事务，就创建一个新事务。\"]},\"360\":{\"h\":\"5. Spring数据访问\"},\"361\":{\"h\":\"概述\",\"t\":[\"数据访问是企业级应用程序开发中的重要部分，Spring提供了全面的数据访问支持，包括对JDBC、ORM框架（如Hibernate、MyBatis）等的支持。Spring的数据访问模块简化了数据访问的过程，使得开发者可以专注于业务逻辑，而不是数据访问的细节。\"]},\"362\":{\"h\":\"知识要点\"},\"363\":{\"h\":\"1. JDBC支持\",\"t\":[\"JdbcTemplate: 是Spring提供的一个JDBC模板类，它简化了JDBC的使用。\",\"NamedParameterJdbcTemplate: 是JdbcTemplate的扩展，它支持命名参数。\",\"SimpleJdbcInsert和SimpleJdbcCall: 简化了插入和存储过程的调用。\"]},\"364\":{\"h\":\"2. ORM框架集成\",\"t\":[\"Hibernate: 是一个流行的ORM框架，Spring提供了对Hibernate的集成支持。\",\"MyBatis: 是另一个流行的ORM框架，Spring也提供了对MyBatis的集成支持。\",\"JPA: 是Java持久化API，Spring提供了对JPA的集成支持。\"]},\"365\":{\"h\":\"3. 代码示例\"},\"366\":{\"h\":\"JdbcTemplate的使用\",\"t\":[\"@Service public class UserService { @Autowired private JdbcTemplate jdbcTemplate; public void saveUser(User user) { jdbcTemplate.update(\\\"INSERT INTO user (name, age) VALUES (?, ?)\\\", user.getName(), user.getAge()); } public User getUserById(int id) { return jdbcTemplate.queryForObject(\\\"SELECT * FROM user WHERE id = ?\\\", new Object[]{id}, new BeanPropertyRowMapper<>(User.class)); } }\"]},\"367\":{\"h\":\"配置数据源\",\"t\":[\"@Configuration public class DataSourceConfig { @Bean public DataSource dataSource() { DriverManagerDataSource dataSource = new DriverManagerDataSource(); dataSource.setDriverClassName(\\\"com.mysql.jdbc.Driver\\\"); dataSource.setUrl(\\\"jdbc:mysql://localhost:3306/test\\\"); dataSource.setUsername(\\\"root\\\"); dataSource.setPassword(\\\"password\\\"); return dataSource; } @Bean public JdbcTemplate jdbcTemplate(DataSource dataSource) { return new JdbcTemplate(dataSource); } }\"]},\"368\":{\"h\":\"MyBatis的集成\",\"t\":[\"@Configuration @MapperScan(\\\"com.example.mapper\\\") public class MyBatisConfig { @Bean public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception { SqlSessionFactoryBean factoryBean = new SqlSessionFactoryBean(); factoryBean.setDataSource(dataSource); return factoryBean.getObject(); } }\"]},\"369\":{\"h\":\"4. 数据源管理\",\"t\":[\"DataSource: 是JDBC的标准接口，它提供了获取数据库连接的方法。\",\"Spring提供的DataSource实现: 包括DriverManagerDataSource、SimpleDriverDataSource、ComboPooledDataSource等。\",\"连接池: 是一种优化数据库连接使用的技术，它可以重用数据库连接，避免频繁地创建和关闭连接。\"]},\"370\":{\"h\":\"知识扩展\"},\"371\":{\"h\":\"设计思想\",\"t\":[\"Spring的数据访问设计思想是简化数据访问，它通过提供模板类（如JdbcTemplate）和集成支持（如对Hibernate、MyBatis的集成），使得开发者可以专注于业务逻辑，而不是数据访问的细节。\"]},\"372\":{\"h\":\"避坑指南\",\"t\":[\"尽量使用Spring提供的模板类（如JdbcTemplate），而不是直接使用JDBC。\",\"注意连接池的配置，避免连接池过小或过大。\",\"注意事务的边界，避免将不必要的操作包含在事务中。\",\"避免在数据访问层中包含业务逻辑，保持数据访问层的简洁。\"]},\"373\":{\"h\":\"深度思考题\",\"t\":[\"深度思考题: 为什么说JdbcTemplate简化了JDBC的使用？ 思考题回答: JdbcTemplate简化了JDBC的使用，因为它处理了JDBC的样板代码（如创建连接、创建语句、关闭连接等），使得开发者可以专注于SQL查询和结果处理。此外，JdbcTemplate还处理了异常，使得开发者不需要手动捕获和处理SQL异常。\",\"深度思考题: 什么是连接池？它有什么优点？ 思考题回答: 连接池是一种优化数据库连接使用的技术，它可以重用数据库连接，避免频繁地创建和关闭连接。连接池的优点包括：\",\"提高性能：避免频繁地创建和关闭连接。\",\"资源管理：控制数据库连接的数量，避免资源浪费。\",\"稳定性：避免因数据库连接过多而导致的数据库服务器崩溃。\"]},\"374\":{\"h\":\"6. Spring Web开发\"},\"375\":{\"h\":\"概述\",\"t\":[\"Web开发是Java应用程序开发中的重要部分，Spring提供了强大的Web开发支持，包括Spring MVC、RESTful API开发等。Spring的Web开发模块简化了Web应用程序的开发过程，使得开发者可以专注于业务逻辑，而不是Web开发的细节。\"]},\"376\":{\"h\":\"知识要点\"},\"377\":{\"h\":\"1. Spring MVC\",\"t\":[\"Spring MVC: 是Spring提供的一个Web MVC框架，它基于MVC设计模式。\",\"核心组件: 包括DispatcherServlet、Controller、Model、View、ViewResolver等。\",\"工作流程: 客户端请求 -> DispatcherServlet -> 处理器映射 -> 控制器 -> 模型和视图 -> 视图解析器 -> 视图 -> 响应。\"]},\"378\":{\"h\":\"2. RESTful API开发\",\"t\":[\"REST: 是一种软件架构风格，它定义了一组约束条件和原则。\",\"RESTful API: 是遵循REST原则的API，它使用HTTP方法来操作资源。\",\"Spring的REST支持: 包括@RestController、@RequestMapping、@GetMapping、@PostMapping等注解。\"]},\"379\":{\"h\":\"3. 代码示例\"},\"380\":{\"h\":\"控制器的定义\",\"t\":[\"@Controller @RequestMapping(\\\"/users\\\") public class UserController { @Autowired private UserService userService; @GetMapping public String getUserList(Model model) { model.addAttribute(\\\"users\\\", userService.getAllUsers()); return \\\"user/list\\\"; } @GetMapping(\\\"/{id}\\\") public String getUserById(@PathVariable int id, Model model) { model.addAttribute(\\\"user\\\", userService.getUserById(id)); return \\\"user/detail\\\"; } }\"]},\"381\":{\"h\":\"RESTful API的定义\",\"t\":[\"@RestController @RequestMapping(\\\"/api/users\\\") public class UserRestController { @Autowired private UserService userService; @GetMapping public List<User> getUserList() { return userService.getAllUsers(); } @GetMapping(\\\"/{id}\\\") public User getUserById(@PathVariable int id) { return userService.getUserById(id); } @PostMapping public User createUser(@RequestBody User user) { userService.saveUser(user); return user; } @PutMapping(\\\"/{id}\\\") public User updateUser(@PathVariable int id, @RequestBody User user) { user.setId(id); userService.updateUser(user); return user; } @DeleteMapping(\\\"/{id}\\\") public void deleteUser(@PathVariable int id) { userService.deleteUser(id); } }\"]},\"382\":{\"h\":\"配置Spring MVC\",\"t\":[\"@Configuration @EnableWebMvc public class WebConfig implements WebMvcConfigurer { @Bean public ViewResolver viewResolver() { InternalResourceViewResolver viewResolver = new InternalResourceViewResolver(); viewResolver.setPrefix(\\\"/WEB-INF/views/\\\"); viewResolver.setSuffix(\\\".jsp\\\"); return viewResolver; } @Override public void addResourceHandlers(ResourceHandlerRegistry registry) { registry.addResourceHandler(\\\"/resources/**\\\").addResourceLocations(\\\"/resources/\\\"); } }\"]},\"383\":{\"h\":\"4. 拦截器和过滤器\",\"t\":[\"拦截器: 是Spring MVC提供的一个组件，它可以在请求处理之前和之后执行。\",\"过滤器: 是Servlet规范提供的一个组件，它可以在请求到达Servlet之前和响应离开Servlet之后执行。\",\"Spring的拦截器支持: 包括HandlerInterceptor接口和WebMvcConfigurer的addInterceptors方法。\"]},\"384\":{\"h\":\"知识扩展\"},\"385\":{\"h\":\"设计思想\",\"t\":[\"Spring的Web开发设计思想是简化Web应用程序的开发，它通过提供Spring MVC框架和RESTful API支持，使得开发者可以专注于业务逻辑，而不是Web开发的细节。\"]},\"386\":{\"h\":\"避坑指南\",\"t\":[\"尽量使用Spring MVC提供的注解（如@Controller、@RequestMapping等），而不是手动配置。\",\"注意请求映射的精度，避免出现模糊的请求映射。\",\"注意拦截器的执行顺序，特别是当有多个拦截器时。\",\"避免在控制器中包含过多的业务逻辑，保持控制器的简洁。\"]},\"387\":{\"h\":\"深度思考题\",\"t\":[\"深度思考题: 什么是MVC设计模式？Spring MVC是如何实现MVC设计模式的？ 思考题回答: MVC设计模式是一种软件架构模式，它将应用程序分为三个部分：模型(Model)、视图(View)和控制器(Controller)。模型负责数据和业务逻辑，视图负责显示界面，控制器负责处理用户输入和更新模型及视图。Spring MVC通过DispatcherServlet、Controller、Model、View等组件实现了MVC设计模式。\",\"深度思考题: 拦截器和过滤器有什么区别？ 思考题回答: 拦截器和过滤器的区别包括：\",\"拦截器是Spring MVC提供的，而过滤器是Servlet规范提供的。\",\"拦截器可以在请求处理之前和之后执行，而过滤器可以在请求到达Servlet之前和响应离开Servlet之后执行。\",\"拦截器可以访问Spring的上下文和bean，而过滤器不能。\",\"拦截器只能处理Spring MVC的请求，而过滤器可以处理所有的请求。\"]},\"388\":{\"h\":\"1. SpringBoot概述与入门\"},\"389\":{\"h\":\"一、概述\",\"t\":[\"SpringBoot是由Pivotal团队提供的框架，用于简化Spring应用的初始搭建以及开发过程。它使用\\\"约定大于配置\\\"的理念，让开发者可以专注于业务逻辑而不是配置文件。\"]},\"390\":{\"h\":\"二、知识要点\"},\"391\":{\"h\":\"1. SpringBoot的核心特性\",\"t\":[\"简化配置：告别繁琐的XML配置，使用注解和properties/yaml文件进行配置\",\"嵌入式服务器：内置Tomcat、Jetty、Undertow等服务器，无需单独部署\",\"自动装配：根据引入的依赖自动配置Spring应用\",\"生产就绪特性：提供指标、健康检查和外部配置等特性\",\"无代码生成和XML配置：完全基于Java代码和注解\"]},\"392\":{\"h\":\"2. 第一个SpringBoot应用\",\"t\":[\"// 主启动类 @SpringBootApplication public class Application { public static void main(String[] args) { SpringApplication.run(Application.class, args); } } // 控制器 @RestController public class HelloController { @RequestMapping(\\\"/hello\\\") public String hello() { return \\\"Hello, SpringBoot!\\\"; } }\"]},\"393\":{\"h\":\"3. 项目结构\",\"t\":[\"src ├── main │ ├── java │ │ └── com │ │ └── example │ │ └── demo │ │ ├── Application.java │ │ └── controller │ │ └── HelloController.java │ └── resources │ ├── application.properties │ ├── static │ └── templates └── test └── java └── com └── example └── demo └── ApplicationTests.java\"]},\"394\":{\"h\":\"4. 依赖管理\",\"t\":[\"SpringBoot使用父项目进行依赖管理，指定了常用依赖的版本号，避免版本冲突。\",\"<parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.7.5</version> </parent> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> </dependency> </dependencies>\"]},\"395\":{\"h\":\"三、知识扩展\"},\"396\":{\"h\":\"1. 设计思想\",\"t\":[\"约定大于配置：通过默认配置减少开发者的配置工作\",\"开箱即用：提供各种 starters 依赖，引入即可使用\",\"微服务友好：非常适合构建微服务架构\",\"持续集成友好：支持自动化测试和构建\"]},\"397\":{\"h\":\"2. 避坑指南\",\"t\":[\"不要随意修改SpringBoot父项目的版本，可能导致依赖冲突\",\"不要忽略application.properties/yaml文件的缩进和格式\",\"不要在主启动类所在包的上层放置其他类，可能导致扫描不到\",\"不要忘记添加@SpringBootApplication注解\"]},\"398\":{\"h\":\"3. 深度思考题\",\"t\":[\"思考题: SpringBoot和Spring有什么区别？ ** 回答:** Spring是一个开源的轻量级Java开发框架，提供了IOC和AOP等核心特性。而SpringBoot是基于Spring的框架，它简化了Spring应用的初始搭建和开发过程，提供了自动装配、嵌入式服务器等特性，让开发者可以更专注于业务逻辑。\",\"** 思考题:** 什么是SpringBoot的starter？ ** 回答:** SpringBoot的starter是一组预配置的依赖，它包含了某个功能所需的所有依赖，例如spring-boot-starter-web包含了web开发所需的所有依赖。引入starter后，SpringBoot会自动配置相关的组件。\"]},\"399\":{\"h\":\"2. SpringBoot配置详解\"},\"400\":{\"h\":\"一、概述\",\"t\":[\"SpringBoot提供了多种配置方式，让开发者可以灵活地配置应用。本章节将详细介绍SpringBoot的配置方式、配置优先级以及一些高级配置技巧。\"]},\"401\":{\"h\":\"二、知识要点\"},\"402\":{\"h\":\"1. 配置文件类型\"},\"403\":{\"h\":\"1.1 properties配置\",\"t\":[\"# 应用名称 spring.application.name=demo # 服务器端口 server.port=8080 # 数据库配置 spring.datasource.url=jdbc:mysql://localhost:3306/test spring.datasource.username=root spring.datasource.password=123456\"]},\"404\":{\"h\":\"1.2 yaml配置\",\"t\":[\"spring: application: name: demo datasource: url: jdbc:mysql://localhost:3306/test username: root password: 123456 server: port: 8080\"]},\"405\":{\"h\":\"2. 配置优先级\",\"t\":[\"SpringBoot的配置优先级从高到低依次为：\",\"命令行参数\",\"环境变量\",\"系统属性\",\"应用内的application.properties/yaml文件\",\"应用内的application-{profile}.properties/yaml文件\",\"外部的application.properties/yaml文件\",\"外部的application-{profile}.properties/yaml文件\"]},\"406\":{\"h\":\"3. 配置 Profiles\",\"t\":[\"Profiles允许我们在不同的环境下使用不同的配置。\",\"# application-dev.yaml spring: datasource: url: jdbc:mysql://localhost:3306/dev # application-prod.yaml spring: datasource: url: jdbc:mysql://localhost:3306/prod\",\"激活Profiles的方式：\",\"命令行参数: --spring.profiles.active=dev\",\"环境变量: SPRING_PROFILES_ACTIVE=dev\",\"配置文件: spring.profiles.active=dev\"]},\"407\":{\"h\":\"4. 读取配置\",\"t\":[\"在代码中读取配置的方式：\",\"// 方式1: @Value注解 @RestController public class ConfigController { @Value(\\\"${spring.application.name}\\\") private String appName; @RequestMapping(\\\"/appName\\\") public String getAppName() { return appName; } } // 方式2: @ConfigurationProperties注解 @ConfigurationProperties(prefix = \\\"spring.datasource\\\") @Component public class DataSourceProperties { private String url; private String username; private String password; // 省略getter和setter方法 }\"]},\"408\":{\"h\":\"三、知识扩展\"},\"409\":{\"h\":\"1. 设计思想\",\"t\":[\"统一配置管理：集中管理所有配置，避免分散配置\",\"环境隔离：通过Profiles实现不同环境的配置隔离\",\"灵活扩展：支持多种配置方式，满足不同场景的需求\",\"类型安全：通过@ConfigurationProperties提供类型安全的配置读取\"]},\"410\":{\"h\":\"2. 避坑指南\",\"t\":[\"不要在配置文件中硬编码敏感信息，如密码、密钥等\",\"不要忽略配置文件的缩进，尤其是yaml文件\",\"不要使用相同的配置键在不同的配置文件中，可能导致优先级问题\",\"不要忘记在生产环境中关闭开发环境的配置\"]},\"411\":{\"h\":\"3. 深度思考题\",\"t\":[\"** 思考题:** 如何在SpringBoot中实现配置的热更新？ ** 回答:** 可以通过Spring Cloud Config或者SpringBoot的actuator endpoints来实现配置的热更新。Spring Cloud Config可以集中管理配置，并支持配置的动态更新；而SpringBoot的actuator endpoints中的/refresh端点可以刷新配置。\",\"** 思考题:** 如何加密配置文件中的敏感信息？ ** 回答:** 可以使用SpringBoot的encryption/decryption功能，通过在配置文件中使用加密后的字符串，并配置相应的密钥来实现敏感信息的加密。\"]},\"412\":{\"h\":\"3. SpringBoot自动装配原理\"},\"413\":{\"h\":\"一、概述\",\"t\":[\"SpringBoot的自动装配是其核心特性之一，它能够根据引入的依赖自动配置Spring应用。本章节将详细解释SpringBoot的自动装配原理，包括bean的创建、条件判断、Enable注解原理等。\"]},\"414\":{\"h\":\"二、知识要点\"},\"415\":{\"h\":\"1. bean的创建与条件判断\",\"t\":[\"SpringBoot使用@Conditional注解来判断是否创建某个bean。\",\"@Conditional(OnBeanCondition.class) // 下面的注解都被@Conditional修饰执行()中不同类的条件判断方法 @ConditionalOnClass // 存在类则为满足条件创建bean @ConditionalOnMissingBean // 不存在则满足条件创建bean\",\"条件判断的实现过程：\",\"先获取@ConditionalOnClass注解\",\"再获取被@ConditionalOnClass注解标识的value值(存有字节码文件.class)\",\"遍历value数组加载字节码对象，加载成功则返回true顺利创建bean，其中有加载失败则表明没有该字节码文件，返回falsebean创建失败\"]},\"416\":{\"h\":\"2. 内置服务器的切换\",\"t\":[\"springboot内置了四种服务器当导入不同的依赖时，会自动装配不同的服务器。\",\"<!-- 排除tomcat依赖 --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> <exclusions> <exclusion> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-tomcat</artifactId> </exclusion> </exclusions> </dependency> <!-- 添加jetty依赖 --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-jetty</artifactId> </dependency>\"]},\"417\":{\"h\":\"3. Enable注解原理\",\"t\":[\"SpringBoot提供了@Eable*注解用于动态加载bean，原理就是在注解上加入了@Import注解并导入了一些配置类。\",\"@Target(ElementType.TYPE) @Retention(RetentionPolicy.RUNTIME) @Documented @Import(MyConfig.class) public @interface EnableMyFeature { }\"]},\"418\":{\"h\":\"4. @Import原理\",\"t\":[\"@Import()：导入的类会被Spring加载到IOC容器中\",\"导入一个bean类对象直接加载到中IOC容器中\",\"导入一个配置类，加载配置类文件加载bean\",\"导入一个ImportSelector自定义实现类，根据全路径类名加载多个bean到IOC容器中\",\"导入一个ImportBeanDefinitionRegistrar自定义实现类，加载指定类注册到IOC容器中\"]},\"419\":{\"h\":\"5. @EnableAutoConfiguration注解\",\"t\":[\"在启动类上@SpringBootApplication中有标识@EnableAutoConfiguration注解表示自动配置。\",\"当启动项目时，会加载这个注解内部中的@Import(AutoConfigurationImportSelector.class)装载的类。\",\"该类AutoConfigurationImportSelector.class主要是会去加载配置文件META-INF/spring.factories，该配置文件中定义了大量的配置类。\",\"但不会所有配置都会加载而是有条件的加载，满足@Conditional()的配置文件会被加载。\"]},\"420\":{\"h\":\"三、知识扩展\"},\"421\":{\"h\":\"1. 设计思想\",\"t\":[\"约定大于配置：通过默认配置减少开发者的配置工作\",\"条件装配：根据条件动态装配bean，避免不必要的资源消耗\",\"模块化：通过Enable注解实现功能模块的按需加载\",\"扩展性：通过ImportSelector和ImportBeanDefinitionRegistrar提供灵活的扩展机制\"]},\"422\":{\"h\":\"2. 避坑指南\",\"t\":[\"不要随意修改META-INF/spring.factories文件\",\"不要忽略@Conditional注解的条件，可能导致bean无法创建\",\"不要在同一应用中使用多个冲突的Enable注解\",\"不要忘记@SpringBootApplication注解，它是自动装配的入口\"]},\"423\":{\"h\":\"3. 深度思考题\",\"t\":[\"** 思考题:** SpringBoot是如何知道要创建哪个bean的？ ** 回答:** SpringBoot通过@EnableAutoConfiguration注解导入AutoConfigurationImportSelector类，该类会加载META-INF/spring.factories文件中的配置类，然后根据@Conditional注解的条件判断是否创建对应的bean。\",\"** 思考题:** 如何自定义一个Enable注解？ ** 回答:** 可以通过创建一个注解，并在该注解上添加@Import注解导入一个配置类，然后在配置类中定义需要加载的bean。例如：\",\"@Target(ElementType.TYPE) @Retention(RetentionPolicy.RUNTIME) @Documented @Import(MyConfig.class) public @interface EnableMyFeature { } @Configuration public class MyConfig { @Bean public MyService myService() { return new MyService(); } }\",\"然后在启动类上添加@EnableMyFeature注解就可以加载MyService这个bean了。\"]},\"424\":{\"h\":\"4. SpringBoot Web开发\"},\"425\":{\"h\":\"一、概述\",\"t\":[\"SpringBoot提供了强大的Web开发支持，包括RESTful API、参数校验、异常处理等特性。本章节将详细介绍SpringBoot的Web开发相关知识，帮助开发者快速构建Web应用。\"]},\"426\":{\"h\":\"二、知识要点\"},\"427\":{\"h\":\"1. RESTful API\",\"t\":[\"RESTful API是一种设计风格，它使用HTTP方法来表示对资源的操作。\",\"@RestController @RequestMapping(\\\"/users\\\") public class UserController { @Autowired private UserService userService; // 获取所有用户 @GetMapping public List<User> getAllUsers() { return userService.getAllUsers(); } // 获取单个用户 @GetMapping(\\\"/{id}\\\") public User getUserById(@PathVariable Long id) { return userService.getUserById(id); } // 创建用户 @PostMapping public User createUser(@RequestBody User user) { return userService.createUser(user); } // 更新用户 @PutMapping(\\\"/{id}\\\") public User updateUser(@PathVariable Long id, @RequestBody User user) { user.setId(id); return userService.updateUser(user); } // 删除用户 @DeleteMapping(\\\"/{id}\\\") public void deleteUser(@PathVariable Long id) { userService.deleteUser(id); } }\"]},\"428\":{\"h\":\"2. 参数校验\",\"t\":[\"SpringBoot支持JSR-380规范的参数校验。\",\"// 添加依赖 <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-validation</artifactId> </dependency> // 实体类 public class User { @NotNull(message = \\\"id不能为空\\\") private Long id; @NotBlank(message = \\\"用户名不能为空\\\") @Size(min = 2, max = 20, message = \\\"用户名长度必须在2-20之间\\\") private String name; @Min(value = 18, message = \\\"年龄必须大于等于18\\\") private Integer age; // 省略getter和setter方法 } // 控制器 @RestController @RequestMapping(\\\"/users\\\") public class UserController { @PostMapping public User createUser(@Valid @RequestBody User user) { // 业务逻辑 return user; } }\"]},\"429\":{\"h\":\"3. 异常处理\",\"t\":[\"SpringBoot提供了@ControllerAdvice和@ExceptionHandler注解来统一处理异常。\",\"@ControllerAdvice public class GlobalExceptionHandler { @ExceptionHandler(Exception.class) public ResponseEntity<ErrorResult> handleException(Exception e) { ErrorResult errorResult = new ErrorResult(); errorResult.setCode(500); errorResult.setMessage(e.getMessage()); return ResponseEntity.status(500).body(errorResult); } @ExceptionHandler(MethodArgumentNotValidException.class) public ResponseEntity<ErrorResult> handleMethodArgumentNotValidException(MethodArgumentNotValidException e) { ErrorResult errorResult = new ErrorResult(); errorResult.setCode(400); errorResult.setMessage(e.getBindingResult().getAllErrors().get(0).getDefaultMessage()); return ResponseEntity.status(400).body(errorResult); } } public class ErrorResult { private Integer code; private String message; // 省略getter和setter方法 }\"]},\"430\":{\"h\":\"4. 拦截器\",\"t\":[\"SpringBoot提供了HandlerInterceptor接口来实现拦截器。\",\"public class LoginInterceptor implements HandlerInterceptor { @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception { // 检查用户是否登录 String token = request.getHeader(\\\"token\\\"); if (token == null || !token.equals(\\\"admin\\\")) { response.setStatus(401); return false; } return true; } } @Configuration public class WebConfig implements WebMvcConfigurer { @Override public void addInterceptors(InterceptorRegistry registry) { registry.addInterceptor(new LoginInterceptor()) .addPathPatterns(\\\"/**\\\") .excludePathPatterns(\\\"/login\\\"); } }\"]},\"431\":{\"h\":\"三、知识扩展\"},\"432\":{\"h\":\"1. 设计思想\",\"t\":[\"简洁性：通过注解简化Web开发的配置\",\"一致性：遵循RESTful API的设计风格\",\"可扩展性：通过拦截器和过滤器提供灵活的扩展机制\",\"健壮性：通过参数校验和异常处理提高应用的健壮性\"]},\"433\":{\"h\":\"2. 避坑指南\",\"t\":[\"不要忽略参数校验，可能导致数据不一致\",\"不要忘记处理异常，可能导致应用崩溃\",\"不要在拦截器中做过重的操作，可能影响性能\",\"不要忽略HTTP方法的正确使用，GET用于获取资源，POST用于创建资源，PUT用于更新资源，DELETE用于删除资源\"]},\"434\":{\"h\":\"3. 深度思考题\",\"t\":[\"** 思考题:** 如何实现跨域访问？ ** 回答:** 可以通过@CrossOrigin注解或者WebMvcConfigurer的addCorsMappings方法来实现跨域访问。例如：\",\"// 方式1: @CrossOrigin注解 @RestController @RequestMapping(\\\"/users\\\") @CrossOrigin public class UserController { // 控制器方法 } // 方式2: WebMvcConfigurer的addCorsMappings方法 @Configuration public class WebConfig implements WebMvcConfigurer { @Override public void addCorsMappings(CorsRegistry registry) { registry.addMapping(\\\"/**\\\") .allowedOrigins(\\\"*\\\") .allowedMethods(\\\"GET\\\", \\\"POST\\\", \\\"PUT\\\", \\\"DELETE\\\") .allowedHeaders(\\\"*\\\"); } }\",\"** 思考题:** 如何实现文件上传？ ** 回答:** 可以通过MultipartFile接口来实现文件上传。例如：\",\"@RestController @RequestMapping(\\\"/files\\\") public class FileController { @PostMapping(\\\"/upload\\\") public String uploadFile(@RequestParam(\\\"file\\\") MultipartFile file) throws IOException { // 保存文件 String filePath = \\\"/path/to/save/\\\" + file.getOriginalFilename(); file.transferTo(new File(filePath)); return \\\"文件上传成功: \\\" + filePath; } }\",\"然后在application.properties中配置文件上传的相关参数：\",\"# 最大文件大小 spring.servlet.multipart.max-file-size=10MB # 最大请求大小 spring.servlet.multipart.max-request-size=100MB\"]},\"435\":{\"h\":\"5. SpringBoot数据访问\"},\"436\":{\"h\":\"一、概述\",\"t\":[\"SpringBoot提供了强大的数据访问支持，包括JDBC、MyBatis、JPA等。本章节将详细介绍SpringBoot的数据访问相关知识，帮助开发者快速集成各种数据访问技术。\"]},\"437\":{\"h\":\"二、知识要点\"},\"438\":{\"h\":\"1. JDBC\",\"t\":[\"SpringBoot提供了spring-boot-starter-jdbc依赖来简化JDBC的使用。\",\"<!-- 添加依赖 --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-jdbc</artifactId> </dependency> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> </dependency>\",\"// 配置数据源 @Configuration public class DataSourceConfig { @Bean @ConfigurationProperties(prefix = \\\"spring.datasource\\\") public DataSource dataSource() { return DataSourceBuilder.create().build(); } } // 使用JdbcTemplate @Service public class UserService { @Autowired private JdbcTemplate jdbcTemplate; public List<User> getAllUsers() { return jdbcTemplate.query(\\\"select * from user\\\", new BeanPropertyRowMapper<>(User.class)); } public User getUserById(Long id) { return jdbcTemplate.queryForObject(\\\"select * from user where id = ?\\\", new BeanPropertyRowMapper<>(User.class), id); } public int createUser(User user) { return jdbcTemplate.update(\\\"insert into user(name, age) values(?, ?)\\\", user.getName(), user.getAge()); } public int updateUser(User user) { return jdbcTemplate.update(\\\"update user set name = ?, age = ? where id = ?\\\", user.getName(), user.getAge(), user.getId()); } public int deleteUser(Long id) { return jdbcTemplate.update(\\\"delete from user where id = ?\\\", id); } }\"]},\"439\":{\"h\":\"2. MyBatis\",\"t\":[\"SpringBoot提供了spring-boot-starter-mybatis依赖来简化MyBatis的使用。\",\"<!-- 添加依赖 --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-mybatis</artifactId> </dependency> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> </dependency>\",\"// 配置MyBatis @Configuration @MapperScan(\\\"com.example.demo.mapper\\\") public class MyBatisConfig { } // Mapper接口 public interface UserMapper { List<User> getAllUsers(); User getUserById(Long id); int createUser(User user); int updateUser(User user); int deleteUser(Long id); } // Mapper XML <?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!DOCTYPE mapper PUBLIC \\\"-//mybatis.org//DTD Mapper 3.0//EN\\\" \\\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\\\"> <mapper namespace=\\\"com.example.demo.mapper.UserMapper\\\"> <select id=\\\"getAllUsers\\\" resultType=\\\"com.example.demo.entity.User\\\"> select * from user </select> <select id=\\\"getUserById\\\" resultType=\\\"com.example.demo.entity.User\\\"> select * from user where id = #{id} </select> <insert id=\\\"createUser\\\" parameterType=\\\"com.example.demo.entity.User\\\"> insert into user(name, age) values(#{name}, #{age}) </insert> <update id=\\\"updateUser\\\" parameterType=\\\"com.example.demo.entity.User\\\"> update user set name = #{name}, age = #{age} where id = #{id} </update> <delete id=\\\"deleteUser\\\" parameterType=\\\"java.lang.Long\\\"> delete from user where id = #{id} </delete> </mapper> // 服务层 @Service public class UserService { @Autowired private UserMapper userMapper; public List<User> getAllUsers() { return userMapper.getAllUsers(); } // 其他方法类似 }\"]},\"440\":{\"h\":\"3. JPA\",\"t\":[\"SpringBoot提供了spring-boot-starter-data-jpa依赖来简化JPA的使用。\",\"<!-- 添加依赖 --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-jpa</artifactId> </dependency> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> </dependency>\",\"// 实体类 @Entity @Table(name = \\\"user\\\") public class User { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private Long id; private String name; private Integer age; // 省略getter和setter方法 } // Repository接口 public interface UserRepository extends JpaRepository<User, Long> { List<User> findByName(String name); List<User> findByAgeGreaterThan(Integer age); } // 服务层 @Service public class UserService { @Autowired private UserRepository userRepository; public List<User> getAllUsers() { return userRepository.findAll(); } public User getUserById(Long id) { return userRepository.findById(id).orElse(null); } public User createUser(User user) { return userRepository.save(user); } public User updateUser(User user) { return userRepository.save(user); } public void deleteUser(Long id) { userRepository.deleteById(id); } }\"]},\"441\":{\"h\":\"4. 事务管理\",\"t\":[\"SpringBoot提供了@Transactional注解来简化事务管理。\",\"@Service public class UserService { @Autowired private UserRepository userRepository; @Transactional public void createAndUpdate(User user1, User user2) { userRepository.save(user1); // 模拟异常 if (user2.getName().equals(\\\"error\\\")) { throw new RuntimeException(\\\"模拟异常\\\"); } userRepository.save(user2); } }\"]},\"442\":{\"h\":\"三、知识扩展\"},\"443\":{\"h\":\"1. 设计思想\",\"t\":[\"简化集成：通过starter依赖简化各种数据访问技术的集成\",\"一致性：提供一致的编程模型，减少学习成本\",\"可扩展性：支持多种数据访问技术，满足不同场景的需求\",\"声明式事务：通过注解简化事务管理\"]},\"444\":{\"h\":\"2. 避坑指南\",\"t\":[\"不要忽略事务的隔离级别和传播特性，可能导致数据不一致\",\"不要在非公共方法上使用@Transactional注解，可能导致事务不生效\",\"不要忽略数据库连接池的配置，可能影响性能\",\"不要忘记关闭数据库连接，可能导致资源泄漏\"]},\"445\":{\"h\":\"3. 深度思考题\",\"t\":[\"** 思考题:** 如何配置数据库连接池？ ** 回答:** 可以通过application.properties或application.yaml文件来配置数据库连接池。例如：\",\"# 配置连接池类型 spring.datasource.type=com.zaxxer.hikari.HikariDataSource # 配置连接池大小 spring.datasource.hikari.minimum-idle=5 spring.datasource.hikari.maximum-pool-size=10 # 配置连接超时时间 spring.datasource.hikari.connection-timeout=30000\",\"** 思考题:** 如何实现多数据源？ ** 回答:** 可以通过配置多个DataSource来实现多数据源。例如：\",\"@Configuration public class DataSourceConfig { @Bean @ConfigurationProperties(prefix = \\\"spring.datasource.primary\\\") public DataSource primaryDataSource() { return DataSourceBuilder.create().build(); } @Bean @ConfigurationProperties(prefix = \\\"spring.datasource.secondary\\\") public DataSource secondaryDataSource() { return DataSourceBuilder.create().build(); } }\",\"然后在application.properties中配置两个数据源的相关参数：\",\"# 主数据源 spring.datasource.primary.url=jdbc:mysql://localhost:3306/test1 spring.datasource.primary.username=root spring.datasource.primary.password=123456 # 从数据源 spring.datasource.secondary.url=jdbc:mysql://localhost:3306/test2 spring.datasource.secondary.username=root spring.datasource.secondary.password=123456\",\"然后可以通过@Qualifier注解来指定使用哪个数据源。\"]},\"446\":{\"h\":\"6. SpringBoot测试与安全\"},\"447\":{\"h\":\"一、概述\",\"t\":[\"SpringBoot提供了强大的测试和安全支持，包括单元测试、集成测试、安全认证和授权等。本章节将详细介绍SpringBoot的测试和安全相关知识，帮助开发者构建健壮、安全的应用。\"]},\"448\":{\"h\":\"二、知识要点\"},\"449\":{\"h\":\"1. 单元测试\",\"t\":[\"SpringBoot提供了spring-boot-starter-test依赖来简化单元测试的使用。\",\"<!-- 添加依赖 --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> </dependency>\",\"// 单元测试 @SpringBootTest public class UserServiceTest { @Autowired private UserService userService; @Test public void testGetAllUsers() { List<User> users = userService.getAllUsers(); Assert.assertNotNull(users); } @Test public void testGetUserById() { User user = userService.getUserById(1L); Assert.assertNotNull(user); } }\"]},\"450\":{\"h\":\"2. 集成测试\",\"t\":[\"SpringBoot支持集成测试，可以测试整个应用的功能。\",\"// 集成测试 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT) public class UserControllerTest { @Autowired private TestRestTemplate restTemplate; @Test public void testGetAllUsers() { ResponseEntity<List<User>> response = restTemplate.exchange( \\\"/users\\\", HttpMethod.GET, null, new ParameterizedTypeReference<List<User>>() {} ); Assert.assertEquals(HttpStatus.OK, response.getStatusCode()); Assert.assertNotNull(response.getBody()); } @Test public void testCreateUser() { User user = new User(); user.setName(\\\"test\\\"); user.setAge(20); ResponseEntity<User> response = restTemplate.postForEntity( \\\"/users\\\", user, User.class ); Assert.assertEquals(HttpStatus.OK, response.getStatusCode()); Assert.assertNotNull(response.getBody()); } }\"]},\"451\":{\"h\":\"3. 安全认证\",\"t\":[\"SpringBoot提供了spring-boot-starter-security依赖来简化安全认证的使用。\",\"<!-- 添加依赖 --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-security</artifactId> </dependency>\",\"// 安全配置 @Configuration @EnableWebSecurity public class SecurityConfig extends WebSecurityConfigurerAdapter { @Override protected void configure(HttpSecurity http) throws Exception { http .authorizeRequests() .antMatchers(\\\"/public/**\\\").permitAll() .anyRequest().authenticated() .and() .formLogin() .and() .httpBasic(); } @Override protected void configure(AuthenticationManagerBuilder auth) throws Exception { auth .inMemoryAuthentication() .withUser(\\\"admin\\\").password(\\\"123456\\\").roles(\\\"ADMIN\\\") .and() .withUser(\\\"user\\\").password(\\\"123456\\\").roles(\\\"USER\\\"); } @Bean public PasswordEncoder passwordEncoder() { return NoOpPasswordEncoder.getInstance(); } }\"]},\"452\":{\"h\":\"4. 授权\",\"t\":[\"SpringBoot支持基于角色的授权。\",\"@RestController @RequestMapping(\\\"/admin\\\") public class AdminController { @PreAuthorize(\\\"hasRole('ADMIN')\\\") @GetMapping public String admin() { return \\\"Admin Page\\\"; } } @RestController @RequestMapping(\\\"/user\\\") public class UserController { @PreAuthorize(\\\"hasRole('USER')\\\") @GetMapping public String user() { return \\\"User Page\\\"; } }\"]},\"453\":{\"h\":\"三、知识扩展\"},\"454\":{\"h\":\"1. 设计思想\",\"t\":[\"简化测试：通过starter依赖简化测试的配置和使用\",\"全面测试：支持单元测试和集成测试，确保应用的质量\",\"安全第一：提供强大的安全认证和授权机制\",\"可定制性：支持自定义安全配置，满足不同场景的需求\"]},\"455\":{\"h\":\"2. 避坑指南\",\"t\":[\"不要忽略测试，可能导致应用存在潜在的bug\",\"不要使用弱密码，可能导致安全漏洞\",\"不要忽略安全配置，可能导致未授权访问\",\"不要在生产环境中禁用安全措施，可能导致安全风险\"]},\"456\":{\"h\":\"3. 深度思考题\",\"t\":[\"** 思考题:** 如何实现基于JWT的认证？ ** 回答:** 可以通过以下步骤实现基于JWT的认证：\",\"添加JWT的依赖\",\"创建JWT的工具类，用于生成和解析JWT\",\"创建认证过滤器，用于验证JWT\",\"配置安全配置，启用JWT认证\",\"<!-- 添加依赖 --> <dependency> <groupId>io.jsonwebtoken</groupId> <artifactId>jjwt</artifactId> <version>0.9.1</version> </dependency>\",\"// JWT工具类 public class JwtUtils { private static final String SECRET = \\\"secret\\\"; private static final long EXPIRATION = 3600000; // 1小时 public static String generateToken(String username) { return Jwts.builder() .setSubject(username) .setExpiration(new Date(System.currentTimeMillis() + EXPIRATION)) .signWith(SignatureAlgorithm.HS512, SECRET) .compact(); } public static String getUsernameFromToken(String token) { return Jwts.parser() .setSigningKey(SECRET) .parseClaimsJws(token) .getBody() .getSubject(); } public static boolean validateToken(String token) { try { Jwts.parser().setSigningKey(SECRET).parseClaimsJws(token); return true; } catch (Exception e) { return false; } } } // 认证过滤器 public class JwtAuthenticationFilter extends OncePerRequestFilter { @Override protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException { String token = request.getHeader(\\\"Authorization\\\"); if (token != null && token.startsWith(\\\"Bearer \\\")) { token = token.substring(7); if (JwtUtils.validateToken(token)) { String username = JwtUtils.getUsernameFromToken(token); UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(username, null, null); SecurityContextHolder.getContext().setAuthentication(authentication); } } filterChain.doFilter(request, response); } } // 安全配置 @Configuration @EnableWebSecurity public class SecurityConfig extends WebSecurityConfigurerAdapter { @Override protected void configure(HttpSecurity http) throws Exception { http .csrf().disable() .authorizeRequests() .antMatchers(\\\"/login\\\").permitAll() .anyRequest().authenticated() .and() .addFilterBefore(new JwtAuthenticationFilter(), UsernamePasswordAuthenticationFilter.class); } } // 登录控制器 @RestController public class LoginController { @PostMapping(\\\"/login\\\") public String login(@RequestBody User user) { // 验证用户 if (user.getUsername().equals(\\\"admin\\\") && user.getPassword().equals(\\\"123456\\\")) { return JwtUtils.generateToken(user.getUsername()); } return \\\"登录失败\\\"; } }\",\"** 思考题:** 如何实现测试覆盖率的统计？ ** 回答:** 可以使用Jacoco插件来实现测试覆盖率的统计。在pom.xml文件中添加Jacoco插件的配置，然后运行mvn clean test jacoco:report命令，就可以生成测试覆盖率的报告。\"]},\"457\":{\"h\":\"SpringBoot底层原理实现\"},\"458\":{\"h\":\"SpringBoot底层原理实现\",\"t\":[\"思考：bean是如何被创建的？\"]},\"459\":{\"h\":\"一、自动装配原理一bean的创建：\",\"t\":[\"condition：条件判断\",\"用于bean的创建中，当满足条件时则返回ture，不满足则返回false，根据返回值判断是否要执行创建bean的方法。true创建bean\",\"@Conditional(OnBeanCondition.class) 下面的注解都被@Conditional修饰执行()中不同类的条件判断方法 @ConditionalOnClass //存在类则为满足条件创建bean @ConditionalOnMissingBean //不存在则满足条件创建bean\",\"思考：SpringBoot是如何知道要创建哪个bean的？(难道所有的bean都创建，IOC容器能装下？)\",\"1、思路：导入依赖坐标后会加载jar包导入相应的字节码文件，编译时也会加载相应的字节码文件，可以根据判断加载对应的字节码创建对应的bean。\",\"而springboot给我们提供的一个接口condition就用来判断bean的创建条件。该接口通过注解@Conditional(条件类)配合使用。 具体实现：\",\"案例：需要导入redis依赖才将user对象注入bean中！\",\"1、springboot项目启动时会进行初始化，@Configuration加载@bean，如果被@ConditionalOnClass标记则会先进行判断，是否满足条件(有这个类或者是他的字节码文件)\",\"如图：如果有加载该全路径类名(有类)则满足条件。\",\"image-20210114211907733\",\"2、@ConditionalOnClass注解被@Conditional标识用于存储值给MyIfBean类(自定义条件类)使用\",\"image-20210114212748351\",\"3、@Conditional注解用于初始化器实现类对标记的值进行判断是否满足条件\",\"1、先获取@ConditionalOnClass注解\",\"2、再获取被@ConditionalOnClass注解标识的value值(存有字节码文件.class)\",\"3、遍历value数组加载字节码对象，加载成功则返回true顺利创建bean，其中有加载失败则表明没有该字节码文件，返回falsebean1创建失败报错\",\"image-20210114213006730\",\"4、满足条件则后续进行创建bean，不满足则报错无法加载bean\",\"image-20210114211335030\",\"image-20210114221244630\"]},\"460\":{\"h\":\"二、自动装配原理二内置服务器的切换\",\"t\":[\"springboot内置了四种服务器当导入不同的依赖时，会自动装配不同的服务器（当导入web依赖时会加载tomcat字节码文件，自动装配tomcat服务器注入到bean中）\",\"image-20210114223141212\",\"切换服务器只需要排除原有的，添加新的依赖即可\",\"image-20210114223646834\",\"image-20210114224028196\"]},\"461\":{\"h\":\"三、自动装配原理三Enable注解原理\",\"t\":[\"思考：一个springboot项目能够直接加载jar包中的bean吗？\",\"不能！\",\"分析启动类上的注解@SpringBootApplication\",\"@SpringBootConfiguration //表明是一个配置类 @EnableAutoConfiguration //导入其他类，实现其中类的功能 @ComponentScan() //包扫描（扫描当前包和其子包）\",\"1、主要是@ComponentScan这个注解只会扫描当前包和其子包，并不会扫描其他包，所以不会加载其他类中的bean。\",\"image-20210115163920227\",\"思考：如何加载其他类中的bean\",\"1、ComponentScan(其他包路径)\",\"2、@Import(其他类)\",\"image-20210115163043778\",\"SpringBoot提供了@Eable*注解用于动态加载bean，原理就是在在注解上加入了@Import注解并导入了一些配置类，使得该注解可以动态加载自己特有的bean，实现某功能。\",\"image-20210115165051510\"]},\"462\":{\"h\":\"四、自动装配原理四@Import原理\",\"t\":[\"@Import()：导入的类会被Spring加载到IOC容器中\",\"image-20210115170016721\",\"1、导入一个bean类对象直接加载到中IOC容器中\",\"image-20210115180721908\",\"2、导入一个配置类，加载配置类文件加载bean\",\"image-20210115180701704\",\"3、导入一个ImportSelector自定义实现类，根据全路径类名加载多个bean到IOC容器中，通过将全路径类名写入配置文件中，可实现动态加载bean。（springboot初始化配置就是用到该接口实现加载多个配置文件，实现批量动态加载bean）\",\"image-20210115181157737\",\"4、导入一个ImportBeanDefinitionRegistrar自定义实现类，加载指定类注册到IOC容器中。\",\"image-20210115181038711\"]},\"463\":{\"h\":\"五、自动装配原理五@EnableAutoConfiguration注解\",\"t\":[\"image-20210115183651159\",\"1、在启动类上@SpringBootApplication中有标识@EnableAutoConfiguration注解表示自动配置。\",\"2、当启动项目时，会加载这个注解内部中的@Import(AutoConfigurationImportSelector.class)装载的类。\",\"3、该类AutoConfigurationImportSelector.class主要是会去加载配置文件META-INF/spring.factories，该配置文件中定义了大量的配置类\",\"4、但不会所有配置都会加载而是有条件的加载，满足@Conditional()的配置文件会被加载\",\"image-20210115184613356\",\"1、启动springboot启动类时，项目会执行main方法构建项目并加载IOC容器。\",\"2、启动类标识了@SpringBootApplication注解，该注解被\",\"@SpringBootConfiguration //标识这个一个配置类 @EnableAutoConfiguration //开启自动配置 @ComponentScan //扫描包以及子包\",\"三个注解所修饰，加载这个配置类，扫描包以及子包，并自动加载配置类将所需bean注入到IOC容器中\",\"3、其中@EnableAutoConfiguration又被@Import(AutoConfigurationImportSelector.class)修饰，他会加载其配置类到IOC容器中，主要执行的方法是加载扫描到的包中查找一个/WEAT-INF/spring.factories文件，该文件配置了很多类的全路径类名，加载后进行bean的创建\",\"4、并·不是所有的bean都会创建，满足各自配置类中符合@Conditional注解的条件则创建，不满足则不会创建。\",\"image-20210116194252647\",\"核心简化：SpringBoot自动装配原理\",\"1、启动引导类上标识了@SpringBootApplication该引导类中有一个核心注解@EnableAutoConfiguration (开启自动配置)\",\"2、@EnableAutoConfiguration (开启自动配置)注解被@Import(AutoConfigurationImportSelector.class)标识，会加载其配置类，该类会加载/MEAT-INF/spring.profactories文件。\",\"3、该配置文件配置了所有springboot官方整合的其他依赖的全路径类名，通过加载各配置类生成bean注入IOC容器中\",\"4、并不会将所有配置文件中的bean都会加载，再各配置类中加入了@Conditional注解进行条件判断，满足条件(大多是加载有无该对象字节码文件)才加载该bean。这样在导入相关依赖后才有对应字节码文件，在会满足相应@Conditional条件加载相应的bean\"]},\"464\":{\"h\":\"Java 11 LTS特性\"},\"465\":{\"h\":\"概述\",\"t\":[\"Java 11是Oracle于2018年9月发布的长期支持(LTS)版本，作为Java 8之后的第二个LTS版本，它带来了多项重要更新。Java 11不仅整合了Java 9和Java 10的特性，还引入了新的API和性能优化，同时移除了一些过时的功能。本章节将详细介绍Java 11的核心特性及其在实际开发中的应用。\"]},\"466\":{\"h\":\"知识要点\"},\"467\":{\"h\":\"1. 语言增强\"},\"468\":{\"h\":\"1.1 局部变量类型推断增强\",\"t\":[\"Java 10引入了var关键字用于局部变量类型推断，Java 11进一步扩展了其使用范围，允许在Lambda表达式的参数中使用var。\",\"// Java 10及之前：只能在局部变量声明中使用var var message = \\\"Hello Java 10\\\"; // Java 11新增：Lambda参数中使用var Predicate<String> predicate = (var s) -> s.length() > 5; // 带注解的Lambda参数 Predicate<String> annotatedPredicate = (@NonNull var s) -> s.length() > 5;\",\"使用var的好处：\",\"减少样板代码，提高可读性\",\"便于后续重构变量类型\",\"保持类型安全，编译器仍会进行类型检查\"]},\"469\":{\"h\":\"1.2 Lambda参数的var支持\",\"t\":[\"Java 11允许在Lambda表达式的参数中使用var，这使得可以为Lambda参数添加注解：\",\"// 带多个注解的Lambda参数 List<String> names = Arrays.asList(\\\"Alice\\\", \\\"Bob\\\", \\\"Charlie\\\"); names.forEach((@NonNull var name) -> { System.out.println(\\\"Hello, \\\" + name); }); // 复杂场景下的类型推断 BiFunction<Integer, String, Boolean> biFunction = (@Nullable var i, @NonNull var s) -> { return s.length() > i; };\"]},\"470\":{\"h\":\"2. API更新\"},\"471\":{\"h\":\"2.1 HTTP客户端API (Standard)\",\"t\":[\"Java 11将Java 9中引入的孵化阶段的HTTP客户端正式标准化，位于java.net.http包下。这个新的HTTP客户端支持HTTP/2和WebSocket，提供了同步和异步两种编程模型。\",\"同步请求示例：\",\"import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; import java.util.concurrent.ExecutionException; public class HttpClientExample { public static void main(String[] args) throws Exception { // 创建HTTP客户端 HttpClient client = HttpClient.newHttpClient(); // 创建HTTP请求 HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(\\\"https://api.example.com/data\\\")) .header(\\\"Content-Type\\\", \\\"application/json\\\") .GET() .build(); // 发送同步请求 HttpResponse<String> response = client.send( request, HttpResponse.BodyHandlers.ofString() ); // 处理响应 System.out.println(\\\"状态码: \\\" + response.statusCode()); System.out.println(\\\"响应体: \\\" + response.body()); } }\",\"异步请求示例：\",\"// 发送异步请求 client.sendAsync(request, HttpResponse.BodyHandlers.ofString()) .thenApply(HttpResponse::body) .thenAccept(System.out::println) .join();\",\"POST请求示例：\",\"String requestBody = \\\"{\\\\\\\"name\\\\\\\": \\\\\\\"Java 11\\\\\\\"}\\\"; HttpRequest postRequest = HttpRequest.newBuilder() .uri(URI.create(\\\"https://api.example.com/data\\\")) .header(\\\"Content-Type\\\", \\\"application/json\\\") .POST(HttpRequest.BodyPublishers.ofString(requestBody)) .build(); HttpResponse<String> postResponse = client.send(postRequest, HttpResponse.BodyHandlers.ofString());\",\"新HTTP客户端相比传统的HttpURLConnection具有以下优势：\",\"支持HTTP/2和WebSocket\",\"提供简洁的API和函数式编程接口\",\"支持异步非阻塞操作\",\"内置连接池和超时设置\"]},\"472\":{\"h\":\"2.2 字符串增强方法\",\"t\":[\"Java 11为String类添加了多个实用方法：\",\"// 判断字符串是否为空白（空白包括空格、制表符、换行符等） String blankStr = \\\" \\\\t\\\\n\\\"; boolean isBlank = blankStr.isBlank(); // true // 去除字符串首尾空白（类似trim()，但支持Unicode空白字符） String str = \\\" Hello Java 11 \\\"; String stripped = str.strip(); // \\\"Hello Java 11\\\" String strippedLeft = str.stripLeading(); // \\\"Hello Java 11 \\\" String strippedRight = str.stripTrailing(); // \\\" Hello Java 11\\\" // 将字符串转换为Stream流 String multiLineStr = \\\"Line 1\\\\nLine 2\\\\nLine 3\\\"; Stream<String> lines = multiLineStr.lines(); List<String> lineList = lines.collect(Collectors.toList()); // [\\\"Line 1\\\", \\\"Line 2\\\", \\\"Line 3\\\"] // 重复字符串n次 String repeated = \\\"Java\\\".repeat(3); // \\\"JavaJavaJava\\\"\"]},\"473\":{\"h\":\"2.3 集合增强\",\"t\":[\"Java 11为集合接口添加了toArray(IntFunction<T[]>)默认方法，使集合转换为数组更加方便：\",\"List<String> list = Arrays.asList(\\\"a\\\", \\\"b\\\", \\\"c\\\"); // 传统方式 String[] array1 = list.toArray(new String[0]); // Java 11新方式 String[] array2 = list.toArray(String[]::new);\"]},\"474\":{\"h\":\"2.4 Optional增强\",\"t\":[\"Optional类新增了isEmpty()方法，用于判断值是否为空，与isPresent()方法互补：\",\"Optional<String> optional = Optional.empty(); // 传统方式 if (!optional.isPresent()) { System.out.println(\\\"值为空\\\"); } // Java 11新方式 if (optional.isEmpty()) { System.out.println(\\\"值为空\\\"); }\"]},\"475\":{\"h\":\"3. 性能优化\"},\"476\":{\"h\":\"3.1 ZGC (Z Garbage Collector)\",\"t\":[\"Java 11引入了实验性的ZGC（Z垃圾收集器），这是一个低延迟垃圾收集器，旨在实现以下目标：\",\"亚毫秒级暂停时间\",\"支持TB级堆大小\",\"对应用吞吐量影响小\",\"简化GC调优\",\"启用ZGC的方法：\",\"java -XX:+UnlockExperimentalVMOptions -XX:+UseZGC -jar application.jar\",\"ZGC的工作原理：\",\"并发标记-整理算法\",\"使用着色指针和读屏障技术\",\"不分代设计\",\"并发压缩，不停止应用线程\"]},\"477\":{\"h\":\"3.2 Epsilon垃圾收集器\",\"t\":[\"Epsilon是一个\\\"无操作\\\"垃圾收集器，它只分配内存但不回收内存，适用于以下场景：\",\"性能测试和基准测试\",\"短期任务\",\"内存压力测试\",\"确定应用的内存需求\",\"启用Epsilon的方法：\",\"java -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -jar application.jar\"]},\"478\":{\"h\":\"4. 工具改进\"},\"479\":{\"h\":\"4.1 单文件程序启动\",\"t\":[\"Java 11允许直接运行单个.java文件，无需先编译：\",\"// HelloWorld.java public class HelloWorld { public static void main(String[] args) { System.out.println(\\\"Hello, Java 11!\\\"); } }\",\"直接运行：\",\"java HelloWorld.java\",\"对于包含多个类的单文件程序，也可以直接运行：\",\"// MultiClass.java public class MultiClass { public static void main(String[] args) { Helper helper = new Helper(); helper.sayHello(); } } class Helper { void sayHello() { System.out.println(\\\"Hello from Helper!\\\"); } }\",\"直接运行：\",\"java MultiClass.java\"]},\"480\":{\"h\":\"4.2 飞行记录器 (JFR)\",\"t\":[\"Java飞行记录器(JFR)最初是Oracle JDK的商业特性，Java 11将其开源并包含在OpenJDK中。JFR是一个低开销的事件收集框架，用于诊断Java应用程序。\",\"启用JFR的方法：\",\"# 启动应用并开始记录 java -XX:StartFlightRecording=duration=60s,filename=recording.jfr -jar application.jar # 从正在运行的JVM中 dump 记录 jcmd <pid> JFR.dump filename=recording.jfr # 查看记录文件 jfr view recording.jfr\"]},\"481\":{\"h\":\"5. 安全增强\"},\"482\":{\"h\":\"5.1 TLS 1.3支持\",\"t\":[\"Java 11添加了对TLS 1.3的支持，相比之前的TLS版本，TLS 1.3提供了：\",\"更快的握手过程（减少往返次数）\",\"更强的安全性\",\"简化的密码套件\"]},\"483\":{\"h\":\"5.2 移除不安全的加密算法\",\"t\":[\"Java 11移除了以下不安全的加密算法：\",\"MD5消息摘要算法\",\"SHA-1证书指纹\",\"RC4流密码\",\"DES和3DES块密码\"]},\"484\":{\"h\":\"知识扩展\"},\"485\":{\"h\":\"1. 设计思想\"},\"486\":{\"h\":\"（1）模块化系统的成熟\",\"t\":[\"Java 11标志着Java模块化系统（JPMS）的成熟，从Java 9开始引入的模块化系统在Java 11中得到了完善。模块化系统带来了以下好处：\",\"更强的封装性\",\"更小的运行时镜像（jlink工具）\",\"改进的依赖管理\",\"更好的安全性\"]},\"487\":{\"h\":\"（2）性能与可用性的平衡\",\"t\":[\"Java 11在性能优化方面做了很多工作，特别是ZGC的引入，体现了Java在追求极致性能的同时，也注重可用性和易用性。ZGC的设计目标是\\\"暂停时间不超过10ms\\\"，这对于需要低延迟的应用至关重要。\"]},\"488\":{\"h\":\"（3）标准化与生态整合\",\"t\":[\"Java 11将HTTP客户端API标准化，体现了Java对现代Web开发需求的响应。同时，通过开源JFR等商业特性，Java进一步整合了开源生态，增强了社区活力。\"]},\"489\":{\"h\":\"2. 避坑指南\"},\"490\":{\"h\":\"（1）模块化迁移问题\",\"t\":[\"从传统的类路径（classpath）迁移到模块路径（modulepath）时，可能会遇到以下问题：\",\"反射访问受限：模块化系统限制了对私有成员的反射访问\",\"服务加载变化：使用ServiceLoader加载服务时需要在module-info.java中声明\",\"依赖管理：需要显式声明模块依赖\",\"解决方法：\",\"// module-info.java示例 module com.example.app { requires java.net.http; // 声明依赖 requires com.google.guava; exports com.example.app.api; // 导出公共API provides com.example.service.SomeService with com.example.impl.SomeServiceImpl; // 提供服务实现 }\"]},\"491\":{\"h\":\"（2）HTTP客户端的异常处理\",\"t\":[\"新的HTTP客户端在处理异步请求时，异常处理需要特别注意：\",\"// 错误示例：未处理异常 client.sendAsync(request, HttpResponse.BodyHandlers.ofString()) .thenApply(HttpResponse::body) .thenAccept(System.out::println); // 正确示例：处理异常 client.sendAsync(request, HttpResponse.BodyHandlers.ofString()) .thenApply(HttpResponse::body) .thenAccept(System.out::println) .exceptionally(ex -> { System.err.println(\\\"请求失败: \\\" + ex.getMessage()); return null; });\"]},\"492\":{\"h\":\"（3）ZGC的使用注意事项\",\"t\":[\"虽然ZGC具有低延迟特性，但在使用时仍需注意：\",\"ZGC在Java 11中是实验性特性，需要解锁才能使用\",\"ZGC的内存占用较大，通常需要更大的堆空间\",\"对于小型应用，ZGC的优势可能不明显\"]},\"493\":{\"h\":\"3. 深度思考题\"},\"494\":{\"h\":\"思考题1：Java 11的HTTP客户端相比第三方库（如OkHttp、Apache HttpClient）有哪些优势和不足？\",\"t\":[\"回答：Java 11的HTTP客户端相比第三方库有以下优势和不足：\",\"优势：\",\"标准API：作为JDK的一部分，无需额外依赖\",\"与Java生态深度整合：支持Lambda、Stream、CompletableFuture等Java特性\",\"长期支持：由Oracle和OpenJDK社区维护，与Java版本同步更新\",\"原生支持HTTP/2和WebSocket：无需额外配置\",\"不足：\",\"功能相对基础：相比成熟的第三方库，高级功能较少\",\"生态不够丰富：第三方库有更多的插件和扩展\",\"性能差距：在某些场景下性能可能不如专门优化的第三方库\",\"学习曲线：对于习惯了第三方库的开发者，需要适应新的API风格\",\"在选择时，如果项目已经使用了第三方HTTP客户端且工作良好，可以继续使用；如果是新项目或希望减少依赖，Java 11的HTTP客户端是一个不错的选择。\"]},\"495\":{\"h\":\"思考题2：如何利用Java 11的特性优化现有Java应用？\",\"t\":[\"回答：可以从以下几个方面利用Java 11特性优化现有应用：\",\"替换老旧API：\",\"使用新的HTTP客户端替换HttpURLConnection或老旧的第三方库\",\"使用String增强方法简化字符串处理代码\",\"使用Optional.isEmpty()使代码更易读\",\"性能优化：\",\"对低延迟要求高的应用，尝试使用ZGC\",\"使用var关键字减少样板代码，提高可读性\",\"利用集合的toArray(String[]::new)简化数组转换\",\"模块化改造：\",\"将大型应用拆分为模块，减少内存占用\",\"使用jlink创建自定义运行时镜像，减小部署包体积\",\"开发效率提升：\",\"使用单文件程序启动简化小型工具和脚本的开发\",\"利用JFR进行性能分析和问题诊断\",\"安全性增强：\",\"升级到TLS 1.3提高网络传输安全性\",\"移除对不安全加密算法的依赖\",\"通过逐步应用这些特性，可以在保持应用稳定性的同时，充分利用Java 11带来的优势。\"]},\"496\":{\"h\":\"Java 17 增强的NPE特性\"},\"497\":{\"h\":\"概述\",\"t\":[\"Java 17作为Oracle在2021年9月发布的长期支持(LTS)版本，引入了多项重要改进，其中JEP 391（增强NullPointerException错误消息）显著提升了空指针异常的调试体验。该特性通过在NPE消息中精确指出哪个变量为null以及空值传播路径，帮助开发者快速定位问题根源。本章节将详细解析这一增强特性的实现原理、使用方法及实际应用价值。\"]},\"498\":{\"h\":\"知识要点\"},\"499\":{\"h\":\"1. NPE错误消息的革命性改进\",\"t\":[\"在Java 17之前，NullPointerException的错误消息通常只能告诉你发生了空指针异常，但无法直接指出哪个变量为null，尤其是在复杂的链式调用中。Java 17通过精确识别空值变量和传播路径，彻底改变了这一状况。\"]},\"500\":{\"h\":\"1.1 基础变量空值提示\",\"t\":[\"传统NPE消息（Java 16及之前）：\",\"Exception in thread \\\"main\\\" java.lang.NullPointerException at com.example.NpeDemo.main(NpeDemo.java:5)\",\"增强NPE消息（Java 17+）：\",\"Exception in thread \\\"main\\\" java.lang.NullPointerException: Cannot invoke \\\"String.length()\\\" because \\\"str\\\" is null at com.example.NpeDemo.main(NpeDemo.java:5)\",\"代码示例：\",\"public class BasicNpeExample { public static void main(String[] args) { String str = null; // 当调用str.length()时会抛出NPE System.out.println(str.length()); // Java 17会明确指出\\\"str\\\"为null } }\"]},\"501\":{\"h\":\"1.2 链式调用空值定位\",\"t\":[\"对于链式调用，Java 17能精确指出链条中哪个环节出现了null：\",\"public class ChainedCallExample { static class Address { private String city; // 省略getter和setter public String getCity() { return city; } } static class User { private Address address; // 省略getter和setter public Address getAddress() { return address; } } public static void main(String[] args) { User user = new User(); // user.getAddress()返回null，但user不为null System.out.println(user.getAddress().getCity()); // Java 17错误消息：Cannot invoke \\\"Address.getCity()\\\" because the return value of \\\"User.getAddress()\\\" is null } }\"]},\"502\":{\"h\":\"1.3 复杂表达式空值追踪\",\"t\":[\"即使在复杂表达式中，Java 17也能准确识别空值来源：\",\"public class ComplexExpressionExample { public static void main(String[] args) { String a = null; String b = \\\"hello\\\"; // 复杂表达式中的NPE if (a.length() > 0 || b.length() > 0) { // a为null System.out.println(\\\"At least one string is non-empty\\\"); } // Java 17错误消息：Cannot invoke \\\"String.length()\\\" because \\\"a\\\" is null } }\"]},\"503\":{\"h\":\"2. 实现原理与技术细节\",\"t\":[\"Java 17的NPE增强特性并非简单的消息文本改进，而是涉及编译器和JVM层面的协同工作：\"]},\"504\":{\"h\":\"2.1 编译器层面的支持\",\"t\":[\"Java编译器在生成字节码时，会为可能抛出NPE的操作插入额外的空值检查代码，并记录相关变量名信息。这些信息会被存储在异常对象中，以便在抛出异常时生成详细消息。\",\"// 编译器在处理\\\"str.length()\\\"时生成的伪代码逻辑 if (str == null) { throw new NullPointerException(\\\"Cannot invoke \\\"String.length()\\\" because \\\"str\\\" is null\\\"); } str.length();\"]},\"505\":{\"h\":\"2.2 字节码层面的变化\",\"t\":[\"Java 17引入了新的字节码属性NullPointerExceptionInfo，用于存储空指针异常的详细信息。这使得即使在没有源代码的情况下，也能生成精确的错误消息。\"]},\"506\":{\"h\":\"2.3 性能影响与优化\",\"t\":[\"虽然增加了空值检查和信息记录，但Java 17的实现非常高效：\",\"仅在实际发生NPE时才会处理详细信息\",\"正常执行路径上几乎没有性能损耗\",\"采用延迟计算策略生成异常消息\"]},\"507\":{\"h\":\"3. 配置与兼容性\",\"t\":[\"Java 17的NPE增强特性默认启用，但也提供了灵活的配置选项以确保兼容性：\"]},\"508\":{\"h\":\"3.1 禁用增强NPE消息\",\"t\":[\"如果需要恢复到传统的NPE消息格式，可以通过JVM参数禁用：\",\"java -XX:+DisableEnhancedNullPointerException MyApp\"]},\"509\":{\"h\":\"3.2 向后兼容性保障\",\"t\":[\"增强的NPE消息不会破坏任何现有代码\",\"异常类型和基本行为保持不变\",\"仅改进了消息文本内容\",\"所有依赖NPE消息文本解析的工具可能需要更新\"]},\"510\":{\"h\":\"3.3 与其他工具的集成\",\"t\":[\"主流IDE（如IntelliJ IDEA、Eclipse）已支持Java 17的增强NPE消息，能在调试时直接定位到空值变量。构建工具（Maven、Gradle）也能正确处理相关的字节码变化。\"]},\"511\":{\"h\":\"知识扩展\"},\"512\":{\"h\":\"1. 设计思想\"},\"513\":{\"h\":\"（1）开发者体验优先\",\"t\":[\"NPE增强特性体现了Java语言设计中对开发者体验的重视。空指针异常是Java开发中最常见的错误之一，通过提供更精确的错误信息，显著降低了调试难度和时间成本。\"]},\"514\":{\"h\":\"（2）渐进式改进策略\",\"t\":[\"Java团队采用了渐进式改进而非颠覆性变革：\",\"保持异常类型不变，避免破坏现有代码\",\"默认启用新特性，但提供禁用选项\",\"仅增强错误消息，不改变异常语义\",\"这种策略确保了新特性的平稳 adoption，同时最大化其实用价值。\"]},\"515\":{\"h\":\"（3）数据驱动的优化\",\"t\":[\"NPE增强特性的设计基于大量真实项目中的空指针异常分析，针对开发者最常遇到的困惑点进行优化：\",\"无法确定哪个变量为null\",\"链式调用中空值位置难以定位\",\"复杂表达式中的空值来源模糊\"]},\"516\":{\"h\":\"2. 避坑指南\"},\"517\":{\"h\":\"（1）不要过度依赖NPE消息\",\"t\":[\"虽然增强的NPE消息非常有用，但不应替代良好的编程实践：\",\"// 不推荐：依赖NPE来发现空值问题 public void processUser(User user) { // 没有空值检查，依赖NPE来提示问题 System.out.println(user.getAddress().getCity()); } // 推荐：显式空值检查并提供有意义的错误消息 public void processUser(User user) { if (user == null) { throw new IllegalArgumentException(\\\"用户对象不能为null\\\"); } Address address = user.getAddress(); if (address == null) { throw new IllegalArgumentException(\\\"用户地址信息未设置\\\"); } System.out.println(address.getCity()); }\"]},\"518\":{\"h\":\"（2）注意日志系统对NPE消息的处理\",\"t\":[\"某些日志系统或监控工具可能对异常消息长度有限制，增强的NPE消息可能更长，需要确保这些系统能够正确处理：\",\"// 考虑在日志中捕获并处理长消息 try { // 可能抛出NPE的代码 } catch (NullPointerException e) { // 确保日志系统能处理详细的NPE消息 logger.error(\\\"处理数据时发生空指针异常: {}\\\", e.getMessage(), e); }\"]},\"519\":{\"h\":\"（3）警惕反射和动态代理场景\",\"t\":[\"在使用反射或动态代理的场景中，增强的NPE消息可能无法提供准确的变量名，因为这些场景下的方法调用是动态生成的：\",\"// 反射调用可能无法提供准确的NPE消息 Method method = someClass.getMethod(\\\"someMethod\\\"); method.invoke(null); // 如果someMethod内部发生NPE，消息可能不精确\"]},\"520\":{\"h\":\"3. 深度思考题\"},\"521\":{\"h\":\"思考题1：Java 17的NPE增强特性与Optional类的关系是什么？它们能互相替代吗？\",\"t\":[\"回答：Java 17的NPE增强特性与Optional类是解决空值问题的不同层面方案，不能互相替代，而是互补关系：\",\"定位维度：NPE增强特性专注于发生空指针异常后提供更精确的调试信息；Optional类则专注于编译期避免空指针异常的发生\",\"使用场景：\",\"NPE增强适用于所有可能发生NPE的场景，尤其是遗留系统维护\",\"Optional适用于方法返回值为空的场景，明确告知调用者需要处理空值\",\"最佳实践：结合使用两者 - 使用Optional类设计更安全的API，同时利用NPE增强特性快速定位意外出现的空指针问题\",\"// 结合使用Optional和NPE增强的示例 public Optional<String> findUserName(Long userId) { // 数据库查询逻辑 return Optional.ofNullable(userName); } // 调用方代码 String userName = findUserName(123L) .orElseThrow(() -> new IllegalArgumentException(\\\"用户不存在\\\")); // 如果userName后续被意外设为null，Java 17的NPE增强仍能提供精确的错误定位 System.out.println(userName.length());\"]},\"522\":{\"h\":\"思考题2：在大型项目迁移到Java 17后，如何充分利用NPE增强特性改进代码质量？\",\"t\":[\"回答：大型项目迁移到Java 17后，可以通过以下策略充分利用NPE增强特性：\",\"异常日志分析：\",\"集中收集一段时间内的NPE异常日志\",\"分析空值出现的高频场景和原因\",\"针对性地改进这些薄弱环节\",\"自动化测试增强：\",\"在单元测试中故意引入空值场景\",\"利用增强的NPE消息验证异常处理逻辑\",\"构建空值测试用例库\",\"代码审查指南更新：\",\"将NPE消息中的变量名作为代码审查关注点\",\"对频繁出现空值的变量考虑添加@Nullable注解\",\"优先修复能通过NPE消息精确定位的空值问题\",\"性能监控集成：\",\"在APM工具中添加NPE异常的专项监控\",\"跟踪NPE发生频率和影响范围\",\"将NPE减少作为代码质量指标\",\"通过这些措施，不仅能解决现有空值问题，还能建立长期的空值风险管理机制，从根本上提高代码质量。\"]},\"523\":{\"h\":\"Java 21 虚拟线程\"},\"524\":{\"h\":\"概述\",\"t\":[\"虚拟线程是Java 21中引入的一项重要特性，属于Project Loom的一部分，旨在简化高并发应用的开发。虚拟线程是轻量级的线程实现，由JVM管理而非操作系统，能够在有限的操作系统线程上支持数百万的并发任务，大幅降低了线程创建和上下文切换的成本。\"]},\"525\":{\"h\":\"知识要点\"},\"526\":{\"h\":\"1. 虚拟线程与平台线程的区别\",\"t\":[\"虚拟线程（Virtual Threads）是JVM管理的用户态线程，而平台线程（Platform Threads）是操作系统管理的内核态线程。虚拟线程依附于平台线程运行，多个虚拟线程可以映射到同一个平台线程上执行。\",\"// 平台线程创建方式 Thread platformThread = new Thread(() -> { System.out.println(\\\"这是平台线程\\\"); }); platformThread.start(); // Java 21虚拟线程创建方式 Thread virtualThread = Thread.startVirtualThread(() -> { System.out.println(\\\"这是虚拟线程\\\"); });\"]},\"527\":{\"h\":\"2. 虚拟线程的创建方式\",\"t\":[\"Java 21提供了多种创建虚拟线程的方式：\",\"// 方式1: 使用Thread.startVirtualThread() Thread.startVirtualThread(() -> { // 任务逻辑 System.out.println(\\\"虚拟线程执行任务\\\"); }); // 方式2: 使用Thread.Builder Thread virtualThread = Thread.builder() .virtual() .name(\\\"my-virtual-thread\\\") .task(() -> { // 任务逻辑 }) .start(); // 方式3: 使用ExecutorService try (ExecutorService executor = Executors.newVirtualThreadPerTaskExecutor()) { executor.submit(() -> { // 任务逻辑 return \\\"任务结果\\\"; }); }\"]},\"528\":{\"h\":\"3. 虚拟线程的实现原理\",\"t\":[\"虚拟线程采用M:N调度模型，即M个虚拟线程映射到N个平台线程上执行。当虚拟线程执行阻塞操作时，JVM会将其挂起并调度其他虚拟线程在该平台线程上运行，从而提高CPU利用率。\"]},\"529\":{\"h\":\"4. 虚拟线程的适用场景\",\"t\":[\"虚拟线程特别适合I/O密集型任务，如网络请求、数据库操作等。对于CPU密集型任务，虚拟线程的优势不明显，因为CPU一直处于忙碌状态，无法进行有效的线程切换。\",\"// I/O密集型任务示例 ExecutorService executor = Executors.newVirtualThreadPerTaskExecutor(); List<String> urls = Arrays.asList(\\\"https://example.com\\\", \\\"https://openai.com\\\"); for (String url : urls) { executor.submit(() -> { // 模拟网络请求 HttpClient client = HttpClient.newHttpClient(); HttpRequest request = HttpRequest.newBuilder().uri(URI.create(url)).build(); client.send(request, HttpResponse.BodyHandlers.ofString()); System.out.println(\\\"请求完成: \\\" + url); }); }\"]},\"530\":{\"h\":\"知识扩展\"},\"531\":{\"h\":\"设计思想\",\"t\":[\"虚拟线程的设计目标是简化高并发编程，让开发者能够使用熟悉的线程模型编写高性能的并发应用，而无需学习复杂的异步编程模型。虚拟线程保留了Thread API的语义，使得现有代码可以轻松迁移。\"]},\"532\":{\"h\":\"避坑指南\",\"t\":[\"不要过度使用同步代码块：虚拟线程数量众多，同步代码块可能导致大量线程阻塞，影响性能。\",\"避免长时间运行的计算任务：虚拟线程适合I/O密集型任务，CPU密集型任务应使用平台线程。\",\"注意ThreadLocal的使用：虚拟线程会继承父线程的ThreadLocal，可能导致内存泄漏，及时清理。\",\"不要依赖线程ID：虚拟线程的ID生成策略与平台线程不同，不应作为唯一标识符。\"]},\"533\":{\"h\":\"深度思考题\",\"t\":[\"思考题：虚拟线程与Go语言的goroutine有何异同？在实际项目中如何选择使用虚拟线程还是异步编程模型？\",\"思考题回答： 虚拟线程和goroutine都旨在提供轻量级的并发模型，但实现方式有所不同。虚拟线程基于JVM实现，保留了Java线程模型的语义；而goroutine是Go语言 runtime 实现的。两者都采用M:N调度，但goroutine使用channel进行通信，而虚拟线程仍使用传统的并发控制机制。\",\"在项目选择上，如果团队熟悉Java线程模型且需要兼容现有代码，虚拟线程是更好的选择；如果追求更高的性能和更简洁的并发编程模型，可以考虑异步编程或其他语言如Go。对于I/O密集型应用，虚拟线程能显著提高吞吐量，同时保持代码的可读性和可维护性。\"]},\"534\":{\"h\":\"Java 8 核心特性\"},\"535\":{\"h\":\"概述\",\"t\":[\"Java 8是Java历史上的一个里程碑版本，于2014年3月发布，引入了函数式编程范式和一系列革命性特性，彻底改变了Java程序员的编码方式。这些特性不仅提高了开发效率，还为后续Java版本的演进奠定了基础。\"]},\"536\":{\"h\":\"知识要点\"},\"537\":{\"h\":\"1. Lambda表达式\",\"t\":[\"Lambda表达式是Java 8引入的核心特性，它允许我们将函数作为参数传递，实现了函数式编程风格。Lambda表达式的本质是一个匿名函数，它可以简化代码，提高可读性和可维护性。\",\"Lambda表达式的基本语法如下：\",\"(parameters) -> expression // 或 (parameters) -> { statements; }\",\"以下是Lambda表达式的几种常见用法：\",\"// 1. 无参数无返回值 Runnable runnable = () -> System.out.println(\\\"Hello Lambda\\\"); // 2. 单个参数无返回值 Consumer<String> consumer = s -> System.out.println(s); // 3. 多个参数有返回值 BinaryOperator<Integer> add = (a, b) -> a + b; // 4. 代码块 Comparator<Integer> comparator = (a, b) -> { System.out.println(\\\"比较两个整数\\\"); return Integer.compare(a, b); };\",\"Lambda表达式的使用场景包括：\",\"集合的迭代和处理\",\"事件监听\",\"多线程编程\",\"Stream API操作\"]},\"538\":{\"h\":\"2. 函数式接口\",\"t\":[\"函数式接口是只包含一个抽象方法的接口，它是Lambda表达式的目标类型。Java 8引入了@FunctionalInterface注解来显式声明一个接口为函数式接口。\",\"Java 8在java.util.function包中提供了一系列内置的函数式接口，常用的有：\",\"// 消费型接口：接收一个参数，无返回值 Consumer<String> consumer = s -> System.out.println(s); consumer.accept(\\\"Hello Consumer\\\"); // 供给型接口：无参数，返回一个结果 Supplier<Integer> supplier = () -> (int)(Math.random() * 100); int randomNum = supplier.get(); // 函数型接口：接收一个参数，返回一个结果 Function<String, Integer> function = s -> s.length(); int length = function.apply(\\\"Hello Function\\\"); // 断言型接口：接收一个参数，返回boolean Predicate<String> predicate = s -> s.startsWith(\\\"Hello\\\"); boolean result = predicate.test(\\\"Hello Predicate\\\");\",\"我们也可以自定义函数式接口：\",\"@FunctionalInterface public interface Calculator { int calculate(int a, int b); } // 使用自定义函数式接口 Calculator add = (a, b) -> a + b; int sum = add.calculate(10, 20); // 结果为30\"]},\"539\":{\"h\":\"3. 方法引用\",\"t\":[\"方法引用是Lambda表达式的一种简化形式，它允许我们直接引用已存在的方法、构造方法或数组构造方法。方法引用使用::操作符。\",\"方法引用主要有以下几种类型：\",\"// 1. 静态方法引用 Function<String, Integer> parseInt = Integer::parseInt; int num = parseInt.apply(\\\"123\\\"); // 2. 实例方法引用 String str = \\\"Hello Method Reference\\\"; Supplier<Integer> lengthSupplier = str::length; int length = lengthSupplier.get(); // 3. 对象方法引用 List<String> list = Arrays.asList(\\\"a\\\", \\\"b\\\", \\\"c\\\"); list.forEach(System.out::println); // 4. 构造方法引用 Supplier<List<String>> listSupplier = ArrayList::new; List<String> newList = listSupplier.get();\",\"方法引用可以使代码更加简洁，提高可读性，特别是在Stream API中广泛使用。\"]},\"540\":{\"h\":\"4. 接口默认方法和静态方法\",\"t\":[\"Java 8允许在接口中定义默认方法和静态方法，这一特性解决了接口的向后兼容性问题。\"]},\"541\":{\"h\":\"4.1 默认方法\",\"t\":[\"默认方法使用default关键字修饰，接口实现类可以直接继承默认方法，也可以重写默认方法。\",\"public interface MyInterface { // 抽象方法 void abstractMethod(); // 默认方法 default void defaultMethod() { System.out.println(\\\"This is a default method\\\"); } } public class MyInterfaceImpl implements MyInterface { @Override public void abstractMethod() { System.out.println(\\\"Implement abstract method\\\"); } // 可选重写默认方法 @Override public void defaultMethod() { System.out.println(\\\"Override default method\\\"); } }\"]},\"542\":{\"h\":\"4.2 静态方法\",\"t\":[\"接口静态方法使用static关键字修饰，通过接口名直接调用。\",\"public interface MyInterface { // 静态方法 static void staticMethod() { System.out.println(\\\"This is a static method\\\"); } } // 调用接口静态方法 MyInterface.staticMethod();\",\"接口默认方法的引入，使得Java集合框架能够在不破坏现有代码的情况下添加新方法，如Iterable.forEach()、Collection.stream()等。\"]},\"543\":{\"h\":\"5. Stream API\",\"t\":[\"Stream API是Java 8中处理集合的利器，它提供了一种高效且易于使用的处理数据的方式。Stream API可以对集合进行过滤、映射、排序、聚合等操作，支持并行处理，提高处理大数据量的效率。\",\"Stream操作的基本流程包括：创建Stream、中间操作、终端操作。\",\"List<String> names = Arrays.asList(\\\"Alice\\\", \\\"Bob\\\", \\\"Charlie\\\", \\\"David\\\", \\\"Eva\\\"); // 1. 创建Stream Stream<String> stream = names.stream(); // 2. 中间操作：过滤以\\\"A\\\"开头的名字，转换为大写 Stream<String> processedStream = stream .filter(name -> name.startsWith(\\\"A\\\")) .map(String::toUpperCase); // 3. 终端操作：收集结果到List List<String> result = processedStream.collect(Collectors.toList());\",\"以下是一些常用的Stream操作示例：\",\"List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10); // 过滤偶数并求和 int sum = numbers.stream() .filter(n -> n % 2 == 0) .sum(); // 找出大于5的数并排序 List<Integer> sortedNumbers = numbers.stream() .filter(n -> n > 5) .sorted() .collect(Collectors.toList()); // 分组统计 Map<Integer, List<Integer>> groups = numbers.stream() .collect(Collectors.groupingBy(n -> n % 3)); // 并行流处理 long count = numbers.parallelStream() .filter(n -> n > 5) .count();\",\"Stream API的特点：\",\"惰性求值：中间操作不会立即执行，直到终端操作被调用\",\"一次性使用：Stream对象只能使用一次，再次使用需要重新创建\",\"并行处理：通过parallelStream()轻松实现并行处理\"]},\"544\":{\"h\":\"6. Optional类\",\"t\":[\"Optional类是Java 8引入的用于解决空指针异常（NullPointerException）的工具类。它封装了一个可能为null的值，可以显式地处理null情况，使代码更加健壮。\",\"Optional类的常用方法：\",\"// 创建Optional对象 Optional<String> optional = Optional.of(\\\"Hello Optional\\\"); Optional<String> emptyOptional = Optional.empty(); Optional<String> nullableOptional = Optional.ofNullable(null); // 判断是否有值 boolean isPresent = optional.isPresent(); // 获取值（如果为null会抛出NoSuchElementException） String value = optional.get(); // 如果有值则消费 optional.ifPresent(v -> System.out.println(v)); // 如果有值则返回，否则返回默认值 String result1 = nullableOptional.orElse(\\\"Default Value\\\"); // 如果有值则返回，否则通过Supplier获取 String result2 = nullableOptional.orElseGet(() -> \\\"Generated Value\\\"); // 如果有值则返回，否则抛出异常 String result3 = nullableOptional.orElseThrow(() -> new RuntimeException(\\\"Value is null\\\")); // 映射值 Optional<Integer> lengthOptional = optional.map(String::length); // 过滤值 Optional<String> filteredOptional = optional.filter(v -> v.length() > 10);\",\"使用Optional类可以避免显式的null检查，使代码更加简洁优雅。\"]},\"545\":{\"h\":\"7. 新的日期时间API\",\"t\":[\"Java 8引入了全新的日期时间API，位于java.time包下，解决了旧版Date和Calendar类的线程不安全、设计混乱等问题。\",\"新的日期时间API的主要类：\",\"LocalDate：日期（年、月、日）\",\"LocalTime：时间（时、分、秒、纳秒）\",\"LocalDateTime：日期时间\",\"ZonedDateTime：带时区的日期时间\",\"Duration：时间段（基于时间）\",\"Period：时间段（基于日期）\",\"DateTimeFormatter：日期时间格式化\",\"// 获取当前日期 LocalDate today = LocalDate.now(); // 创建指定日期 LocalDate birthday = LocalDate.of(1990, Month.JANUARY, 1); // 日期计算 LocalDate nextWeek = today.plusWeeks(1); LocalDate lastMonth = today.minusMonths(1); // 获取日期信息 int year = today.getYear(); Month month = today.getMonth(); int day = today.getDayOfMonth(); // 日期比较 boolean isAfter = today.isAfter(birthday); // 日期格式化 DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\\\"yyyy-MM-dd\\\"); String formattedDate = today.format(formatter); LocalDate parsedDate = LocalDate.parse(\\\"2023-01-01\\\", formatter); // 计算日期间隔 Period period = Period.between(birthday, today); int years = period.getYears(); int months = period.getMonths(); int days = period.getDays();\",\"新的日期时间API具有不可变性、线程安全、清晰的API设计等优点，推荐在Java 8及以上版本中使用。\"]},\"546\":{\"h\":\"知识扩展\"},\"547\":{\"h\":\"1. 设计思想\"},\"548\":{\"h\":\"（1）函数式编程范式的引入\",\"t\":[\"Java 8引入Lambda表达式和函数式接口，标志着Java开始支持函数式编程范式。函数式编程强调将函数作为一等公民，可以像其他数据类型一样传递和操作。这种范式带来了以下好处：\",\"代码更加简洁，减少样板代码\",\"提高代码可读性和可维护性\",\"便于并行处理和事件驱动编程\",\"促进无状态、纯函数的编写，减少副作用\"]},\"549\":{\"h\":\"（2）接口演进与向后兼容性\",\"t\":[\"Java 8的接口默认方法设计体现了对向后兼容性的重视。通过允许在接口中添加默认方法，Java能够在不破坏现有实现的情况下扩展接口功能，这对于Java集合框架等核心API的演进至关重要。\",\"默认方法的设计遵循了\\\"接口隔离原则\\\"和\\\"开闭原则\\\"，使得接口可以在不影响实现类的情况下进行扩展。\"]},\"550\":{\"h\":\"（3）Stream API的设计哲学\",\"t\":[\"Stream API的设计借鉴了函数式编程中的流式处理思想，通过将数据处理过程抽象为一系列操作，实现了声明式编程风格。这种设计有以下特点：\",\"关注点分离：将\\\"做什么\\\"和\\\"怎么做\\\"分离\",\"惰性求值：提高处理效率，避免不必要的计算\",\"并行友好：底层自动处理线程管理和同步\",\"可组合性：多个操作可以链式组合，形成流水线\"]},\"551\":{\"h\":\"2. 避坑指南\"},\"552\":{\"h\":\"（1）Lambda表达式中的变量捕获\",\"t\":[\"Lambda表达式可以捕获外部作用域的变量，但这些变量必须是final或事实上的final（即没有被重新赋值）。\",\"// 错误示例：变量被重新赋值 int count = 0; Runnable runnable = () -> { count++; System.out.println(count); }; // 正确示例：使用原子类或数组 AtomicInteger count = new AtomicInteger(0); Runnable runnable = () -> { count.incrementAndGet(); System.out.println(count); };\"]},\"553\":{\"h\":\"（2）Stream API的陷阱\",\"t\":[\"Stream只能使用一次：每个Stream对象只能执行一次终端操作，再次使用会抛出IllegalStateException\",\"并行流的过度使用：并行流并不总是比串行流快，对于小规模数据或简单操作，并行流的线程开销可能更高\",\"忽略异常处理：Stream操作中抛出的受检异常需要显式处理\",\"// 错误示例：重复使用Stream Stream<String> stream = list.stream(); stream.filter(s -> s.length() > 5).count(); stream.map(String::toUpperCase).collect(Collectors.toList()); // 抛出异常 // 正确示例：每次操作创建新的Stream long count = list.stream().filter(s -> s.length() > 5).count(); List<String> upperCaseList = list.stream().map(String::toUpperCase).collect(Collectors.toList());\"]},\"554\":{\"h\":\"（3）Optional类的正确使用\",\"t\":[\"不要过度使用Optional：只有当值可能为null时才使用Optional\",\"避免使用Optional.get()：直接调用get()如果值为null会抛出异常，应使用orElse()、orElseGet()等安全方法\",\"不要将Optional作为方法参数：这会增加API复杂度\",\"// 不推荐 public void process(Optional<String> value) { if (value.isPresent()) { // 处理值 } } // 推荐 public void process(String value) { // 显式处理null if (value != null) { // 处理值 } }\"]},\"555\":{\"h\":\"3. 深度思考题\"},\"556\":{\"h\":\"思考题1：Java 8的Lambda表达式是如何实现的？与匿名内部类有何区别？\",\"t\":[\"回答：Java 8的Lambda表达式并不是通过匿名内部类实现的，而是通过invokedynamic指令和方法句柄（Method Handle）实现的，这使得Lambda表达式具有更高的性能和更简洁的字节码。\",\"与匿名内部类的主要区别：\",\"字节码生成：Lambda表达式不会生成单独的类文件，而是在运行时动态生成调用点（Call Site）；匿名内部类会生成单独的类文件\",\"作用域：Lambda表达式没有自己的作用域，它捕获的变量是词法作用域的；匿名内部类有自己的作用域\",\"this引用：Lambda表达式中的this引用指向外部类；匿名内部类中的this引用指向匿名类本身\",\"性能：Lambda表达式的性能通常优于匿名内部类，特别是在频繁创建实例的场景\"]},\"557\":{\"h\":\"思考题2：如何在Java 8中实现函数式接口的组合？\",\"t\":[\"回答：Java 8的函数式接口提供了默认方法支持组合操作，主要包括：\",\"Predicate组合：and()、or()、negate()\",\"Predicate<Integer> isEven = n -> n % 2 == 0; Predicate<Integer> isGreaterThan5 = n -> n > 5; Predicate<Integer> isEvenAndGreaterThan5 = isEven.and(isGreaterThan5);\",\"Function组合：andThen()、compose()\",\"Function<Integer, Integer> multiplyBy2 = n -> n * 2; Function<Integer, Integer> add3 = n -> n + 3; Function<Integer, Integer> multiplyBy2AndAdd3 = multiplyBy2.andThen(add3); Function<Integer, Integer> add3AndMultiplyBy2 = multiplyBy2.compose(add3);\",\"Consumer组合：andThen()\",\"Consumer<String> print = System.out::println; Consumer<String> printUpperCase = s -> System.out.println(s.toUpperCase()); Consumer<String> printBoth = print.andThen(printUpperCase);\",\"通过这些组合方法，可以将多个简单的函数式接口组合成复杂的逻辑，实现代码的复用和简洁性。\"]},\"558\":{\"h\":\"生态-Java生态系统演进\"},\"559\":{\"h\":\"概述\",\"t\":[\"Java生态系统是一个庞大而活跃的技术体系，从1995年诞生至今，已发展成为包含编程语言、开发工具、应用框架、部署环境等多维度的技术生态。本章节将系统梳理Java生态从诞生到JDK8的演进历程，剖析其核心组件的发展脉络，并探讨生态系统的设计思想与未来趋势。\"]},\"560\":{\"h\":\"知识扩展\"},\"561\":{\"h\":\"1. 设计思想\",\"t\":[\"Java生态系统的成功得益于其独特的设计思想，这些原则指导着整个生态的发展方向：\"]},\"562\":{\"h\":\"（1）向后兼容性优先\",\"t\":[\"Java始终将向后兼容性作为核心设计目标，确保旧代码能够在新版本JDK上运行：\",\"二进制兼容性：类文件格式保持稳定\",\"源代码兼容性：避免语法变更影响现有代码\",\"行为兼容性：保持API行为一致\",\"这种设计思想使得企业能够安全地升级Java版本，保护投资。\"]},\"563\":{\"h\":\"（2）模块化与标准化\",\"t\":[\"Java生态通过清晰的模块边界和标准规范促进了生态系统的健康发展：\",\"JCP（Java Community Process）制定标准\",\"接口与实现分离（如JDBC、JPA）\",\"模块化设计（OSGi、Jigsaw项目）\"]},\"564\":{\"h\":\"（3）开源与社区驱动\",\"t\":[\"Java生态的发展离不开开源社区的贡献：\",\"开源许可证（GPL、Apache等）\",\"社区协作开发模式\",\"第三方库与框架的蓬勃发展\"]},\"565\":{\"h\":\"2. 避坑指南\",\"t\":[\"在Java生态系统中开发时，需要注意以下常见陷阱：\"]},\"566\":{\"h\":\"（1）版本迁移问题\",\"t\":[\"JDK版本选择：企业应用建议选择LTS版本（如JDK 8、11、17）\",\"API废弃处理：关注@Deprecated注解，避免使用过时API\",\"升级策略：采用渐进式升级，先进行兼容性测试\",\"// 错误示例：使用已废弃的API Date date = new Date(2023, 10, 5); // 已废弃，月份从0开始且年份偏移1900 // 正确示例：使用新API LocalDate date = LocalDate.of(2023, 11, 5);\"]},\"567\":{\"h\":\"（2）依赖管理陷阱\",\"t\":[\"依赖冲突：使用mvn dependency:tree分析依赖树\",\"版本锁定：在父POM中使用dependencyManagement统一版本\",\"传递依赖：谨慎使用exclusions排除不需要的依赖\",\"<!-- Maven依赖管理示例 --> <dependencyManagement> <dependencies> <dependency> <groupId>com.google.guava</groupId> <artifactId>guava</artifactId> <version>28.0-jre</version> </dependency> </dependencies> </dependencyManagement>\"]},\"568\":{\"h\":\"（3）框架选择策略\",\"t\":[\"避免过度设计：小型项目不宜引入复杂框架\",\"考虑团队熟悉度：选择团队成员熟悉的技术栈\",\"评估长期维护：优先选择活跃社区支持的框架\"]},\"569\":{\"h\":\"3. 深度思考题\"},\"570\":{\"h\":\"思考题1：Java生态系统如何保持向后兼容性的同时实现创新？\",\"t\":[\"回答：Java通过多种机制平衡兼容性与创新：\",\"渐进式API演进：新增API而非修改现有API\",\"可选特性：新功能默认不启用（如Java 9的模块系统）\",\"兼容性标记：使用--enable-preview标记实验性功能\",\"多版本JAR：允许同一JAR支持多个JDK版本\",\"详细的迁移指南：提供工具（如jdeprscan）和文档支持\",\"这种平衡使Java既能满足企业对稳定性的需求，又能不断引入现代编程语言特性。\"]},\"571\":{\"h\":\"思考题2：微服务架构对Java生态系统产生了哪些影响？\",\"t\":[\"回答：微服务架构推动Java生态发生了显著变化：\",\"轻量级框架兴起：Spring Boot、Micronaut等简化微服务开发\",\"容器化支持：Java应用更好地适应Docker、Kubernetes环境\",\"响应式编程：RxJava、Project Reactor等响应式库普及\",\"服务网格：Istio等服务网格技术补充传统Java EE功能\",\"无服务器架构：AWS Lambda等平台支持Java函数\"]},\"572\":{\"h\":\"知识要点\"},\"573\":{\"h\":\"1. Java语言与JDK的演进\",\"t\":[\"Java语言的发展伴随着JDK版本的迭代，每一个重要版本都带来了革命性的特性：\"]},\"574\":{\"h\":\"（1）Java的诞生与早期发展（1995-2004）\",\"t\":[\"1995年：Java语言正式发布，提出\\\"一次编写，到处运行\\\"(WORA)的跨平台理念\",\"1996年：JDK 1.0发布，包含Applet、AWT等早期技术\",\"1998年：JDK 1.2发布，引入集合框架、JIT编译器和Swing\",\"2004年：JDK 5发布，带来泛型、注解、枚举、自动装箱拆箱等重大特性\",\"// JDK 5泛型示例 List<String> stringList = new ArrayList<String>(); stringList.add(\\\"Java\\\"); String value = stringList.get(0); // 无需类型转换 // JDK 5注解示例 @Override public String toString() { return \\\"Annotation example\\\"; }\"]},\"575\":{\"h\":\"（2）Java 8的里程碑式更新（2014）\",\"t\":[\"JDK 8引入了函数式编程范式，极大改变了Java编程方式：\",\"// Lambda表达式示例 List<String> names = Arrays.asList(\\\"Alice\\\", \\\"Bob\\\", \\\"Charlie\\\"); names.stream() .filter(name -> name.startsWith(\\\"A\\\")) .forEach(System.out::println); // 输出 Alice // Stream API示例 List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5); int sum = numbers.stream() .filter(n -> n % 2 == 0) .mapToInt(Integer::intValue) .sum(); // 结果为6 // 接口默认方法 public interface MyInterface { default void defaultMethod() { System.out.println(\\\"This is a default method\\\"); } }\"]},\"576\":{\"h\":\"2. 企业级Java平台的演进\",\"t\":[\"企业级应用开发是Java生态的重要组成部分：\"]},\"577\":{\"h\":\"（1）从J2EE到Jakarta EE\",\"t\":[\"1999年：J2EE 1.0发布，定义企业级应用标准\",\"2005年：重命名为Java EE\",\"2017年：移交Eclipse基金会管理，更名为Jakarta EE\"]},\"578\":{\"h\":\"（2）核心规范发展\",\"t\":[\"Servlet规范：从Servlet 1.0到Servlet 3.1，支持异步处理\",\"JPA规范：替代EJB实体Bean，成为ORM标准\",\"CDI规范：提供依赖注入和上下文管理\",\"// JPA实体示例 @Entity @Table(name = \\\"users\\\") public class User { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private Long id; @Column(nullable = false) private String username; // 省略getter和setter }\"]},\"579\":{\"h\":\"3. 框架生态的崛起\",\"t\":[\"Java生态的繁荣离不开丰富的框架支持：\"]},\"580\":{\"h\":\"（1）Spring Framework的发展\",\"t\":[\"2002年：Spring Framework诞生，以IoC和AOP为核心\",\"2004年：Spring 1.0正式发布\",\"2006年：Spring Boot尚未出现，Spring MVC成为Web开发主流\",\"// Spring IoC示例 public class UserService { private UserRepository userRepository; // 构造函数注入 public UserService(UserRepository userRepository) { this.userRepository = userRepository; } public User getUserById(Long id) { return userRepository.findById(id); } }\"]},\"581\":{\"h\":\"（2）ORM框架的演进\",\"t\":[\"Hibernate：成为JPA参考实现\",\"MyBatis：专注SQL映射的轻量级框架\"]},\"582\":{\"h\":\"4. 构建工具的演变\",\"t\":[\"Java构建工具经历了从复杂到简化的发展过程：\"]},\"583\":{\"h\":\"（1）Ant（2000年）\",\"t\":[\"基于XML配置的构建工具，需要手动定义所有构建步骤：\",\"<!-- Ant构建文件示例 --> <project name=\\\"HelloWorld\\\" default=\\\"compile\\\" basedir=\\\".\\\"> <target name=\\\"compile\\\"> <mkdir dir=\\\"classes\\\"/> <javac srcdir=\\\"src\\\" destdir=\\\"classes\\\"/> </target> </project>\"]},\"584\":{\"h\":\"（2）Maven（2004年）\",\"t\":[\"引入约定优于配置和依赖管理：\",\"<!-- Maven POM文件示例 --> <project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\\\"> <modelVersion>4.0.0</modelVersion> <groupId>com.example</groupId> <artifactId>demo</artifactId> <version>1.0-SNAPSHOT</version> <dependencies> <dependency> <groupId>junit</groupId> <artifactId>junit</artifactId> <version>4.12</version> <scope>test</scope> </dependency> </dependencies> </project>\"]},\"585\":{\"h\":\"（3）Gradle（2012年）\",\"t\":[\"结合Ant的灵活性和Maven的依赖管理，使用Groovy/ Kotlin DSL：\",\"// Gradle构建文件示例 dependencies { implementation 'com.google.guava:guava:28.0-jre' testImplementation 'junit:junit:4.12' }\"]},\"586\":{\"h\":\"4.1 Java并发-理论基础\"},\"587\":{\"h\":\"核心理论\"},\"588\":{\"h\":\"1.1 并发与并行的区别\",\"t\":[\"并发是指多个任务在同一时间段内交替执行，而并行则是指多个任务在同一时刻同时执行。在单核CPU中，只能实现并发；而在多核CPU中，可以实现并行。\"]},\"589\":{\"h\":\"1.2 线程与进程的关系\",\"t\":[\"进程是操作系统进行资源分配的基本单位，线程是CPU调度的基本单位。一个进程可以包含多个线程，线程共享进程的内存空间和资源。\"]},\"590\":{\"h\":\"1.3 并发编程的挑战\",\"t\":[\"线程安全问题：多个线程同时访问共享资源可能导致数据不一致\",\"死锁：两个或多个线程互相等待对方释放资源\",\"活锁：线程不断重复执行相同的操作，但无法继续前进\",\"性能问题：线程创建、上下文切换等开销\"]},\"591\":{\"h\":\"代码实践\"},\"592\":{\"h\":\"2.1 创建线程的三种方式\",\"t\":[\"// 方式一：继承Thread类 class MyThread extends Thread { @Override public void run() { System.out.println(\\\"Thread running\\\"); } } // 方式二：实现Runnable接口 class MyRunnable implements Runnable { @Override public void run() { System.out.println(\\\"Runnable running\\\"); } } // 方式三：使用Callable和Future class MyCallable implements Callable<String> { @Override public String call() throws Exception { return \\\"Callable result\\\"; } } public class ThreadCreationExample { public static void main(String[] args) throws ExecutionException, InterruptedException { // 方式一 MyThread thread = new MyThread(); thread.start(); // 方式二 Thread runnableThread = new Thread(new MyRunnable()); runnableThread.start(); // 方式三 ExecutorService executor = Executors.newSingleThreadExecutor(); Future<String> future = executor.submit(new MyCallable()); System.out.println(future.get()); executor.shutdown(); } }\"]},\"593\":{\"h\":\"2.2 线程安全的计数器实现\",\"t\":[\"public class ThreadSafeCounter { private int count = 0; private final Object lock = new Object(); public void increment() { synchronized (lock) { count++; } } public int getCount() { synchronized (lock) { return count; } } }\"]},\"594\":{\"h\":\"设计思想\"},\"595\":{\"h\":\"3.1 并发编程模型\",\"t\":[\"共享内存模型：线程通过共享内存进行通信，如Java\",\"消息传递模型：线程通过发送消息进行通信，如Actor模型\"]},\"596\":{\"h\":\"3.2 不可变对象设计\",\"t\":[\"不可变对象天生是线程安全的，因为它们的状态在创建后不会改变。在Java中，可以通过将类声明为final，所有字段声明为final来创建不可变对象。\"]},\"597\":{\"h\":\"3.3 线程池设计理念\",\"t\":[\"线程池通过预先创建一定数量的线程，重用线程来减少线程创建和销毁的开销，提高系统性能。Java中的ThreadPoolExecutor是线程池的核心实现。\"]},\"598\":{\"h\":\"避坑指南\"},\"599\":{\"h\":\"4.1 synchronized关键字的正确使用\",\"t\":[\"避免在非静态方法上使用synchronized(this)，可能导致死锁\",\"不要同步String常量或基本类型的包装类对象\",\"尽量减小同步代码块的范围\"]},\"600\":{\"h\":\"4.2 volatile关键字的局限性\",\"t\":[\"volatile只能保证可见性和有序性，不能保证原子性。对于复合操作（如i++），仍需要使用synchronized或原子类。\"]},\"601\":{\"h\":\"4.3 ThreadLocal的内存泄漏风险\",\"t\":[\"ThreadLocal如果使用不当，可能导致内存泄漏。需要注意在使用完ThreadLocal后调用remove()方法清除线程局部变量。\"]},\"602\":{\"h\":\"深度思考题\",\"t\":[\"什么是Java内存模型（JMM）？它如何保证多线程的内存可见性、原子性和有序性？\",\"乐观锁和悲观锁的区别是什么？在什么情况下应该使用乐观锁？\",\"线程池的核心参数有哪些？如何合理配置线程池参数？\",\"思考题回答：\",\"Java内存模型（JMM）定义了线程和主内存之间的抽象关系，规定所有变量存储在主内存中，线程操作变量时需要将变量加载到工作内存中。JMM通过volatile、synchronized和final关键字以及Happens-Before规则来保证多线程的内存可见性、原子性和有序性。\",\"乐观锁假设并发操作不会发生冲突，只在提交操作时检查是否有冲突；悲观锁则假设并发操作会发生冲突，在操作前先获取锁。乐观锁适用于读多写少的场景，如缓存更新；悲观锁适用于写多读少的场景，如数据库更新。\",\"线程池的核心参数包括核心线程数、最大线程数、队列容量、拒绝策略等。配置线程池时需要考虑CPU核心数、任务类型（CPU密集型或IO密集型）、任务执行时间等因素。例如，CPU密集型任务的线程数可以设置为CPU核心数+1，IO密集型任务的线程数可以设置为CPU核心数*2。\"]},\"603\":{\"h\":\"4.2 Java并发-线程基础\"},\"604\":{\"h\":\"核心理论\"},\"605\":{\"h\":\"1.1 线程生命周期\",\"t\":[\"Java线程具有6种状态：新建（NEW）、运行（RUNNABLE）、阻塞（BLOCKED）、等待（WAITING）、超时等待（TIMED_WAITING）和终止（TERMINATED）。线程状态之间的转换是并发编程的基础。\"]},\"606\":{\"h\":\"1.2 线程调度机制\",\"t\":[\"Java线程调度采用抢占式调度模型，优先级高的线程优先执行。线程优先级范围为1-10，默认优先级为5。但线程优先级不能保证执行顺序，依赖于操作系统实现。\"]},\"607\":{\"h\":\"1.3 线程中断机制\",\"t\":[\"线程中断是一种协作机制，通过调用interrupt()方法设置中断标志，线程可以通过isInterrupted()检查中断状态并做出响应。 InterruptedException异常会清除中断标志，需要注意正确处理。\"]},\"608\":{\"h\":\"代码实践\"},\"609\":{\"h\":\"2.1 线程状态转换示例\",\"t\":[\"public class ThreadStateExample { public static void main(String[] args) throws InterruptedException { Thread thread = new Thread(() -> { try { Thread.sleep(1000); // 进入TIMED_WAITING状态 synchronized (ThreadStateExample.class) { ThreadStateExample.class.wait(); // 进入WAITING状态 } } catch (InterruptedException e) { e.printStackTrace(); } }); System.out.println(\\\"线程状态1: \\\" + thread.getState()); // NEW thread.start(); System.out.println(\\\"线程状态2: \\\" + thread.getState()); // RUNNABLE Thread.sleep(100); System.out.println(\\\"线程状态3: \\\" + thread.getState()); // TIMED_WAITING Thread.sleep(1000); System.out.println(\\\"线程状态4: \\\" + thread.getState()); // WAITING synchronized (ThreadStateExample.class) { ThreadStateExample.class.notify(); } Thread.sleep(100); System.out.println(\\\"线程状态5: \\\" + thread.getState()); // TERMINATED } }\"]},\"610\":{\"h\":\"2.2 线程中断处理\",\"t\":[\"public class ThreadInterruptExample { public static void main(String[] args) throws InterruptedException { Thread worker = new Thread(() -> { while (!Thread.currentThread().isInterrupted()) { System.out.println(\\\"工作中...\\\"); try { Thread.sleep(500); } catch (InterruptedException e) { // 重新设置中断标志 Thread.currentThread().interrupt(); break; } } System.out.println(\\\"线程中断，退出工作\\\"); }); worker.start(); Thread.sleep(2000); worker.interrupt(); // 中断线程 } }\"]},\"611\":{\"h\":\"设计思想\"},\"612\":{\"h\":\"3.1 线程协作模式\",\"t\":[\"生产者-消费者模式：通过共享队列实现线程间数据传递\",\"读写分离模式：允许多个读线程同时访问，写线程互斥访问\",\"线程池模式：管理线程生命周期，提高资源利用率\"]},\"613\":{\"h\":\"3.2 线程安全的单例模式\",\"t\":[\"public class ThreadSafeSingleton { private static volatile ThreadSafeSingleton instance; private ThreadSafeSingleton() {} public static ThreadSafeSingleton getInstance() { if (instance == null) { synchronized (ThreadSafeSingleton.class) { if (instance == null) { instance = new ThreadSafeSingleton(); } } } return instance; } }\"]},\"614\":{\"h\":\"避坑指南\"},\"615\":{\"h\":\"4.1 线程启动与运行的区别\",\"t\":[\"调用start()方法才会启动线程，使线程进入就绪状态；直接调用run()方法只是普通方法调用，不会创建新线程。\"]},\"616\":{\"h\":\"4.2 避免线程优先级反转\",\"t\":[\"不要过度依赖线程优先级，高优先级线程可能被低优先级线程阻塞，导致优先级反转。可以通过设置适当的锁超时或使用Lock接口避免。\"]},\"617\":{\"h\":\"4.3 正确停止线程\",\"t\":[\"避免使用stop()、suspend()和resume()方法，这些方法已被废弃。应使用中断机制或自定义标志位安全停止线程。\"]},\"618\":{\"h\":\"深度思考题\",\"t\":[\"线程的sleep()和wait()方法有什么区别？\",\"如何实现两个线程交替打印奇偶数？\",\"ThreadLocal的实现原理是什么？如何避免内存泄漏？\",\"思考题回答：\",\"sleep()是Thread类的静态方法，不会释放锁，指定时间后自动唤醒；wait()是Object类的方法，必须在同步块中调用，会释放锁，需要notify()或notifyAll()唤醒。\",\"可以使用synchronized关键字、Lock接口或信号量实现。例如，使用两个线程共享一个计数器，通过wait()和notify()交替获取锁并打印数字。\",\"ThreadLocal通过每个线程维护一个ThreadLocalMap来存储线程局部变量。内存泄漏风险源于ThreadLocalMap的Entry是弱引用，而Value是强引用。避免方法：使用完ThreadLocal后调用remove()方法清除值，或使用静态ThreadLocal变量。\"]},\"619\":{\"h\":\"4.3 Java并发-线程池\"},\"620\":{\"h\":\"核心理论\"},\"621\":{\"h\":\"1.1 线程池的工作原理\",\"t\":[\"线程池通过预先创建一定数量的线程，管理线程的生命周期，实现线程的复用。当有任务提交时，线程池会从池中分配空闲线程执行任务，任务完成后线程不会销毁，而是返回池中等待新任务。\"]},\"622\":{\"h\":\"1.2 线程池的核心参数\",\"t\":[\"核心线程数（corePoolSize）：线程池长期维持的线程数量\",\"最大线程数（maximumPoolSize）：线程池允许创建的最大线程数\",\"队列容量（workQueue）：用于缓存等待执行的任务的阻塞队列\",\"拒绝策略（RejectedExecutionHandler）：任务过多时的处理策略\",\"空闲线程存活时间（keepAliveTime）：非核心线程的空闲超时时间\",\"线程工厂（ThreadFactory）：用于创建线程的工厂类\"]},\"623\":{\"h\":\"1.3 常见线程池类型\",\"t\":[\"FixedThreadPool：固定核心线程数的线程池\",\"CachedThreadPool：可缓存的线程池，根据需求创建线程\",\"SingleThreadExecutor：单线程的线程池\",\"ScheduledThreadPool：支持定时任务的线程池\"]},\"624\":{\"h\":\"代码实践\"},\"625\":{\"h\":\"2.1 自定义线程池实现\",\"t\":[\"public class CustomThreadPoolExample { public static void main(String[] args) { // 创建自定义线程池 ThreadPoolExecutor executor = new ThreadPoolExecutor( 2, // 核心线程数 4, // 最大线程数 60, // 空闲线程存活时间 TimeUnit.SECONDS, new ArrayBlockingQueue<>(5), // 队列容量 Executors.defaultThreadFactory(), new ThreadPoolExecutor.AbortPolicy() // 拒绝策略 ); // 提交任务 for (int i = 0; i < 10; i++) { int taskId = i; executor.submit(() -> { System.out.println(\\\"任务\\\" + taskId + \\\"由线程\\\" + Thread.currentThread().getName() + \\\"执行\\\"); try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } }); } executor.shutdown(); } }\"]},\"626\":{\"h\":\"2.2 线程池监控与调优\",\"t\":[\"public class ThreadPoolMonitorExample { public static void main(String[] args) { ThreadPoolExecutor executor = new ThreadPoolExecutor( 2, 4, 60, TimeUnit.SECONDS, new ArrayBlockingQueue<>(5) ); // 定时打印线程池状态 ScheduledExecutorService monitor = Executors.newSingleThreadScheduledExecutor(); monitor.scheduleAtFixedRate(() -> { System.out.println(\\\"线程池状态：\\\"); System.out.println(\\\"核心线程数：\\\" + executor.getCorePoolSize()); System.out.println(\\\"活动线程数：\\\" + executor.getActiveCount()); System.out.println(\\\"已完成任务数：\\\" + executor.getCompletedTaskCount()); System.out.println(\\\"队列任务数：\\\" + executor.getQueue().size()); System.out.println(\\\"----------------------------------------\\\"); }, 0, 1, TimeUnit.SECONDS); // 提交任务 for (int i = 0; i < 10; i++) { int taskId = i; executor.submit(() -> { try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } }); } try { Thread.sleep(10000); } catch (InterruptedException e) { e.printStackTrace(); } executor.shutdown(); monitor.shutdown(); } }\"]},\"627\":{\"h\":\"设计思想\"},\"628\":{\"h\":\"3.1 线程池的设计模式\",\"t\":[\"享元模式：通过复用线程对象减少资源消耗\",\"生产者-消费者模式：任务提交者作为生产者，线程池中的线程作为消费者\",\"策略模式：拒绝策略的灵活切换\"]},\"629\":{\"h\":\"3.2 线程池参数调优策略\",\"t\":[\"CPU密集型任务：核心线程数 = CPU核心数 + 1\",\"IO密集型任务：核心线程数 = CPU核心数 * 2\",\"混合型任务：拆分后分别处理或按IO密集型配置\",\"队列选择：无界队列可能导致内存溢出，建议使用有界队列\"]},\"630\":{\"h\":\"避坑指南\"},\"631\":{\"h\":\"4.1 避免使用Executors创建线程池\",\"t\":[\"Executors创建的线程池可能存在以下问题：\",\"FixedThreadPool和SingleThreadExecutor使用无界队列，可能导致OOM\",\"CachedThreadPool允许创建无限线程，可能导致OOM 建议使用ThreadPoolExecutor手动创建线程池，明确核心参数\"]},\"632\":{\"h\":\"4.2 正确处理线程池中的异常\",\"t\":[\"线程池提交任务有两种方式：execute()和submit()。execute()直接抛出异常，submit()将异常封装在Future中，需要通过get()方法获取。\"]},\"633\":{\"h\":\"4.3 线程池的优雅关闭\",\"t\":[\"shutdown()：等待所有任务执行完毕后关闭\",\"shutdownNow()：立即关闭，尝试中断正在执行的任务\",\"建议使用shutdown() + awaitTermination()组合实现优雅关闭\"]},\"634\":{\"h\":\"深度思考题\",\"t\":[\"线程池的工作队列有哪些类型？各有什么特点？\",\"线程池的拒绝策略有哪些？如何自定义拒绝策略？\",\"如何实现线程池的动态参数调整？\",\"思考题回答：\",\"常见的工作队列类型：\",\"ArrayBlockingQueue：基于数组的有界阻塞队列\",\"LinkedBlockingQueue：基于链表的可选有界阻塞队列\",\"SynchronousQueue：不存储元素的阻塞队列，直接提交给线程\",\"PriorityBlockingQueue：支持优先级排序的无界阻塞队列\",\"DelayedWorkQueue：支持延迟执行的无界阻塞队列\",\"拒绝策略包括：\",\"AbortPolicy：直接抛出RejectedExecutionException\",\"CallerRunsPolicy：由提交任务的线程执行任务\",\"DiscardPolicy：直接丢弃任务\",\"DiscardOldestPolicy：丢弃队列中最旧的任务 自定义拒绝策略需实现RejectedExecutionHandler接口\",\"可以通过ThreadPoolExecutor的setCorePoolSize()、setMaximumPoolSize()等方法动态调整参数。结合监控系统，根据系统负载实时调整线程池参数。\"]},\"635\":{\"h\":\"4.4 Java并发-锁机制\"},\"636\":{\"h\":\"核心理论\"},\"637\":{\"h\":\"1.1 锁的基本概念\",\"t\":[\"锁是并发编程中用于保证线程安全的核心机制，通过限制对共享资源的访问来避免竞态条件。Java提供了多种锁实现，从低级别的synchronized到高级别的Lock接口及其实现类。\"]},\"638\":{\"h\":\"1.2 锁的分类\",\"t\":[\"悲观锁 vs 乐观锁：悲观锁假设冲突必然发生（如synchronized），乐观锁假设冲突很少发生（如CAS）\",\"独占锁 vs 共享锁：独占锁仅允许一个线程访问（如ReentrantLock），共享锁允许多个线程同时访问（如ReadWriteLock的读锁）\",\"可重入锁：允许线程重复获取已持有的锁（如synchronized和ReentrantLock）\",\"公平锁 vs 非公平锁：公平锁按请求顺序获取锁，非公平锁允许插队获取锁\"]},\"639\":{\"h\":\"1.3 AQS框架原理\",\"t\":[\"AbstractQueuedSynchronizer（AQS）是Java并发工具的基础框架，通过维护一个volatile int state和FIFO等待队列实现同步功能。自定义同步器只需重写tryAcquire/tryRelease等方法即可实现不同的同步语义。\"]},\"640\":{\"h\":\"代码实践\"},\"641\":{\"h\":\"2.1 synchronized关键字使用场景\",\"t\":[\"public class SynchronizedExample { // 实例方法锁 public synchronized void instanceMethodLock() { // 临界区代码 } // 静态方法锁 public static synchronized void staticMethodLock() { // 临界区代码 } // 代码块锁 public void blockLock() { synchronized (this) { // 临界区代码 } } }\"]},\"642\":{\"h\":\"2.2 ReentrantLock实现生产者-消费者模型\",\"t\":[\"public class ProducerConsumerWithLock { private final Queue<Integer> queue = new LinkedList<>(); private final int capacity = 5; private final Lock lock = new ReentrantLock(); private final Condition notFull = lock.newCondition(); private final Condition notEmpty = lock.newCondition(); public void produce(int value) throws InterruptedException { lock.lock(); try { while (queue.size() == capacity) { notFull.await(); // 队列满时等待 } queue.add(value); System.out.println(\\\"生产: \\\" + value); notEmpty.signal(); // 唤醒消费者 } finally { lock.unlock(); } } public int consume() throws InterruptedException { lock.lock(); try { while (queue.isEmpty()) { notEmpty.await(); // 队列空时等待 } int value = queue.poll(); System.out.println(\\\"消费: \\\" + value); notFull.signal(); // 唤醒生产者 return value; } finally { lock.unlock(); } } }\"]},\"643\":{\"h\":\"2.3 读写锁优化并发读性能\",\"t\":[\"public class ReadWriteLockExample { private final Map<String, Object> cache = new HashMap<>(); private final ReadWriteLock rwLock = new ReentrantReadWriteLock(); private final Lock readLock = rwLock.readLock(); private final Lock writeLock = rwLock.writeLock(); public Object get(String key) { readLock.lock(); try { return cache.get(key); } finally { readLock.unlock(); } } public void put(String key, Object value) { writeLock.lock(); try { cache.put(key, value); } finally { writeLock.unlock(); } } }\"]},\"644\":{\"h\":\"设计思想\"},\"645\":{\"h\":\"3.1 锁优化技术\",\"t\":[\"偏向锁：减少无竞争情况下的锁开销，只在第一次获取锁时设置线程ID\",\"轻量级锁：通过CAS操作尝试获取锁，避免重量级锁的系统调用\",\"重量级锁：通过操作系统互斥量实现，适用于多线程竞争场景\",\"锁消除：JVM自动消除不可能存在竞争的锁\",\"锁粗化：将多个连续的细粒度锁合并为一个粗粒度锁\"]},\"646\":{\"h\":\"3.2 无锁编程思想\",\"t\":[\"无锁编程通过CAS操作避免使用传统锁，提高并发性能。Java中的原子类（如AtomicInteger）和ConcurrentHashMap都采用了无锁设计。\"]},\"647\":{\"h\":\"避坑指南\"},\"648\":{\"h\":\"4.1 死锁的产生与避免\",\"t\":[\"死锁四要素：互斥条件、请求与保持条件、不可剥夺条件、循环等待条件。避免死锁的方法：\",\"按固定顺序获取锁\",\"使用tryLock()设置超时\",\"使用LockSupport中断线程\"]},\"649\":{\"h\":\"4.2 synchronized与Lock的选择\",\"t\":[\"简单场景优先使用synchronized（JVM优化更成熟）\",\"需要灵活功能（如中断、超时、公平锁）时使用Lock\",\"读多写少场景使用ReadWriteLock提高并发性\"]},\"650\":{\"h\":\"4.3 锁的过度使用\",\"t\":[\"避免对不需要同步的代码加锁，过度同步会导致性能下降。可以通过不可变对象、ThreadLocal等方式减少锁竞争。\"]},\"651\":{\"h\":\"深度思考题\",\"t\":[\"synchronized的实现原理是什么？JVM对synchronized做了哪些优化？\",\"ReentrantLock和synchronized的区别是什么？各自适用场景？\",\"什么是锁降级？为什么ReadWriteLock支持锁降级而不支持锁升级？\",\"思考题回答：\",\"synchronized基于对象头的Mark Word实现，JVM通过对象监视器（monitor）实现锁机制。优化包括：偏向锁、轻量级锁、重量级锁、锁消除和锁粗化。\",\"区别：ReentrantLock支持中断、超时、公平锁和条件变量，需要手动释放锁；synchronized是隐式锁，由JVM自动管理。适用场景：简单同步用synchronized，需要高级功能用ReentrantLock。\",\"锁降级是指从写锁降级为读锁，可在持有写锁时获取读锁再释放写锁。ReadWriteLock不支持锁升级（读锁升级为写锁），因为可能导致死锁：多个读锁同时尝试升级为写锁时互相等待。\"]},\"652\":{\"h\":\"4.5 Java并发-关键字\"},\"653\":{\"h\":\"核心理论\"},\"654\":{\"h\":\"1.1 并发关键字概述\",\"t\":[\"Java提供了多个用于并发编程的关键字，这些关键字是实现线程安全的基础。核心并发关键字包括：synchronized、volatile、final、static、wait、notify、notifyAll、Thread.sleep()、Thread.yield()等。\"]},\"655\":{\"h\":\"1.2 关键字的内存语义\",\"t\":[\"synchronized：保证原子性、可见性和有序性\",\"volatile：保证可见性和有序性，不保证原子性\",\"final：保证对象初始化的安全性，被final修饰的字段不可变\"]},\"656\":{\"h\":\"1.3 Happens-Before规则\",\"t\":[\"Happens-Before规则定义了操作之间的可见性关系，是理解Java内存模型的基础：\",\"程序顺序规则：线程中的每个操作Happens-Before于该线程中后续的操作\",\"监视器锁规则：解锁操作Happens-Before于后续对同一锁的加锁操作\",\"volatile变量规则：对volatile字段的写操作Happens-Before于后续对同一字段的读操作\",\"线程启动规则：Thread.start()操作Happens-Before于线程中的任何操作\",\"线程终止规则：线程中的所有操作Happens-Before于线程的终止检测\"]},\"657\":{\"h\":\"代码实践\"},\"658\":{\"h\":\"2.1 volatile关键字的正确使用\",\"t\":[\"public class VolatileExample { private volatile boolean flag = false; private int count = 0; public void writer() { flag = true; // volatile写 count = 1; // 普通写 } public void reader() { if (flag) { // volatile读 System.out.println(count); // 可能输出0，因为普通写不具有volatile的内存语义 } } }\"]},\"659\":{\"h\":\"2.2 synchronized与volatile的组合使用\",\"t\":[\"public class SyncVolatileExample { private volatile int state = 0; private final Object lock = new Object(); public void increment() { synchronized (lock) { state++; } } public int getState() { return state; // volatile保证可见性 } }\"]},\"660\":{\"h\":\"2.3 wait/notify实现线程协作\",\"t\":[\"public class WaitNotifyExample { private final Object lock = new Object(); private boolean condition = false; public void waitForCondition() throws InterruptedException { synchronized (lock) { while (!condition) { lock.wait(); // 必须在循环中检查条件 } // 处理业务逻辑 } } public void setCondition() { synchronized (lock) { condition = true; lock.notifyAll(); // 唤醒所有等待线程 } } }\"]},\"661\":{\"h\":\"设计思想\"},\"662\":{\"h\":\"3.1 关键字的底层实现\",\"t\":[\"synchronized：JDK 6前基于对象监视器（monitor）实现，JDK 6后引入偏向锁、轻量级锁和重量级锁\",\"volatile：通过内存屏障（Memory Barrier）实现，禁止指令重排序\",\"final：通过编译器和处理器确保字段初始化完成后才能被访问\"]},\"663\":{\"h\":\"3.2 无锁编程与CAS\",\"t\":[\"Java中的原子类（如AtomicInteger）使用CAS（Compare-And-Swap）操作实现无锁并发控制，CAS基于硬件指令实现，比锁机制更轻量。\",\"public class AtomicIntegerExample { private final AtomicInteger count = new AtomicInteger(0); public void increment() { count.incrementAndGet(); // CAS操作 } public int getCount() { return count.get(); } }\"]},\"664\":{\"h\":\"避坑指南\"},\"665\":{\"h\":\"4.1 volatile的误用\",\"t\":[\"不要将volatile用于复合操作（如i++），无法保证原子性\",\"不要依赖volatile解决线程安全问题，它仅保证可见性和有序性\",\"避免过度使用volatile，可能影响性能\"]},\"666\":{\"h\":\"4.2 synchronized的使用陷阱\",\"t\":[\"避免同步String常量或基本类型包装类对象\",\"不要在构造方法中使用synchronized\",\"避免同步空对象或null\"]},\"667\":{\"h\":\"4.3 wait/notify的正确姿势\",\"t\":[\"wait()必须在同步块中调用\",\"始终在循环中检查等待条件\",\"优先使用notifyAll()而非notify()，避免线程饥饿\"]},\"668\":{\"h\":\"深度思考题\",\"t\":[\"volatile关键字如何保证可见性和有序性？底层实现原理是什么？\",\"synchronized和ReentrantLock的底层实现有何异同？\",\"final关键字如何保证对象的初始化安全性？\",\"思考题回答：\",\"volatile通过内存屏障实现可见性和有序性。写操作后插入StoreStore屏障和StoreLoad屏障，读操作前插入LoadLoad屏障和LoadStore屏障，禁止指令重排序并强制刷新缓存。\",\"相同点：都实现了可重入锁机制。不同点：synchronized是JVM内置锁，由JVM自动管理；ReentrantLock是API层面的锁，需要手动释放，支持中断、超时和公平锁。\",\"final字段在构造方法中初始化完成后，会通过编译器确保其他线程只能看到初始化完成的值。JVM禁止将final字段的写操作重排序到构造方法之外，确保对象引用对其他线程可见时，其final字段已经初始化完成。\"]},\"669\":{\"h\":\"4.6 Java并发-原子类\"},\"670\":{\"h\":\"核心理论\"},\"671\":{\"h\":\"1.1 原子类的概念与作用\",\"t\":[\"原子类是Java并发包提供的线程安全工具类，通过CAS（Compare-And-Swap）操作保证操作的原子性，避免使用synchronized关键字带来的性能开销。原子类支持原子性的更新基本类型、引用类型和数组元素。\"]},\"672\":{\"h\":\"1.2 原子类的分类\",\"t\":[\"基本类型原子类：AtomicInteger、AtomicLong、AtomicBoolean\",\"引用类型原子类：AtomicReference、AtomicStampedReference、AtomicMarkableReference\",\"数组类型原子类：AtomicIntegerArray、AtomicLongArray、AtomicReferenceArray\",\"字段更新器原子类：AtomicIntegerFieldUpdater、AtomicLongFieldUpdater、AtomicReferenceFieldUpdater\",\"累加器原子类：LongAdder、DoubleAdder（JDK 8新增，高并发下性能优于AtomicLong）\"]},\"673\":{\"h\":\"1.3 CAS操作原理\",\"t\":[\"CAS操作包含三个参数：内存位置（V）、预期原值（A）和新值（B）。当且仅当V的值等于A时，才将V的值更新为B，否则不做操作。CAS是一种无锁算法，通过硬件指令保证操作的原子性。\"]},\"674\":{\"h\":\"代码实践\"},\"675\":{\"h\":\"2.1 基本类型原子类使用示例\",\"t\":[\"public class AtomicIntegerExample { private static final AtomicInteger count = new AtomicInteger(0); public static void increment() { // CAS操作：如果当前值为expect，则更新为update count.compareAndSet(0, 1); // 原子自增 count.incrementAndGet(); // 原子自减 count.decrementAndGet(); // 原子添加指定值 count.addAndGet(5); } public static void main(String[] args) throws InterruptedException { Runnable task = () -> { for (int i = 0; i < 1000; i++) { increment(); } }; Thread t1 = new Thread(task); Thread t2 = new Thread(task); t1.start(); t2.start(); t1.join(); t2.join(); System.out.println(\\\"最终结果: \\\" + count.get()); // 输出2000，保证线程安全 } }\"]},\"676\":{\"h\":\"2.2 解决ABA问题的AtomicStampedReference\",\"t\":[\"public class AtomicStampedReferenceExample { private static final AtomicStampedReference<Integer> value = new AtomicStampedReference<>(0, 0); public static void main(String[] args) { // 线程1执行ABA操作 new Thread(() -> { int stamp = value.getStamp(); System.out.println(\\\"线程1获取当前值: \\\" + value.getReference() + \\\", 版本号: \\\" + stamp); try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } // 执行ABA操作 value.compareAndSet(0, 1, stamp, stamp + 1); System.out.println(\\\"线程1将值从0改为1，新版本号: \\\" + value.getStamp()); value.compareAndSet(1, 0, value.getStamp(), value.getStamp() + 1); System.out.println(\\\"线程1将值从1改回0，新版本号: \\\" + value.getStamp()); }).start(); // 线程2尝试更新 new Thread(() -> { int stamp = value.getStamp(); System.out.println(\\\"线程2获取当前值: \\\" + value.getReference() + \\\", 版本号: \\\" + stamp); try { Thread.sleep(2000); } catch (InterruptedException e) { e.printStackTrace(); } // 版本号已变化，更新失败 boolean success = value.compareAndSet(0, 2, stamp, stamp + 1); System.out.println(\\\"线程2更新是否成功: \\\" + success + \\\", 当前值: \\\" + value.getReference() + \\\", 当前版本号: \\\" + value.getStamp()); }).start(); } }\"]},\"677\":{\"h\":\"2.3 高性能累加器LongAdder\",\"t\":[\"public class LongAdderExample { private static final LongAdder counter = new LongAdder(); public static void main(String[] args) throws InterruptedException { Runnable task = () -> { for (int i = 0; i < 10000; i++) { counter.increment(); } }; List<Thread> threads = new ArrayList<>(); for (int i = 0; i < 10; i++) { Thread thread = new Thread(task); threads.add(thread); thread.start(); } for (Thread thread : threads) { thread.join(); } System.out.println(\\\"累加结果: \\\" + counter.sum()); // 输出100000 } }\"]},\"678\":{\"h\":\"设计思想\"},\"679\":{\"h\":\"3.1 原子类的无锁设计\",\"t\":[\"原子类基于无锁算法实现，通过CAS操作避免了传统锁机制的上下文切换和阻塞开销。在高并发场景下，无锁设计通常比锁机制具有更高的吞吐量。\"]},\"680\":{\"h\":\"3.2 LongAdder的分段累加设计\",\"t\":[\"LongAdder在高并发下将热点数据分散到多个Cell中，每个线程更新自己的Cell，最后汇总结果，减少了CAS竞争，显著提高了并发性能。\"]},\"681\":{\"h\":\"3.3 原子类与不可变对象\",\"t\":[\"结合原子类和不可变对象可以构建线程安全的数据结构。例如，使用AtomicReference存储不可变对象的引用，通过原子更新实现无锁的线程安全。\"]},\"682\":{\"h\":\"避坑指南\"},\"683\":{\"h\":\"4.1 CAS的ABA问题\",\"t\":[\"当一个值从A变为B再变回A时，CAS操作会误认为值没有变化。解决方法：使用AtomicStampedReference添加版本号，或AtomicMarkableReference添加标记位。\"]},\"684\":{\"h\":\"4.2 原子类的过度使用\",\"t\":[\"原子类适用于简单的原子操作，复杂逻辑仍需使用锁机制。过度使用原子类可能导致代码可读性下降和逻辑复杂度增加。\"]},\"685\":{\"h\":\"4.3 LongAdder的内存开销\",\"t\":[\"LongAdder在高并发下会创建多个Cell对象，可能增加内存开销。在低并发场景下，AtomicLong可能是更优选择。\"]},\"686\":{\"h\":\"深度思考题\",\"t\":[\"CAS操作的优缺点是什么？在什么情况下CAS性能不如锁机制？\",\"除了ABA问题，CAS操作还有哪些局限性？\",\"LongAdder和AtomicLong的实现原理有何区别？各自适用场景是什么？\",\"思考题回答：\",\"CAS优点：无锁、低开销、高并发下性能好；缺点：可能导致ABA问题、循环时间长开销大、只能保证单个变量的原子操作。当竞争激烈导致CAS失败率高时，循环重试会消耗大量CPU资源，性能可能不如锁机制。\",\"CAS的其他局限性：只能保证单个变量的原子操作、无法实现阻塞、可能导致活锁（线程反复重试CAS操作）。\",\"AtomicLong基于单个变量的CAS操作实现；LongAdder通过分段CAS（多个Cell）实现，减少竞争。适用场景：低并发或需要精确计数用AtomicLong；高并发且允许最终一致性用LongAdder。\"]},\"687\":{\"h\":\"5.1 JVM理论基础\"},\"688\":{\"h\":\"核心理论\"},\"689\":{\"h\":\"1.1 JVM定义与作用\",\"t\":[\"Java虚拟机（JVM）是执行Java字节码的虚拟计算机，它是Java跨平台特性的核心。JVM负责将字节码翻译成机器码并执行，同时管理内存、线程、安全等运行时环境。\"]},\"690\":{\"h\":\"1.2 JVM架构组成\",\"t\":[\"JVM主要由以下几个部分组成：\",\"类加载器子系统：负责加载.class文件到内存\",\"运行时数据区：包括方法区、堆、虚拟机栈、本地方法栈和程序计数器\",\"执行引擎：解释器、即时编译器（JIT）和垃圾回收器\",\"本地方法接口：连接Java程序与本地库\"]},\"691\":{\"h\":\"1.3 JVM运行时数据区域\",\"t\":[\"程序计数器：当前线程执行的字节码行号指示器，线程私有\",\"虚拟机栈：存储方法调用栈帧，包含局部变量表、操作数栈等，线程私有\",\"本地方法栈：为本地方法服务，线程私有\",\"堆：存储对象实例，垃圾回收的主要区域，线程共享\",\"方法区：存储类信息、常量、静态变量等，线程共享（JDK 8后元空间替代永久代）\"]},\"692\":{\"h\":\"代码实践\"},\"693\":{\"h\":\"2.1 查看JVM内存结构示例\",\"t\":[\"public class JVMMemoryDemo { public static void main(String[] args) { // 堆内存使用示例 Object heapObj = new Object(); System.out.println(\\\"堆对象: \\\" + heapObj); // 方法区常量示例 String constant = \\\"JVM内存模型\\\"; System.out.println(\\\"方法区常量: \\\" + constant); // 虚拟机栈局部变量示例 int stackVar = 100; System.out.println(\\\"栈局部变量: \\\" + stackVar); // 演示递归调用导致栈溢出 try { recursiveCall(0); } catch (StackOverflowError e) { System.out.println(\\\"栈溢出异常: \\\" + e.getMessage()); } } private static void recursiveCall(int count) { System.out.println(\\\"递归调用次数: \\\" + count); recursiveCall(count + 1); } }\"]},\"694\":{\"h\":\"2.2 JVM参数设置与内存监控\",\"t\":[\"public class JVMParamDemo { public static void main(String[] args) { // 获取JVM内存信息 Runtime runtime = Runtime.getRuntime(); long maxMemory = runtime.maxMemory() / (1024 * 1024); // 最大内存 long totalMemory = runtime.totalMemory() / (1024 * 1024); // 当前总内存 long freeMemory = runtime.freeMemory() / (1024 * 1024); // 空闲内存 System.out.println(\\\"JVM内存信息:\\\"); System.out.println(\\\"最大内存: \\\" + maxMemory + \\\"MB\\\"); System.out.println(\\\"总内存: \\\" + totalMemory + \\\"MB\\\"); System.out.println(\\\"空闲内存: \\\" + freeMemory + \\\"MB\\\"); System.out.println(\\\"可用内存: \\\" + (maxMemory - totalMemory + freeMemory) + \\\"MB\\\"); } }\",\"运行命令：java -Xms512m -Xmx1024m -XX:+PrintGCDetails JVMParamDemo\"]},\"695\":{\"h\":\"设计思想\"},\"696\":{\"h\":\"3.1 JVM跨平台设计理念\",\"t\":[\"JVM通过字节码和不同平台的JVM实现，实现了\\\"一次编写，到处运行\\\"的跨平台特性。字节码是连接Java源代码和机器码的中间表示，由JVM解释或编译执行。\"]},\"697\":{\"h\":\"3.2 栈与堆的分离设计\",\"t\":[\"JVM将内存分为栈（线程私有）和堆（线程共享），栈用于方法执行，堆用于对象存储。这种分离设计提高了内存管理效率，同时避免了线程安全问题。\"]},\"698\":{\"h\":\"3.3 垃圾回收机制设计\",\"t\":[\"JVM采用自动垃圾回收机制，解放了程序员的内存管理负担。垃圾回收器通过可达性分析算法判断对象是否存活，并采用不同的回收策略（如标记-清除、标记-复制、标记-整理等）。\"]},\"699\":{\"h\":\"避坑指南\"},\"700\":{\"h\":\"4.1 堆内存溢出（OOM）\",\"t\":[\"原因：对象创建过多且无法回收，如内存泄漏或内存需求超过-Xmx设置\",\"解决：检查内存泄漏（使用MAT工具），增加堆内存，优化对象生命周期\"]},\"701\":{\"h\":\"4.2 栈溢出（StackOverflowError）\",\"t\":[\"原因：方法调用栈过深，如无限递归\",\"解决：修复递归逻辑，增加栈内存（-Xss参数）\"]},\"702\":{\"h\":\"4.3 方法区溢出\",\"t\":[\"原因：加载类过多，如动态生成类或框架使用不当\",\"解决：JDK 8+增加元空间大小（-XX:MetaspaceSize），减少类加载数量\"]},\"703\":{\"h\":\"深度思考题\",\"t\":[\"JVM内存模型与Java内存模型（JMM）有什么区别？\",\"为什么说Java中的String是不可变的？这与JVM内存结构有什么关系？\",\"JVM是如何实现多线程的？线程切换对JVM内存有什么影响？\",\"思考题回答：\",\"JVM内存模型描述的是JVM的物理内存布局（堆、栈等），而Java内存模型（JMM）定义的是多线程之间共享变量的可见性、原子性和有序性规则，是一种抽象的内存模型。\",\"String不可变是因为其内部char数组被final修饰，且没有提供修改数组的方法。字符串常量存储在方法区的常量池中，不可变特性使得字符串可以安全地被共享，减少内存占用。\",\"JVM通过映射操作系统原生线程实现多线程。线程切换时，JVM需要保存和恢复线程的上下文（程序计数器、栈帧等），频繁的线程切换会增加CPU开销，可能导致缓存失效，影响性能。\"]},\"704\":{\"h\":\"5.2 JVM内存模型\"},\"705\":{\"h\":\"核心理论\"},\"706\":{\"h\":\"1.1 JVM内存区域划分\",\"t\":[\"JVM内存分为线程私有区域和线程共享区域：\",\"线程私有：程序计数器、虚拟机栈、本地方法栈\",\"线程共享：堆、方法区（JDK 8后为元空间）\",\"直接内存：不属于JVM运行时数据区，但被NIO使用\"]},\"707\":{\"h\":\"1.2 各内存区域详解\",\"t\":[\"程序计数器：当前线程执行字节码的行号指示器，唯一不会OOM的区域\",\"虚拟机栈：每个方法调用创建栈帧，存储局部变量表、操作数栈、动态链接、方法出口\",\"本地方法栈：为Native方法服务，HotSpot将其与虚拟机栈合二为一\",\"堆：对象实例分配的主要区域，GC的主要战场，可分为新生代（Eden、Survivor）和老年代\",\"方法区：存储类元信息、常量池、静态变量等，JDK 8用元空间替代永久代，元空间使用本地内存\",\"运行时常量池：方法区的一部分，存储编译期生成的字面量和符号引用\"]},\"708\":{\"h\":\"1.3 内存分配策略\",\"t\":[\"对象优先在Eden区分配：大对象（如长字符串、数组）直接进入老年代\",\"长期存活对象进入老年代：通过年龄计数器判断，默认15岁晋升\",\"动态对象年龄判定：Survivor区中相同年龄对象总和超过一半，年龄大于等于该年龄的对象进入老年代\",\"空间分配担保：Minor GC前检查老年代最大可用连续空间是否大于新生代对象总大小\"]},\"709\":{\"h\":\"代码实践\"},\"710\":{\"h\":\"2.1 内存区域OOM异常演示\",\"t\":[\"public class MemoryOOMDemo { // 堆内存溢出 static class HeapObject {} public static void heapOOM() { List<HeapObject> list = new ArrayList<>(); while (true) { list.add(new HeapObject()); } } // 虚拟机栈溢出 private static int stackDepth = 0; public static void stackSOF() { try { stackDepth++; stackSOF(); } catch (StackOverflowError e) { System.out.println(\\\"栈深度: \\\" + stackDepth); throw e; } } // 方法区（元空间）溢出 public static void metaspaceOOM() { while (true) { Enhancer enhancer = new Enhancer(); enhancer.setSuperclass(HeapObject.class); enhancer.setUseCache(false); enhancer.setCallback((MethodInterceptor) (obj, method, args1, proxy) -> proxy.invokeSuper(obj, args1)); enhancer.create(); } } public static void main(String[] args) { // 分别运行以下方法观察不同OOM异常 // heapOOM(); // -Xms20m -Xmx20m // stackSOF(); // -Xss128k // metaspaceOOM(); // -XX:MetaspaceSize=10m -XX:MaxMetaspaceSize=10m } }\"]},\"711\":{\"h\":\"2.2 对象内存布局分析\",\"t\":[\"public class ObjectLayoutDemo { public static void main(String[] args) { Object obj = new Object(); System.out.println(ClassLayout.parseInstance(obj).toPrintable()); // 演示对象头Mark Word变化 synchronized (obj) { System.out.println(\\\"加锁后对象布局:\\\"); System.out.println(ClassLayout.parseInstance(obj).toPrintable()); } } }\",\"依赖：需要引入jol-core依赖\",\"<dependency> <groupId>org.openjdk.jol</groupId> <artifactId>jol-core</artifactId> <version>0.16</version> </dependency>\"]},\"712\":{\"h\":\"设计思想\"},\"713\":{\"h\":\"3.1 内存分代回收思想\",\"t\":[\"基于对象生命周期的不同，将堆分为新生代和老年代：\",\"新生代：对象存活时间短，回收频繁，采用标记-复制算法\",\"老年代：对象存活时间长，回收较少，采用标记-清除或标记-整理算法 这种分代设计提高了垃圾回收效率，降低了内存碎片\"]},\"714\":{\"h\":\"3.2 栈帧结构设计\",\"t\":[\"栈帧包含：\",\"局部变量表：存储方法参数和局部变量\",\"操作数栈：方法执行的工作区\",\"动态链接：指向运行时常量池的方法引用\",\"方法出口：方法正常或异常退出的位置 栈帧的设计实现了方法的独立执行环境和高效调用\"]},\"715\":{\"h\":\"3.3 元空间替代永久代的设计考量\",\"t\":[\"JDK 8用元空间替代永久代的原因：\",\"永久代大小难以确定，容易OOM\",\"元空间使用本地内存，受系统内存限制\",\"便于HotSpot与JRockit合并，统一内存管理\"]},\"716\":{\"h\":\"避坑指南\"},\"717\":{\"h\":\"4.1 堆内存参数设置\",\"t\":[\"-Xms与-Xmx：建议设置为相同值，避免运行时动态调整堆大小\",\"新生代与老年代比例：默认1:2，可通过-XX:NewRatio调整\",\"Survivor区比例：默认Eden:S0:S1=8:1:1，可通过-XX:SurvivorRatio调整\"]},\"718\":{\"h\":\"4.2 大对象处理\",\"t\":[\"避免创建过大对象（如几MB的数组），可分块处理\",\"使用-XX:PretenureSizeThreshold参数控制大对象直接进入老年代\",\"注意NIO直接内存使用，避免DirectMemoryOOM\"]},\"719\":{\"h\":\"4.3 元空间优化\",\"t\":[\"JDK 8+通过-XX:MetaspaceSize和-XX:MaxMetaspaceSize控制元空间大小\",\"避免频繁创建和卸载类，如动态代理、反射等场景\",\"监控元空间使用，防止内存泄漏\"]},\"720\":{\"h\":\"深度思考题\",\"t\":[\"为什么Survivor区需要两个（From和To）？\",\"对象在内存中的布局是怎样的？对象头包含哪些信息？\",\"什么是TLAB（Thread Local Allocation Buffer）？它的作用是什么？\",\"思考题回答：\",\"Survivor区设计两个是为了实现复制算法，解决内存碎片问题。每次GC时，将Eden和From区存活对象复制到To区，清空Eden和From区，然后From和To区角色互换。这样保证总有一个Survivor区为空，避免内存碎片。\",\"对象内存布局包括：对象头（Mark Word、Klass Pointer）、实例数据和对齐填充。对象头包含哈希码、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID等信息。\",\"TLAB是线程本地分配缓冲区，是堆中线程私有的一小块区域。它的作用是避免多线程竞争，提高对象分配效率。线程优先在TLAB中分配对象，TLAB用完后才使用共享区域分配。\"]},\"721\":{\"h\":\"5.3 JVM类文件结构\"},\"722\":{\"h\":\"核心理论\"},\"723\":{\"h\":\"1.1 类文件格式概述\",\"t\":[\"Java类文件（.class）是一组以8字节为基础单位的二进制流，采用一种类似C语言结构体的伪结构来存储数据，包括无符号数和表两种数据类型。类文件格式严格规定了类的各种信息如何存储，是JVM实现跨平台的基础。\"]},\"724\":{\"h\":\"1.2 类文件结构详解\",\"t\":[\"类文件结构由以下部分组成（按顺序排列）：\",\"魔数（Magic Number）：0xCAFEBABE，标识文件类型\",\"版本号（Version）： minor_version和major_version，如JDK 8对应52.0\",\"常量池（Constant Pool）：存储字面量和符号引用，类文件的核心\",\"访问标志（Access Flags）：标识类的访问权限和属性（如public、abstract、final）\",\"类索引、父类索引和接口索引集合：确定类的继承关系\",\"字段表集合（Field Info）：描述类的字段信息\",\"方法表集合（Method Info）：描述类的方法信息\",\"属性表集合（Attribute Info）：存储额外信息（如Code、LineNumberTable）\"]},\"725\":{\"h\":\"1.3 常量池类型\",\"t\":[\"常量池包含17种常量类型，主要分为：\",\"字面量：字符串常量、整数、浮点数等\",\"符号引用：类和接口符号引用、字段符号引用、方法符号引用 常量池是类加载过程中解析阶段的主要依据，将符号引用转换为直接引用。\"]},\"726\":{\"h\":\"代码实践\"},\"727\":{\"h\":\"2.1 查看类文件结构\",\"t\":[\"使用javap命令分析类文件：\",\"# 编译Java文件 javac HelloWorld.java # 查看类文件结构 javap -v HelloWorld.class\",\"HelloWorld.java代码：\",\"public class HelloWorld { private String message = \\\"Hello, JVM!\\\"; public void printMessage() { System.out.println(message); } public static void main(String[] args) { new HelloWorld().printMessage(); } }\"]},\"728\":{\"h\":\"2.2 解析常量池示例\",\"t\":[\"以下是javap输出的部分常量池信息：\",\"Constant pool: #1 = Methodref #6.#20 // java/lang/Object.\\\"<init>\\\":()V #2 = Fieldref #5.#21 // HelloWorld.message:Ljava/lang/String; #3 = Fieldref #22.#23 // java/lang/System.out:Ljava/io/PrintStream; #4 = Methodref #24.#25 // java/io/PrintStream.println:(Ljava/lang/String;)V #5 = Class #26 // HelloWorld #6 = Class #27 // java/lang/Object #7 = Utf8 message #8 = Utf8 Ljava/lang/String; #9 = Utf8 <init> #10 = Utf8 ()V #11 = Utf8 Code #12 = Utf8 LineNumberTable #13 = Utf8 LocalVariableTable #14 = Utf8 this #15 = Utf8 LHelloWorld; #16 = Utf8 printMessage #17 = Utf8 main #18 = Utf8 ([Ljava/lang/String;)V #19 = Utf8 SourceFile #20 = NameAndType #9:#10 // \\\"<init>\\\":()V #21 = NameAndType #7:#8 // message:Ljava/lang/String; #22 = Class #28 // java/lang/System #23 = NameAndType #29:#30 // out:Ljava/io/PrintStream; #24 = Class #31 // java/io/PrintStream #25 = NameAndType #32:#33 // println:(Ljava/lang/String;)V #26 = Utf8 HelloWorld #27 = Utf8 java/lang/Object #28 = Utf8 java/lang/System #29 = Utf8 out #30 = Utf8 Ljava/io/PrintStream; #31 = Utf8 java/io/PrintStream #32 = Utf8 println #33 = Utf8 (Ljava/lang/String;)V #34 = Utf8 HelloWorld.java\"]},\"729\":{\"h\":\"2.3 自定义类加载器读取类文件\",\"t\":[\"public class CustomClassLoader extends ClassLoader { public Class<?> loadClassFromFile(String path) throws IOException { byte[] b = loadClassData(path); return defineClass(null, b, 0, b.length); } private byte[] loadClassData(String path) throws IOException { File file = new File(path); try (InputStream is = new FileInputStream(file); ByteArrayOutputStream baos = new ByteArrayOutputStream()) { byte[] buffer = new byte[1024]; int bytesRead; while ((bytesRead = is.read(buffer)) != -1) { baos.write(buffer, 0, bytesRead); } return baos.toByteArray(); } } public static void main(String[] args) throws Exception { CustomClassLoader loader = new CustomClassLoader(); Class<?> clazz = loader.loadClassFromFile(\\\"HelloWorld.class\\\"); Object obj = clazz.newInstance(); Method method = clazz.getMethod(\\\"printMessage\\\"); method.invoke(obj); } }\"]},\"730\":{\"h\":\"设计思想\"},\"731\":{\"h\":\"3.1 类文件的二进制格式设计\",\"t\":[\"类文件采用紧凑的二进制格式，具有以下优点：\",\"节省存储空间和传输带宽\",\"快速解析和验证\",\"平台无关性，只与JVM规范相关 这种设计使得Java字节码可以在任何实现JVM规范的虚拟机上运行。\"]},\"732\":{\"h\":\"3.2 常量池的共享设计\",\"t\":[\"常量池集中存储类中所有的字面量和符号引用，实现了数据共享，减少了冗余。常量池中的常量被类的字段、方法等共享引用，提高了内存利用率。\"]},\"733\":{\"h\":\"3.3 属性表的可扩展性设计\",\"t\":[\"属性表机制使得类文件格式具有良好的可扩展性。JVM规范定义了一些标准属性（如Code、LineNumberTable），同时允许自定义属性，只需保证JVM能忽略不认识的属性即可。\"]},\"734\":{\"h\":\"避坑指南\"},\"735\":{\"h\":\"4.1 版本号不兼容问题\",\"t\":[\"编译的class文件版本高于运行时JVM版本会导致UnsupportedClassVersionError\",\"解决：使用-target参数指定编译版本，如javac -target 1.8 HelloWorld.java\"]},\"736\":{\"h\":\"4.2 常量池溢出\",\"t\":[\"常量池容量有限制（u2类型，最大65535项），过多常量会导致编译失败\",\"解决：拆分大类，减少常量数量，避免在代码中生成过多字符串常量\"]},\"737\":{\"h\":\"4.3 类文件验证失败\",\"t\":[\"类文件不符合JVM规范会导致VerifyError\",\"常见原因：手动修改class文件、低版本编译器编译高版本特性\",\"解决：使用标准编译器，避免手动修改class文件\"]},\"738\":{\"h\":\"深度思考题\",\"t\":[\"为什么Java类文件要使用魔数0xCAFEBABE？\",\"常量池中的符号引用和直接引用有什么区别？何时进行转换？\",\"如何判断一个class文件是否被篡改过？\",\"思考题回答：\",\"魔数0xCAFEBABE是Java创始人James Gosling选择的，灵感来自于他喜欢的咖啡（CAFE BABE）。魔数的作用是快速识别文件类型，避免JVM加载非class文件。\",\"符号引用是用一组符号描述所引用的目标，与虚拟机实现的内存布局无关；直接引用是可以直接指向目标的指针、偏移量或句柄，与内存布局相关。转换发生在类加载的解析阶段，当符号引用所代表的目标已被加载到内存中时。\",\"可以通过以下方式判断class文件是否被篡改：1）校验文件的数字签名（如果有）；2）计算文件的哈希值并与可信哈希值比对；3）使用javap等工具分析类结构，检查是否有异常方法或属性；4）利用JVM的类验证机制，被篡改的class文件通常无法通过验证。\"]},\"739\":{\"h\":\"5.4 JVM类加载机制\"},\"740\":{\"h\":\"核心理论\"},\"741\":{\"h\":\"1.1 类加载的生命周期\",\"t\":[\"类从被加载到虚拟机内存中开始，到卸载出内存为止，其生命周期包括：加载（Loading）、验证（Verification）、准备（Preparation）、解析（Resolution）、初始化（Initialization）、使用（Using）和卸载（Unloading）七个阶段。其中验证、准备、解析三个阶段统称为连接（Linking）。\"]},\"742\":{\"h\":\"1.2 类加载的双亲委派模型\",\"t\":[\"双亲委派模型是Java类加载器的核心机制，其工作过程是：当一个类加载器收到类加载请求时，首先将请求委派给父类加载器完成，只有当父类加载器无法加载该类时，子类加载器才会尝试自己加载。这种模型避免了类的重复加载，保证了Java核心库的安全性。\",\"类加载器的层次结构：\",\"启动类加载器（Bootstrap ClassLoader）：加载JRE核心类库（如rt.jar），由C++实现\",\"扩展类加载器（Extension ClassLoader）：加载JRE扩展目录（ext目录）中的类\",\"应用程序类加载器（Application ClassLoader）：加载应用程序classpath下的类\",\"自定义类加载器（Custom ClassLoader）：用户自定义的类加载器\"]},\"743\":{\"h\":\"1.3 类初始化时机\",\"t\":[\"JVM规定，只有在以下五种主动使用情况下才会触发类的初始化：\",\"创建类的实例（new关键字、反射、克隆、反序列化）\",\"调用类的静态方法\",\"访问类的静态字段（被final修饰的常量除外）\",\"初始化子类时，父类未初始化则先初始化父类\",\"虚拟机启动时，指定的主类（包含main()方法的类）\"]},\"744\":{\"h\":\"代码实践\"},\"745\":{\"h\":\"2.1 双亲委派模型演示\",\"t\":[\"public class ClassLoaderDemo { public static void main(String[] args) { // 获取系统类加载器 ClassLoader appClassLoader = ClassLoader.getSystemClassLoader(); System.out.println(\\\"应用程序类加载器: \\\" + appClassLoader); // 获取扩展类加载器 ClassLoader extClassLoader = appClassLoader.getParent(); System.out.println(\\\"扩展类加载器: \\\" + extClassLoader); // 获取启动类加载器（null表示由C++实现，无法直接获取） ClassLoader bootstrapClassLoader = extClassLoader.getParent(); System.out.println(\\\"启动类加载器: \\\" + bootstrapClassLoader); // 查看当前类的类加载器 ClassLoader currentClassLoader = ClassLoaderDemo.class.getClassLoader(); System.out.println(\\\"当前类的类加载器: \\\" + currentClassLoader); // 查看Java核心类的类加载器 ClassLoader stringClassLoader = String.class.getClassLoader(); System.out.println(\\\"String类的类加载器: \\\" + stringClassLoader); // null，表示由启动类加载器加载 } }\"]},\"746\":{\"h\":\"2.2 自定义类加载器实现\",\"t\":[\"public class CustomClassLoader extends ClassLoader { private String classPath; public CustomClassLoader(String classPath) { this.classPath = classPath; } // 重写findClass方法 @Override protected Class<?> findClass(String name) throws ClassNotFoundException { try { byte[] classData = loadClassData(name); if (classData == null) { throw new ClassNotFoundException(); } // 调用defineClass方法将字节数组转换为Class对象 return defineClass(name, classData, 0, classData.length); } catch (IOException e) { throw new ClassNotFoundException(e.getMessage()); } } private byte[] loadClassData(String className) throws IOException { // 将类名转换为文件路径 String path = classPath + File.separatorChar + className.replace('.', File.separatorChar) + \\\".class\\\"; try (InputStream is = new FileInputStream(path); ByteArrayOutputStream baos = new ByteArrayOutputStream()) { byte[] buffer = new byte[1024]; int bytesRead; while ((bytesRead = is.read(buffer)) != -1) { baos.write(buffer, 0, bytesRead); } return baos.toByteArray(); } } public static void main(String[] args) throws Exception { // 创建自定义类加载器 CustomClassLoader customClassLoader = new CustomClassLoader(\\\"/path/to/classes\\\"); // 加载自定义类 Class<?> clazz = customClassLoader.loadClass(\\\"com.example.TestClass\\\"); // 反射调用方法 Object obj = clazz.newInstance(); Method method = clazz.getMethod(\\\"test\\\"); method.invoke(obj); } }\"]},\"747\":{\"h\":\"2.3 打破双亲委派模型\",\"t\":[\"public class BreakParentDelegateClassLoader extends ClassLoader { private String classPath; public BreakParentDelegateClassLoader(String classPath) { super(null); // 将父类加载器设置为null，打破双亲委派 this.classPath = classPath; } @Override protected Class<?> findClass(String name) throws ClassNotFoundException { // 实现与自定义类加载器相同的加载逻辑 try { byte[] classData = loadClassData(name); return defineClass(name, classData, 0, classData.length); } catch (IOException e) { throw new ClassNotFoundException(e.getMessage()); } } private byte[] loadClassData(String className) throws IOException { // 实现与自定义类加载器相同的路径转换逻辑 String path = classPath + File.separatorChar + className.replace('.', File.separatorChar) + \\\".class\\\"; try (InputStream is = new FileInputStream(path); ByteArrayOutputStream baos = new ByteArrayOutputStream()) { byte[] buffer = new byte[1024]; int bytesRead; while ((bytesRead = is.read(buffer)) != -1) { baos.write(buffer, 0, bytesRead); } return baos.toByteArray(); } } }\"]},\"748\":{\"h\":\"设计思想\"},\"749\":{\"h\":\"3.1 双亲委派模型的安全设计\",\"t\":[\"双亲委派模型通过优先由父类加载器加载类，确保了Java核心类库的安全性。例如，用户无法自定义一个名为java.lang.String的类来替代核心类库中的String类，因为启动类加载器会优先加载核心类库中的String类。\"]},\"750\":{\"h\":\"3.2 类加载器的隔离性设计\",\"t\":[\"不同的类加载器可以加载相同名称的类，但这些类在JVM中被视为不同的类。这种隔离性使得不同的应用模块可以使用不同版本的类，实现了模块间的隔离。例如，Tomcat通过自定义类加载器实现了Web应用之间的类隔离。\"]},\"751\":{\"h\":\"3.3 延迟加载与按需加载\",\"t\":[\"类加载机制采用延迟加载策略，只有当类被主动使用时才会触发加载。这种按需加载的方式减少了内存占用，提高了JVM的启动速度。\"]},\"752\":{\"h\":\"避坑指南\"},\"753\":{\"h\":\"4.1 类加载器泄漏\",\"t\":[\"原因：自定义类加载器未被正确回收，导致其加载的类也无法卸载\",\"常见场景：线程上下文类加载器、ThreadLocal中持有类加载器引用\",\"解决：使用完类加载器后及时清除引用，避免长期持有\"]},\"754\":{\"h\":\"4.2 双亲委派模型的局限性\",\"t\":[\"问题：父类加载器无法访问子类加载器加载的类\",\"解决：使用线程上下文类加载器（Thread Context ClassLoader），如JDBC加载驱动时打破双亲委派\"]},\"755\":{\"h\":\"4.3 类版本冲突\",\"t\":[\"原因：不同模块依赖同一类的不同版本\",\"解决：使用OSGi等模块化框架，或通过自定义类加载器实现类隔离\"]},\"756\":{\"h\":\"深度思考题\",\"t\":[\"什么是线程上下文类加载器？它是如何打破双亲委派模型的？\",\"类加载过程中，准备阶段和初始化阶段有什么区别？\",\"如何实现一个热部署类加载器？\",\"思考题回答：\",\"线程上下文类加载器是Thread类中的一个ClassLoader类型的属性，通过setContextClassLoader()设置。它允许父类加载器请求子类加载器加载类，从而打破了双亲委派模型的单向委派关系。例如，JDBC驱动加载时，核心类库中的DriverManager（由启动类加载器加载）需要加载应用程序提供的驱动类（由应用程序类加载器加载），此时通过线程上下文类加载器实现。\",\"准备阶段是为类的静态变量分配内存并设置初始值（通常是零值），而初始化阶段是根据程序中的赋值语句为静态变量赋值。例如，对于static int a = 1;，准备阶段a的值为0，初始化阶段a的值才被设置为1。\",\"热部署类加载器的实现原理：1）自定义类加载器加载目标类；2）当需要更新类时，创建新的类加载器实例加载新版本的类；3）使用新的类实例替换旧的实例。关键是确保旧的类加载器和类实例可以被GC回收，避免内存泄漏。\"]},\"757\":{\"h\":\"5.5 JVM垃圾回收机制\"},\"758\":{\"h\":\"核心理论\"},\"759\":{\"h\":\"1.1 垃圾回收基本概念\",\"t\":[\"垃圾回收（Garbage Collection, GC）是JVM自动管理内存的机制，主要负责：\",\"识别内存中不再使用的对象（垃圾）\",\"回收这些对象占用的内存空间\",\"整理内存碎片（可选）\",\"垃圾回收的目标是实现内存自动管理，减少内存泄漏和内存溢出问题，提高开发效率。\"]},\"760\":{\"h\":\"1.2 对象存活判定算法\"},\"761\":{\"h\":\"1.2.1 引用计数法\",\"t\":[\"原理：为每个对象添加引用计数器，当对象被引用时计数器加1，引用失效时减1，计数器为0的对象可回收\",\"优点：实现简单，判定效率高\",\"缺点：无法解决循环引用问题（如两个对象互相引用但都不再被其他对象引用）\"]},\"762\":{\"h\":\"1.2.2 可达性分析算法\",\"t\":[\"原理：以\\\"GC Roots\\\"为起点，向下搜索所有可达的对象，不可达的对象即为可回收对象\",\"GC Roots包括：虚拟机栈中引用的对象、方法区中类静态属性引用的对象、方法区中常量引用的对象、本地方法栈中JNI引用的对象\",\"优点：可解决循环引用问题，是JVM实际采用的算法\"]},\"763\":{\"h\":\"1.3 垃圾回收算法\"},\"764\":{\"h\":\"1.3.1 标记-清除算法（Mark-Sweep）\",\"t\":[\"过程：标记所有需要回收的对象，然后统一回收被标记的对象\",\"优点：实现简单\",\"缺点：产生内存碎片，导致大对象无法分配内存\"]},\"765\":{\"h\":\"1.3.2 标记-复制算法（Mark-Copy）\",\"t\":[\"过程：将内存分为大小相等的两块，每次只使用一块，回收时将存活对象复制到另一块，然后清除使用过的内存块\",\"优点：无内存碎片，实现简单\",\"缺点：内存利用率低（仅50%），复制成本高\",\"应用：新生代垃圾回收（如Serial、ParNew收集器）\"]},\"766\":{\"h\":\"1.3.3 标记-整理算法（Mark-Compact）\",\"t\":[\"过程：标记存活对象，然后将存活对象向一端移动，最后清除边界以外的内存\",\"优点：无内存碎片，内存利用率高\",\"缺点：整理过程成本高\",\"应用：老年代垃圾回收（如Serial Old、Parallel Old收集器）\"]},\"767\":{\"h\":\"1.3.4 分代收集算法\",\"t\":[\"原理：根据对象存活周期将内存划分为不同区域（新生代、老年代、永久代/元空间），对不同区域采用不同回收算法\",\"新生代：对象存活时间短，采用标记-复制算法\",\"老年代：对象存活时间长，采用标记-清除或标记-整理算法\",\"优点：结合了不同算法的优势，提高回收效率\"]},\"768\":{\"h\":\"1.4 垃圾收集器\",\"t\":[\"JVM提供了多种垃圾收集器，各有特点：\"]},\"769\":{\"h\":\"1.4.1 新生代收集器\",\"t\":[\"Serial收集器：单线程收集，简单高效，适用于Client模式\",\"ParNew收集器：Serial的多线程版本，可与CMS配合使用\",\"Parallel Scavenge收集器：关注吞吐量（运行用户代码时间/(运行用户代码时间+垃圾收集时间)），支持自适应调节策略\"]},\"770\":{\"h\":\"1.4.2 老年代收集器\",\"t\":[\"Serial Old收集器：Serial的老年代版本，单线程标记-整理算法\",\"Parallel Old收集器：Parallel Scavenge的老年代版本，多线程标记-整理算法\",\"CMS（Concurrent Mark Sweep）收集器：以获取最短回收停顿时间为目标，基于标记-清除算法，并发收集、低停顿\",\"G1（Garbage-First）收集器：面向服务端应用，兼顾吞吐量和延迟，基于Region的分代式垃圾收集器\"]},\"771\":{\"h\":\"代码实践\"},\"772\":{\"h\":\"2.1 查看JVM默认垃圾收集器\",\"t\":[\"public class GCCollectorInfo { public static void main(String[] args) { // 获取新生代垃圾收集器 String youngCollector = System.getProperty(\\\"sun.java.command\\\"); System.out.println(\\\"JVM参数: \\\" + youngCollector); // 获取新生代垃圾收集器 String youngGC = System.getProperty(\\\"sun年轻代收集器\\\"); // 获取老年代垃圾收集器 String oldGC = System.getProperty(\\\"sun老年代收集器\\\"); System.out.println(\\\"新生代收集器: \\\" + youngGC); System.out.println(\\\"老年代收集器: \\\" + oldGC); } }\"]},\"773\":{\"h\":\"2.2 手动触发垃圾回收（不推荐在生产环境使用）\",\"t\":[\"public class GCTriggerDemo { public static void main(String[] args) { for (int i = 0; i < 10; i++) { Object obj = new Object(); System.out.println(\\\"创建对象: \\\" + obj); // 手动触发垃圾回收（仅为演示，生产环境不推荐） System.gc(); } } }\"]},\"774\":{\"h\":\"2.3 分析GC日志\",\"t\":[\"添加JVM参数打印GC日志：\",\"-XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xloggc:gc.log\",\"GC日志示例分析：\",\"2023-10-01T12:00:00.123+0800: [GC (Allocation Failure) [PSYoungGen: 524288K->65536K(786432K)] 524288K->131072K(2097152K), 0.0123450 secs] [Times: user=0.02 sys=0.01, real=0.01 secs]\",\"PSYoungGen：使用Parallel Scavenge收集器\",\"524288K->65536K(786432K)：新生代GC前使用容量->GC后使用容量(新生代总容量)\",\"524288K->131072K(2097152K)：整个堆GC前使用容量->GC后使用容量(堆总容量)\",\"0.0123450 secs：GC耗时\"]},\"775\":{\"h\":\"设计思想\"},\"776\":{\"h\":\"3.1 分代回收的设计理念\",\"t\":[\"分代回收基于对象存活周期的经验法则：\",\"大部分对象存活时间短（朝生夕死）\",\"存活下来的对象更可能长时间存活\",\"基于这一法则，将内存划分为新生代和老年代，对不同代采用不同回收策略，提高回收效率。新生代区域小、回收频繁，采用高效的标记-复制算法；老年代区域大、回收频率低，采用标记-清除或标记-整理算法。\"]},\"777\":{\"h\":\"3.2 CMS收集器的并发设计\",\"t\":[\"CMS收集器以低延迟为目标，采用并发设计：\",\"初始标记：暂停所有用户线程，标记GC Roots直接关联的对象（速度快）\",\"并发标记：恢复用户线程，同时标记所有可达对象（耗时，但并发执行）\",\"重新标记：暂停所有用户线程，修正并发标记期间因用户线程操作导致标记变动的对象（比初始标记稍长，但比并发标记短）\",\"并发清除：恢复用户线程，同时清除标记的垃圾对象（耗时，但并发执行）\",\"通过减少暂停时间，CMS适合对响应时间要求高的应用。\"]},\"778\":{\"h\":\"3.3 G1收集器的Region化内存布局\",\"t\":[\"G1收集器将堆内存划分为多个大小相等的独立Region，每个Region可以根据需要扮演新生代的Eden区、Survivor区或老年代空间。这种设计允许G1跟踪各个Region的垃圾堆积价值，优先回收价值最高的Region（Garbage-First），从而在有限时间内获得最高的回收效率。\"]},\"779\":{\"h\":\"避坑指南\"},\"780\":{\"h\":\"4.1 不要过度依赖System.gc()\",\"t\":[\"System.gc()只是建议JVM进行垃圾回收，JVM可以忽略该请求\",\"频繁调用会影响性能，增加GC overhead\",\"生产环境应禁用显式GC：-XX:+DisableExplicitGC\"]},\"781\":{\"h\":\"4.2 避免内存泄漏\",\"t\":[\"静态集合类泄漏：静态集合持有对象引用，导致对象无法回收\",\"public class StaticCollectionLeak { private static List<Object> list = new ArrayList<>(); public void add(Object obj) { list.add(obj); // obj永远不会被回收 } }\",\"监听器和回调泄漏：注册监听器但未注销\",\"资源未关闭泄漏：数据库连接、IO流等资源未关闭\"]},\"782\":{\"h\":\"4.3 合理设置堆内存大小\",\"t\":[\"堆内存过小：频繁GC，甚至OOM\",\"堆内存过大：单次GC时间过长，浪费系统资源\",\"建议：根据应用实际需求和服务器配置设置，新生代和老年代比例一般为1:2\"]},\"783\":{\"h\":\"4.4 CMS收集器的常见问题\",\"t\":[\"内存碎片：基于标记-清除算法，长期运行会产生内存碎片 解决：开启-XX:+UseCMSCompactAtFullCollection，在Full GC后进行内存整理\",\"Concurrent Mode Failure：并发清除阶段用户线程分配内存速度超过GC回收速度 解决：增大老年代空间，或使用G1收集器替代\"]},\"784\":{\"h\":\"深度思考题\",\"t\":[\"G1收集器与CMS收集器相比有哪些优势？适用于什么场景？\",\"什么是内存分配担保机制？它在垃圾回收中起到什么作用？\",\"如何排查和解决JVM内存泄漏问题？\",\"思考题回答：\",\"G1收集器的优势：\",\"基于Region的内存布局，可预测的停顿时间\",\"兼顾吞吐量和延迟\",\"不会产生大量内存碎片\",\"可动态调整新生代和老年代大小 适用场景：堆内存较大（一般大于4GB）、对停顿时间有要求的应用\",\"内存分配担保机制是指当新生代无法为新对象分配内存时，JVM会检查老年代最大可用连续空间是否大于新生代所有对象总大小。如果大于，则进行Minor GC；如果小于，则查看HandlePromotionFailure参数是否允许担保失败。如果允许，则尝试Minor GC；如果不允许，则进行Full GC。内存分配担保机制是为了减少Full GC的频率。\",\"排查和解决JVM内存泄漏问题的步骤：\",\"监控JVM内存使用情况，观察是否有内存持续增长\",\"发生OOM时，通过-XX:+HeapDumpOnOutOfMemoryError参数获取堆转储文件\",\"使用MAT、JProfiler等工具分析堆转储文件，找出泄漏对象\",\"分析泄漏对象的引用链，确定泄漏原因\",\"修改代码，解除不必要的对象引用\"]},\"785\":{\"h\":\"5.6 JVM参数总结\"},\"786\":{\"h\":\"核心理论\"},\"787\":{\"h\":\"1.1 JVM参数分类\",\"t\":[\"JVM参数根据稳定性和标准化程度分为三类：\"]},\"788\":{\"h\":\"1.1.1 标准参数（Standard Options）\",\"t\":[\"以-开头，所有JVM实现都必须支持\",\"保持向后兼容\",\"示例：-version、-help、-cp/-classpath\"]},\"789\":{\"h\":\"1.1.2 非标准参数（Non-Standard Options）\",\"t\":[\"以-X开头，特定JVM实现支持的扩展参数\",\"可能在不同版本间变化\",\"示例：-Xms、-Xmx、-Xmn、-Xss\"]},\"790\":{\"h\":\"1.1.3 高级参数（Advanced Options）\",\"t\":[\"以-XX:开头，用于高级调优和调试\",\"稳定性差，可能随时移除\",\"分为布尔型参数和键值对参数： \",\"布尔型：-XX:+<option>（启用）、-XX:-<option>（禁用）\",\"键值对：-XX:<option>=<value>\"]},\"791\":{\"h\":\"1.2 内存管理参数\"},\"792\":{\"h\":\"1.2.1 堆内存参数\",\"t\":[\"-Xms<size>：初始堆大小，默认物理内存的1/64\",\"-Xmx<size>：最大堆大小，默认物理内存的1/4\",\"-Xmn<size>：新生代大小（Eden + 2*Survivor）\",\"-XX:NewRatio=<n>：新生代与老年代比例（老年代/新生代 = n），默认2\",\"-XX:SurvivorRatio=<n>：Eden区与Survivor区比例（Eden/Survivor = n），默认8\",\"-XX:MetaspaceSize=<size>：元空间初始大小\",\"-XX:MaxMetaspaceSize=<size>：元空间最大大小（默认无限制）\"]},\"793\":{\"h\":\"1.2.2 非堆内存参数\",\"t\":[\"-XX:PermSize=<size>：永久代初始大小（JDK8及以上已移除，使用元空间）\",\"-XX:MaxPermSize=<size>：永久代最大大小（JDK8及以上已移除）\",\"-Xss<size>：每个线程的栈大小，默认1M\"]},\"794\":{\"h\":\"1.3 GC相关参数\"},\"795\":{\"h\":\"1.3.1 垃圾收集器选择\",\"t\":[\"-XX:+UseSerialGC：使用Serial + Serial Old收集器组合\",\"-XX:+UseParNewGC：使用ParNew + Serial Old收集器组合\",\"-XX:+UseConcMarkSweepGC：使用ParNew + CMS + Serial Old收集器组合\",\"-XX:+UseParallelGC：使用Parallel Scavenge + Parallel Old收集器组合\",\"-XX:+UseG1GC：使用G1收集器\"]},\"796\":{\"h\":\"1.3.2 GC日志参数\",\"t\":[\"-XX:+PrintGC：打印简单GC日志\",\"-XX:+PrintGCDetails：打印详细GC日志\",\"-XX:+PrintGCDateStamps：打印GC发生的时间戳\",\"-Xloggc:<file>：将GC日志输出到指定文件\",\"-XX:+HeapDumpOnOutOfMemoryError：OOM时生成堆转储文件\",\"-XX:HeapDumpPath=<path>：堆转储文件路径\"]},\"797\":{\"h\":\"1.3.3 GC调优参数\",\"t\":[\"-XX:MaxGCPauseMillis=<n>：G1收集器目标最大停顿时间\",\"-XX:GCTimeRatio=<n>：Parallel Scavenge收集器吞吐量目标（1/(1+n)）\",\"-XX:ParallelGCThreads=<n>：并行GC线程数\",\"-XX:ConcGCThreads=<n>：CMS或G1并发GC线程数\"]},\"798\":{\"h\":\"1.4 其他常用参数\",\"t\":[\"-XX:+DisableExplicitGC：禁用System.gc()\",\"-XX:+UseCompressedOops：启用压缩普通对象指针（32位指针表示64位地址）\",\"-XX:+PrintCommandLineFlags：打印JVM启动时的参数\",\"-D<name>=<value>：设置系统属性\"]},\"799\":{\"h\":\"代码实践\"},\"800\":{\"h\":\"2.1 查看JVM参数\"},\"801\":{\"h\":\"2.1.1 查看JVM默认参数\",\"t\":[\"java -XX:+PrintCommandLineFlags -version\"]},\"802\":{\"h\":\"2.1.2 查看进程JVM参数\",\"t\":[\"# 查找Java进程ID jps # 查看指定进程的JVM参数 jinfo <pid>\"]},\"803\":{\"h\":\"2.2 设置JVM参数示例\"},\"804\":{\"h\":\"2.2.1 基本堆内存配置\",\"t\":[\"java -Xms512m -Xmx1024m -jar app.jar\"]},\"805\":{\"h\":\"2.2.2 G1收集器配置\",\"t\":[\"java -Xms2g -Xmx2g -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:+PrintGCDetails -Xloggc:g1-gc.log -jar app.jar\"]},\"806\":{\"h\":\"2.2.3 生产环境常用配置\",\"t\":[\"java -server -Xms4g -Xmx4g -Xmn1g -XX:SurvivorRatio=8 -XX:+UseG1GC -XX:MaxGCPauseMillis=100 -XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xloggc:/var/log/app/gc.log -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/var/log/app/heapdump.hprof -jar app.jar\"]},\"807\":{\"h\":\"2.3 分析JVM参数配置\",\"t\":[\"使用jconsole或jvisualvm连接Java进程，查看内存配置是否符合预期：\",\"启动jvisualvm\",\"连接目标Java进程\",\"在\\\"监视\\\"标签页查看堆内存使用情况\",\"在\\\"JVM参数\\\"标签页查看当前JVM参数\"]},\"808\":{\"h\":\"设计思想\"},\"809\":{\"h\":\"3.1 参数设计的权衡原则\",\"t\":[\"JVM参数设计体现了多种权衡：\",\"内存与性能：更大的堆内存减少GC频率，但增加单次GC时间\",\"吞吐量与延迟：Parallel Scavenge关注吞吐量，CMS/G1关注延迟\",\"默认值与自定义：JVM提供合理默认值，同时允许根据应用特性自定义\",\"简单性与灵活性：标准参数简单易用，高级参数提供灵活调优\"]},\"810\":{\"h\":\"3.2 分代思想在参数中的体现\",\"t\":[\"内存分代思想在JVM参数中得到充分体现：\",\"NewRatio和SurvivorRatio参数控制新生代与老年代比例\",\"不同代有独立的GC参数和收集器选择\",\"新生代大小直接影响Minor GC频率和耗时\"]},\"811\":{\"h\":\"3.3 自适应调优理念\",\"t\":[\"Parallel Scavenge收集器引入自适应调优理念：\",\"通过-XX:+UseAdaptiveSizePolicy启用\",\"JVM根据当前系统运行情况自动调整新生代大小、Eden与Survivor比例等参数\",\"减少人工调优负担，适合对JVM调优不熟悉的场景\"]},\"812\":{\"h\":\"避坑指南\"},\"813\":{\"h\":\"4.1 堆内存设置不当\",\"t\":[\"内存过小：频繁GC，甚至OOM 解决：根据应用内存需求合理设置-Xms和-Xmx\",\"内存过大：单次GC时间过长，浪费系统资源 解决：堆内存一般不超过物理内存的70%，大内存建议使用G1收集器\",\"Xms与Xmx不一致：导致堆内存动态调整，影响性能 解决：生产环境建议将Xms和Xmx设置为相同值\"]},\"814\":{\"h\":\"4.2 元空间溢出\",\"t\":[\"原因：元空间大小未限制，类加载过多导致溢出\",\"解决：设置-XX:MaxMetaspaceSize限制元空间大小，排查类加载泄漏\"]},\"815\":{\"h\":\"4.3 过度调优\",\"t\":[\"问题：盲目调整大量参数，不仅无法提升性能，还可能引入新问题\",\"解决：遵循\\\"先监控，后调优\\\"原则，只调整有明确优化目标的参数\"]},\"816\":{\"h\":\"4.4 忽略GC日志\",\"t\":[\"问题：不开启GC日志，无法分析GC问题\",\"解决：生产环境务必开启GC日志记录，包括详细信息和时间戳\"]},\"817\":{\"h\":\"4.5 错误使用废弃参数\",\"t\":[\"问题：使用JDK版本中已废弃或移除的参数（如JDK8使用PermSize）\",\"解决：查阅对应JDK版本的官方文档，确认参数可用性\"]},\"818\":{\"h\":\"深度思考题\",\"t\":[\"为什么建议将-Xms和-Xmx设置为相同值？在什么情况下可能需要设置为不同值？\",\"如何根据应用特点选择合适的垃圾收集器？\",\"什么是JVM参数的\\\"黄金比例\\\"？如何确定适合特定应用的参数配置？\",\"思考题回答：\",\"将-Xms和-Xmx设置为相同值可以避免堆内存动态扩展，减少内存调整带来的性能开销。在以下情况可能需要设置为不同值：\",\"应用启动初期内存需求小，后期需求增长\",\"服务器内存资源紧张，需要多个应用共享内存\",\"开发测试环境，希望节省内存资源\",\"选择垃圾收集器应考虑：\",\"应用类型：桌面应用可容忍较长停顿，优先选择Serial收集器；服务器应用关注吞吐量或延迟\",\"堆内存大小：大堆内存（>4GB）优先选择G1\",\"延迟要求：对响应时间敏感的应用选择CMS或G1\",\"吞吐量要求：批处理应用选择Parallel Scavenge\",\"JDK版本：JDK9及以上G1为默认收集器，JDK17引入ZGC/Shenandoah等低延迟收集器\",\"JVM参数的\\\"黄金比例\\\"是指根据应用特性找到的最优参数组合，没有统一标准。确定方法：\",\"基准测试：建立性能基准，测量不同参数组合的性能指标\",\"监控分析：收集生产环境GC日志、内存使用情况\",\"逐步调整：一次只调整一个参数，观察影响\",\"关注瓶颈：优先解决明显的性能瓶颈（如频繁Full GC）\",\"考虑硬件：根据CPU核心数、内存大小调整并行线程数等参数\"]},\"819\":{\"h\":\"5.6 JVM性能监控\"},\"820\":{\"h\":\"核心理论\"},\"821\":{\"h\":\"1.1 JVM参数分类\",\"t\":[\"JVM参数根据稳定性和标准化程度分为三类：\"]},\"822\":{\"h\":\"1.1.1 标准参数（Standard Options）\",\"t\":[\"以-开头，所有JVM实现都必须支持\",\"保持向后兼容\",\"示例：-version、-help、-cp/-classpath\"]},\"823\":{\"h\":\"1.1.2 非标准参数（Non-Standard Options）\",\"t\":[\"以-X开头，特定JVM实现支持的扩展参数\",\"可能在不同版本间变化\",\"示例：-Xms、-Xmx、-Xmn、-Xss\"]},\"824\":{\"h\":\"1.1.3 高级参数（Advanced Options）\",\"t\":[\"以-XX:开头，用于高级调优和调试\",\"稳定性差，可能随时移除\",\"分为布尔型参数和键值对参数： \",\"布尔型：-XX:+<option>（启用）、-XX:-<option>（禁用）\",\"键值对：-XX:<option>=<value>\"]},\"825\":{\"h\":\"1.2 内存管理参数\"},\"826\":{\"h\":\"1.2.1 堆内存参数\",\"t\":[\"-Xms<size>：初始堆大小，默认物理内存的1/64\",\"-Xmx<size>：最大堆大小，默认物理内存的1/4\",\"-Xmn<size>：新生代大小（Eden + 2*Survivor）\",\"-XX:NewRatio=<n>：新生代与老年代比例（老年代/新生代 = n），默认2\",\"-XX:SurvivorRatio=<n>：Eden区与Survivor区比例（Eden/Survivor = n），默认8\",\"-XX:MetaspaceSize=<size>：元空间初始大小\",\"-XX:MaxMetaspaceSize=<size>：元空间最大大小（默认无限制）\"]},\"827\":{\"h\":\"1.2.2 非堆内存参数\",\"t\":[\"-XX:PermSize=<size>：永久代初始大小（JDK8及以上已移除，使用元空间）\",\"-XX:MaxPermSize=<size>：永久代最大大小（JDK8及以上已移除）\",\"-Xss<size>：每个线程的栈大小，默认1M\"]},\"828\":{\"h\":\"1.3 GC相关参数\"},\"829\":{\"h\":\"1.3.1 垃圾收集器选择\",\"t\":[\"-XX:+UseSerialGC：使用Serial + Serial Old收集器组合\",\"-XX:+UseParNewGC：使用ParNew + Serial Old收集器组合\",\"-XX:+UseConcMarkSweepGC：使用ParNew + CMS + Serial Old收集器组合\",\"-XX:+UseParallelGC：使用Parallel Scavenge + Parallel Old收集器组合\",\"-XX:+UseG1GC：使用G1收集器\"]},\"830\":{\"h\":\"1.3.2 GC日志参数\",\"t\":[\"-XX:+PrintGC：打印简单GC日志\",\"-XX:+PrintGCDetails：打印详细GC日志\",\"-XX:+PrintGCDateStamps：打印GC发生的时间戳\",\"-Xloggc:<file>：将GC日志输出到指定文件\",\"-XX:+HeapDumpOnOutOfMemoryError：OOM时生成堆转储文件\",\"-XX:HeapDumpPath=<path>：堆转储文件路径\"]},\"831\":{\"h\":\"1.3.3 GC调优参数\",\"t\":[\"-XX:MaxGCPauseMillis=<n>：G1收集器目标最大停顿时间\",\"-XX:GCTimeRatio=<n>：Parallel Scavenge收集器吞吐量目标（1/(1+n)）\",\"-XX:ParallelGCThreads=<n>：并行GC线程数\",\"-XX:ConcGCThreads=<n>：CMS或G1并发GC线程数\"]},\"832\":{\"h\":\"1.4 其他常用参数\",\"t\":[\"-XX:+DisableExplicitGC：禁用System.gc()\",\"-XX:+UseCompressedOops：启用压缩普通对象指针（32位指针表示64位地址）\",\"-XX:+PrintCommandLineFlags：打印JVM启动时的参数\",\"-D<name>=<value>：设置系统属性\"]},\"833\":{\"h\":\"代码实践\"},\"834\":{\"h\":\"2.1 查看JVM参数\"},\"835\":{\"h\":\"2.1.1 查看JVM默认参数\",\"t\":[\"java -XX:+PrintCommandLineFlags -version\"]},\"836\":{\"h\":\"2.1.2 查看进程JVM参数\",\"t\":[\"# 查找Java进程ID jps # 查看指定进程的JVM参数 jinfo <pid>\"]},\"837\":{\"h\":\"2.2 设置JVM参数示例\"},\"838\":{\"h\":\"2.2.1 基本堆内存配置\",\"t\":[\"java -Xms512m -Xmx1024m -jar app.jar\"]},\"839\":{\"h\":\"2.2.2 G1收集器配置\",\"t\":[\"java -Xms2g -Xmx2g -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:+PrintGCDetails -Xloggc:g1-gc.log -jar app.jar\"]},\"840\":{\"h\":\"2.2.3 生产环境常用配置\",\"t\":[\"java -server -Xms4g -Xmx4g -Xmn1g -XX:SurvivorRatio=8 -XX:+UseG1GC -XX:MaxGCPauseMillis=100 -XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xloggc:/var/log/app/gc.log -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/var/log/app/heapdump.hprof -jar app.jar\"]},\"841\":{\"h\":\"2.3 分析JVM参数配置\",\"t\":[\"使用jconsole或jvisualvm连接Java进程，查看内存配置是否符合预期：\",\"启动jvisualvm\",\"连接目标Java进程\",\"在\\\"监视\\\"标签页查看堆内存使用情况\",\"在\\\"JVM参数\\\"标签页查看当前JVM参数\"]},\"842\":{\"h\":\"设计思想\"},\"843\":{\"h\":\"3.1 参数设计的权衡原则\",\"t\":[\"JVM参数设计体现了多种权衡：\",\"内存与性能：更大的堆内存减少GC频率，但增加单次GC时间\",\"吞吐量与延迟：Parallel Scavenge关注吞吐量，CMS/G1关注延迟\",\"默认值与自定义：JVM提供合理默认值，同时允许根据应用特性自定义\",\"简单性与灵活性：标准参数简单易用，高级参数提供灵活调优\"]},\"844\":{\"h\":\"3.2 分代思想在参数中的体现\",\"t\":[\"内存分代思想在JVM参数中得到充分体现：\",\"NewRatio和SurvivorRatio参数控制新生代与老年代比例\",\"不同代有独立的GC参数和收集器选择\",\"新生代大小直接影响Minor GC频率和耗时\"]},\"845\":{\"h\":\"3.3 自适应调优理念\",\"t\":[\"Parallel Scavenge收集器引入自适应调优理念：\",\"通过-XX:+UseAdaptiveSizePolicy启用\",\"JVM根据当前系统运行情况自动调整新生代大小、Eden与Survivor比例等参数\",\"减少人工调优负担，适合对JVM调优不熟悉的场景\"]},\"846\":{\"h\":\"避坑指南\"},\"847\":{\"h\":\"4.1 堆内存设置不当\",\"t\":[\"内存过小：频繁GC，甚至OOM 解决：根据应用内存需求合理设置-Xms和-Xmx\",\"内存过大：单次GC时间过长，浪费系统资源 解决：堆内存一般不超过物理内存的70%，大内存建议使用G1收集器\",\"Xms与Xmx不一致：导致堆内存动态调整，影响性能 解决：生产环境建议将Xms和Xmx设置为相同值\"]},\"848\":{\"h\":\"4.2 元空间溢出\",\"t\":[\"原因：元空间大小未限制，类加载过多导致溢出\",\"解决：设置-XX:MaxMetaspaceSize限制元空间大小，排查类加载泄漏\"]},\"849\":{\"h\":\"4.3 过度调优\",\"t\":[\"问题：盲目调整大量参数，不仅无法提升性能，还可能引入新问题\",\"解决：遵循\\\"先监控，后调优\\\"原则，只调整有明确优化目标的参数\"]},\"850\":{\"h\":\"4.4 忽略GC日志\",\"t\":[\"问题：不开启GC日志，无法分析GC问题\",\"解决：生产环境务必开启GC日志记录，包括详细信息和时间戳\"]},\"851\":{\"h\":\"4.5 错误使用废弃参数\",\"t\":[\"问题：使用JDK版本中已废弃或移除的参数（如JDK8使用PermSize）\",\"解决：查阅对应JDK版本的官方文档，确认参数可用性\"]},\"852\":{\"h\":\"深度思考题\",\"t\":[\"为什么建议将-Xms和-Xmx设置为相同值？在什么情况下可能需要设置为不同值？\",\"如何根据应用特点选择合适的垃圾收集器？\",\"什么是JVM参数的\\\"黄金比例\\\"？如何确定适合特定应用的参数配置？\",\"思考题回答：\",\"将-Xms和-Xmx设置为相同值可以避免堆内存动态扩展，减少内存调整带来的性能开销。在以下情况可能需要设置为不同值：\",\"应用启动初期内存需求小，后期需求增长\",\"服务器内存资源紧张，需要多个应用共享内存\",\"开发测试环境，希望节省内存资源\",\"选择垃圾收集器应考虑：\",\"应用类型：桌面应用可容忍较长停顿，优先选择Serial收集器；服务器应用关注吞吐量或延迟\",\"堆内存大小：大堆内存（>4GB）优先选择G1\",\"延迟要求：对响应时间敏感的应用选择CMS或G1\",\"吞吐量要求：批处理应用选择Parallel Scavenge\",\"JDK版本：JDK9及以上G1为默认收集器，JDK17引入ZGC/Shenandoah等低延迟收集器\",\"JVM参数的\\\"黄金比例\\\"是指根据应用特性找到的最优参数组合，没有统一标准。确定方法：\",\"基准测试：建立性能基准，测量不同参数组合的性能指标\",\"监控分析：收集生产环境GC日志、内存使用情况\",\"逐步调整：一次只调整一个参数，观察影响\",\"关注瓶颈：优先解决明显的性能瓶颈（如频繁Full GC）\",\"考虑硬件：根据CPU核心数、内存大小调整并行线程数等参数\"]},\"853\":{\"h\":\"5.6 JVM故障排错\"},\"854\":{\"h\":\"核心理论\"},\"855\":{\"h\":\"1.1 JVM参数分类\",\"t\":[\"JVM参数根据稳定性和标准化程度分为三类：\"]},\"856\":{\"h\":\"1.1.1 标准参数（Standard Options）\",\"t\":[\"以-开头，所有JVM实现都必须支持\",\"保持向后兼容\",\"示例：-version、-help、-cp/-classpath\"]},\"857\":{\"h\":\"1.1.2 非标准参数（Non-Standard Options）\",\"t\":[\"以-X开头，特定JVM实现支持的扩展参数\",\"可能在不同版本间变化\",\"示例：-Xms、-Xmx、-Xmn、-Xss\"]},\"858\":{\"h\":\"1.1.3 高级参数（Advanced Options）\",\"t\":[\"以-XX:开头，用于高级调优和调试\",\"稳定性差，可能随时移除\",\"分为布尔型参数和键值对参数： \",\"布尔型：-XX:+<option>（启用）、-XX:-<option>（禁用）\",\"键值对：-XX:<option>=<value>\"]},\"859\":{\"h\":\"1.2 内存管理参数\"},\"860\":{\"h\":\"1.2.1 堆内存参数\",\"t\":[\"-Xms<size>：初始堆大小，默认物理内存的1/64\",\"-Xmx<size>：最大堆大小，默认物理内存的1/4\",\"-Xmn<size>：新生代大小（Eden + 2*Survivor）\",\"-XX:NewRatio=<n>：新生代与老年代比例（老年代/新生代 = n），默认2\",\"-XX:SurvivorRatio=<n>：Eden区与Survivor区比例（Eden/Survivor = n），默认8\",\"-XX:MetaspaceSize=<size>：元空间初始大小\",\"-XX:MaxMetaspaceSize=<size>：元空间最大大小（默认无限制）\"]},\"861\":{\"h\":\"1.2.2 非堆内存参数\",\"t\":[\"-XX:PermSize=<size>：永久代初始大小（JDK8及以上已移除，使用元空间）\",\"-XX:MaxPermSize=<size>：永久代最大大小（JDK8及以上已移除）\",\"-Xss<size>：每个线程的栈大小，默认1M\"]},\"862\":{\"h\":\"1.3 GC相关参数\"},\"863\":{\"h\":\"1.3.1 垃圾收集器选择\",\"t\":[\"-XX:+UseSerialGC：使用Serial + Serial Old收集器组合\",\"-XX:+UseParNewGC：使用ParNew + Serial Old收集器组合\",\"-XX:+UseConcMarkSweepGC：使用ParNew + CMS + Serial Old收集器组合\",\"-XX:+UseParallelGC：使用Parallel Scavenge + Parallel Old收集器组合\",\"-XX:+UseG1GC：使用G1收集器\"]},\"864\":{\"h\":\"1.3.2 GC日志参数\",\"t\":[\"-XX:+PrintGC：打印简单GC日志\",\"-XX:+PrintGCDetails：打印详细GC日志\",\"-XX:+PrintGCDateStamps：打印GC发生的时间戳\",\"-Xloggc:<file>：将GC日志输出到指定文件\",\"-XX:+HeapDumpOnOutOfMemoryError：OOM时生成堆转储文件\",\"-XX:HeapDumpPath=<path>：堆转储文件路径\"]},\"865\":{\"h\":\"1.3.3 GC调优参数\",\"t\":[\"-XX:MaxGCPauseMillis=<n>：G1收集器目标最大停顿时间\",\"-XX:GCTimeRatio=<n>：Parallel Scavenge收集器吞吐量目标（1/(1+n)）\",\"-XX:ParallelGCThreads=<n>：并行GC线程数\",\"-XX:ConcGCThreads=<n>：CMS或G1并发GC线程数\"]},\"866\":{\"h\":\"1.4 其他常用参数\",\"t\":[\"-XX:+DisableExplicitGC：禁用System.gc()\",\"-XX:+UseCompressedOops：启用压缩普通对象指针（32位指针表示64位地址）\",\"-XX:+PrintCommandLineFlags：打印JVM启动时的参数\",\"-D<name>=<value>：设置系统属性\"]},\"867\":{\"h\":\"代码实践\"},\"868\":{\"h\":\"2.1 查看JVM参数\"},\"869\":{\"h\":\"2.1.1 查看JVM默认参数\",\"t\":[\"java -XX:+PrintCommandLineFlags -version\"]},\"870\":{\"h\":\"2.1.2 查看进程JVM参数\",\"t\":[\"# 查找Java进程ID jps # 查看指定进程的JVM参数 jinfo <pid>\"]},\"871\":{\"h\":\"2.2 设置JVM参数示例\"},\"872\":{\"h\":\"2.2.1 基本堆内存配置\",\"t\":[\"java -Xms512m -Xmx1024m -jar app.jar\"]},\"873\":{\"h\":\"2.2.2 G1收集器配置\",\"t\":[\"java -Xms2g -Xmx2g -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:+PrintGCDetails -Xloggc:g1-gc.log -jar app.jar\"]},\"874\":{\"h\":\"2.2.3 生产环境常用配置\",\"t\":[\"java -server -Xms4g -Xmx4g -Xmn1g -XX:SurvivorRatio=8 -XX:+UseG1GC -XX:MaxGCPauseMillis=100 -XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xloggc:/var/log/app/gc.log -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/var/log/app/heapdump.hprof -jar app.jar\"]},\"875\":{\"h\":\"2.3 分析JVM参数配置\",\"t\":[\"使用jconsole或jvisualvm连接Java进程，查看内存配置是否符合预期：\",\"启动jvisualvm\",\"连接目标Java进程\",\"在\\\"监视\\\"标签页查看堆内存使用情况\",\"在\\\"JVM参数\\\"标签页查看当前JVM参数\"]},\"876\":{\"h\":\"设计思想\"},\"877\":{\"h\":\"3.1 参数设计的权衡原则\",\"t\":[\"JVM参数设计体现了多种权衡：\",\"内存与性能：更大的堆内存减少GC频率，但增加单次GC时间\",\"吞吐量与延迟：Parallel Scavenge关注吞吐量，CMS/G1关注延迟\",\"默认值与自定义：JVM提供合理默认值，同时允许根据应用特性自定义\",\"简单性与灵活性：标准参数简单易用，高级参数提供灵活调优\"]},\"878\":{\"h\":\"3.2 分代思想在参数中的体现\",\"t\":[\"内存分代思想在JVM参数中得到充分体现：\",\"NewRatio和SurvivorRatio参数控制新生代与老年代比例\",\"不同代有独立的GC参数和收集器选择\",\"新生代大小直接影响Minor GC频率和耗时\"]},\"879\":{\"h\":\"3.3 自适应调优理念\",\"t\":[\"Parallel Scavenge收集器引入自适应调优理念：\",\"通过-XX:+UseAdaptiveSizePolicy启用\",\"JVM根据当前系统运行情况自动调整新生代大小、Eden与Survivor比例等参数\",\"减少人工调优负担，适合对JVM调优不熟悉的场景\"]},\"880\":{\"h\":\"避坑指南\"},\"881\":{\"h\":\"4.1 堆内存设置不当\",\"t\":[\"内存过小：频繁GC，甚至OOM 解决：根据应用内存需求合理设置-Xms和-Xmx\",\"内存过大：单次GC时间过长，浪费系统资源 解决：堆内存一般不超过物理内存的70%，大内存建议使用G1收集器\",\"Xms与Xmx不一致：导致堆内存动态调整，影响性能 解决：生产环境建议将Xms和Xmx设置为相同值\"]},\"882\":{\"h\":\"4.2 元空间溢出\",\"t\":[\"原因：元空间大小未限制，类加载过多导致溢出\",\"解决：设置-XX:MaxMetaspaceSize限制元空间大小，排查类加载泄漏\"]},\"883\":{\"h\":\"4.3 过度调优\",\"t\":[\"问题：盲目调整大量参数，不仅无法提升性能，还可能引入新问题\",\"解决：遵循\\\"先监控，后调优\\\"原则，只调整有明确优化目标的参数\"]},\"884\":{\"h\":\"4.4 忽略GC日志\",\"t\":[\"问题：不开启GC日志，无法分析GC问题\",\"解决：生产环境务必开启GC日志记录，包括详细信息和时间戳\"]},\"885\":{\"h\":\"4.5 错误使用废弃参数\",\"t\":[\"问题：使用JDK版本中已废弃或移除的参数（如JDK8使用PermSize）\",\"解决：查阅对应JDK版本的官方文档，确认参数可用性\"]},\"886\":{\"h\":\"深度思考题\",\"t\":[\"为什么建议将-Xms和-Xmx设置为相同值？在什么情况下可能需要设置为不同值？\",\"如何根据应用特点选择合适的垃圾收集器？\",\"什么是JVM参数的\\\"黄金比例\\\"？如何确定适合特定应用的参数配置？\",\"思考题回答：\",\"将-Xms和-Xmx设置为相同值可以避免堆内存动态扩展，减少内存调整带来的性能开销。在以下情况可能需要设置为不同值：\",\"应用启动初期内存需求小，后期需求增长\",\"服务器内存资源紧张，需要多个应用共享内存\",\"开发测试环境，希望节省内存资源\",\"选择垃圾收集器应考虑：\",\"应用类型：桌面应用可容忍较长停顿，优先选择Serial收集器；服务器应用关注吞吐量或延迟\",\"堆内存大小：大堆内存（>4GB）优先选择G1\",\"延迟要求：对响应时间敏感的应用选择CMS或G1\",\"吞吐量要求：批处理应用选择Parallel Scavenge\",\"JDK版本：JDK9及以上G1为默认收集器，JDK17引入ZGC/Shenandoah等低延迟收集器\",\"JVM参数的\\\"黄金比例\\\"是指根据应用特性找到的最优参数组合，没有统一标准。确定方法：\",\"基准测试：建立性能基准，测量不同参数组合的性能指标\",\"监控分析：收集生产环境GC日志、内存使用情况\",\"逐步调整：一次只调整一个参数，观察影响\",\"关注瓶颈：优先解决明显的性能瓶颈（如频繁Full GC）\",\"考虑硬件：根据CPU核心数、内存大小调整并行线程数等参数\"]},\"887\":{\"h\":\"5.6 JVM调优\"},\"888\":{\"h\":\"核心理论\"},\"889\":{\"h\":\"1.1 JVM参数分类\",\"t\":[\"JVM参数根据稳定性和标准化程度分为三类：\"]},\"890\":{\"h\":\"1.1.1 标准参数（Standard Options）\",\"t\":[\"以-开头，所有JVM实现都必须支持\",\"保持向后兼容\",\"示例：-version、-help、-cp/-classpath\"]},\"891\":{\"h\":\"1.1.2 非标准参数（Non-Standard Options）\",\"t\":[\"以-X开头，特定JVM实现支持的扩展参数\",\"可能在不同版本间变化\",\"示例：-Xms、-Xmx、-Xmn、-Xss\"]},\"892\":{\"h\":\"1.1.3 高级参数（Advanced Options）\",\"t\":[\"以-XX:开头，用于高级调优和调试\",\"稳定性差，可能随时移除\",\"分为布尔型参数和键值对参数： \",\"布尔型：-XX:+<option>（启用）、-XX:-<option>（禁用）\",\"键值对：-XX:<option>=<value>\"]},\"893\":{\"h\":\"1.2 内存管理参数\"},\"894\":{\"h\":\"1.2.1 堆内存参数\",\"t\":[\"-Xms<size>：初始堆大小，默认物理内存的1/64\",\"-Xmx<size>：最大堆大小，默认物理内存的1/4\",\"-Xmn<size>：新生代大小（Eden + 2*Survivor）\",\"-XX:NewRatio=<n>：新生代与老年代比例（老年代/新生代 = n），默认2\",\"-XX:SurvivorRatio=<n>：Eden区与Survivor区比例（Eden/Survivor = n），默认8\",\"-XX:MetaspaceSize=<size>：元空间初始大小\",\"-XX:MaxMetaspaceSize=<size>：元空间最大大小（默认无限制）\"]},\"895\":{\"h\":\"1.2.2 非堆内存参数\",\"t\":[\"-XX:PermSize=<size>：永久代初始大小（JDK8及以上已移除，使用元空间）\",\"-XX:MaxPermSize=<size>：永久代最大大小（JDK8及以上已移除）\",\"-Xss<size>：每个线程的栈大小，默认1M\"]},\"896\":{\"h\":\"1.3 GC相关参数\"},\"897\":{\"h\":\"1.3.1 垃圾收集器选择\",\"t\":[\"-XX:+UseSerialGC：使用Serial + Serial Old收集器组合\",\"-XX:+UseParNewGC：使用ParNew + Serial Old收集器组合\",\"-XX:+UseConcMarkSweepGC：使用ParNew + CMS + Serial Old收集器组合\",\"-XX:+UseParallelGC：使用Parallel Scavenge + Parallel Old收集器组合\",\"-XX:+UseG1GC：使用G1收集器\"]},\"898\":{\"h\":\"1.3.2 GC日志参数\",\"t\":[\"-XX:+PrintGC：打印简单GC日志\",\"-XX:+PrintGCDetails：打印详细GC日志\",\"-XX:+PrintGCDateStamps：打印GC发生的时间戳\",\"-Xloggc:<file>：将GC日志输出到指定文件\",\"-XX:+HeapDumpOnOutOfMemoryError：OOM时生成堆转储文件\",\"-XX:HeapDumpPath=<path>：堆转储文件路径\"]},\"899\":{\"h\":\"1.3.3 GC调优参数\",\"t\":[\"-XX:MaxGCPauseMillis=<n>：G1收集器目标最大停顿时间\",\"-XX:GCTimeRatio=<n>：Parallel Scavenge收集器吞吐量目标（1/(1+n)）\",\"-XX:ParallelGCThreads=<n>：并行GC线程数\",\"-XX:ConcGCThreads=<n>：CMS或G1并发GC线程数\"]},\"900\":{\"h\":\"1.4 其他常用参数\",\"t\":[\"-XX:+DisableExplicitGC：禁用System.gc()\",\"-XX:+UseCompressedOops：启用压缩普通对象指针（32位指针表示64位地址）\",\"-XX:+PrintCommandLineFlags：打印JVM启动时的参数\",\"-D<name>=<value>：设置系统属性\"]},\"901\":{\"h\":\"代码实践\"},\"902\":{\"h\":\"2.1 查看JVM参数\"},\"903\":{\"h\":\"2.1.1 查看JVM默认参数\",\"t\":[\"java -XX:+PrintCommandLineFlags -version\"]},\"904\":{\"h\":\"2.1.2 查看进程JVM参数\",\"t\":[\"# 查找Java进程ID jps # 查看指定进程的JVM参数 jinfo <pid>\"]},\"905\":{\"h\":\"2.2 设置JVM参数示例\"},\"906\":{\"h\":\"2.2.1 基本堆内存配置\",\"t\":[\"java -Xms512m -Xmx1024m -jar app.jar\"]},\"907\":{\"h\":\"2.2.2 G1收集器配置\",\"t\":[\"java -Xms2g -Xmx2g -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:+PrintGCDetails -Xloggc:g1-gc.log -jar app.jar\"]},\"908\":{\"h\":\"2.2.3 生产环境常用配置\",\"t\":[\"java -server -Xms4g -Xmx4g -Xmn1g -XX:SurvivorRatio=8 -XX:+UseG1GC -XX:MaxGCPauseMillis=100 -XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xloggc:/var/log/app/gc.log -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/var/log/app/heapdump.hprof -jar app.jar\"]},\"909\":{\"h\":\"2.3 分析JVM参数配置\",\"t\":[\"使用jconsole或jvisualvm连接Java进程，查看内存配置是否符合预期：\",\"启动jvisualvm\",\"连接目标Java进程\",\"在\\\"监视\\\"标签页查看堆内存使用情况\",\"在\\\"JVM参数\\\"标签页查看当前JVM参数\"]},\"910\":{\"h\":\"设计思想\"},\"911\":{\"h\":\"3.1 参数设计的权衡原则\",\"t\":[\"JVM参数设计体现了多种权衡：\",\"内存与性能：更大的堆内存减少GC频率，但增加单次GC时间\",\"吞吐量与延迟：Parallel Scavenge关注吞吐量，CMS/G1关注延迟\",\"默认值与自定义：JVM提供合理默认值，同时允许根据应用特性自定义\",\"简单性与灵活性：标准参数简单易用，高级参数提供灵活调优\"]},\"912\":{\"h\":\"3.2 分代思想在参数中的体现\",\"t\":[\"内存分代思想在JVM参数中得到充分体现：\",\"NewRatio和SurvivorRatio参数控制新生代与老年代比例\",\"不同代有独立的GC参数和收集器选择\",\"新生代大小直接影响Minor GC频率和耗时\"]},\"913\":{\"h\":\"3.3 自适应调优理念\",\"t\":[\"Parallel Scavenge收集器引入自适应调优理念：\",\"通过-XX:+UseAdaptiveSizePolicy启用\",\"JVM根据当前系统运行情况自动调整新生代大小、Eden与Survivor比例等参数\",\"减少人工调优负担，适合对JVM调优不熟悉的场景\"]},\"914\":{\"h\":\"避坑指南\"},\"915\":{\"h\":\"4.1 堆内存设置不当\",\"t\":[\"内存过小：频繁GC，甚至OOM 解决：根据应用内存需求合理设置-Xms和-Xmx\",\"内存过大：单次GC时间过长，浪费系统资源 解决：堆内存一般不超过物理内存的70%，大内存建议使用G1收集器\",\"Xms与Xmx不一致：导致堆内存动态调整，影响性能 解决：生产环境建议将Xms和Xmx设置为相同值\"]},\"916\":{\"h\":\"4.2 元空间溢出\",\"t\":[\"原因：元空间大小未限制，类加载过多导致溢出\",\"解决：设置-XX:MaxMetaspaceSize限制元空间大小，排查类加载泄漏\"]},\"917\":{\"h\":\"4.3 过度调优\",\"t\":[\"问题：盲目调整大量参数，不仅无法提升性能，还可能引入新问题\",\"解决：遵循\\\"先监控，后调优\\\"原则，只调整有明确优化目标的参数\"]},\"918\":{\"h\":\"4.4 忽略GC日志\",\"t\":[\"问题：不开启GC日志，无法分析GC问题\",\"解决：生产环境务必开启GC日志记录，包括详细信息和时间戳\"]},\"919\":{\"h\":\"4.5 错误使用废弃参数\",\"t\":[\"问题：使用JDK版本中已废弃或移除的参数（如JDK8使用PermSize）\",\"解决：查阅对应JDK版本的官方文档，确认参数可用性\"]},\"920\":{\"h\":\"深度思考题\",\"t\":[\"为什么建议将-Xms和-Xmx设置为相同值？在什么情况下可能需要设置为不同值？\",\"如何根据应用特点选择合适的垃圾收集器？\",\"什么是JVM参数的\\\"黄金比例\\\"？如何确定适合特定应用的参数配置？\",\"思考题回答：\",\"将-Xms和-Xmx设置为相同值可以避免堆内存动态扩展，减少内存调整带来的性能开销。在以下情况可能需要设置为不同值：\",\"应用启动初期内存需求小，后期需求增长\",\"服务器内存资源紧张，需要多个应用共享内存\",\"开发测试环境，希望节省内存资源\",\"选择垃圾收集器应考虑：\",\"应用类型：桌面应用可容忍较长停顿，优先选择Serial收集器；服务器应用关注吞吐量或延迟\",\"堆内存大小：大堆内存（>4GB）优先选择G1\",\"延迟要求：对响应时间敏感的应用选择CMS或G1\",\"吞吐量要求：批处理应用选择Parallel Scavenge\",\"JDK版本：JDK9及以上G1为默认收集器，JDK17引入ZGC/Shenandoah等低延迟收集器\",\"JVM参数的\\\"黄金比例\\\"是指根据应用特性找到的最优参数组合，没有统一标准。确定方法：\",\"基准测试：建立性能基准，测量不同参数组合的性能指标\",\"监控分析：收集生产环境GC日志、内存使用情况\",\"逐步调整：一次只调整一个参数，观察影响\",\"关注瓶颈：优先解决明显的性能瓶颈（如频繁Full GC）\",\"考虑硬件：根据CPU核心数、内存大小调整并行线程数等参数\"]},\"921\":{\"h\":\"依赖管理\"},\"922\":{\"h\":\"概述\",\"t\":[\"依赖管理是Maven的核心功能之一，它能够自动解决项目所需的依赖库，并处理版本冲突。本章节将深入探讨Maven的依赖管理机制，帮助你掌握如何高效地管理项目依赖。\"]},\"923\":{\"h\":\"知识要点\"},\"924\":{\"h\":\"1. 依赖声明\",\"t\":[\"在Maven中，依赖声明是通过POM文件中的<dependencies>元素来实现的。一个典型的依赖声明如下：\",\"<dependency> <groupId>org.springframework</groupId> <artifactId>spring-core</artifactId> <version>5.3.8</version> </dependency>\",\"其中，groupId、artifactId和version组成了Maven的坐标系统，用于唯一标识一个依赖。\"]},\"925\":{\"h\":\"2. 依赖范围\",\"t\":[\"Maven定义了多种依赖范围，用于控制依赖在不同阶段的可见性：\",\"compile：默认范围，编译和运行时都需要\",\"provided：编译时需要，运行时由容器提供\",\"runtime：运行时需要，编译时不需要\",\"test：只在测试时需要\",\"system：类似于provided，但需要显式指定依赖文件的路径\",\"import：用于导入其他POM文件中的依赖管理配置\"]},\"926\":{\"h\":\"3. 依赖传递\",\"t\":[\"Maven的依赖传递机制可以自动解决间接依赖。例如，如果项目A依赖项目B，而项目B又依赖项目C，那么Maven会自动将项目C添加到项目A的依赖中。\",\"<!-- 项目A依赖B，B依赖C --> <!-- 则A会间接依赖C --> <dependency> <groupId>com.example</groupId> <artifactId>B</artifactId> <version>1.0</version> </dependency>\"]},\"927\":{\"h\":\"4. 依赖冲突\",\"t\":[\"当项目中存在多个版本的同一依赖时，就会发生依赖冲突。Maven提供了多种解决依赖冲突的策略：\",\"最短路径优先：Maven会选择依赖路径最短的版本\",\"声明顺序优先：如果依赖路径长度相同，Maven会选择在POM文件中声明较早的版本\",\"显式声明优先：如果显式声明了某个版本，Maven会优先使用该版本\"]},\"928\":{\"h\":\"5. 依赖排除\",\"t\":[\"如果不想引入某个传递依赖，可以使用<exclusions>元素来排除它：\",\"<dependency> <groupId>com.example</groupId> <artifactId>B</artifactId> <version>1.0</version> <exclusions> <exclusion> <groupId>com.example</groupId> <artifactId>C</artifactId> </exclusion> </exclusions> </dependency>\"]},\"929\":{\"h\":\"知识扩展\"},\"930\":{\"h\":\"设计思想\",\"t\":[\"Maven的依赖管理设计遵循了以下原则：\",\"自动解决：自动解决项目所需的依赖库\",\"传递性：通过依赖传递机制减少重复声明\",\"冲突解决：提供多种策略解决依赖冲突\",\"版本控制：通过版本号精确控制依赖版本\"]},\"931\":{\"h\":\"避坑指南\",\"t\":[\"依赖冲突：使用mvn dependency:tree命令查看依赖树，找出冲突的版本\",\"不必要的依赖：定期检查项目依赖，移除不必要的依赖\",\"版本不一致：使用<dependencyManagement>标签统一管理依赖版本\",\"快照版本：谨慎使用快照版本，因为它们可能会随时变化\"]},\"932\":{\"h\":\"深度思考题\",\"t\":[\"思考题: 什么是依赖传递？它有什么优缺点？\",\"回答: 依赖传递是指当项目依赖另一个项目时，会自动继承该项目的依赖。\",\"优点：\",\"减少了重复声明依赖的工作量\",\"简化了项目配置\",\"确保了依赖版本的一致性\",\"缺点：\",\"可能会引入不必要的依赖\",\"可能会导致依赖冲突\",\"增加了项目的复杂性\",\"思考题: 如何统一管理项目中的依赖版本？\",\"回答:\",\"使用<dependencyManagement>标签在父POM文件中统一管理依赖版本\",\"使用属性（如<spring.version>5.3.8</spring.version>）来管理版本号\",\"定期更新依赖版本，确保使用最新的稳定版本\",\"避免使用快照版本，除非有特殊需求\"]},\"933\":{\"h\":\"基础-Maven核心概念\"},\"934\":{\"h\":\"概述\",\"t\":[\"Maven是Java开发中不可或缺的构建工具，它不仅简化了项目构建过程，还提供了依赖管理、项目信息管理等强大功能。本章节将带你深入了解Maven的核心概念，为后续学习打下坚实基础。\"]},\"935\":{\"h\":\"知识要点\"},\"936\":{\"h\":\"1. POM文件\",\"t\":[\"POM（Project Object Model）是Maven的核心文件，它包含了项目的所有信息。一个典型的POM文件结构如下：\",\"<project> <!-- 基础信息 --> <modelVersion>4.0.0</modelVersion> <groupId>com.example</groupId> <artifactId>demo</artifactId> <version>1.0.0</version> <!-- 依赖管理 --> <dependencies> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-core</artifactId> <version>5.3.8</version> </dependency> </dependencies> <!-- 构建配置 --> <build> <plugins> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-compiler-plugin</artifactId> <version>3.8.1</version> </plugin> </plugins> </build> </project>\"]},\"937\":{\"h\":\"2. 坐标系统\",\"t\":[\"Maven使用GAV（GroupId, ArtifactId, Version）坐标系统来唯一标识一个构件：\",\"GroupId：组织或项目标识，通常使用反转的域名\",\"ArtifactId：模块标识，通常是项目名称\",\"Version：版本号，遵循语义化版本规范\"]},\"938\":{\"h\":\"3. 依赖管理\",\"t\":[\"Maven的依赖管理机制可以自动解决项目所需的依赖库：\",\"<dependencies> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-core</artifactId> <version>5.3.8</version> <!-- 依赖范围 --> <scope>compile</scope> </dependency> </dependencies>\",\"依赖范围包括：\",\"compile：默认范围，编译和运行时都需要\",\"provided：编译时需要，运行时由容器提供\",\"runtime：运行时需要，编译时不需要\",\"test：只在测试时需要\"]},\"939\":{\"h\":\"4. 仓库机制\",\"t\":[\"Maven的仓库用于存储构建好的构件：\",\"本地仓库：位于开发者本地机器上的仓库\",\"远程仓库：位于网络上的仓库，包括中央仓库和私服\"]},\"940\":{\"h\":\"5. 生命周期\",\"t\":[\"Maven定义了三个主要的生命周期：\",\"clean：清理项目\",\"default：构建项目\",\"site：生成项目站点\",\"每个生命周期包含一系列阶段，如default生命周期包含compile、test、package、install、deploy等阶段。\"]},\"941\":{\"h\":\"6. 插件系统\",\"t\":[\"Maven的插件系统使其具有极强的扩展性：\",\"<build> <plugins> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-compiler-plugin</artifactId> <version>3.8.1</version> <configuration> <source>1.8</source> <target>1.8</target> </configuration> </plugin> </plugins> </build>\"]},\"942\":{\"h\":\"知识扩展\"},\"943\":{\"h\":\"设计思想\",\"t\":[\"Maven的设计遵循了以下核心原则：\",\"约定优于配置：Maven定义了标准的项目结构和构建流程\",\"依赖管理：自动解决依赖冲突和版本问题\",\"插件机制：通过插件扩展功能\",\"生命周期：标准化的构建流程\"]},\"944\":{\"h\":\"避坑指南\",\"t\":[\"版本冲突：使用mvn dependency:tree命令查看依赖树，找出冲突的版本\",\"构建失败：检查POM文件中的语法错误，确保所有依赖都能从仓库中获取\",\"仓库配置错误：检查settings.xml文件中的仓库配置\"]},\"945\":{\"h\":\"深度思考题\",\"t\":[\"思考题： Maven的约定优于配置原则有什么优缺点？\",\"回答: 优点：\",\"简化了项目配置，减少了开发人员的工作量\",\"标准化了项目结构，使团队协作更加容易\",\"降低了学习成本，新开发人员可以快速上手\",\"缺点：\",\"灵活性不足，对于特殊需求的项目可能需要额外的配置\",\"对于初学者来说，可能需要一段时间来熟悉这些约定\",\"当项目结构与约定不符时，可能会导致构建失败\",\"思考题: 如何解决Maven中的依赖冲突？\",\"回答:\",\"使用mvn dependency:tree命令查看依赖树，找出冲突的版本\",\"使用<exclusions>标签排除不需要的依赖\",\"使用<dependencyManagement>标签统一管理依赖版本\",\"优先使用较新的版本，因为较新的版本通常包含更多的 bug 修复和功能改进\"]},\"946\":{\"h\":\"架构-Maven构建优化\"},\"947\":{\"h\":\"概述\",\"t\":[\"Maven构建优化是提高开发效率和项目质量的重要手段。本章节将深入探讨Maven构建优化的核心策略和实践技巧，帮助你构建更高效、更稳定的Maven项目。\"]},\"948\":{\"h\":\"知识要点\"},\"949\":{\"h\":\"1. 生命周期优化\",\"t\":[\"Maven的生命周期包含了一系列构建阶段，优化生命周期可以显著提高构建效率：\",\"<!-- 只执行必要的构建阶段 --> mvn clean install -DskipTests\"]},\"950\":{\"h\":\"跳过测试\",\"t\":[\"当你不需要运行测试时，可以使用-DskipTests或-Dmaven.test.skip=true参数跳过测试阶段：\",\"# 跳过测试执行，但仍然编译测试代码 mvn install -DskipTests # 完全跳过测试编译和执行 mvn install -Dmaven.test.skip=true\"]},\"951\":{\"h\":\"增量构建\",\"t\":[\"Maven支持增量构建，只编译修改过的文件：\",\"# 增量构建 mvn compile\"]},\"952\":{\"h\":\"2. 依赖管理优化\",\"t\":[\"依赖管理优化可以减少构建时间和避免依赖冲突：\"]},\"953\":{\"h\":\"排除不必要的依赖\",\"t\":[\"<dependency> <groupId>org.springframework</groupId> <artifactId>spring-core</artifactId> <version>5.3.8</version> <exclusions> <exclusion> <groupId>commons-logging</groupId> <artifactId>commons-logging</artifactId> </exclusion> </exclusions> </dependency>\"]},\"954\":{\"h\":\"统一管理依赖版本\",\"t\":[\"<dependencyManagement> <dependencies> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-core</artifactId> <version>5.3.8</version> </dependency> </dependencies> </dependencyManagement>\"]},\"955\":{\"h\":\"3. 插件配置优化\",\"t\":[\"插件配置优化可以提高构建效率和灵活性：\"]},\"956\":{\"h\":\"配置编译器插件\",\"t\":[\"<plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-compiler-plugin</artifactId> <version>3.8.1</version> <configuration> <source>1.8</source> <target>1.8</target> <encoding>UTF-8</encoding> <!-- 启用增量编译 --> <useIncrementalCompilation>true</useIncrementalCompilation> </configuration> </plugin>\"]},\"957\":{\"h\":\"配置构建缓存\",\"t\":[\"<plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-build-cache-plugin</artifactId> <version>1.0.0</version> <configuration> <cacheDirectory>${project.basedir}/.cache</cacheDirectory> </configuration> </plugin>\"]},\"958\":{\"h\":\"4. 构建性能优化\",\"t\":[\"构建性能优化可以显著减少构建时间：\"]},\"959\":{\"h\":\"并行构建\",\"t\":[\"# 并行构建，使用4个线程 mvn -T 4 clean install\"]},\"960\":{\"h\":\"离线构建\",\"t\":[\"当你不需要下载新的依赖时，可以使用离线模式：\",\"# 离线构建 mvn -o clean install\"]},\"961\":{\"h\":\"5. 多模块项目优化\",\"t\":[\"多模块项目优化可以提高项目的可维护性和构建效率：\"]},\"962\":{\"h\":\"模块拆分\",\"t\":[\"<!-- 父POM --> <modules> <module>module1</module> <module>module2</module> <module>module3</module> </modules>\"]},\"963\":{\"h\":\"依赖继承\",\"t\":[\"<!-- 父POM --> <dependencyManagement> <dependencies> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-core</artifactId> <version>5.3.8</version> </dependency> </dependencies> </dependencyManagement> <!-- 子POM --> <dependencies> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-core</artifactId> </dependency> </dependencies>\"]},\"964\":{\"h\":\"知识扩展\"},\"965\":{\"h\":\"设计思想\",\"t\":[\"Maven构建优化的设计遵循了以下原则：\",\"最小化构建范围：只构建必要的部分\",\"增量构建：只构建修改过的部分\",\"并行构建：充分利用多核CPU\",\"缓存机制：避免重复构建\",\"依赖优化：减少不必要的依赖\"]},\"966\":{\"h\":\"避坑指南\",\"t\":[\"过度优化：不要为了优化而优化，确保优化是有意义的\",\"忽略测试：虽然跳过测试可以加快构建，但不要在生产环境中这样做\",\"依赖冲突：定期检查依赖树，避免依赖冲突\",\"版本不一致：使用依赖管理统一管理版本\",\"插件版本：使用稳定的插件版本\"]},\"967\":{\"h\":\"深度思考题\",\"t\":[\"思考题: 如何优化大型多模块项目的构建时间？\",\"回答:\",\"并行构建：使用-T参数启用并行构建\",\"增量构建：只构建修改过的模块\",\"模块拆分：合理拆分模块，减少模块间的依赖\",\"依赖管理：统一管理依赖版本，避免依赖冲突\",\"缓存机制：使用构建缓存插件，避免重复构建\",\"按需构建：只构建必要的模块和阶段\",\"思考题: 什么是Maven的依赖传递？它有什么优缺点？\",\"回答: 依赖传递是指当项目依赖另一个项目时，会自动继承该项目的依赖。\",\"优点：\",\"减少了重复声明依赖的工作量\",\"简化了项目配置\",\"确保了依赖版本的一致性\",\"缺点：\",\"可能会引入不必要的依赖\",\"可能会导致依赖冲突\",\"增加了项目的复杂性\"]},\"968\":{\"h\":\"生态-Maven仓库生态\"},\"969\":{\"h\":\"概述\",\"t\":[\"Maven仓库生态系统是Maven的重要组成部分，它包含了本地仓库、中央仓库和私服仓库等多种仓库类型。本章节将深入探讨Maven仓库生态系统的构成、工作原理和最佳实践，帮助你更好地管理和使用Maven仓库。\"]},\"970\":{\"h\":\"知识要点\"},\"971\":{\"h\":\"1. 本地仓库\",\"t\":[\"本地仓库是位于开发者本地机器上的仓库，用于存储从远程仓库下载的依赖和本地构建的构件。\"]},\"972\":{\"h\":\"本地仓库的位置\",\"t\":[\"默认情况下，本地仓库位于用户主目录下的.m2/repository目录：\",\"# 本地仓库默认位置 ~/.m2/repository\"]},\"973\":{\"h\":\"配置本地仓库\",\"t\":[\"可以在settings.xml文件中配置本地仓库的位置：\",\"<settings> <localRepository>/path/to/local/repository</localRepository> </settings>\"]},\"974\":{\"h\":\"2. 中央仓库\",\"t\":[\"中央仓库是Maven官方提供的远程仓库，包含了大量的常用依赖。\"]},\"975\":{\"h\":\"中央仓库的地址\",\"t\":[\"默认情况下，Maven会从中央仓库下载依赖，其地址为：\",\"https://repo.maven.apache.org/maven2/\"]},\"976\":{\"h\":\"中央仓库的特点\",\"t\":[\"包含了大量的常用依赖\",\"由Maven官方维护\",\"不允许上传构件\",\"访问速度可能较慢\"]},\"977\":{\"h\":\"3. 私服仓库\",\"t\":[\"私服仓库是企业或组织内部的远程仓库，用于存储内部构件和第三方构件。\"]},\"978\":{\"h\":\"私服仓库的优点\",\"t\":[\"提高内部构件的复用性\",\"减少对外部仓库的依赖\",\"控制构件的版本和质量\",\"提高构建速度\"]},\"979\":{\"h\":\"常用的私服仓库\",\"t\":[\"Nexus：由Sonatype提供的Maven仓库管理工具\",\"Artifactory：由JFrog提供的Maven仓库管理工具\",\"Archiva：由Apache提供的Maven仓库管理工具\"]},\"980\":{\"h\":\"4. 镜像仓库\",\"t\":[\"镜像仓库是中央仓库的镜像，用于提高访问速度。\"]},\"981\":{\"h\":\"配置镜像仓库\",\"t\":[\"可以在settings.xml文件中配置镜像仓库：\",\"<settings> <mirrors> <mirror> <id>aliyun</id> <name>Aliyun Maven</name> <url>https://maven.aliyun.com/repository/public</url> <mirrorOf>central</mirrorOf> </mirror> </mirrors> </settings>\"]},\"982\":{\"h\":\"常用的镜像仓库\",\"t\":[\"阿里云Maven镜像：https://maven.aliyun.com/repository/public\",\"华为云Maven镜像：https://repo.huaweicloud.com/repository/maven/\",\"网易Maven镜像：http://mirrors.163.com/maven/repository/maven-public/\"]},\"983\":{\"h\":\"5. 仓库配置\",\"t\":[\"仓库配置是控制Maven如何访问仓库的重要手段。\"]},\"984\":{\"h\":\"配置远程仓库\",\"t\":[\"可以在POM文件中配置远程仓库：\",\"<repositories> <repository> <id>central</id> <name>Central Repository</name> <url>https://repo.maven.apache.org/maven2/</url> <releases> <enabled>true</enabled> </releases> <snapshots> <enabled>false</enabled> </snapshots> </repository> </repositories>\"]},\"985\":{\"h\":\"配置快照仓库\",\"t\":[\"<repositories> <repository> <id>snapshots</id> <name>Snapshots Repository</name> <url>https://repo.maven.apache.org/maven2/</url> <releases> <enabled>false</enabled> </releases> <snapshots> <enabled>true</enabled> </snapshots> </repository> </repositories>\"]},\"986\":{\"h\":\"知识扩展\"},\"987\":{\"h\":\"设计思想\",\"t\":[\"Maven仓库生态的设计遵循了以下原则：\",\"分布式存储：构件存储在多个仓库中\",\"缓存机制：本地仓库缓存远程仓库的构件\",\"镜像机制：提高访问速度\",\"私服机制：促进内部构件的复用\",\"版本控制：精确控制构件的版本\"]},\"988\":{\"h\":\"避坑指南\",\"t\":[\"仓库配置错误：检查settings.xml和POM文件中的仓库配置\",\"依赖不可用：确保依赖可以从配置的仓库中获取\",\"版本冲突：使用依赖管理统一管理依赖版本\",\"快照版本：谨慎使用快照版本，因为它们可能会随时变化\",\"访问速度慢：配置镜像仓库提高访问速度\"]},\"989\":{\"h\":\"深度思考题\",\"t\":[\"思考题: 什么是Maven的仓库镜像？它有什么作用？\",\"回答: Maven的仓库镜像是指一个仓库的副本，它包含了原仓库中的所有构件。\",\"作用：\",\"提高访问速度：镜像仓库通常位于本地或附近的网络中，可以显著提高访问速度\",\"减轻原仓库的负担：镜像仓库可以分担原仓库的访问压力\",\"提高可用性：如果原仓库不可用，镜像仓库可以作为备份\",\"降低网络开销：减少跨网络访问的次数和数据量\",\"思考题: 为什么企业需要搭建私服仓库？\",\"回答:\",\"提高内部构件的复用性：企业内部的构件可以被多个项目共享和复用\",\"控制构件的版本和质量：企业可以控制哪些构件可以被使用，以及它们的版本和质量\",\"减少对外部仓库的依赖：降低对外部仓库的依赖，提高项目的稳定性和安全性\",\"提高构建速度：内部构件可以从本地私服仓库获取，显著提高构建速度\",\"保护知识产权：企业的内部构件可以保存在私服仓库中，避免泄露到外部\"]},\"990\":{\"h\":\"自定义项目Jar上传到maven中央仓库\",\"t\":[\"中央仓库 Open Source Software Repository Hosting 简称 OSSRH\",\"实现目标：将自定义项目上传至maven中央仓库，其他人只需引入maven坐标即可直接使用\",\"上传步骤：\",\"注册账号（去它平台）\",\"提交工单（叫它做事）\",\"人工审核及确认（它说好的）\",\"上传SNAPSHOT版本（我给测试版）\",\"上传release版本（我给稳定版）\",\"完美maven坐标引用（我直接用）\"]},\"991\":{\"h\":\"一、注册jira账号\",\"t\":[\"Jira Software\",\"步骤不多说，密码记住，之后要频繁用到\",\"image-20230506114045630\"]},\"992\":{\"h\":\"二、创建Issue问题工单\",\"t\":[\"类型：默认\",\"Group Id：填域名，github提供免费个人域名io.github.xxx\",\"Project URL：项目地址\",\"SCM url：项目git地址\",\"username：登录用户名\",\"Already Synced：初次创建填 No\",\"工单创建完成，等待邮件回复。\"]},\"993\":{\"h\":\"三、确认回复邮件\",\"t\":[\"邮件回复内容一般为:\",\"​ 内容有两个：\",\"创建一个公开的仓库，以验证仓库所有者是你\",\"将工单状态Response修改为Open\",\"To continue the registration process, please follow these steps: # Create a temporary, public repository called https://github.com/xxx/OSSRH-91364 to verify github account ownership. # *Edit this ticket* and set Status to Open. If you do not own this github account, you must define a new groupId. More info: https://central.sonatype.org/publish/requirements/coordinates/ and https://central.sonatype.org/faq/verify-ownership/\"]},\"994\":{\"h\":\"四、上传至中央仓库\",\"t\":[\"官方验证完后会邮件回复你，通知你的中央仓库已激活，分别上传你项目的SNAPSHOT和release版本至指定地址\",\"Congratulations! Welcome to the Central Repository! io.github.xxx has been prepared, now user(s) xxxx.com can: Publish snapshot and release artifacts to *s01.oss.sonatype.org* Have a look at this section of our official guide for deployment instructions: https://central.sonatype.org/publish/publish-guide/#deployment Depending on your build configuration, your first component(s) might be released automatically after a successful deployment. If that happens, you will see a comment on this ticket confirming that your artifact has synced to Maven Central. If you do not see this comment within an hour or two, you can follow the steps in this section of our guide: https://central.sonatype.org/publish/release/\"]},\"995\":{\"h\":\"1、上传SNAPSHOT版本（快照版本）\",\"t\":[\"参考文档地址:OSSRH Guide - The Central Repository Documentation\",\"流程：下载GPG签名工具->生成秘钥->配置settings.xml->配置pom.xml->上传\"]},\"996\":{\"h\":\"\",\"t\":[\"下载地址：https://www.gnupg.org/download/index.html\"]},\"997\":{\"h\":\"\",\"t\":[\" 生成： gpg --gen-key Real name: 名字(英文) Email address: 邮箱(自己的邮箱) You selected this USER-ID: \\\"xxx[xxx@qq.com](mailto:xxx@qq.com)\\\" Change (N)ame, (E)mail, or (O)kay/(Q)uit? o 之后往下，会让你输入用户名和邮箱，还有一个Passphase（输入两次,务必牢记,建议先找个地方记下来,后续要用到)\",\"查看公钥 gpg --list-keys 查询结果： -------------------------------------------------- pub rsa2048 2021-02-02 [SC] [expires: 2023-02-02] 453294371E0A38D70216B1E527EDC1D957E41325 uid [ultimate] xxxxx <xxxxx@qq.com> sub rsa2048 2021-02-02 [E] [expires: 2023-02-02] pub就是公钥：453294371E0A38D70216B1E527EDC1D957E41325\",\"发布公钥： gpg --keyserver hkp://keyserver.ubuntu.com:11371 --send-keys 453294371E0A38D70216B1E527EDC1D957E41325 查询发布公钥是否成功 gpg --keyserver hkp://keyserver.ubuntu.com:11371 --recv-keys 453294371E0A38D70216B1E527EDC1D957E41325 成功的话会有如下结果 gpg: key 27EDC1D952E45891: \\\"xxxxxx <xxxxx@qq.com>\\\" not changed gpg: Total number processed: 1 gpg: unchanged: 1\"]},\"998\":{\"h\":\"配置settings.xml\",\"t\":[\"配置本地maven的配置文件\",\" <servers> <server> <id>ossrh</id> <username>xxxx@qq.com(SonaType账号)</username> <password>填你注册SonaType时填写的密码</password> </server> </servers> <profiles> <profile> <id>ossrh</id> <activation> <activeByDefault>true</activeByDefault> </activation> <properties> <!--这里填你安装的GnuPG位置--> <gpg.executable>/usr/local/MacGPG2/bin/gpg</gpg.executable> <gpg.passphrase>填写你生成秘钥时输入的密码</gpg.passphrase> <!--这里填你秘钥在磁盘上的位置,可通过上面步骤的 gpg --list-keys找到--> <gpg.homedir>C:/Users/laohan/.gnupg</gpg.homedir> </properties> </profile> </profiles>\"]},\"999\":{\"h\":\"配置Pom.xml\",\"t\":[\" <properties> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> <!-- 此处配置的名称要和maven配置文件对应的serverId一致 --> <github.global.server>github</github.global.server> </properties> <dependencies> <!--自家项目依赖--> </dependencies> <!--gav信息--> <groupId>io.github.lindaifeng</groupId> <artifactId>auto-sensitive</artifactId> <!--需要特别注意,你上传的是SNAPSHOT仓库,所以此处版本号后缀必须带SNAPSHOT--> <version>1.0.0-SNAPSHOT</version> <!--项目信息...--> <name>auto-sensitive</name> <description>data sensitive</description> <url>https://github.com/lindaifeng/auto-sensitive</url> <!--开源协议...--> <licenses> <license> <name>The Apache Software License, Version 2.0</name> <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url> </license> </licenses> <!--开发者信息--> <developers> <developer> <id>qingfeng</id> <name>qingfeng</name> <email>xxxx@qq.com</email> <roles> <role>Project Manager</role> <role>Architect</role> </roles> <timezone>+8</timezone> </developer> </developers> <!--项目在github或其它托管平台的地址--> <scm> <connection>https://github.com/lindaifeng/auto-sensitive.git</connection> <developerConnection>scm:git:ssh://git@github.com:lindaifeng/auto-sensitive.git</developerConnection> <url>https://github.com/lindaifeng/auto-sensitive</url> </scm> <profiles> <profile> <!--注意,此id必须与setting.xml中指定的一致,不要自作聪明改它名字--> <id>ossrh</id> <activation> <activeByDefault>true</activeByDefault> </activation> <build> <!--发布到中央SNAPSHOT仓库插件--> <plugins> <plugin> <groupId>org.sonatype.plugins</groupId> <artifactId>nexus-staging-maven-plugin</artifactId> <version>1.6.7</version> <extensions>true</extensions> <configuration> <serverId>ossrh</serverId> <nexusUrl>https://s01.oss.sonatype.org/</nexusUrl> <autoReleaseAfterClose>true</autoReleaseAfterClose> </configuration> </plugin> <!--生成源码插件--> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-source-plugin</artifactId> <version>2.2.1</version> <executions> <execution> <id>attach-sources</id> <goals> <goal>jar-no-fork</goal> </goals> </execution> </executions> </plugin> <!--生成API文档插件--> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-javadoc-plugin</artifactId> <version>2.9.1</version> <executions> <execution> <id>attach-javadocs</id> <goals> <goal>jar</goal> </goals> <configuration> <!--忽略非标准javadoc注释--> <additionalparam>-Xdoclint:none</additionalparam> <!--自己本地的jdk安装路径中javadoc路径--> <javadocExecutable>/Library/Java/JavaVirtualMachines/zulu-8.jdk/Contents/Home/bin/javadoc</javadocExecutable> </configuration> </execution> </executions> </plugin> <!--gpg插件--> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-gpg-plugin</artifactId> <version>1.5</version> <executions> <execution> <id>sign-artifacts</id> <phase>verify</phase> <goals> <goal>sign</goal> </goals> </execution> </executions> </plugin> </plugins> </build> <distributionManagement> <snapshotRepository> <!--注意,此id必须与setting.xml中指定的一致--> <id>ossrh</id> <url>https://s01.oss.sonatype.org/content/repositories/snapshots</url> </snapshotRepository> <repository> <id>ossrh</id> <url>https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/</url> </repository> </distributionManagement> </profile> </profiles>\",\"尝试maven打包 clean package\",\"build success则可以上传，有报错则根据错误信息解决错误\"]},\"1000\":{\"h\":\"上传项目\",\"t\":[\"通过maven打包clean,deploy 弹出对话框输入生成gpg时填写的密码，success则上传成功。\",\"​ 浏览器访问Nexus Repository Manager,登录查看你的maven项目\",\"​ 快照仓库查看：https://s01.oss.sonatype.org/content/repositories/snapshots\"]},\"1001\":{\"h\":\"2、上传release版本（稳定版本）\",\"t\":[\"流程和上传SNAPSHOT步骤一致,下面仅说明差异点:\",\"保持SNAPSHOT原样，修改如下内容即可：\"]},\"1002\":{\"h\":\"修改：settings.xml\",\"t\":[\"<!--将原来server标签和profile标签中的的ossrh替换为release--> <id>release</id>\"]},\"1003\":{\"h\":\"修改：Pom.xml\",\"t\":[\"<!--修改GAV中的版本号,把SNAPSHOT后缀去掉--> <version>1.0.0</version> <!--将原来server标签和profile标签中的的ossrh替换为release--> <id>release</id> <!--移除发布到中央SNAPSHOT仓库插件:nexus-staging-maven-plugin,并替换为发布到中央release仓库的插件:maven-release-plugin--> <plugin> <groupId>org.sonatype.plugins</groupId> <artifactId>nexus-staging-maven-plugin</artifactId> <version>1.6.7</version> <extensions>true</extensions> <configuration> <serverId>ossrh</serverId> <nexusUrl>https://s01.oss.sonatype.org/</nexusUrl> <autoReleaseAfterClose>true</autoReleaseAfterClose> </configuration> </plugin> <!--替换为--> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-release-plugin</artifactId> <version>2.5.3</version> <configuration> <autoVersionSubmodules>true</autoVersionSubmodules> <useReleaseProfile>false</useReleaseProfile> <releaseProfiles>release</releaseProfiles> <goals>deploy</goals> </configuration> </plugin>\"]},\"1004\":{\"h\":\"发布：release\",\"t\":[\"上面执行完成之后，登陆nexus：https://s01.oss.sonatype.org/#stagingRepositories，登上jira账号之后就能看到我们刚刚发布的内容\",\"image-20230506165540292\",\"​ 选中后点击上方的Close，他会检测你的jar包是否存在问题，如果存在问题，点击下方的Activity即可查看具体的问题或者发送邮件给你了，主要影响release的问题大部分都是打包时漏了一些东西，照着问题修复即可。\",\"（轻微问题不修复也可以release）\",\"检测完成后上方的release就会变成可点击的状态，点击release后，你会收到一份邮件：\",\"大致内容为你的稳定版仓库已激活，大约30分钟后你能在中央仓库搜索到依赖\",\" Central sync is activated for io.github.lindaifeng. After you successfully release, your component will be available to the public on Central https://repo1.maven.org/maven2/, typically within 30 minutes, though updates to https://search.maven.org can take up to four hours.\",\"最后你就可以通过maven坐标直接引用你的项目依赖了\"]},\"1005\":{\"h\":\"常见报错问题：\",\"t\":[\"Unable to find javadoc command: The environment variable JAVA_HOME is not correctly set.\",\"解决方案：需要指定javadoc路径\",\"<!--生成API文档插件--> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-javadoc-plugin</artifactId> <version>2.9.1</version> <executions> <execution> <id>attach-javadocs</id> <goals> <goal>jar</goal> </goals> <configuration> <javadocExecutable>/Library/Java/JavaVirtualMachines/zulu-8.jdk/Contents/Home/bin/javadoc</javadocExecutable> </configuration> </execution> </executions> </plugin>\",\"报错File encoding has not been set, using platform encoding UTF-8, i.e. build is platform dependent!\",\"解决方案：指定项目编码\",\"在pom.xml文件中加入以下配置\",\" <properties> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> </properties>\",\"错误: 未知标记:@ Author\",\"解决方案：配置非标准javadoc注释\",\"<!--忽略非标准javadoc注释--> <configuration> <additionalparam>-Xdoclint:none</additionalparam> </configuration>\",\"提示403：Received status code 403 from server: Forbidden\",\"可能是因为group id不正确\",\"修改域名为申请Maven 时填写的域名。\",\"提示400：Received status code 400 from server: Bad Request\",\"可能是想要上传的版本号在Maven仓库中已存在了\"]},\"1006\":{\"h\":\"进阶-依赖冲突解决\"},\"1007\":{\"h\":\"概述\",\"t\":[\"依赖冲突是Maven使用过程中常见的问题，尤其是在大型项目中。本章节将深入探讨依赖冲突的原因、解决策略和最佳实践，帮助你更好地管理和解决Maven依赖冲突。\"]},\"1008\":{\"h\":\"知识要点\"},\"1009\":{\"h\":\"1. 冲突原因\",\"t\":[\"依赖冲突通常是由以下原因引起的：\"]},\"1010\":{\"h\":\"1.1 传递依赖\",\"t\":[\"Maven的依赖传递机制会导致间接依赖被引入到项目中，如果多个直接依赖引入了同一个库的不同版本，就会产生冲突。\"]},\"1011\":{\"h\":\"1.2 版本不兼容\",\"t\":[\"不同版本的库可能会有API的变化，导致依赖它的代码无法正常工作。\"]},\"1012\":{\"h\":\"1.3 重复依赖\",\"t\":[\"同一个库被多次引入到项目中，可能会导致类加载错误。\"]},\"1013\":{\"h\":\"2. 解决策略\",\"t\":[\"Maven提供了多种解决依赖冲突的策略：\"]},\"1014\":{\"h\":\"2.1 最短路径优先\",\"t\":[\"Maven默认使用最短路径优先的策略来解决依赖冲突，即选择依赖路径最短的版本。\"]},\"1015\":{\"h\":\"2.2 声明顺序优先\",\"t\":[\"如果两个依赖的路径长度相同，Maven会选择在POM文件中声明较早的那个。\"]},\"1016\":{\"h\":\"2.3 排除依赖\",\"t\":[\"可以使用<exclusions>标签排除特定的依赖。\",\"<dependency> <groupId>com.example</groupId> <artifactId>example</artifactId> <version>1.0.0</version> <exclusions> <exclusion> <groupId>conflicting.group</groupId> <artifactId>conflicting-artifact</artifactId> </exclusion> </exclusions> </dependency>\"]},\"1017\":{\"h\":\"2.4 版本锁定\",\"t\":[\"可以使用<dependencyManagement>标签锁定依赖的版本。\",\"<dependencyManagement> <dependencies> <dependency> <groupId>conflicting.group</groupId> <artifactId>conflicting-artifact</artifactId> <version>2.0.0</version> </dependency> </dependencies> </dependencyManagement>\"]},\"1018\":{\"h\":\"2.5 直接依赖\",\"t\":[\"可以在POM文件中直接声明依赖的版本，覆盖传递依赖的版本。\",\"<dependency> <groupId>conflicting.group</groupId> <artifactId>conflicting-artifact</artifactId> <version>2.0.0</version> </dependency>\"]},\"1019\":{\"h\":\"3. 冲突分析\"},\"1020\":{\"h\":\"3.1 使用 命令\",\"t\":[\"可以使用mvn dependency:tree命令查看项目的依赖树，找出冲突的依赖。\",\"# 查看依赖树 mvn dependency:tree # 查看特定依赖的路径 mvn dependency:tree -Dincludes=conflicting.group:conflicting-artifact\"]},\"1021\":{\"h\":\"3.2 使用IDE工具\",\"t\":[\"大多数IDE都提供了依赖分析工具，如IntelliJ IDEA的Dependencies视图，可以帮助你可视化地查看和分析依赖冲突。\"]},\"1022\":{\"h\":\"4. 最佳实践\"},\"1023\":{\"h\":\"4.1 统一版本管理\",\"t\":[\"使用<dependencyManagement>标签统一管理依赖的版本，避免版本不一致导致的冲突。\"]},\"1024\":{\"h\":\"4.2 最小化依赖\",\"t\":[\"只引入项目真正需要的依赖，避免不必要的依赖被引入。\"]},\"1025\":{\"h\":\"4.3 定期检查依赖\",\"t\":[\"定期使用mvn dependency:check命令检查依赖的更新和安全漏洞。\",\"# 检查依赖更新 mvn dependency:check\"]},\"1026\":{\"h\":\"4.4 使用可靠的依赖\",\"t\":[\"尽量使用官方的、稳定的依赖，避免使用非正式的、不稳定的依赖。\"]},\"1027\":{\"h\":\"知识扩展\"},\"1028\":{\"h\":\"设计思想\",\"t\":[\"Maven依赖冲突解决的设计遵循了以下原则：\",\"约定优于配置：默认的冲突解决策略（最短路径优先、声明顺序优先）减少了手动配置的需求\",\"灵活性：提供了多种冲突解决策略，适应不同的场景\",\"可观测性：提供了依赖树等工具，帮助开发者了解和分析依赖关系\",\"向上兼容：尽量保证新版本的库兼容旧版本的API\"]},\"1029\":{\"h\":\"避坑指南\",\"t\":[\"依赖版本不一致：使用<dependencyManagement>标签统一管理依赖版本\",\"传递依赖冲突：使用<exclusions>标签排除冲突的依赖\",\"依赖过多：只引入项目真正需要的依赖\",\"依赖未更新：定期检查依赖的更新和安全漏洞\",\"依赖不兼容：在引入新的依赖前，检查它与现有依赖的兼容性\"]},\"1030\":{\"h\":\"深度思考题\",\"t\":[\"思考题: 什么是Maven的依赖传递机制？它有什么优缺点？\",\"回答: Maven的依赖传递机制是指，当一个项目依赖另一个项目时，它也会自动依赖该项目的依赖。\",\"优点：\",\"简化了依赖配置：开发者只需要声明直接依赖，不需要声明间接依赖\",\"提高了依赖的复用性：多个项目可以共享同一个间接依赖\",\"降低了维护成本：当间接依赖的版本更新时，只需要更新直接依赖的版本\",\"缺点：\",\"可能会引入不必要的依赖：项目可能会依赖一些它并不需要的库\",\"可能会导致依赖冲突：多个直接依赖可能会引入同一个库的不同版本\",\"增加了项目的复杂性：项目的依赖关系可能会变得非常复杂\",\"思考题: 如何避免Maven依赖冲突？\",\"回答:\",\"使用<dependencyManagement>标签统一管理依赖版本\",\"只引入项目真正需要的依赖，避免不必要的依赖被引入\",\"定期检查依赖的更新和安全漏洞\",\"在引入新的依赖前，检查它与现有依赖的兼容性\",\"使用<exclusions>标签排除冲突的依赖\",\"直接声明依赖的版本，覆盖传递依赖的版本\",\"使用可靠的、稳定的依赖，避免使用非正式的、不稳定的依赖\"]},\"1031\":{\"h\":\"面试专题：语法基础\"},\"1032\":{\"h\":\"核心理论\"},\"1033\":{\"h\":\"1.1 Java语法体系概览\",\"t\":[\"Java语法体系可分为基础语法、面向对象语法和高级特性三个层次，是Java编程的基石。\"]},\"1034\":{\"h\":\"1.2 语法基础核心考点\",\"t\":[\"类别\",\"高频考点\",\"重要程度\",\"关键字\",\"static, final, this, super, volatile, transient\",\"★★★★★\",\"数据类型\",\"基本类型与包装类区别、自动装箱/拆箱、String不可变性\",\"★★★★★\",\"控制流程\",\"分支结构、循环效率对比、break与continue\",\"★★★☆☆\",\"面向对象\",\"构造方法、重写与重载、多态实现原理\",\"★★★★★\",\"高级特性\",\"泛型擦除、注解原理、函数式接口\",\"★★★★☆\"]},\"1035\":{\"h\":\"代码实践\"},\"1036\":{\"h\":\"2.1 关键字应用场景\"},\"1037\":{\"h\":\"2.1.1 static关键字用法\",\"t\":[\"/** * static关键字使用示例 * 包含静态变量、静态方法、静态代码块和静态内部类 */ public class StaticDemo { // 静态变量：属于类，所有实例共享 public static int staticVar = 0; // 实例变量：属于对象，每个实例独立 public int instanceVar = 0; // 静态代码块：类加载时执行，仅执行一次 static { System.out.println(\\\"静态代码块执行\\\"); staticVar = 10; } // 构造方法 public StaticDemo() { instanceVar++; staticVar++; } // 静态方法：只能访问静态成员，无this引用 public static void staticMethod() { System.out.println(\\\"静态变量值: \\\" + staticVar); // System.out.println(instanceVar); // 编译错误：不能访问实例变量 } // 实例方法：可以访问静态和实例成员 public void instanceMethod() { System.out.println(\\\"实例变量值: \\\" + instanceVar); System.out.println(\\\"静态变量值: \\\" + staticVar); } // 静态内部类：不能访问外部类的实例成员 public static class StaticNestedClass { public void nestedMethod() { System.out.println(\\\"静态内部类访问静态变量: \\\" + staticVar); } } public static void main(String[] args) { // 直接通过类名访问静态成员 StaticDemo.staticMethod(); System.out.println(\\\"通过类名访问静态变量: \\\" + StaticDemo.staticVar); // 创建实例 StaticDemo instance1 = new StaticDemo(); StaticDemo instance2 = new StaticDemo(); // 实例变量各自独立 System.out.println(\\\"instance1实例变量: \\\" + instance1.instanceVar); // 1 System.out.println(\\\"instance2实例变量: \\\" + instance2.instanceVar); // 1 // 静态变量共享 System.out.println(\\\"instance1静态变量: \\\" + instance1.staticVar); // 12 System.out.println(\\\"instance2静态变量: \\\" + instance2.staticVar); // 12 // 静态内部类使用 StaticNestedClass nested = new StaticNestedClass(); nested.nestedMethod(); } }\"]},\"1038\":{\"h\":\"2.1.2 final关键字用法\",\"t\":[\"/** * final关键字使用示例 * 可修饰类、方法、变量 */ public class FinalDemo { // final变量：必须初始化，初始化后不可修改 public static final int CONSTANT = 100; // 常量，通常全大写 private final String name; // final参数：方法内不可修改 public void finalParameter(final int param) { // param = 20; // 编译错误：final参数不可修改 System.out.println(\\\"final参数: \\\" + param); } // 构造方法：必须初始化final实例变量 public FinalDemo(String name) { this.name = name; // 正确：在构造方法中初始化final变量 } // final方法：不可被子类重写 public final void finalMethod() { System.out.println(\\\"这是final方法，不可重写\\\"); } // final变量的getter public String getName() { return name; } } // final类：不可被继承 final class FinalClass { // 类中的成员可以是各种类型 } // 编译错误：Cannot inherit from final 'FinalClass' // class SubClass extends FinalClass {}\"]},\"1039\":{\"h\":\"2.2 数据类型与类型转换\"},\"1040\":{\"h\":\"2.2.1 基本类型与包装类\",\"t\":[\"/** * 基本类型与包装类对比示例 * 包括自动装箱/拆箱和缓存机制 */ public class WrapperClassDemo { public static void main(String[] args) { // 基本类型 int primitiveInt = 10; boolean primitiveBoolean = true; // 包装类 Integer wrapperInt = Integer.valueOf(10); Boolean wrapperBoolean = Boolean.TRUE; // 自动装箱：基本类型 -> 包装类 Integer autoBoxing = primitiveInt; // 自动拆箱：包装类 -> 基本类型 int autoUnboxing = wrapperInt; // 包装类缓存机制 Integer a = 127; Integer b = 127; Integer c = 128; Integer d = 128; System.out.println(a == b); // true：缓存范围内 System.out.println(c == d); // false：超出缓存范围 System.out.println(a.equals(b)); // true：equals比较值 System.out.println(c.equals(d)); // true：equals比较值 // 常见问题：NullPointerException Integer nullInteger = null; try { int value = nullInteger; // 自动拆箱时null会抛出NPE } catch (NullPointerException e) { System.out.println(\\\"空包装类拆箱抛出NPE\\\"); } // 字符串转基本类型 int num = Integer.parseInt(\\\"123\\\"); double decimal = Double.parseDouble(\\\"3.14\\\"); // 基本类型转字符串 String intStr = String.valueOf(123); String boolStr = Boolean.toString(true); } }\"]},\"1041\":{\"h\":\"2.2.2 String特性与操作\",\"t\":[\"/** * String类特性与常用操作示例 * 不可变性、常量池、字符串操作 */ public class StringDemo { public static void main(String[] args) { // String不可变性演示 String str1 = \\\"hello\\\"; String str2 = str1; str1 = str1 + \\\" world\\\"; System.out.println(str1); // hello world System.out.println(str2); // hello（str2仍指向原对象） // 字符串常量池 String s1 = \\\"java\\\"; String s2 = \\\"java\\\"; String s3 = new String(\\\"java\\\"); String s4 = new String(\\\"java\\\").intern(); System.out.println(s1 == s2); // true：同一常量池对象 System.out.println(s1 == s3); // false：s3是堆中对象 System.out.println(s1 == s4); // true：intern()返回常量池对象 // 常用字符串操作 String text = \\\" Java Programming \\\"; System.out.println(text.trim()); // 去除首尾空格：\\\"Java Programming\\\" System.out.println(text.toLowerCase()); // 转小写：\\\" java programming \\\" System.out.println(text.indexOf(\\\"Pro\\\")); // 查找子串位置：6 System.out.println(text.substring(2, 6)); // 截取子串：\\\"Java\\\" System.out.println(text.replace(\\\"Programming\\\", \\\"Coding\\\")); // 替换：\\\" Java Coding \\\" // 字符串拼接性能对比 long start = System.currentTimeMillis(); String normalConcat = \\\"\\\"; for (int i = 0; i < 10000; i++) { normalConcat += i; // 性能差，每次创建新对象 } System.out.println(\\\"普通拼接耗时: \\\" + (System.currentTimeMillis() - start) + \\\"ms\\\"); start = System.currentTimeMillis(); StringBuilder sb = new StringBuilder(); for (int i = 0; i < 10000; i++) { sb.append(i); // 性能好，可修改 } String builderConcat = sb.toString(); System.out.println(\\\"StringBuilder拼接耗时: \\\" + (System.currentTimeMillis() - start) + \\\"ms\\\"); // 线程安全的StringBuffer StringBuffer sbf = new StringBuffer(); sbf.append(\\\"thread\\\").append(\\\"safe\\\"); } }\"]},\"1042\":{\"h\":\"2.3 控制流程与异常处理\"},\"1043\":{\"h\":\"2.3.1 循环结构效率对比\",\"t\":[\"/** * 不同循环结构的性能对比 * for、foreach、while循环适用场景 */ public class LoopPerformanceDemo { public static void main(String[] args) { List<String> list = new ArrayList<>(); for (int i = 0; i < 100000; i++) { list.add(\\\"element\\\" + i); } // for循环 long start = System.currentTimeMillis(); for (int i = 0; i < list.size(); i++) { String element = list.get(i); } System.out.println(\\\"普通for循环耗时: \\\" + (System.currentTimeMillis() - start) + \\\"ms\\\"); // 优化for循环（缓存size） start = System.currentTimeMillis(); int size = list.size(); for (int i = 0; i < size; i++) { String element = list.get(i); } System.out.println(\\\"优化for循环耗时: \\\" + (System.currentTimeMillis() - start) + \\\"ms\\\"); // foreach循环 start = System.currentTimeMillis(); for (String element : list) { // do nothing } System.out.println(\\\"foreach循环耗时: \\\" + (System.currentTimeMillis() - start) + \\\"ms\\\"); // while循环 start = System.currentTimeMillis(); int index = 0; while (index < list.size()) { String element = list.get(index); index++; } System.out.println(\\\"while循环耗时: \\\" + (System.currentTimeMillis() - start) + \\\"ms\\\"); } }\"]},\"1044\":{\"h\":\"2.3.2 异常处理最佳实践\",\"t\":[\"/** * 异常处理最佳实践示例 * 包括try-catch-finally、try-with-resources和自定义异常 */ public class ExceptionHandlingDemo { // 自定义异常 static class BusinessException extends Exception { private int errorCode; public BusinessException(String message, int errorCode) { super(message); this.errorCode = errorCode; } public int getErrorCode() { return errorCode; } } // 资源关闭传统方式 public static void traditionalResourceHandling() { FileInputStream fis = null; try { fis = new FileInputStream(\\\"file.txt\\\"); // 读取文件操作 } catch (FileNotFoundException e) { System.err.println(\\\"文件未找到: \\\" + e.getMessage()); } finally { // 确保资源关闭 if (fis != null) { try { fis.close(); } catch (IOException e) { System.err.println(\\\"关闭流失败: \\\" + e.getMessage()); } } } } // JDK 7+ try-with-resources自动关闭资源 public static void tryWithResources() { try (FileInputStream fis = new FileInputStream(\\\"file.txt\\\")) { // 读取文件操作 } catch (FileNotFoundException e) { System.err.println(\\\"文件未找到: \\\" + e.getMessage()); } catch (IOException e) { System.err.println(\\\"IO异常: \\\" + e.getMessage()); } // 资源自动关闭 } // 异常处理最佳实践 public static void processOrder(int orderId) throws BusinessException { if (orderId <= 0) { // 抛出具体业务异常 throw new BusinessException(\\\"订单ID必须为正数\\\", 400); } try { // 业务逻辑处理 System.out.println(\\\"处理订单: \\\" + orderId); // 可能抛出异常的操作 } catch (NullPointerException e) { // 捕获具体异常而非通用Exception throw new BusinessException(\\\"订单数据为空\\\", 500); } finally { // 释放资源或记录日志等收尾工作 System.out.println(\\\"订单处理结束，orderId: \\\" + orderId); } } public static void main(String[] args) { try { processOrder(123); processOrder(-1); } catch (BusinessException e) { System.err.println(\\\"业务异常: \\\" + e.getMessage() + \\\", 错误码: \\\" + e.getErrorCode()); } traditionalResourceHandling(); tryWithResources(); } }\"]},\"1045\":{\"h\":\"设计思想\"},\"1046\":{\"h\":\"3.1 Java语法设计哲学\",\"t\":[\"Java语法设计遵循\\\"简单、面向对象、分布式、健壮、安全、平台无关、可移植、高性能、多线程、动态\\\"的原则，其中语法层面最核心的设计思想包括：\",\"简单性：相比C++移除了指针、多重继承等复杂特性\",\"面向对象：一切皆对象（除基本类型外），单继承多实现\",\"安全性：强类型检查、异常处理、内存自动管理\",\"平台无关：一次编写，到处运行（WORA）\"]},\"1047\":{\"h\":\"3.2 语法特性背后的设计考量\"},\"1048\":{\"h\":\"3.2.1 String不可变性设计\",\"t\":[\"String类被设计为不可变的主要原因：\",\"安全性：字符串常被用作参数，不可变性保证参数不被修改\",\"缓存优化：可缓存hashCode，提高HashMap等容器的性能\",\"线程安全：不可变对象天然线程安全\",\"常量池优化：字符串常量池可以复用相同内容的字符串\"]},\"1049\":{\"h\":\"3.2.2 自动装箱与拆箱的权衡\",\"t\":[\"自动装箱/拆箱是Java 5引入的语法糖，其设计权衡：\",\"优点：简化代码，消除基本类型与包装类之间的转换代码\",\"缺点：可能导致性能问题和NullPointerException\",\"优化：对常用值（如-128~127的整数）实现缓存机制\"]},\"1050\":{\"h\":\"避坑指南\"},\"1051\":{\"h\":\"4.1 关键字使用误区\"},\"1052\":{\"h\":\"4.1.1 static关键字常见错误\",\"t\":[\"/** * static关键字使用误区示例 */ public class StaticPitfalls { // 误区1：静态方法访问非静态成员 public static void staticMethod() { // System.out.println(nonStaticVar); // 编译错误 // nonStaticMethod(); // 编译错误 } private int nonStaticVar; private void nonStaticMethod() {} // 误区2：构造方法误用static // public static StaticPitfalls() {} // 编译错误 // 误区3：static导入导致命名冲突 // import static java.lang.Math.PI; // import static java.awt.geom.Arc2D.PI; // 此时使用PI会导致编译错误 // 误区4：静态内部类访问外部类实例成员 public static class StaticNestedClass { public void accessOuter() { // System.out.println(nonStaticVar); // 编译错误 } } }\"]},\"1053\":{\"h\":\"4.1.2 final关键字使用陷阱\",\"t\":[\"/** * final关键字使用陷阱示例 */ public class FinalPitfalls { // 陷阱1：final引用的对象内容可修改 private final List<String> list = new ArrayList<>(); public void addElement() { list.add(\\\"element\\\"); // 允许：final只保证引用不变 // list = new ArrayList<>(); // 不允许：修改引用 } // 陷阱2：final数组的元素可修改 private final int[] array = {1, 2, 3}; public void modifyArray() { array[0] = 100; // 允许：数组引用不变，内容可变 // array = new int[5]; // 不允许：修改引用 } // 陷阱3：final方法内的局部变量可修改 public final void finalMethod() { int localVar = 10; localVar = 20; // 允许：方法final不影响局部变量 } // 陷阱4：错误的初始化时机 private final int lateInitVar; // public FinalPitfalls() {} // 编译错误：final变量lateInitVar未初始化 // 正确做法：在构造方法中初始化 public FinalPitfalls() { lateInitVar = 100; } }\"]},\"1054\":{\"h\":\"4.2 类型转换与字符串操作问题\"},\"1055\":{\"h\":\"4.2.1 类型转换异常处理\",\"t\":[\"/** * 类型转换常见问题及解决方案 */ public class TypeConversionPitfalls { public static void main(String[] args) { // 问题1：字符串转数字时的格式错误 try { int num = Integer.parseInt(\\\"abc\\\"); } catch (NumberFormatException e) { System.out.println(\\\"字符串格式错误，无法转为数字\\\"); } // 问题2：向下转型不安全 Object obj = \\\"string\\\"; try { Integer num = (Integer) obj; // 运行时异常 } catch (ClassCastException e) { System.out.println(\\\"类型转换异常: \\\" + e.getMessage()); } // 解决方案：使用instanceof检查 if (obj instanceof Integer) { Integer num = (Integer) obj; } else { System.out.println(\\\"对象不是Integer类型\\\"); } // 问题3：浮点精度丢失 double result = 0.1 + 0.2; System.out.println(result); // 0.30000000000000004而非0.3 // 解决方案：使用BigDecimal BigDecimal bd1 = new BigDecimal(\\\"0.1\\\"); BigDecimal bd2 = new BigDecimal(\\\"0.2\\\"); BigDecimal sum = bd1.add(bd2); System.out.println(sum); // 0.3 } }\"]},\"1056\":{\"h\":\"4.2.2 String操作性能问题\",\"t\":[\"/** * String操作性能问题及优化 */ public class StringPerformancePitfalls { // 问题1：循环中字符串拼接 public String loopConcat(int count) { String result = \\\"\\\"; for (int i = 0; i < count; i++) { result += i; // 每次循环创建新对象，O(n²)复杂度 } return result; } // 优化方案：使用StringBuilder public String optimizedConcat(int count) { StringBuilder sb = new StringBuilder(); for (int i = 0; i < count; i++) { sb.append(i); // O(n)复杂度 } return sb.toString(); } // 问题2：不必要的字符串创建 public void unnecessaryStringCreation() { String str1 = new String(\\\"hello\\\"); // 不推荐：创建了两个对象（堆和常量池） String str2 = \\\"hello\\\"; // 推荐：只使用常量池对象 // 问题3：频繁调用String.substring() String largeString = \\\"abcdefghijklmnopqrstuvwxyz\\\"; for (int i = 0; i < 1000; i++) { String substr = largeString.substring(0, 5); // JDK 6及之前会导致内存泄漏 } } public static void main(String[] args) { StringPerformancePitfalls demo = new StringPerformancePitfalls(); int count = 10000; long start = System.currentTimeMillis(); demo.loopConcat(count); System.out.println(\\\"循环拼接耗时: \\\" + (System.currentTimeMillis() - start) + \\\"ms\\\"); start = System.currentTimeMillis(); demo.optimizedConcat(count); System.out.println(\\\"StringBuilder拼接耗时: \\\" + (System.currentTimeMillis() - start) + \\\"ms\\\"); } }\"]},\"1057\":{\"h\":\"深度思考题\"},\"1058\":{\"h\":\"思考题1：Java中的值传递与引用传递区别\",\"t\":[\"思考题回答：Java中只有值传递，没有引用传递。当参数是基本类型时，传递的是值的副本；当参数是对象时，传递的是对象引用的副本，而非对象本身。\",\"示例证明：\",\"public class PassByValueDemo { // 基本类型参数 public static void modifyPrimitive(int num) { num = 100; } // 对象类型参数 public static void modifyObject(StringBuilder sb) { sb.append(\\\" world\\\"); // 修改对象内容 sb = new StringBuilder(\\\"new\\\"); // 修改引用副本，不影响原引用 } public static void main(String[] args) { int x = 10; modifyPrimitive(x); System.out.println(x); // 输出10，未被修改 StringBuilder sb = new StringBuilder(\\\"hello\\\"); modifyObject(sb); System.out.println(sb); // 输出\\\"hello world\\\"，对象内容被修改 } }\",\"结论：Java始终采用值传递。对于对象，传递的是引用的值，这使得我们可以修改对象的内容，但无法改变原引用的指向。\"]},\"1059\":{\"h\":\"思考题2：JDK 8到JDK 21的语法特性演进\",\"t\":[\"思考题回答：JDK 8至JDK 21的重要语法特性演进：\",\"JDK 8 (2014)\",\"Lambda表达式：引入函数式编程能力\",\"方法引用：简化Lambda表达式\",\"Stream API：支持集合的函数式操作\",\"默认方法：接口可以有默认实现\",\"JDK 9 (2017)\",\"接口私有方法：接口中可定义私有辅助方法\",\"try-with-resources增强：支持final变量\",\"JDK 10 (2018)\",\"var关键字：局部变量类型推断\",\"不可变集合工厂方法：List.of(), Set.of(), Map.of()\",\"JDK 11 (2018)\",\"String新增方法：isBlank(), lines(), strip(), repeat()\",\"Lambda参数类型推断增强\",\"JDK 12 (2019)\",\"switch表达式预览：支持返回值\",\"字符串缩进方法indent()\",\"JDK 13 (2019)\",\"switch表达式增强：使用yield返回值\",\"文本块预览：使用\"]},\"1060\":{\"h\":\"面试专题：注解\"},\"1061\":{\"h\":\"概述\",\"t\":[\"注解是Java面试中的高频考点，涉及底层实现、框架应用和性能优化等多个方面。掌握注解技术不仅能应对面试中的理论问题，更能在实际项目中写出更优雅、更灵活的代码。本章将系统梳理注解相关的面试重点，帮助你全面掌握这一重要知识点。\"]},\"1062\":{\"h\":\"核心理论\"},\"1063\":{\"h\":\"1. 注解的本质与分类\",\"t\":[\"注解本质是继承java.lang.annotation.Annotation接口的特殊接口，编译后会生成对应的class文件。根据用途可分为：\",\"标准注解：JDK内置的注解，如@Override、@Deprecated\",\"元注解：用于修饰注解的注解，如@Target、@Retention\",\"自定义注解：开发者根据需求定义的注解\"]},\"1064\":{\"h\":\"2. 元注解详解\",\"t\":[\"JDK提供的4个元注解及其作用：\",\"元注解\",\"作用\",\"关键参数\",\"@Target\",\"指定注解可修饰的元素类型\",\"ElementType.TYPE（类）、FIELD（字段）、METHOD（方法）等\",\"@Retention\",\"指定注解保留策略\",\"SOURCE（源码）、CLASS（字节码）、RUNTIME（运行时）\",\"@Documented\",\"指定注解是否包含在Javadoc中\",\"-\",\"@Inherited\",\"指定注解是否可被继承\",\"-\",\"关键考点：@Retention(RetentionPolicy.RUNTIME)是运行时反射解析注解的必要条件，而@Inherited仅对类注解有效，方法和字段注解不会被子类继承。\"]},\"1065\":{\"h\":\"3. 注解的生命周期\",\"t\":[\"SOURCE：仅存在于源码中，编译时被丢弃（如@Override）\",\"CLASS：存在于字节码中，但JVM加载类时会被丢弃（默认策略）\",\"RUNTIME：存在于运行时，可通过反射获取（如Spring的@Autowired）\"]},\"1066\":{\"h\":\"4. JDK8注解新特性\",\"t\":[\"重复注解：允许在同一元素上多次使用同一注解，需用@Repeatable标记\",\"类型注解：可用于泛型、类型转换等场景，如List<@NonNull String>\",\"// 重复注解示例 @Repeatable(Schedules.class) public @interface Schedule { String dayOfWeek(); int hour(); } public @interface Schedules { Schedule[] value(); } // 使用重复注解 @Schedule(dayOfWeek = \\\"MONDAY\\\", hour = 9) @Schedule(dayOfWeek = \\\"FRIDAY\\\", hour = 17) public void doPeriodicTask() { // 任务逻辑 }\"]},\"1067\":{\"h\":\"代码实践\"},\"1068\":{\"h\":\"面试题1：实现一个简单的日志注解\",\"t\":[\"需求：设计一个@Log注解，用于标记方法需要记录日志，包括方法名、参数和返回值。\",\"// 1. 定义日志注解 @Target(ElementType.METHOD) @Retention(RetentionPolicy.RUNTIME) public @interface Log { // 日志描述 String description() default \\\"\\\"; // 是否记录参数 boolean logParameters() default true; // 是否记录返回值 boolean logReturnValue() default true; } // 2. 实现AOP切面处理日志 @Aspect @Component public class LogAspect { private static final Logger logger = LoggerFactory.getLogger(LogAspect.class); @Around(\\\"@annotation(log)\\\") public Object logAround(ProceedingJoinPoint joinPoint, Log log) throws Throwable { String methodName = joinPoint.getSignature().getName(); Object[] args = joinPoint.getArgs(); // 记录方法调用前日志 if (log.logParameters()) { logger.info(\\\"{} - 调用开始，参数: {}\\\", methodName, Arrays.toString(args)); } else { logger.info(\\\"{} - 调用开始\\\", methodName); } long startTime = System.currentTimeMillis(); Object result = null; try { // 执行目标方法 result = joinPoint.proceed(); return result; } catch (Exception e) { // 记录异常日志 logger.error(\\\"{} - 调用异常: {}\\\", methodName, e.getMessage(), e); throw e; } finally { // 记录方法调用后日志 long duration = System.currentTimeMillis() - startTime; if (log.logReturnValue()) { logger.info(\\\"{} - 调用结束，返回值: {}, 耗时: {}ms\\\", methodName, result, duration); } else { logger.info(\\\"{} - 调用结束，耗时: {}ms\\\", methodName, duration); } } } } // 3. 使用日志注解 @Service public class UserService { @Log(description = \\\"获取用户信息\\\", logParameters = true, logReturnValue = true) public User getUserById(Long id) { // 业务逻辑 return userRepository.findById(id); } }\"]},\"1069\":{\"h\":\"面试题2：实现一个基于注解的参数校验器\",\"t\":[\"需求：设计@NotNull、@Max、@Min等注解，实现简单的参数校验功能。\",\"// 1. 定义校验注解 @Target({ElementType.FIELD, ElementType.PARAMETER}) @Retention(RetentionPolicy.RUNTIME) public @interface NotNull { String message() default \\\"参数不能为空\\\"; } @Target({ElementType.FIELD, ElementType.PARAMETER}) @Retention(RetentionPolicy.RUNTIME) public @interface Max { long value(); String message() default \\\"参数超过最大值\\\"; } // 2. 实现校验器 public class Validator { public static void validate(Object obj) throws ValidationException { if (obj == null) { throw new ValidationException(\\\"校验对象不能为空\\\"); } Class<?> clazz = obj.getClass(); // 校验字段 for (Field field : clazz.getDeclaredFields()) { field.setAccessible(true); validateField(field, obj); } } private static void validateField(Field field, Object obj) throws ValidationException { try { Object value = field.get(obj); // 校验@NotNull if (field.isAnnotationPresent(NotNull.class) && value == null) { NotNull annotation = field.getAnnotation(NotNull.class); throw new ValidationException(annotation.message() + \\\"(字段: \\\" + field.getName() + \\\")\\\"); } // 校验@Max if (field.isAnnotationPresent(Max.class) && value instanceof Number) { Max annotation = field.getAnnotation(Max.class); long maxValue = annotation.value(); long fieldValue = ((Number) value).longValue(); if (fieldValue > maxValue) { throw new ValidationException(annotation.message() + \\\"(字段: \\\" + field.getName() + \\\", 最大值: \\\" + maxValue + \\\", 实际值: \\\" + fieldValue + \\\")\\\"); } } // 可添加更多注解的校验逻辑... } catch (IllegalAccessException e) { throw new ValidationException(\\\"校验失败: \\\" + e.getMessage()); } } } // 3. 使用校验注解 public class User { @NotNull(message = \\\"用户ID不能为空\\\") private Long id; @NotNull(message = \\\"用户名不能为空\\\") private String username; @Max(value = 120, message = \\\"年龄不能超过120\\\") private Integer age; // 省略getter和setter } // 4. 执行校验 public class ValidationDemo { public static void main(String[] args) { User user = new User(); user.setId(null); user.setUsername(\\\"test\\\"); user.setAge(150); try { Validator.validate(user); } catch (ValidationException e) { System.out.println(\\\"校验失败: \\\" + e.getMessage()); } } }\"]},\"1070\":{\"h\":\"设计思想\"},\"1071\":{\"h\":\"1. 元数据驱动开发\",\"t\":[\"注解体现了元数据驱动开发（MDD）思想，通过注解为代码添加元数据，实现：\",\"配置与代码分离：如Spring的@Component替代XML配置\",\"声明式编程：通过注解声明意图而非实现细节\",\"代码自我描述：注解使代码具有自解释性\"]},\"1072\":{\"h\":\"2. AOP与注解结合\",\"t\":[\"注解常与AOP结合实现横切关注点：\",\"日志记录：如@Log注解标记需要记录日志的方法\",\"事务管理：如Spring的@Transactional\",\"权限控制：如@RequiresPermission\",\"缓存控制：如@Cacheable\"]},\"1073\":{\"h\":\"3. 编译期代码生成\",\"t\":[\"通过注解处理器在编译期生成代码，避免运行时反射开销：\",\"Lombok：通过@Data、@Getter等注解生成getter/setter等方法\",\"ButterKnife：通过@BindView生成视图绑定代码\",\"Dagger：通过@Inject生成依赖注入代码\"]},\"1074\":{\"h\":\"4. 约定优于配置\",\"t\":[\"注解是\\\"约定优于配置\\\"（Convention over Configuration）思想的重要实现：\",\"默认值减少显式配置\",\"命名约定简化配置\",\"注解标记替代XML配置\"]},\"1075\":{\"h\":\"避坑指南\"},\"1076\":{\"h\":\"1. 常见错误案例\"},\"1077\":{\"h\":\"错误1：错误的保留策略\",\"t\":[\"// 错误示例：需要运行时解析却使用CLASS保留策略 @Retention(RetentionPolicy.CLASS) public @interface MyAnnotation { String value(); } // 正确做法：运行时解析需使用RUNTIME保留策略 @Retention(RetentionPolicy.RUNTIME) public @interface MyAnnotation { String value(); }\"]},\"1078\":{\"h\":\"错误2：误解@Inherited注解\",\"t\":[\"// @Inherited仅对类注解有效，方法注解不会被子类继承 @Inherited @Target({ElementType.TYPE, ElementType.METHOD}) @Retention(RetentionPolicy.RUNTIME) public @interface MyAnnotation { } @MyAnnotation public class Parent { @MyAnnotation public void doSomething() {} } public class Child extends Parent { // 重写父类方法后，@MyAnnotation注解不会被继承 @Override public void doSomething() {} }\"]},\"1079\":{\"h\":\"错误3：注解属性默认值问题\",\"t\":[\"// 错误示例：注解属性没有默认值且使用时未指定 public @interface MyAnnotation { String value(); // 没有默认值 int count(); // 没有默认值 } // 使用时必须指定所有无默认值的属性 @MyAnnotation(value = \\\"test\\\", count = 1) // 正确 public class MyClass {} @MyAnnotation(value = \\\"test\\\") // 错误：缺少count属性 public class MyClass {}\"]},\"1080\":{\"h\":\"2. 性能优化技巧\"},\"1081\":{\"h\":\"技巧1：缓存注解解析结果\",\"t\":[\"// 使用缓存避免重复反射解析注解 public class AnnotationCache { private static final ConcurrentHashMap<Class<?>, MyAnnotation> cache = new ConcurrentHashMap<>(); public static MyAnnotation getAnnotation(Class<?> clazz) { return cache.computeIfAbsent(clazz, c -> c.getAnnotation(MyAnnotation.class)); } }\"]},\"1082\":{\"h\":\"技巧2：优先使用编译期注解处理器\",\"t\":[\"避免运行时反射开销，如使用APT在编译期处理注解生成代码。\"]},\"1083\":{\"h\":\"技巧3：减少高频代码中的注解解析\",\"t\":[\"在循环、高频调用方法中避免使用反射解析注解，可提前解析并缓存结果。\"]},\"1084\":{\"h\":\"3. 版本兼容性处理\",\"t\":[\"JDK8之前不支持重复注解和类型注解\",\"Android平台对某些注解特性支持有限\",\"不同框架版本对注解的处理可能存在差异\"]},\"1085\":{\"h\":\"深度思考题\"},\"1086\":{\"h\":\"思考题1：注解与XML配置相比有哪些优缺点？在什么场景下应该选择注解，什么场景下应该选择XML？\",\"t\":[\"参考答案：\",\"注解的优点：\",\"代码与配置紧密结合，可读性好\",\"编译期检查，减少运行时错误\",\"开发效率高，无需维护额外的XML文件\",\"注解的缺点：\",\"配置分散，不便于集中管理\",\"修改配置需要重新编译代码\",\"对于复杂配置，注解表达能力有限\",\"XML的优点：\",\"配置集中管理，便于维护\",\"无需重新编译即可修改配置\",\"适合复杂配置和跨语言场景\",\"XML的缺点：\",\"与代码分离，可读性较差\",\"没有编译期检查，容易出现拼写错误\",\"配置文件庞大时维护困难\",\"选择策略：\",\"简单配置、固定配置、与代码强相关的配置优先使用注解\",\"复杂配置、需要动态修改的配置、跨语言配置优先使用XML\",\"现代框架通常提供混合配置方式，可根据具体场景选择\"]},\"1087\":{\"h\":\"思考题2：如何实现一个注解处理器，在编译期检查代码规范？\",\"t\":[\"参考答案： 可以实现一个注解处理器，在编译期检查类名、方法名是否符合驼峰命名规范，变量是否使用final修饰等。\",\"// 1. 定义一个标记注解 @Target(ElementType.TYPE) @Retention(RetentionPolicy.SOURCE) public @interface Code规范检查 { } // 2. 实现注解处理器 @SupportedAnnotationTypes(\\\"com.example.Code规范检查\\\") @SupportedSourceVersion(SourceVersion.RELEASE_8) public class Code规范Processor extends AbstractProcessor { private Messager messager; @Override public synchronized void init(ProcessingEnvironment processingEnv) { super.init(processingEnv); messager = processingEnv.getMessager(); } @Override public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) { for (TypeElement annotation : annotations) { for (Element element : roundEnv.getElementsAnnotatedWith(annotation)) { if (element.getKind() == ElementKind.CLASS) { checkClassName((TypeElement) element); checkFields((TypeElement) element); checkMethods((TypeElement) element); } } } return true; } // 检查类名是否符合驼峰命名法（首字母大写） private void checkClassName(TypeElement classElement) { String className = classElement.getSimpleName().toString(); if (!Character.isUpperCase(className.charAt(0))) { messager.printMessage(Diagnostic.Kind.ERROR, \\\"类名\\\" + className + \\\"不符合驼峰命名规范，首字母必须大写\\\"); } } // 检查字段是否使用final修饰（常量除外） private void checkFields(TypeElement classElement) { for (Element enclosedElement : classElement.getEnclosedElements()) { if (enclosedElement.getKind() == ElementKind.FIELD) { VariableElement field = (VariableElement) enclosedElement; // 静态常量不需要检查 if (field.getModifiers().contains(Modifier.STATIC) && field.getModifiers().contains(Modifier.FINAL)) { continue; } // 成员变量应使用final修饰 if (!field.getModifiers().contains(Modifier.FINAL)) { messager.printMessage(Diagnostic.Kind.WARNING, \\\"字段\\\" + field.getSimpleName() + \\\"建议使用final修饰\\\"); } } } } // 检查方法名是否符合驼峰命名法（首字母小写） private void checkMethods(TypeElement classElement) { for (Element enclosedElement : classElement.getEnclosedElements()) { if (enclosedElement.getKind() == ElementKind.METHOD) { ExecutableElement method = (ExecutableElement) enclosedElement; // 构造方法不需要检查 if (method.getSimpleName().contentEquals(classElement.getSimpleName())) { continue; } String methodName = method.getSimpleName().toString(); if (!Character.isLowerCase(methodName.charAt(0))) { messager.printMessage(Diagnostic.Kind.ERROR, \\\"方法名\\\" + methodName + \\\"不符合驼峰命名规范，首字母必须小写\\\"); } } } } }\",\"这种编译期检查可以在开发阶段就发现代码规范问题，提高代码质量和团队协作效率。\"]},\"1088\":{\"h\":\"面试专题：SIP机制\"},\"1089\":{\"h\":\"概述\",\"t\":[\"SIP（Session Initiation Protocol）作为IP通信的核心协议，在面试中常涉及协议原理、会话流程、Java开发实践等方面。以下是SIP面试知识体系：\"]},\"1090\":{\"h\":\"核心理论\"},\"1091\":{\"h\":\"1. SIP协议基本概念\",\"t\":[\"SIP是一个基于文本的应用层协议，用于建立、修改和终止多媒体会话。它采用客户端-服务器模型，支持点对点和多方通信。\"]},\"1092\":{\"h\":\"2. SIP消息结构\",\"t\":[\"SIP消息分为请求消息和响应消息，请求消息包含方法（如INVITE、ACK、BYE等），响应消息包含状态码。\",\"// SIP请求消息示例 String inviteRequest = \\\"INVITE sip:alice@example.com SIP/2.0\\\\r\\\\n\\\" + \\\"Via: SIP/2.0/UDP client.example.com:5060;branch=z9hG4bK776asdhds\\\\r\\\\n\\\" + \\\"To: Alice <sip:alice@example.com>\\\\r\\\\n\\\" + \\\"From: Bob <sip:bob@example.com>;tag=1928301774\\\\r\\\\n\\\" + \\\"Call-ID: a84b4c76e66710@client.example.com\\\\r\\\\n\\\" + \\\"CSeq: 314159 INVITE\\\\r\\\\n\\\" + \\\"Contact: <sip:bob@client.example.com:5060>\\\\r\\\\n\\\" + \\\"Content-Type: application/sdp\\\\r\\\\n\\\" + \\\"Content-Length: 142\\\\r\\\\n\\\\r\\\\n\\\" + \\\"v=0\\\\r\\\\n\\\" + \\\"o=bob 2890844526 2890844526 IN IP4 client.example.com\\\\r\\\\n\\\" + \\\"s=Session SDP\\\\r\\\\n\\\" + \\\"c=IN IP4 client.example.com\\\\r\\\\n\\\" + \\\"t=0 0\\\\r\\\\n\\\" + \\\"m=audio 49170 RTP/AVP 0\\\\r\\\\n\\\" + \\\"a=rtpmap:0 PCMU/8000\\\\r\\\\n\\\";\"]},\"1093\":{\"h\":\"代码实践\"},\"1094\":{\"h\":\"1. SIP客户端基本实现\",\"t\":[\"使用JAIN-SIP库实现简单SIP客户端，发送INVITE请求并处理响应：\",\"import javax.sip.*; import javax.sip.address.*; import javax.sip.header.*; import javax.sip.message.*; import java.util.*; /** * SIP客户端示例，演示如何发送INVITE请求 */ public class SipClient implements SipListener { private SipFactory sipFactory; private SipStack sipStack; private SipProvider sipProvider; private AddressFactory addressFactory; private MessageFactory messageFactory; private HeaderFactory headerFactory; private ListeningPoint listeningPoint; private String username = \\\"bob\\\"; private String server = \\\"example.com\\\"; private int port = 5060; public void init() throws Exception { // 初始化SIP工厂 sipFactory = SipFactory.getInstance(); sipFactory.setPathName(\\\"gov.nist\\\"); // 配置SIP栈 Properties properties = new Properties(); properties.setProperty(\\\"javax.sip.STACK_NAME\\\", \\\"SipClientStack\\\"); properties.setProperty(\\\"javax.sip.IP_ADDRESS\\\", \\\"127.0.0.1\\\"); sipStack = sipFactory.createSipStack(properties); // 创建地址、消息和头工厂 addressFactory = sipFactory.createAddressFactory(); messageFactory = sipFactory.createMessageFactory(); headerFactory = sipFactory.createHeaderFactory(); // 创建监听点 listeningPoint = sipStack.createListeningPoint(\\\"127.0.0.1\\\", port, \\\"udp\\\"); // 创建SIP提供者 sipProvider = sipStack.createSipProvider(listeningPoint); sipProvider.addSipListener(this); } /** * 发送INVITE请求 */ public void sendInvite(String toUser) throws Exception { // 创建请求URI SipURI requestURI = addressFactory.createSipURI(toUser, server); // 创建To头 Address toAddress = addressFactory.createAddress(\\\"sip:\\\" + toUser + \\\"@\\\" + server); ToHeader toHeader = headerFactory.createToHeader(toAddress, null); // 创建From头 Address fromAddress = addressFactory.createAddress(\\\"sip:\\\" + username + \\\"@\\\" + server); FromHeader fromHeader = headerFactory.createFromHeader(fromAddress, \\\"client-tag-12345\\\"); // 创建Call-ID头 CallIdHeader callIdHeader = sipProvider.getNewCallId(); // 创建CSeq头 CSeqHeader cSeqHeader = headerFactory.createCSeqHeader(1L, Request.INVITE); // 创建Via头 ViaHeader viaHeader = headerFactory.createViaHeader(\\\"127.0.0.1\\\", port, \\\"udp\\\", \\\"z9hG4bK776asdhds\\\"); List<ViaHeader> viaHeaders = new ArrayList<>(); viaHeaders.add(viaHeader); // 创建Max-Forwards头 MaxForwardsHeader maxForwardsHeader = headerFactory.createMaxForwardsHeader(70); // 创建INVITE请求 Request inviteRequest = messageFactory.createRequest( requestURI, Request.INVITE, callIdHeader, cSeqHeader, fromHeader, toHeader, viaHeaders, maxForwardsHeader ); // 添加Contact头 Address contactAddress = addressFactory.createAddress(\\\"sip:\\\" + username + \\\"@127.0.0.1:\\\" + port); ContactHeader contactHeader = headerFactory.createContactHeader(contactAddress); inviteRequest.addHeader(contactHeader); // 添加Content-Type头 ContentTypeHeader contentTypeHeader = headerFactory.createContentTypeHeader(\\\"application\\\", \\\"sdp\\\"); inviteRequest.setContentLength(headerFactory.createContentLengthHeader(0)); // 发送请求 ClientTransaction clientTransaction = sipProvider.getNewClientTransaction(inviteRequest); clientTransaction.sendRequest(); } // 实现SipListener接口的方法（省略） @Override public void processRequest(RequestEvent requestEvent) {} @Override public void processResponse(ResponseEvent responseEvent) { System.out.println(\\\"Received response: \\\" + responseEvent.getResponse().getStatusLine()); } @Override public void processTimeout(TimeoutEvent timeoutEvent) {} @Override public void processIOException(IOExceptionEvent exceptionEvent) {} @Override public void processTransactionTerminated(TransactionTerminatedEvent transactionTerminatedEvent) {} @Override public void processDialogTerminated(DialogTerminatedEvent dialogTerminatedEvent) {} public static void main(String[] args) throws Exception { SipClient client = new SipClient(); client.init(); client.sendInvite(\\\"alice\\\"); // 保持程序运行 Thread.sleep(60000); } }\"]},\"1095\":{\"h\":\"2. SIP消息解析工具类\",\"t\":[\"import javax.sip.message.Request; import javax.sip.message.Response; import java.text.ParseException; /** * SIP消息解析工具类 */ public class SipMessageParser { /** * 解析SIP请求消息 */ public static void parseRequest(String requestString) throws ParseException { // 实际项目中使用SIP库解析，此处简化处理 String[] lines = requestString.split(\\\"\\\\r\\\\n\\\"); if (lines.length == 0) { throw new ParseException(\\\"Empty SIP request\\\", 0); } // 解析请求行 String[] requestLine = lines[0].split(\\\" \\\"); if (requestLine.length != 3) { throw new ParseException(\\\"Invalid request line: \\\" + lines[0], 0); } String method = requestLine[0]; String requestUri = requestLine[1]; String sipVersion = requestLine[2]; System.out.println(\\\"SIP Request:\\\\n\\\" + \\\"Method: \\\" + method + \\\"\\\\n\\\" + \\\"Request URI: \\\" + requestUri + \\\"\\\\n\\\" + \\\"SIP Version: \\\" + sipVersion); // 解析头部（简化版） for (int i = 1; i < lines.length; i++) { if (lines[i].trim().isEmpty()) break; String[] header = lines[i].split(\\\": \\\", 2); if (header.length == 2) { System.out.println(header[0] + \\\": \\\" + header[1]); } } } }\"]},\"1096\":{\"h\":\"设计思想\"},\"1097\":{\"h\":\"1. SIP协议设计原则\",\"t\":[\"SIP协议的设计遵循以下核心原则，这些原则使其成为IP通信领域的理想选择：\"]},\"1098\":{\"h\":\"（1）简洁性\",\"t\":[\"SIP采用文本格式而非二进制格式，简化了协议的实现和调试。消息结构清晰，由起始行、头部和消息体组成，类似于HTTP协议，降低了学习和使用门槛。\"]},\"1099\":{\"h\":\"（2）模块化\",\"t\":[\"SIP专注于会话的建立、修改和终止，而将媒体传输交给RTP/RTCP协议处理。这种模块化设计使SIP能够灵活适应不同的媒体类型和应用场景。\"]},\"1100\":{\"h\":\"（3）无状态性\",\"t\":[\"SIP服务器（除了状态代理服务器）通常是无状态的，这意味着服务器不需要保存会话状态信息，提高了系统的可扩展性和容错能力。\"]},\"1101\":{\"h\":\"2. SIP与其他协议的对比\",\"t\":[\"与传统的H.323协议相比，SIP具有明显优势：\",\"特性\",\"SIP\",\"H.323\",\"协议类型\",\"文本型\",\"二进制型\",\"复杂度\",\"低\",\"高\",\"扩展性\",\"强\",\"弱\",\"互联网适应性\",\"好\",\"一般\",\"实现难度\",\"低\",\"高\"]},\"1102\":{\"h\":\"避坑指南\"},\"1103\":{\"h\":\"1. 网络环境问题\"},\"1104\":{\"h\":\"（1）NAT穿透问题\",\"t\":[\"SIP客户端位于NAT后面时，可能导致外部无法访问内部IP和端口。解决方案包括：\",\"使用STUN/TURN服务器获取公网地址\",\"在SIP消息中正确设置Contact头和Via头\",\"采用ICE（Interactive Connectivity Establishment）协议\",\"// 使用STUN服务器获取公网地址示例 public String getPublicAddress(String stunServer, int stunPort) throws Exception { StunAddress stunAddress = new StunAddress(InetAddress.getByName(stunServer), stunPort); StunClient stunClient = new StunClient(stunAddress); StunMessage response = stunClient.testBinding(); return response.getAddress().getHostAddress(); }\"]},\"1105\":{\"h\":\"（2）防火墙限制\",\"t\":[\"防火墙可能阻止SIP信令（通常是UDP 5060端口）和媒体流。解决方案：\",\"配置防火墙开放相关端口\",\"使用TCP协议代替UDP（更易穿透防火墙）\",\"采用端口范围规划，减少端口阻塞风险\"]},\"1106\":{\"h\":\"2. 协议实现问题\"},\"1107\":{\"h\":\"（1）消息解析异常\",\"t\":[\"SIP消息格式错误或不完整会导致解析失败。建议：\",\"使用成熟的SIP库（如JAIN-SIP、Mobicents）而非手动解析\",\"严格验证消息格式，处理异常情况\",\"记录详细日志便于调试\"]},\"1108\":{\"h\":\"（2）事务状态管理\",\"t\":[\"SIP事务状态复杂，错误的状态管理会导致会话异常。关键点：\",\"正确实现INVITE事务的三次握手\",\"处理超时重传机制\",\"区分事务状态和对话状态\"]},\"1109\":{\"h\":\"深度思考题\"},\"1110\":{\"h\":\"1. 设计一个支持百万级并发的SIP服务器需要考虑哪些关键技术点？\",\"t\":[\"思考题回答： 设计高并发SIP服务器需从协议处理、架构设计和性能优化三个维度综合考虑：\"]},\"1111\":{\"h\":\"（1）协议处理层优化\",\"t\":[\"异步IO模型：采用Netty等NIO框架，通过Reactor模式处理大量并发连接\",\"连接池管理：复用SIP连接，减少TCP握手开销\",\"消息解析优化：使用零拷贝技术和内存池减少GC压力\",\"// Netty SIP服务器初始化示例 public class HighPerformanceSipServer { private final int port; private EventLoopGroup bossGroup; private EventLoopGroup workerGroup; public HighPerformanceSipServer(int port) { this.port = port; // 根据CPU核心数配置线程池 this.bossGroup = new NioEventLoopGroup(1); this.workerGroup = new NioEventLoopGroup(Runtime.getRuntime().availableProcessors() * 2); } public void start() throws Exception { try { ServerBootstrap b = new ServerBootstrap(); b.group(bossGroup, workerGroup) .channel(NioServerSocketChannel.class) .childHandler(new ChannelInitializer<SocketChannel>() { @Override public void initChannel(SocketChannel ch) throws Exception { ChannelPipeline pipeline = ch.pipeline(); // 添加SIP消息编解码器 pipeline.addLast(new SipMessageDecoder()); pipeline.addLast(new SipMessageEncoder()); // 添加业务处理器 pipeline.addLast(new SipServerHandler()); } }) .option(ChannelOption.SO_BACKLOG, 1024) .childOption(ChannelOption.SO_KEEPALIVE, true) // 启用TCP_NODELAY减少延迟 .childOption(ChannelOption.TCP_NODELAY, true); // 绑定端口并启动服务 ChannelFuture f = b.bind(port).sync(); System.out.println(\\\"SIP server started on port \\\" + port); f.channel().closeFuture().sync(); } finally { workerGroup.shutdownGracefully(); bossGroup.shutdownGracefully(); } } }\"]},\"1112\":{\"h\":\"（2）架构设计要点\",\"t\":[\"水平扩展：采用无状态设计，通过负载均衡器分发请求\",\"分层架构：分离信令处理、媒体控制和业务逻辑\",\"分布式存储：使用Redis等存储会话状态，支持集群扩展\"]},\"1113\":{\"h\":\"（3）性能优化策略\",\"t\":[\"批处理机制：对相似请求进行批处理，减少系统调用\",\"内存管理：使用对象池和直接内存，减少GC频率\",\"监控与调优：实时监控连接数、消息吞吐量和响应时间\"]},\"1114\":{\"h\":\"2. 如何解决SIP协议在移动网络环境下的可靠性问题？\",\"t\":[\"思考题回答： 移动网络的高延迟、高丢包和频繁切换特性对SIP协议提出挑战，解决方案包括：\"]},\"1115\":{\"h\":\"（1）信令优化\",\"t\":[\"消息压缩：对SIP消息进行压缩，减少传输带宽\",\"重传策略：自适应调整重传间隔，避免网络拥塞\",\"心跳机制：定期发送OPTIONS消息检测连接状态\"]},\"1116\":{\"h\":\"（2）会话保持\",\"t\":[\"会话迁移：支持终端在不同接入点间切换时保持会话\",\"短会话设计：将长会话拆分为多个短会话，降低中断影响\",\"媒体流冗余：采用FEC（前向纠错）技术提高媒体传输可靠性\"]},\"1117\":{\"h\":\"（3）网络适配\",\"t\":[\"接入感知：根据网络类型（4G/5G/WiFi）动态调整协议参数\",\"边缘计算：将SIP服务器部署在网络边缘，减少传输延迟\",\"多路径传输：同时使用多个网络接口传输信令和媒体\"]},\"1118\":{\"h\":\"面试专题：并发编程\"},\"1119\":{\"h\":\"概述\",\"t\":[\"本章节汇总了Java并发编程艺术中常见的面试问题及解答，涵盖了并发基础、线程安全、锁机制、并发容器、线程池等核心知识点。这些问题不仅有助于面试准备，也能帮助开发者梳理并发编程的知识体系，加深对并发原理的理解。\"]},\"1120\":{\"h\":\"知识要点\"},\"1121\":{\"h\":\"1. 并发基础概念\"},\"1122\":{\"h\":\"1.1 什么是线程和进程？它们的区别是什么？\",\"t\":[\"线程是进程的一个执行单元，是操作系统调度的基本单位。进程是程序的一次执行过程，是系统进行资源分配和调度的一个独立单位。\",\"区别：\",\"进程是资源分配的基本单位，线程是调度的基本单位\",\"进程有自己的内存空间，线程共享进程的内存空间\",\"进程间通信需要借助操作系统，线程间通信可以直接共享内存\",\"进程的创建和销毁成本高，线程的创建和销毁成本低\"]},\"1123\":{\"h\":\"1.2 什么是并发和并行？\",\"t\":[\"并发是指多个任务在同一时间段内交替执行，看起来像是同时进行；并行是指多个任务在同一时间点同时执行。\",\"// 并发示例：两个线程交替执行 Thread t1 = new Thread(() -> { for (int i = 0; i < 100; i++) { System.out.println(\\\"Thread 1: \\\" + i); } }); Thread t2 = new Thread(() -> { for (int i = 0; i < 100; i++) { System.out.println(\\\"Thread 2: \\\" + i); } }); t1.start(); t2.start();\"]},\"1124\":{\"h\":\"2. 线程安全\"},\"1125\":{\"h\":\"2.1 什么是线程安全？如何实现线程安全？\",\"t\":[\"线程安全是指多个线程同时访问一个共享资源时，不会导致数据不一致或其他异常情况。实现线程安全的方式包括：\",\"使用 synchronized 关键字\",\"使用 ReentrantLock 等显式锁\",\"使用 volatile 关键字\",\"使用并发容器\",\"使用原子类\",\"// 使用 synchronized 实现线程安全 public class Counter { private int count = 0; public synchronized void increment() { count++; } public synchronized int getCount() { return count; } }\"]},\"1126\":{\"h\":\"2.2 什么是原子操作？Java 中的原子类有哪些？\",\"t\":[\"原子操作是指不可被中断的操作，要么全部执行完成，要么全部不执行。Java 中的原子类包括 AtomicInteger、AtomicLong、AtomicBoolean 等。\",\"// 使用 AtomicInteger 实现线程安全的计数 AtomicInteger atomicCount = new AtomicInteger(0); // 原子递增 atomicCount.incrementAndGet(); // 原子获取 int currentCount = atomicCount.get();\"]},\"1127\":{\"h\":\"3. 锁机制\"},\"1128\":{\"h\":\"3.1 什么是死锁？如何避免死锁？\",\"t\":[\"死锁是指两个或多个线程互相持有对方需要的锁，导致它们都无法继续执行的情况。避免死锁的方法包括：\",\"按顺序获取锁\",\"超时释放锁\",\"使用 Lock 而不是 synchronized\",\"减少锁的持有时间\"]},\"1129\":{\"h\":\"3.2 synchronized 和 ReentrantLock 的区别是什么？\",\"t\":[\"synchronized 是关键字，ReentrantLock 是类\",\"ReentrantLock 可以实现公平锁，synchronized 只能是非公平锁\",\"ReentrantLock 可以设置超时，synchronized 不能\",\"ReentrantLock 可以中断，synchronized 不能\",\"ReentrantLock 可以使用 Condition 实现更精细的线程协作\",\"// 使用 ReentrantLock ReentrantLock lock = new ReentrantLock(); lock.lock(); try { // 临界区代码 } finally { lock.unlock(); }\"]},\"1130\":{\"h\":\"4. 并发容器\"},\"1131\":{\"h\":\"4.1 并发容器和普通容器的区别是什么？\",\"t\":[\"并发容器是线程安全的，可以被多个线程同时访问；普通容器不是线程安全的，需要额外的同步措施。\"]},\"1132\":{\"h\":\"4.2 Java 中的并发容器有哪些？\",\"t\":[\"ConcurrentHashMap：线程安全的 HashMap\",\"CopyOnWriteArrayList：线程安全的 ArrayList，适合读多写少的场景\",\"ConcurrentLinkedQueue：线程安全的队列\",\"BlockingQueue：阻塞队列，支持线程间的协作\",\"// 使用 ConcurrentHashMap ConcurrentHashMap<String, Integer> map = new ConcurrentHashMap<>(); // 线程安全的操作 map.put(\\\"key\\\", 1); map.get(\\\"key\\\");\"]},\"1133\":{\"h\":\"5. 线程池\"},\"1134\":{\"h\":\"5.1 为什么要使用线程池？\",\"t\":[\"减少线程的创建和销毁成本\",\"控制线程的数量，避免资源耗尽\",\"提高线程的复用率\",\"提供任务排队和管理的机制\"]},\"1135\":{\"h\":\"5.2 Java 中的线程池有哪些类型？\",\"t\":[\"FixedThreadPool：固定大小的线程池\",\"CachedThreadPool：可缓存的线程池\",\"ScheduledThreadPool：支持定时和周期性任务的线程池\",\"SingleThreadExecutor：单线程的线程池\",\"// 创建固定大小的线程池 ExecutorService executor = Executors.newFixedThreadPool(5); // 提交任务 executor.submit(() -> { // 任务代码 }); // 关闭线程池 executor.shutdown();\"]},\"1136\":{\"h\":\"知识扩展\"},\"1137\":{\"h\":\"设计思想\",\"t\":[\"并发编程的核心设计思想是在保证线程安全的前提下，提高程序的执行效率和吞吐量。这需要开发者平衡线程安全和性能之间的关系，避免过度同步导致的性能问题，同时也要确保程序的正确性。\"]},\"1138\":{\"h\":\"避坑指南\",\"t\":[\"避免过度同步：只在必要的代码段上加锁，减少锁的持有时间\",\"避免使用全局锁：尽量使用细粒度的锁，提高并发性能\",\"注意可见性问题：使用 volatile 或其他机制确保变量的可见性\",\"避免线程局部变量泄漏：及时清理 ThreadLocal 变量\",\"注意线程池的配置：根据实际需求选择合适的线程池类型和大小\"]},\"1139\":{\"h\":\"深度思考题\",\"t\":[\"思考题：什么是ABA问题？如何解决ABA问题？\",\"** 思考题回答**： ABA问题是指在并发环境中，线程A读取了一个值为A的变量，线程B将该变量的值从A修改为B，然后又从B修改回A，线程A无法察觉这个变化。ABA问题会导致线程A做出错误的判断。\",\"解决ABA问题的方法包括：\",\"使用 AtomicStampedReference 类，它可以记录变量的版本号\",\"使用 AtomicMarkableReference 类，它可以标记变量是否被修改过\",\"例如，使用 AtomicStampedReference：\",\"AtomicStampedReference<Integer> ref = new AtomicStampedReference<>(1, 0); // 获取当前值和版本号 int currentValue = ref.getReference(); int currentStamp = ref.getStamp(); // 尝试更新，只有当值和版本号都匹配时才会成功 ref.compareAndSet(currentValue, 2, currentStamp, currentStamp + 1);\",\"** 思考题**：什么是虚假唤醒？如何避免虚假唤醒？\",\"** 思考题回答**： 虚假唤醒是指线程在没有被其他线程显式通知的情况下，从等待状态中苏醒过来。虚假唤醒可能是由于操作系统的调度原因或者其他线程的中断导致的。\",\"避免虚假唤醒的方法是在条件判断中使用循环而不是if语句，这样即使线程被虚假唤醒，也会重新检查条件，如果条件不满足，就会继续等待。\",\"例如：\",\"synchronized (obj) { while (!condition) { obj.wait(); } // 执行代码 }\",\"通过这种方式，即使线程被虚假唤醒，也会重新检查条件，确保只有在条件满足的情况下才会继续执行。\"]},\"1140\":{\"h\":\"面试专题：JVM原理\"},\"1141\":{\"h\":\"概述\",\"t\":[\"JVM（Java虚拟机）是Java语言的核心组件之一，它负责将Java字节码转换为机器码并执行。本专题将系统梳理面试中常见的JVM原理问题，涵盖内存结构、类加载机制、垃圾回收、性能优化等核心知识点。\"]},\"1142\":{\"h\":\"知识要点\"},\"1143\":{\"h\":\"1. 内存结构\",\"t\":[\"JVM内存结构主要包括以下几个部分：\"]},\"1144\":{\"h\":\"堆\",\"t\":[\"堆是JVM中最大的内存区域，用于存储对象实例和数组。堆可以分为新生代和老年代：\",\"public class HeapDemo { public static void main(String[] args) { // 创建对象，存储在堆中 Object obj = new Object(); // 创建数组，存储在堆中 int[] arr = new int[10]; } }\"]},\"1145\":{\"h\":\"栈\",\"t\":[\"栈用于存储方法执行时的局部变量、操作数栈、动态链接和方法返回地址。每个线程都有自己的栈：\",\"public class StackDemo { public static void main(String[] args) { // 局部变量，存储在栈中 int a = 10; // 调用方法，会创建新的栈帧 method(); } public static void method() { int b = 20; } }\"]},\"1146\":{\"h\":\"2. 类加载机制\",\"t\":[\"类加载过程包括加载、链接（验证、准备、解析）和初始化三个阶段：\"]},\"1147\":{\"h\":\"类加载器\",\"t\":[\"Java提供了三层类加载器：\",\"public class ClassLoaderDemo { public static void main(String[] args) { // 获取系统类加载器 ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader(); System.out.println(\\\"系统类加载器: \\\" + systemClassLoader); // 获取扩展类加载器 ClassLoader extensionClassLoader = systemClassLoader.getParent(); System.out.println(\\\"扩展类加载器: \\\" + extensionClassLoader); // 获取引导类加载器 ClassLoader bootstrapClassLoader = extensionClassLoader.getParent(); System.out.println(\\\"引导类加载器: \\\" + bootstrapClassLoader); } }\"]},\"1148\":{\"h\":\"3. 垃圾回收\",\"t\":[\"垃圾回收是JVM的重要功能，用于回收不再使用的对象内存。\"]},\"1149\":{\"h\":\"垃圾判断算法\",\"t\":[\"引用计数法：通过计算对象的引用数量来判断对象是否可达\",\"可达性分析：通过从GC Roots出发，判断对象是否可达\"]},\"1150\":{\"h\":\"垃圾回收算法\",\"t\":[\"标记-清除算法：标记需要回收的对象，然后清除\",\"复制算法：将内存分为两半，只使用其中一半，当这一半满时，将存活对象复制到另一半\",\"标记-整理算法：标记存活对象，然后将存活对象向一端移动\",\"public class GCDemo { public static void main(String[] args) { // 创建大量对象，触发垃圾回收 for (int i = 0; i < 10000; i++) { Object obj = new Object(); } } }\"]},\"1151\":{\"h\":\"4. 性能优化\",\"t\":[\"JVM性能优化主要包括以下几个方面：\",\"内存分配优化：调整堆大小、新生代和老年代的比例\",\"垃圾回收器选择：根据应用特点选择合适的垃圾回收器\",\"代码优化：避免创建过多的对象、减少对象的存活时间\",\"public class PerformanceDemo { // 避免频繁创建对象 private static final String CONSTANT = \\\"constant\\\"; public static void main(String[] args) { // 使用StringBuilder而不是String拼接 StringBuilder sb = new StringBuilder(); for (int i = 0; i < 1000; i++) { sb.append(i); } String result = sb.toString(); } }\"]},\"1152\":{\"h\":\"知识扩展\"},\"1153\":{\"h\":\"设计思想\",\"t\":[\"JVM的设计遵循以下原则：\",\"平台无关性：通过字节码实现一次编写，到处运行\",\"内存管理：自动管理内存，减少内存泄漏的风险\",\"安全性：通过类加载机制和字节码验证确保代码安全\",\"性能优化：通过即时编译等技术提高代码执行效率\"]},\"1154\":{\"h\":\"避坑指南\",\"t\":[\"避免内存泄漏：注意关闭资源，避免长生命周期的对象持有短生命周期对象的引用\",\"避免栈溢出：避免递归调用过深，或者方法内部创建过大的局部变量\",\"避免内存溢出：合理设置堆大小，避免创建过多的大对象\",\"选择合适的垃圾回收器：根据应用特点选择合适的垃圾回收器，如吞吐量优先或响应时间优先\"]},\"1155\":{\"h\":\"深度思考题\",\"t\":[\"思考题： 什么是类加载的双亲委派机制？它有什么优缺点？\",\"** 思考题回答：** 双亲委派机制是指当一个类加载器收到类加载请求时，它首先将请求委托给父类加载器，只有当父类加载器无法加载该类时，才由自己加载。\",\"优点：\",\"避免类的重复加载\",\"确保Java核心库的安全\",\"缺点：\",\"父类加载器无法访问子类加载器加载的类\",\"灵活性不足，无法实现一些特殊的类加载需求\",\"思考题: 什么是内存溢出和栈溢出？它们有什么区别？\",\"** 思考题回答：** 内存溢出是指堆内存不足，无法创建新的对象；栈溢出是指栈空间不足，通常是由于递归调用过深或方法内部创建过大的局部变量导致的。\",\"区别：\",\"发生的内存区域不同：内存溢出发生在堆中，栈溢出发生在栈中\",\"原因不同：内存溢出通常是由于创建过多的对象或堆大小设置过小导致的；栈溢出通常是由于递归调用过深或方法内部创建过大的局部变量导致的\",\"表现不同：内存溢出会抛出OutOfMemoryError异常；栈溢出会抛出StackOverflowError异常\"]},\"1156\":{\"h\":\"面试专题：数组与字符串\"},\"1157\":{\"h\":\"概述\",\"t\":[\"数组与字符串是Java面试中的基础重点内容，涉及内存管理、算法实现和性能优化等多个方面。以下是数组与字符串相关的知识体系：\"]},\"1158\":{\"h\":\"知识要点\"},\"1159\":{\"h\":\"一、数组经典面试题\"},\"1160\":{\"h\":\"1. 数组的初始化与遍历\",\"t\":[\"问题：如何初始化一个int数组并进行遍历？比较不同遍历方式的优缺点。\",\"解答： Java中数组初始化有三种方式，遍历方式包括for循环、增强for循环和Arrays.stream()。\",\"import java.util.Arrays; public class ArrayInitializationExample { public static void main(String[] args) { // 1. 静态初始化 int[] arr1 = {1, 2, 3, 4, 5}; // 2. 动态初始化 int[] arr2 = new int[5]; for (int i = 0; i < arr2.length; i++) { arr2[i] = i + 1; } // 3. 数组工具类初始化 int[] arr3 = new int[5]; Arrays.fill(arr3, 0); // 遍历方式1：普通for循环 System.out.println(\\\"普通for循环遍历：\\\"); for (int i = 0; i < arr1.length; i++) { System.out.print(arr1[i] + \\\" \\\"); } // 遍历方式2：增强for循环 System.out.println(\\\"\\\\n增强for循环遍历：\\\"); for (int num : arr2) { System.out.print(num + \\\" \\\"); } // 遍历方式3：Stream API System.out.println(\\\"\\\\nStream API遍历：\\\"); Arrays.stream(arr3).forEach(num -> System.out.print(num + \\\" \\\")); } }\",\"关键要点：\",\"普通for循环可以获取索引，适用于需要修改数组元素的场景\",\"增强for循环代码简洁，但无法获取索引\",\"Stream API适合进行复杂的数据处理和转换\"]},\"1161\":{\"h\":\"2. 数组排序与查找\",\"t\":[\"问题：实现数组的冒泡排序，并使用二分查找法查找指定元素。\",\"解答：\",\"public class ArraySortAndSearch { /** * 冒泡排序算法 * @param arr 待排序数组 */ public static void bubbleSort(int[] arr) { if (arr == null || arr.length <= 1) { return; } for (int i = 0; i < arr.length - 1; i++) { boolean swapped = false; for (int j = 0; j < arr.length - 1 - i; j++) { if (arr[j] > arr[j + 1]) { // 交换元素 int temp = arr[j]; arr[j] = arr[j + 1]; arr[j + 1] = temp; swapped = true; } } // 如果没有交换，说明数组已经有序 if (!swapped) { break; } } } /** * 二分查找算法 * @param arr 已排序数组 * @param target 目标元素 * @return 目标元素索引，未找到返回-1 */ public static int binarySearch(int[] arr, int target) { if (arr == null || arr.length == 0) { return -1; } int left = 0; int right = arr.length - 1; while (left <= right) { int mid = left + (right - left) / 2; // 避免溢出 if (arr[mid] == target) { return mid; } else if (arr[mid] < target) { left = mid + 1; } else { right = mid - 1; } } return -1; } public static void main(String[] args) { int[] arr = {5, 2, 9, 3, 7}; bubbleSort(arr); System.out.println(\\\"排序后数组：\\\"); for (int num : arr) { System.out.print(num + \\\" \\\"); } int target = 7; int index = binarySearch(arr, target); System.out.println(\\\"\\\\n元素\\\" + target + \\\"的索引：\\\" + index); } }\",\"关键要点：\",\"冒泡排序时间复杂度O(n²)，空间复杂度O(1)\",\"二分查找仅适用于有序数组，时间复杂度O(log n)\",\"计算中间索引时使用left + (right - left) / 2避免整数溢出\"]},\"1162\":{\"h\":\"3. 二维数组的螺旋遍历\",\"t\":[\"问题：如何顺时针螺旋遍历一个二维数组？\",\"解答：\",\"import java.util.ArrayList; import java.util.List; public class SpiralMatrix { /** * 顺时针螺旋遍历二维数组 * @param matrix 二维数组 * @return 遍历结果列表 */ public static List<Integer> spiralOrder(int[][] matrix) { List<Integer> result = new ArrayList<>(); if (matrix == null || matrix.length == 0 || matrix[0].length == 0) { return result; } int top = 0; int bottom = matrix.length - 1; int left = 0; int right = matrix[0].length - 1; while (top <= bottom && left <= right) { // 从左到右遍历上边界 for (int i = left; i <= right; i++) { result.add(matrix[top][i]); } top++; // 从上到下遍历右边界 for (int i = top; i <= bottom; i++) { result.add(matrix[i][right]); } right--; // 从右到左遍历下边界（需要检查是否还有行） if (top <= bottom) { for (int i = right; i >= left; i--) { result.add(matrix[bottom][i]); } bottom--; } // 从下到上遍历左边界（需要检查是否还有列） if (left <= right) { for (int i = bottom; i >= top; i--) { result.add(matrix[i][left]); } left++; } } return result; } public static void main(String[] args) { int[][] matrix = { {1, 2, 3}, {4, 5, 6}, {7, 8, 9} }; List<Integer> result = spiralOrder(matrix); System.out.println(\\\"螺旋遍历结果：\\\" + result); } }\",\"关键要点：\",\"使用四个边界变量控制遍历范围\",\"每完成一行或一列遍历后，调整相应的边界\",\"注意处理单行或单列的特殊情况\"]},\"1163\":{\"h\":\"二、字符串经典面试题\"},\"1164\":{\"h\":\"1. 字符串反转\",\"t\":[\"问题：实现字符串反转的几种方式，并比较它们的性能。\",\"解答：\",\"public class StringReverse { /** * 使用字符数组反转 * @param str 输入字符串 * @return 反转后的字符串 */ public static String reverseWithCharArray(String str) { if (str == null || str.isEmpty()) { return str; } char[] chars = str.toCharArray(); int left = 0; int right = chars.length - 1; while (left < right) { // 交换字符 char temp = chars[left]; chars[left] = chars[right]; chars[right] = temp; left++; right--; } return new String(chars); } /** * 使用StringBuilder反转 * @param str 输入字符串 * @return 反转后的字符串 */ public static String reverseWithStringBuilder(String str) { if (str == null || str.isEmpty()) { return str; } return new StringBuilder(str).reverse().toString(); } /** * 使用递归反转 * @param str 输入字符串 * @return 反转后的字符串 */ public static String reverseWithRecursion(String str) { if (str == null || str.length() <= 1) { return str; } return reverseWithRecursion(str.substring(1)) + str.charAt(0); } public static void main(String[] args) { String str = \\\"Hello World\\\"; System.out.println(\\\"字符数组反转：\\\" + reverseWithCharArray(str)); System.out.println(\\\"StringBuilder反转：\\\" + reverseWithStringBuilder(str)); System.out.println(\\\"递归反转：\\\" + reverseWithRecursion(str)); } }\",\"性能比较：\",\"字符数组方式：效率最高，时间复杂度O(n)，空间复杂度O(n)\",\"StringBuilder方式：简洁高效，内部也是使用字符数组实现\",\"递归方式：代码简洁但效率最低，存在栈溢出风险，不适合长字符串\"]},\"1165\":{\"h\":\"2. 判断字符串是否为回文\",\"t\":[\"问题：判断一个字符串是否为回文（正读和反读都一样），忽略大小写和非字母字符。\",\"解答：\",\"public class PalindromeChecker { /** * 判断字符串是否为回文 * @param s 输入字符串 * @return 是否为回文 */ public static boolean isPalindrome(String s) { if (s == null || s.isEmpty()) { return true; } int left = 0; int right = s.length() - 1; while (left < right) { // 找到左侧第一个字母或数字 while (left < right && !Character.isLetterOrDigit(s.charAt(left))) { left++; } // 找到右侧第一个字母或数字 while (left < right && !Character.isLetterOrDigit(s.charAt(right))) { right--; } // 比较字符（忽略大小写） if (Character.toLowerCase(s.charAt(left)) != Character.toLowerCase(s.charAt(right))) { return false; } left++; right--; } return true; } public static void main(String[] args) { String s1 = \\\"A man, a plan, a canal: Panama\\\"; String s2 = \\\"race a car\\\"; System.out.println(\\\"s1是否为回文：\\\" + isPalindrome(s1)); // true System.out.println(\\\"s2是否为回文：\\\" + isPalindrome(s2)); // false } }\",\"关键要点：\",\"使用双指针从两端向中间遍历\",\"跳过非字母数字字符\",\"统一转换为小写（或大写）进行比较\"]},\"1166\":{\"h\":\"3. 字符串中的第一个唯一字符\",\"t\":[\"问题：找到字符串中第一个不重复的字符，并返回其索引。如果不存在，则返回-1。\",\"解答：\",\"public class FirstUniqueChar { /** * 找到字符串中第一个不重复的字符 * @param s 输入字符串 * @return 第一个不重复字符的索引，不存在返回-1 */ public static int firstUniqChar(String s) { if (s == null || s.isEmpty()) { return -1; } // 存储字符出现的次数 int[] count = new int[26]; // 第一次遍历：统计每个字符出现的次数 for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); count[c - 'a']++; } // 第二次遍历：找到第一个出现次数为1的字符 for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); if (count[c - 'a'] == 1) { return i; } } return -1; } public static void main(String[] args) { String s1 = \\\"leetcode\\\"; String s2 = \\\"loveleetcode\\\"; System.out.println(\\\"s1第一个唯一字符索引：\\\" + firstUniqChar(s1)); // 0 System.out.println(\\\"s2第一个唯一字符索引：\\\" + firstUniqChar(s2)); // 2 } }\",\"关键要点：\",\"使用数组作为哈希表，存储每个字符的出现次数\",\"时间复杂度O(n)，空间复杂度O(1)（因为字符集大小固定）\",\"两次遍历：第一次统计，第二次查找\"]},\"1167\":{\"h\":\"知识扩展\"},\"1168\":{\"h\":\"设计思想\",\"t\":[\"数组设计思想：\",\"数组是一种线性数据结构，使用连续的内存空间存储相同类型的数据\",\"随机访问时间复杂度为O(1)，插入和删除时间复杂度为O(n)\",\"Java中的数组是定长的，一旦创建无法改变大小\",\"字符串设计思想：\",\"String类被设计为不可变的，保证了线程安全和哈希值的缓存效率\",\"字符串常量池减少了内存开销，实现了字符串的复用\",\"StringBuilder和StringBuffer用于处理可变字符串，分别适用于单线程和多线程环境\"]},\"1169\":{\"h\":\"避坑指南\",\"t\":[\"数组常见问题：\",\"数组下标越界异常（ArrayIndexOutOfBoundsException）\",\"空指针异常（NullPointerException）\",\"数组复制时的浅拷贝问题\",\"二维数组中各行长度可以不同的特性\",\"字符串常见问题：\",\"使用\\\"==\\\"比较字符串内容（应使用equals()方法）\",\"频繁字符串拼接导致的性能问题（应使用StringBuilder）\",\"忽略String.intern()方法的使用场景\",\"字符串常量池的工作原理理解不清\"]},\"1170\":{\"h\":\"深度思考题\",\"t\":[\"思考题1：如何在不使用额外空间的情况下，判断一个数组中是否存在重复元素？\",\"思考题回答： 可以先对数组进行排序（时间复杂度O(n log n)），然后遍历数组，比较相邻元素是否相等。如果存在相等的相邻元素，则说明有重复元素。\",\"public static boolean containsDuplicate(int[] nums) { Arrays.sort(nums); for (int i = 0; i < nums.length - 1; i++) { if (nums[i] == nums[i + 1]) { return true; } } return false; }\",\"思考题2：如何判断两个字符串是否互为变位词（Anagram）？\",\"思考题回答： 变位词是指两个字符串包含相同的字符，但顺序不同。可以通过以下步骤判断：\",\"检查两个字符串长度是否相同\",\"使用数组统计每个字符出现的次数\",\"比较两个数组是否相同\",\"public static boolean isAnagram(String s, String t) { if (s.length() != t.length()) { return false; } int[] count = new int[26]; for (int i = 0; i < s.length(); i++) { count[s.charAt(i) - 'a']++; count[t.charAt(i) - 'a']--; } for (int num : count) { if (num != 0) { return false; } } return true; }\",\"思考题3：如何找到两个字符串的最长公共前缀？\",\"思考题回答： 可以以第一个字符串为基准，依次与其他字符串比较对应位置的字符，直到找到不匹配的字符或到达某个字符串的末尾。\",\"public static String longestCommonPrefix(String[] strs) { if (strs == null || strs.length == 0) { return \\\"\\\"; } String prefix = strs[0]; for (int i = 1; i < strs.length; i++) { while (strs[i].indexOf(prefix) != 0) { prefix = prefix.substring(0, prefix.length() - 1); if (prefix.isEmpty()) { return \\\"\\\"; } } } return prefix; }\"]},\"1171\":{\"h\":\"面试专题：集合框架\"},\"1172\":{\"h\":\"核心理论\"},\"1173\":{\"h\":\"1.1 集合框架体系结构\",\"t\":[\"Java集合框架主要分为三大体系：Collection、Map和工具类。Collection接口下有List、Set和Queue三大分支，Map接口则提供键值对存储能力。\"]},\"1174\":{\"h\":\"1.2 集合框架核心接口对比\",\"t\":[\"接口\",\"特点\",\"实现类\",\"线程安全\",\"List\",\"有序可重复\",\"ArrayList, LinkedList, Vector\",\"Vector是，其余否\",\"Set\",\"无序不可重复\",\"HashSet, TreeSet, LinkedHashSet\",\"均否\",\"Queue\",\"先进先出\",\"ArrayDeque, LinkedList, PriorityQueue\",\"均否\",\"Map\",\"键值对映射\",\"HashMap, TreeMap, LinkedHashMap\",\"Hashtable是，其余否\"]},\"1175\":{\"h\":\"1.3 面试高频考点分类\",\"t\":[\"基础概念题：集合体系结构、实现原理、特性对比\",\"源码分析题：HashMap、ConcurrentHashMap、ArrayList等实现细节\",\"算法设计题：基于集合的算法实现与优化\",\"性能分析题：时间/空间复杂度分析、性能优化策略\",\"并发编程题：线程安全集合、并发修改异常处理\"]},\"1176\":{\"h\":\"代码实践\"},\"1177\":{\"h\":\"2.1 集合初始化与遍历方式\"},\"1178\":{\"h\":\"2.1.1 常见集合初始化\",\"t\":[\"/** * 集合初始化方式对比 * JDK 8及以上版本特性 */ public class CollectionInitialization { public static void main(String[] args) { // 1. 传统初始化方式 List<String> list1 = new ArrayList<>(); list1.add(\\\"Java\\\"); list1.add(\\\"Python\\\"); list1.add(\\\"C++\\\"); // 2. 双括号初始化（匿名内部类，存在内存泄漏风险） List<String> list2 = new ArrayList<String>() {{ add(\\\"Java\\\"); add(\\\"Python\\\"); add(\\\"C++\\\"); }}; // 3. JDK 8 Stream API初始化 List<String> list3 = Stream.of(\\\"Java\\\", \\\"Python\\\", \\\"C++\\\").collect(Collectors.toList()); // 4. JDK 9+ of()方法（不可变集合） List<String> list4 = List.of(\\\"Java\\\", \\\"Python\\\", \\\"C++\\\"); Set<String> set1 = Set.of(\\\"Java\\\", \\\"Python\\\", \\\"C++\\\"); Map<String, Integer> map1 = Map.of(\\\"Java\\\", 1, \\\"Python\\\", 2, \\\"C++\\\", 3); // 5. Guava库初始化（需引入第三方依赖） List<String> list5 = Lists.newArrayList(\\\"Java\\\", \\\"Python\\\", \\\"C++\\\"); Set<String> set2 = Sets.newHashSet(\\\"Java\\\", \\\"Python\\\", \\\"C++\\\"); Map<String, Integer> map2 = Maps.newHashMap(); } }\"]},\"1179\":{\"h\":\"2.1.2 集合遍历方式性能对比\",\"t\":[\"/** * 集合遍历方式及性能分析 * 结论：ArrayList下标遍历最快，LinkedList迭代器遍历最快 */ public class CollectionTraversal { public static void main(String[] args) { List<String> arrayList = new ArrayList<>(); List<String> linkedList = new LinkedList<>(); // 添加测试数据 for (int i = 0; i < 100000; i++) { arrayList.add(\\\"element\\\" + i); linkedList.add(\\\"element\\\" + i); } // ArrayList遍历方式 long start = System.currentTimeMillis(); // 1. 下标遍历 for (int i = 0; i < arrayList.size(); i++) { String element = arrayList.get(i); } System.out.println(\\\"ArrayList下标遍历: \\\" + (System.currentTimeMillis() - start) + \\\"ms\\\"); // 2. 增强for循环 start = System.currentTimeMillis(); for (String element : arrayList) { // do nothing } System.out.println(\\\"ArrayList增强for循环: \\\" + (System.currentTimeMillis() - start) + \\\"ms\\\"); // 3. 迭代器遍历 start = System.currentTimeMillis(); Iterator<String> iterator = arrayList.iterator(); while (iterator.hasNext()) { String element = iterator.next(); } System.out.println(\\\"ArrayList迭代器遍历: \\\" + (System.currentTimeMillis() - start) + \\\"ms\\\"); // LinkedList遍历方式（测试略，结论：迭代器遍历性能最优） } }\"]},\"1180\":{\"h\":\"2.2 高频面试题实现\"},\"1181\":{\"h\":\"2.2.1 HashMap手写实现（简化版）\",\"t\":[\"/** * 简化版HashMap实现 * 包含put、get核心方法，拉链法解决哈希冲突 */ public class SimpleHashMap<K, V> { // 默认初始容量 private static final int DEFAULT_CAPACITY = 16; // 负载因子 private static final float LOAD_FACTOR = 0.75f; // 数组（桶） private Entry<K, V>[] table; // 元素数量 private int size; @SuppressWarnings(\\\"unchecked\\\") public SimpleHashMap() { table = new Entry[DEFAULT_CAPACITY]; size = 0; } /** * 哈希函数：计算键的哈希值并映射到数组索引 */ private int hash(K key) { return key == null ? 0 : Math.abs(key.hashCode()) % table.length; } /** * 添加键值对 */ public void put(K key, V value) { // 计算哈希值和索引 int index = hash(key); // 遍历链表查找是否存在相同key Entry<K, V> entry = table[index]; while (entry != null) { if ((key == null && entry.key == null) || (key != null && key.equals(entry.key))) { // 键存在，更新值 entry.value = value; return; } entry = entry.next; } // 键不存在，添加新节点（头插法） Entry<K, V> newEntry = new Entry<>(key, value, table[index]); table[index] = newEntry; size++; // 检查是否需要扩容 if (size >= table.length * LOAD_FACTOR) { resize(); } } /** * 获取键对应的值 */ public V get(K key) { int index = hash(key); Entry<K, V> entry = table[index]; while (entry != null) { if ((key == null && entry.key == null) || (key != null && key.equals(entry.key))) { return entry.value; } entry = entry.next; } return null; } /** * 扩容方法 */ @SuppressWarnings(\\\"unchecked\\\") private void resize() { Entry<K, V>[] oldTable = table; int newCapacity = oldTable.length * 2; Entry<K, V>[] newTable = new Entry[newCapacity]; // 重新哈希并转移所有元素 for (int i = 0; i < oldTable.length; i++) { Entry<K, V> entry = oldTable[i]; while (entry != null) { Entry<K, V> next = entry.next; int newIndex = hash(entry.key); entry.next = newTable[newIndex]; newTable[newIndex] = entry; entry = next; } } table = newTable; } /** * 键值对节点类 */ static class Entry<K, V> { K key; V value; Entry<K, V> next; Entry(K key, V value, Entry<K, V> next) { this.key = key; this.value = value; this.next = next; } } // Getter方法 public int size() { return size; } }\"]},\"1182\":{\"h\":\"2.2.2 集合去重与排序\",\"t\":[\"/** * 集合去重与排序综合案例 */ public class CollectionDeduplicationAndSorting { public static void main(String[] args) { // 1. 数组去重并排序 Integer[] numbers = {3, 1, 2, 5, 3, 7, 2, 8, 5}; // 去重 Set<Integer> numberSet = new HashSet<>(Arrays.asList(numbers)); // 排序 List<Integer> sortedList = new ArrayList<>(numberSet); Collections.sort(sortedList); System.out.println(\\\"去重并排序结果: \\\" + sortedList); // [1, 2, 3, 5, 7, 8] // 2. 自定义对象去重与排序 List<Person> persons = Arrays.asList( new Person(\\\"Alice\\\", 25), new Person(\\\"Bob\\\", 30), new Person(\\\"Alice\\\", 25), // 重复对象 new Person(\\\"Charlie\\\", 20) ); // 去重（需重写Person类的equals和hashCode方法） Set<Person> uniquePersons = new HashSet<>(persons); // 排序（按年龄升序，年龄相同按姓名升序） List<Person> sortedPersons = new ArrayList<>(uniquePersons); sortedPersons.sort(Comparator.comparingInt(Person::getAge) .thenComparing(Person::getName)); System.out.println(\\\"自定义对象排序结果: \\\" + sortedPersons); } static class Person { private String name; private int age; public Person(String name, int age) { this.name = name; this.age = age; } // Getters public String getName() { return name; } public int getAge() { return age; } // 重写equals和hashCode方法以支持去重 @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; Person person = (Person) o; return age == person.age && Objects.equals(name, person.name); } @Override public int hashCode() { return Objects.hash(name, age); } @Override public String toString() { return name + \\\"(\\\" + age + \\\")\\\"; } } }\"]},\"1183\":{\"h\":\"设计思想\"},\"1184\":{\"h\":\"3.1 集合框架设计模式应用\"},\"1185\":{\"h\":\"3.1.1 迭代器模式（Iterator）\",\"t\":[\"迭代器模式提供了一种顺序访问集合元素的方法，而无需暴露集合的内部实现。\",\"/** * 迭代器模式在集合框架中的应用 */ public class IteratorPatternDemo { public static void main(String[] args) { List<String> list = new ArrayList<>(Arrays.asList(\\\"A\\\", \\\"B\\\", \\\"C\\\")); Set<String> set = new HashSet<>(Arrays.asList(\\\"X\\\", \\\"Y\\\", \\\"Z\\\")); // 使用迭代器遍历集合 iterateCollection(list.iterator()); iterateCollection(set.iterator()); } /** * 通用迭代器遍历方法 * 体现了迭代器模式的多态性 */ private static void iterateCollection(Iterator<?> iterator) { while (iterator.hasNext()) { System.out.println(iterator.next()); } } }\"]},\"1186\":{\"h\":\"3.1.2 装饰器模式（Decorator）\",\"t\":[\"装饰器模式允许向一个现有对象添加新的功能，同时又不改变其结构。Collections工具类中的synchronizedXXX方法就是典型应用。\",\"/** * 装饰器模式在集合框架中的应用 * 通过Collections.synchronizedList实现线程安全集合 */ public class DecoratorPatternDemo { public static void main(String[] args) { // 创建普通ArrayList List<String> unsafeList = new ArrayList<>(); // 使用装饰器模式包装为线程安全集合 List<String> safeList = Collections.synchronizedList(unsafeList); // 多线程操作安全集合 ExecutorService executor = Executors.newFixedThreadPool(5); for (int i = 0; i < 1000; i++) { int index = i; executor.submit(() -> safeList.add(\\\"element\\\" + index)); } executor.shutdown(); try { executor.awaitTermination(1, TimeUnit.SECONDS); } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(\\\"安全集合大小: \\\" + safeList.size()); // 应该为1000 } }\"]},\"1187\":{\"h\":\"3.2 集合选择策略\",\"t\":[\"在实际开发和面试中，选择合适的集合类型至关重要，需考虑以下因素：\"]},\"1188\":{\"h\":\"避坑指南\"},\"1189\":{\"h\":\"4.1 集合使用常见错误\"},\"1190\":{\"h\":\"4.1.1 ConcurrentModificationException异常\",\"t\":[\"当使用增强for循环遍历集合的同时修改集合结构（添加/删除元素）时，会抛出此异常。\",\"/** * ConcurrentModificationException异常演示与解决方案 */ public class ConcurrentModificationDemo { public static void main(String[] args) { List<String> list = new ArrayList<>(Arrays.asList(\\\"A\\\", \\\"B\\\", \\\"C\\\", \\\"D\\\")); // 错误示例：增强for循环中删除元素 try { for (String element : list) { if (element.equals(\\\"B\\\")) { list.remove(element); // 会抛出ConcurrentModificationException } } } catch (ConcurrentModificationException e) { System.out.println(\\\"捕获异常: \\\" + e.getMessage()); } // 正确解决方案1：使用迭代器 Iterator<String> iterator = list.iterator(); while (iterator.hasNext()) { String element = iterator.next(); if (element.equals(\\\"B\\\")) { iterator.remove(); // 使用迭代器的remove方法 } } System.out.println(\\\"迭代器删除后: \\\" + list); // 正确解决方案2：使用Stream API（JDK 8+） List<String> newList = list.stream() .filter(element -> !element.equals(\\\"C\\\")) .collect(Collectors.toList()); System.out.println(\\\"Stream过滤后: \\\" + newList); } }\"]},\"1191\":{\"h\":\"4.1.2 集合转换与不可变性问题\",\"t\":[\"/** * 集合转换与不可变性问题 */ public class CollectionImmutabilityDemo { public static void main(String[] args) { // 问题1：Arrays.asList返回的List不可修改 List<String> fixedSizeList = Arrays.asList(\\\"A\\\", \\\"B\\\", \\\"C\\\"); try { fixedSizeList.add(\\\"D\\\"); // 会抛出UnsupportedOperationException } catch (UnsupportedOperationException e) { System.out.println(\\\"Arrays.asList返回的列表不可添加元素\\\"); } // 解决方案：包装为可修改的ArrayList List<String> modifiableList = new ArrayList<>(Arrays.asList(\\\"A\\\", \\\"B\\\", \\\"C\\\")); modifiableList.add(\\\"D\\\"); // 正常执行 // 问题2：JDK 9+ List.of()返回的是不可变集合 List<String> immutableList = List.of(\\\"X\\\", \\\"Y\\\", \\\"Z\\\"); try { immutableList.set(0, \\\"W\\\"); // 会抛出UnsupportedOperationException } catch (UnsupportedOperationException e) { System.out.println(\\\"List.of()返回的列表不可修改\\\"); } // 创建真正不可变的集合 List<String> trulyImmutableList = Collections.unmodifiableList(new ArrayList<>(Arrays.asList(\\\"1\\\", \\\"2\\\", \\\"3\\\"))); try { trulyImmutableList.add(\\\"4\\\"); // 会抛出UnsupportedOperationException } catch (UnsupportedOperationException e) { System.out.println(\\\"unmodifiableList返回的列表不可修改\\\"); } } }\"]},\"1192\":{\"h\":\"4.2 性能优化建议\"},\"1193\":{\"h\":\"4.2.1 初始容量设置\",\"t\":[\"为集合设置合适的初始容量可以减少扩容次数，提高性能。\",\"/** * 集合初始容量优化 */ public class CollectionCapacityOptimization { public static void main(String[] args) { // 已知大概元素数量时，指定初始容量 int expectedSize = 10000; // ArrayList：初始容量设置为expectedSize，避免多次扩容 List<String> optimizedList = new ArrayList<>(expectedSize); // HashMap：初始容量设置为(expectedSize / 0.75f) + 1，避免扩容 int initialCapacity = (int) (expectedSize / 0.75f) + 1; Map<String, Integer> optimizedMap = new HashMap<>(initialCapacity); } }\"]},\"1194\":{\"h\":\"4.2.2 集合工具类使用陷阱\",\"t\":[\"/** * 集合工具类使用注意事项 */ public class CollectionUtilsPitfalls { public static void main(String[] args) { // 1. Collections.emptyList()返回的是不可变列表 List<String> emptyList = Collections.emptyList(); try { emptyList.add(\\\"A\\\"); // 抛出UnsupportedOperationException } catch (UnsupportedOperationException e) { System.out.println(\\\"emptyList不可修改\\\"); } // 2. Collections.synchronizedList并非绝对线程安全 List<String> syncList = Collections.synchronizedList(new ArrayList<>()); // 迭代操作仍需手动加锁 synchronized (syncList) { Iterator<String> iterator = syncList.iterator(); while (iterator.hasNext()) { System.out.println(iterator.next()); } } // 3. 使用subList时的注意事项 List<String> originalList = new ArrayList<>(Arrays.asList(\\\"A\\\", \\\"B\\\", \\\"C\\\", \\\"D\\\", \\\"E\\\")); List<String> subList = originalList.subList(1, 4); // [B, C, D] subList.set(0, \\\"X\\\"); // 修改子列表会影响原列表 System.out.println(originalList); // [A, X, C, D, E] originalList.add(\\\"F\\\"); // 原列表结构修改后，子列表操作会抛出ConcurrentModificationException try { System.out.println(subList.size()); } catch (ConcurrentModificationException e) { System.out.println(\\\"原列表结构修改后子列表失效\\\"); } } }\"]},\"1195\":{\"h\":\"深度思考题\"},\"1196\":{\"h\":\"思考题1：HashMap在JDK 7和JDK 8中的实现差异及性能影响\",\"t\":[\"思考题回答：HashMap在JDK 7和JDK 8中的主要实现差异：\",\"数据结构：\",\"JDK 7：数组 + 链表\",\"JDK 8：数组 + 链表 + 红黑树（当链表长度超过阈值8时，链表转为红黑树）\",\"哈希计算：\",\"JDK 7：扰动函数进行4次位运算\",\"JDK 8：简化为一次位运算（key.hashCode() ^ (key.hashCode() >>> 16)）\",\"扩容机制：\",\"JDK 7：头插法，可能导致多线程环境下的循环链表问题\",\"JDK 8：尾插法，解决了循环链表问题\",\"性能影响：\",\"JDK 8在哈希冲突严重时（链表较长）查询性能更优，从O(n)提升到O(log n)\",\"JDK 8的哈希计算更高效，减少了位运算次数\",\"JDK 8的扩容过程更稳定，避免了头插法可能导致的并发问题\",\"实际应用建议：优先使用JDK 8及以上版本，对于大数据量且哈希冲突可能性高的场景，HashMap性能优势更明显。\"]},\"1197\":{\"h\":\"思考题2：如何实现一个线程安全的HashMap？对比ConcurrentHashMap的实现原理\",\"t\":[\"思考题回答：实现线程安全HashMap的方案及对比：\",\"使用Collections.synchronizedMap：\",\"原理：对HashMap的所有方法添加synchronized同步锁\",\"优点：实现简单，完全线程安全\",\"缺点：性能差，多线程竞争同一把锁，并发度低\",\"使用ReentrantLock手动加锁：\",\"原理：在操作HashMap前后手动加锁和解锁\",\"优点：可灵活控制锁粒度\",\"缺点：实现复杂，需手动处理异常和锁释放\",\"ConcurrentHashMap实现：\",\"JDK 7：分段锁（Segment）机制，将HashMap分为多个段，每个段独立加锁\",\"JDK 8：CAS + synchronized，锁粒度细化到链表头节点或红黑树的根节点\",\"优点：并发度高，读写性能好，支持部分并发操作\",\"缺点：实现复杂\",\"性能对比：ConcurrentHashMap > ReentrantLock手动加锁 > Collections.synchronizedMap\",\"实际应用建议：优先使用ConcurrentHashMap，在JDK 8及以上版本中，其性能已接近HashMap，同时提供了良好的线程安全性。\"]},\"1198\":{\"h\":\"思考题3：集合框架在JDK 1.8到JDK 21的演进及新特性\",\"t\":[\"思考题回答：JDK 1.8到JDK 21集合框架的主要演进：\",\"JDK 8：\",\"引入Stream API，支持集合的函数式操作\",\"添加forEach()、removeIf()等默认方法\",\"HashMap使用红黑树优化哈希冲突\",\"JDK 9：\",\"新增不可变集合工厂方法：List.of()、Set.of()、Map.of()\",\"增强Stream API，添加takeWhile()、dropWhile()等方法\",\"JDK 10：\",\"新增List.copyOf()、Set.copyOf()、Map.copyOf()方法\",\"优化集合的序列化和反序列化\",\"JDK 16：\",\"引入Stream.toList()方法，返回不可变列表\",\"增强Map接口，添加computeIfAbsent()等方法\",\"JDK 21：\",\"新增SequencedCollection接口，提供统一的首尾元素操作\",\"增强LinkedList，实现SequencedCollection接口\",\"新增Record集合工厂方法，如List.of(record...)等\",\"演进趋势：\",\"不可变集合支持增强\",\"函数式编程支持增强\",\"接口方法不断丰富\",\"性能持续优化\",\"并发集合功能增强\",\"实际应用建议：在新项目中优先使用JDK 11及以上LTS版本，充分利用不可变集合和Stream API提升代码质量和性能。\"]},\"1199\":{\"h\":\"面试专题：面向对象\"},\"1200\":{\"h\":\"概述\",\"t\":[\"面向对象编程（OOP）是Java的核心特性，也是面试中必问的知识点。本章节将系统讲解面向对象的核心概念、设计原则以及常见面试题，帮助你全面掌握面向对象编程的精髓。\"]},\"1201\":{\"h\":\"知识要点\"},\"1202\":{\"h\":\"1. 核心概念\"},\"1203\":{\"h\":\"1.1 封装\",\"t\":[\"封装是将数据和方法组合在一个单元中的机制，它隐藏了对象的内部实现细节，只暴露必要的接口。\",\"public class User { // 私有属性，外部无法直接访问 private String name; private int age; // 提供公共方法来访问和修改私有属性 public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { // 加入验证逻辑 if (age >= 0 && age <= 150) { this.age = age; } else { throw new IllegalArgumentException(\\\"年龄必须在0-150之间\\\"); } } }\"]},\"1204\":{\"h\":\"1.2 继承\",\"t\":[\"继承允许一个类获取另一个类的属性和方法。被继承的类称为父类，继承的类称为子类。\",\"// 父类 public class Animal { public void eat() { System.out.println(\\\"动物会进食\\\"); } } // 子类 public class Dog extends Animal { // 重写父类方法 @Override public void eat() { System.out.println(\\\"狗吃骨头\\\"); } // 子类特有方法 public void bark() { System.out.println(\\\"狗会汪汪叫\\\"); } }\"]},\"1205\":{\"h\":\"1.3 多态\",\"t\":[\"多态是指同一个方法可以有不同的实现方式。在Java中，多态通过方法重载和方法重写实现。\",\"// 方法重载 - 同一个类中，方法名相同，参数不同 public class Calculator { public int add(int a, int b) { return a + b; } public double add(double a, double b) { return a + b; } } // 方法重写 - 子类重写父类的方法 public class Animal { public void move() { System.out.println(\\\"动物会移动\\\"); } } public class Bird extends Animal { @Override public void move() { System.out.println(\\\"鸟会飞\\\"); } }\"]},\"1206\":{\"h\":\"1.4 抽象\",\"t\":[\"抽象是指忽略细节，关注本质。在Java中，抽象通过抽象类和接口实现。\",\"// 抽象类 public abstract class Shape { // 抽象方法，没有实现 public abstract double getArea(); // 具体方法 public void display() { System.out.println(\\\"这是一个形状\\\"); } } // 接口 public interface Flyable { void fly(); }\"]},\"1207\":{\"h\":\"2. 设计原则\"},\"1208\":{\"h\":\"2.1 单一职责原则\",\"t\":[\"一个类应该只有一个引起它变化的原因。\",\"// 违反单一职责原则 public class User { private String name; private int age; public void save() { // 保存用户到数据库 } public void validate() { // 验证用户信息 } } // 遵循单一职责原则 public class User { private String name; private int age; // 只包含用户相关的属性和方法 } public class UserRepository { public void save(User user) { // 保存用户到数据库 } } public class UserValidator { public boolean validate(User user) { // 验证用户信息 return true; } }\"]},\"1209\":{\"h\":\"2.2 开闭原则\",\"t\":[\"对扩展开放，对修改关闭。\",\"// 违反开闭原则 public class ShapeCalculator { public double calculateArea(Shape shape) { if (shape instanceof Circle) { return Math.PI * ((Circle) shape).getRadius() * ((Circle) shape).getRadius(); } else if (shape instanceof Rectangle) { return ((Rectangle) shape).getWidth() * ((Rectangle) shape).getHeight(); } // 每添加一个新形状，都需要修改这个方法 return 0; } } // 遵循开闭原则 public abstract class Shape { public abstract double getArea(); } public class Circle extends Shape { private double radius; @Override public double getArea() { return Math.PI * radius * radius; } } public class Rectangle extends Shape { private double width; private double height; @Override public double getArea() { return width * height; } } public class ShapeCalculator { public double calculateArea(Shape shape) { return shape.getArea(); // 不需要修改这个方法，只需要扩展新的形状类 } }\"]},\"1210\":{\"h\":\"2.3 里氏替换原则\",\"t\":[\"子类可以替换父类，而不会改变程序的正确性。\",\"// 违反里氏替换原则 public class Bird { public void fly() { System.out.println(\\\"鸟会飞\\\"); } } public class Ostrich extends Bird { @Override public void fly() { // 鸵鸟不会飞，违反了里氏替换原则 throw new UnsupportedOperationException(\\\"鸵鸟不会飞\\\"); } } // 遵循里氏替换原则 public class Bird { public void move() { System.out.println(\\\"鸟会移动\\\"); } } public class Ostrich extends Bird { @Override public void move() { System.out.println(\\\"鸵鸟会跑\\\"); } }\"]},\"1211\":{\"h\":\"2.4 接口隔离原则\",\"t\":[\"客户端不应该被迫实现它不需要的接口。\",\"// 违反接口隔离原则 public interface Animal { void eat(); void fly(); void swim(); } public class Dog implements Animal { @Override public void eat() { System.out.println(\\\"狗吃骨头\\\"); } @Override public void fly() { // 狗不会飞，但是被迫实现这个方法 throw new UnsupportedOperationException(); } @Override public void swim() { System.out.println(\\\"狗会游泳\\\"); } } // 遵循接口隔离原则 public interface Eat { void eat(); } public interface Fly { void fly(); } public interface Swim { void swim(); } public class Dog implements Eat, Swim { @Override public void eat() { System.out.println(\\\"狗吃骨头\\\"); } @Override public void swim() { System.out.println(\\\"狗会游泳\\\"); } }\"]},\"1212\":{\"h\":\"2.5 依赖倒置原则\",\"t\":[\"高层模块不应该依赖低层模块，它们都应该依赖抽象。\",\"// 违反依赖倒置原则 public class Light { public void turnOn() { System.out.println(\\\"灯打开了\\\"); } public void turnOff() { System.out.println(\\\"灯关闭了\\\"); } } public class Switch { private Light light; public Switch(Light light) { this.light = light; } public void operate() { light.turnOn(); } } // 遵循依赖倒置原则 public interface Switchable { void turnOn(); void turnOff(); } public class Light implements Switchable { @Override public void turnOn() { System.out.println(\\\"灯打开了\\\"); } @Override public void turnOff() { System.out.println(\\\"灯关闭了\\\"); } } public class Switch { private Switchable device; public Switch(Switchable device) { this.device = device; } public void operate() { device.turnOn(); } }\"]},\"1213\":{\"h\":\"知识扩展\"},\"1214\":{\"h\":\"设计思想\",\"t\":[\"面向对象编程的核心设计思想是将现实世界中的事物抽象成对象，通过对象之间的交互来解决问题。它强调封装、继承、多态和抽象，这些概念帮助我们编写更加模块化、可维护和可扩展的代码。\"]},\"1215\":{\"h\":\"避坑指南\",\"t\":[\"过度继承：不要为了复用少量代码而创建深层次的继承关系，这会导致代码难以理解和维护。\",\"违反里氏替换原则：子类不应该修改父类的行为，否则会导致代码出现意外的错误。\",\"接口臃肿：不要创建包含太多方法的接口，这会导致实现接口的类变得非常复杂。\",\"忽视封装：不要直接暴露对象的内部状态，应该通过方法来访问和修改对象的状态。\",\"混合责任：一个类不应该承担太多的责任，否则会导致代码难以维护和测试。\"]},\"1216\":{\"h\":\"深度思考题\",\"t\":[\"思考题: 什么是面向对象编程？它有什么优点？\",\"回答: 面向对象编程是一种编程范式，它将现实世界中的事物抽象成对象，通过对象之间的交互来解决问题。\",\"优点：\",\"模块化：每个对象都是一个独立的模块，便于代码的维护和复用。\",\"可扩展性：通过继承和多态，可以方便地扩展现有代码。\",\"可维护性：对象封装了数据和方法，隐藏了内部实现细节，使得代码更加易于维护。\",\"可读性：面向对象编程的代码更加接近自然语言，易于理解。\",\"可测试性：每个对象都是一个独立的单元，便于进行单元测试。\",\"思考题: 什么是多态？它在Java中有哪些实现方式？\",\"回答: 多态是指同一个方法可以有不同的实现方式。\",\"在Java中，多态通过以下方式实现：\",\"方法重载：同一个类中，方法名相同，参数不同。\",\"方法重写：子类重写父类的方法。\",\"接口实现：不同的类实现同一个接口的方法。\",\"抽象类：子类实现抽象类的抽象方法。\",\"思考题: 什么是设计模式？它与面向对象编程有什么关系？\",\"回答: 设计模式是解决特定问题的最佳实践，它是面向对象编程的经验总结。\",\"关系：\",\"设计模式是面向对象编程的具体应用。\",\"设计模式体现了面向对象编程的核心思想，如封装、继承、多态和抽象。\",\"设计模式帮助我们编写更加模块化、可维护和可扩展的代码。\",\"设计模式是面向对象编程的高级应用，它需要我们掌握面向对象编程的核心概念和设计原则。\"]},\"1217\":{\"h\":\"面试专题：IO流\"},\"1218\":{\"h\":\"概述\",\"t\":[\"IO流是Java编程中的核心知识点，也是面试中的高频考点。本专题将系统梳理IO流相关的经典面试题，包括基础概念辨析、核心API使用、性能优化策略以及实际应用场景分析。通过理论讲解与代码实践相结合的方式，帮助读者深入理解IO流的底层原理，掌握常见问题的解决思路和最佳实践。无论是初级开发者还是有经验的工程师，都能从本专题中获得对IO流知识体系的全面认识和面试应对技巧。\"]},\"1219\":{\"h\":\"知识要点\"},\"1220\":{\"h\":\"1. IO流基础概念辨析\"},\"1221\":{\"h\":\"1.1 字节流与字符流的区别\",\"t\":[\"这是IO流最基础也最常考的问题，需要从数据处理单位、适用场景和底层实现三个维度进行回答：\",\"特性\",\"字节流\",\"字符流\",\"处理单位\",\"字节(8位)\",\"字符(16位Unicode)\",\"基类\",\"InputStream/OutputStream\",\"Reader/Writer\",\"处理对象\",\"二进制数据(如图片、音频、视频)\",\"文本数据(如.txt、.java文件)\",\"编码转换\",\"不支持直接编码转换\",\"支持编码转换(通过转换流)\",\"缓冲区\",\"需手动创建缓冲区\",\"内置缓冲区\",\"代码示例：字节流与字符流读取文件对比\",\"import java.io.*; /** * 字节流与字符流读取文件对比示例 */ public class StreamComparisonExample { public static void main(String[] args) { String filePath = \\\"example.txt\\\"; // 使用字节流读取 readWithByteStream(filePath); // 使用字符流读取 readWithCharacterStream(filePath); } /** * 使用字节流读取文件 */ private static void readWithByteStream(String filePath) { System.out.println(\\\"=== 使用字节流读取 ===\\\"); try (FileInputStream fis = new FileInputStream(filePath); BufferedInputStream bis = new BufferedInputStream(fis)) { byte[] buffer = new byte[1024]; int bytesRead; while ((bytesRead = bis.read(buffer)) != -1) { // 字节流直接读取字节数组 System.out.print(new String(buffer, 0, bytesRead)); } } catch (IOException e) { e.printStackTrace(); } } /** * 使用字符流读取文件 */ private static void readWithCharacterStream(String filePath) { System.out.println(\\\"\\\\n=== 使用字符流读取 ===\\\"); try (FileReader fr = new FileReader(filePath); BufferedReader br = new BufferedReader(fr)) { String line; // 字符流可以按行读取 while ((line = br.readLine()) != null) { System.out.println(line); } } catch (IOException e) { e.printStackTrace(); } } }\"]},\"1222\":{\"h\":\"1.2 节点流与处理流的区别\",\"t\":[\"节点流：直接与数据源连接，如FileInputStream、FileOutputStream等\",\"处理流：包装节点流或其他处理流，增强功能，如BufferedInputStream、ObjectOutputStream等\",\"设计模式：处理流使用装饰器模式，动态添加功能\",\"优势：处理流可以叠加使用，灵活组合各种功能\",\"代码示例：处理流的组合使用\",\"import java.io.*; /** * 处理流组合使用示例 * 演示缓冲流+转换流+数据流的组合使用 */ public class ProcessingStreamExample { public static void main(String[] args) { String filePath = \\\"data.txt\\\"; try ( // 节点流 FileOutputStream fos = new FileOutputStream(filePath); // 缓冲处理流 BufferedOutputStream bos = new BufferedOutputStream(fos); // 数据处理流 DataOutputStream dos = new DataOutputStream(bos) ) { // 写入各种类型数据 dos.writeUTF(\\\"Hello IO Stream\\\"); dos.writeInt(2023); dos.writeDouble(3.1415926); dos.writeBoolean(true); System.out.println(\\\"数据写入完成\\\"); } catch (IOException e) { e.printStackTrace(); } // 读取数据 try ( FileInputStream fis = new FileInputStream(filePath); BufferedInputStream bis = new BufferedInputStream(fis); DataInputStream dis = new DataInputStream(bis) ) { // 按写入顺序读取数据 String str = dis.readUTF(); int num = dis.readInt(); double d = dis.readDouble(); boolean flag = dis.readBoolean(); System.out.println(\\\"读取的数据：\\\"); System.out.println(\\\"字符串: \\\" + str); System.out.println(\\\"整数: \\\" + num); System.out.println(\\\"小数: \\\" + d); System.out.println(\\\"布尔值: \\\" + flag); } catch (IOException e) { e.printStackTrace(); } } }\"]},\"1223\":{\"h\":\"2. 核心API使用与实现原理\"},\"1224\":{\"h\":\"2.1 缓冲流的实现原理与性能优势\",\"t\":[\"缓冲流(BufferedInputStream/BufferedOutputStream/BufferedReader/BufferedWriter)是面试高频考点，需要掌握其内部实现机制：\",\"实现原理：\",\"内部维护一个缓冲区数组(默认8KB)\",\"读取时一次性从底层流读取多个字节/字符到缓冲区\",\"写入时先写入缓冲区，缓冲区满后再一次性写入底层流\",\"减少IO操作次数，提高性能\",\"性能对比代码示例：\",\"import java.io.*; import java.util.Date; /** * 缓冲流性能对比示例 * 演示使用缓冲流与不使用缓冲流的性能差异 */ public class BufferPerformanceExample { private static final String LARGE_FILE = \\\"large_file.txt\\\"; private static final int FILE_SIZE = 1024 * 1024 * 10; // 10MB public static void main(String[] args) throws IOException { // 创建大文件 createLargeFile(); // 不使用缓冲流复制文件 long startTime = new Date().getTime(); copyWithoutBuffer(); long endTime = new Date().getTime(); System.out.println(\\\"不使用缓冲流耗时: \\\" + (endTime - startTime) + \\\"ms\\\"); // 使用缓冲流复制文件 startTime = new Date().getTime(); copyWithBuffer(); endTime = new Date().getTime(); System.out.println(\\\"使用缓冲流耗时: \\\" + (endTime - startTime) + \\\"ms\\\"); } private static void createLargeFile() throws IOException { try (FileOutputStream fos = new FileOutputStream(LARGE_FILE); BufferedOutputStream bos = new BufferedOutputStream(fos)) { byte[] data = new byte[1024]; for (int i = 0; i < FILE_SIZE / 1024; i++) { bos.write(data); } } } private static void copyWithoutBuffer() throws IOException { try (FileInputStream fis = new FileInputStream(LARGE_FILE); FileOutputStream fos = new FileOutputStream(\\\"copy_without_buffer.txt\\\")) { int data; while ((data = fis.read()) != -1) { // 每次读取一个字节 fos.write(data); } } } private static void copyWithBuffer() throws IOException { try (BufferedInputStream bis = new BufferedInputStream(new FileInputStream(LARGE_FILE)); BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(\\\"copy_with_buffer.txt\\\"))) { byte[] buffer = new byte[1024 * 8]; // 8KB缓冲区 int bytesRead; while ((bytesRead = bis.read(buffer)) != -1) { // 每次读取缓冲区大小的数据 bos.write(buffer, 0, bytesRead); } } } }\"]},\"1225\":{\"h\":\"2.2 对象序列化与反序列化\",\"t\":[\"对象序列化是将对象转换为字节序列的过程，反序列化则是将字节序列恢复为对象的过程。\",\"核心知识点：\",\"实现Serializable接口(标记接口，无方法)\",\"使用ObjectOutputStream和ObjectInputStream进行序列化/反序列化\",\"transient关键字：修饰的字段不会被序列化\",\"序列化版本号serialVersionUID：确保反序列化时版本一致\",\"代码示例：对象序列化与反序列化\",\"import java.io.*; import java.util.Date; /** * 对象序列化与反序列化示例 */ public class SerializationExample { public static void main(String[] args) { // 创建对象 User user = new User(1, \\\"Alice\\\", 25, new Date()); System.out.println(\\\"序列化前: \\\" + user); String filePath = \\\"user.ser\\\"; // 序列化对象 try (ObjectOutputStream oos = new ObjectOutputStream( new FileOutputStream(filePath))) { oos.writeObject(user); System.out.println(\\\"对象序列化完成\\\"); } catch (IOException e) { e.printStackTrace(); } // 反序列化对象 try (ObjectInputStream ois = new ObjectInputStream( new FileInputStream(filePath))) { User deserializedUser = (User) ois.readObject(); System.out.println(\\\"反序列化后: \\\" + deserializedUser); } catch (IOException | ClassNotFoundException e) { e.printStackTrace(); } } /** * 可序列化的User类 */ static class User implements Serializable { // 序列化版本号 private static final long serialVersionUID = 1L; private int id; private String name; private int age; // transient字段不会被序列化 private transient Date birthday; public User(int id, String name, int age, Date birthday) { this.id = id; this.name = name; this.age = age; this.birthday = birthday; } @Override public String toString() { return \\\"User{\\\" + \\\"id=\\\" + id + \\\", name='\\\" + name + '\\\\'' + \\\", age=\\\" + age + \\\", birthday=\\\" + birthday + // 反序列化后为null '}'; } } }\"]},\"1226\":{\"h\":\"3. NIO核心组件与应用\"},\"1227\":{\"h\":\"3.1 NIO与BIO的本质区别\",\"t\":[\"NIO(New IO)是JDK 1.4引入的新IO模型，与传统BIO相比有本质区别：\",\"特性\",\"BIO\",\"NIO\",\"模型\",\"面向流(Stream)\",\"面向缓冲区(Buffer)\",\"阻塞\",\"阻塞IO\",\"非阻塞IO\",\"线程\",\"一个连接一个线程\",\"一个线程处理多个连接\",\"选择器\",\"无\",\"Selector支持多路复用\",\"效率\",\"低(频繁线程切换)\",\"高(减少线程开销)\",\"编程复杂度\",\"简单\",\"复杂\"]},\"1228\":{\"h\":\"3.2 Selector的工作原理\",\"t\":[\"Selector是NIO实现非阻塞IO的核心组件，允许单个线程监控多个通道的IO事件：\",\"工作流程：\",\"创建Selector\",\"将Channel注册到Selector，并指定关注的事件\",\"调用Selector的select()方法，阻塞等待就绪事件\",\"获取就绪事件集合，处理事件\",\"代码示例：NIO Selector实现多客户端通信\",\"import java.io.IOException; import java.net.InetSocketAddress; import java.nio.ByteBuffer; import java.nio.channels.SelectionKey; import java.nio.channels.Selector; import java.nio.channels.ServerSocketChannel; import java.nio.channels.SocketChannel; import java.util.Iterator; import java.util.Set; /** * NIO Selector多客户端通信示例 */ public class NioSelectorServer { public static void main(String[] args) { try { // 创建Selector Selector selector = Selector.open(); // 创建ServerSocketChannel ServerSocketChannel serverSocketChannel = ServerSocketChannel.open(); serverSocketChannel.socket().bind(new InetSocketAddress(8888)); serverSocketChannel.configureBlocking(false); // 注册接受连接事件 serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT); System.out.println(\\\"NIO服务器启动，监听端口8888...\\\"); while (true) { // 阻塞等待就绪事件 int readyChannels = selector.select(); if (readyChannels == 0) continue; // 获取就绪事件集合 Set<SelectionKey> selectionKeys = selector.selectedKeys(); Iterator<SelectionKey> iterator = selectionKeys.iterator(); while (iterator.hasNext()) { SelectionKey key = iterator.next(); // 处理接受连接事件 if (key.isAcceptable()) { handleAccept(key, selector); } // 处理读事件 if (key.isReadable()) { handleRead(key); } // 移除已处理的事件 iterator.remove(); } } } catch (IOException e) { e.printStackTrace(); } } private static void handleAccept(SelectionKey key, Selector selector) throws IOException { ServerSocketChannel serverSocketChannel = (ServerSocketChannel) key.channel(); SocketChannel socketChannel = serverSocketChannel.accept(); socketChannel.configureBlocking(false); System.out.println(\\\"新客户端连接: \\\" + socketChannel.getRemoteAddress()); // 注册读事件，并附加缓冲区 socketChannel.register(selector, SelectionKey.OP_READ, ByteBuffer.allocate(1024)); } private static void handleRead(SelectionKey key) throws IOException { SocketChannel socketChannel = (SocketChannel) key.channel(); ByteBuffer buffer = (ByteBuffer) key.attachment(); int bytesRead = socketChannel.read(buffer); if (bytesRead == -1) { // 客户端关闭连接 socketChannel.close(); System.out.println(\\\"客户端断开连接: \\\" + socketChannel.getRemoteAddress()); return; } // 处理读取的数据 buffer.flip(); byte[] data = new byte[buffer.remaining()]; buffer.get(data); String message = new String(data); System.out.println(\\\"收到消息: \\\" + message + \\\" 来自: \\\" + socketChannel.getRemoteAddress()); // 响应客户端 buffer.clear(); buffer.put(\\\"服务器已收到: \\\" + message.getBytes()); buffer.flip(); socketChannel.write(buffer); } }\"]},\"1229\":{\"h\":\"知识扩展\"},\"1230\":{\"h\":\"设计思想\"},\"1231\":{\"h\":\"IO流设计模式分析\",\"t\":[\"Java IO框架广泛应用了多种设计模式，理解这些模式有助于深入掌握IO流的设计思想：\",\"装饰器模式(Decorator Pattern)\",\"应用：处理流包装节点流或其他处理流\",\"优势：动态添加功能，灵活组合不同处理方式\",\"示例：BufferedInputStream包装FileInputStream添加缓冲功能\",\"适配器模式(Adapter Pattern)\",\"应用：字节流与字符流之间的转换\",\"示例：InputStreamReader将字节流适配为字符流\",\"工厂模式(Factory Pattern)\",\"应用：Files类的静态方法创建各种流\",\"示例：Files.newInputStream()、Files.newBufferedReader()\",\"策略模式(Strategy Pattern)\",\"应用：不同的IO操作实现不同的策略\",\"示例：各种Reader和Writer实现不同的字符编码策略\"]},\"1232\":{\"h\":\"零拷贝技术原理\",\"t\":[\"零拷贝(Zero-Copy)是提高IO性能的关键技术，减少数据在用户空间和内核空间之间的拷贝次数：\",\"传统IO数据传输过程：\",\"数据从磁盘读取到内核缓冲区\",\"数据从内核缓冲区拷贝到用户缓冲区\",\"数据从用户缓冲区拷贝到内核Socket缓冲区\",\"数据从内核Socket缓冲区发送到网卡\",\"零拷贝技术：\",\"mmap+write：减少一次用户空间到内核空间的拷贝\",\"sendfile：完全在内核空间操作，无需用户空间参与\",\"Java NIO中的零拷贝：FileChannel.transferTo()和transferFrom()方法\",\"代码示例：使用零拷贝技术复制文件\",\"import java.io.IOException; import java.nio.channels.FileChannel; import java.nio.file.Paths; import java.nio.file.StandardOpenOption; /** * 零拷贝技术文件复制示例 */ public class ZeroCopyExample { public static void main(String[] args) { String sourcePath = \\\"large_file.txt\\\"; String destPath = \\\"zero_copy_dest.txt\\\"; try ( FileChannel sourceChannel = FileChannel.open( Paths.get(sourcePath), StandardOpenOption.READ); FileChannel destChannel = FileChannel.open( Paths.get(destPath), StandardOpenOption.WRITE, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING) ) { // 使用零拷贝技术传输数据 long position = 0; long transferCount = 0; long fileSize = sourceChannel.size(); while (transferCount < fileSize) { transferCount += sourceChannel.transferTo( position + transferCount, fileSize - transferCount, destChannel); } System.out.println(\\\"文件复制完成，总传输字节数: \\\" + transferCount); } catch (IOException e) { e.printStackTrace(); } } }\"]},\"1233\":{\"h\":\"避坑指南\"},\"1234\":{\"h\":\"1. 资源未正确关闭\",\"t\":[\"问题：IO流未正确关闭导致资源泄漏 解决方案：使用try-with-resources自动关闭资源\",\"// 错误方式 FileInputStream fis = null; try { fis = new FileInputStream(\\\"file.txt\\\"); // 读取操作 } catch (IOException e) { e.printStackTrace(); } finally { if (fis != null) { try { fis.close(); // 可能被遗忘 } catch (IOException e) { e.printStackTrace(); } } } // 正确方式(try-with-resources) try (FileInputStream fis = new FileInputStream(\\\"file.txt\\\")) { // 读取操作 } catch (IOException e) { e.printStackTrace(); }\"]},\"1235\":{\"h\":\"2. 缓冲区使用不当\",\"t\":[\"问题：忘记调用flip()切换读写模式，导致数据读取错误 解决方案：严格遵循缓冲区操作顺序\",\"// 错误方式 ByteBuffer buffer = ByteBuffer.allocate(1024); buffer.put(\\\"data\\\".getBytes()); // 忘记调用flip()，position指向缓冲区末尾 channel.write(buffer); // 写入0字节 // 正确方式 ByteBuffer buffer = ByteBuffer.allocate(1024); buffer.put(\\\"data\\\".getBytes()); buffer.flip(); // 切换为读模式 channel.write(buffer);\"]},\"1236\":{\"h\":\"3. 字符编码问题\",\"t\":[\"问题：未指定字符编码，导致中文乱码 解决方案：明确指定字符编码\",\"// 错误方式 // 使用系统默认编码，跨平台可能出现乱码 BufferedReader br = new BufferedReader(new FileReader(\\\"file.txt\\\")); // 正确方式 // 明确指定编码 BufferedReader br = new BufferedReader( new InputStreamReader(new FileInputStream(\\\"file.txt\\\"), StandardCharsets.UTF_8));\"]},\"1237\":{\"h\":\"4. Selector空轮询问题\",\"t\":[\"问题：JDK NIO存在Selector空轮询bug，导致CPU使用率100% 解决方案：\",\"设置select超时时间：selector.select(1000)\",\"捕获IOException后重建Selector\",\"升级JDK版本\",\"// 解决空轮询问题的代码片段 try { while (true) { int readyChannels = selector.select(1000); // 设置超时时间 if (readyChannels == 0) { // 检查是否需要退出 continue; } // 处理事件... } } catch (IOException e) { // 发生异常时重建Selector rebuildSelector(); }\"]},\"1238\":{\"h\":\"深度思考题\",\"t\":[\"思考题1：如何设计一个高效的文件上传系统？需要考虑哪些IO相关的优化策略？\",\"参考答案： 设计高效文件上传系统需考虑以下IO优化策略：\",\"分块上传：\",\"将大文件分成小块(如5MB/块)，使用多线程并发上传\",\"支持断点续传，失败后只需重传失败的块\",\"实现：RandomAccessFile或NIO的FileChannel定位写入\",\"零拷贝技术：\",\"使用FileChannel.transferTo()减少数据拷贝\",\"服务端接收文件时直接写入磁盘，避免用户空间拷贝\",\"异步IO：\",\"使用NIO.2的AsynchronousFileChannel实现异步文件IO\",\"避免阻塞线程，提高并发处理能力\",\"缓冲区优化：\",\"设置合理的缓冲区大小(一般8KB~64KB)\",\"重用缓冲区，减少对象创建开销\",\"内存映射：\",\"对于超大文件，使用MappedByteBuffer进行内存映射\",\"避免一次性加载整个文件到内存\",\"网络传输优化：\",\"使用NIO的非阻塞模式，一个线程处理多个连接\",\"设置合理的TCP缓冲区大小\",\"核心代码示例：\",\"import java.io.IOException; import java.nio.ByteBuffer; import java.nio.channels.AsynchronousFileChannel; import java.nio.channels.CompletionHandler; import java.nio.file.Path; import java.nio.file.Paths; import java.nio.file.StandardOpenOption; import java.util.concurrent.CountDownLatch; /** * 异步文件IO示例 */ public class AsyncFileUploadExample { public static void main(String[] args) throws InterruptedException { String filePath = \\\"large_upload.dat\\\"; long fileSize = 1024 * 1024 * 100; // 100MB int blockSize = 1024 * 1024 * 5; // 5MB/块 int blockCount = (int) (fileSize / blockSize) + (fileSize % blockSize > 0 ? 1 : 0); CountDownLatch latch = new CountDownLatch(blockCount); try { AsynchronousFileChannel fileChannel = AsynchronousFileChannel.open( Paths.get(filePath), StandardOpenOption.WRITE, StandardOpenOption.CREATE); for (int i = 0; i < blockCount; i++) { long position = i * (long) blockSize; int size = (i == blockCount - 1) ? (int) (fileSize - position) : blockSize; ByteBuffer buffer = ByteBuffer.allocate(size); // 填充缓冲区数据(实际应用中从网络读取) fillBuffer(buffer, size); buffer.flip(); // 异步写入文件 fileChannel.write(buffer, position, buffer, new CompletionHandler<Integer, ByteBuffer>() { @Override public void completed(Integer result, ByteBuffer attachment) { System.out.println(\\\"写入完成: \\\" + result + \\\"字节\\\"); latch.countDown(); } @Override public void failed(Throwable exc, ByteBuffer attachment) { System.err.println(\\\"写入失败: \\\" + exc.getMessage()); exc.printStackTrace(); latch.countDown(); } }); } // 等待所有块写入完成 latch.await(); System.out.println(\\\"文件上传完成\\\"); fileChannel.close(); } catch (IOException e) { e.printStackTrace(); } } private static void fillBuffer(ByteBuffer buffer, int size) { // 填充测试数据 for (int i = 0; i < size; i++) { buffer.put((byte) (i % 256)); } } }\",\"思考题2：Java NIO.2(AIO)与传统NIO有什么区别？在什么场景下应该选择使用AIO？\",\"参考答案： Java NIO.2(AIO)即异步IO，是JDK 7引入的新IO模型，与传统NIO(BIO)的区别主要体现在：\",\"编程模型：\",\"NIO：同步非阻塞，基于Selector的多路复用\",\"AIO：异步非阻塞，基于回调的事件驱动\",\"操作方式：\",\"NIO：需要主动轮询Selector获取就绪事件\",\"AIO：操作完成后由操作系统通知应用程序\",\"适用场景：\",\"NIO：连接数较多但数据量不大的场景(如聊天服务器)\",\"AIO：连接数较少但数据量大的场景(如文件传输)\",\"性能特点：\",\"NIO：在高并发小数据量场景下性能优异\",\"AIO：在大数据量传输场景下性能更好\",\"AIO适用场景：\",\"文件服务器：处理大文件传输\",\"数据库访问：异步数据库操作\",\"消息队列：异步消息处理\",\"Web服务器：处理长连接和大文件上传\",\"AIO代码示例：\",\"import java.io.IOException; import java.net.InetSocketAddress; import java.nio.ByteBuffer; import java.nio.channels.AsynchronousServerSocketChannel; import java.nio.channels.AsynchronousSocketChannel; import java.nio.channels.CompletionHandler; /** * AIO服务器示例 */ public class AIOServerExample { public static void main(String[] args) throws IOException { // 创建异步服务器通道 AsynchronousServerSocketChannel serverSocketChannel = AsynchronousServerSocketChannel.open().bind(new InetSocketAddress(8888)); System.out.println(\\\"AIO服务器启动，监听端口8888...\\\"); // 接受连接 serverSocketChannel.accept(null, new CompletionHandler<AsynchronousSocketChannel, Object>() { @Override public void completed(AsynchronousSocketChannel clientChannel, Object attachment) { // 继续接受其他连接 serverSocketChannel.accept(null, this); try { System.out.println(\\\"新客户端连接: \\\" + clientChannel.getRemoteAddress()); // 读取数据 ByteBuffer buffer = ByteBuffer.allocate(1024); clientChannel.read(buffer, buffer, new CompletionHandler<Integer, ByteBuffer>() { @Override public void completed(Integer bytesRead, ByteBuffer buffer) { if (bytesRead == -1) { try { clientChannel.close(); } catch (IOException e) { e.printStackTrace(); } return; } buffer.flip(); byte[] data = new byte[buffer.remaining()]; buffer.get(data); System.out.println(\\\"收到消息: \\\" + new String(data)); // 响应客户端 String response = \\\"服务器已收到: \\\" + new String(data); ByteBuffer responseBuffer = ByteBuffer.wrap(response.getBytes()); clientChannel.write(responseBuffer, null, new CompletionHandler<Integer, Object>() { @Override public void completed(Integer result, Object attachment) { // 写入完成 buffer.clear(); clientChannel.read(buffer, buffer, this); } @Override public void failed(Throwable exc, Object attachment) { exc.printStackTrace(); } }); } @Override public void failed(Throwable exc, ByteBuffer buffer) { exc.printStackTrace(); } }); } catch (IOException e) { e.printStackTrace(); } } @Override public void failed(Throwable exc, Object attachment) { exc.printStackTrace(); } }); // 防止主线程退出 try { Thread.sleep(Integer.MAX_VALUE); } catch (InterruptedException e) {} } }\",\"AIO虽然理论上更先进，但在实际应用中，由于JDK实现和操作系统支持的差异，其性能优势并不总是明显。在选择IO模型时，需要根据具体场景和性能测试结果综合考虑。对于大多数Java网络应用，NIO已经能够满足需求，而AIO更适合特定的大数据量异步处理场景。\"]},\"1239\":{\"h\":\"面试专题：异常处理\"},\"1240\":{\"h\":\"概述\",\"t\":[\"异常处理是Java面试中的高频考点，涉及异常体系、处理机制、最佳实践等多个方面。本章将从面试角度梳理异常处理的核心知识点，包括常见面试题解析、实战案例分析和深度思考问题，帮助读者全面掌握异常处理相关面试要点。\"]},\"1241\":{\"h\":\"知识要点\"},\"1242\":{\"h\":\"1. 异常基础概念辨析\"},\"1243\":{\"h\":\"1.1 异常与错误的区别\",\"t\":[\"异常（Exception）表示程序可以处理的意外情况，而错误（Error）表示系统级别的严重问题，程序通常无法恢复。\",\"// Error示例 - 通常无法处理 public class ErrorDemo { public static void main(String[] args) { // StackOverflowError是虚拟机错误 recursiveCall(); } private static void recursiveCall() { recursiveCall(); // 无限递归导致栈溢出 } } // Exception示例 - 可以处理 public class ExceptionDemo { public static void main(String[] args) { try { int result = 10 / 0; } catch (ArithmeticException e) { // 处理异常 System.out.println(\\\"捕获到算术异常: \\\" + e.getMessage()); } } }\"]},\"1244\":{\"h\":\"1.2 受检异常与非受检异常的选择\",\"t\":[\"面试常考为何选择受检或非受检异常，关键在于判断异常是否可恢复以及是否需要强制处理。\",\"受检异常适用场景：\",\"外部资源访问（文件、网络、数据库）\",\"可预见且应处理的业务异常\",\"需要调用者显式处理的情况\",\"非受检异常适用场景：\",\"编程错误（空指针、数组越界）\",\"不可恢复的配置或环境错误\",\"性能敏感场景\"]},\"1245\":{\"h\":\"2. 异常处理机制深度解析\"},\"1246\":{\"h\":\"2.1 try-catch-finally执行顺序\",\"t\":[\"面试高频考点：finally块的执行时机和返回值覆盖问题。\",\"public class FinallyExecutionDemo { public static int testFinally() { try { return 1; } catch (Exception e) { return 2; } finally { System.out.println(\\\"finally执行\\\"); // finally中的return会覆盖try/catch的return // return 3; // 不推荐 } } public static void main(String[] args) { int result = testFinally(); System.out.println(\\\"结果: \\\" + result); // 输出顺序: // finally执行 // 结果: 1 } }\"]},\"1247\":{\"h\":\"2.2 try-with-resources实现原理\",\"t\":[\"JDK7引入的try-with-resources语法糖背后的实现机制。\",\"// 编译前 public class TryWithResourcesDemo { public static void main(String[] args) { try (BufferedReader br = new BufferedReader( new FileReader(\\\"test.txt\\\"))) { System.out.println(br.readLine()); } catch (IOException e) { e.printStackTrace(); } } } // 编译后（近似） public class TryWithResourcesDemo { public static void main(String[] args) { BufferedReader br = new BufferedReader(new FileReader(\\\"test.txt\\\")); try { System.out.println(br.readLine()); } catch (IOException e) { e.printStackTrace(); } finally { if (br != null) { try { br.close(); } catch (IOException e) { e.printStackTrace(); } } } } }\"]},\"1248\":{\"h\":\"3. 异常处理最佳实践面试题\"},\"1249\":{\"h\":\"3.1 如何设计自定义异常\",\"t\":[\"优秀的自定义异常设计应包含错误码、描述信息和上下文数据。\",\"/** * 符合面试标准的自定义异常实现 */ public class BusinessException extends Exception { // 错误码 private final int errorCode; // 错误发生时间 private final LocalDateTime timestamp; // 请求ID，用于分布式追踪 private final String requestId; public BusinessException(String message, int errorCode, String requestId) { super(message); this.errorCode = errorCode; this.requestId = requestId; this.timestamp = LocalDateTime.now(); } public BusinessException(String message, Throwable cause, int errorCode, String requestId) { super(message, cause); this.errorCode = errorCode; this.requestId = requestId; this.timestamp = LocalDateTime.now(); } // Getters public int getErrorCode() { return errorCode; } public LocalDateTime getTimestamp() { return timestamp; } public String getRequestId() { return requestId; } }\"]},\"1250\":{\"h\":\"3.2 异常处理对性能的影响\",\"t\":[\"异常创建的性能开销主要来自堆栈跟踪的生成。\",\"public class ExceptionPerformanceDemo { private static final int ITERATIONS = 1_000_000; public static void main(String[] args) { // 测试正常流程性能 long normalTime = testNormalPath(); // 测试异常流程性能 long exceptionTime = testExceptionPath(); System.out.println(\\\"正常流程耗时: \\\" + normalTime + \\\"ms\\\"); System.out.println(\\\"异常流程耗时: \\\" + exceptionTime + \\\"ms\\\"); System.out.println(\\\"异常流程是正常流程的\\\" + (exceptionTime / normalTime) + \\\"倍\\\"); } private static long testNormalPath() { long start = System.currentTimeMillis(); for (int i = 0; i < ITERATIONS; i++) { int result = i * 2; } return System.currentTimeMillis() - start; } private static long testExceptionPath() { long start = System.currentTimeMillis(); for (int i = 0; i < ITERATIONS; i++) { try { if (i % 2 == 0) { throw new RuntimeException(\\\"测试异常\\\"); } } catch (RuntimeException e) { // 空处理 } } return System.currentTimeMillis() - start; } }\"]},\"1251\":{\"h\":\"知识扩展\"},\"1252\":{\"h\":\"设计思想\",\"t\":[\"异常处理的设计体现了以下重要思想：\",\"责任链模式：异常沿调用链向上传递，直到被合适的处理器捕获\",\"开闭原则：通过继承Throwable类，可以扩展新的异常类型而不修改现有代码\",\"信息隐藏：通过异常转换，隐藏底层实现细节，暴露高层业务语义\",\"防御式编程：提前预判可能的错误，通过异常机制进行保护\"]},\"1253\":{\"h\":\"避坑指南\",\"t\":[\"面试中常被问及的异常处理陷阱：\",\"异常吞噬 最常见的错误是捕获异常后不处理也不记录。\",\"// 错误示例 public void loadData() { try { // 加载数据 } catch (IOException e) { // 空catch块，吞噬异常 } } // 正确示例 public void loadData() { try { // 加载数据 } catch (IOException e) { log.error(\\\"数据加载失败\\\", e); throw new ServiceException(\\\"数据加载失败，请重试\\\", e); } }\",\"过度使用异常 用异常控制正常业务流程会严重影响性能和可读性。\",\"// 不推荐 public boolean isPositive(int number) { try { if (number <= 0) { throw new NotPositiveException(); } return true; } catch (NotPositiveException e) { return false; } } // 推荐 public boolean isPositive(int number) { return number > 0; }\"]},\"1254\":{\"h\":\"深度思考题\",\"t\":[\"思考题1：为什么Java中的异常必须显式捕获或声明，而其他语言如Python不需要？这种设计有什么优缺点？\",\"思考题1回答：Java的受检异常设计基于\\\"失败必须处理\\\"的理念，强制程序员处理可预见的错误，提高代码健壮性。优点是迫使开发者考虑异常情况，减少未处理异常导致的运行时错误；缺点是过度使用会导致代码臃肿（如IO操作需要大量try-catch），有时开发者会用空catch块简单规避，反而降低代码质量。\",\"相比之下，Python采用\\\"请求宽恕比请求许可更容易\\\"（EAFP）的风格，鼓励使用异常处理正常流程，这在某些场景下使代码更简洁。Java 8后引入的Optional和Stream API也体现了向这种风格的部分转变。\",\"思考题2：在并发编程中，如何正确处理线程中的异常？Thread.UncaughtExceptionHandler的作用是什么？\",\"思考题2回答：并发环境中异常处理有特殊挑战，因为线程中的异常无法跨线程传播。正确的处理方式包括：\",\"使用Thread.UncaughtExceptionHandler捕获未处理异常：\",\"Thread thread = new Thread(() -> { throw new RuntimeException(\\\"线程异常\\\"); }); thread.setUncaughtExceptionHandler((t, e) -> { log.error(\\\"线程{}发生未捕获异常\\\", t.getName(), e); }); thread.start();\",\"使用Future获取线程执行结果和异常：\",\"ExecutorService executor = Executors.newSingleThreadExecutor(); Future<?> future = executor.submit(() -> { throw new RuntimeException(\\\"任务异常\\\"); }); try { future.get(); } catch (ExecutionException e) { Throwable cause = e.getCause(); log.error(\\\"任务执行异常\\\", cause); } finally { executor.shutdown(); }\",\"Thread.UncaughtExceptionHandler提供了一种集中处理线程中未捕获异常的机制，避免异常导致线程静默终止而不被察觉，这在服务器应用中尤为重要。\"]},\"1255\":{\"h\":\"面试专题：反射\"},\"1256\":{\"h\":\"概述\",\"t\":[\"反射是Java语言的重要特性之一，它允许程序在运行时动态获取类的信息并操作类的属性、方法和构造函数。本专题将深入解析反射的核心概念、实现原理、应用场景以及面试中常见的问题与解答，帮助你全面掌握反射机制并从容应对面试挑战。\"]},\"1257\":{\"h\":\"知识要点\"},\"1258\":{\"h\":\"1. 反射基础概念辨析\"},\"1259\":{\"h\":\"1.1 什么是反射？\",\"t\":[\"反射是Java语言提供的一种能力，它允许程序在运行时而非编译时获取类的完整信息，并能动态操作类的属性、方法和构造函数。通过反射，我们可以打破封装性，访问类的私有成员，实现动态创建对象和调用方法。\"]},\"1260\":{\"h\":\"1.2 Class对象是什么？有哪些获取方式？\",\"t\":[\"Class对象是反射的核心，它代表一个类的字节码文件，包含了类的所有信息。获取Class对象的方式有以下四种：\",\"public class ClassObjectDemo { public static void main(String[] args) throws ClassNotFoundException { // 方式一：通过类名.class获取 Class<?> clazz1 = String.class; // 方式二：通过对象.getClass()方法获取 String str = \\\"hello\\\"; Class<?> clazz2 = str.getClass(); // 方式三：通过Class.forName()方法获取 Class<?> clazz3 = Class.forName(\\\"java.lang.String\\\"); // 方式四：通过类加载器获取 ClassLoader classLoader = ClassObjectDemo.class.getClassLoader(); Class<?> clazz4 = classLoader.loadClass(\\\"java.lang.String\\\"); // 验证所有方式获取的是同一个Class对象 System.out.println(clazz1 == clazz2); // true System.out.println(clazz1 == clazz3); // true System.out.println(clazz1 == clazz4); // true } }\"]},\"1261\":{\"h\":\"1.3 反射API主要包含哪些类？\",\"t\":[\"反射API主要包含以下几个核心类，位于java.lang.reflect包下：\",\"Class：代表类的字节码对象，是反射的入口\",\"Field：代表类的成员变量\",\"Method：代表类的方法\",\"Constructor：代表类的构造函数\",\"Modifier：代表类、字段、方法等的修饰符\",\"Parameter：代表方法的参数\"]},\"1262\":{\"h\":\"2. 反射机制实现原理\"},\"1263\":{\"h\":\"2.1 反射的底层实现机制是什么？\",\"t\":[\"Java反射机制的底层实现依赖于JVM提供的相关指令和数据结构。当我们通过反射访问类的成员时，JVM会执行以下步骤：\",\"检查访问权限，如果是私有成员，需要调用setAccessible(true)绕过访问检查\",\"查找对应的成员信息（字段、方法或构造函数）\",\"执行相应的操作（获取/设置字段值、调用方法、创建对象等）\",\"需要注意的是，反射操作会绕过编译器的类型检查，因此可能会带来安全风险和性能开销。\"]},\"1264\":{\"h\":\"2.2 反射调用的性能为什么比直接调用差？如何优化？\",\"t\":[\"反射调用的性能比直接调用差，主要原因有以下几点：\",\"反射需要在运行时解析类型信息，而直接调用在编译时就已确定\",\"反射调用需要进行安全检查和权限验证\",\"反射调用无法被JVM内联优化\",\"优化反射性能的方法：\",\"缓存Class对象、Field对象、Method对象等反射相关对象\",\"使用setAccessible(true)关闭访问检查（仅在必要时使用）\",\"对于频繁调用的方法，可以通过MethodHandle进行优化\",\"在Java 9及以上版本，可以使用VarHandle替代部分反射操作\",\"import java.lang.invoke.MethodHandle; import java.lang.invoke.MethodHandles; import java.lang.invoke.MethodType; import java.lang.reflect.Method; public class ReflectionPerformanceDemo { private static final int ITERATIONS = 10000000; private static final String STR = \\\"test\\\"; public static void main(String[] args) throws Exception { // 直接调用 long startTime = System.currentTimeMillis(); for (int i = 0; i < ITERATIONS; i++) { STR.length(); } long directTime = System.currentTimeMillis() - startTime; // 反射调用 Method lengthMethod = String.class.getMethod(\\\"length\\\"); startTime = System.currentTimeMillis(); for (int i = 0; i < ITERATIONS; i++) { lengthMethod.invoke(STR); } long reflectionTime = System.currentTimeMillis() - startTime; // MethodHandle调用 MethodHandles.Lookup lookup = MethodHandles.lookup(); MethodType methodType = MethodType.methodType(int.class); MethodHandle lengthHandle = lookup.findVirtual(String.class, \\\"length\\\", methodType); startTime = System.currentTimeMillis(); for (int i = 0; i < ITERATIONS; i++) { lengthHandle.invokeExact(STR); } long methodHandleTime = System.currentTimeMillis() - startTime; System.out.println(\\\"直接调用: \\\" + directTime + \\\"ms\\\"); System.out.println(\\\"反射调用: \\\" + reflectionTime + \\\"ms\\\"); System.out.println(\\\"MethodHandle调用: \\\" + methodHandleTime + \\\"ms\\\"); } }\"]},\"1265\":{\"h\":\"3. 反射的应用场景\"},\"1266\":{\"h\":\"3.1 反射在框架开发中有哪些应用？\",\"t\":[\"反射是许多Java框架的基础，如Spring、MyBatis、Hibernate等。以下是一些典型应用：\",\"Spring IoC容器：通过反射创建Bean对象，注入依赖\",\"MyBatis：通过反射将查询结果映射到Java对象\",\"JUnit：通过反射执行测试方法\",\"JSON序列化/反序列化：通过反射将Java对象转换为JSON字符串，或反之\",\"以Spring为例，当我们在配置文件中定义一个Bean时：\",\"<bean id=\\\"userService\\\" class=\\\"com.example.UserService\\\"/>\",\"Spring容器会通过Class.forName()方法获取UserService类的Class对象，然后通过反射调用其构造函数创建实例。\"]},\"1267\":{\"h\":\"3.2 反射与动态代理的关系是什么？\",\"t\":[\"动态代理是反射的重要应用之一。Java中的动态代理主要通过java.lang.reflect.Proxy类实现，它允许在运行时创建目标类的代理对象，并在代理对象中增强目标方法的功能。\",\"import java.lang.reflect.InvocationHandler; import java.lang.reflect.Method; import java.lang.reflect.Proxy; // 接口 interface UserService { void addUser(String username); } // 实现类 class UserServiceImpl implements UserService { @Override public void addUser(String username) { System.out.println(\\\"添加用户: \\\" + username); } } // 动态代理处理器 class LogInvocationHandler implements InvocationHandler { private Object target; public LogInvocationHandler(Object target) { this.target = target; } @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { // 前置增强 System.out.println(\\\"方法\\\" + method.getName() + \\\"开始执行\\\"); // 调用目标方法 Object result = method.invoke(target, args); // 后置增强 System.out.println(\\\"方法\\\" + method.getName() + \\\"执行结束\\\"); return result; } } public class DynamicProxyDemo { public static void main(String[] args) { UserService userService = new UserServiceImpl(); InvocationHandler handler = new LogInvocationHandler(userService); // 通过反射创建代理对象 UserService proxy = (UserService) Proxy.newProxyInstance( userService.getClass().getClassLoader(), userService.getClass().getInterfaces(), handler ); proxy.addUser(\\\"张三\\\"); } }\"]},\"1268\":{\"h\":\"4. 反射常见面试题\"},\"1269\":{\"h\":\"4.1 如何通过反射获取和设置私有字段的值？\",\"t\":[\"要通过反射获取和设置私有字段的值，需要使用Field类的setAccessible(true)方法绕过访问检查。\",\"import java.lang.reflect.Field; class Person { private String name; private int age; public Person(String name, int age) { this.name = name; this.age = age; } } public class PrivateFieldAccessDemo { public static void main(String[] args) throws Exception { Person person = new Person(\\\"张三\\\", 20); Class<?> clazz = person.getClass(); // 获取私有字段name Field nameField = clazz.getDeclaredField(\\\"name\\\"); nameField.setAccessible(true); // 绕过访问检查 String name = (String) nameField.get(person); System.out.println(\\\"原始name值: \\\" + name); // 设置私有字段name nameField.set(person, \\\"李四\\\"); System.out.println(\\\"修改后的name值: \\\" + nameField.get(person)); // 获取私有字段age Field ageField = clazz.getDeclaredField(\\\"age\\\"); ageField.setAccessible(true); int age = (int) ageField.get(person); System.out.println(\\\"原始age值: \\\" + age); // 设置私有字段age ageField.set(person, 25); System.out.println(\\\"修改后的age值: \\\" + ageField.get(person)); } }\"]},\"1270\":{\"h\":\"4.2 如何通过反射调用私有方法？\",\"t\":[\"类似地，要调用私有方法，需要使用Method类的setAccessible(true)方法。\",\"import java.lang.reflect.Method; class Calculator { private int add(int a, int b) { return a + b; } private String concat(String s1, String s2) { return s1 + s2; } } public class PrivateMethodInvokeDemo { public static void main(String[] args) throws Exception { Calculator calculator = new Calculator(); Class<?> clazz = calculator.getClass(); // 调用私有方法add Method addMethod = clazz.getDeclaredMethod(\\\"add\\\", int.class, int.class); addMethod.setAccessible(true); int sum = (int) addMethod.invoke(calculator, 10, 20); System.out.println(\\\"10 + 20 = \\\" + sum); // 调用私有方法concat Method concatMethod = clazz.getDeclaredMethod(\\\"concat\\\", String.class, String.class); concatMethod.setAccessible(true); String result = (String) concatMethod.invoke(calculator, \\\"Hello\\\", \\\"World\\\"); System.out.println(\\\"拼接结果: \\\" + result); } }\"]},\"1271\":{\"h\":\"4.3 反射是否破坏了Java的封装性？为什么？\",\"t\":[\"反射确实在一定程度上破坏了Java的封装性。封装性是面向对象的三大特性之一，它要求将对象的状态信息隐藏在对象内部，不允许外部程序直接访问。然而，通过反射，我们可以绕过访问控制符的限制，直接访问和修改私有成员。\",\"但是，反射并没有完全破坏封装性，因为：\",\"反射需要显式调用setAccessible(true)方法才能访问私有成员，这是一种有意识的行为\",\"在安全管理器（SecurityManager）存在的情况下，可以限制反射对私有成员的访问\",\"反射主要用于框架开发、调试工具等特殊场景，普通应用开发中应避免过度使用\"]},\"1272\":{\"h\":\"知识扩展\"},\"1273\":{\"h\":\"1. 设计思想\",\"t\":[\"反射体现了Java语言的动态性和灵活性，它允许程序在运行时适应变化，而不需要在编译时确定所有细节。这种设计思想在框架开发中尤为重要，它使得框架可以与任意用户自定义类协同工作，而不需要提前知道这些类的具体信息。\",\"反射的设计也体现了\\\"开-闭原则\\\"，即对扩展开放，对修改关闭。通过反射，我们可以在不修改框架源码的情况下，扩展框架的功能。\"]},\"1274\":{\"h\":\"2. 避坑指南\"},\"1275\":{\"h\":\"2.1 安全风险\",\"t\":[\"反射可以访问和修改私有成员，这可能会破坏对象的完整性和一致性。在使用反射时，应注意：\",\"避免在生产环境中过度使用反射\",\"不要随意修改不可变对象（如String、Integer等）的内部状态\",\"在有安全管理器的环境中，反射可能会受到限制\"]},\"1276\":{\"h\":\"2.2 性能问题\",\"t\":[\"如前所述，反射调用的性能比直接调用差。在性能敏感的场景中，应：\",\"缓存反射对象（Class、Field、Method等）\",\"尽量使用直接调用而非反射调用\",\"考虑使用MethodHandle等替代方案\"]},\"1277\":{\"h\":\"2.3 兼容性问题\",\"t\":[\"反射依赖于类的结构，如果类的结构发生变化（如字段名、方法名改变），反射代码可能会抛出异常。因此：\",\"反射代码应做好异常处理\",\"避免对不稳定的类使用反射\",\"在使用第三方库时，注意其版本兼容性\"]},\"1278\":{\"h\":\"3. 深度思考题\"},\"1279\":{\"h\":\"思考题1：为什么Java中的Class对象是单例的？\",\"t\":[\"思考题回答：Java中的Class对象是单例的，这是因为每个类的字节码文件在JVM中只会被加载一次，生成一个Class对象。类加载过程中，JVM会保证Class对象的唯一性，即使通过不同的类加载器加载同一个类，也会生成不同的Class对象。这种设计可以节省内存空间，同时保证类信息的一致性。\"]},\"1280\":{\"h\":\"思考题2：如何通过反射创建数组？\",\"t\":[\"思考题回答：可以通过Array类的newInstance()方法创建数组。例如：\",\"import java.lang.reflect.Array; public class ArrayCreationDemo { public static void main(String[] args) { // 创建一个长度为5的int数组 int[] intArray = (int[]) Array.newInstance(int.class, 5); // 设置数组元素 for (int i = 0; i < intArray.length; i++) { Array.set(intArray, i, i * 10); } // 获取数组元素 for (int i = 0; i < intArray.length; i++) { System.out.println(Array.get(intArray, i)); } } }\"]},\"1281\":{\"h\":\"思考题3：反射在Java模块化系统（Jigsaw）中有哪些限制？\",\"t\":[\"思考题回答：Java 9引入的模块化系统对反射进行了限制，主要包括：\",\"模块需要显式导出包才能被其他模块反射访问\",\"即使导出了包，私有成员仍然不能被反射访问，除非使用opens语句开放\",\"可以使用--add-opens JVM参数临时开放包访问，但这不是推荐做法\",\"例如，要允许反射访问java.base模块中的java.lang包，需要在模块声明中添加：\",\"module com.example { opens java.lang to com.reflection.module; }\",\"这些限制增强了Java的安全性和封装性，但也给依赖反射的框架带来了挑战。\"]},\"1282\":{\"h\":\"面试专题：泛型\"},\"1283\":{\"h\":\"概述\",\"t\":[\"泛型是Java面试中的高频考点，涉及底层实现机制、实际应用场景及最佳实践等多个维度。本章将系统梳理泛型面试中的核心问题，包括类型擦除原理、通配符使用场景、泛型与继承的关系等，通过理论解析与代码实践相结合的方式，帮助开发者全面掌握泛型面试要点，从容应对各类泛型相关问题。\"]},\"1284\":{\"h\":\"核心理论\"},\"1285\":{\"h\":\"1. 泛型基础概念辨析\"},\"1286\":{\"h\":\"1.1 泛型的本质与作用\",\"t\":[\"泛型的本质是参数化类型，即将具体类型参数化，使得代码可以操作多种数据类型而无需重复编写。其核心作用包括：\",\"类型安全：编译期检查类型，避免运行时ClassCastException\",\"代码复用：一套代码支持多种数据类型\",\"可读性提升：代码意图更清晰，无需通过注释说明类型\"]},\"1287\":{\"h\":\"1.2 泛型与重载的区别\",\"t\":[\"泛型与重载都能实现多类型支持，但机制不同：\",\"泛型：通过类型参数化实现，编译后类型擦除为同一方法\",\"重载：通过不同参数列表实现，编译后生成不同方法签名\",\"// 泛型实现多类型支持 public <T> void print(T data) { System.out.println(data); } // 重载实现多类型支持 public void print(String data) { System.out.println(data); } public void print(Integer data) { System.out.println(data); }\"]},\"1288\":{\"h\":\"1.3 泛型与数组的对比\",\"t\":[\"特性\",\"泛型\",\"数组\",\"类型检查\",\"编译期\",\"运行期\",\"可变性\",\"不可变（类型参数固定）\",\"可变（可存储子类型元素）\",\"创建限制\",\"不能创建泛型数组\",\"可以创建具体类型数组\",\"协变性\",\"不支持（List< String>不是List< Object>子类）\",\"支持（String[]是Object[]子类）\"]},\"1289\":{\"h\":\"2. 类型擦除深度解析\"},\"1290\":{\"h\":\"2.1 类型擦除的三个阶段\",\"t\":[\"擦除类型参数：将泛型类型参数替换为边界类型（无边界则为Object）\",\"擦除方法参数：调整方法签名，替换泛型参数为原始类型\",\"生成桥接方法：维持泛型多态性，确保类型安全\",\"示例：\",\"public class ErasureDemo<T extends Number> { private T value; public T getValue() { return value; } public void setValue(T value) { this.value = value; } } // 擦除后等价于 public class ErasureDemo { private Number value; public Number getValue() { return value; } public void setValue(Number value) { this.value = value; } }\"]},\"1291\":{\"h\":\"2.2 类型擦除引发的常见问题\",\"t\":[\"运行时类型判断失效：无法使用instanceof List< String>\",\"泛型静态变量共享：静态变量属于类而非泛型实例，不同类型参数共享同一静态变量\",\"异常不能是泛型：异常类不能使用泛型参数，因为异常捕获基于运行时类型\"]},\"1292\":{\"h\":\"代码实践\"},\"1293\":{\"h\":\"1. 泛型面试高频编程题\"},\"1294\":{\"h\":\"1.1 实现泛型单例模式\",\"t\":[\"public class GenericSingleton<T> { private T instance; private GenericSingleton(T instance) { this.instance = instance; } public static <T> GenericSingleton<T> getInstance(T instance) { return new GenericSingleton<>(instance); } public T getInstance() { return instance; } } // 使用 GenericSingleton<String> strSingleton = GenericSingleton.getInstance(\\\"test\\\"); GenericSingleton<Integer> intSingleton = GenericSingleton.getInstance(123);\"]},\"1295\":{\"h\":\"1.2 泛型方法实现两数交换\",\"t\":[\"public class GenericSwap { public static <T> void swap(T[] array, int i, int j) { if (array == null || i < 0 || j < 0 || i >= array.length || j >= array.length) { throw new IllegalArgumentException(\\\"Invalid parameters\\\"); } T temp = array[i]; array[i] = array[j]; array[j] = temp; } public static void main(String[] args) { Integer[] intArray = {1, 2, 3, 4}; swap(intArray, 0, 3); System.out.println(Arrays.toString(intArray)); // [4, 2, 3, 1] String[] strArray = {\\\"A\\\", \\\"B\\\", \\\"C\\\"}; swap(strArray, 1, 2); System.out.println(Arrays.toString(strArray)); // [A, C, B] } }\"]},\"1296\":{\"h\":\"1.3 通配符应用：实现通用集合拷贝\",\"t\":[\"public class CollectionCopy { // 生产者使用extends，消费者使用super public static <T> void copy(List<? extends T> src, List<? super T> dest) { for (T item : src) { dest.add(item); } } public static void main(String[] args) { List<Integer> src = Arrays.asList(1, 2, 3); List<Number> dest = new ArrayList<>(); copy(src, dest); System.out.println(dest); // [1, 2, 3] } }\"]},\"1297\":{\"h\":\"设计思想\"},\"1298\":{\"h\":\"1. 泛型设计的开闭原则体现\",\"t\":[\"泛型通过参数化类型实现了\\\"对扩展开放，对修改关闭\\\"的设计原则。以集合框架为例，ArrayList< T>通过泛型支持任意元素类型，无需为每种元素类型创建新的ArrayList子类。\"]},\"1299\":{\"h\":\"2. 泛型与依赖注入的协同\",\"t\":[\"Spring等框架将泛型与依赖注入结合，实现了类型安全的依赖管理。通过泛型类型信息，容器能够精确匹配Bean，减少了显式类型转换，提升了开发效率。\"]},\"1300\":{\"h\":\"避坑指南\"},\"1301\":{\"h\":\"1. 避免泛型类型的无意识绕开\",\"t\":[\"List<String> strList = new ArrayList<>(); // 错误：通过原始类型绕开泛型检查 List rawList = strList; rawList.add(123); // 编译通过，运行时不会报错 String str = strList.get(0); // 运行时抛出ClassCastException\"]},\"1302\":{\"h\":\"2. 正确使用泛型通配符\",\"t\":[\"避免过度使用无界通配符（?），丧失类型安全\",\"遵循PECS原则选择通配符方向\",\"复杂泛型场景使用辅助方法捕获类型参数\"]},\"1303\":{\"h\":\"3. 泛型方法返回值的类型推断陷阱\",\"t\":[\"public <T> T getValue() { return (T) \\\"test\\\"; // 不安全的类型转换 } // 调用时可能静默失败 Integer value = getValue(); // 编译通过，运行时抛出ClassCastException\"]},\"1304\":{\"h\":\"深度思考题\",\"t\":[\"如何在运行时获取泛型的具体类型信息？（提示：通过匿名内部类或反射获取TypeToken）\",\"泛型擦除机制对Java虚拟机的影响是什么？为什么说泛型是Java的语法糖？\",\"如何设计一个支持泛型的缓存框架？需要考虑哪些泛型相关的设计要点？\"]},\"1305\":{\"h\":\"思考题\"},\"1306\":{\"h\":\"思考题回答\"},\"1307\":{\"h\":\"面试专题：网络编程\"},\"1308\":{\"h\":\"概述\",\"t\":[\"网络编程是Java面试中的核心考察领域，涉及底层通信原理、并发处理、性能优化等关键技能。本章节将系统梳理网络编程面试高频考点，从基础理论到实战应用，帮助你构建完整的知识体系并掌握面试应答策略。\"]},\"1309\":{\"h\":\"核心理论\"},\"1310\":{\"h\":\"1. TCP/IP协议深度解析\"},\"1311\":{\"h\":\"1.1 TCP三次握手与四次挥手\",\"t\":[\"TCP连接建立和断开的过程是面试高频考点，需要理解每个阶段的状态变化和设计原因。\",\"三次握手过程：\",\"客户端发送SYN包（同步序列编号），进入SYN_SENT状态\",\"服务器收到SYN包，回复SYN+ACK包，进入SYN_RCVD状态\",\"客户端收到SYN+ACK包，回复ACK包，双方进入ESTABLISHED状态\",\"为什么需要三次握手？\",\"防止已失效的连接请求报文段突然又传送到服务器，导致错误\",\"确保双方都具备发送和接收能力\",\"协商初始序列号\",\"四次挥手过程：\",\"主动方发送FIN包，进入FIN_WAIT_1状态\",\"被动方收到FIN包，回复ACK包，进入CLOSE_WAIT状态\",\"被动方准备关闭，发送FIN包，进入LAST_ACK状态\",\"主动方收到FIN包，回复ACK包，进入TIME_WAIT状态，等待2MSL后关闭\",\"为什么TIME_WAIT状态需要等待2MSL？\",\"确保最后一个ACK报文能到达对方\",\"防止\\\"已失效的连接请求报文段\\\"出现在本连接中\"]},\"1312\":{\"h\":\"1.2 TCP可靠传输机制\",\"t\":[\"TCP通过多种机制保证可靠传输，是面试重点考察内容：\",\"校验和：检测数据在传输过程中的差错\",\"确认应答：收到数据后发送ACK确认\",\"超时重传：发送数据后设置定时器，超时未收到ACK则重传\",\"流量控制：通过滑动窗口机制控制发送速率，避免接收方缓冲区溢出\",\"拥塞控制：慢开始、拥塞避免、快重传、快恢复机制，避免网络拥塞\",\"数据分片：将大数据分成适合MTU的报文段\",\"有序到达：通过序列号确保数据按序到达\",\"重复丢弃：通过序列号识别重复数据并丢弃\",\"滑动窗口原理： 发送方和接收方各维护一个窗口，窗口内的数据可以连续发送无需等待确认。接收方通过ACK报文告知发送方可接收的窗口大小，实现动态流量控制。\",\"/** * TCP滑动窗口机制简化模型 * 展示发送窗口如何根据接收窗口动态调整 */ public class SlidingWindowDemo { // 发送窗口参数 private int sendBase; // 已发送但未确认的第一个字节序号 private int nextSeq; // 下一个要发送的字节序号 private int windowSize; // 当前窗口大小 private int maxWindowSize; // 最大窗口大小 private boolean[] acked; // 记录已确认的报文 // 接收窗口参数 private int rcvWindow; // 接收窗口大小 private int expectedSeq; // 期望接收的下一个字节序号 /** * 收到接收方的ACK，更新发送窗口 */ public void onAckReceived(int ackSeq, int windowSize) { // 更新已确认的序号 for (int i = sendBase; i < ackSeq; i++) { acked[i] = true; } // 移动发送窗口基址到第一个未确认的序号 while (sendBase < acked.length && acked[sendBase]) { sendBase++; } // 更新窗口大小 this.windowSize = Math.min(windowSize, maxWindowSize); System.out.println(\\\"发送窗口更新: [\\\" + sendBase + \\\", \\\" + (sendBase + windowSize) + \\\")\\\"); } /** * 发送数据 */ public void sendData() { // 可以发送窗口内的所有数据 while (nextSeq < sendBase + windowSize && nextSeq < acked.length) { System.out.println(\\\"发送数据: \\\" + nextSeq); nextSeq++; } } }\"]},\"1313\":{\"h\":\"2. Java IO模型演进\",\"t\":[\"Java IO模型经历了从BIO到NIO再到AIO的演进，理解各种模型的优缺点和适用场景是面试必备知识。\"]},\"1314\":{\"h\":\"2.1 BIO (Blocking IO)\",\"t\":[\"特点：同步阻塞IO，每个连接需要一个独立线程处理 优点：模型简单，编程容易 缺点：资源消耗大，并发能力低 适用场景：连接数少且固定的架构\",\"/** * BIO服务器示例 * 每个客户端连接需要一个独立线程处理 */ public class BioServer { public static void main(String[] args) throws IOException { ServerSocket serverSocket = new ServerSocket(8080); System.out.println(\\\"BIO服务器启动，端口: 8080\\\"); while (true) { // 阻塞等待客户端连接 Socket socket = serverSocket.accept(); System.out.println(\\\"新客户端连接: \\\" + socket.getInetAddress()); // 为每个客户端创建新线程处理 new Thread(() -> { try (InputStream in = socket.getInputStream(); OutputStream out = socket.getOutputStream(); BufferedReader reader = new BufferedReader(new InputStreamReader(in)); PrintWriter writer = new PrintWriter(out, true)) { String line; // 阻塞读取客户端数据 while ((line = reader.readLine()) != null) { System.out.println(\\\"收到客户端消息: \\\" + line); writer.println(\\\"服务器已收到: \\\" + line); // 客户端发送exit时断开连接 if (\\\"exit\\\".equals(line)) { break; } } System.out.println(\\\"客户端断开连接\\\"); } catch (IOException e) { e.printStackTrace(); } finally { try { socket.close(); } catch (IOException e) { e.printStackTrace(); } } }).start(); } } }\"]},\"1315\":{\"h\":\"2.2 NIO (Non-blocking IO)\",\"t\":[\"特点：同步非阻塞IO，基于Selector、Channel和Buffer 优点：单线程处理多个连接，资源消耗低，并发能力强 缺点：编程复杂度高 适用场景：高并发、高吞吐量的网络应用\",\"NIO三大核心组件：\",\"Channel：双向通道，支持读写操作\",\"Buffer：缓冲区，数据读写的容器\",\"Selector：多路复用器，监控多个Channel的事件\",\"/** * NIO服务器示例 * 单线程处理多个客户端连接 */ public class NioServer { public static void main(String[] args) throws IOException { // 创建ServerSocketChannel ServerSocketChannel serverSocketChannel = ServerSocketChannel.open(); serverSocketChannel.socket().bind(new InetSocketAddress(8080)); serverSocketChannel.configureBlocking(false); // 创建Selector Selector selector = Selector.open(); // 注册Accept事件 serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT); System.out.println(\\\"NIO服务器启动，端口: 8080\\\"); while (true) { // 阻塞等待事件就绪 selector.select(); // 获取就绪事件集合 Set<SelectionKey> selectionKeys = selector.selectedKeys(); Iterator<SelectionKey> iterator = selectionKeys.iterator(); while (iterator.hasNext()) { SelectionKey key = iterator.next(); iterator.remove(); try { // 处理Accept事件 if (key.isAcceptable()) { handleAccept(key); } // 处理Read事件 if (key.isReadable()) { handleRead(key); } } catch (IOException e) { key.cancel(); key.channel().close(); } } } } /** * 处理客户端连接 */ private static void handleAccept(SelectionKey key) throws IOException { ServerSocketChannel serverSocketChannel = (ServerSocketChannel) key.channel(); SocketChannel socketChannel = serverSocketChannel.accept(); socketChannel.configureBlocking(false); System.out.println(\\\"新客户端连接: \\\" + socketChannel.getRemoteAddress()); // 注册Read事件，并关联缓冲区 ByteBuffer buffer = ByteBuffer.allocate(1024); socketChannel.register(key.selector(), SelectionKey.OP_READ, buffer); } /** * 处理客户端读事件 */ private static void handleRead(SelectionKey key) throws IOException { SocketChannel socketChannel = (SocketChannel) key.channel(); ByteBuffer buffer = (ByteBuffer) key.attachment(); int bytesRead = socketChannel.read(buffer); if (bytesRead > 0) { buffer.flip(); byte[] bytes = new byte[buffer.remaining()]; buffer.get(bytes); String message = new String(bytes, StandardCharsets.UTF_8); System.out.println(\\\"收到客户端消息: \\\" + message); // 回复客户端 String response = \\\"服务器已收到: \\\" + message; buffer.clear(); buffer.put(response.getBytes(StandardCharsets.UTF_8)); buffer.flip(); socketChannel.write(buffer); // 客户端发送exit时断开连接 if (\\\"exit\\\".equals(message.trim())) { socketChannel.close(); System.out.println(\\\"客户端断开连接\\\"); } } else if (bytesRead == -1) { // 客户端断开连接 socketChannel.close(); System.out.println(\\\"客户端断开连接\\\"); } } }\"]},\"1316\":{\"h\":\"2.3 AIO (Asynchronous IO)\",\"t\":[\"特点：异步非阻塞IO，基于回调机制 优点：完全异步，无需Selector轮询 缺点：实现复杂，JDK原生支持有限 适用场景：连接数多且连接时间短的应用\"]},\"1317\":{\"h\":\"3. 网络编程核心概念\"},\"1318\":{\"h\":\"3.1 阻塞与非阻塞\",\"t\":[\"阻塞：调用结果返回前，当前线程会被挂起，直到得到结果\",\"非阻塞：调用不会阻塞当前线程，立即返回结果或错误\"]},\"1319\":{\"h\":\"3.2 同步与异步\",\"t\":[\"同步：调用者主动等待结果返回\",\"异步：调用者不会立即得到结果，而是通过回调等方式被动通知\"]},\"1320\":{\"h\":\"3.3 多路复用\",\"t\":[\"单个线程同时监控多个IO通道，当某个通道就绪时才进行处理，提高系统吞吐量。\"]},\"1321\":{\"h\":\"3.4 零拷贝\",\"t\":[\"避免数据在用户空间和内核空间之间来回拷贝，提高IO效率：\",\"mmap+write：减少一次CPU拷贝\",\"sendfile：完全零拷贝（需要操作系统支持）\",\"/** * 使用NIO的零拷贝示例 */ public class ZeroCopyDemo { public static void main(String[] args) throws IOException { String sourcePath = \\\"large_file.dat\\\"; String destPath = \\\"copied_file.dat\\\"; // 传统IO拷贝 long startTime = System.currentTimeMillis(); traditionalCopy(sourcePath, destPath + \\\"_traditional\\\"); System.out.println(\\\"传统IO拷贝耗时: \\\" + (System.currentTimeMillis() - startTime) + \\\"ms\\\"); // NIO零拷贝 startTime = System.currentTimeMillis(); nioZeroCopy(sourcePath, destPath + \\\"_nio\\\"); System.out.println(\\\"NIO零拷贝耗时: \\\" + (System.currentTimeMillis() - startTime) + \\\"ms\\\"); } /** * 传统IO拷贝 */ private static void traditionalCopy(String source, String dest) throws IOException { try (InputStream in = new FileInputStream(source); OutputStream out = new FileOutputStream(dest); byte[] buffer = new byte[4096]) { int bytesRead; while ((bytesRead = in.read(buffer)) != -1) { out.write(buffer, 0, bytesRead); } } } /** * NIO零拷贝 */ private static void nioZeroCopy(String source, String dest) throws IOException { try (FileChannel inChannel = new FileInputStream(source).getChannel(); FileChannel outChannel = new FileOutputStream(dest).getChannel()) { inChannel.transferTo(0, inChannel.size(), outChannel); } } }\"]},\"1322\":{\"h\":\"代码实践\"},\"1323\":{\"h\":\"1. 网络编程常见面试题\"},\"1324\":{\"h\":\"1.1 实现简单的HTTP服务器\",\"t\":[\"使用Java NIO实现一个简单的HTTP服务器，能够处理GET请求并返回响应。\",\"/** * 简单HTTP服务器实现 * 处理GET请求并返回响应 */ public class SimpleHttpServer { public static void main(String[] args) throws IOException { ServerSocketChannel serverSocketChannel = ServerSocketChannel.open(); serverSocketChannel.socket().bind(new InetSocketAddress(8080)); serverSocketChannel.configureBlocking(false); Selector selector = Selector.open(); serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT); System.out.println(\\\"简单HTTP服务器启动，端口: 8080\\\"); while (true) { selector.select(); Iterator<SelectionKey> iterator = selector.selectedKeys().iterator(); while (iterator.hasNext()) { SelectionKey key = iterator.next(); iterator.remove(); if (key.isAcceptable()) { handleAccept(key); } else if (key.isReadable()) { handleRead(key); } } } } private static void handleAccept(SelectionKey key) throws IOException { ServerSocketChannel serverSocketChannel = (ServerSocketChannel) key.channel(); SocketChannel socketChannel = serverSocketChannel.accept(); socketChannel.configureBlocking(false); socketChannel.register(key.selector(), SelectionKey.OP_READ); } private static void handleRead(SelectionKey key) throws IOException { SocketChannel socketChannel = (SocketChannel) key.channel(); ByteBuffer buffer = ByteBuffer.allocate(1024); try { int bytesRead = socketChannel.read(buffer); if (bytesRead > 0) { buffer.flip(); byte[] bytes = new byte[buffer.remaining()]; buffer.get(bytes); String request = new String(bytes, StandardCharsets.UTF_8); // 解析HTTP请求 String[] requestLines = request.split(\\\"\\\\r\\\\n\\\"); String[] firstLine = requestLines[0].split(\\\" \\\"); String method = firstLine[0]; String path = firstLine[1]; System.out.println(\\\"收到请求: \\\" + method + \\\" \\\" + path); // 构建HTTP响应 String response = \\\"HTTP/1.1 200 OK\\\\r\\\\n\\\" + \\\"Content-Type: text/html\\\\r\\\\n\\\" + \\\"Connection: close\\\\r\\\\n\\\" + \\\"\\\\r\\\\n\\\" + \\\"<h1>Hello, HTTP Server</h1>\\\" + \\\"<p>Request Path: \\\" + path + \\\"</p>\\\"; ByteBuffer responseBuffer = ByteBuffer.wrap(response.getBytes(StandardCharsets.UTF_8)); socketChannel.write(responseBuffer); } } finally { socketChannel.close(); } } }\"]},\"1325\":{\"h\":\"1.2 解决TCP粘包问题\",\"t\":[\"TCP粘包是由于TCP是流式协议，多个数据包可能被合并发送，需要在应用层进行拆包处理。\",\"常见解决方案：\",\"固定长度消息\",\"消息长度+消息内容格式\",\"特殊分隔符\",\"/** * 基于长度前缀的TCP粘包解决方案 * 消息格式: [4字节长度][消息内容] */ public class TcpUnpacker { private final ByteBuffer lengthBuffer = ByteBuffer.allocate(4); private ByteBuffer contentBuffer; private int contentLength = -1; /** * 处理接收到的数据，返回完整的消息列表 */ public List<byte[]> process(byte[] data) { List<byte[]> messages = new ArrayList<>(); ByteBuffer buffer = ByteBuffer.wrap(data); while (true) { // 读取消息长度 if (contentLength == -1) { while (buffer.hasRemaining() && lengthBuffer.hasRemaining()) { lengthBuffer.put(buffer.get()); } // 如果长度字段已读取完成 if (!lengthBuffer.hasRemaining()) { lengthBuffer.flip(); contentLength = lengthBuffer.getInt(); contentBuffer = ByteBuffer.allocate(contentLength); lengthBuffer.clear(); } else { break; } } // 读取消息内容 if (contentLength != -1) { while (buffer.hasRemaining() && contentBuffer.hasRemaining()) { contentBuffer.put(buffer.get()); } // 如果消息内容已读取完成 if (!contentBuffer.hasRemaining()) { contentBuffer.flip(); byte[] message = new byte[contentLength]; contentBuffer.get(message); messages.add(message); // 重置状态，准备读取下一个消息 contentLength = -1; contentBuffer = null; } else { break; } } } return messages; } /** * 打包消息，添加长度前缀 */ public byte[] pack(byte[] message) { ByteBuffer buffer = ByteBuffer.allocate(4 + message.length); buffer.putInt(message.length); buffer.put(message); return buffer.array(); } }\"]},\"1326\":{\"h\":\"1.3 实现线程安全的连接池\",\"t\":[\"连接池用于管理网络连接，避免频繁创建和关闭连接的开销。\",\"/** * 简单的TCP连接池实现 */ public class ConnectionPool { private final String host; private final int port; private final int maxSize; private final BlockingQueue<Socket> pool; private final AtomicInteger currentSize = new AtomicInteger(0); private volatile boolean isClosed = false; /** * 构造连接池 * @param host 服务器主机 * @param port 服务器端口 * @param maxSize 最大连接数 */ public ConnectionPool(String host, int port, int maxSize) { this.host = host; this.port = port; this.maxSize = maxSize; this.pool = new LinkedBlockingQueue<>(maxSize); } /** * 获取连接 * @return Socket连接 * @throws IOException IO异常 * @throws InterruptedException 线程中断异常 */ public Socket getConnection() throws IOException, InterruptedException { if (isClosed) { throw new IllegalStateException(\\\"连接池已关闭\\\"); } // 尝试从池中获取连接 Socket socket = pool.poll(); if (socket != null && !socket.isClosed() && socket.isConnected()) { return socket; } // 池中无可用连接，创建新连接 if (currentSize.get() < maxSize) { currentSize.incrementAndGet(); try { return createNewConnection(); } catch (IOException e) { currentSize.decrementAndGet(); throw e; } } // 达到最大连接数，等待可用连接 socket = pool.take(); if (socket != null && !socket.isClosed() && socket.isConnected()) { return socket; } // 等待到的连接不可用，递归获取 return getConnection(); } /** * 归还连接到池 * @param socket 要归还的连接 */ public void releaseConnection(Socket socket) { if (isClosed || socket == null || socket.isClosed()) { return; } try { // 重置连接状态 socket.setSoTimeout(0); socket.setTcpNoDelay(true); // 将连接放入池中 if (!pool.offer(socket)) { // 池已满，关闭连接 socket.close(); currentSize.decrementAndGet(); } } catch (IOException e) { socket.close(); currentSize.decrementAndGet(); } } /** * 创建新连接 */ private Socket createNewConnection() throws IOException { Socket socket = new Socket(host, port); socket.setKeepAlive(true); socket.setTcpNoDelay(true); return socket; } /** * 关闭连接池 */ public void close() { isClosed = true; pool.forEach(socket -> { try { socket.close(); } catch (IOException e) { // 忽略关闭异常 } }); pool.clear(); currentSize.set(0); } /** * 获取当前活跃连接数 */ public int getActiveCount() { return currentSize.get() - pool.size(); } /** * 获取池中可用连接数 */ public int getIdleCount() { return pool.size(); } }\"]},\"1327\":{\"h\":\"设计思想\"},\"1328\":{\"h\":\"1. Reactor模式\",\"t\":[\"Reactor模式是高性能网络编程的核心模式，基于事件驱动，通过Selector多路复用实现一个线程处理多个连接。\",\"Reactor模式组件：\",\"Reactor：负责监听和分发事件\",\"Handler：负责处理事件\",\"Acceptor：负责处理连接建立事件\",\"Event：IO事件（读、写、连接等）\",\"单Reactor单线程模型： 一个Reactor线程负责所有事件的监听和处理，简单但无法充分利用多核CPU。\",\"单Reactor多线程模型： Reactor线程负责事件监听和分发，业务处理交给线程池，提高并发处理能力。\",\"主从Reactor多线程模型： 主Reactor负责连接建立，从Reactor负责IO事件处理，充分利用多核CPU，Netty采用此模型。\"]},\"1329\":{\"h\":\"2. 网络编程中的设计模式\"},\"1330\":{\"h\":\"2.1 观察者模式\",\"t\":[\"用于事件监听机制，当事件发生时通知所有注册的观察者。 在NIO中，Selector注册SelectionKey就是观察者模式的应用。\"]},\"1331\":{\"h\":\"2.2 工厂模式\",\"t\":[\"用于创建网络连接、处理器等对象，隐藏创建细节。 Netty中的ChannelFactory就是工厂模式的应用。\"]},\"1332\":{\"h\":\"2.3 责任链模式\",\"t\":[\"用于请求处理流程，多个处理器依次处理请求。 Netty的ChannelPipeline就是责任链模式的典型应用。\",\"/** * Netty责任链模式示例 * ChannelPipeline中的处理器依次处理请求 */ public class NettyPipelineDemo { public static void main(String[] args) { EventLoopGroup bossGroup = new NioEventLoopGroup(1); EventLoopGroup workerGroup = new NioEventLoopGroup(); try { ServerBootstrap bootstrap = new ServerBootstrap(); bootstrap.group(bossGroup, workerGroup) .channel(NioServerSocketChannel.class) .childHandler(new ChannelInitializer<SocketChannel>() { @Override protected void initChannel(SocketChannel ch) throws Exception { ChannelPipeline pipeline = ch.pipeline(); // 添加处理器到责任链 pipeline.addLast(new LoggingHandler(LogLevel.INFO)); pipeline.addLast(new LengthFieldBasedFrameDecoder(1024, 0, 4, 0, 4)); pipeline.addLast(new StringDecoder()); pipeline.addLast(new StringEncoder()); pipeline.addLast(new BusinessHandler()); } }); ChannelFuture future = bootstrap.bind(8080).sync(); System.out.println(\\\"Netty服务器启动，端口: 8080\\\"); future.channel().closeFuture().sync(); } catch (InterruptedException e) { e.printStackTrace(); } finally { bossGroup.shutdownGracefully(); workerGroup.shutdownGracefully(); } } /** * 业务处理器 */ static class BusinessHandler extends SimpleChannelInboundHandler<String> { @Override protected void channelRead0(ChannelHandlerContext ctx, String msg) throws Exception { System.out.println(\\\"收到消息: \\\" + msg); ctx.writeAndFlush(\\\"处理完成: \\\" + msg); } } }\"]},\"1333\":{\"h\":\"2.4 装饰器模式\",\"t\":[\"用于动态添加对象功能，如为IO流添加缓冲、加密等功能。 Java IO中的BufferedInputStream、DataInputStream等都是装饰器模式的应用。\"]},\"1334\":{\"h\":\"避坑指南\"},\"1335\":{\"h\":\"1. 常见网络编程错误\"},\"1336\":{\"h\":\"1.1 连接泄漏\",\"t\":[\"问题：未正确关闭Socket连接，导致资源耗尽 解决方案：\",\"使用try-with-resources自动关闭资源\",\"实现连接池管理连接生命周期\",\"添加连接泄漏检测机制\",\"// 错误示例：未关闭连接 public void sendData(String host, int port, String data) throws IOException { Socket socket = new Socket(host, port); OutputStream out = socket.getOutputStream(); out.write(data.getBytes()); // 未关闭socket和out } // 正确示例：使用try-with-resources public void sendData(String host, int port, String data) throws IOException { try (Socket socket = new Socket(host, port); OutputStream out = socket.getOutputStream()) { out.write(data.getBytes()); out.flush(); } }\"]},\"1337\":{\"h\":\"1.2 忽略异常处理\",\"t\":[\"问题：未妥善处理网络异常，导致程序不稳定 解决方案：\",\"捕获并处理特定异常而非通用Exception\",\"添加重试机制处理临时网络故障\",\"记录详细异常日志便于排查\",\"// 错误示例：捕获通用异常 public void connect() { try { // 网络操作 } catch (Exception e) { // 简单打印异常 e.printStackTrace(); } } // 正确示例：针对性异常处理 public void connect() { int retryCount = 0; while (retryCount < 3) { try { // 网络操作 Socket socket = new Socket(host, port); break; } catch (ConnectException e) { log.error(\\\"连接失败，正在重试... ({}次)\\\", retryCount + 1, e); retryCount++; try { Thread.sleep(1000 * (retryCount + 1)); // 指数退避 } catch (InterruptedException ie) { Thread.currentThread().interrupt(); break; } } catch (IOException e) { log.error(\\\"IO异常，无法继续\\\", e); throw new NetworkException(\\\"网络操作失败\\\", e); } } }\"]},\"1338\":{\"h\":\"1.3 缓冲区使用不当\",\"t\":[\"问题：NIO缓冲区flip()、clear()等方法使用不当导致数据错误 解决方案：\",\"清晰理解缓冲区的三个状态：写模式、读模式、清空模式\",\"操作缓冲区后及时调用flip()切换到读模式\",\"读取完成后调用clear()或compact()准备下次写入\",\"// 错误示例：缓冲区使用不当 public void readData(SocketChannel channel) throws IOException { ByteBuffer buffer = ByteBuffer.allocate(1024); channel.read(buffer); // 未调用flip()切换到读模式 byte[] data = new byte[buffer.remaining()]; buffer.get(data); // 读取到错误数据 } // 正确示例：正确使用缓冲区 public void readData(SocketChannel channel) throws IOException { ByteBuffer buffer = ByteBuffer.allocate(1024); int bytesRead = channel.read(buffer); if (bytesRead > 0) { buffer.flip(); // 切换到读模式 byte[] data = new byte[buffer.remaining()]; buffer.get(data); // 处理数据 if (buffer.hasRemaining()) { buffer.compact(); // 保留未读取数据 } else { buffer.clear(); // 清空缓冲区 } } }\"]},\"1339\":{\"h\":\"1.4 未设置SO_TIMEOUT\",\"t\":[\"问题：Socket操作未设置超时，导致线程永久阻塞 解决方案：\",\"设置合理的SO_TIMEOUT（read超时）\",\"设置连接超时\",\"使用NIO的非阻塞模式\",\"// 设置Socket超时 Socket socket = new Socket(); // 设置连接超时 socket.connect(new InetSocketAddress(host, port), 5000); // 设置读取超时 socket.setSoTimeout(3000);\"]},\"1340\":{\"h\":\"2. 性能优化建议\"},\"1341\":{\"h\":\"2.1 使用NIO而非BIO\",\"t\":[\"高并发场景下，NIO的多路复用机制比BIO的多线程模型更高效。\"]},\"1342\":{\"h\":\"2.2 合理设置缓冲区大小\",\"t\":[\"缓冲区太小会导致频繁IO，太大则浪费内存，一般建议4KB~64KB。\"]},\"1343\":{\"h\":\"2.3 使用连接池\",\"t\":[\"复用连接减少TCP握手开销，特别是短连接场景。\"]},\"1344\":{\"h\":\"2.4 启用TCP_NODELAY\",\"t\":[\"禁用Nagle算法，减少网络延迟（适用于实时性要求高的场景）。\"]},\"1345\":{\"h\":\"2.5 使用零拷贝技术\",\"t\":[\"减少数据拷贝次数，提高大文件传输性能。\"]},\"1346\":{\"h\":\"2.6 异步处理业务逻辑\",\"t\":[\"网络IO线程只处理IO操作，耗时业务逻辑交给专门的线程池处理。\"]},\"1347\":{\"h\":\"深度思考题\",\"t\":[\"思考题1：在高并发网络编程中，如何设计一个能够支撑百万级并发连接的服务器架构？\",\"思考题回答： 支撑百万级并发连接的服务器架构设计要点：\",\"IO模型选择：\",\"采用主从Reactor多线程模型\",\"主Reactor处理连接建立，从Reactor处理IO事件\",\"每个CPU核心绑定一个Reactor线程，避免线程切换开销\",\"线程模型优化：\",\"分离IO线程和业务线程\",\"IO线程仅处理网络读写，不做复杂业务逻辑\",\"业务线程池按CPU核心数的2~4倍配置\",\"使用无锁队列传递任务\",\"网络参数调优：\",\"增大文件描述符限制（ulimit -n）\",\"调大TCP缓冲区（SO_RCVBUF, SO_SNDBUF）\",\"启用TCP快速回收（tcp_tw_recycle）\",\"调整TCP连接超时参数\",\"内存管理：\",\"使用对象池复用缓冲区和临时对象\",\"避免频繁分配和释放内存\",\"实现内存使用监控和告警\",\"架构层面：\",\"采用分布式架构，水平扩展\",\"使用负载均衡分散流量\",\"引入消息队列削峰填谷\",\"CDN加速静态资源\",\"监控与运维：\",\"实时监控连接数、吞吐量、延迟等指标\",\"实现自动扩缩容\",\"建立完善的告警机制\",\"思考题2：Netty相比JDK原生NIO有哪些优势？在哪些场景下适合使用Netty？\",\"思考题回答： Netty相比JDK原生NIO的优势：\",\"易用性：\",\"封装了复杂的NIO操作，提供简洁API\",\"解决了NIO的诸多痛点（如Selector空轮询bug）\",\"提供丰富的开箱即用的编解码器\",\"性能优化：\",\"零拷贝机制（CompositeByteBuf、FileRegion）\",\"内存池管理，减少GC开销\",\"高效的Reactor线程模型\",\"可配置的IO线程数\",\"可靠性：\",\"完善的异常处理机制\",\"断线重连支持\",\"流量控制和背压支持\",\"功能丰富：\",\"支持多种协议（HTTP、WebSocket、Protobuf等）\",\"内置多种编解码器\",\"支持SSL/TLS加密\",\"提供ChannelPipeline责任链模式\",\"适合使用Netty的场景：\",\"高性能服务器：如游戏服务器、聊天服务器\",\"RPC框架：如Dubbo、gRPC等底层通信\",\"消息中间件：如 RocketMQ、Kafka 等内部通信\",\"网关：API网关、反向代理\",\"实时通信系统：WebSocket服务\",\"大数据处理：数据传输通道\",\"Netty不适合的场景：\",\"简单的HTTP服务器（可考虑Spring Boot内置服务器）\",\"对性能要求不高的小型应用\",\"快速原型开发（开发效率不如Spring生态）\"]},\"1348\":{\"h\":\"ELK登录认证配置\"},\"1349\":{\"h\":\"ELK登录认证\",\"t\":[\"当我们安装好ELK后，默认是可以直接访问到kibana的，可以直接查看收集到的信息，这样很不安全。\",\"很多人采用的是Nginx代理来做登录验证功能，这也是一种实现方式，但是我们还有另一种更加优雅的方式，kibana其实有为我们提供认证登录的方式。\",\"下面我将介绍通过kibana认证登录的方式访问elk\",\"实现步骤\",\"1、ES设置密码\",\"2、Kibana设置连接方式\",\"3、Logstash设置连接方式\"]},\"1350\":{\"h\":\"一、ElasticSearch安全认证\",\"t\":[\"给es加上用户名和密码（docker启动方法一致）\"]},\"1351\":{\"h\":\"1、编辑 Elasticsearch 配置文件\",\"t\":[\"#编辑 Elasticsearch 配置文件elasticsearch.yml vim /etc/elasticsearch/elasticsearch.yml\"]},\"1352\":{\"h\":\"2、加上开启验证功能配置\",\"t\":[\"# 开启密码 xpack.security.transport.ssl.enabled: true xpack.security.enabled: true\"]},\"1353\":{\"h\":\"3、保存重启 Elasticsearch 服务\",\"t\":[\"systemctl restart elasticsearch 或者 docker restart xxx\"]},\"1354\":{\"h\":\"4、设置密码\",\"t\":[\"1、linux版 sudo /usr/share/elasticsearch/bin/elasticsearch-setup-passwords interactive 2、docker版 # 进入docker docker exec -it elk /bin/bash cd /opt/elasticsearch/bin # 手动设置密码 ./elasticsearch-setup-passwords interactive\",\"在后面的提示中配置密码，配置密码即可, 会有很多个密码， 建议都配一样的\"]},\"1355\":{\"h\":\"5、验证是否生效\",\"t\":[\" 1、直接访问浏览器是否提示需要输入认证信息 127.0.0.1：9200 或者 2、命令提示是否未认证报错 curl 127.0.0.1:9200\"]},\"1356\":{\"h\":\"二、Kibana安全认证\",\"t\":[\"此处有两种方法：\"]},\"1357\":{\"h\":\"1、方法一\",\"t\":[\"在 kibana.yml 文件中填写连接ES的用户凭证，\",\"# elk体系有很多的用户组，elastic是默认的用户组之一，可以使用默认的用户，也可以自定义用户 elasticsearch.username: \\\"elastic\\\" elasticsearch.password: \\\"1qaz@WSX3edc\\\"\"]},\"1358\":{\"h\":\"2、方法二\",\"t\":[\"如果你不想将用户ID和密码放在kibana.yml文件中明文配置，可以将它们存储在密钥库中。运行以下命令以创建Kibana密钥库并添加配置\",\"./bin/kibana-keystore create ./bin/kibana-keystore add elasticsearch.username 【输入elasticsearch用户名】 ./bin/kibana-keystore add elasticsearch.password 【输入elasticsearch的密码】\"]},\"1359\":{\"h\":\"3、重启服务\",\"t\":[\"systemctl restart kibana 或者 docker restart xxx\"]},\"1360\":{\"h\":\"4、、验证是否生效\",\"t\":[\"浏览器中输入kibana的地址，如http://127.0.0.1:5601/，进入页面\"]},\"1361\":{\"h\":\"三、Logstash安全认证\"},\"1362\":{\"h\":\"1、修改Logstash配置文件\",\"t\":[\"vim /etc/logstash/conf.d/30-elasticsearch-output.conf #有的不叫这个，具体叫啥根据事实而定 vim /etc/logstash/conf.d/xxx.com\"]},\"1363\":{\"h\":\"2、添加es账号和密码\",\"t\":[\"output { elasticsearch { hosts => [\\\"localhost:9200\\\"] user => \\\"elastic\\\" password => \\\"123456\\\" manage_template => false index => \\\"%{[@metadata][beat]}-%{[@metadata][version]}-%{+YYYY.MM.dd}\\\" } }\"]},\"1364\":{\"h\":\"3、重启服务\",\"t\":[\"systemctl restart logstash 或者 docker restart xxx\",\"ELK的密码认证方式到此成功设置完毕\"]},\"1365\":{\"h\":\"四、修改用户密码（可选）\",\"t\":[\"在 “管理” 里面可以看见多了个“安全性”\",\"可以修改“用户/角色”的密码以及创建“新用户/角色”。\"]},\"1366\":{\"h\":\"Linux 配置ELK开启自启动配置\"},\"1367\":{\"h\":\"各中间件默认端口：\",\"t\":[\"nignx:8089、8090 nacos:8848 kibana端口：5601 elasticsearch端口：9200 logstash端口：5044 kafka端口：9092 redis端口：6379 mysql端口：3306\"]},\"1368\":{\"h\":\"设置开启自启动\",\"t\":[\"#chkconfig: - 21 87\",\"开启模式：\",\"- 代表所有运行模式不开启，可以修改开启模式为2345\",\"开启顺序：\",\"值越小，优先权越高\",\"如果A服务需要依赖B服务启动，那A的开启顺序值比B服务小，代表A服务先启动\",\"关闭顺序：\",\"值越小，优先权越高\",\"与开启顺序相反，先将B服务关闭再将A服务关闭，\"]},\"1369\":{\"h\":\"Zookpeeper\",\"t\":[\"cd /etc/init.d touch zookeeper chmod +x zookeeper vi zookeeper\",\"#!/bin/bash #chkconfig:2345 20 86 #description:zookeeper #processname:zookeeper export JAVA_HOME=/usr/local/java/jdk1.8.0_271 case $1 in start) /home/soft/kafka/bin/zookeeper-server-start.sh -daemon /home/soft/kafka/config/zookeeper.properties;; *) echo \\\"require start zookeeper\\\" ;; esac\",\"#!/bin/bash #chkconfig:2345 20 86 #description:zookeeper #processname:zookeeper export JAVA_HOME=/usr/local/java/jdk1.8.0_271 case $1 in start) /home/soft/zookeeper/bin/zkServer.sh start;; *) echo \\\"require start zookeeper\\\" ;; esac\",\"脚本启动\",\"./zkServer.sh start\"]},\"1370\":{\"h\":\"Kafka\",\"t\":[\"cd /etc/init.d touch kafka chmod +x kafka vi kafka\",\"#!/bin/bash #chkconfig:2345 21 87 #description:kafka #processname:kafka case $1 in start) /home/soft/kafka/bin/kafka-server-start.sh -daemon /home/soft/kafka/config/server.properties;; *) echo \\\"require start kafka\\\";; esac\",\"在线启动 /bin/kafka-server-start.sh /home/soft/kafka/config/server.properties\"]},\"1371\":{\"h\":\"Elasticsearch\",\"t\":[\"cd /etc/init.d touch elasticsearch chmod +x elasticsearch\",\"vi elasticsearch并输入以下内容:\",\"#!bin/bash # chkconfig: 2345 22 88 # description: elasticsearch # JAVA_HOME=/usr/local/java/jdk1.8.0_271 ES_HOME=/home/soft/elasticsearch-7.15.0 case $1 in start) sudo -iu elasticsearch $ES_HOME/bin/elasticsearch &;; *) echo \\\"require start elasticsearch\\\";; esac\"]},\"1372\":{\"h\":\"logstash\",\"t\":[\"cd /etc/init.d touch logstash chmod +x logstash vi logstash\",\"并输入以下内容:\",\"#!/bin/bash # chkconfig: 2345 23 89 # description: logstash # JAVA_HOME=/usr/local/java/jdk1.8.0_271 LS_HOME=/home/soft/logstash-7.15.0 case $1 in start)sudo -iu logstash $LS_HOME/bin/logstash -f $LS_HOME/config &;; *) echo \\\"require start logstash\\\";; esac\",\"./bin/logstash -f config/logstash.conf //前台启动 nohup ./bin/logstash -f config/logstash.conf & nohup.out //后台启动\"]},\"1373\":{\"h\":\"Kibana\",\"t\":[\"cd /etc/init.d touch kibana chmod +x kibana\",\"vi kibana并输入以下内容:\",\"#!/bin/bash # chkconfig: 2345 24 90 # description: kibana KIBANA_HOME=/home/soft/kibana-7.15.0-linux-x86_64 case $1 in start) $KIBANA_HOME/bin/kibana > kibana.log &;; *) echo \\\"require start kibana\\\";; esac\"]},\"1374\":{\"h\":\"扩展指令\",\"t\":[\"#启动服务 service zookeeper start #添加到开机自启动 chkconfig --add zookeeper #验证一下 chkconfig --list #设置开机自启动 chkconfig zookeeper on #查看zookeeper状态 service zookeeper status\"]},\"1375\":{\"h\":\"Nginx详情介绍\"},\"1376\":{\"h\":\"什么是Nginx？\",\"t\":[\"Nginx是一个 轻量级/高性能的反向代理Web服务器，他实现非常高效的反向代理、负载平衡，他可以处理2-3万并发连接数，官方监测能支持5万并发，现在中国使用nginx网站用户有很多，例如：新浪、网易、 腾讯等。\"]},\"1377\":{\"h\":\"为什么要用Nginx？\",\"t\":[\"跨平台、配置简单、方向代理、高并发连接：处理2-3万并发连接数，官方监测能支持5万并发，内存消耗小：开启10个nginx才占150M内存 ，nginx处理静态文件好，耗费内存少，\",\"而且Nginx内置的健康检查功能：如果有一个服务器宕机，会做一个健康检查，再发送的请求就不会发送到宕机的服务器了。重新将请求提交到其他的节点上。\",\"使用Nginx的话还能： \",\"节省宽带：支持GZIP压缩，可以添加浏览器本地缓存\",\"稳定性高：宕机的概率非常小\",\"接收用户请求是异步的\"]},\"1378\":{\"h\":\"为什么Nginx性能这么高？\",\"t\":[\"因为他的事件处理机制：异步非阻塞事件处理机制：运用了epoll模型，提供了一个队列，排队解决\"]},\"1379\":{\"h\":\"Nginx怎么处理请求的？\",\"t\":[\"nginx接收一个请求后，首先由listen和server_name指令匹配server模块，再匹配server模块里的location，location就是实际地址\",\"server { # 第一个Server区块开始，表示一个独立的虚拟主机站点 listen 80; # 提供服务的端口，默认80 server_name localhost; # 提供服务的域名主机名 location / { # 第一个location区块开始 root html; # 站点的根目录，相当于Nginx的安装目录 index index.html index.htm; # 默认的首页文件，多个用空格分开 } # 第一个location区块结果 }\"]},\"1380\":{\"h\":\"什么是正向代理和反向代理？\",\"t\":[\"正向代理就是一个人发送一个请求直接就到达了目标的服务器\",\"反方代理就是请求统一被Nginx接收，nginx反向代理服务器接收到之后，按照一定的规 则分发给了后端的业务处理服务器进行处理了\"]},\"1381\":{\"h\":\"使用“反向代理服务器的优点是什么?\",\"t\":[\"反向代理服务器可以隐藏源服务器的存在和特征。它充当互联网云和web服务器之间的中间层。这对于安全方面来说是很好的，特别是当您使用web托管服务时。\"]},\"1382\":{\"h\":\"Nginx的优缺点？\",\"t\":[\"优点： \",\"占内存小，可实现高并发连接，处理响应快\",\"可实现http服务器、虚拟主机、方向代理、负载均衡\",\"Nginx配置简单\",\"可以不暴露正式的服务器IP地址\",\"缺点： 动态处理差：nginx处理静态文件好,耗费内存少，但是处理动态页面则很鸡肋，现在一般前端用nginx作为反向代理抗住压力，\"]},\"1383\":{\"h\":\"Nginx应用场景？\",\"t\":[\"http服务器。Nginx是一个http服务可以独立提供http服务。可以做网页静态服务器。\",\"虚拟主机。可以实现在一台服务器虚拟出多个网站，例如个人网站使用的虚拟机。\",\"反向代理，负载均衡。当网站的访问量达到一定程度后，单台服务器不能满足用户的请求时，需要用多台服务器集群可以使用nginx做反向代理。并且多台服务器可以平均分担负载，不会应为某台服务器负载高宕机而某台服务器闲置的情况。\",\"nginz 中也可以配置安全管理、比如可以使用Nginx搭建API接口网关,对每个接口服务进行拦截。\"]},\"1384\":{\"h\":\"Nginx目录结构有哪些？\",\"t\":[\" [root@localhost ~]# tree /usr/local/nginx /usr/local/nginx ├── client_body_temp ├── conf # Nginx所有配置文件的目录 │ ├── fastcgi.conf # fastcgi相关参数的配置文件 │ ├── fastcgi.conf.default # fastcgi.conf的原始备份文件 │ ├── fastcgi_params # fastcgi的参数文件 │ ├── fastcgi_params.default │ ├── koi-utf │ ├── koi-win │ ├── mime.types # 媒体类型 │ ├── mime.types.default │ ├── nginx.conf # Nginx主配置文件 │ ├── nginx.conf.default │ ├── scgi_params # scgi相关参数文件 │ ├── scgi_params.default │ ├── uwsgi_params # uwsgi相关参数文件 │ ├── uwsgi_params.default │ └── win-utf ├── fastcgi_temp # fastcgi临时数据目录 ├── html # Nginx默认站点目录 │ ├── 50x.html # 错误页面优雅替代显示文件，例如当出现502错误时会调用此页面 │ └── index.html # 默认的首页文件 ├── logs # Nginx日志目录 │ ├── access.log # 访问日志文件 │ ├── error.log # 错误日志文件 │ └── nginx.pid # pid文件，Nginx进程启动后，会把所有进程的ID号写到此文件 ├── proxy_temp # 临时目录 ├── sbin # Nginx命令目录 │ └── nginx # Nginx的启动命令 ├── scgi_temp # 临时目录 └── uwsgi_temp # 临时目录\"]},\"1385\":{\"h\":\"Nginx配置文件nginx.conf有哪些属性模块?\",\"t\":[\" worker_processes 1; # worker进程的数量 events { # 事件区块开始 worker_connections 1024; # 每个worker进程支持的最大连接数 } # 事件区块结束 http { # HTTP区块开始 include mime.types; # Nginx支持的媒体类型库文件 default_type application/octet-stream; # 默认的媒体类型 sendfile on; # 开启高效传输模式 keepalive_timeout 65; # 连接超时 server { # 第一个Server区块开始，表示一个独立的虚拟主机站点 listen 80; # 提供服务的端口，默认80 server_name localhost; # 提供服务的域名主机名 location / { # 第一个location区块开始 root html; # 站点的根目录，相当于Nginx的安装目录 index index.html index.htm; # 默认的首页文件，多个用空格分开 } # 第一个location区块结果 error_page 500502503504 /50x.html; # 出现对应的http状态码时，使用50x.html回应客户 location = /50x.html { # location区块开始，访问50x.html root html; # 指定对应的站点目录为html } } ......\"]},\"1386\":{\"h\":\"Nginx静态资源?\",\"t\":[\"静态资源访问，就是存放在nginx的html页面，我们可以自己编写\"]},\"1387\":{\"h\":\"如何用Nginx解决前端跨域问题？\",\"t\":[\"使用Nginx转发请求。把跨域的接口写成调本域的接口，然后将这些接口转发到真正的请求地址。\"]},\"1388\":{\"h\":\"Nginx虚拟主机怎么配置?\",\"t\":[\"1、基于域名的虚拟主机，通过域名来区分虚拟主机——应用：外部网站\",\"2、基于端口的虚拟主机，通过端口来区分虚拟主机——应用：公司内部网站，外部网站的管理后台\",\"3、基于ip的虚拟主机。\"]},\"1389\":{\"h\":\"基于虚拟主机配置域名\",\"t\":[\"需要建立/data/www /data/bbs目录，windows本地hosts添加虚拟机ip地址对应的域名解析;对应域名网站目录下新增index.html文件;\",\" #当客户端访问www.lijie.com,监听端口号为80,直接跳转到data/www目录下文件 server { listen 80; server_name www.lijie.com; location / { root data/www; index index.html index.htm; } } #当客户端访问www.lijie.com,监听端口号为80,直接跳转到data/bbs目录下文件 server { listen 80; server_name bbs.lijie.com; location / { root data/bbs; index index.html index.htm; } }\"]},\"1390\":{\"h\":\"基于端口的虚拟主机\",\"t\":[\"使用端口来区分，浏览器使用域名或ip地址:端口号 访问\",\" #当客户端访问www.lijie.com,监听端口号为8080,直接跳转到data/www目录下文件 server { listen 8080; server_name 8080.lijie.com; location / { root data/www; index index.html index.htm; } } #当客户端访问www.lijie.com,监听端口号为80直接跳转到真实ip服务器地址 127.0.0.1:8080 server { listen 80; server_name www.lijie.com; location / { proxy_pass http://127.0.0.1:8080; index index.html index.htm; } }\"]},\"1391\":{\"h\":\"location的作用是什么？\",\"t\":[\"location指令的作用是根据用户请求的URI来执行不同的应用，也就是根据用户请求的网站URL进行匹配，匹配成功即进行相关的操作。\"]},\"1392\":{\"h\":\"location的语法能说出来吗？\",\"t\":[\"注意：~ 代表自己输入的英文字母\",\"匹配符\",\"匹配规则\",\"优先级\",\"=\",\"精确匹配\",\"1\",\"^~\",\"以某个字符串开头\",\"2\",\"~\",\"区分大小写的正则匹配\",\"3\",\"~*\",\"不区分大小写的正则匹配\",\"4\",\"!~\",\"区分大小写不匹配的正则\",\"5\",\"!~*\",\"不区分大小写不匹配的正则\",\"6\",\"/\",\"通用匹配，任何请求都会匹配到\",\"7\"]},\"1393\":{\"h\":\"Location正则案例\",\"t\":[\"示例：\",\" #优先级1,精确匹配，根路径 location =/ { return 400; } #优先级2,以某个字符串开头,以av开头的，优先匹配这里，区分大小写 location ^~ /av { root /data/av/; } #优先级3，区分大小写的正则匹配，匹配/media*****路径 location ~ /media { alias /data/static/; } #优先级4 ，不区分大小写的正则匹配，所有的****.jpg|gif|png 都走这里 location ~* .*\\\\.(jpg|gif|png|js|css)$ { root /data/av/; } #优先7，通用匹配 location / { return 403; }\"]},\"1394\":{\"h\":\"限流怎么做的？\",\"t\":[\"Nginx限流就是限制用户请求速度，防止服务器受不了\",\"限流有3种 \",\"正常限制访问频率（正常流量）\",\"突发限制访问频率（突发流量）\",\"限制并发连接数\",\"Nginx的限流都是基于漏桶流算法，底下会说道什么是桶铜流\",\"实现三种限流算法\"]},\"1395\":{\"h\":\"1、正常限制访问频率（正常流量）：\",\"t\":[\"限制一个用户发送的请求，我Nginx多久接收一个请求。\",\"Nginx中使用ngx_http_limit_req_module模块来限制的访问频率，限制的原理实质是基于漏桶算法原理来实现的。在nginx.conf配置文件中可以使用limit_req_zone命令及limit_req命令限制单个IP的请求处理频率。\",\" #定义限流维度，一个用户一分钟一个请求进来，多余的全部漏掉 limit_req_zone $binary_remote_addr zone=one:10m rate=1r/m; #绑定限流维度 server{ location/seckill.html{ limit_req zone=zone; proxy_pass http://lj_seckill; } }\",\"1r/s代表1秒一个请求，1r/m一分钟接收一个请求， 如果Nginx这时还有别人的请求没有处理完，Nginx就会拒绝处理该用户请求。\"]},\"1396\":{\"h\":\"2、突发限制访问频率（突发流量）：\",\"t\":[\"限制一个用户发送的请求，我Nginx多久接收一个。\",\"上面的配置一定程度可以限制访问频率，但是也存在着一个问题：如果突发流量超出请求被拒绝处理，无法处理活动时候的突发流量，这时候应该如何进一步处理呢？Nginx提供burst参数结合nodelay参数可以解决流量突发的问题，可以设置能处理的超过设置的请求数外能额外处理的请求数。我们可以将之前的例子添加burst参数以及nodelay参数：\",\" #定义限流维度，一个用户一分钟一个请求进来，多余的全部漏掉 limit_req_zone $binary_remote_addr zone=one:10m rate=1r/m; #绑定限流维度 server{ location/seckill.html{ limit_req zone=zone burst=5 nodelay; proxy_pass http://lj_seckill; } }\",\"为什么就多了一个 burst=5 nodelay; 呢，多了这个可以代表Nginx对于一个用户的请求会立即处理前五个，多余的就慢慢来落，没有其他用户的请求我就处理你的，有其他的请求的话我Nginx就漏掉不接受你的请求\"]},\"1397\":{\"h\":\"3、 限制并发连接数\",\"t\":[\"Nginx中的ngx_http_limit_conn_module模块提供了限制并发连接数的功能，可以使用limit_conn_zone指令以及limit_conn执行进行配置。接下来我们可以通过一个简单的例子来看下：\",\" http { limit_conn_zone $binary_remote_addr zone=myip:10m; limit_conn_zone $server_name zone=myServerName:10m; } server { location / { limit_conn myip 10; limit_conn myServerName 100; rewrite / http://www.xxx.net permanent; } }\",\"上面配置了单个IP同时并发连接数最多只能10个连接，并且设置了整个虚拟服务器同时最大并发数最多只能100个链接。当然，只有当请求的header被服务器处理后，虚拟服务器的连接数才会计数。刚才有提到过Nginx是基于漏桶算法原理实现的，实际上限流一般都是基于漏桶算法和令牌桶算法实现的。接下来我们来看看两个算法的介绍：\"]},\"1398\":{\"h\":\"漏桶流算法和令牌桶算法知道？\"},\"1399\":{\"h\":\"漏桶算法\",\"t\":[\"漏桶算法是网络世界中流量整形或速率限制时经常使用的一种算法，它的主要目的是控制数据注入到网络的速率，平滑网络上的突发流量。漏桶算法提供了一种机制，通过它，突发流量可以被整形以便为网络提供一个稳定的流量。也就是我们刚才所讲的情况。漏桶算法提供的机制实际上就是刚才的案例：突发流量会进入到一个漏桶，漏桶会按照我们定义的速率依次处理请求，如果水流过大也就是突发流量过大就会直接溢出，则多余的请求会被拒绝。所以漏桶算法能控制数据的传输速率。\",\"jiezuiquanmiandemianshiti_2_1.png\"]},\"1400\":{\"h\":\"令牌桶算法\",\"t\":[\"令牌桶算法是网络流量整形和速率限制中最常使用的一种算法。典型情况下，令牌桶算法用来控制发送到网络上的数据的数目，并允许突发数据的发送。Google开源项目Guava中的RateLimiter使用的就是令牌桶控制算法。令牌桶算法的机制如下：存在一个大小固定的令牌桶，会以恒定的速率源源不断产生令牌。如果令牌消耗速率小于生产令牌的速度，令牌就会一直产生直至装满整个令牌桶。\",\"jiezuiquanmiandemianshiti_3.png\"]},\"1401\":{\"h\":\"为什么要做动静分离？\",\"t\":[\"Nginx是当下最热的Web容器，网站优化的重要点在于静态化网站，网站静态化的关键点则是是动静分离，动静分离是让动态网站里的动态网页根据一定规则把不变的资源和经常变的资源区分开来，动静资源做好了拆分以后，我们则根据静态资源的特点将其做缓存操作。\",\"让静态的资源只走静态资源服务器，动态的走动态的服务器\",\"Nginx的静态处理能力很强，但是动态处理能力不足，因此，在企业中常用动静分离技术。\",\"对于静态资源比如图片，js，css等文件，我们则在反向代理服务器nginx中进行缓存。这样浏览器在请求一个静态资源时，代理服务器nginx就可以直接处理，无需将请求转发给后端服务器tomcat。 若用户请求的动态文件，比如servlet,jsp则转发给Tomcat服务器处理，从而实现动静分离。这也是反向代理服务器的一个重要的作用。\"]},\"1402\":{\"h\":\"Nginx怎么做的动静分离？\",\"t\":[\"只需要指定路径对应的目录。location/可以使用正则表达式匹配。并指定对应的硬盘中的目录。如下：（操作都是在Linux上）\",\"location /image/ { root /usr/local/static/; autoindex on; }\",\"创建目录\",\"mkdir /usr/local/static/image\",\"进入目录\",\"cd /usr/local/static/image\",\"放一张照片上去#\",\"1.jpg\",\"重启 nginx\",\"sudo nginx -s reload\",\"打开浏览器 输入 server_name/image/1.jpg 就可以访问该静态图片了\"]},\"1403\":{\"h\":\"Nginx负载均衡的算法怎么实现的?策略有哪些?\",\"t\":[\"为了避免服务器崩溃，大家会通过负载均衡的方式来分担服务器压力。将对台服务器组成一个集群，当用户访问时，先访问到一个转发服务器，再由转发服务器将访问分发到压力更小的服务器。\",\"Nginx负载均衡实现的策略有以下五种：\"]},\"1404\":{\"h\":\"1 轮询(默认)\",\"t\":[\"每个请求按时间顺序逐一分配到不同的后端服务器，如果后端某个服务器宕机，能自动剔除故障系统。\",\"upstream backserver { server 192.168.x.x; server 192.168.x.x; }\"]},\"1405\":{\"h\":\"2 权重 weight\",\"t\":[\"- weight的值越大分配 - 到的访问概率越高，主要用于后端每台服务器性能不均衡的情况下。其次是为在主从的情况下设置不同的权值，达到合理有效的地利用主机资源。 upstream backserver { server 192.168.0.x weight=2; server 192.168.0.x weight=8; } - 权重越高，在被访问的概率越大，如上例，分别是20%，80%。\"]},\"1406\":{\"h\":\"3 ip_hash( IP绑定)\",\"t\":[\"- 每个请求按访问IP的哈希结果分配，使来自同一个IP的访客固定访问一台后端服务器，`并且可以有效解决动态网页存在的session共享问题` upstream backserver { ip_hash; server 192.168.0.x:x; server 192.168.0.x:x; }\"]},\"1407\":{\"h\":\"4 fair(第三方插件)\",\"t\":[\"- 必须安装upstream_fair模块。 - 对比 weight、ip_hash更加智能的负载均衡算法，fair算法可以根据页面大小和加载时间长短智能地进行负载均衡，响应时间短的优先分配。 upstream backserver { server server1; server server2; fair; } - 哪个服务器的响应速度快，就将请求分配到那个服务器上。\"]},\"1408\":{\"h\":\"5 url_hash(第三方插件)\",\"t\":[\"- 必须安装Nginx的hash软件包 - 按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，可以进一步提高后端缓存服务器的效率。 upstream backserver { server squid1:3128; server squid2:3128; hash $request_uri; hash_method crc32; }\"]},\"1409\":{\"h\":\"Nginx配置高可用性怎么配置？\",\"t\":[\"- 当上游服务器(真实访问服务器)，一旦出现故障或者是没有及时相应的话，应该直接轮训到下一台服务器，保证服务器的高可用 - Nginx配置代码： server { listen 80; server_name www.lijie.com; location / { ### 指定上游服务器负载均衡服务器 proxy_pass http://backServer; ###nginx与上游服务器(真实访问的服务器)超时时间 后端服务器连接的超时时间_发起握手等候响应超时时间 proxy_connect_timeout 1s; ###nginx发送给上游服务器(真实访问的服务器)超时时间 proxy_send_timeout 1s; ### nginx接受上游服务器(真实访问的服务器)超时时间 proxy_read_timeout 1s; index index.html index.htm; } }\"]},\"1410\":{\"h\":\"Nginx怎么判断别IP不可访问？\",\"t\":[\"如果访问的ip地址为192.168.9.115,则返回403 if ($remote_addr = 192.168.9.115) { return 403; }\"]},\"1411\":{\"h\":\"怎么限制浏览器访问？\",\"t\":[\"不允许谷歌浏览器访问 如果是谷歌浏览器返回500 if ($http_user_agent ~ Chrome) { return 500; }\"]},\"1412\":{\"h\":\"Rewrite全局变量是什么？\",\"t\":[\"> | 变量 | 含义 | > | :---------------: | :----------------------------------------------------------: | > | $args | 这个变量等于请求行中的参数，同$query_string | > | $contentlength | 请求头中的Content-length字段。 | > | $content_type | 请求头中的Content-Type字段。 | > | $document_root | 当前请求在root指令中指定的值。 | > | $host | 请求主机头字段，否则为服务器名称。 | > | $http_user_agent | 客户端agent信息 | > | $http_cookie | 客户端cookie信息 | > | $limit_rate | 这个变量可以限制连接速率。 | > | $request_method | 客户端请求的动作，通常为GET或POST。 | > | $remote_addr | 客户端的IP地址。 | > | $remote_port | 客户端的端口。 | > | $remote_user | 已经经过AuthBasicModule验证的用户名。 | > | $request_filename | 当前请求的文件路径，由root或alias指令与URI请求生成。 | > | $scheme | HTTP方法（如http，https）。 | > | $server_protocol | 请求使用的协议，通常是HTTP/1.0或HTTP/1.1。 | > | $server_addr | 服务器地址，在完成一次系统调用后可以确定这个值。 | > | $server_name | 服务器名称。 | > | $server_port | 请求到达服务器的端口号。 | > | $request_uri | 包含请求参数的原始URI，不包含主机名，如”/foo/bar.php?arg=baz”。 | > | $uri | 不带请求参数的当前URI，$uri不包含主机名，如”/foo/bar.html”。 | > | $document_uri | 与$uri相同。 |\"]},\"1413\":{\"h\":\"Nginx配置Https\"},\"1414\":{\"h\":\"1、Http与Https的区别\",\"t\":[\"HTTP：是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（TCP），用于从WWW服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更加高效，使网络传输减少。\",\"HTTPS：是以安全为目标的HTTP通道，简单讲是HTTP的安全版，即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。HTTPS协议的主要作用可以分为两种：一种是建立一个信息安全通道，来保证数据传输的安全；另一种就是确认网站的真实性。\",\"HTTPS和HTTP的区别主要如下：\",\"1、https协议需要到ca申请证书，一般免费证书较少，因而需要一定费用。 2、http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。 3、http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。 4、http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。\",\"1）http访问：未认证在部分浏览器上访问是会提示不安全的，有安全隐患\",\"image-20210523181111096\",\"2）https访问：认证后\",\"image-20210523181224421\"]},\"1415\":{\"h\":\"Nginx配置Https\"},\"1416\":{\"h\":\"\",\"t\":[\"1、配置ssl证书前，要确保你的nginx安装了ssl模块，一般情况下自己安装的nginx都是不存在ssl模块的。\",\"检查自己的nginx是否安装了ssl模块\",\"cd nginx的安装目录sbin下输入\",\"./nginx -V\",\"image-20210523181704656\",\"如果有出现红框中的信息，证明有安装。\",\"2、没有安装ssl模块的情况\",\"进入你的nginx解压后的目录（不是nginx安装目录），输入\",\"./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module\",\"接下来执行\",\"make #切记不要执行make install 否则会重新安装nginx\",\"3、进入objs文件夹，文件夹中存在nginx文件，替换掉sbin下的nginx\",\"#如果开启了nginx先进入sbin中停掉nginx服务 ./nginx -s stop #停止nginx服务 # cp 压缩后的nginx路径(你自己的) 安装的nginx路径(你自己的) cp /root/nginx/objs/nginx /usr/local/ngin/sbin\",\"4、成功之后，进入nginx安装目录，查看ssl是否安装成功\",\"./nginx -V #权限不足可执行给nginx权限 chmod 111 nginx\"]},\"1417\":{\"h\":\"二、配置SSL证书\",\"t\":[\"阿里云可申请免费的ssl证书，具体可百度（证书一般是pem和key文件）\",\"1、将证书上传到一个文件夹中(自定义)\",\"mkdir -p /nginx/card-key-pem\",\"image-20210523184201035\",\"2、配置ssl，进入nginx安装目录中的conf文件中\",\"cd /usr/local/nginx/conf vim nginx.conf\",\"http { include mime.types; default_type application/octet-stream; sendfile on; keepalive_timeout 65; server { listen 443; #监听443端口 server_name www.qingfenginn.top; #你的域名 ssl on; #开启ssl ssl_certificate /root/nginx/card-key-pem/5386933_www.qingfenginn.top.pem; #你上传的ssl证书的pem文件路径 ssl_certificate_key /root/nginx/card-key-pem/5386933_www.qingfenginn.top.key; #你上传的ssl证书的key文件路径 location / { #访问路径 #反向代理到你的项目 http://公网地址：端口 proxy_pass http://www.qingfenginn.top:81; } } server { listen 80; #监听80端口 server_name www.qingfenginn.top; #将请求转成https rewrite ^(.*)$ https://$host$1 permanent; } }\",\"注意：配置完后，nginx会同时监听443端口和80端口，443端口需要在安全组开发端口\",\"3、重启nginx，使配置生效\",\"进入sbin目录\",\"先校验一下配置文件是否正确\",\"./nginx -t\",\"image-20210523185524664\",\"在启动nginx\",\"./nginx -s reload //重启 ./nginx -s stop //停止 ./nginx //启动\",\"之后就可以用你的域名访问了\"]},\"1418\":{\"h\":\"Nginx配置访问密码\",\"t\":[\"实现效果：\",\"1、通过nignx访问的站点或目录，需要让用户输入用户名密码才能访问\",\"2、在nginx下，提供了ngx_http_auth_basic_module模块实现让用户只有输入正常的用户名密码才允许访问web内容。默认情况下， nginx已经安装了该模块，所以整体的一个过程就是先用第三方工具设置用户名、密码（其中密码已经加过密）让后保存到文件中， 接着在nginx配置文件中根据之前事先保存的文件开启访问验证：\",\"对网站通过密码进行访问 有两种方法\",\"一种是 通过 htpasswd\",\"一种是 通过 openssl\",\"「nginx密码访问所需离线包」https://www.aliyundrive.com/s/1aJ3dAZ3JiB 提取码: q3u8 点击链接保存，或者复制本段内容，打开「阿里云盘」APP\"]},\"1419\":{\"h\":\"以htpasswd为例：\",\"t\":[\"httpd-tools-2.4.6-88.el7.centos.x86_64.rpm\"]},\"1420\":{\"h\":\"一、安装生成密码工具\",\"t\":[\"在线安装 安装htpasswd工具： (yum安装)： yum -y install httpd-tools 离线安装 rpm -ivh httpd-tools-2.4.6-88.el7.centos.x86_64.rpm 依赖于： apr-1.4.8-7.el7.x86_64.rpm apr-util-1.5.2-6.el7.x86_64.rpm\"]},\"1421\":{\"h\":\"二、生成密码文件\",\"t\":[\"设置用户名和密码，并把用户名和密码保存到指定文件中： htpasswd -c 密码文件保存路径 用户名 htpasswd -c /etc/nginx/conf.d/passwd.db hbhs 若该命令成功则会让其输入两遍密码。\"]},\"1422\":{\"h\":\"三、查看密码文件\",\"t\":[\"cat /etc/nginx/conf.d/passwd.db 显示hbhs:$apr1$/ToVEbrO$vejTUiS6UTDVIVGZBMDhJ/ 其中hbhs是用户名，分号后面就是密码（密码已经加过密）\"]},\"1423\":{\"h\":\"四、修改配置文件拦截站点或请求\",\"t\":[\"找到nginx配置文件所在位置文件中server中location添加： 密码提示语｜密码文件路径 auth_basic \\\"Username and Password are required\\\"; auth_basic_user_file /etc/nginx/conf.d/passwd.db; 需要对server限制访问也可加在server模块\"]},\"1424\":{\"h\":\"五、重启nginx并验证是否访问受限\",\"t\":[\"验证配置文件是否正确 nginx -t 重启服务 nginx -s reload\"]},\"1425\":{\"h\":\"以openssl为例：\",\"t\":[\"nginx服务器上一般自带了 openssl\"]},\"1426\":{\"h\":\"一、新建 passwd文件\",\"t\":[\"在nignx的conf目录,通过以下命令新建 passwd密码文件 用户名为 test，密码为 abcd123456 echo -n \\\"test:\\\" > passwd openssl passwd abcd123456 >> passwd\"]},\"1427\":{\"h\":\"二、修改nginx配置文件\",\"t\":[\"找到nginx配置文件所在位置文件中server中location添加： 密码提示语｜密码文件路径 auth_basic \\\"Username and Password are required\\\"; auth_basic_user_file /nginx-1.12.2/conf/passwd; 需要对server限制访问也可加在server模块\"]},\"1428\":{\"h\":\"三、重启nginx并验证是否访问受限\",\"t\":[\"验证配置文件是否正确 nginx -t 重启服务 nginx -s reload\"]},\"1429\":{\"h\":\"Ajax快速入门\"},\"1430\":{\"h\":\"1.1、AJAX介绍\",\"t\":[\"AJAX(Asynchronous JavaScript And XML)：异步的 JavaScript 和 XML。\",\"本身不是一种新技术，而是多个技术综合。用于快速创建动态网页的技术。\",\"一般的网页如果需要更新内容，必需重新加载个页面。\",\"而 AJAX 通过浏览器与服务器进行少量数据交换，就可以使网页实现异步更新。也就是在不重新加载整个页 面的情况下，对网页的部分内容进行局部更新。\"]},\"1431\":{\"h\":\"1.2、原生JS实现AJAX\",\"t\":[\"代码实现\",\"import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import java.io.IOException; @WebServlet(\\\"/userServlet\\\") public class UserServlet extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { //设置请求和响应的乱码 req.setCharacterEncoding(\\\"UTF-8\\\"); resp.setContentType(\\\"text/html;charset=UTF-8\\\"); //1.获取请求参数 String username = req.getParameter(\\\"username\\\"); //模拟服务器处理请求需要5秒钟 /*try { Thread.sleep(5000); } catch (InterruptedException e) { e.printStackTrace(); }*/ //2.判断姓名是否已注册 if(\\\"zhangsan\\\".equals(username)) { resp.getWriter().write(\\\"<font color='red'>用户名已注册</font>\\\"); }else { resp.getWriter().write(\\\"<font color='green'>用户名可用</font>\\\"); } } @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { doGet(req,resp); } }\",\"html代码\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <title>用户注册</title> </head> <body> <form autocomplete=\\\"off\\\"> 姓名：<input type=\\\"text\\\" id=\\\"username\\\"> <span id=\\\"uSpan\\\"></span> <br> 密码：<input type=\\\"password\\\" id=\\\"password\\\"> <br> <input type=\\\"submit\\\" value=\\\"注册\\\"> </form> </body> <script> //1.为姓名绑定失去焦点事件 document.getElementById(\\\"username\\\").onblur = function() { //2.创建XMLHttpRequest核心对象 let xmlHttp = new XMLHttpRequest(); //3.打开链接 let username = document.getElementById(\\\"username\\\").value; xmlHttp.open(\\\"GET\\\",\\\"userServlet?username=\\\"+username,true); //xmlHttp.open(\\\"GET\\\",\\\"userServlet?username=\\\"+username,false); //4.发送请求 xmlHttp.send(); //5.处理响应 xmlHttp.onreadystatechange = function() { //判断请求和响应是否成功 if(xmlHttp.readyState == 4 && xmlHttp.status == 200) { //将响应的数据显示到span标签 document.getElementById(\\\"uSpan\\\").innerHTML = xmlHttp.responseText; } } } </script> </html>\"]},\"1432\":{\"h\":\"1.3、原生JS实现AJAX详解\",\"t\":[\"核心对象：XMLHttpRequest\",\"​ 用于在后台与服务器交换数据。可以在不重新加载整个网页的情况下，对网页的某部分进行更新。\",\"打开链接：open(method,url,async)\",\"​ method：请求的类型 GET 或 POST。\",\"​ url：请求资源的路径。\",\"​ async：true(异步) 或 false(同步)。\",\"发送请求：send(String params)\",\"​ params：请求的参数(POST 专用)。\",\"处理响应：onreadystatechange\",\"​ readyState：0-请求未初始化，1-服务器连接已建立，2-请求已接收，3-请求处理中，4-请求已完成，且响应已就绪。\",\"​ status：200-响应已全部 OK。\",\"获得响应数据形式\",\"​ responseText：获得字符串形式的响应数据。\",\"​ responseXML：获得 XML 形式的响应数据。\"]},\"1433\":{\"h\":\"1.4、JQuery的GET方式实现AJAX\",\"t\":[\"核心语法：$.get(url,[data],[callback],[type]);\",\"url：请求的资源路径。\",\"data：发送给服务器端的请求参数，格式可以是key=value，也可以是 js 对象。\",\"callback：当请求成功后的回调函数，可以在函数中编写我们的逻辑代码。\",\"type：预期的返回数据的类型，取值可以是 xml, html, js, json, text等。\",\"代码实现\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <title>用户注册</title> </head> <body> <form autocomplete=\\\"off\\\"> 姓名：<input type=\\\"text\\\" id=\\\"username\\\"> <span id=\\\"uSpan\\\"></span> <br> 密码：<input type=\\\"password\\\" id=\\\"password\\\"> <br> <input type=\\\"submit\\\" value=\\\"注册\\\"> </form> </body> <script src=\\\"js/jquery-3.3.1.min.js\\\"></script> <script> //1.为用户名绑定失去焦点事件 $(\\\"#username\\\").blur(function () { let username = $(\\\"#username\\\").val(); //2.jQuery的GET方式实现AJAX $.get( //请求的资源路径 \\\"userServlet\\\", //请求参数 \\\"username=\\\" + username, //回调函数 function (data) { //将响应的数据显示到span标签 $(\\\"#uSpan\\\").html(data); }, //响应数据形式 \\\"text\\\" ); }); </script> </html>\"]},\"1434\":{\"h\":\"1.5、JQuery的POST方式实现AJAX\",\"t\":[\"核心语法：$.post(url,[data],[callback],[type]);\",\"url：请求的资源路径。\",\"data：发送给服务器端的请求参数，格式可以是key=value，也可以是 js 对象。\",\"callback：当请求成功后的回调函数，可以在函数中编写我们的逻辑代码。\",\"type：预期的返回数据的类型，取值可以是 xml, html, js, json, text等。\",\"代码实现\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <title>用户注册</title> </head> <body> <form autocomplete=\\\"off\\\"> 姓名：<input type=\\\"text\\\" id=\\\"username\\\"> <span id=\\\"uSpan\\\"></span> <br> 密码：<input type=\\\"password\\\" id=\\\"password\\\"> <br> <input type=\\\"submit\\\" value=\\\"注册\\\"> </form> </body> <script src=\\\"js/jquery-3.3.1.min.js\\\"></script> <script> //1.为用户名绑定失去焦点事件 $(\\\"#username\\\").blur(function () { let username = $(\\\"#username\\\").val(); //2.jQuery的POST方式实现AJAX $.post( //请求的资源路径 \\\"userServlet\\\", //请求参数 \\\"username=\\\" + username, //回调函数 function (data) { //将响应的数据显示到span标签 $(\\\"#uSpan\\\").html(data); }, //响应数据形式 \\\"text\\\" ); }); </script> </html>\"]},\"1435\":{\"h\":\"1.6、JQuery的通用方式实现AJAX\",\"t\":[\"核心语法：$.ajax({name:value,name:value,…});\",\"url：请求的资源路径。\",\"async：是否异步请求，true-是，false-否 (默认是 true)。\",\"data：发送到服务器的数据，可以是键值对形式，也可以是 js 对象形式。\",\"type：请求方式，POST 或 GET (默认是 GET)。\",\"dataType：预期的返回数据的类型，取值可以是 xml, html, js, json, text等。\",\"success：请求成功时调用的回调函数。\",\"error：请求失败时调用的回调函数。\",\"代码实现\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <title>用户注册</title> </head> <body> <form autocomplete=\\\"off\\\"> 姓名：<input type=\\\"text\\\" id=\\\"username\\\"> <span id=\\\"uSpan\\\"></span> <br> 密码：<input type=\\\"password\\\" id=\\\"password\\\"> <br> <input type=\\\"submit\\\" value=\\\"注册\\\"> </form> </body> <script src=\\\"js/jquery-3.3.1.min.js\\\"></script> <script> //1.为用户名绑定失去焦点事件 $(\\\"#username\\\").blur(function () { let username = $(\\\"#username\\\").val(); //2.jQuery的通用方式实现AJAX $.ajax({ //请求资源路径 url:\\\"userServletxxx\\\", //是否异步 async:true, //请求参数 data:\\\"username=\\\"+username, //请求方式 type:\\\"POST\\\", //数据形式 dataType:\\\"text\\\", //请求成功后调用的回调函数 success:function (data) { //将响应的数据显示到span标签 $(\\\"#uSpan\\\").html(data); }, //请求失败后调用的回调函数 error:function () { alert(\\\"操作失败...\\\"); } }); }); </script> </html>\"]},\"1436\":{\"h\":\"1.7、小结\",\"t\":[\"**AJAX(Asynchronous JavaScript And XML)：**异步的 JavaScript 和 XML。\",\"通过浏览器与服务器进行少量数据交换，就可以使网页实现异步更新。也就是在不重新加载整个页面的情况下，对网页的部 分内容进行局部更新。\",\"同步和异步\",\"同步：服务器端在处理过程中，无法进行其他操作。\",\"异步：服务器端在处理过程中，可以进行其他操作。\",\"GET 方式实现：$.get();\",\"POST 方式实现：$.post(); \",\"url：请求的资源路径。\",\"data：发送给服务器端的请求参数，格式可以是key=value，也可以是 js 对象。\",\"callback：当请求成功后的回调函数，可以在函数中编写我们的逻辑代码。\",\"type：预期的返回数据的类型，取值可以是 xml, html, js, json, text等。\",\"通用方式实现：$.ajax(); \",\"url：请求的资源路径。\",\"async：是否异步请求，true-是，false-否 (默认是 true)。\",\"data：发送到服务器的数据，可以是键值对形式，也可以是 js 对象形式。\",\"type：请求方式，POST 或 GET (默认是 GET)。\",\"dataType：预期的返回数据的类型，取值可以是 xml, html, js, json, text等。\",\"success：请求成功时调用的回调函数。\",\"error：请求失败时调用的回调函数。\"]},\"1437\":{\"h\":\"2.1、JSON回顾\",\"t\":[\"JSON(JavaScript Object Notation)：是一种轻量级的数据交换格式。\",\"它是基于 ECMAScript 规范的一个子集，采用完全独立于编程语言的文本格式来存储和表示数据。\",\"简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。易于人阅读和编写，同时也易于计算机解析和生成，并有效的 提升网络传输效率。\",\"创建格式\",\"常用方法\"]},\"1438\":{\"h\":\"2.2、JSON转换工具的介绍\",\"t\":[\"我们除了可以在 JavaScript 中来使用 JSON 以外，在 JAVA 中同样也可以使用 JSON。\",\"JSON 的转换工具是通过 JAVA 封装好的一些 JAR 工具包。\",\"可以将 JAVA 对象或集合转换成 JSON 格式的字符串，也可以将 JSON 格式的字符串转成 JAVA 对象。\",\"Jackson：开源免费的 JSON 转换工具，SpringMVC 转换默认使用 Jackson。\",\"导入 jar 包。\",\"创建核心对象。\",\"调用方法完成转换。\",\"常用类\",\"ObjectMapper常用方法\"]},\"1439\":{\"h\":\"2.3、JSON转换练习\",\"t\":[\"对象转 JSON, JSON 转对象。\",\"/* JSON转换工具的使用 */ public class ObjectMapperTest { private ObjectMapper mapper = new ObjectMapper(); /* 1.User对象转json, json转User对象 json字符串 = {\\\"name\\\":\\\"张三\\\",\\\"age\\\":23} user对象 = User{name='张三', age=23} */ @Test public void test01() throws Exception{ //User对象转json User user = new User(\\\"张三\\\",23); String json = mapper.writeValueAsString(user); System.out.println(\\\"json字符串：\\\" + json); //json转User对象 User user2 = mapper.readValue(json, User.class); System.out.println(\\\"java对象：\\\" + user2); } }\",\"Map转 JSON, JSON 转 Map。\",\"/* 2.map<String,String>转json, json转map<String,String> json字符串 = {\\\"姓名\\\":\\\"张三\\\",\\\"性别\\\":\\\"男\\\"} map对象 = {姓名=张三, 性别=男} */ @Test public void test02() throws Exception{ //map<String,String>转json HashMap<String,String> map = new HashMap<>(); map.put(\\\"姓名\\\",\\\"张三\\\"); map.put(\\\"性别\\\",\\\"男\\\"); String json = mapper.writeValueAsString(map); System.out.println(\\\"json字符串：\\\" + json); //json转map<String,String> HashMap<String,String> map2 = mapper.readValue(json, HashMap.class); System.out.println(\\\"java对象：\\\" + map2); }\",\"Map转 JSON, JSON 转 Map。\",\"/* 3.map<String,User>转json, json转map<String,User> json字符串 = {\\\"黑马一班\\\":{\\\"name\\\":\\\"张三\\\",\\\"age\\\":23},\\\"黑马二班\\\":{\\\"name\\\":\\\"李四\\\",\\\"age\\\":24}} map对象 = {黑马一班=User{name='张三', age=23}, 黑马二班=User{name='李四', age=24}} */ @Test public void test03() throws Exception{ //map<String,User>转json HashMap<String,User> map = new HashMap<>(); map.put(\\\"黑马一班\\\",new User(\\\"张三\\\",23)); map.put(\\\"黑马二班\\\",new User(\\\"李四\\\",24)); String json = mapper.writeValueAsString(map); System.out.println(\\\"json字符串：\\\" + json); //json转map<String,User> HashMap<String,User> map2 = mapper.readValue(json,new TypeReference<HashMap<String,User>>(){}); System.out.println(\\\"java对象：\\\" + map2); }\",\"List转 JSON, JSON 转 List。\",\"/* 4.List<String>转json, json转 List<String> json字符串 = [\\\"张三\\\",\\\"李四\\\"] list对象 = [张三, 李四] */ @Test public void test04() throws Exception{ //List<String>转json ArrayList<String> list = new ArrayList<>(); list.add(\\\"张三\\\"); list.add(\\\"李四\\\"); String json = mapper.writeValueAsString(list); System.out.println(\\\"json字符串：\\\" + json); //json转 List<String> ArrayList<String> list2 = mapper.readValue(json,ArrayList.class); System.out.println(\\\"java对象：\\\" + list2); }\",\"List转 JSON, JSON 转 List。\",\"/* 5.List<User>转json, json转List<User> json字符串 = [{\\\"name\\\":\\\"张三\\\",\\\"age\\\":23},{\\\"name\\\":\\\"李四\\\",\\\"age\\\":24}] list对象 = [User{name='张三', age=23}, User{name='李四', age=24}] */ @Test public void test05() throws Exception{ //List<User>转json ArrayList<User> list = new ArrayList<>(); list.add(new User(\\\"张三\\\",23)); list.add(new User(\\\"李四\\\",24)); String json = mapper.writeValueAsString(list); System.out.println(\\\"json字符串：\\\" + json); //json转List<User> ArrayList<User> list2 = mapper.readValue(json,new TypeReference<ArrayList<User>>(){}); System.out.println(\\\"java对象：\\\" + list2); }\"]},\"1440\":{\"h\":\"2.4、小结\",\"t\":[\"**Jackson：**开源免费的 JSON 转换工具，SpringMVC 转换默认使用 Jackson。\",\"可以将 JAVA 对象或集合转换成 JSON 格式的字符串，也可以将 JSON 格式的字符串转成 JAVA 对象。\",\"常用类\",\"案例效果和环境介绍\",\"案例分析\",\"页面\",\"为用户名输入框绑定鼠标点击事件。\",\"获取输入的用户名数据。\",\"判断用户名是否为空。\",\"如果为空，则将联想提示框隐藏。\",\"如果不为空，则发送 AJAX 请求，并将响应的数据显示到联想框。\",\"控制层\",\"获取请求参数。\",\"调用业务层的模糊查询方法。\",\"将返回的数据转成 JSON，并响应给客户端。\",\"代码实现\",\"html页面\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <title>用户搜索</title> <style type=\\\"text/css\\\"> .content { width: 643px; margin: 100px auto; text-align: center; } input[type='text'] { width: 530px; height: 40px; font-size: 14px; } input[type='button'] { width: 100px; height: 46px; background: #38f; border: 0; color: #fff; font-size: 15px } .show { position: absolute; width: 535px; height: 100px; border: 1px solid #999; border-top: 0; display: none; } </style> </head> <body> <form autocomplete=\\\"off\\\"> <div class=\\\"content\\\"> <img src=\\\"img/logo.jpg\\\"> <br/><br/> <input type=\\\"text\\\" id=\\\"username\\\"> <input type=\\\"button\\\" value=\\\"搜索一下\\\"> <!--用于显示联想的数据--> <div id=\\\"show\\\" class=\\\"show\\\"></div> </div> </form> </body> <script src=\\\"js/jquery-3.3.1.min.js\\\"></script> <script> //1.为用户名输入框绑定鼠标点击事件 $(\\\"#username\\\").mousedown(function () { //2.获取输入的用户名 let username = $(\\\"#username\\\").val(); //3.判断用户名是否为空 if(username == null || username == \\\"\\\") { //4.如果为空，将联想框隐藏 $(\\\"#show\\\").hide(); return; } //5.如果不为空，发送AJAX请求。并将数据显示到联想框 $.ajax({ //请求的资源路径 url:\\\"userServlet\\\", //请求参数 data:{\\\"username\\\":username}, //请求方式 type:\\\"POST\\\", //响应数据形式 dataType:\\\"json\\\", //请求成功后的回调函数 success:function (data) { //将返回的数据显示到show的div let names = \\\"\\\"; for(let i = 0; i < data.length; i++) { names += \\\"<div>\\\"+data[i].name+\\\"</div>\\\"; } $(\\\"#show\\\").html(names); $(\\\"#show\\\").show(); } }); }); </script> </html>\",\"控制层-Java代码\",\"@WebServlet(\\\"/userServlet\\\") public class UserServlet extends HttpServlet { @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { //设置请求和响应的编码 req.setCharacterEncoding(\\\"UTF-8\\\"); resp.setContentType(\\\"text/html;charset=UTF-8\\\"); //1.获取请求参数 String username = req.getParameter(\\\"username\\\"); //2.调用业务层的模糊查询方法得到数据 UserService service = new UserServiceImpl(); List<User> users = service.selectLike(username); //3.将数据转成JSON，响应到客户端 ObjectMapper mapper = new ObjectMapper(); String json = mapper.writeValueAsString(users); resp.getWriter().write(json); } @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { doPost(req,resp); } }\",\"​ 瀑布流无限加载数据分页\"]},\"1441\":{\"h\":\"4.1、案例效果和环境准备\",\"t\":[\"案例效果\",\"环境准备\",\"1.导入“案例二的sql语句.sql”文件（已在当天的SQL语句中提供）\",\"2.导入“分页案例原始环境”中的ajax03项目（已在当天的资料中提供）\"]},\"1442\":{\"h\":\"4.2、案例的分析\",\"t\":[\"如何确定当前显示的数据已经浏览完毕？\",\"公式：(滚动条距底部的距离 + 滚动条上下滚动的距离 + 当前窗口的高度) >= 当前文档的高度\",\"当前文档高度：存储10条数据，100px。\",\"滚动条距底部的距离：1px。\",\"当前窗口的高度：80px。\",\"滚动条上下滚动的距离：>=19px。\",\"前置知识\"]},\"1443\":{\"h\":\"4.3、案例的实现\",\"t\":[\"实现思路\",\"页面\",\"定义发送请求标记。\",\"定义当前页码和每页显示的条数。\",\"定义滚动条距底部的距离。\",\"设置页面加载事件。\",\"为当前窗口绑定滚动条滚动事件。\",\"获取必要信息(当前窗口的高度,滚动条上下滚动的距离,当前文档的高度)。\",\"计算当前展示数据是否浏览完毕。\",\"判断请求标记是否为 true。\",\"将请求标记置为 false，当前异步操作完成前，不能重新发起请求。\",\"根据当前页和每页显示的条数来请求查询分页数据。\",\"当前页码+1。\",\"服务器\",\"获取请求参数(当前页,每页显示的条数)。\",\"根据当前页码和每页显示的条数，调用业务层的方法，得到分页 Page 对象。\",\"将得到的数据转为 json。\",\"将数据响应给客户端。\",\"代码实现\",\"html页面\",\"<script> //1.定义发送请求标记 let send = true; //2.定义当前页码和每页显示的条数 let start = 1; let pageSize = 10; //3.定义滚动条距底部的距离 let bottom = 1; //4.设置页面加载事件 $(function () { //5.为当前窗口绑定滚动条滚动事件 $(window).scroll(function () { //6.获取必要信息，用于计算当前展示数据是否浏览完毕 //当前窗口的高度 let windowHeight = $(window).height(); //滚动条从上到下滚动距离 let scrollTop = $(window).scrollTop(); //当前文档的高度 let docHeight = $(document).height(); //7.计算当前展示数据是否浏览完毕 //当 滚动条距底部的距离 + 当前滚动条滚动的距离 + 当前窗口的高度 >= 当前文档的高度 if((bottom + scrollTop + windowHeight) >= docHeight) { //8.判断请求标记是否为true if(send == true) { //9.将请求标记置为false，当前异步操作完成前，不能重新发起请求。 send = false; //10.根据当前页和每页显示的条数来 请求查询分页数据 queryByPage(start,pageSize); //11.当前页码+1 start++; } } }); }); //定义查询分页数据的函数 function queryByPage(start,pageSize){ //加载动图显示 $(\\\".loading\\\").show(); //发起AJAX请求 $.ajax({ //请求的资源路径 url:\\\"newsServlet\\\", //请求的参数 data:{\\\"start\\\":start,\\\"pageSize\\\":pageSize}, //请求的方式 type:\\\"POST\\\", //响应数据形式 dataType:\\\"json\\\", //请求成功后的回调函数 success:function (data) { if(data.length == 0) { $(\\\".loading\\\").hide(); $(\\\"#no\\\").html(\\\"我也是有底线的...\\\"); return; } //加载动图隐藏 $(\\\".loading\\\").hide(); //将数据显示 let titles = \\\"\\\"; for(let i = 0; i < data.length; i++) { titles += \\\"<li>\\\\n\\\" + \\\" <div class=\\\\\\\"title-box\\\\\\\">\\\\n\\\" + \\\" <a href=\\\\\\\"#\\\\\\\" class=\\\\\\\"link\\\\\\\">\\\\n\\\" + data[i].title + \\\" <hr>\\\\n\\\" + \\\" </a>\\\\n\\\" + \\\" </div>\\\\n\\\" + \\\" </li>\\\"; } //显示到页面 $(\\\".news_list\\\").append(titles); //将请求标记设置为true send = true; } }); } </script>\",\"java代码\",\"import com.fasterxml.jackson.databind.ObjectMapper; import com.github.pagehelper.Page; import com.itheima.service.NewsService; import com.itheima.service.impl.NewsServiceImpl; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import java.io.IOException; @WebServlet(\\\"/newsServlet\\\") public class NewsServlet extends HttpServlet { @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { //设置请求和响应的编码 req.setCharacterEncoding(\\\"UTF-8\\\"); resp.setContentType(\\\"text/html;charset=UTF-8\\\"); //1.获取请求参数 String start = req.getParameter(\\\"start\\\"); String pageSize = req.getParameter(\\\"pageSize\\\"); //2.根据当前页码和每页显示的条数来调用业务层的查询方法，得到分页Page对象 NewsService service = new NewsServiceImpl(); Page page = service.pageQuery(Integer.parseInt(start), Integer.parseInt(pageSize)); //3.将得到的数据转为JSON String json = new ObjectMapper().writeValueAsString(page); try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } //4.将数据响应给客户端 resp.getWriter().write(json); } @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { doPost(req,resp); } }\"]},\"1444\":{\"h\":\"4.4、点击按钮分页\",\"t\":[\"案例效果和环境准备\",\"按钮效果\",\"环境准备\",\"使用已完善的ajax3项目\",\"复制index.html更名为index2.html，并去掉原js中的方法\",\"案例的分析\",\"页面\",\"1.引入分页插件的样式文件和 js 文件。\",\"定义当前页码和每页显示的条数。\",\"调用查询数据的函数。\",\"定义请求查询分页数据的函数，发起 AJAX 异步请求。\",\"为分页按钮区域设置页数参数(总页数和当前页)。\",\"为分页按钮绑定单击事件,完成上一页下一页查询功能。\",\"服务器\",\"获取请求参数。\",\"根据当前页码和每页显示的条数，调用业务层的方法，得到分页 Page 对象\",\"封装 PageInfo 对象。\",\"将得到的数据转为 json。\",\"将数据响应给客户端。\",\"案例的实现\",\"html页面\",\"<script> //1.定义当前页码和每页显示的条数 let start = 1; let pageSize = 10; //2.调用查询数据的方法 queryByPage(start,pageSize); //3.定义请求查询分页数据的函数，发起AJAX异步请求，将数据显示到页面 function queryByPage(start,pageSize) { $.ajax({ //请求的资源路径 url:\\\"newsServlet2\\\", //请求的参数 data:{\\\"start\\\":start,\\\"pageSize\\\":pageSize}, //请求的方式 type:\\\"POST\\\", //响应数据形式 dataType:\\\"json\\\", //请求成功后的回调函数 success:function (pageInfo) { //将数据显示到页面 let titles = \\\"\\\"; for(let i = 0; i < pageInfo.list.length; i++) { titles += \\\"<li>\\\\n\\\" + \\\" <div class=\\\\\\\"title-box\\\\\\\">\\\\n\\\" + \\\" <a href=\\\\\\\"#\\\\\\\" class=\\\\\\\"link\\\\\\\">\\\\n\\\" + pageInfo.list[i].title + \\\" <hr>\\\\n\\\" + \\\" </a>\\\\n\\\" + \\\" </div>\\\\n\\\" + \\\" </li>\\\"; } $(\\\".news_list\\\").html(titles); //4.为分页按钮区域设置页数参数（总页数和当前页） $(\\\"#light-pagination\\\").pagination({ pages:pageInfo.pages, currentPage:pageInfo.pageNum }); //5.为分页按钮绑定单击事件,完成上一页下一页查询功能 $(\\\"#light-pagination .page-link\\\").click(function () { //获取点击按钮的文本内容 let page = $(this).html(); //如果点击的是Prev，调用查询方法，查询当前页的上一页数据 if(page == \\\"Prev\\\") { queryByPage(pageInfo.pageNum - 1,pageSize); }else if (page == \\\"Next\\\") { //如果点击的是Next，调用查询方法，查询当前页的下一页数据 queryByPage(pageInfo.pageNum + 1,pageSize); } else { //调用查询方法，查询当前页的数据 queryByPage(page,pageSize); } }); } }); } </script>\",\"Java代码\",\"import com.fasterxml.jackson.databind.ObjectMapper; import com.github.pagehelper.Page; import com.github.pagehelper.PageInfo; import com.itheima.bean.News; import com.itheima.service.NewsService; import com.itheima.service.impl.NewsServiceImpl; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import java.io.IOException; import java.util.List; @WebServlet(\\\"/newsServlet2\\\") public class NewsServlet2 extends HttpServlet { @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { //设置请求和响应的编码 req.setCharacterEncoding(\\\"UTF-8\\\"); resp.setContentType(\\\"text/html;charset=UTF-8\\\"); //1.获取请求参数 String start = req.getParameter(\\\"start\\\"); String pageSize = req.getParameter(\\\"pageSize\\\"); //2.根据当前页码和每页显示的条数来调用业务层的查询方法，得到分页Page对象 NewsService service = new NewsServiceImpl(); Page page = service.pageQuery(Integer.parseInt(start), Integer.parseInt(pageSize)); //3.封装PageInfo对象 PageInfo<List<News>> info = new PageInfo<>(page); //4.将得到的数据转为JSON String json = new ObjectMapper().writeValueAsString(info); //5.将数据响应给客户端 resp.getWriter().write(json); } @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { doPost(req,resp); } }\"]},\"1445\":{\"h\":\"JQuery快速入门\",\"t\":[\"1、JQuery快速入门\"]},\"1446\":{\"h\":\"1.1、JQuery介绍\",\"t\":[\"jQuery 是一个 JavaScript 库。\",\"所谓的库，就是一个 JS 文件，里面封装了很多预定义的函数，比如获取元素，执行隐藏、移动等，目的就 是在使用时直接调用，不需要再重复定义，这样就可以极大地简化了 JavaScript 编程。\",\"jQuery 官网：https://www.jquery.com\"]},\"1447\":{\"h\":\"1.2、JQuery快速入门\",\"t\":[\"开发思路\",\"编写 HTML 文档。\",\"引入 jQuery 文件。\",\"使用 jQuery 获取元素。\",\"使用浏览器测试。\",\"代码实现\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\"> <title>快速入门</title> </head> <body> <div id=\\\"div\\\">我是div</div> </body> <!--引入 jQuery 文件--> <script src=\\\"js/jquery-3.3.1.min.js\\\"></script> <script> // JS方式，通过id属性值来获取div元素 let jsDiv = document.getElementById(\\\"div\\\"); //alert(jsDiv); //alert(jsDiv.innerHTML); // jQuery方式，通过id属性值来获取div元素 let jqDiv = $(\\\"#div\\\"); alert(jqDiv); alert(jqDiv.html()); </script> </html>\"]},\"1448\":{\"h\":\"1.3、小结\",\"t\":[\"jQuery 是一个 JavaScript 库。\",\"说白了就是定义好的一个 JS 文件，内部封装了很多功能，可以大大简化我们的 JS 操作步骤。\",\"jQuery 官网：https://www.jquery.com。\",\"要想使用，必须要引入该文件。\",\"jQuery 的核心语法 $();\"]},\"1449\":{\"h\":\"2.1、JS对象和JQuery对象转换\",\"t\":[\"jQuery 本质上虽然也是 JS，但如果想使用 jQuery 的属性和方法那么必须保证对象是 jQuery 对象，而不是 JS 方式获得的 DOM 对象，二者的 API 方法不能混合使用，若想使用对方的 API，需要进行对象的转换。\",\"JS 的 DOM 对象转换成 jQuery 对象\",\"//$(JS 的 DOM 对象); // JS方式，通过id属性值获取div元素 let jsDiv = document.getElementById(\\\"div\\\"); alert(jsDiv.innerHTML); //alert(jsDiv.html()); JS对象无法使用jQuery里面的功能 // 将 JS 对象转换为jQuery对象 let jq = $(jsDiv); alert(jq.html());\",\"jQuery 对象转换成 JS 对象\",\"/*jQuery 对象[索引]; jQuery 对象.get(索引);*/ // jQuery方式，通过id属性值获取div元素 let jqDiv = $(\\\"#div\\\"); alert(jqDiv.html()); // alert(jqDiv.innerHTML); jQuery对象无法使用JS里面的功能 // 将 jQuery对象转换为JS对象 let js = jqDiv[0]; alert(js.innerHTML);\"]},\"1450\":{\"h\":\"2.2、事件的基本使用\",\"t\":[\"常用的事件\",\"在 jQuery 中将事件封装成了对应的方法。去掉了 JS 中的 .on 语法。\",\"代码实现\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\"> <title>事件的使用</title> </head> <body> <input type=\\\"button\\\" id=\\\"btn\\\" value=\\\"点我\\\"> <br> <input type=\\\"text\\\" id=\\\"input\\\"> </body> <script src=\\\"js/jquery-3.3.1.min.js\\\"></script> <script> //单击事件 $(\\\"#btn\\\").click(function(){ alert(\\\"点我干嘛?\\\"); }); //获取焦点事件 // $(\\\"#input\\\").focus(function(){ // alert(\\\"你要输入数据啦...\\\"); // }); //失去焦点事件 $(\\\"#input\\\").blur(function(){ alert(\\\"你输入完成啦...\\\"); }); </script> </html>\"]},\"1451\":{\"h\":\"2.3、时间的绑定和解绑\",\"t\":[\"绑定事件\",\"//jQuery 对象.on(事件名称,执行的功能);\",\"//给btn1按钮绑定单击事件 $(\\\"#btn1\\\").on(\\\"click\\\",function(){ alert(\\\"点我干嘛?\\\"); });\",\"解绑事件\",\"如果不指定事件名称，则会把该对象绑定的所有事件都解绑\",\"//jQuery 对象.off(事件名称);\",\"//通过btn2解绑btn1的单击事件 $(\\\"#btn2\\\").on(\\\"click\\\",function(){ $(\\\"#btn1\\\").off(\\\"click\\\"); });\"]},\"1452\":{\"h\":\"2.4、时间的切换\",\"t\":[\"事件的切换：需要给同一个对象绑定多个事件，而且多个事件还有先后顺序关系。\",\"方式一：单独定义\",\"$(元素).事件方法名1(要执行的功能);\",\"$(元素).事件方法名2(要执行的功能);\",\"//方式一 单独定义 $(\\\"#div\\\").mouseover(function(){ //背景色：红色 //$(\\\"#div\\\").css(\\\"background\\\",\\\"red\\\"); $(this).css(\\\"background\\\",\\\"red\\\"); }); $(\\\"#div\\\").mouseout(function(){ //背景色：蓝色 //$(\\\"#div\\\").css(\\\"background\\\",\\\"blue\\\"); $(this).css(\\\"background\\\",\\\"blue\\\"); });\",\"方式二：链式定义\",\"$(元素).事件方法名1(要执行的功能)\",\".事件方法名2(要执行的功能);\",\"//方式二 链式定义 $(\\\"#div\\\").mouseover(function(){ $(this).css(\\\"background\\\",\\\"red\\\"); }).mouseout(function(){ $(this).css(\\\"background\\\",\\\"blue\\\"); });\"]},\"1453\":{\"h\":\"2.5、遍历操作\",\"t\":[\"方式一：传统方式\",\"for(let i = 0; i < 容器对象长度; i++){ 执行功能; }\",\"//方式一：传统方式 $(\\\"#btn\\\").click(function(){ let lis = $(\\\"li\\\"); for(let i = 0 ; i < lis.length; i++) { alert(i + \\\":\\\" + lis[i].innerHTML); } });\",\"方式二：对象.each()方法\",\"容器对象.each(function(index,ele){ 执行功能; });\",\"//方式二：对象.each()方法 $(\\\"#btn\\\").click(function(){ let lis = $(\\\"li\\\"); lis.each(function(index,ele){ alert(index + \\\":\\\" + ele.innerHTML); }); });\",\"方式三：$.each()方法\",\"$.each(容器对象,function(index,ele){ 执行功能; });\",\"//方式三：$.each()方法 $(\\\"#btn\\\").click(function(){ let lis = $(\\\"li\\\"); $.each(lis,function(index,ele){ alert(index + \\\":\\\" + ele.innerHTML); }); });\",\"方式四：for of语句\",\"for(ele of 容器对象){ 执行功能; }\",\"//方式四：for of 语句遍历 $(\\\"#btn\\\").click(function(){ let lis = $(\\\"li\\\"); for(ele of lis){ alert(ele.innerHTML); } });\"]},\"1454\":{\"h\":\"2.6、小结\",\"t\":[\"JS 对象和 jQuery 对象相互转换\",\"$(JS 的 DOM 对象)：将 JS 对象转为 jQuery 对象。\",\"jQuery 对象[索引] jQuery\",\"对象.get(索引)：将 jQuery 对象转为 JS 对象。\",\"事件\",\"在 jQuery 中将事件封装成了对应的方法。去掉了 JS 中的 .on 语法。\",\"on(事件名称,执行的功能)：绑定事件。\",\"off(事件名称)：解绑事件。\",\"遍历\",\"传统方式。\",\"对象.each() 方法。\",\"$.each() 方法。\",\"for of 语句。\"]},\"1455\":{\"h\":\"3.1、基本选择器\",\"t\":[\"选择器：类似于 CSS 的选择器，可以帮助我们获取元素。\",\"例如：id 选择器、类选择器、元素选择器、属性选择器等等。\",\"jQuery 中选择器的语法：$();\",\"代码实现\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\"> <title>基本选择器</title> </head> <body> <div id=\\\"div1\\\">div1</div> <div class=\\\"cls\\\">div2</div> <div class=\\\"cls\\\">div3</div> </body> <script src=\\\"js/jquery-3.3.1.min.js\\\"></script> <script> //1.元素选择器 $(\\\"元素的名称\\\") let divs = $(\\\"div\\\"); //alert(divs.length); //2.id选择器 $(\\\"#id的属性值\\\") let div1 = $(\\\"#div1\\\"); //alert(div1); //3.类选择器 $(\\\".class的属性值\\\") let cls = $(\\\".cls\\\"); alert(cls.length); </script> </html>\"]},\"1456\":{\"h\":\"3.2、层级选择器\",\"t\":[\"代码实现\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\"> <title>层级选择器</title> </head> <body> <div> <span>s1 <span>s1-1</span> <span>s1-2</span> </span> <span>s2</span> </div> <div></div> <p>p1</p> <p>p2</p> </body> <script src=\\\"js/jquery-3.3.1.min.js\\\"></script> <script> // 1. 后代选择器 $(\\\"A B\\\"); A下的所有B(包括B的子级) let spans1 = $(\\\"div span\\\"); //alert(spans1.length); // 2. 子选择器 $(\\\"A > B\\\"); A下的所有B(不包括B的子级) let spans2 = $(\\\"div > span\\\"); //alert(spans2.length); // 3. 兄弟选择器 $(\\\"A + B\\\"); A相邻的下一个B let ps1 = $(\\\"div + p\\\"); //alert(ps1.length); // 4. 兄弟选择器 $(\\\"A ~ B\\\"); A相邻的所有B let ps2 = $(\\\"div ~ p\\\"); alert(ps2.length); </script> </html>\"]},\"1457\":{\"h\":\"3.3、属性选择器\",\"t\":[\"代码实现\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\"> <title>属性选择器</title> </head> <body> <input type=\\\"text\\\"> <input type=\\\"password\\\"> <input type=\\\"password\\\"> </body> <script src=\\\"js/jquery-3.3.1.min.js\\\"></script> <script> //1.属性名选择器 $(\\\"元素[属性名]\\\") let in1 = $(\\\"input[type]\\\"); //alert(in1.length); //2.属性值选择器 $(\\\"元素[属性名=属性值]\\\") let in2 = $(\\\"input[type='password']\\\"); alert(in2.length); </script> </html>\"]},\"1458\":{\"h\":\"3.4、过滤器选择器\",\"t\":[\"代码实现\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\"> <title>过滤器选择器</title> </head> <body> <div>div1</div> <div id=\\\"div2\\\">div2</div> <div>div3</div> <div>div4</div> </body> <script src=\\\"js/jquery-3.3.1.min.js\\\"></script> <script> // 1.首元素选择器 $(\\\"A:first\\\"); let div1 = $(\\\"div:first\\\"); //alert(div1.html()); // 2.尾元素选择器 $(\\\"A:last\\\"); let div4 = $(\\\"div:last\\\"); //alert(div4.html()); // 3.非元素选择器 $(\\\"A:not(B)\\\"); let divs1 = $(\\\"div:not(#div2)\\\"); //alert(divs1.length); // 4.偶数选择器 $(\\\"A:even\\\"); let divs2 = $(\\\"div:even\\\"); //alert(divs2.length); //alert(divs2[0].innerHTML); //alert(divs2[1].innerHTML); // 5.奇数选择器 $(\\\"A:odd\\\"); let divs3 = $(\\\"div:odd\\\"); //alert(divs3.length); //alert(divs3[0].innerHTML); //alert(divs3[1].innerHTML); // 6.等于索引选择器 $(\\\"A:eq(index)\\\"); let div3 = $(\\\"div:eq(2)\\\"); //alert(div3.html()); // 7.大于索引选择器 $(\\\"A:gt(index)\\\"); let divs4 = $(\\\"div:gt(1)\\\"); //alert(divs4.length); //alert(divs4[0].innerHTML); //alert(divs4[1].innerHTML); // 8.小于索引选择器 $(\\\"A:lt(index)\\\"); let divs5 = $(\\\"div:lt(2)\\\"); alert(divs5.length); alert(divs5[0].innerHTML); alert(divs5[1].innerHTML); </script> </html>\"]},\"1459\":{\"h\":\"3.5、表单属性选择器\",\"t\":[\"代码实现\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\"> <title>表单属性选择器</title> </head> <body> <input type=\\\"text\\\" disabled> <input type=\\\"text\\\" > <input type=\\\"radio\\\" name=\\\"gender\\\" value=\\\"men\\\" checked>男 <input type=\\\"radio\\\" name=\\\"gender\\\" value=\\\"women\\\">女 <input type=\\\"checkbox\\\" name=\\\"hobby\\\" value=\\\"study\\\" checked>学习 <input type=\\\"checkbox\\\" name=\\\"hobby\\\" value=\\\"sleep\\\" checked>睡觉 <select> <option>---请选择---</option> <option selected>本科</option> <option>专科</option> </select> </body> <script src=\\\"js/jquery-3.3.1.min.js\\\"></script> <script> // 1.可用元素选择器 $(\\\"A:enabled\\\"); let ins1 = $(\\\"input:enabled\\\"); //alert(ins1.length); // 2.不可用元素选择器 $(\\\"A:disabled\\\"); let ins2 = $(\\\"input:disabled\\\"); //alert(ins2.length); // 3.单选/复选框被选中的元素 $(\\\"A:checked\\\"); let ins3 = $(\\\"input:checked\\\"); //alert(ins3.length); //alert(ins3[0].value); //alert(ins3[1].value); //alert(ins3[2].value); // 4.下拉框被选中的元素 $(\\\"A:selected\\\"); let select = $(\\\"select option:selected\\\"); alert(select.html()); </script> </html>\"]},\"1460\":{\"h\":\"3.6、小结\",\"t\":[\"选择器：类似于 CSS 的选择器，可以帮助我们获取元素。\",\"jQuery 中选择器的语法：$();\",\"基本选择器 \",\"$(\\\"元素的名称\\\");\",\"$(\\\"#id的属性值\\\");\",\"$(\\\".class的属性值\\\");\",\"层级选择器 \",\"$(\\\"A B\\\");\",\"$(\\\"A > B\\\");\",\"属性选择器 \",\"$(\\\"A[属性名]\\\");\",\"$(\\\"A[属性名=属性值]\\\");\",\"过滤器选择器 \",\"$(\\\"A:even\\\");\",\"$(\\\"A:odd\\\");\",\"表单属性选择器 \",\"$(\\\"A:disabled\\\");\",\"$(\\\"A:checked\\\");\",\"$(\\\"A:selected\\\");\"]},\"1461\":{\"h\":\"4.1、操作文本\",\"t\":[\"常用方法\",\"代码实现\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\"> <title>操作文本</title> </head> <body> <div id=\\\"div\\\">我是div</div> <input type=\\\"button\\\" id=\\\"btn1\\\" value=\\\"获取div的文本\\\"> <input type=\\\"button\\\" id=\\\"btn2\\\" value=\\\"设置div的文本\\\"> </body> <script src=\\\"js/jquery-3.3.1.min.js\\\"></script> <script> //1. html() 获取标签的文本内容 $(\\\"#btn1\\\").click(function(){ //获取div标签的文本内容 let value = $(\\\"#div\\\").html(); alert(value); }); //2. html(value) 设置标签的文本内容，解析标签 $(\\\"#btn2\\\").click(function(){ //设置div标签的文本内容 //$(\\\"#div\\\").html(\\\"我真的是div\\\"); $(\\\"#div\\\").html(\\\"<b>我真的是div</b>\\\"); }); </script> </html>\"]},\"1462\":{\"h\":\"4.2、操作对象\",\"t\":[\"常用方法\",\"代码实现\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\"> <title>操作对象</title> </head> <body> <div id=\\\"div\\\"></div> <input type=\\\"button\\\" id=\\\"btn1\\\" value=\\\"添加一个span到div\\\"> <br><br><br> <input type=\\\"button\\\" id=\\\"btn2\\\" value=\\\"将加油添加到城市列表最下方\\\"> &nbsp;&nbsp;&nbsp; <input type=\\\"button\\\" id=\\\"btn3\\\" value=\\\"将加油添加到城市列表最上方\\\"> &nbsp;&nbsp;&nbsp; <input type=\\\"button\\\" id=\\\"btn4\\\" value=\\\"将雄起添加到上海下方\\\"> &nbsp;&nbsp;&nbsp; <input type=\\\"button\\\" id=\\\"btn5\\\" value=\\\"将雄起添加到上海上方\\\"> &nbsp;&nbsp;&nbsp; <ul id=\\\"city\\\"> <li id=\\\"bj\\\">北京</li> <li id=\\\"sh\\\">上海</li> <li id=\\\"gz\\\">广州</li> <li id=\\\"sz\\\">深圳</li> </ul> <ul id=\\\"desc\\\"> <li id=\\\"jy\\\">加油</li> <li id=\\\"xq\\\">雄起</li> </ul> <br><br><br> <input type=\\\"button\\\" id=\\\"btn6\\\" value=\\\"将雄起删除\\\"> &nbsp;&nbsp;&nbsp; <input type=\\\"button\\\" id=\\\"btn7\\\" value=\\\"将描述列表全部删除\\\"> &nbsp;&nbsp;&nbsp; </body> <script src=\\\"js/jquery-3.3.1.min.js\\\"></script> <script> /* 1. $(\\\"元素\\\") 创建指定元素 2. append(element) 添加成最后一个子元素，由添加者对象调用 3. appendTo(element) 添加成最后一个子元素，由被添加者对象调用 4. prepend(element) 添加成第一个子元素，由添加者对象调用 5. prependTo(element) 添加成第一个子元素，由被添加者对象调用 6. before(element) 添加到当前元素的前面，两者之间是兄弟关系，由添加者对象调用 7. after(element) 添加到当前元素的后面，两者之间是兄弟关系，由添加者对象调用 8. remove() 删除指定元素(自己移除自己) 9. empty() 清空指定元素的所有子元素 */ // 按钮一：添加一个span到div $(\\\"#btn1\\\").click(function(){ let span = $(\\\"<span>span</span>\\\"); $(\\\"#div\\\").append(span); }); //按钮二：将加油添加到城市列表最下方 $(\\\"#btn2\\\").click(function(){ //$(\\\"#city\\\").append($(\\\"#jy\\\")); $(\\\"#jy\\\").appendTo($(\\\"#city\\\")); }); //按钮三：将加油添加到城市列表最上方 $(\\\"#btn3\\\").click(function(){ //$(\\\"#city\\\").prepend($(\\\"#jy\\\")); $(\\\"#jy\\\").prependTo($(\\\"#city\\\")); }); //按钮四：将雄起添加到上海下方 $(\\\"#btn4\\\").click(function(){ $(\\\"#sh\\\").after($(\\\"#xq\\\")); }); //按钮五：将雄起添加到上海上方 $(\\\"#btn5\\\").click(function(){ $(\\\"#sh\\\").before($(\\\"#xq\\\")); }); //按钮六：将雄起删除 $(\\\"#btn6\\\").click(function(){ $(\\\"#xq\\\").remove(); }); //按钮七：将描述列表全部删除 $(\\\"#btn7\\\").click(function(){ $(\\\"#desc\\\").empty(); }); </script> </html>\"]},\"1463\":{\"h\":\"4.3、操作样式\",\"t\":[\"常用方法\",\"代码实现\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\"> <title>操作样式</title> <style> .cls1{ background: pink; height: 30px; } </style> </head> <body> <div style=\\\"border: 1px solid red;\\\" id=\\\"div\\\">我是div</div> <input type=\\\"button\\\" id=\\\"btn1\\\" value=\\\"获取div的样式\\\"> &nbsp;&nbsp; <input type=\\\"button\\\" id=\\\"btn2\\\" value=\\\"设置div的背景色为蓝色\\\">&nbsp;&nbsp; <br><br><br> <input type=\\\"button\\\" id=\\\"btn3\\\" value=\\\"给div设置cls1样式\\\"> &nbsp;&nbsp; <input type=\\\"button\\\" id=\\\"btn4\\\" value=\\\"给div删除cls1样式\\\"> &nbsp;&nbsp; <input type=\\\"button\\\" id=\\\"btn5\\\" value=\\\"给div设置或删除cls1样式\\\"> &nbsp;&nbsp; </body> <script src=\\\"js/jquery-3.3.1.min.js\\\"></script> <script> // 1.css(name) 获取css样式 $(\\\"#btn1\\\").click(function(){ alert($(\\\"#div\\\").css(\\\"border\\\")); }); // 2.css(name,value) 设置CSS样式 $(\\\"#btn2\\\").click(function(){ $(\\\"#div\\\").css(\\\"background\\\",\\\"blue\\\"); }); // 3.addClass(value) 给指定的对象添加样式类名 $(\\\"#btn3\\\").click(function(){ $(\\\"#div\\\").addClass(\\\"cls1\\\"); }); // 4.removeClass(value) 给指定的对象删除样式类名 $(\\\"#btn4\\\").click(function(){ $(\\\"#div\\\").removeClass(\\\"cls1\\\"); }); // 5.toggleClass(value) 如果没有样式类名，则添加。如果有，则删除 $(\\\"#btn5\\\").click(function(){ $(\\\"#div\\\").toggleClass(\\\"cls1\\\"); }); </script> </html>\"]},\"1464\":{\"h\":\"4.4、操作属性\",\"t\":[\"常用方法\",\"代码实现\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\"> <title>操作属性</title> </head> <body> <input type=\\\"text\\\" id=\\\"username\\\"> <br> <input type=\\\"button\\\" id=\\\"btn1\\\" value=\\\"获取输入框的id属性\\\"> &nbsp;&nbsp; <input type=\\\"button\\\" id=\\\"btn2\\\" value=\\\"给输入框设置value属性\\\"> <br><br> <input type=\\\"radio\\\" id=\\\"gender1\\\" name=\\\"gender\\\">男 <input type=\\\"radio\\\" id=\\\"gender2\\\" name=\\\"gender\\\">女 <br> <input type=\\\"button\\\" id=\\\"btn3\\\" value=\\\"选中女\\\"> <br><br> <select> <option>---请选择---</option> <option id=\\\"bk\\\">本科</option> <option id=\\\"zk\\\">专科</option> </select> <br> <input type=\\\"button\\\" id=\\\"btn4\\\" value=\\\"选中本科\\\"> </body> <script src=\\\"js/jquery-3.3.1.min.js\\\"></script> <script> // 1.attr(name,[value]) 获得/设置属性的值 //按钮一：获取输入框的id属性 $(\\\"#btn1\\\").click(function(){ alert($(\\\"#username\\\").attr(\\\"id\\\")); }); //按钮二：给输入框设置value属性 $(\\\"#btn2\\\").click(function(){ $(\\\"#username\\\").attr(\\\"value\\\",\\\"hello...\\\"); }); // 2.prop(name,[value]) 获得/设置属性的值(checked，selected) //按钮三：选中女 $(\\\"#btn3\\\").click(function(){ $(\\\"#gender2\\\").prop(\\\"checked\\\",true); }); //按钮四：选中本科 $(\\\"#btn4\\\").click(function(){ $(\\\"#bk\\\").prop(\\\"selected\\\",true); }); </script> </html>\"]},\"1465\":{\"h\":\"4.5、小结\",\"t\":[\"操作文本 \",\"html() html(…)：获取或设置标签的文本，解析标签。\",\"操作对象 \",\"$(“元素”)：创建指定元素。\",\"append(element)：添加成最后一个子元素，由添加者对象调用。\",\"prepend(element)：添加成第一个子元素，由添加者对象调用。\",\"before(element)：添加到当前元素的前面，两者之间是兄弟关系，由添加者对象调用。\",\"after(element)：添加到当前元素的后面，两者之间是兄弟关系，由添加者对象调用。\",\"remove()：删除指定元素(自己移除自己)。\",\"操作样式 \",\"addClass(value)：给指定的对象添加样式类名。\",\"removeClass(value)：给指定的对象删除样式类名。\",\"操作属性 \",\"attr(name,[value])：获得/设置属性的值。\",\"prop(name,[value])：获得/设置属性的值(checked，selected)。\"]},\"1466\":{\"h\":\"5.1、案例效果\"},\"1467\":{\"h\":\"5.2、分析和实现\",\"t\":[\"功能分析\",\"全选 \",\"为全选按钮绑定单击事件。\",\"获取所有的商品项复选框元素，为其添加 checked 属性，属性值为 true。\",\"全不选 \",\"为全不选按钮绑定单击事件。\",\"获取所有的商品项复选框元素，为其添加 checked 属性，属性值为 false。\",\"反选 \",\"为反选按钮绑定单击事件\",\"获取所有的商品项复选框元素，为其添加 checked 属性，属性值是目前相反的状态。\",\"代码实现\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\"> <title>复选框</title> </head> <body> <table id=\\\"tab1\\\" border=\\\"1\\\" width=\\\"800\\\" align=\\\"center\\\"> <tr> <th style=\\\"text-align: left\\\"> <input style=\\\"background:lightgreen\\\" id=\\\"selectAll\\\" type=\\\"button\\\" value=\\\"全选\\\"> <input style=\\\"background:lightgreen\\\" id=\\\"selectNone\\\" type=\\\"button\\\" value=\\\"全不选\\\"> <input style=\\\"background:lightgreen\\\" id=\\\"reverse\\\" type=\\\"button\\\" value=\\\"反选\\\"> </th> <th>分类ID</th> <th>分类名称</th> <th>分类描述</th> <th>操作</th> </tr> <tr> <td><input type=\\\"checkbox\\\" class=\\\"item\\\"></td> <td>1</td> <td>手机数码</td> <td>手机数码类商品</td> <td><a href=\\\"\\\">修改</a>|<a href=\\\"\\\">删除</a></td> </tr> <tr> <td><input type=\\\"checkbox\\\" class=\\\"item\\\"></td> <td>2</td> <td>电脑办公</td> <td>电脑办公类商品</td> <td><a href=\\\"\\\">修改</a>|<a href=\\\"\\\">删除</a></td> </tr> <tr> <td><input type=\\\"checkbox\\\" class=\\\"item\\\"></td> <td>3</td> <td>鞋靴箱包</td> <td>鞋靴箱包类商品</td> <td><a href=\\\"\\\">修改</a>|<a href=\\\"\\\">删除</a></td> </tr> <tr> <td><input type=\\\"checkbox\\\" class=\\\"item\\\"></td> <td>4</td> <td>家居饰品</td> <td>家居饰品类商品</td> <td><a href=\\\"\\\">修改</a>|<a href=\\\"\\\">删除</a></td> </tr> </table> </body> <script src=\\\"js/jquery-3.3.1.min.js\\\"></script> <script> //全选 //1.为全选按钮添加单击事件 $(\\\"#selectAll\\\").click(function(){ //2.获取所有的商品复选框元素，为其添加checked属性，属性值true $(\\\".item\\\").prop(\\\"checked\\\",true); }); //全不选 //1.为全不选按钮添加单击事件 $(\\\"#selectNone\\\").click(function(){ //2.获取所有的商品复选框元素，为其添加checked属性，属性值false $(\\\".item\\\").prop(\\\"checked\\\",false); }); //反选 //1.为反选按钮添加单击事件 $(\\\"#reverse\\\").click(function(){ //2.获取所有的商品复选框元素，为其添加checked属性，属性值是目前相反的状态 let items = $(\\\".item\\\"); items.each(function(){ $(this).prop(\\\"checked\\\",!$(this).prop(\\\"checked\\\")); }); }); </script> </html>\"]},\"1468\":{\"h\":\"6.1、案例效果\"},\"1469\":{\"h\":\"6.2、动态切换小图的分析和实现\",\"t\":[\"功能分析\",\"准备一个数组\",\"定义计数器\",\"定义定时器对象\",\"定义图片路径变量\",\"为开始按钮绑定单击事件\",\"设置按钮状态\",\"设置定时器，循环显示图片\",\"循环获取图片路径\",\"将当前图片显示到小图片上\",\"计数器自增\",\"代码实现\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\"> <title>随机图片</title> </head> <body> <!-- 小图 --> <div style=\\\"background-color:red;border: dotted; height: 50px; width: 50px\\\"> <img src=\\\"img/01.jpg\\\" id=\\\"small\\\" style=\\\"width: 50px; height: 50px;\\\"> </div> <!-- 大图 --> <div style=\\\"border: double ;width: 400px; height: 400px; position: absolute; left: 500px; top:10px\\\"> <img src=\\\"\\\" id=\\\"big\\\" style=\\\"width: 400px; height: 400px; display:none;\\\"> </div> <!-- 开始和结束按钮 --> <input id=\\\"startBtn\\\" type=\\\"button\\\" style=\\\"width: 150px;height: 150px; font-size: 20px\\\" value=\\\"开始\\\"> <input id=\\\"stopBtn\\\" type=\\\"button\\\" style=\\\"width: 150px;height: 150px; font-size: 20px\\\" value=\\\"停止\\\"> </body> <script src=\\\"js/jquery-3.3.1.min.js\\\"></script> <script> //1.准备一个数组 let imgs = [ \\\"img/01.jpg\\\", \\\"img/02.jpg\\\", \\\"img/03.jpg\\\", \\\"img/04.jpg\\\", \\\"img/05.jpg\\\", \\\"img/06.jpg\\\", \\\"img/07.jpg\\\", \\\"img/08.jpg\\\", \\\"img/09.jpg\\\", \\\"img/10.jpg\\\"]; //2.定义计数器变量 let count = 0; //3.声明定时器对象 let time = null; //4.声明图片路径变量 let imgSrc = \\\"\\\"; //5.为开始按钮绑定单击事件 $(\\\"#startBtn\\\").click(function(){ //6.设置按钮状态 //禁用开始按钮 $(\\\"#startBtn\\\").prop(\\\"disabled\\\",true); //启用停止按钮 $(\\\"#stopBtn\\\").prop(\\\"disabled\\\",false); //7.设置定时器，循环显示图片 time = setInterval(function(){ //8.循环获取图片路径 let index = count % imgs.length; // 0%10=0 1%10=1 2%10=2 .. 9%10=9 10%10=0 //9.将当前图片显示到小图片上 imgSrc = imgs[index]; $(\\\"#small\\\").prop(\\\"src\\\",imgSrc); //10.计数器自增 count++; },10); }); </script> </html>\"]},\"1470\":{\"h\":\"6.3、显示大图的分析和实现\",\"t\":[\"功能分析\",\"为停止按钮绑定单击事件\",\"取消定时器\",\"设置按钮状态\",\"将图片显示到大图片上\",\"代码实现\",\"//11.为停止按钮绑定单击事件 $(\\\"#stopBtn\\\").click(function(){ //12.取消定时器 clearInterval(time); //13.设置按钮状态 //启用开始按钮 $(\\\"#startBtn\\\").prop(\\\"disabled\\\",false); //禁用停止按钮 $(\\\"#stopBtn\\\").prop(\\\"disabled\\\",true); //14.将图片显示到大图片上 $(\\\"#big\\\").prop(\\\"src\\\",imgSrc); $(\\\"#big\\\").prop(\\\"style\\\",\\\"width: 400px; height: 400px;\\\"); });\"]},\"1471\":{\"h\":\"CentOS 升级内核\",\"t\":[\"在 CentOS 使用过程中，难免需要升级内核，但有时候因为源码编译依赖问题，不一定所有程序都支持最新内核版本，所以以下将介绍三种升级内核方式。\"]},\"1472\":{\"h\":\"注意事项\",\"t\":[\"关于内核种类: kernel-ml 中的ml是英文【 mainline stable 】的缩写，elrepo-kernel中罗列出来的是最新的稳定主线版本。 kernel-lt 中的lt是英文【 long term support 】的缩写，elrepo-kernel中罗列出来的长期支持版本。\",\"# 检查内核版本 uname -r\"]},\"1473\":{\"h\":\"一、yum安装\"},\"1474\":{\"h\":\"1、导入仓库源\",\"t\":[\"rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm\"]},\"1475\":{\"h\":\"2、查看可安装的软件包\",\"t\":[\"yum --enablerepo=\\\"elrepo-kernel\\\" list --showduplicates | sort -r | grep kernel-ml.x86_64\"]},\"1476\":{\"h\":\"3、选择 ML 或 LT 版本安装\",\"t\":[\"无指定版本默认安装最新\",\"# 安装 ML 版本 yum --enablerepo=elrepo-kernel install kernel-ml-devel kernel-ml -y # 安装 LT 版本，K8S全部选这个 yum --enablerepo=elrepo-kernel install kernel-lt-devel kernel-lt -y\"]},\"1477\":{\"h\":\"4、查看现有内核启动顺序\",\"t\":[\"awk -F\\\\' '$1==\\\"menuentry \\\" {print $2}' /etc/grub2.cfg\"]},\"1478\":{\"h\":\"5、修改默认启动项\",\"t\":[\"xxx 为序号数字，以指定启动列表中第x项为启动项，x从0开始计数\",\"grub2-set-default xxxx\",\"例如设置以4.4内核启动\",\"则直接输入“grub2-set-default 0”，下次启动即可从4.4启动\",\"# 查看内核启动序号 [root@localhost ~] awk -F\\\\' '$1==\\\"menuentry \\\" {print $2}' /etc/grub2.cfg CentOS Linux (4.4.179-1.el7.elrepo.x86_64) 7 (Core) CentOS Linux (3.10.0-693.el7.x86_64) 7 (Core) CentOS Linux (0-rescue-6d4c599606814867814f1a8eec7bfd1e) 7 (Core) # 设置启动序号 [root@localhost ~] grub2-set-default 0 # 重启 reboot # 检查内核版本 uname -r\"]},\"1479\":{\"h\":\"二、RPM安装\",\"t\":[\"检查内核版本\",\"uname -r\"]},\"1480\":{\"h\":\"1、查找版本\",\"t\":[\"因 ELRepo 源都是最新版本，所以旧版本内核只能手动下载。\",\"查找 kernel rpm 历史版：\",\"http://mirrors.coreix.net/elrepo-archive-archive/kernel/el7/x86_64/RPMS/\"]},\"1481\":{\"h\":\"2、共需要下载三个类型 rpm\",\"t\":[\"wget http://mirrors.coreix.net/elrepo-archive-archive/kernel/el7/x86_64/RPMS/kernel-lt-devel-4.4.215-1.el7.elrepo.x86_64.rpm wget http://mirrors.coreix.net/elrepo-archive-archive/kernel/el7/x86_64/RPMS/kernel-lt-headers-4.4.215-1.el7.elrepo.x86_64.rpm wget http://mirrors.coreix.net/elrepo-archive-archive/kernel/el7/x86_64/RPMS/kernel-lt-4.4.215-1.el7.elrepo.x86_64.rpm\"]},\"1482\":{\"h\":\"3、安装内核\",\"t\":[\"rpm -ivh kernel-lt-4.4.215-1.el7.elrepo.x86_64.rpm rpm -ivh kernel-lt-devel-4.4.215-1.el7.elrepo.x86_64.rpm 或者 #一键安装所有 rpm -Uvh *.rpm\"]},\"1483\":{\"h\":\"4、确认已安装内核版本\",\"t\":[\"[root@localhost ~]# rpm -qa | grep kernel kernel-headers-3.10.0-1160.15.2.el7.x86_64 kernel-devel-3.10.0-1160.49.1.el7.x86_64 kernel-tools-libs-3.10.0-957.el7.x86_64 kernel-3.10.0-957.el7.x86_64 kernel-ml-4.9.9-1.el7.elrepo.x86_64 kernel-lt-4.4.215-1.el7.elrepo.x86_64 kernel-tools-3.10.0-957.el7.x86_64 kernel-lt-devel-4.4.215-1.el7.elrepo.x86_64\"]},\"1484\":{\"h\":\"5、设置启动\",\"t\":[\"# 查看启动顺序 [root@localhost ~]# awk -F\\\\' '$1==\\\"menuentry \\\" {print $2}' /etc/grub2.cfg CentOS Linux (4.4.215-1.el7.elrepo.x86_64) 7 (Core) CentOS Linux (4.9.9-1.el7.elrepo.x86_64) 7 (Core) CentOS Linux (3.10.0-957.el7.x86_64) 7 (Core) CentOS Linux (0-rescue-b91f945269084aa98e8257311ee713c5) 7 (Core) # 设置启动顺序 [root@localhost ~]# grub2-set-default 0 # 重启生效 [root@localhost ~]# reboot\"]},\"1485\":{\"h\":\"三、源码安装\"},\"1486\":{\"h\":\"1、安装核心软件包\",\"t\":[\"yum install -y gcc make git ctags ncurses-devel openssl-devel yum install -y bison flex elfutils-libelf-devel bc\"]},\"1487\":{\"h\":\"2、创建内核编译目录\",\"t\":[\"使用 home 下的 kernelbuild 目录\",\"mkdir ~/kernelbuild\"]},\"1488\":{\"h\":\"3、获取内核源码\",\"t\":[\"清华大学镜像站：https://mirror.tuna.tsinghua.edu.cn/kernel/v4.x/?C=M&O=D\",\"其他源码安装包下载地址：https://mirrors.edge.kernel.org/pub/linux/kernel/\",\"linux-4.xx.xx.tar.xz\",\"linux-4.xx.xx.tar.gz\",\"这两个格式都可以的，tar.xz压缩率更高，文件更小。\",\"在线下载：wget https://mirror.tuna.tsinghua.edu.cn/kernel/v4.x/linux-4.17.11.tar.xz\"]},\"1489\":{\"h\":\"4、解压内核代码\",\"t\":[\"将其解压后进入源码目录:\",\"tar -xvJf linux-4.17.11.tar.xz\",\"为确保内核树绝对干净，进入内核目录并执行 make mrproper 命令:\",\"cd linux-4.17.11 make clean && make mrproper\"]},\"1490\":{\"h\":\"5、内核配置\",\"t\":[\"复制当前的内核配置文件\",\"config-3.10.0-862.el7.x86_64是我当前环境的内核配置文件，根据实际情况修改\",\"cp /boot/config-3.10.0-862.el7.x86_64 .config\"]},\"1491\":{\"h\":\"高级配置\",\"t\":[\"y 是启用, n 是禁用, m 是需要时启用. make menuconfig: 老的 ncurses 界面，被 nconfig 取代 make nconfig: 新的命令行 ncurses 界面\"]},\"1492\":{\"h\":\"6、编译和安装\"},\"1493\":{\"h\":\"编译内核\",\"t\":[\"如果你是四核的机器，x可以是8 make -j x\"]},\"1494\":{\"h\":\"安装内核\",\"t\":[\"编译完内核后安装:Warning: 从这里开始，需要 root 权限执行命令，否则会失败.\",\"make modules_install install\"]},\"1495\":{\"h\":\"7、设置启动\",\"t\":[\"# 查看启动顺序 [root@localhost ~]# awk -F\\\\' '$1==\\\"menuentry \\\" {print $2}' /etc/grub2.cfg CentOS Linux (4.17.11-1.el7.elrepo.x86_64) 7 (Core) CentOS Linux (4.9.9-1.el7.elrepo.x86_64) 7 (Core) CentOS Linux (3.10.0-957.el7.x86_64) 7 (Core) CentOS Linux (0-rescue-b91f945269084aa98e8257311ee713c5) 7 (Core) # 设置启动顺序 [root@localhost ~]# grub2-set-default 0 # 重启生效 [root@localhost ~]# reboot\"]},\"1496\":{\"h\":\"四、卸载 / 降级 内核\",\"t\":[\"例如:\",\"当系统已存在 LT 内核的 5.4.103 版本时，继续安装 LT 内核的 4.4.215 版本则会提示: package kernel-lt-5.4.103-1.el7.elrepo.x86_64 (which is newer than kernel-lt-4.4.215-1.el7.elrepo.x86_64) is already installed\",\"这时就需要进行内核降级，卸载最新版的内核。\"]},\"1497\":{\"h\":\"1、查看系统当前内核版本\",\"t\":[\"[root@localhost ~]# uname -r 5.4.103-1.el7.elrepo.x86_64\"]},\"1498\":{\"h\":\"2、查看系统中全部内核\",\"t\":[\"[root@localhost ~]# rpm -qa | grep kernel kernel-headers-3.10.0-1160.15.2.el7.x86_64 kernel-devel-3.10.0-1160.49.1.el7.x86_64 kernel-tools-libs-3.10.0-957.el7.x86_64 kernel-3.10.0-957.el7.x86_64 kernel-ml-4.9.9-1.el7.elrepo.x86_64 kernel-lt-5.4.103-1.el7.elrepo.x86_64 kernel-tools-3.10.0-957.el7.x86_64 kernel-lt-devel-5.4.103-1.el7.elrepo.x86_64\"]},\"1499\":{\"h\":\"3、删除指定内核\",\"t\":[\"此处以删除 LT 内核的 5.4.103 版本为例\",\"**注意：**无法卸载当前在用的内核版本。卸载完后不一定需要重启\",\"yum remove -y kernel-lt-devel-5.4.103-1.el7.elrepo.x86_64 yum remove -y kernel-lt-5.4.103-1.el7.elrepo.x86_64\",\"检查卸载后内核版本\",\"[root@localhost ~]# rpm -qa | grep kernel kernel-headers-3.10.0-1160.15.2.el7.x86_64 kernel-devel-3.10.0-1160.49.1.el7.x86_64 kernel-tools-libs-3.10.0-957.el7.x86_64 kernel-3.10.0-957.el7.x86_64 kernel-ml-4.9.9-1.el7.elrepo.x86_64 kernel-tools-3.10.0-957.el7.x86_64\"]},\"1500\":{\"h\":\"Centos7挂载硬盘\",\"t\":[\"新添加的一块硬盘，怎么加入到文件系统呢？其实简单几步就可以实现。\",\"1、进入系统后使用命令fdisk -l或者lsblk，查看到的/dev/sdb就是新增加的磁盘\",\"centos7下怎样挂载硬盘\",\"2、使用命令mkfs.ext4 /dev/sdb格式化新添加的磁盘\",\"centos7下怎样挂载硬盘\",\"3、使用命令mkdir /mydata创建一个目录，然后使用命令mount /dev/sdb /mydata把磁盘挂载到这个目录就可以使用了，可以通过命令lsblk查看使用信息。\",\"centos7下怎样挂载硬盘\"]},\"1501\":{\"h\":\"Rsync定时同步+异地备份\",\"t\":[\"​ 简介：Rsync是unix系统下的一个数据备份工具。可实现本地文件的拷贝，与远程文件的同步传输。\",\"特点：\",\"1、Rsync安装便捷，使用方便。\",\"2、传输过程中以压缩解压形式，减少带宽占用。\",\"3、能更新整个文件数。\",\"4、安全，能用 rsh、ssh 或直接端口做为传输端口，或者 socket 连接。\",\"5、亮点是免费。\",\"​ 简单来讲Rcync的目的是实现两台主机上的文件同步。（包括本机推送远程文件，远程拉取本机文件两种方式）\",\"​ 嗯哼，两台主机的文件同步这就涉及到了，源服务器和目标服务器了。\",\"以你要同步的文件为基准，要同步的文件在A服务器，A服务器就作为源服务器。B服务器就是目标服务器。\",\"​ 理解了主次，需求就来了：我们需要将A服务器上的某个文件，同步到B服务器上的某个文件夹下，如何实现？\",\"​\",\"​ 以Centos为例：\",\"1、输入rsync，查看系统是否安装了该工具。\",\"2、没有安装则手动安装。\",\"yum install rsync -y\",\"扩展\",\"rsync具有本地文件拷贝功能。\",\"本地文件同步类似拷贝命令cp，将a文件夹同步到b文件夹\",\"rsync -源文件夹 源路径 目标路径 rsync -a /tmp/a/ /tmp/b\",\"参数：-a存档 -av存档并去重\"]},\"1502\":{\"h\":\"一、以ssh ip直连的方式实现文件同步。\",\"t\":[\"image-20210817163014388\",\"以ssh方式连接需要密码：\",\"rsync -av -e \\\"ssh -p 端口号\\\" 源文件夹 目标用户@目标ip:目标文件夹（将a文件夹的文件同步到c文件夹下） rsync -av -e \\\"ssh -p 22\\\" /tmp/a/ root@192.168.241:/tmp/c\"]},\"1503\":{\"h\":\"二、以模块组件方式实现文件同步。\",\"t\":[\"Rsync可以作为一个服务器，同其他Rsync组件进行远程连接\",\"在源服务器上安装好Rsync后，启动\",\"yum -y install rsync xinetd 两种启动方式： (1)独立启动 /usr/bin/rsync –-daemon (2)用xinetd超级进程启动/etc/rc.d/init.d/xinetd reload 扩展： rsync默认端口：837 /usr/bin/rsync --daemon --config=/etc/rsyncd/rsyncd.conf #--config用于指定rsyncd.conf的位置,如果在/etc下可以不写\",\"1、不受密码保护的方式\",\"1）写入配置文件：\",\"#创建 rsyncd.conf，这是 rsync 服务器的配置文件 vi /etc/rsyncd.conf #模块名 [mag_sync] #源文件路径 path = /usr/local/mongodb/data/auditLog 是否允许客户端可以查看可用模块列表，默认为可以 list = yes #是否只读 read only = no #忽略错误 ignore errors\",\"2）查看模块 rsync 124.71.8.140::\",\"3）查看模块下绑定文件夹中的文件 rsync 124.71.8.140::mag_sync\",\"4）拉取模块下绑定的文件夹到目标文件夹下 rsync -av 124.71.8.140::mag_sync /root/data/mongologs/\",\"image-20210817100515149\",\"可以看到文件同步完毕\",\"2、受密码保护的方式\",\"1）修改配置文件\",\"#用户 uid = root #用户组 gid = root #日志文件路径 log file = /var/log/rsyncd.log secrets file = /etc/rsyncd/rsyncd.secrets #模块名 [mag_sync] #源文件路径 path = /usr/local/mongodb/data/auditLog 是否允许客户端可以查看可用模块列表，默认为可以 list = yes #是否只读 read only = no #忽略错误 ignore errors #认证用户 auth users =root\",\"2）添加密码：vi /etc/rsyncd/rsyncd.secrets\",\"用户名:密码\",\"image-20210817170139997\",\"3）给权限\",\"chmod 600 /etc/rsyncd/rsyncd.secrets\",\"4）测试（目标服务器连接时需要密码输入）\",\"rsync root@124.71.8.140::mag_sync\",\"image-20210817102358753\",\"3、目标服务器调用源服务器拉取文件，自动获取密码配置\",\"1）在目标服务器保存密码\",\"vi /etc/rsync.password Zz@1qaz2wsx\",\"2）给权限:\",\"chmod 600 /etc/rsync.password\",\"3）拉取源文件\",\"远程调用：rsync --password-file=密码存放路径 用户名@源服务器ip::模块名 要保存在哪个文件夹路径下 rsync -av --password-file=/etc/rsync.password root@124.71.8.140::mag_sync /root/data/mongologs/\"]},\"1504\":{\"h\":\"三、定期实现文件同步\",\"t\":[\"​ 需求：让rsync 客户端自动与服务器同步数据\",\"​ 思路：\",\"​ 1、编写一个拉取源文件的脚本。（rsync）\",\"​ 2、开一个定时任务，定期执行该脚本。（cron 系统调度进程）\",\"​ crontab命令用于设置周期性被执行的指令。该命令从标准输入设备读取指令，并将其存放于“crontab”文件中，以供之后读取和执行。\",\"​ 1、检查是否安装了crontab，如果提示未安装请自行安装\",\"rpm -qa | grep crontab #vixie-cron软件包是cron的主程序； #crontabs软件包是用来安装、卸装、或列举用来驱动 cron 守护进程的表格的程序。 yum install vixie-cron yum install crontabs (centos安装指令) #安装完以后开启crontab服务 service crond start\",\"service crond start //启动服务 service crond stop //关闭服务 service crond restart //重启服务 service crond reload //重新载入配置\",\"查看crontab服务状态：service crond status\",\"​ 2、新增调度任务可用两种方法：\",\"​ 先新建一个脚本文件：\",\"vi /root/data/pulllog.sh rsync -av --password-file=/etc/rsync.password root@124.71.8.140::mag_sync /root/data/mongologs/ 默认创建的这个sh问件是没有执行权限的，修改权限 chmod 777 pulllog.sh\",\"分 时 天 月 星期 以root用户身份来运行 执行的脚本路径 * * * * * root /root/data/pulllog.sh\",\"​ 1)、在命令行输入: crontab -e 然后添加相应的任务，wq存盘退出。\",\"image-20210817171925808\",\"​ 2)、直接编辑/etc/crontab 文件，即vi /etc/crontab，添加相应的任务。\",\"image-20210817172033045\",\"crontab -e配置是针对某个用户的，而编辑/etc/crontab是针对系统的任务 查看调度任务 crontab -l //列出当前的所有调度任务 crontab -l -u jp //列出用户jp的所有调度任务\",\"crontab -r //删除所有任务调度工作\",\"​ 3）查看调度任务\",\"crontab -l\",\"​ 没有的话重启服务\",\"service crond restart\",\"​ 如果有错，Linux会在执行的时候发送一份邮件给你\",\"cat /var/spool/mail/root\",\"至此文件定期执行脚本拉取源文件同步到新文件夹中就实现了\"]},\"1505\":{\"h\":\"Linux docker安装ELK\",\"t\":[\"实现目标：\",\"从kafka收集消息 --> Logstash清洗消息 --> Elastcsearch存储消息--> Kibana展示消息全流程\"]},\"1506\":{\"h\":\"一、安装ElasticSearch\"},\"1507\":{\"h\":\"\",\"t\":[\"ELK主要由ElasticSearch、Logstash和Kibana三个开源工具组成，还有其他专门由于收集数据的轻量型数据采集器Beats\",\"Elasticsearch：分布式搜索引擎。具有高可伸缩、高可靠、易管理等特点。可以用于全文检索、结构化检索和分析，并能将这三者结合起来 Elasticsearch： 是用Java 基于 Lucene 开发，现在使用最广的开源搜索引擎之一，Wikipedia 、StackOverflow、Github等都基于它来构建自己的搜索引擎。在elasticsearch中，所有节点的数据是均等的。\",\"Logstash ： 数据收集处理引擎。支持动态的从各种数据源搜集数据，并对数据进行过滤、分析、丰富、统一格式等操作，然后存储以供后续使用。\",\"Kibana ： 可视化化平台。它能够搜索、展示存储在 Elasticsearch 中索引数据。使用它可以很方便的用图表、表格、地图展示和分析数据。\",\"版本说明： Elasticsearch、Logstash、Kibana、Filebeat安装的版本号必须全部一致,不然会出现kibana无法显示web页面。\",\"需要注意的是，如果操作系统版本不是很新不要安装最新版本docker，比如我centos7.2安装docker最新版，后面出现 linux 与 docker 版本的兼容性问题，报错”container init exited prematurely“，卸载docker安装较早版本即可。\",\"离线安装与在线基本相同（离线需要自行打包好镜像）\",\"离线思路： 1、在有网环境下下载镜像 2、通过docker save 打包好镜像，拷入u盘 3、将打包好的镜像上传至离线服务器 4、通过docker load 将打包好的镜像导入docker\"]},\"1508\":{\"h\":\"1、拉取镜像\",\"t\":[\"docker search elasticsearch docker pull elasticsearch:7.7.1\"]},\"1509\":{\"h\":\"2、创建挂载目录\",\"t\":[\"mkdir -p /data/elk/es/{config,data,logs}\"]},\"1510\":{\"h\":\"3、赋予权限\",\"t\":[\"chmod -R 777 /data/elk/es chmod -R 777 /data/elk/es/config chmod -R 777 /data/elk/es/data chmod -R 777 /data/elk/es/logs #报错挂载目录没权限 \\\"Caused by: java.nio.file.AccessDeniedException: /usr/share/elasticsearch/data/nodes\\\",\"]},\"1511\":{\"h\":\"4、创建挂载es配置\",\"t\":[\"cd /data/elk/es/config touch elasticsearch.yml -----------------------配置内容---------------------------------- cluster.name: \\\"my-es\\\" network.host: 0.0.0.0 http.port: 9200\"]},\"1512\":{\"h\":\"5、运行elasticsearch\",\"t\":[\"通过镜像，启动一个容器，并将9200和9300端口映射到本机（elasticsearch的默认端口是9200，我们把宿主环境9200端口映射到Docker容器中的9200端口）。此处建议给容器设置固定ip，我这里没设置。\",\"docker run -it -d -p 9200:9200 -p 9300:9300 --name es -e ES_JAVA_OPTS=\\\"-Xms1g -Xmx1g\\\" -e \\\"discovery.type=single-node\\\" --restart=always -v /data/elk/es/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml -v /data/elk/es/data:/usr/share/elasticsearch/data -v /data/elk/es/logs:/usr/share/elasticsearch/logs elasticsearch:7.7.1\"]},\"1513\":{\"h\":\"6、验证安装是否成功\",\"t\":[\"[root@elasticsearch home]# curl http://localhost:9200 { \\\"name\\\" : \\\"0adf1765ac08\\\", \\\"cluster_name\\\" : \\\"my-es\\\", \\\"cluster_uuid\\\" : \\\"MpKqrEKySnSdwux0m7AlEA\\\", \\\"version\\\" : { \\\"number\\\" : \\\"7.7.1\\\", \\\"build_flavor\\\" : \\\"default\\\", \\\"build_type\\\" : \\\"docker\\\", \\\"build_hash\\\" : \\\"ad56dce891c901a492bb1ee393f12dfff473a423\\\", \\\"build_date\\\" : \\\"2020-05-28T16:30:01.040088Z\\\", \\\"build_snapshot\\\" : false, \\\"lucene_version\\\" : \\\"8.5.1\\\", \\\"minimum_wire_compatibility_version\\\" : \\\"6.8.0\\\", \\\"minimum_index_compatibility_version\\\" : \\\"6.0.0-beta1\\\" }, \\\"tagline\\\" : \\\"You Know, for Search\\\" } 查看索引 GET /_cat/indices?v\",\"elasticsearch启动时遇到的错误\",\"es最大虚拟内存至少262144\",\"max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]\",\"1、vim /etc/sysctl.conf (需要是root账户) 文件最后添加一行: vm.max_map_count=262144 2、sysctl -p 重启生效\"]},\"1514\":{\"h\":\"二、\"},\"1515\":{\"h\":\"1、下载镜像\",\"t\":[\"docker pull kibana:7.7.1\"]},\"1516\":{\"h\":\"2、获取elasticsearch容器ip\",\"t\":[\"[root@elasticsearch home]# docker inspect --format '{{ .NetworkSettings.IPAddress }}' es 172.17.0.2\"]},\"1517\":{\"h\":\"3、新建配置文件\",\"t\":[\"用于docker文件映射。所使用目录需对应新增。（172.17.0.2改成自己的）\",\"vi /data/elk/kibana/kibana.yml\",\"#Default Kibana configuration for docker target server.name: kibana server.host: \\\"0\\\" i18n.locale: \\\"zh-CN\\\" elasticsearch.hosts: [\\\"http://172.17.0.2:9200\\\"] xpack.monitoring.ui.container.elasticsearch.enabled: true\"]},\"1518\":{\"h\":\"4、运行kibana\",\"t\":[\"docker run -d --restart=always --log-driver json-file --log-opt max-size=100m --log-opt max-file=2 --name kibana -p 5601:5601 -v /data/elk/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml kibana:7.7.1\"]},\"1519\":{\"h\":\"5、访问\",\"t\":[\"浏览器上输入：http://ip:5601，如无法访问进容器检查配置是否生效\"]},\"1520\":{\"h\":\"6、检查kibana容器配置文件\",\"t\":[\"将配置文件中elasticsearch.hosts地址修改为elasticsearch容器地址。\",\"docker exec -it kibana /bin/bash\",\"vi config/kibana.yml，修改后的配置如下： （（172.17.0.2改成自己的））\",\"#Default Kibana configuration for docker target server.name: kibana server.host: \\\"0\\\" elasticsearch.hosts: [\\\"http://172.17.0.2:9200\\\"] xpack.monitoring.ui.container.elasticsearch.enabled: true\",\"重启kibana：docker restart kibana\",\"在kibana6.7之后就开始支持中文了，开启也很简单，只需要在kibana.yml配置文件中添加上如下配置，然后重启kibana即可\",\"i18n.locale: \\\"zh-CN\\\"\"]},\"1521\":{\"h\":\"三、安装\"},\"1522\":{\"h\":\"1、获取logstash镜像\",\"t\":[\"docker pull logstash:7.7.1\"]},\"1523\":{\"h\":\"2、编辑logstash.yml配置文件\",\"t\":[\"vi /data/elk/logstash/logstash.yml （es-docker内网地址） （172.17.0.2改成自己的）\",\"http.host: \\\"0.0.0.0\\\" xpack.monitoring.elasticsearch.hosts: [ \\\"http://172.17.0.2:9200\\\" ] xpack.monitoring.elasticsearch.username: elastic xpack.monitoring.elasticsearch.password: changeme #path.config: /data/elk/logstash/conf.d/*.conf path.config: /data/docker/logstash/conf.d/*.conf path.logs: /var/log/logstash\"]},\"1524\":{\"h\":\"3、编辑logstash.conf文件\",\"t\":[\"此处先配置logstash直接采集本地数据发送至es\",\"vi /data/elk/logstash/conf.d/syslog.conf （外网地址） （192.168.200.94改成自己的）\",\"input { syslog { type => \\\"system-syslog\\\" port => 5044 } } output { elasticsearch { hosts => [\\\"192.168.x.x:9200\\\"] # 定义es服务器的ip index => \\\"system-syslog-%{+YYYY.MM}\\\" # 定义索引 } }\"]},\"1525\":{\"h\":\"4、配置修改后重启服务\",\"t\":[\"systemctl restart rsyslog\"]},\"1526\":{\"h\":\"5、运行logstash\",\"t\":[\"docker run -d --restart=always --log-driver json-file --log-opt max-size=100m --log-opt max-file=2 -p 5044:5044 -p 9600:9600 --name logstash -v /data/elk/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml -v /data/elk/logstash/conf.d/:/data/docker/logstash/conf.d/ logstash:7.7.1 docker run -d --privileged=true -p 5044:5044 -p 9600:9600 --name logstash -v /data/elk/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml -v /data/elk/logstash/conf.d/:/data/docker/logstash/conf.d/ docker.elastic.co/logstash/logstash:7.13.0-arm64\"]},\"1527\":{\"h\":\"6、测试es接收logstash数据\",\"t\":[\"[root@elk logstash]# curl http://localhost:9200/_cat/indices?v health status index uuid pri rep docs.count docs.deleted store.size pri.store.size green open .apm-custom-link WBgbpphkQCS73sfjjIG0-Q 1 0 0 0 208b 208b green open .kibana_task_manager_1 xmBASGi9QheR-r8hG2XLZA 1 0 5 0 28kb 28kb green open .apm-agent-configuration MsvsgveHSCOhBQRCgTnsRg 1 0 0 0 208b 208b yellow open system-syslog-2022.02 1Vcjw7Q-TTqVscpknyK7HA 1 1 6 0 20.7kb 20.7kb green open .kibana_1 vJ-B5wakRSmOrwM6ri-xgw 1 0 84 2 115kb 115kb\",\"获取到system-syslog-相关日志，则es已能获取来自logstash的数据，kibana中也同步显示数据。\"]},\"1528\":{\"h\":\"四、安装kafka\",\"t\":[\"注意：\",\"出现/docker-entrypoint.sh: line 43: /conf/zoo.cfg: Permission denied\",\"一般都是目录没权限，给对应目录添加权限即可\",\"chmod 777 xxx\"]},\"1529\":{\"h\":\"1、启动zookeeper容器\",\"t\":[\"docker run -d --name zookeeper -p 2181:2181 -t wurstmeister/zookeeper docker run -d -p 2181:2181 -p 2888:2888 -p 3888:3888 --privileged=true \\\\ --restart=always --name=zkNode-1 \\\\ -v /data/elk/zookeeper/conf:/conf \\\\ -v /data/elk/zookeeper/data:/data \\\\ -v /data/elk/zookeeper/datalog:/datalog zookeeper:latest\"]},\"1530\":{\"h\":\"2、启动kafka容器\",\"t\":[\"#修改自己的zookeeper主机地址 docker run -d --name kafka -p 9092:9092 -e KAFKA_BROKER_ID=0 -e KAFKA_ZOOKEEPER_CONNECT=192.168.x.x:2181 -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://192.168.x.x:9092 -e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 -e ALLOW_PLAINTEXT_LISTENER=yes -t wurstmeister/kafka #docker 启动参数说明: -d:后台启动,--restart=always:如果挂了总是会重启,--name:设置容器名 #-p: 设置宿主机与容器之间的端口映射,例如:9902:9092,表示将容器中9092端口映射到宿主机的9902端口,当有请求访问宿主机的9902端口时,会被转发到容器内部的9092端口. #-v:设置宿主机与容器之间的路径或文件映射,例如:/home/kafka/logs:/opt/kafka/logs,表示将容器内部的路径/opt/kafka/logs目录映射到宿主机的/home/kafka/logs目录,可以方便的从宿主机/home/kafka/logs/就能访问到容器内的目录,一般数据文件夹,配置文件均可如此配置,便于管理和数据持久化 #-e 设置环境变量参数,例如-e KAFKA_BROKER_ID=1,表示将该环境变量设置到容器的环境变量中,容器在启动时会读取该环境变量,并替换掉容器中配置文件的对应默认配置(server.properties文件中的 broker.id=1) # kafka:latest 表示使用docker镜像名称为kafka,并且版本为latest的镜像来启动 docker run -d --restart=always --name kafka \\\\ -p 9092:9092 \\\\ -v /data/elk/kafka/logs:/opt/kafka/logs \\\\ -v /data/elk/kafka/data:/kafka/kafka-logs \\\\ -v /data/elk/kafka/conf:/opt/kafka/config \\\\ -e KAFKA_BROKER_ID=1 \\\\ -e KAFKA_LOG_DIRS=\\\"/kafka/kafka-logs\\\" \\\\ -e KAFKA_ZOOKEEPER_CONNECT=10.84.x.x:2181 \\\\ -e KAFKA_DEFAULT_REPLICATION_FACTOR=1 \\\\ -e KAFKA_LOG_RETENTION_HOURS=72 \\\\ -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://10.84.x.x:9092 \\\\ -e ALLOW_PLAINTEXT_LISTENER=yes \\\\ -e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 -t kafka:latest\"]},\"1531\":{\"h\":\"3、测试kafka\",\"t\":[\"进入kafka容器的命令行\",\"docker exec -ti kafka /bin/bash\",\"进入kafka所在目录\",\"cd opt/kafka_2.13-2.8.1/ #没有找到就用这个命令搜索 find / -name kafka-topics.sh\"]},\"1532\":{\"h\":\"4、创建topic\",\"t\":[\"./bin/kafka-topics.sh --create --bootstrap-server 10.84.x.x:2181 --partitions 1 --replication-factor 1 --topic cloud-log ./bin/kafka-topics.sh --create --bootstrap-server 127.0.0.1:9092 --partitions 1 --replication-factor 1 --topic cloud-log\"]},\"1533\":{\"h\":\"5、查看topic list\",\"t\":[\"bin/kafka-topics.sh --zookeeper 10.84.x.x:2181 --list ./bin/kafka-topics.sh --bootstrap-server 127.0.0.1:9092 --list\"]},\"1534\":{\"h\":\"6、发送消息\",\"t\":[\"./bin/kafka-console-producer.sh --broker-list 10.84.x.x:9092 --topic cloud-log ./kafka-console-producer.sh --broker-list 10.32.22.51:9092 --topic cloud-log\"]},\"1535\":{\"h\":\"7、接收消息\",\"t\":[\"./bin/kafka-console-consumer.sh --bootstrap-server 10.84.x.x:9092 --topic cloud-log --from-beginning ./bin/kafka-console-consumer.sh --bootstrap-server 10.32.22.51:9092 --topic cloud-log --from-beginning\",\"由于上面并未和kafka产生关联，所以修改logstash安装目录下的配置文件logstash/confg/conf.d/syslog.conf\",\"input { #获取kafka信息 kafka { #自定义话题 topics_pattern => \\\"cloud-log\\\" #kafka ip+端口 bootstrap_servers => \\\"10.84.x.x:9092\\\" auto_offset_reset => \\\"earliest\\\" consumer_threads => 5 decorate_events => \\\"true\\\" } } #文本格式过滤 filter { date { timezone => \\\"Asia/Shanghai\\\" match => [\\\"logtime\\\", \\\"yyyy-MM-dd HH:mm:ss,SSS\\\"] target => \\\"@timestamp\\\" remove_field => [ \\\"logtime\\\" ] } } output { #输出至es elasticsearch { hosts => [\\\"http://10.84.x.x:9200\\\"] index => \\\"%{[@metadata][kafka][topic]}-%{+YYYY-MM-dd}\\\" } #本地生产文件日志(目录自行创建) file { path => \\\"/home/logs/%{+yyyy-MM-dd-HH}.log\\\" } }\",\"修改完之后重新启动docker-elk，即完成从kafka收集消息 --> Logstash清洗消息 --> Elastcsearch存储消息--> Kibana展示消息全流程。\",\"在arm运行时上述kafka方式运行正常但无法连接至es\",\"以下采用docker-compose的方式部署\",\"version: '3.2' services: zookeeper: image: zookeeper ports: - \\\"2181:2181\\\" privileged: true volumes: - /data/elk/zookeeper/conf:/conf - /data/elk/zookeeper/data:/data - /data/elk/zookeeper/datalog:/datalog - /etc/localtime:/etc/localtime container_name: \\\"zookeeper\\\" restart: always kafka: image: wyh1791/kafka-arm64v8 container_name: \\\"kafka\\\" ports: - \\\"9092:9092\\\" privileged: true environment: - TZ=Asia/Shanghai - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181 - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true - KAFKA_ADVERTISED_HOST_NAME=10.32.22.52 - KAFKA_ADVERTISED_PORT=9092 - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://10.32.22.52:9092 - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 - KAFKA_LOG_RETENTION_HOURS=168 volumes: - /data/elk/kafka/data:/kafka - /var/run/docker.sock:/var/run/docker.sock - /etc/localtime:/etc/localtime restart: always\"]},\"1536\":{\"h\":\"Linux docker安装skywalking\",\"t\":[\"搭建 elasticsearch集群 及 kibana\",\"https://blog.csdn.net/qq_43692950/article/details/122834930\",\"Skywalking详细解读参考：Skywalking应用实战 Agent探针、Rocketbot以及告警\",\"https://www.cnblogs.com/jiagooushi/archive/2022/06/16/16381838.html\",\"Skywalking跟ES版本需要适配\",\"比如目前我用的版本是：\",\"版本对应关系\",\"apache/skywalking-ui:8.6.0\",\"apache/skywalking-oap-server:8.6.0\",\"#agent:8.6.0不能用没有字体库，某些业务场景下会报错\",\"apache/skywalking-java-agent:8.6.0\",\"方案一：\",\"#升级版本\",\"apache/skywalking-java-agent:8.9.0-java8\",\"方案二：\",\"#自定义镜像，源码编译agent:8.6.0将orecleJDK打进去\"]},\"1537\":{\"h\":\"1、skywalking由三个部分组成\",\"t\":[\"skywalking-collector:链路数据归集器，数据可以落地ElasticSearch/H2 skywalking-ui:web可视化平台，用来展示落地的数据 skywalking-agent:探针，用来收集和发送数据到归集器\"]},\"1538\":{\"h\":\"2、配置关系\",\"t\":[\"1, skywalking-oap 有两个端口暴露 2, 11800 ：grpc协议 用于agent上传数据 3, 12800 ：rset协议 用于与skywalking-ui通信，skywalking-ui配置SW_OAP_ADDRESS时 要注意填写12800端口\"]},\"1539\":{\"h\":\"一、kubesphere创建oap\",\"t\":[\"创建无状态服务\"]},\"1540\":{\"h\":\"1、填写镜像路径\"},\"1541\":{\"h\":\"2、使用默认端口\",\"t\":[\"image-20220826100411131\"]},\"1542\":{\"h\":\"3、填写环境变量,设置数据源\",\"t\":[\"选择es数据源（不设置收集的数据源默认保存至h2数据库）\",\"env: - name: JVM value: '-Xms256m -Xmx256m' - name: SW_STORAGE value: elasticsearch7 - name: SW_STORAGE_ES_CLUSTER_NODES value: 'xxx.xxx.xxx:9200'\",\"image-20220902173454914\"]},\"1543\":{\"h\":\"二、kubesphere创建UI\"},\"1544\":{\"h\":\"1、填写镜像路径\"},\"1545\":{\"h\":\"2、使用默认端口\"},\"1546\":{\"h\":\"3、填写环境变量,连接oap\",\"t\":[\"oap的dns地址\",\"//oap连接服务端口：12800 SW_OAP_ADDRESS:skywalking-oap-server.test5:12800\",\"image-20220826154758399\",\"image-20220826140418379\"]},\"1547\":{\"h\":\"4、访问页面：\",\"t\":[\"ip+端口8080\",\"skywalking懒加载，初次访问时，看不到监控数据，需要访问服务接口后，skywalking才会加载数据\"]},\"1548\":{\"h\":\"三、项目配置\",\"t\":[\"dockfile文件基础镜像使用skywalking-jdk\",\"#设置镜像基础，jdk8 #FROM java:8 FROM xxx.xxx.xxx.xxx:8080/common/skywalking-java-agent:8.6.0-jdk8-me #维护人员信息 MAINTAINER hetao #设置镜像对外暴露端口 EXPOSE 10013 ENV TZ=PRC RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone #将当前 target 目录下的 jar 放置在根目录下，命名为 app.jar，推荐使用绝对路径。 ADD target/devops-sign.jar /devops-sign.jar #执行启动命令 ENTRYPOINT java ${JVM:=-Xms2048m -Xmx2048m} -Djava.security.egd=file:/dev/./urandom -jar /devops-sign.jar\",\"项目yml文件中配置oap环境变量-连接skywalking\",\"# 配置oap连接地址 - name: SW_AGENT_COLLECTOR_BACKEND_SERVICES value: 'skywalking-oap-server.test5:11800' # 配置服务名称 - name: SW_AGENT_NAME value: devops-cloud-gateway\",\"image-20220826163627042\"]},\"1549\":{\"h\":\"四、自定义镜像\",\"t\":[\"在项目接入中遇到问题二，抛弃官方提供的镜像，选择自定义skywalking-agent镜像\"]},\"1550\":{\"h\":\"\"},\"1551\":{\"h\":\"\",\"t\":[\"方法一：通过源码编译agent\",\"//Dockerfile #OracleJDK1.8基础镜像 FROM java:8 #将编译构建得到的jar文件复制到镜像空间中 COPY agent/ /skywalking/agent/ #执行工作目录 WORKDIR / #skywalking-agent环境变量,指定jar路径 ENV JAVA_TOOL_OPTIONS=-javaagent:/skywalking/agent/skywalking-agent.jar\",\"方法二：通过基础镜像base引用agent目录(项目中用workflow有点问题)\",\"#定义skywalking-base基础镜像版本 ARG version='8.6.0' #定义jdk基础镜像版本 ARG BASE_IMAGE='java:8' #skywalking-base基础镜像引用 FROM apache/skywalking-base:${version}-es7 AS build #jdk基础镜像引用 FROM $BASE_IMAGE #作者 LABEL maintainer=\\\"ldf\\\" #skywalking-agent环境变量,指定jar路径 ENV JAVA_TOOL_OPTIONS=-javaagent:/skywalking/agent/skywalking-agent.jar #指定工作目录 WORKDIR /skywalking #添加文件,添加引用镜像中的agent目录到自定义镜像工作空间中 COPY --from=build /skywalking/agent /skywalking/agent\"]},\"1552\":{\"h\":\"\",\"t\":[\"#打包镜像文件 docker build -t skywalking-java-agent:8.6.0-java8-me -f Dockerfile .\",\"启动项目后出现下图中找到agent.config配置文件即接入成功。\",\"image-20220902145433470\"]},\"1553\":{\"h\":\"五、问题说明：\"},\"1554\":{\"h\":\"\",\"t\":[\"docker 部署skywalking时，一直报错：no provider found for module storage\"]},\"1555\":{\"h\":\"\",\"t\":[\"skywalking 8.8之前不能自动感知存储源是什么，需要手动指定是es6还是7；\",\"8.8之后可以自动感知存储源的版本，不需要手动指定es6还是7，直接写es即可；\",\"解决方案：\",\"将环境变量指定数据源：SW_STORAGE=elasticsearch7改为SW_STORAGE=elasticsearch`\"]},\"1556\":{\"h\":\"\"},\"1557\":{\"h\":\"JDK字体类初始化异常问题：java.lang.NoClassDefFoundError: Could not initialize class sun.font.SunFontManager\",\"t\":[\"原因分析：\",\"skywalking官方提供的agent镜像中jdk采用的是OpenJDK，而OpenJDK在1.7之后不包含字体库，在poi导出业务中存在报这种错误\",\"OpenJDK比OracleJDK简化了一些功能，openjdk不包含字体库\",\"解决方案：\",\"方法1、有网的环境下把OpenJDK打包成包含fontconfig和字体 ttf-dejavu的镜像\",\"方法2、升级jdk版本，jdk “1.8.0_332” 请升级成 jdk “1.8.0_333” 或更高的版本\",\"以上方法由互联网提供，以下是我自己的实践的方案\",\"1、通过源码编译agent，将OracleJDK打入agent镜像中\",\"或者\",\"2、通过基础镜像base引用agent目录，将OracleJDK打入agent镜像中\"]},\"1558\":{\"h\":\"\",\"t\":[\"**超出了GC开销限制：**java.lang.OutOfMemoryError: GC overhead limit exceeded｜ java.lang.OutOfMemoryError: Java heap space\",\"原因分析：\",\"这个是JDK6新添的错误类型。是发生在GC占用大量时间为释放很小空间的时候发生的，是一种保护机制。一般是因为堆太小，导致异常的原因：没有足够的内存。\",\"Sun 官方对此的定义：超过98%的时间用来做GC并且回收了不到2%的堆内存时会抛出此异常。\",\"解决方案：\",\"方法1，查看项目中是否有大量的死循环或有使用大内存的代码，优化代码。\",\"方法2，JVM给出这样一个参数：-XX:-UseGCOverheadLimit 禁用这个检查，其实这个参数解决不了内存问题，只是把错误的信息延后，替换成 java.lang.OutOfMemoryError: Java heap space。\",\"方法3，增大堆内存 set JAVA_OPTS=-server -Xms512m -Xmx1024m -XX:MaxNewSize=1024m -XX:MaxPermSize=1024m\",\"我采用 增大堆内存的方式将原来的内存增加到了512\",\"env:\",\"name: JVM value: '-Xms512m -Xmx512m'\"]},\"1559\":{\"h\":\"\",\"t\":[\"1、agent的plugins目录是已启用的插件，optional-plugins目录中是可选的插件。\",\"plugins中默认没有springcloud getway插件，不支持监控springcloud gateway网关服务。\",\"如果当前要部署的服务是springcloud getway网关服务，需要把optional-plugins中的apm-spring-cloud-gateway-2.1.x-plugin-8.2.0.jar拷贝到plugins中。\"]},\"1560\":{\"h\":\"\",\"t\":[\" #es配置文件 #集群名称配置 cluster.name: my-es #节点角色配置 #node.roles: [ data, master ] #网络配置 network.host: 0.0.0.0 #集群节点配置 discovery.type: single-node #discovery.seed_hosts: [ \\\"app-es-v1-0.app-es.app.svc.cluster.local:9300\\\" ] #集群初始化节点 #cluster.initial_master_nodes: [ \\\"app-es-v1-0\\\"] #绑定客户端访问端口 http.port: 9200 #绑定集群间通信端口 transport.port: 9300 #安全访问 xpack.security.enabled: false xpack.security.transport.ssl.enabled: false #认证 http.cors.allow-origin: \\\"*\\\" http.cors.enabled: true http.max_content_length: 200mb\"]},\"1561\":{\"h\":\"Skywalking操作说明\",\"t\":[\"SkyWalking 逻辑上分为四部分: 探针, 平台后端, 存储和用户界面。\",\"探针skywalking-agent收集数据上报给平台后端\",\"平台后端skywalking-oap存储相关数据\",\"用户界面skywalking-ui连接平台后端查询数据展示\",\"操作说明：\"]},\"1562\":{\"h\":\"1、访问skywalking-ui面板\",\"t\":[\"skywalking属于懒加载，第一次访问不会有数据视图，访问接口后产生相应的数据视图\",\"目前启动了三个服务，可选择相应服务查看对应系统图\",\"仪表盘：查看服务系统性能\",\"image-20220804123724252\",\"拓扑图：系统关联关系结构\",\"image-20220804124051725\",\"链路追踪：接口生命周期跟踪\",\"image-20220804124349974\"]},\"1563\":{\"h\":\"2、访问演示接口\",\"t\":[\"POST 192.168.x.x:31368/system/sysLogin { \\\"userName\\\": \\\"admin\\\", \\\"password\\\": \\\"ZZ2022!!\\\", \\\"date\\\": 1651146995000 }\",\"GET 192.168.x.x:31368/system/user/listPage\",\"访问后等一小会待数据加载完毕，视图出现，\",\"按时间范围查询接口\",\"接入skywalking\",\"1、下载包\",\"2、编辑配置文件设置存储方式\",\"3、运行访问ui控制台\",\"4、导入jar到项目中（本地可直接引用下载包中的jar）\",\"image-20220804124637278\"]},\"1564\":{\"h\":\"日志接入\",\"t\":[\"导入依赖\",\"<!-- skywalking--> <dependency> <groupId>org.apache.skywalking</groupId> <artifactId>apm-toolkit-logback-1.x</artifactId> <version>8.12.0</version> </dependency> <dependency> <groupId>org.apache.skywalking</groupId> <artifactId>apm-toolkit-logback-1.x</artifactId> <version>8.12.0</version> </dependency>\",\"创建日志文件 logback.xml\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <configuration> <jmxConfigurator/> <!-- 日志打印格式--> <property name=\\\"log_pattern\\\" value=\\\"%d{yyyy-MM-dd HH:mm:ss.SSS Z} [%tid] [%thread] %-5level %logger{36}:%line - %msg%n\\\"/> <!-- 控制台日志--> <appender name=\\\"STDOUT\\\" class=\\\"ch.qos.logback.core.ConsoleAppender\\\"> <encoder class=\\\"ch.qos.logback.core.encoder.LayoutWrappingEncoder\\\"> <layout class=\\\"org.apache.skywalking.apm.toolkit.log.logback.v1.x.TraceIdPatternLogbackLayout\\\"> <pattern>${log_pattern}</pattern> </layout> </encoder> </appender> <!-- 文件日志--> <appender name=\\\"FILE\\\" class=\\\"ch.qos.logback.core.rolling.RollingFileAppender\\\"> <rollingPolicy class=\\\"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy\\\"> <fileNamePattern>./logs/application/server.%d{yyyy-MM-dd}.%i.log.zip</fileNamePattern> <maxFileSize>100MB</maxFileSize> <maxHistory>15</maxHistory> <totalSizeCap>5GB</totalSizeCap> </rollingPolicy> <encoder class=\\\"ch.qos.logback.core.encoder.LayoutWrappingEncoder\\\"> <layout class=\\\"org.apache.skywalking.apm.toolkit.log.logback.v1.x.TraceIdPatternLogbackLayout\\\"> <pattern>${log_pattern}</pattern> </layout> </encoder> </appender> <!-- skywalking grpc 日志收集 8.4.0版本开始支持 --> <appender name=\\\"grpc-log\\\" class=\\\"org.apache.skywalking.apm.toolkit.log.logback.v1.x.log.GRPCLogClientAppender\\\"> <encoder class=\\\"ch.qos.logback.core.encoder.LayoutWrappingEncoder\\\"> <layout class=\\\"org.apache.skywalking.apm.toolkit.log.logback.v1.x.mdc.TraceIdMDCPatternLogbackLayout\\\"> <Pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%tid] [%thread] %-5level %logger{36} -%msg%n</Pattern> </layout> </encoder> </appender> <logger name=\\\"org.springframework\\\" additivity=\\\"false\\\"> <level value=\\\"info\\\"/> <appender-ref ref=\\\"STDOUT\\\"/> <appender-ref ref=\\\"FILE\\\"/> <appender-ref ref=\\\"grpc-log\\\"/> </logger> <root level=\\\"INFO\\\"> <appender-ref ref=\\\"STDOUT\\\"/> <appender-ref ref=\\\"FILE\\\"/> </root> </configuration>\",\"启动项目可看到[TID:xxxxx]即接入成功\",\"访问控制台日中管理中可看到\"]},\"1565\":{\"h\":\"docker安装各软件（汇总）\"},\"1566\":{\"h\":\"Docker安装各软件（汇总）\"},\"1567\":{\"h\":\"一、docker\"},\"1568\":{\"h\":\"\",\"t\":[\"启动**「Docker Desktop」后在cmd窗口中执行docker search oracle命令，搜索Oracle相关的镜像，可以看到搜索结果中的「truevoly/oracle-12c」**\",\"# 拉取镜像(默认下载oracle-12c最新版本的镜像) docker pull truevoly/oracle-12c\"]},\"1569\":{\"h\":\"\",\"t\":[\"cmd中执行以下命令，在docker中创建并启动一个oracle-12c容器，「对物理机暴露2122、9090和1521三个端口分别映射到容器内的22、8080和1521端口」，并且将容器内的oracle目录**「挂载」**到物理机的D盘中\",\"#创建目录 mkdir -p /var/oracle/data/ #赋予权限 chmod -R 777 /var/oracle/data/ #启动容器 docker run -d -p 8080:8080 -p 1521:1521 -v /var/oracle/data/:/u01/app/oracle/ truevoly/oracle-12c #推荐使用（限制内存上限，允许外部访问） docker run --name oracle-12c -e ORACLE_ALLOW_REMOTE=true -p 8080:8080 -p 1521:1521 --memory=4g -v /var/oracle/data/:/u01/app/oracle/ -d truevoly/oracle-12c\",\"查看容器启动日志（看到**「Import finished Database ready to use. Enjoy!」** 即容器创建并启动完成）\",\"# 查看oracle-12c启动日志 docker logs -f oracle-12c\",\"image-20230425140406861\",\"image-20230425140422986\",\"若日志中出现以下报错，是因为对外暴露的端口不可用访问权限已被禁止，只要更改创建容器时对外暴露的端口即可\",\"docker: Error response from daemon: Ports are not available: exposing port TCP 0.0.0.0:1521 -> 0.0.0.0:0: listen tcp 0.0.0.0:1521: bind: An attempt was made to access a socket in a way forbidden by its access permissions.\",\"可在cmd中执行以下命令查看哪些端口被禁用TCP协议\",\"# windows cmd命令查看哪些端口被禁用TCP协议 netsh interface ipv4 show excludedportrange protocol=tcp\"]},\"1570\":{\"h\":\"\",\"t\":[\"truevoly/oracle-12c镜像创建的容器**「默认有sys和system两个用户，密码都是oracle，默认的一个SID/服务名是xe」**，Oracle的用户密码默认有效期是180天，180天后用户会自动锁住，下面进入oracle-12c容器内将密码的有效期设置为永久！\",\"# 进入oracle-12c容器内 docker exec -it oracle-12c /bin/bash # 切换成oracle用户 su oracle # 进入sqlplus $ORACLE_HOME/bin/sqlplus / as sysdba # 设置密码有效期为无限制 SQL> ALTER PROFILE DEFAULT LIMIT PASSWORD_LIFE_TIME UNLIMITED; # 解锁system用户 SQL> alter user SYSTEM account unlock;\"]},\"1571\":{\"h\":\"\",\"t\":[\"使用PL/SQL或Navicat等工具测试连接oracle-12c\",\"image-20230425140440589\"]},\"1572\":{\"h\":\"\"},\"1573\":{\"h\":\"\",\"t\":[\"以下创建一个ling_mf3数据表空间\",\"-- 创建ling_mf3数据表空间 create tablespace ling_mf3 datafile '/u01/app/oracle/data/ling_mf3.dbf' size 50M;\",\"创建表空间成功，同时也会在挂载的目录下生成相应数据文件\",\"以下创建一个用户ling并授权，且设置ling_mf3为它的默认表空间\",\"-- 创建ling用户密码为meet0and1#202302并设置ling_mf3为它的默认表空间 create user ling identified by \\\"meet0and1#202302\\\" default tablespace ling_mf3; -- 给用户ling授权 dba：管理员的权限 grant connect,resource,dba to ling;\"]},\"1574\":{\"h\":\"\",\"t\":[\"在**「Docker Desktop」**中可以一键重启，但实际开发中一般是在Linux环境中，我这里演示用命令重启Oracle服务\",\"-- 查看监听状态 lsnrctl status -- 停监听 lsnrctl stop sqlplus / as sysdba -- 停止oracle SQL>shutdown immediate; -- 启服务 SQL>startup; SQL>exit -- 启监听 lsnrctl start\"]},\"1575\":{\"h\":\"\",\"t\":[\"-- 删除表空间 drop tablespace ling_mf3; -- 查询所有的表空间 select tablespace_name from dba_tablespaces; -- 查看当前的用户和表空间 select username,default_tablespace from user_users; -- 查看当前用户的角色 select * from user_role_privs; -- 查询实例名/SID/服务名 select instance_name from v$instance; -- 查看Oracle版本 select * from v$version; -- 查看数据库允许的最大连接数 select value from v$parameter where name = 'processes'; -- 查看当前连接数 select count(*) from v$process; -- 查看数据库当前会话的连接数 select count(*) from v$session; -- 查看数据库当前的并发连接数 select count(*) from v$session where status = 'ACTIVE';\"]},\"1576\":{\"h\":\"二、docker安装mysql\",\"t\":[\"思路： 1、创建相应目录 2、创建配置文间 3、运行容器 4、进入容器内部修改root登录权限 5、测试连接（如果是云服务器，需要在防火墙开通相应端口）\",\"注意挂载的my.cnf映射路径，不同版本不一样，建议先不挂载启动一个容器查看\",\"/etc/my.cnf\"]},\"1577\":{\"h\":\"创建第一台mysql-1\",\"t\":[\"1、创建相应目录 mkdir -p /var/mysql-1/{data,logs,conf} chmod 777 /var/mysql-1/logs -R 2、创建配置文件(文件内容已放最下面，直接复制即可) vim /var/mysql-1/conf/mysql.cnf [mysqld] datadir=/var/mysql-1/mysql socket=/var/mysql-1/mysql/mysql.sock symbolic-links=0 lower_case_table_names=1 [client] socket=/var/mysql-2/mysql/mysql.sock 3、运行容器 docker run -d --name=\\\"mysql-1\\\" -p 3306:3306 -v /var/mysql-1/conf/my.cnf:/etc/mysql/conf.d/my.cnf -v /var/mysql-1/data:/var/lib/mysql -v /var/mysql-1/logs:/var/log -e MYSQL_ROOT_PASSWORD=\\\"Zz@2022\\\" mysql:5.7 4、进入容器内部修改root登录权限 docker exec -it mysql bash mysql -h 127.0.0.1 -P 3306 -u root -uroot -p'Zz@2022' mysql> grant all privileges on *.* to 'root'@'%' identified by 'Zz@2022'; mysql> flush privileges;\"]},\"1578\":{\"h\":\"创建第二台mysql-2\",\"t\":[\"1、创建相应目录 mkdir -p /var/mysql-2/{data,logs,conf} chmod 777 /var/mysql-2/logs -R 2、创建配置文件(文件内容已放最下面，直接复制即可) vi /var/mysql-2/conf/mysql.cnf [mysqld] datadir=/var/mysql-2/mysql socket=/var/mysql-2/mysql/mysql.sock symbolic-links=0 lower_case_table_names=1 [client] socket=/var/mysql-2/mysql/mysql.sock 3、运行容器 docker run -d --name=\\\"mysql-2\\\" -p 3307:3306 -v /var/mysql-2/conf/my.cnf:/etc/mysql/conf.d/my.cnf -v /var/mysql-2/data:/var/lib/mysql -v /var/mysql-2/logs:/var/log -e MYSQL_ROOT_PASSWORD=\\\"Zz@2022\\\" mysql:5.7 4、进入容器内部修改root登录权限 docker exec -it mysql bash mysql -h 127.0.0.1 -P 3306 -u root -uroot -p'Zz@2022' mysql> grant all privileges on *.* to 'root'@'%' identified by 'Zz@2022'; mysql> flush privileges;\",\"image-20230419200402414\",\"启动显示以下内容，为启动成功\",\"Version: '5.7.36' socket: '/var/run/mysqld/mysqld.sock' port: 3306 MySQL Community Server (GPL)\",\"参数说明：\",\"-p 3306:3306：将容器的 3306 端口映射到宿主机的 3306 端口。\",\"-v $PWD/conf:/etc/mysql/conf.d：将主机当前目录下的 conf/my.cnf 挂载到容器的 /etc/mysql/my.cnf。配置目录\",\"-v $PWD/logs:/logs：将主机当前目录下的 logs 目录挂载到容器的 /logs。日志目录\",\"-v $PWD/data:/var/lib/mysql ：将主机当前目录下的data目录挂载到容器的 /var/lib/mysql 。数据目录\",\"**-e MYSQL_ROOT_PASSWORD=123456：**初始化 root 用户的密码。\",\"cd /home/dockerdata/mysql/conf/ vi my.cnf # Copyright (c) 2014, 2016, Oracle and/or its affiliates. All rights reserved. # # This program is free software; you can redistribute it and/or modify # it under the terms of the GNU General Public License as published by # the Free Software Foundation; version 2 of the License. # # This program is distributed in the hope that it will be useful, # but WITHOUT ANY WARRANTY; without even the implied warranty of # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the # GNU General Public License for more details. # # You should have received a copy of the GNU General Public License # along with this program; if not, write to the Free Software # Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA # # The MySQL Server configuration file. # # For explanations see # http://dev.mysql.com/doc/mysql/en/server-system-variables.html [mysqld] pid-file = /var/run/mysqld/mysqld.pid socket = /var/run/mysqld/mysqld.sock datadir = /var/lib/mysql #log-error = /var/log/mysql/error.log # Disabling symbolic-links is recommended to prevent assorted security risks symbolic-links=0 max_connections = 2000 max_user_connections = 1900 max_connect_errors = 100000 max_allowed_packet = 50M lower_case_table_names=1 [mysqld] skip-name-resolve #保存后退出\",\"修改密码：version8.0+\",\"ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY \\\"ST1q@W3e4r\\\"; ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY \\\"ST1q@W3e4r\\\"; flush privileges;\"]},\"1579\":{\"h\":\"二、ARM安装Mysql（裸机）\",\"t\":[\"平台信息：\",\"OS : ky10\",\"CPU :KUNPENG.v920\",\"MYSQL信息：\",\"版本：8.0.25（Red Hat Enterprise Linux 7 / Oracle Linux 7 (ARM, 64-bit)）\"]},\"1580\":{\"h\":\"1、卸载\",\"t\":[\"查询是否已安装mariadb\",\"rpm -qa mariadb* 或 rpm -qa |grep mariadb\",\"卸载mariadb与依赖关系的软件包\",\"yum remove -y `rpm -qa mariadb*`\"]},\"1581\":{\"h\":\"2、 下载\",\"t\":[\"​ 下载RPM Bundle，其中包含所有依赖的RPM安装包\",\"(mysql-8.0.25-1.el7.aarch64.rpm-bundle.tar)\",\"(compat-openssl10-1.0.2o-3.el8.aarch64.rpm)\",\"下载地址：https://downloads.mysql.com/archives/community/\"]},\"1582\":{\"h\":\"3、安装\",\"t\":[\"​ 2.1 上传至服务器，解压\",\" tar -zxvf mysql-8.0.26-1.el8.aarch64.rpm-bundle.tar \"]},\"1583\":{\"h\":\"4、 按照以下顺序安装需要的包\",\"t\":[\" rpm -ivh mysql-community-client-plugins-8.0.26-1.el8.aarch64.rpm rpm -ivh mysql-community-common-8.0.26-1.el8.aarch64.rpm rpm -ivh mysql-community-libs-8.0.26-1.el8.aarch64.rpm rpm -ivh mysql-community-client-8.0.26-1.el8.aarch64.rpm rpm -ivh mysql-community-server-8.0.26-1.el8.aarch64.rpm\",\"有错误看常见错误\"]},\"1584\":{\"h\":\"5、 初始化\",\"t\":[\"​ #用户可以随意，我用的root用户\",\" mysqld --initialize-insecure --user=root \"]},\"1585\":{\"h\":\"6、 启动\",\"t\":[\" systemctl start mysqld\",\" 补充命令： 启动mysql服务：systemctl start mysqld.service 停止mysql服务：systemctl stop mysqld.service 重启mysql服务：systemctl restart mysqld.service 查看mysql服务当前状态： systemctl status mysqld.service 设置mysql服务开机自启动： systemctl enable mysqld.service 停止mysql服务开机自启动： systemctl disable mysqld.service \"]},\"1586\":{\"h\":\"常见错误：\",\"t\":[\"错误提示：libLLVM-7.so不是符号连接\",\"sudo find / -name \\\"libLLVM*\\\" /usr/lib64/libLLVM-10.so /usr/lib64/libLLVM-7.0.0.so /usr/lib64/libLLVM-7.so /usr/lib64/libLLVM-10.0.1.so 然后查看 ls /usr/lib64/libLL* -la lrwxrwxrwx. 1 root root 13 12月 8 14:35 /usr/lib64/libLLVM-10.0.1.so -> libLLVM-10.so -rwxr-xr-x. 1 root root 84012704 12月 8 14:35 /usr/lib64/libLLVM-10.so -rwxr-xr-x. 1 root root 55552296 10月 9 17:45 /usr/lib64/libLLVM-7.0.0.so -rwxr-xr-x. 1 root root 55552296 10月 9 17:45 /usr/lib64/libLLVM-7.so 发现ibLLVM-7.so确实没有连接 手动建立连接 sudo ln -sf /usr/lib64/libLLVM-7.0.0.so /usr/lib64/libLLVM-7.so 错误提示消失。 sudo ldconfig sudo ldconfig -v 会自动处理ld.so.conf和ld.so.conf.d 文件默认放在/lib和/usr/lib 临时配置可使用命令 export LD_LIBRARY_PATH=/usr/lib/****:/usr/local/lib/****\",\"启动报错\",\"find / -name mysqld.log 首先检查了 mysqld.log 日志，得到了报错的日志信息 The innodb_system data file 'ibdata1' must be writable 根据日志信息知道了是 ‘ibdata1’ 数据文件必须是可写的 所以更改权限即可 输入 chmod -R 777 /var/lib/mysql 然后重新启动服务 service mysqld start\"]},\"1587\":{\"h\":\"三、docker安装部署Tomcat\"},\"1588\":{\"h\":\"1、搜索tomcat镜像\",\"t\":[\"docker search tomcat\"]},\"1589\":{\"h\":\"2、拉取tomcat镜像\",\"t\":[\"docker pull tomcat\"]},\"1590\":{\"h\":\"3、创建容器，设置端口映射、目录映射\",\"t\":[\"# 在/root目录下创建tomcat目录用于存储tomcat数据信息 mkdir ~/tomcat cd ~/tomcat\",\"docker run -id --name=c_tomcat \\\\ -p 8080:8080 \\\\ -v $PWD:/usr/local/tomcat/webapps \\\\ tomcat\",\"参数说明：\",\"**-p 8080:8080：**将容器的8080端口映射到主机的8080端口\",\"**-v $PWD:/usr/local/tomcat/webapps：**将主机中当前目录挂载到容器的webapps\"]},\"1591\":{\"h\":\"4、测试\",\"t\":[\"使用外部机器访问tomcat\"]},\"1592\":{\"h\":\"三、docker安装部署Nginx\"},\"1593\":{\"h\":\"1、搜索nginx镜像\",\"t\":[\"docker search nginx\"]},\"1594\":{\"h\":\"2、拉取nginx镜像\",\"t\":[\"docker pull nginx\"]},\"1595\":{\"h\":\"3、创建容器，设置端口映射、目录映射\",\"t\":[\"# 在/root目录下创建nginx目录用于存储nginx数据信息 mkdir ~/nginx cd ~/nginx mkdir conf cd conf # 在~/nginx/conf/下创建nginx.conf文件,粘贴下面内容 vim nginx.conf\",\"user nginx; worker_processes 1; error_log /var/log/nginx/error.log warn; pid /var/run/nginx.pid; events { worker_connections 1024; } http { include /etc/nginx/mime.types; default_type application/octet-stream; log_format main '$remote_addr - $remote_user [$time_local] \\\"$request\\\" ' '$status $body_bytes_sent \\\"$http_referer\\\" ' '\\\"$http_user_agent\\\" \\\"$http_x_forwarded_for\\\"'; access_log /var/log/nginx/access.log main; sendfile on; #tcp_nopush on; keepalive_timeout 65; #gzip on; include /etc/nginx/conf.d/*.conf; }\",\"docker run -id --name=c_nginx \\\\ -p 80:80 \\\\ -v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf \\\\ -v $PWD/logs:/var/log/nginx \\\\ -v $PWD/html:/usr/share/nginx/html \\\\ nginx\",\"参数说明： \",\"-p 80:80：将容器的 80端口映射到宿主机的 80 端口。\",\"-v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf：将主机当前目录下的 /conf/nginx.conf 挂载到容器的 :/etc/nginx/nginx.conf。配置目录\",\"-v $PWD/logs:/var/log/nginx：将主机当前目录下的 logs 目录挂载到容器的/var/log/nginx。日志目录\"]},\"1596\":{\"h\":\"4、测试\",\"t\":[\"使用外部机器访问nginx\"]},\"1597\":{\"h\":\"四、docker安装部署Redis\"},\"1598\":{\"h\":\"1、搜索redis镜像\",\"t\":[\"docker search redis\"]},\"1599\":{\"h\":\"2、拉取redis镜像\",\"t\":[\"docker pull redis:5.0\"]},\"1600\":{\"h\":\"3、创建容器，设置端口映射\",\"t\":[\"docker run -id --name=c_redis -p 6379:6379 redis:5.0\"]},\"1601\":{\"h\":\"4、测试\",\"t\":[\"使用外部机器连接redis\",\"./redis-cli.exe -h 192.168.x.x -p 6379\"]},\"1602\":{\"h\":\"五、docker安装部署postgreSQL\"},\"1603\":{\"h\":\"1、搜索postgres镜像\",\"t\":[\"docker search postgres\"]},\"1604\":{\"h\":\"2、拉取postgres镜像\",\"t\":[\"docker pull postgres:14-alpine\"]},\"1605\":{\"h\":\"3、创建挂载目录\",\"t\":[\"mkdir -p /data/postgresql/data\"]},\"1606\":{\"h\":\"4、创建容器，设置端口映射\",\"t\":[\"docker run -d --name=postgresql -p 5432:5432 -v /data/postgresql/data:/var/lib/postgresql/data -e POSTGRES_PASSWORD=Zz@2020 postgres:14-alpine\"]},\"1607\":{\"h\":\"5、修改密码（可选）\",\"t\":[\"1.进入docker 容器\",\"docker exec -it postgres96 /bin/sh\",\"2.连接数据库\",\"psql -U postgres\",\"3.键入命令修改postgres用户密码：\",\" ALTER USER postgres WITH PASSWORD 'ST1q@W3e4r';\"]},\"1608\":{\"h\":\"Linux k8s在线｜离线部署\",\"t\":[\"适用于政务内网，完全无外网的情况\"]},\"1609\":{\"h\":\"一、安装前须知\",\"t\":[\"kubesphere官方文档: https://v3-1.docs.kubesphere.io/zh/docs/\",\"多节点安装文档: https://v3-1.docs.kubesphere.io/zh/docs/installing-on-linux/introduction/multioverview/\",\"离线安装官方文档: https://v3-1.docs.kubesphere.io/zh/docs/installing-on-linux/introduction/air-gapped-installation/\"]},\"1610\":{\"h\":\"前提环境\",\"t\":[\"安装顺序\",\"系统设置调整\",\"docker\",\"docker-compose\",\"harbor （可选）\",\"socat、conntrack、ebtables、ipset（k8s所需差件）\",\"k8s和kubeshere\",\"reids （可选）\",\"mysql （可选）\",\"java8、nacos、xxl-job （可选）\",\"项目打包、上传私服 （可选）\",\"启动相关 （可选）\",\"elk集成 （可选）\",\"在足够安全的外部防护下，可以永久关闭selinux\",\"setenforce 0 sed -i 's/SELINUX=enforcing/SELINUX=disabled/' /etc/selinux/config systemctl stop firewalld && systemctl disable firewalld swapoff -a sed -i 's/.*swap.*/#&/' /etc/fstab\",\"一些必要的系统设置（建议调整）\",\"cat >> /etc/sysctl.conf <<eof net.bridge.bridge-nf-call-ip6tables = 1 net.bridge.bridge-nf-call-iptables = 1 vm.max_map_count=262144 vm.swappiness=0 eof sysctl -p modprobe br_netfilter cat >> /etc/sysctl.conf <<eof net.bridge.bridge-nf-call-ip6tables = 1 net.bridge.bridge-nf-call-iptables = 1 vm.swappiness=0 eof sysctl -p vim /etc/security/limits.conf * soft nofile 65536 * hard nofile 65536 * soft nproc 32000 * hard nproc 32000 * hard memlock unlimited * soft memlock unlimited vim /etc/systemd/system.conf DefaultLimitNOFILE=65536 DefaultLimitNPROC=32000 DefaultLimitMEMLOCK=infinity\",\"指定主机名称\",\"#命名指令：每个机器设置自己的名称，master为机器名称 hostnamectl set-hostname master\",\"（可选）卸载之前的docker\",\"方法一： 查询docker状态 systemctl status docker 停止docker状态 systemctl stop docker 卸载docker sudo yum remove docker \\\\ docker-client \\\\ docker-client-latest \\\\ docker-common \\\\ docker-latest \\\\ docker-latest-logrotate \\\\ docker-logrotate \\\\ docker-engine 方法二： 查询docker状态 systemctl status docker 查询docker安装过的包 yum list installed | grep docker 删除安装包 yum remove docker-ce.x86_64 ddocker-ce-cli.x86_64 -y 删除镜像/容器等 rm -rf /var/lib/docker\"]},\"1611\":{\"h\":\"二、在线安装Docker\"},\"1612\":{\"h\":\"配置相关yum源\",\"t\":[\"sudo yum install -y yum-utils sudo yum-config-manager \\\\ --add-repo \\\\ http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\"]},\"1613\":{\"h\":\"安装docker\",\"t\":[\"#以下是在安装k8s的时候使用 yum install -y docker-ce-20.10.7 docker-ce-cli-20.10.7 containerd.io-1.4.6 或 #安装最新版docker sudo yum install -y docker-ce docker-ce-cli containerd.io\"]},\"1614\":{\"h\":\"启动docker\",\"t\":[\"systemctl enable docker --now\"]},\"1615\":{\"h\":\"配置加速\",\"t\":[\"#这里额外添加了docker的生产环境核心配置cgroup sudo mkdir -p /etc/docker sudo tee /etc/docker/daemon.json <<-'EOF' { \\\"registry-mirrors\\\": [\\\"https://82m9ar63.mirror.aliyuncs.com\\\"], \\\"exec-opts\\\": [\\\"native.cgroupdriver=systemd\\\"], \\\"log-driver\\\": \\\"json-file\\\", \\\"log-opts\\\": { \\\"max-size\\\": \\\"100m\\\" }, \\\"storage-driver\\\": \\\"overlay2\\\" } EOF sudo systemctl daemon-reload sudo systemctl restart docker\"]},\"1616\":{\"h\":\"三、离线安装Docker\"},\"1617\":{\"h\":\"下载安装包\",\"t\":[\"Docker版本必须大于19.03.8+\",\"Docker下载地址：https://download.docker.com/linux/static/stable/x86_64/\",\"选择合适的docker版本\",\"不同架构\",\"下载地址：https://download.docker.com/linux/static/stable/\"]},\"1618\":{\"h\":\"解压缩\",\"t\":[\" tar -zxvf docker-19.03.9.tgz\"]},\"1619\":{\"h\":\"移动文件\",\"t\":[\"解压的docker文件夹全部移动至/usr/bin目录\",\"cp docker/* /usr/bin/\"]},\"1620\":{\"h\":\"将Docker注册为系统服务\",\"t\":[\"vi /etc/systemd/system/docker.service\",\"[Unit] Description=Docker Application Container Engine Documentation=https://docs.docker.com After=network-online.target firewalld.service Wants=network-online.target [Service] Type=notify ExecStart=/usr/bin/dockerd ExecReload=/bin/kill -s HUP $MAINPID LimitNOFILE=infinity LimitNPROC=infinity LimitCORE=infinity TimeoutStartSec=0 Delegate=yes KillMode=process Restart=on-failure StartLimitBurst=3 StartLimitInterval=60s [Install] WantedBy=multi-user.target\",\"#依次执行以下脚本 chmod +x /etc/systemd/system/docker.service #刷新配置&&启动服务&&开启自启 systemctl daemon-reload && systemctl start docker && systemctl enable docker.service #查看版本 docker -v\"]},\"1621\":{\"h\":\"配置dcker仓库路径\",\"t\":[\"vi /etc/docker/daemon.json填入以下内容：（私仓IP改成自己的，也可事先预留装好harbor后再修改）\",\"#镜像加速（可不配）：registry-mirrors #仓库地址：insecure-registries #额外参数：exec-opts { \\\"registry-mirrors\\\": [ \\\"https://sq9p56f6.mirror.aliyuncs.com\\\" ], \\\"insecure-registries\\\": [\\\"私服ip:8088\\\"], \\\"exec-opts\\\":[\\\"native.cgroupdriver=systemd\\\"] } #刷新配置&&启动服务&&开启自启 systemctl daemon-reload && systemctl restart docker\"]},\"1622\":{\"h\":\"四、离线安装Docker-compose\"},\"1623\":{\"h\":\"下载安装包\",\"t\":[\"Docker-Compose下载路径：https://github.com/docker/compose/releases/download/1.24.1/docker-compose-Linux-x86_64\",\"选择合适的docker版本\"]},\"1624\":{\"h\":\"配置\",\"t\":[\"#依次执行一下命令 #重命名 mv docker-compose-Linux-x86_64 docker-compose 或有的是 mv docker-compose-Linux-x86_64.64 docker-compose #修改权限 chmod +x docker-compose #将docker-compose文件移动到了/usr/local/bin mv docker-compose /usr/local/bin #打开/etc/profile文件 vi /etc/profile #添加内容到文件末尾即可,然后保存退出 #export PATH=$JAVA_HOME:/usr/local/bin:$PATH #重新加载配置文件,让其生效 #source /etc/profile #测试 docker-compose -version\"]},\"1625\":{\"h\":\"五、安装harbor（在线｜离线）\"},\"1626\":{\"h\":\"1、下载安装包拷贝到linux中\",\"t\":[\"在线安装包下载\",\"https://mirror.rancher.cn/#harbor/\",\"离线安装包下载\",\"https://github.com/goharbor/harbor/releases\",\"# 切换至/data/目录下 cd /data/ # 创建目录harbor mkdir harbor # 将下载好的harbor-offline-installer-v1.10.1.tgz解压 tar -xcvf harbor-offline-installer-v1.10.1.tgz # 切换至/data/目录下 cd /data/ # 创建目录harbor mkdir harbor # 将下载好的harbor-online-installer-v1.10.10.tgz解压 tar -zxvf harbor-online-installer-v1.10.10.tgz\"]},\"1627\":{\"h\":\"2、修改配置文件\",\"t\":[\"#有的harbor的配置文件叫harbor.yml.tmpl,可以复制一份改名 cp harbor.yml.tmpl harbor.yml vi harbor.yml\",\"图片\"]},\"1628\":{\"h\":\"3、执行安装脚本\",\"t\":[\"./install.sh # 安装\",\"图片\"]},\"1629\":{\"h\":\"4、查看镜像\",\"t\":[\"因为harbor本身自带docker 私有仓库，可以通过docker ps查看\",\"图片\"]},\"1630\":{\"h\":\"5、访问harbor\",\"t\":[\"ip+端口\",\"image-20220426140408316\",\"扩展： 在harbor目录中执行 #启动harbor docker-compose start #停止harbor docker-compose stop\",\"harbor修改端口：\",\"1、停止harbor\",\"docker-compose stop\",\"2、修改配置文件harbor.yml\",\"prot：端口号\",\"3、重启安装脚本\",\"./install.sh\"]},\"1631\":{\"h\":\"六、Kubesphere及k8s安装\"},\"1632\":{\"h\":\"在线安装\",\"t\":[\"https://kubesphere.com.cn/\",\"适用于能访问互联网的环境\",\"温馨提示\",\"自行安装docker。在未安装docker时，kk会自动安装docker，但建议docker自行安装，并且进行相应配置的设置。\",\"在机器硬盘不够大时，建议挂载外部存储。docker默认挂载目录是/var/lib/docker，绝大多数下本机硬盘不可能有这么大，必须要将docker容器的存储挂载到外置存储上去。\",\"设置好镜像私服。由于后续拉各类包都要依赖私仓，如果现在不设置，在k8s安装完成后发现无法拉镜像，这时再去改daemon.json需要重启docker，这是一个比较危险的行为。\",\"在安装前可以先启用部分插件，但是尽量在安装后再去启用，以免超过k8安装的超时时间（简单来说就是config-sample.yaml中的参数，除了私仓、机器配置，其他的一概不要动）\",\"安装完成后会提示访问地址是多少，按照控制台提示去登录即可，账号密码都在控制台上，安装过程大概要20分钟左右\",\"K8S集群的关闭是比较危险的行为，存在掉电风险的客户现场，不是很建议使用本方案，虽然掉电后无法启动集群是小概率事件，但是一旦出现就要卸载集群重装，虽然只是一句命令的事，但是会有几十分钟的空窗时间。如果一定要部署，请一定要有备用的逻辑部署方案可以随时切换。\"]},\"1633\":{\"h\":\"1、下载安装脚本\",\"t\":[\"#找一个合适的目录 export KKZONE=cn; curl -sfL https://get-kk.kubesphere.io | VERSION=v1.1.1 sh - chmod +x kk ./kk create config --with-kubernetes v1.20.4 --with-kubesphere v3.1.1 -f config-sample.yaml #编辑yaml vim config-sample.yaml #添加私服地址 registry.insecureRegistries #指定要纳入集群的机器 spec.hosts #指定主节点 spec.roleGroups.etcd spec.roleGroups.master #指定工作节点 spec.roleGroups.worker #执行 ./kk create cluster -f config-sample.yaml\"]},\"1634\":{\"h\":\"2、安装失败回滚\",\"t\":[\"如果安装过程出现意外需要回滚，执行以下代码后可以重新安装： ./kk delete cluster -f config-sample.yaml modprobe -r ipip lsmod rm -rf ~/.kube/ rm -rf /etc/kubernetes/ rm -rf /etc/systemd/system/kubelet.service.d rm -rf /etc/systemd/system/kubelet.service rm -rf /usr/bin/kube* rm -rf /etc/cni rm -rf /opt/cni rm -rf /var/lib/etcd rm -rf /var/etcd\",\"扩展\",\"#查看pod创建进度 kubectl get pods -A #查看pod描述 kubectl describe pods/pod名称 -n 命名空间\"]},\"1635\":{\"h\":\"离线安装\",\"t\":[\"适用于无法访问互联网的环境\",\"您可以根据自己的需求变更下载的 Kubernetes 版本。安装 KubeSphere v3.1.1 的建议 Kubernetes 版本：v1.17.9，v1.18.8，v1.19.8 以及 v1.20.4。如果不指定 Kubernetes 版本，KubeKey 将默认安装 Kubernetes v1.19.8。有关受支持的 Kubernetes 版本的更多信息，请参见支持矩阵。\",\"运行脚本后，会自动创建一个文件夹 kubekey。请注意，您稍后创建集群时，该文件和 kk 必须放在同一个目录下。\",\"参考： #下载镜像清单： curl -L -O https://github.com/kubesphere/ks-installer/releases/download/v3.1.1/images-list.txt #下载 offline-installation-tool.sh curl -L -O https://github.com/kubesphere/ks-installer/releases/download/v3.1.1/offline-installation-tool.sh\"]},\"1636\":{\"h\":\"1、安装k8s插件\",\"t\":[\"离线下载好安装k8s的插件包（socat、conntrack、ebtables、ipset）（提供的包内有k8s-plugins）\",\"如有zip文件，解压命令： unzip -o k8s.zip 没有unzip命令需要下载离线插件（提供的包内有unzip） 1）unzip和zip包下载地址： http://www.rpmfind.net/linux/rpm2html/search.php 2）输入zip和centos搜索，选择el7下载 3）输入unzip和centos搜索，选择el7下载 安装rpm的执行命令： rpm -Uvh *.rpm --nodeps --force;\",\"服务器登录harbor,获取认证 docker login ip+port -u admin\"]},\"1637\":{\"h\":\"2、安装k8s\",\"t\":[\"#文件可执行。 chmod +x offline-installation-tool.sh export KKZONE=cn; ./offline-installation-tool.sh -b -v v1.20.4 #推送镜像文件到仓库 IP:8088改成私服仓库的ip+端口（8G等待30分钟左右，几分钟就推完了可能是网络中断，需要再次推送） ./offline-installation-tool.sh -l images-list.txt -d ./kubesphere-images -r 私服ip:8088/library #解压进入目录： chmod +x kk #指定对应版本 ./kk create config --with-kubernetes v1.20.6 --with-kubesphere v3.1.1 -f config-sample.yaml #编辑，yaml文件放在后（提前将每台服务器命名） vim config-sample.yaml #指定要纳入集群的机器 spec.hosts #指定主节点 spec.roleGroups.etcd spec.roleGroups.master #指定工作节点 spec.roleGroups.worker #添加私服地址：镜像仓库ip和端口（私服ip:端口改成自己的） registry: registryMirrors: [] insecureRegistries: [私服ip:端口] privateRegistry: 私服ip:端口/library #执行安装k8s（出现每个节点镜像下载不到错误是镜像没推送上去，需要再次推送｜镜像版本找不到看推送的是哪一版的config-sample.yaml配置又是哪一版的） ./kk create cluster -f config-sample.yaml\"]},\"1638\":{\"h\":\"3、安装失败回滚\",\"t\":[\"如果安装过程出现意外需要回滚，执行以下代码后可以重新安装： ./kk delete cluster -f config-sample.yaml modprobe -r ipip lsmod rm -rf ~/.kube/ rm -rf /etc/kubernetes/ rm -rf /etc/systemd/system/kubelet.service.d rm -rf /etc/systemd/system/kubelet.service rm -rf /usr/bin/kube* rm -rf /etc/cni rm -rf /opt/cni rm -rf /var/lib/etcd rm -rf /var/etcd\",\"参考：config-sample.yaml\",\"apiVersion: kubekey.kubesphere.io/v1alpha1 kind: Cluster metadata: name: sample spec: hosts: - {name: master14, address: 192.168.x.x, internalAddress: 192.168.x.x, port: 22, user: root, password: 123456} - {name: node22, address: 192.168.x.x, internalAddress: 192.168.x.x, port: 22, user: root, password: 123456} - {name: node23, address: 192.168.x.x, internalAddress: 192.168.x.x, port: 22, user: root, password: 123456} roleGroups: etcd: - master14 master: - master14 worker: - node22 - node23 controlPlaneEndpoint: domain: lb.kubesphere.local address: \\\"\\\" port: 6443 kubernetes: version: v1.19.8 imageRepo: kubesphere clusterName: cluster.local network: plugin: calico kubePodsCIDR: 10.233.64.0/18 kubeServiceCIDR: 10.233.0.0/18 registry: registryMirrors: [] insecureRegistries: [\\\"192.168.239.24:8088\\\"] privateRegistry: 192.168.239.24:8088/library addons: [] --- apiVersion: installer.kubesphere.io/v1alpha1 kind: ClusterConfiguration metadata: name: ks-installer namespace: kubesphere-system labels: version: v3.1.1 spec: persistence: storageClass: \\\"\\\" authentication: jwtSecret: \\\"\\\" zone: \\\"\\\" local_registry: \\\"\\\" etcd: monitoring: false endpointIps: localhost port: 2379 tlsEnable: true common: redis: enabled: false redisVolumSize: 2Gi openldap: enabled: false openldapVolumeSize: 2Gi minioVolumeSize: 20Gi monitoring: endpoint: http://prometheus-operated.kubesphere-monitoring-system.svc:9090 es: elasticsearchMasterVolumeSize: 4Gi elasticsearchDataVolumeSize: 20Gi logMaxAge: 7 elkPrefix: logstash basicAuth: enabled: false username: \\\"\\\" password: \\\"\\\" externalElasticsearchUrl: \\\"\\\" externalElasticsearchPort: \\\"\\\" console: enableMultiLogin: true port: 30880 alerting: enabled: false # thanosruler: # replicas: 1 # resources: {} auditing: enabled: false devops: enabled: true jenkinsMemoryLim: 2Gi jenkinsMemoryReq: 1500Mi jenkinsVolumeSize: 8Gi jenkinsJavaOpts_Xms: 512m jenkinsJavaOpts_Xmx: 512m jenkinsJavaOpts_MaxRAM: 2g events: enabled: false ruler: enabled: true replicas: 2 logging: enabled: false logsidecar: enabled: true replicas: 2 metrics_server: enabled: false monitoring: storageClass: \\\"\\\" prometheusMemoryRequest: 400Mi prometheusVolumeSize: 20Gi multicluster: clusterRole: none network: networkpolicy: enabled: false ippool: type: none topology: type: none openpitrix: store: enabled: false servicemesh: enabled: false kubeedge: enabled: false cloudCore: nodeSelector: {\\\"node-role.kubernetes.io/worker\\\": \\\"\\\"} tolerations: [] cloudhubPort: \\\"10000\\\" cloudhubQuicPort: \\\"10001\\\" cloudhubHttpsPort: \\\"10002\\\" cloudstreamPort: \\\"10003\\\" tunnelPort: \\\"10004\\\" cloudHub: advertiseAddress: - \\\"\\\" nodeLimit: \\\"100\\\" service: cloudhubNodePort: \\\"30000\\\" cloudhubQuicNodePort: \\\"30001\\\" cloudhubHttpsNodePort: \\\"30002\\\" cloudstreamNodePort: \\\"30003\\\" tunnelNodePort: \\\"30004\\\" edgeWatcher: nodeSelector: {\\\"node-role.kubernetes.io/worker\\\": \\\"\\\"} tolerations: [] edgeWatcherAgent: nodeSelector: {\\\"node-role.kubernetes.io/worker\\\": \\\"\\\"} tolerations: []\"]},\"1639\":{\"h\":\"七、离线安装中间件与项目\"},\"1640\":{\"h\":\"1、sql文件导入\",\"t\":[\"将mysql、nacos、xxl-job所需的sql文件导入数据库\",\"#创建数据库 CREATE DATABASE IF NOT EXISTS 库名 DEFAULT CHARACTER SET utf8mb4 DEFAULT COLLATE utf8mb4_general_ci; #使用指定库 use 库名 #导入sql文件 source sql文件路径\"]},\"1641\":{\"h\":\"2、java8、nacos、xxl-job、pdf镜像打包\",\"t\":[\"离线环境没有这些镜像需要自己去下\",\"思路：\",\"1）到公司私仓下载镜像，在将镜像打包导出到本地\",\"2）将打包好的镜像导入到政务云服务器docker中\",\"3）将政务云服务器docker中的镜像上传至政务云harbor中\",\"#公司私仓下载镜像 docker pull 192.168.x.x:8080/common/nacos-server:2.0.2 docker pull 192.168.x.x:8080/common/pdfjdk:latest docker pull 192.168.x.x:8080/common/xxl-job-admin:latest #公网下 docker pull java:8 #文件会保存到当前的 docker终端目录（当前文件夹下） #1）导出镜像（推荐用容器名而不用id） docker tag nacos-server:2.0.2 192.168.x.x:8080/common/nacos-server:2.0.2 docker save 192.168.x.x:8080/common/nacos-server:2.0.2 > nacos-server:2.0.2.tar #2）导入镜像 docker load < nacos-server:2.0.2.tar #推送（1、改成仓库地址+仓库名+镜像名+版本号 2、推送） docker tag SOURCE_IMAGE[:TAG] 192.168.x.x:8080/trade-dev2/IMAGE[:TAG] docker push 192.168.x.x:8080/trade-dev2/IMAGE[:TAG]\"]},\"1642\":{\"h\":\"3、创建harbor仓库名\",\"t\":[\"镜像推送至harbor时需要创建仓库名，而无内网无法访问面板\",\"通过命令行创建harbor镜像库（无内网访问下进行）\",\"https://blog.csdn.net/weixin_45019350/article/details/125021305\",\"先看链接中的指引 添加第一个common项目仓库 insert into project(project_id,owner_id,name) values('2','1','common'); insert into project_metadata(id,project_id,name,value) values('2','2','public','true'); insert into project_member(id,project_id,entity_id,entity_type,role) values('2','2','1','u','1'); insert into quota(id,reference,reference_id,hard) values('2','project','2','{\\\"storage\\\": -1}'); insert into quota_usage(id,reference,reference_id,used) values('2','project','2','{\\\"storage\\\": 0}'); 添加第二个prod项目仓库 insert into project(project_id,owner_id,name) values('3','1','prod'); insert into project_metadata(id,project_id,name,value) values('3','3','public','true'); insert into project_member(id,project_id,entity_id,entity_type,role) values('3','3','1','u','1'); insert into quota(id,reference,reference_id,hard) values('3','project','3','{\\\"storage\\\": -1}'); insert into quota_usage(id,reference,reference_id,used) values('3','project','3','{\\\"storage\\\": 0}');\"]},\"1643\":{\"h\":\"4、docker启动nacos\",\"t\":[\"docker run -d \\\\ -e MODE=standalone \\\\ -e SPRING_DATASOURCE_PLATFORM=mysql \\\\ -e MYSQL_SERVICE_HOST=10.84.x.x \\\\ -e MYSQL_SERVICE_USER=root \\\\ -e MYSQL_SERVICE_PASSWORD=1qazxsw@3edc \\\\ -e MYSQL_SERVICE_DB_NAME=nacos_config \\\\ -e JVM_XMS=256m \\\\ -e JVM_XMX=256m \\\\ -e JVM_XMN=256m \\\\ -p 8848:8848 \\\\ -p 9848:9848 \\\\ --network 10.84.x.x \\\\ --name nacos-sa-mysql \\\\ --restart=always \\\\ nacos/nacos-server\"]},\"1644\":{\"h\":\"5、docker启动xxl-job\",\"t\":[\"docker run -e PARAMS=\\\"--spring.datasource.url=jdbc:mysql://10.84.x.x:3306/xxl-job?Unicode=true&characterEncoding=UTF-8 \\\\ --spring.datasource.username=root \\\\ --spring.datasource.password=1qazxsw@3edc \\\\ --spring.mail.host=smtp.qq.com \\\\ --spring.mail.port=25 \\\\ --spring.mail.from=1305366530@qq.com \\\\ --spring.mail.username=1305366530@qq.com \\\\ --spring.mail.password=123456 \\\\ --spring.mail.properties.mail.smtp.auth=true \\\\ --spring.mail.properties.mail.smtp.starttls.enable=true \\\\ --spring.mail.properties.mail.smtp.starttls.required=true \\\\ --spring.mail.properties.mail.smtp.socketFactory.class=javax.net.ssl.SSLSocketFactory \\\\ --xxl.job.accessToken=xdsl3ewi3al1oehxmo68pqxer\\\" \\\\ -p 8094:8094 -v /data/root/xxl-job-data:/data/applogs \\\\ --name xxl-job-admin --restart=always -d 10.84.x.x:8088/common/xxl-job-admin:latest\",\"docker run -d \\\\ -e PARAMS=\\\"--spring.datasource.url=jdbc:mysql://127.0.0.1:3306/xxl_job?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&serverTimezone=UTC \\\\ --spring.datasource.username=root \\\\ --spring.datasource.password=123456 \\\\ --spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver\\\" \\\\ -p 8094:8080 \\\\ -v /Users/ldf/app/dockerVolume/xxl-job:/data/applogs \\\\ --name xxl-job-admin-arm64 \\\\ -d xxl-job-admin-arm64:latest\"]},\"1645\":{\"h\":\"6、项目文件打包\",\"t\":[\"修改pom.xml中私仓的地址以及nacos配置\",\"idea将项目打成jar包（maven需要选中激活哪个profile配置）\",\"将每个服务的jar文件放入脚本文件夹中(jar放在公司提供的脚本package文件夹下)\"]},\"1646\":{\"h\":\"7、打包上传\",\"t\":[\"修改脚本文件java8的仓库地址，start.sh脚本中的仓库推送地址\",\"脚本文件夹打包上传至政务云服务器中\",\"解压运行脚本文件构建项目镜像\",\"#启动项目调试 docker run -p 10001:10001 -it -d 镜像id #查看启动日志 docker logs -f 容器id\"]},\"1647\":{\"h\":\"八、Kubesphere自制应用（yaml形式）\",\"t\":[\"本文采用的是yml的方式进行自制应用的构建，不同的项目只需要修改企业空间、镜像仓库以及数据库即可。温馨提示：本文是基于已有数据库以及项目上传到镜像仓库的前提下进行操作~\"]},\"1648\":{\"h\":\"（1）nacos\",\"t\":[\"apiVersion: app.k8s.io/v1beta1 kind: Application metadata: name: nacos namespace: devops-cloud labels: app.kubernetes.io/version: v1 app.kubernetes.io/name: nacos annotations: servicemesh.kubesphere.io/enabled: 'false' spec: selector: matchLabels: app.kubernetes.io/version: v1 app.kubernetes.io/name: nacos addOwnerRef: true componentKinds: - group: '' kind: Service - group: apps kind: Deployment - group: apps kind: StatefulSet - group: extensions kind: Ingress - group: servicemesh.kubesphere.io kind: Strategy - group: servicemesh.kubesphere.io kind: ServicePolicy --- apiVersion: extensions/v1beta1 kind: Ingress metadata: namespace: devops-cloud labels: app.kubernetes.io/version: v1 app.kubernetes.io/name: nacos name: nacos-ingress-i52okm spec: rules: [] --- apiVersion: apps/v1 kind: Deployment metadata: namespace: devops-cloud labels: version: v1 app: nacos app.kubernetes.io/version: v1 app.kubernetes.io/name: nacos name: nacos-v1 annotations: servicemesh.kubesphere.io/enabled: 'false' spec: replicas: 1 selector: matchLabels: version: v1 app: nacos app.kubernetes.io/version: v1 app.kubernetes.io/name: nacos template: metadata: labels: version: v1 app: nacos app.kubernetes.io/version: v1 app.kubernetes.io/name: nacos annotations: logging.kubesphere.io/logsidecar-config: '{}' sidecar.istio.io/inject: 'false' spec: containers: - name: container-iy6dn0 imagePullPolicy: Always pullSecret: harbor image: 'IP:8088/common/nacos-server:2.0.2' ports: - name: tcp-8848 protocol: TCP containerPort: 8848 servicePort: 8848 - name: tcp-9848 protocol: TCP containerPort: 9848 servicePort: 9848 env: - name: MYSQL_SERVICE_DB_NAME value: nacos - name: MYSQL_SERVICE_DB_PARAM value: >- useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&useSSL=false&zeroDateTimeBehavior=convertToNull&serverTimezone=Asia/Shanghai - name: MYSQL_SERVICE_HOST value: IP - name: MYSQL_SERVICE_PASSWORD value: 数据库密码 - name: MYSQL_SERVICE_PORT value: '3306' - name: MYSQL_SERVICE_USER value: root - name: SPRING_DATASOURCE_PLATFORM value: mysql volumeMounts: - name: host-time mountPath: /etc/localtime readOnly: true - name: nacos readOnly: false mountPath: /home/nacos/data serviceAccount: default affinity: {} initContainers: [] volumes: - hostPath: path: /etc/localtime type: '' name: host-time - name: nacos emptyDir: {} imagePullSecrets: - name: harbor strategy: type: RollingUpdate rollingUpdate: maxUnavailable: 25% maxSurge: 25% --- apiVersion: v1 kind: Service metadata: namespace: devops-cloud labels: version: v1 app: nacos app.kubernetes.io/version: v1 app.kubernetes.io/name: nacos annotations: kubesphere.io/serviceType: statelessservice servicemesh.kubesphere.io/enabled: 'false' name: nacos spec: sessionAffinity: None selector: app: nacos app.kubernetes.io/version: v1 app.kubernetes.io/name: nacos template: metadata: labels: version: v1 app: nacos app.kubernetes.io/version: v1 app.kubernetes.io/name: nacos ports: - name: tcp-8848 protocol: TCP port: 8848 targetPort: 8848 - name: tcp-9848 protocol: TCP port: 9848 targetPort: 9848 type: NodePort\"]},\"1649\":{\"h\":\"（2）xxl-job\",\"t\":[\"apiVersion: app.k8s.io/v1beta1 kind: Application metadata: name: xxl-job namespace: devops-cloud labels: app.kubernetes.io/version: v1 app.kubernetes.io/name: xxl-job annotations: servicemesh.kubesphere.io/enabled: 'false' spec: selector: matchLabels: app.kubernetes.io/version: v1 app.kubernetes.io/name: xxl-job addOwnerRef: true componentKinds: - group: '' kind: Service - group: apps kind: Deployment - group: apps kind: StatefulSet - group: extensions kind: Ingress - group: servicemesh.kubesphere.io kind: Strategy - group: servicemesh.kubesphere.io kind: ServicePolicy --- apiVersion: extensions/v1beta1 kind: Ingress metadata: namespace: devops-cloud labels: app.kubernetes.io/version: v1 app.kubernetes.io/name: xxl-job name: xxl-job-ingress-j6ldh4 spec: rules: [] --- apiVersion: apps/v1 kind: Deployment metadata: namespace: devops-cloud labels: version: v1 app: xxl-job app.kubernetes.io/version: v1 app.kubernetes.io/name: xxl-job name: xxl-job-v1 annotations: servicemesh.kubesphere.io/enabled: 'false' spec: replicas: 1 selector: matchLabels: version: v1 app: xxl-job app.kubernetes.io/version: v1 app.kubernetes.io/name: xxl-job template: metadata: labels: version: v1 app: xxl-job app.kubernetes.io/version: v1 app.kubernetes.io/name: xxl-job annotations: logging.kubesphere.io/logsidecar-config: '{}' sidecar.istio.io/inject: 'false' spec: containers: - name: container-7qspzi imagePullPolicy: IfNotPresent pullSecret: harbor image: 'IP:8088/common/xxl-job-admin' ports: - name: http-8094 protocol: TCP containerPort: 8094 servicePort: 8094 env: - name: MYSQL_SERVICE_DB_NAME value: xxl-job - name: MYSQL_SERVICE_HOST value: IP - name: MYSQL_SERVICE_PORT value: '3306' - name: MYSQL_SERVICE_PASSWORD value: 数据库密码 - name: MYSQL_SERVICE_USER value: root - name: SPRING_MAIL_HOST value: imap.163.com - name: SPRING_MAIL_PORT value: '143' - name: SPRING_MAIL_USERNAME value: xk_admin@163.com - name: SPRING_MAIL_FROM value: xk_admin@163.com - name: SPRING_MAIL_PASSWORD value: MDBSBUJZFYASSOUS volumeMounts: - name: app readOnly: false mountPath: /app serviceAccount: default affinity: {} initContainers: [] volumes: - name: app emptyDir: {} imagePullSecrets: - name: harbor strategy: type: RollingUpdate rollingUpdate: maxUnavailable: 25% maxSurge: 25% --- apiVersion: v1 kind: Service metadata: namespace: devops-cloud labels: version: v1 app: xxl-job app.kubernetes.io/version: v1 app.kubernetes.io/name: xxl-job annotations: kubesphere.io/serviceType: statelessservice servicemesh.kubesphere.io/enabled: 'false' name: xxl-job spec: sessionAffinity: None selector: app: xxl-job app.kubernetes.io/version: v1 app.kubernetes.io/name: xxl-job template: metadata: labels: version: v1 app: xxl-job app.kubernetes.io/version: v1 app.kubernetes.io/name: xxl-job ports: - name: http-8094 protocol: TCP port: 8094 targetPort: 8094 type: NodePort\"]},\"1650\":{\"h\":\"（3）devops-cloud-cluster\",\"t\":[\"apiVersion: app.k8s.io/v1beta1 kind: Application metadata: name: devops-cloud-cluster namespace: devops-cloud labels: app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster annotations: servicemesh.kubesphere.io/enabled: 'false' spec: selector: matchLabels: app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster addOwnerRef: true componentKinds: - group: '' kind: Service - group: apps kind: Deployment - group: apps kind: StatefulSet - group: extensions kind: Ingress - group: servicemesh.kubesphere.io kind: Strategy - group: servicemesh.kubesphere.io kind: ServicePolicy --- apiVersion: extensions/v1beta1 kind: Ingress metadata: namespace: devops-cloud labels: app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster name: devops-cloud-cluster-ingress-dydnej spec: rules: [] --- apiVersion: apps/v1 kind: Deployment metadata: namespace: devops-cloud labels: version: v1 app: devops-cloud-gateway app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster name: devops-cloud-gateway-v1 annotations: servicemesh.kubesphere.io/enabled: 'false' spec: replicas: 4 selector: matchLabels: version: v1 app: devops-cloud-gateway app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster template: metadata: labels: version: v1 app: devops-cloud-gateway app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster annotations: logging.kubesphere.io/logsidecar-config: '{}' sidecar.istio.io/inject: 'false' spec: containers: - name: container-n68t1b imagePullPolicy: Always pullSecret: harbor image: 'IP:8088/prod/devops-cloud-gateway:latest' ports: - name: tcp-10001 protocol: TCP containerPort: 10001 servicePort: 10001 volumeMounts: - name: host-time mountPath: /etc/localtime readOnly: true - name: app readOnly: false mountPath: /app serviceAccount: default affinity: {} initContainers: [] volumes: - hostPath: path: /etc/localtime type: '' name: host-time - name: app emptyDir: {} imagePullSecrets: - name: harbor strategy: type: RollingUpdate rollingUpdate: maxUnavailable: 25% maxSurge: 25% --- apiVersion: v1 kind: Service metadata: namespace: devops-cloud labels: version: v1 app: devops-cloud-gateway app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster annotations: kubesphere.io/serviceType: statelessservice servicemesh.kubesphere.io/enabled: 'false' name: devops-cloud-gateway spec: sessionAffinity: None selector: app: devops-cloud-gateway app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster template: metadata: labels: version: v1 app: devops-cloud-gateway app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster ports: - name: tcp-10001 protocol: TCP port: 10001 targetPort: 10001 type: NodePort --- apiVersion: apps/v1 kind: Deployment metadata: namespace: devops-cloud labels: version: v1 app: devops-system app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster name: devops-system-v1 annotations: servicemesh.kubesphere.io/enabled: 'false' spec: replicas: 1 selector: matchLabels: version: v1 app: devops-system app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster template: metadata: labels: version: v1 app: devops-system app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster annotations: logging.kubesphere.io/logsidecar-config: '{}' sidecar.istio.io/inject: 'false' spec: containers: - name: container-bejgi2 imagePullPolicy: Always pullSecret: harbor image: 'IP:8088/prod/devops-system' ports: - name: tcp-10003 protocol: TCP containerPort: 10003 servicePort: 10003 volumeMounts: - name: host-time mountPath: /etc/localtime readOnly: true - name: app readOnly: false mountPath: /app serviceAccount: default affinity: {} initContainers: [] volumes: - hostPath: path: /etc/localtime type: '' name: host-time - name: app emptyDir: {} imagePullSecrets: - name: harbor strategy: type: RollingUpdate rollingUpdate: maxUnavailable: 25% maxSurge: 25% --- apiVersion: v1 kind: Service metadata: namespace: devops-cloud labels: version: v1 app: devops-system app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster annotations: kubesphere.io/serviceType: statelessservice servicemesh.kubesphere.io/enabled: 'false' name: devops-system spec: sessionAffinity: None selector: app: devops-system app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster template: metadata: labels: version: v1 app: devops-system app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster ports: - name: tcp-10003 protocol: TCP port: 10003 targetPort: 10003 --- apiVersion: apps/v1 kind: Deployment metadata: namespace: devops-cloud labels: version: v1 app: devops-trade-aggregate app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster name: devops-trade-aggregate-v1 annotations: servicemesh.kubesphere.io/enabled: 'false' spec: replicas: 4 selector: matchLabels: version: v1 app: devops-trade-aggregate app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster template: metadata: labels: version: v1 app: devops-trade-aggregate app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster annotations: logging.kubesphere.io/logsidecar-config: '{}' sidecar.istio.io/inject: 'false' spec: containers: - name: container-v6eeyv imagePullPolicy: Always pullSecret: harbor image: 'IP:8088/prod/devops-trade-aggregate' ports: - name: tcp-10005 protocol: TCP containerPort: 10005 servicePort: 10005 volumeMounts: - name: host-time mountPath: /etc/localtime readOnly: true - name: app readOnly: false mountPath: /app serviceAccount: default affinity: {} initContainers: [] volumes: - hostPath: path: /etc/localtime type: '' name: host-time - name: app emptyDir: {} imagePullSecrets: - name: harbor strategy: type: RollingUpdate rollingUpdate: maxUnavailable: 25% maxSurge: 25% --- apiVersion: v1 kind: Service metadata: namespace: devops-cloud labels: version: v1 app: devops-trade-aggregate app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster annotations: kubesphere.io/serviceType: statelessservice servicemesh.kubesphere.io/enabled: 'false' name: devops-trade-aggregate spec: sessionAffinity: None selector: app: devops-trade-aggregate app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster template: metadata: labels: version: v1 app: devops-trade-aggregate app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster ports: - name: tcp-10005 protocol: TCP port: 10005 targetPort: 10005 --- apiVersion: apps/v1 kind: Deployment metadata: namespace: devops-cloud labels: version: v1 app: devops-trade-main app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster name: devops-trade-main-v1 annotations: servicemesh.kubesphere.io/enabled: 'false' spec: replicas: 4 selector: matchLabels: version: v1 app: devops-trade-main app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster template: metadata: labels: version: v1 app: devops-trade-main app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster annotations: logging.kubesphere.io/logsidecar-config: '{}' sidecar.istio.io/inject: 'false' spec: containers: - name: container-omhakh imagePullPolicy: Always pullSecret: harbor image: 'IP:8088/prod/devops-trade-main' ports: - name: tcp-10006 protocol: TCP containerPort: 10006 servicePort: 10006 volumeMounts: - name: host-time mountPath: /etc/localtime readOnly: true - name: app readOnly: false mountPath: /app serviceAccount: default affinity: {} initContainers: [] volumes: - hostPath: path: /etc/localtime type: '' name: host-time - name: app emptyDir: {} imagePullSecrets: - name: harbor strategy: type: RollingUpdate rollingUpdate: maxUnavailable: 25% maxSurge: 25% --- apiVersion: v1 kind: Service metadata: namespace: devops-cloud labels: version: v1 app: devops-trade-main app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster annotations: kubesphere.io/serviceType: statelessservice servicemesh.kubesphere.io/enabled: 'false' name: devops-trade-main spec: sessionAffinity: None selector: app: devops-trade-main app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster template: metadata: labels: version: v1 app: devops-trade-main app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster ports: - name: tcp-10006 protocol: TCP port: 10006 targetPort: 10006 --- apiVersion: apps/v1 kind: Deployment metadata: namespace: devops-cloud labels: version: v1 app: devops-trade-object app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster name: devops-trade-object-v1 annotations: servicemesh.kubesphere.io/enabled: 'false' spec: replicas: 4 selector: matchLabels: version: v1 app: devops-trade-object app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster template: metadata: labels: version: v1 app: devops-trade-object app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster annotations: logging.kubesphere.io/logsidecar-config: '{}' sidecar.istio.io/inject: 'false' spec: containers: - name: container-rsvqcf imagePullPolicy: Always pullSecret: harbor image: 'IP:8088/prod/devops-trade-object' ports: - name: tcp-10007 protocol: TCP containerPort: 10007 servicePort: 10007 volumeMounts: - name: host-time mountPath: /etc/localtime readOnly: true - name: app readOnly: false mountPath: /app serviceAccount: default affinity: {} initContainers: [] volumes: - hostPath: path: /etc/localtime type: '' name: host-time - name: app emptyDir: {} imagePullSecrets: - name: harbor strategy: type: RollingUpdate rollingUpdate: maxUnavailable: 25% maxSurge: 25% --- apiVersion: v1 kind: Service metadata: namespace: devops-cloud labels: version: v1 app: devops-trade-object app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster annotations: kubesphere.io/serviceType: statelessservice servicemesh.kubesphere.io/enabled: 'false' name: devops-trade-object spec: sessionAffinity: None selector: app: devops-trade-object app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster template: metadata: labels: version: v1 app: devops-trade-object app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster ports: - name: tcp-10007 protocol: TCP port: 10007 targetPort: 10007 --- apiVersion: apps/v1 kind: Deployment metadata: namespace: devops-cloud labels: version: v1 app: devops-trade-pay app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster name: devops-trade-pay-v1 annotations: servicemesh.kubesphere.io/enabled: 'false' spec: replicas: 1 selector: matchLabels: version: v1 app: devops-trade-pay app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster template: metadata: labels: version: v1 app: devops-trade-pay app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster annotations: logging.kubesphere.io/logsidecar-config: '{}' sidecar.istio.io/inject: 'false' spec: containers: - name: container-7xq5cc imagePullPolicy: Always pullSecret: harbor image: 'IP:8088/prod/devops-trade-pay' ports: - name: tcp-10008 protocol: TCP containerPort: 10008 servicePort: 10008 - name: tcp-8201 protocol: TCP containerPort: 8201 servicePort: 8201 volumeMounts: - name: host-time mountPath: /etc/localtime readOnly: true - name: app readOnly: false mountPath: /app serviceAccount: default affinity: {} initContainers: [] volumes: - hostPath: path: /etc/localtime type: '' name: host-time - name: app emptyDir: {} imagePullSecrets: - name: harbor strategy: type: RollingUpdate rollingUpdate: maxUnavailable: 25% maxSurge: 25% --- apiVersion: v1 kind: Service metadata: namespace: devops-cloud labels: version: v1 app: devops-trade-pay app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster annotations: kubesphere.io/serviceType: statelessservice servicemesh.kubesphere.io/enabled: 'false' name: devops-trade-pay spec: sessionAffinity: None selector: app: devops-trade-pay app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster template: metadata: labels: version: v1 app: devops-trade-pay app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster ports: - name: tcp-10008 protocol: TCP port: 10008 targetPort: 10008 - name: tcp-8201 protocol: TCP port: 8201 targetPort: 8201 --- apiVersion: apps/v1 kind: Deployment metadata: namespace: devops-cloud labels: version: v1 app: devops-trade-process app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster name: devops-trade-process-v1 annotations: servicemesh.kubesphere.io/enabled: 'false' spec: replicas: 1 selector: matchLabels: version: v1 app: devops-trade-process app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster template: metadata: labels: version: v1 app: devops-trade-process app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster annotations: logging.kubesphere.io/logsidecar-config: '{}' sidecar.istio.io/inject: 'false' spec: containers: - name: container-7e9lc8 imagePullPolicy: Always pullSecret: harbor image: 'IP:8088/prod/devops-trade-process' ports: - name: tcp-10009 protocol: TCP containerPort: 10009 servicePort: 10009 volumeMounts: - name: host-time mountPath: /etc/localtime readOnly: true - name: app readOnly: false mountPath: /app serviceAccount: default affinity: {} initContainers: [] volumes: - hostPath: path: /etc/localtime type: '' name: host-time - name: app emptyDir: {} imagePullSecrets: - name: harbor strategy: type: RollingUpdate rollingUpdate: maxUnavailable: 25% maxSurge: 25% --- apiVersion: v1 kind: Service metadata: namespace: devops-cloud labels: version: v1 app: devops-trade-process app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster annotations: kubesphere.io/serviceType: statelessservice servicemesh.kubesphere.io/enabled: 'false' name: devops-trade-process spec: sessionAffinity: None selector: app: devops-trade-process app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster template: metadata: labels: version: v1 app: devops-trade-process app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster ports: - name: tcp-10009 protocol: TCP port: 10009 targetPort: 10009 --- apiVersion: apps/v1 kind: Deployment metadata: namespace: devops-cloud labels: version: v1 app: devops-websocket app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster name: devops-websocket-v1 annotations: servicemesh.kubesphere.io/enabled: 'false' spec: replicas: 1 selector: matchLabels: version: v1 app: devops-websocket app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster template: metadata: labels: version: v1 app: devops-websocket app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster annotations: logging.kubesphere.io/logsidecar-config: '{}' sidecar.istio.io/inject: 'false' spec: containers: - name: container-1vn5nf imagePullPolicy: Always pullSecret: harbor image: 'IP:8088/prod/devops-websocket' ports: - name: tcp-10004 protocol: TCP containerPort: 10004 servicePort: 10004 volumeMounts: - name: host-time mountPath: /etc/localtime readOnly: true - name: app readOnly: false mountPath: /app serviceAccount: default affinity: {} initContainers: [] volumes: - hostPath: path: /etc/localtime type: '' name: host-time - name: app emptyDir: {} imagePullSecrets: - name: harbor strategy: type: RollingUpdate rollingUpdate: maxUnavailable: 25% maxSurge: 25% --- apiVersion: v1 kind: Service metadata: namespace: devops-cloud labels: version: v1 app: devops-websocket app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster annotations: kubesphere.io/serviceType: statelessservice servicemesh.kubesphere.io/enabled: 'false' name: devops-websocket spec: sessionAffinity: None selector: app: devops-websocket app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster template: metadata: labels: version: v1 app: devops-websocket app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster ports: - name: tcp-10004 protocol: TCP port: 10004 targetPort: 10004 --- apiVersion: apps/v1 kind: Deployment metadata: namespace: devops-cloud labels: version: v1 app: devops-workflow-core app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster name: devops-workflow-core-v1 annotations: servicemesh.kubesphere.io/enabled: 'false' spec: replicas: 1 selector: matchLabels: version: v1 app: devops-workflow-core app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster template: metadata: labels: version: v1 app: devops-workflow-core app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster annotations: logging.kubesphere.io/logsidecar-config: '{}' sidecar.istio.io/inject: 'false' spec: containers: - name: container-u985hw imagePullPolicy: Always pullSecret: harbor image: 'IP:8088/prod/devops-workflow-core' ports: - name: tcp-10010 protocol: TCP containerPort: 10010 servicePort: 10010 volumeMounts: - name: host-time mountPath: /etc/localtime readOnly: true - name: app readOnly: false mountPath: /app serviceAccount: default affinity: {} initContainers: [] volumes: - hostPath: path: /etc/localtime type: '' name: host-time - name: app emptyDir: {} imagePullSecrets: - name: harbor strategy: type: RollingUpdate rollingUpdate: maxUnavailable: 25% maxSurge: 25% --- apiVersion: v1 kind: Service metadata: namespace: devops-cloud labels: version: v1 app: devops-workflow-core app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster annotations: kubesphere.io/serviceType: statelessservice servicemesh.kubesphere.io/enabled: 'false' name: devops-workflow-core spec: sessionAffinity: None selector: app: devops-workflow-core app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster template: metadata: labels: version: v1 app: devops-workflow-core app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster ports: - name: tcp-10010 protocol: TCP port: 10010 targetPort: 10010 --- apiVersion: apps/v1 kind: Deployment metadata: namespace: devops-cloud labels: version: v1 app: devops-sign app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster name: devops-sign-v1 annotations: servicemesh.kubesphere.io/enabled: 'false' spec: replicas: 1 selector: matchLabels: version: v1 app: devops-sign app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster template: metadata: labels: version: v1 app: devops-sign app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster annotations: logging.kubesphere.io/logsidecar-config: '{}' sidecar.istio.io/inject: 'false' spec: containers: - name: container-u985hw imagePullPolicy: Always pullSecret: harbor image: 'IP:8088/prod/devops-sign' ports: - name: tcp-10013 protocol: TCP containerPort: 10013 servicePort: 10013 volumeMounts: - name: host-time mountPath: /etc/localtime readOnly: true - name: app readOnly: false mountPath: /app serviceAccount: default affinity: {} initContainers: [] volumes: - hostPath: path: /etc/localtime type: '' name: host-time - name: app emptyDir: {} imagePullSecrets: - name: harbor strategy: type: RollingUpdate rollingUpdate: maxUnavailable: 25% maxSurge: 25% --- apiVersion: v1 kind: Service metadata: namespace: devops-cloud labels: version: v1 app: devops-sign app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster annotations: kubesphere.io/serviceType: statelessservice servicemesh.kubesphere.io/enabled: 'false' name: devops-sign spec: sessionAffinity: None selector: app: devops-sign app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster template: metadata: labels: version: v1 app: devops-sign app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster ports: - name: tcp-10013 protocol: TCP port: 10013 targetPort: 10013\"]},\"1651\":{\"h\":\"九、拉通流水线\"},\"1652\":{\"h\":\"创建流水线工程 devops-cloud-auto\"},\"1653\":{\"h\":\"创建所需凭证\",\"t\":[\"新建镜像仓库凭证\",\"image-20220420222126737\",\"新建kubeconfig\",\"默认生成\",\"image-20220420222210612\"]},\"1654\":{\"h\":\"创建流水线\",\"t\":[\"代码检出\",\"集成测试环境构建制品\",\"清理部署\",\"发布测试环境\",\"image-20220421164903217\",\"image-20220420221640323\",\"注意：在构建制品时项目pom文件中镜像源地址仓库名是否在harbor中有创建，没有的话，运行流水线会报错，需要自己创建仓库\"]},\"1655\":{\"h\":\"可视化界面创建\",\"t\":[\"代理环境 maven\",\"image-20220420221757461\",\"代码检出\",\"凭证是项目代码仓库地址\",\"集成测试环境制品构建\",\"清理部署\",\"image-20220420223120319\",\"发布测试环境\",\"image-20220420223342778\",\"运行部署\",\"失败，点击活动，查看日志。分析报错\",\"image-20220420223815150\",\"成功，等启动完，查看服务下所有容器的的日志，是否启动完成无报错\",\"image-20220420224253239\"]},\"1656\":{\"h\":\"配置文件形式构建\",\"t\":[\"注意\",\"environment环境变量需要调整\",\"凭证需要调整\",\"pipeline { agent { node { label 'maven' } } stages { stage('代码检出') { agent none steps { git(branch: 'dev-yanCheng20220512', url: 'http://IP/devops-studio/devops-cloud.git', credentialsId: 'github-id', changelog: true, poll: false) } } stage('集成测试环境制品构建') { agent none steps { container('maven') { withCredentials([usernamePassword(credentialsId : 'dockerhub-id' ,passwordVariable : 'DOCKER_PASSWORD' ,usernameVariable : 'DOCKER_USERNAME' ,)]) { sh 'echo \\\"$DOCKER_PASSWORD\\\" | docker login $REGISTRY -u \\\"$DOCKER_USERNAME\\\" --password-stdin' } sh 'mvn clean package -P test5 -T 1C -Dmaven.test.skip=true -Dmaven.compile.fork=true dockerfile:build dockerfile:push' } } } stage('清理部署') { agent none steps { kubernetesDeploy(enableConfigSubstitution: true, deleteResource: true, kubeconfigId: 'kubeconfig-id', configs: 'test5/**') } } stage('发布测试环境') { agent none steps { container('maven') { withCredentials([ kubeconfigFile( credentialsId: env.KUBECONFIG_CREDENTIAL_ID, variable: 'KUBECONFIG') ]) { sh 'envsubst < test5/deployment-aggregate.yaml | kubectl apply -f -' sh 'envsubst < test5/deployment-bank.yaml | kubectl apply -f -' sh 'envsubst < test5/deployment-file.yaml | kubectl apply -f -' sh 'envsubst < test5/deployment-gateway.yaml | kubectl apply -f -' sh 'envsubst < test5/deployment-main.yaml | kubectl apply -f -' sh 'envsubst < test5/deployment-object.yaml | kubectl apply -f -' sh 'envsubst < test5/deployment-process.yaml | kubectl apply -f -' sh 'envsubst < test5/deployment-system.yaml | kubectl apply -f -' sh 'envsubst < test5/deployment-websocket.yaml | kubectl apply -f -' sh 'envsubst < test5/deployment-workflow.yaml | kubectl apply -f -' sh 'envsubst < test5/deployment-analysis.yaml | kubectl apply -f -' sh 'envsubst < test5/deployment-sign.yaml | kubectl apply -f -' sh 'envsubst < test5/deployment-message.yaml | kubectl apply -f -' } } } } } environment { DOCKER_CREDENTIAL_ID = 'dockerhub-id' KUBECONFIG_CREDENTIAL_ID = 'kubeconfig-id' REGISTRY = 'IP:8088' } }\"]},\"1657\":{\"h\":\"十、扩展\"},\"1658\":{\"h\":\"*kubeshpere添加新节点\",\"t\":[\"1、主节点上修改kk配置文件，加入新节点node2配置\",\"image-20220531171121778\",\"2、执行添加命令\",\"./kk add nodes -f 配置文件 ./kk add nodes -f sample.yaml\",\"3、查看节点\",\"kubectl get node\"]},\"1659\":{\"h\":\"*删除节点\",\"t\":[\"./kk delete node <nodeName> -f config-sample.yaml\"]},\"1660\":{\"h\":\"*指定pod运行在固定ip上\",\"t\":[\"标签选择器\",\"1、打标签\",\"#查看当前node $ kubectl get node -o wide NAME STATUS ROLES AGE VERSION INTERNAL-IP EXTERNAL-IP OS-IMAGE KERNEL-VERSION CONTAINER-RUNTIME k8s-elasticsearch Ready <none> 16h v1.21.0 172.16.66.167 <none> CentOS Linux 8 4.18.0-305.19.1.el8_4.x86_64 docker://20.10.9 k8s-master Ready control-plane,master 43h v1.21.0 172.16.66.169 <none> CentOS Linux 8 4.18.0-305.19.1.el8_4.x86_64 docker://20.10.9 k8s-node1 Ready <none> 43h v1.21.0 172.16.66.168 <none> CentOS Linux 8 4.18.0-305.19.1.el8_4.x86_64 docker://20.10.9 k8s-node2 Ready <none> 43h v1.21.0 172.16.66.170 <none> CentOS Linux 8 4.18.0-305.19.1.el8_4.x86_64 docker://20.10.9 #给k8s-node1 k8s-node2打上标签sign $ kubectl label nodes k8s-node1 k8s-node2 type=sign #查看type=websvr标签的node $ kubectl get node -l type=websvr NAME STATUS ROLES AGE VERSION k8s-node1 Ready <none> 43h v1.21.0 k8s-node2 Ready <none> 43h v1.21.0 #以下附带标签的其他操作： #修改标签 $ kubectl label nodes k8s-node1 k8s-node2 type=webtest --overwrite #查看node标签 $ kubectl get nodes k8s-node1 k8s-node2 --show-labels #删除标签 $ kubectl label nodes k8s-node1 k8s-node2 type-\",\"2、插入选择器\",\"apiVersion: apps/v1 kind: Deployment metadata: name: websvr1-deployment spec: selector: matchLabels: app: websvr1 replicas: 3 template: metadata: labels: app: websvr1 spec: nodeSelector: #选择标签为type:websvr的node部署 type: websvr containers: - name: websvr1 image: websvr:v1 ports: - containerPort: 3000\",\"image-20220630095812994\",\"扩展（固定在节点上）\",\" nodeSelector: kubernetes.io/hostname: node187\",\"集群中的每个节点默认已经附带了多个标签，如kubernetes.io/hostname、 beta.kubernetes.io/os 和beta.kubernetes.io/arch 等。这些标签也可以直接由nodeSelector使用，尤其是希望将Pod调度至某特定节点时，可以使用kubernetes.io/hostname 直接绑定至相应的主机即可。不过，这种绑定至特定主机的需求还有一种更为简单的实现方式，即使用spec.nodeName字段直接指定目标节点。\"]},\"1661\":{\"h\":\"*数据挂载\",\"t\":[\"kubesphere的存储卷是属于分布式存储，不用关心存储底层做了啥。但我们需要将数据存在当前服务器的文件目录下，可使用volume配置形式挂载\",\"#直白的说, 就是挂载在磁盘上. apiVersion: v1 kind: Pod spec: containers: - name: test image: nginx # 定义进行挂载的数据卷 volumeMounts: - name: config-volume mountPath: /etc/config volumes: - name: config-volume hostPath: path: /usr/etc/nginx/config\",\"上面将（服务器宿主机）本地的目录 /usr/etc/nginx/config 挂在到的容器的 /etc/config 上.\",\"kind: Deployment apiVersion: apps/v1 metadata: name: devops-file-v1 namespace: devops labels: app: devops-file app.kubernetes.io/name: devops-cloud-cluster app.kubernetes.io/version: v1 version: v1 annotations: deployment.kubernetes.io/revision: '34' kubesphere.io/creator: admin servicemesh.kubesphere.io/enabled: 'false' spec: replicas: 2 selector: matchLabels: app: devops-file app.kubernetes.io/name: devops-cloud-cluster app.kubernetes.io/version: v1 version: v1 template: metadata: creationTimestamp: null labels: app: devops-file app.kubernetes.io/name: devops-cloud-cluster app.kubernetes.io/version: v1 version: v1 annotations: kubesphere.io/restartedAt: '2022-10-31T03:18:27.126Z' logging.kubesphere.io/logsidecar-config: '{}' sidecar.istio.io/inject: 'false' spec: volumes: - name: host-time hostPath: path: /etc/localtime type: '' - name: app emptyDir: {} - name: filedata hostPath: path: /home/filedata type: '' containers: - name: container-5qxqpy image: '10.84.x.x:8088/prod/devops-file' ports: - name: tcp-10002 containerPort: 10002 protocol: TCP env: - name: JVM value: '-Xms2g -Xmx2g' - name: BOOTSTRAP_SERVER value: '10.84.x.x:9092,10.84.x.x:9092,10.84.x.x:9092' resources: {} volumeMounts: - name: host-time readOnly: true mountPath: /etc/localtime - name: app mountPath: /app - name: filedata mountPath: /home/filedata terminationMessagePath: /dev/termination-log terminationMessagePolicy: File imagePullPolicy: Always restartPolicy: Always terminationGracePeriodSeconds: 30 dnsPolicy: ClusterFirst nodeSelector: type: file serviceAccountName: default serviceAccount: default securityContext: {} imagePullSecrets: - name: harbor affinity: {} schedulerName: default-scheduler strategy: type: RollingUpdate rollingUpdate: maxUnavailable: 25% maxSurge: 25% revisionHistoryLimit: 10 progressDeadlineSeconds: 600\"]},\"1662\":{\"h\":\"*允许访问网络\",\"t\":[\"移动网络\",\" dnsConfig: nameservers: - 114.114.114.114 options: - name: ndots value: '2' - name: edns0\",\"image-20220630095724658\"]},\"1663\":{\"h\":\"十一、常见问题\"},\"1664\":{\"h\":\"https参数未设置( The protocol is https but attribute ssl_cert is not set)\",\"t\":[\"原因分析：顾名思义，一看就知道，https参数未设置，而本就不需要用https\",\"解决方案：配置文件中的https注释掉，注释掉即可\"]},\"1665\":{\"h\":\"启动harbor报( Failed to Setup IP tables: Unable to enable SKIP DNAT rule）\",\"t\":[\"原因分析：之前关闭防火墙之后docker没有重启，\",\"解决方案：执行以下命令重启docker即可\",\"service docker restart\"]},\"1666\":{\"h\":\"连接私服报(http: server gave HTTP response to HTTPS client)\",\"t\":[\"原因分析：Docker Registry 交互默认使用的是 HTTPS，但是搭建私有镜像默认使用的是 HTTP 服务，所以与私有镜像交互时出现以下错误。\",\"解决方案：docker系统服务添加安全进程\",\"vi /etc/docker/daemon.json填入insecure-registries：\",\"{ \\\"registry-mirrors\\\": [ \\\"https://sq9p56f6.mirror.aliyuncs.com\\\" ], \\\"insecure-registries\\\": [\\\"192.168.x.x:8088\\\"], \\\"exec-opts\\\":[\\\"native.cgroupdriver=systemd\\\"] }\"]},\"1667\":{\"h\":\"docker磁盘空间不足（ERROR：cannot create temporary directory）（fatal error: runtime: out of memory）\",\"t\":[\"原因分析：通过du -h --max-depth=1 / 逐级目录排查，发现/var/lib/docker目录文件过大\",\"解决方案：转移数据修改docker默认存储位置 或者 搞一个外部存储\",\"（1）转移数据修改docker默认存储位置\",\"#停止docker服务 systemctl stop docker #创建新的docker目录，执行命令df -h,找一个大的磁盘 mkdir -p /app/docker/lib #迁移/var/lib/docker目录下面的文件到/app/docker/lib rsync -avz /var/lib/docker/ /app/docker/lib/ #配置 /usr/lib/systemd/system/docker.service vi /usr/lib/systemd/system/docker.service #重启docker systemctl daemon-reload systemctl restart docker systemctl enable docker\",\"（2）确认Docker Root Dir修改是否已经生效\",\"[root@node24 docker]# docker info ... Docker Root Dir: /app/docker/lib/docker Debug Mode (client): false Debug Mode (server): false Registry: https://index.docker.io/v1/ ...\",\"（3）确认之前的镜像是否还在\",\"[root@master24 kk]# docker images REPOSITORY TAG IMAGE ID CREATED SIZE perl latest f9596eddf06f 5 months ago 890MB hello-world latest feb5d9fea6a5 8 months ago 13.3kB 192.168.x.x:8088/library/nginxdemos/hello plain-text 21dd11c8fb7a 8 months ago 22.9MB nginxdemos/hello plain-text 21dd11c8fb7a 8 months ago 22.9MB 192.168.x.x:8088/library/kubesphere/edge-watcher v0.1.0 f3c1c017ccd5 8 months ago 47.8MB kubesphere/edge-watcher v0.1.0 f3c1c017ccd5 8 months ago 47.8MB\",\"（4） 确定容器没问题后删除/var/lib/docker/目录中的文件\",\"rm -rf /var/lib/docker\"]},\"1668\":{\"h\":\"镜像不存在(No such image: perl:latest)\",\"t\":[\"docker里没有该镜像，pull一个然后给个标记推送至私服即可\"]},\"1669\":{\"h\":\"连接超过重试次数(connection reset by peer. See 'docker run --help'.)\",\"t\":[\"（1）情况一\",\"docker默认的源为国外官方源，下载速度较慢，改成国内镜像源\",\"vi /etc/docker/daemon.json填入registry-mirrors：\",\"{ \\\"registry-mirrors\\\": [ \\\"https://sq9p56f6.mirror.aliyuncs.com\\\" #这是我自个阿里云的镜像加速器，你可去阿里弄个自己的 ], \\\"insecure-registries\\\": [\\\"192.168.x.x:8088\\\"], \\\"exec-opts\\\":[\\\"native.cgroupdriver=systemd\\\"] }\",\"（2）情况二\",\"harbor出问题了，导致私服连接不上\",\"（3）情况三\",\"config-sample.yaml中配置的私服有问题，导致找不到对应的镜像\"]},\"1670\":{\"h\":\"Linux kubesphere在线全流程搭建\",\"t\":[\"本文以centos，自定义项目devops-clod为例\"]},\"1671\":{\"h\":\"一、移除以前docker相关包\",\"t\":[\"systemctl stop docker sudo yum remove docker \\\\ docker-client \\\\ docker-client-latest \\\\ docker-common \\\\ docker-latest \\\\ docker-latest-logrotate \\\\ docker-logrotate \\\\ docker-engine\",\"或者 systemctl status docker 查询docker安装过的包 yum list installed | grep docker 删除安装包 yum remove docker-ce.x86_64 ddocker-ce-cli.x86_64 -y 删除镜像/容器等 rm -rf /var/lib/docker\"]},\"1672\":{\"h\":\"二、配置相关yum源\",\"t\":[\"sudo yum install -y yum-utils sudo yum-config-manager \\\\ --add-repo \\\\ http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\",\"在足够安全的外部防护下，可以永久关闭selinux\",\"setenforce 0 sed -i 's/SELINUX=enforcing/SELINUX=disabled/' /etc/selinux/config systemctl stop firewalld && systemctl disable firewalld swapoff -a sed -i 's/.*swap.*/#&/' /etc/fstab\"]},\"1673\":{\"h\":\"三、安装docker\",\"t\":[\"#以下是在安装k8s的时候使用 yum install -y docker-ce-20.10.7 docker-ce-cli-20.10.7 containerd.io-1.4.6 或 #安装最新版docker sudo yum install -y docker-ce docker-ce-cli containerd.io\"]},\"1674\":{\"h\":\"四、启动docker\",\"t\":[\"systemctl enable docker --now\"]},\"1675\":{\"h\":\"五、配置加速\",\"t\":[\"#这里额外添加了docker的生产环境核心配置cgroup sudo mkdir -p /etc/docker #镜像仓库地址，按需修改 sudo tee /etc/docker/daemon.json <<-'EOF' { \\\"registry-mirrors\\\": [\\\"https://82m9ar63.mirror.aliyuncs.com\\\"], \\\"exec-opts\\\": [\\\"native.cgroupdriver=systemd\\\"], \\\"log-driver\\\": \\\"json-file\\\", \\\"log-opts\\\": { \\\"max-size\\\": \\\"100m\\\" }, \\\"storage-driver\\\": \\\"overlay2\\\" } EOF #配置文件生效 sudo systemctl daemon-reload #重启docker sudo systemctl restart docker\",\"移除k8s命令（可选）\",\"kubeadm reset -f modprobe -r ipip rm -rf ~/.kube/ rm -rf /etc/kubernetes/ rm -rf /etc/systemd/system/kubelet.service.d rm -rf /etc/systemd/system/kubelet.service rm -rf /usr/bin/kube* rm -rf /etc/cni rm -rf /opt/cni rm -rf /var/lib/etcd rm -rf /var/etcd yum clean all yum remove kube*\",\"卸载 KubeSphere 和 Kubernetes 意味着将其从您的机器上移除。该操作不可逆，且不会进行任何备份。请谨慎操作 ./kk delete cluster -f config-sample.yaml\"]},\"1676\":{\"h\":\"一、通过KubeKey安装工具安装\",\"t\":[\"#各个机器设置自己的名称 hostnamectl set-hostname xxxx\"]},\"1677\":{\"h\":\"二、在线安装：\",\"t\":[\"主节点点安装\",\"##找一个合适的目录，执行命令 export KKZONE=cn; #下载kk curl -sfL https://get-kk.kubesphere.io | VERSION=v1.1.1 sh - #给定权限 chmod +x kk ./kk create config --with-kubernetes v1.20.4 --with-kubesphere v3.1.1 -f config-sample.yaml ##编辑config-sample.yaml vim config-sample.yaml ##给spec.hosts下把所有的要纳入集群的机器登录方式进行指定 ##给spec.roleGroups.etcd填入主节点 ##给spec.roleGroups.master填入主节点 ##给spec.roleGroups.worker填入其他所有要参与到编排部署应用的机器 ##执行：./kk create cluster -f config-sample.yaml\",\"错误提示： 1、安装前可提前安装好所需插件 yum install -y socat conntrack ebtables ipset 2、一直有报错：The connection to the server localhost:8080 was refused - did you specify the right host or port?: Process exited with status 1 可以尝试下面的命令，清除集群，重新创建集群 ./kk delete cluster -f config-sample.yaml 3、需要安装插件master: conntrack is required. yum install -y conntrack 4、ssl密钥文件在从节点不存在 ERRO[14:57:06 CST] Failed to exec command: sudo -E /bin/sh -c \\\"/usr/local/bin/kubectl -n kubesphere-monitoring-system create secret generic kube-etcd-client-certs --from-file=etcd-client-ca.crt=/etc/ssl/etcd/ssl/ca.pem --from-file=etcd-client.crt=/etc/ssl/etcd/ssl/node-master.pem --from-file=etcd-client.key=/etc/ssl/etcd/ssl/node-master-key.pem\\\" error: error reading /etc/ssl/etcd/ssl/node-master.pem: no such file or directory: Process exited with status 1 node=192.168.179.159 WARN[14:57:06 CST] Task failed ... WARN[14:57:06 CST] error: interrupted by error 解决： 在从节点复制member-xxx.pem改成对应的名称即可 cp /etc/ssl/etcd/ssl/member-master-key.pem /etc/ssl/etcd/ssl/node-master-key.pem cp /etc/ssl/etcd/ssl/member-master.pem /etc/ssl/etcd/ssl/node-master.pem\",\"出现访问地址和用户名密码及安装成功\",\"image-20220421150627306\",\"devops流水线默认是关闭的，需要开启devops流水线\",\"image-20220421151322852\",\"遇到相关容器阻塞导致devops迟迟无法安装，在kubesphere上删除对应阻塞的容器重新安装\"]},\"1678\":{\"h\":\"一、前期准备\",\"t\":[\"项目所需中间件\",\"nacos，mysql，redis，xxl-job\"]},\"1679\":{\"h\":\"1、创建企业空间\",\"t\":[\"image-20220420212119330\"]},\"1680\":{\"h\":\"2、创建项目管理\",\"t\":[\"KubeSphere 中的项目对应的是 Kubernetes 的 namespace\",\"image-20220420212159720\"]},\"1681\":{\"h\":\"3、项目管理中配置镜像仓库密钥\",\"t\":[\"image-20220420212425461\"]},\"1682\":{\"h\":\"4、安装好相关环境\",\"t\":[\"需要用到的容器\",\"1、nacos\",\"2、xxl-job\",\"3、redis\",\"4、mysql（外部安装）\"]},\"1683\":{\"h\":\"1、nacos部署\"},\"1684\":{\"h\":\"1）相关数据库配置\",\"t\":[\"1、创建nacos需连接的数据库\",\"2、执行nacos初始化sql\",\"/******************************************/ /* 数据库全名 = nacos_config */ /* 表名称 = config_info */ /******************************************/ CREATE TABLE `config_info` ( `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id', `data_id` varchar(255) NOT NULL COMMENT 'data_id', `group_id` varchar(255) DEFAULT NULL, `content` longtext NOT NULL COMMENT 'content', `md5` varchar(32) DEFAULT NULL COMMENT 'md5', `gmt_create` datetime NOT NULL DEFAULT '2010-05-05 00:00:00' COMMENT '创建时间', `gmt_modified` datetime NOT NULL DEFAULT '2010-05-05 00:00:00' COMMENT '修改时间', `src_user` text COMMENT 'source user', `src_ip` varchar(20) DEFAULT NULL COMMENT 'source ip', `app_name` varchar(128) DEFAULT NULL, `tenant_id` varchar(128) DEFAULT '' COMMENT '租户字段', `c_desc` varchar(256) DEFAULT NULL, `c_use` varchar(64) DEFAULT NULL, `effect` varchar(64) DEFAULT NULL, `type` varchar(64) DEFAULT NULL, `c_schema` text, PRIMARY KEY (`id`), UNIQUE KEY `uk_configinfo_datagrouptenant` (`data_id`,`group_id`,`tenant_id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='config_info'; /******************************************/ /* 数据库全名 = nacos_config */ /* 表名称 = config_info_aggr */ /******************************************/ CREATE TABLE `config_info_aggr` ( `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id', `data_id` varchar(255) NOT NULL COMMENT 'data_id', `group_id` varchar(255) NOT NULL COMMENT 'group_id', `datum_id` varchar(255) NOT NULL COMMENT 'datum_id', `content` longtext NOT NULL COMMENT '内容', `gmt_modified` datetime NOT NULL COMMENT '修改时间', `app_name` varchar(128) DEFAULT NULL, `tenant_id` varchar(128) DEFAULT '' COMMENT '租户字段', PRIMARY KEY (`id`), UNIQUE KEY `uk_configinfoaggr_datagrouptenantdatum` (`data_id`,`group_id`,`tenant_id`,`datum_id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='增加租户字段'; /******************************************/ /* 数据库全名 = nacos_config */ /* 表名称 = config_info_beta */ /******************************************/ CREATE TABLE `config_info_beta` ( `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id', `data_id` varchar(255) NOT NULL COMMENT 'data_id', `group_id` varchar(128) NOT NULL COMMENT 'group_id', `app_name` varchar(128) DEFAULT NULL COMMENT 'app_name', `content` longtext NOT NULL COMMENT 'content', `beta_ips` varchar(1024) DEFAULT NULL COMMENT 'betaIps', `md5` varchar(32) DEFAULT NULL COMMENT 'md5', `gmt_create` datetime NOT NULL DEFAULT '2010-05-05 00:00:00' COMMENT '创建时间', `gmt_modified` datetime NOT NULL DEFAULT '2010-05-05 00:00:00' COMMENT '修改时间', `src_user` text COMMENT 'source user', `src_ip` varchar(20) DEFAULT NULL COMMENT 'source ip', `tenant_id` varchar(128) DEFAULT '' COMMENT '租户字段', PRIMARY KEY (`id`), UNIQUE KEY `uk_configinfobeta_datagrouptenant` (`data_id`,`group_id`,`tenant_id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='config_info_beta'; /******************************************/ /* 数据库全名 = nacos_config */ /* 表名称 = config_info_tag */ /******************************************/ CREATE TABLE `config_info_tag` ( `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id', `data_id` varchar(255) NOT NULL COMMENT 'data_id', `group_id` varchar(128) NOT NULL COMMENT 'group_id', `tenant_id` varchar(128) DEFAULT '' COMMENT 'tenant_id', `tag_id` varchar(128) NOT NULL COMMENT 'tag_id', `app_name` varchar(128) DEFAULT NULL COMMENT 'app_name', `content` longtext NOT NULL COMMENT 'content', `md5` varchar(32) DEFAULT NULL COMMENT 'md5', `gmt_create` datetime NOT NULL DEFAULT '2010-05-05 00:00:00' COMMENT '创建时间', `gmt_modified` datetime NOT NULL DEFAULT '2010-05-05 00:00:00' COMMENT '修改时间', `src_user` text COMMENT 'source user', `src_ip` varchar(20) DEFAULT NULL COMMENT 'source ip', PRIMARY KEY (`id`), UNIQUE KEY `uk_configinfotag_datagrouptenanttag` (`data_id`,`group_id`,`tenant_id`,`tag_id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='config_info_tag'; /******************************************/ /* 数据库全名 = nacos_config */ /* 表名称 = config_tags_relation */ /******************************************/ CREATE TABLE `config_tags_relation` ( `id` bigint(20) NOT NULL COMMENT 'id', `tag_name` varchar(128) NOT NULL COMMENT 'tag_name', `tag_type` varchar(64) DEFAULT NULL COMMENT 'tag_type', `data_id` varchar(255) NOT NULL COMMENT 'data_id', `group_id` varchar(128) NOT NULL COMMENT 'group_id', `tenant_id` varchar(128) DEFAULT '' COMMENT 'tenant_id', `nid` bigint(20) NOT NULL AUTO_INCREMENT, PRIMARY KEY (`nid`), UNIQUE KEY `uk_configtagrelation_configidtag` (`id`,`tag_name`,`tag_type`), KEY `idx_tenant_id` (`tenant_id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='config_tag_relation'; /******************************************/ /* 数据库全名 = nacos_config */ /* 表名称 = group_capacity */ /******************************************/ CREATE TABLE `group_capacity` ( `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT '主键ID', `group_id` varchar(128) NOT NULL DEFAULT '' COMMENT 'Group ID，空字符表示整个集群', `quota` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '配额，0表示使用默认值', `usage` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '使用量', `max_size` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '单个配置大小上限，单位为字节，0表示使用默认值', `max_aggr_count` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '聚合子配置最大个数，，0表示使用默认值', `max_aggr_size` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值', `max_history_count` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '最大变更历史数量', `gmt_create` datetime NOT NULL DEFAULT '2010-05-05 00:00:00' COMMENT '创建时间', `gmt_modified` datetime NOT NULL DEFAULT '2010-05-05 00:00:00' COMMENT '修改时间', PRIMARY KEY (`id`), UNIQUE KEY `uk_group_id` (`group_id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='集群、各Group容量信息表'; /******************************************/ /* 数据库全名 = nacos_config */ /* 表名称 = his_config_info */ /******************************************/ CREATE TABLE `his_config_info` ( `id` bigint(64) unsigned NOT NULL, `nid` bigint(20) unsigned NOT NULL AUTO_INCREMENT, `data_id` varchar(255) NOT NULL, `group_id` varchar(128) NOT NULL, `app_name` varchar(128) DEFAULT NULL COMMENT 'app_name', `content` longtext NOT NULL, `md5` varchar(32) DEFAULT NULL, `gmt_create` datetime NOT NULL DEFAULT '2010-05-05 00:00:00', `gmt_modified` datetime NOT NULL DEFAULT '2010-05-05 00:00:00', `src_user` text, `src_ip` varchar(20) DEFAULT NULL, `op_type` char(10) DEFAULT NULL, `tenant_id` varchar(128) DEFAULT '' COMMENT '租户字段', PRIMARY KEY (`nid`), KEY `idx_gmt_create` (`gmt_create`), KEY `idx_gmt_modified` (`gmt_modified`), KEY `idx_did` (`data_id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='多租户改造'; /******************************************/ /* 数据库全名 = nacos_config */ /* 表名称 = tenant_capacity */ /******************************************/ CREATE TABLE `tenant_capacity` ( `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT '主键ID', `tenant_id` varchar(128) NOT NULL DEFAULT '' COMMENT 'Tenant ID', `quota` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '配额，0表示使用默认值', `usage` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '使用量', `max_size` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '单个配置大小上限，单位为字节，0表示使用默认值', `max_aggr_count` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '聚合子配置最大个数', `max_aggr_size` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值', `max_history_count` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '最大变更历史数量', `gmt_create` datetime NOT NULL DEFAULT '2010-05-05 00:00:00' COMMENT '创建时间', `gmt_modified` datetime NOT NULL DEFAULT '2010-05-05 00:00:00' COMMENT '修改时间', PRIMARY KEY (`id`), UNIQUE KEY `uk_tenant_id` (`tenant_id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='租户容量信息表'; CREATE TABLE `tenant_info` ( `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id', `kp` varchar(128) NOT NULL COMMENT 'kp', `tenant_id` varchar(128) default '' COMMENT 'tenant_id', `tenant_name` varchar(128) default '' COMMENT 'tenant_name', `tenant_desc` varchar(256) DEFAULT NULL COMMENT 'tenant_desc', `create_source` varchar(32) DEFAULT NULL COMMENT 'create_source', `gmt_create` bigint(20) NOT NULL COMMENT '创建时间', `gmt_modified` bigint(20) NOT NULL COMMENT '修改时间', PRIMARY KEY (`id`), UNIQUE KEY `uk_tenant_info_kptenantid` (`kp`,`tenant_id`), KEY `idx_tenant_id` (`tenant_id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='tenant_info'; CREATE TABLE users ( username varchar(50) NOT NULL PRIMARY KEY, password varchar(500) NOT NULL, enabled boolean NOT NULL ); CREATE TABLE roles ( username varchar(50) NOT NULL, role varchar(50) NOT NULL, constraint uk_username_role UNIQUE (username,role) ); CREATE TABLE permissions ( role varchar(50) NOT NULL, resource varchar(512) NOT NULL, action varchar(8) NOT NULL, constraint uk_role_permission UNIQUE (role,resource,action) ); INSERT INTO users (username, password, enabled) VALUES ('nacos', '$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu', TRUE); INSERT INTO roles (username, role) VALUES ('nacos', 'ROLE_ADMIN');\"]},\"1685\":{\"h\":\"2、自制应用创建nacos（yml形式）\",\"t\":[\"注意修改 工作空间namespace，镜像源地址image，数据源地址\",\"apiVersion: app.k8s.io/v1beta1 kind: Application metadata: name: nacos namespace: dev2 labels: app.kubernetes.io/version: v1 app.kubernetes.io/name: nacos annotations: servicemesh.kubesphere.io/enabled: 'false' spec: selector: matchLabels: app.kubernetes.io/version: v1 app.kubernetes.io/name: nacos addOwnerRef: true componentKinds: - group: '' kind: Service - group: apps kind: Deployment - group: apps kind: StatefulSet - group: extensions kind: Ingress - group: servicemesh.kubesphere.io kind: Strategy - group: servicemesh.kubesphere.io kind: ServicePolicy --- apiVersion: extensions/v1beta1 kind: Ingress metadata: namespace: devops-cloud labels: app.kubernetes.io/version: v1 app.kubernetes.io/name: nacos name: nacos-ingress-i52okm spec: rules: [] --- apiVersion: apps/v1 kind: Deployment metadata: namespace: dev2 labels: version: v1 app: nacos app.kubernetes.io/version: v1 app.kubernetes.io/name: nacos name: nacos-v1 annotations: servicemesh.kubesphere.io/enabled: 'false' spec: replicas: 1 selector: matchLabels: version: v1 app: nacos app.kubernetes.io/version: v1 app.kubernetes.io/name: nacos template: metadata: labels: version: v1 app: nacos app.kubernetes.io/version: v1 app.kubernetes.io/name: nacos annotations: logging.kubesphere.io/logsidecar-config: '{}' sidecar.istio.io/inject: 'false' spec: containers: - name: container-iy6dn0 imagePullPolicy: Always pullSecret: harbor image: '192.168.179.188:8080/common/nacos-server:2.0.2' ports: - name: tcp-8848 protocol: TCP containerPort: 8848 servicePort: 8848 - name: tcp-9848 protocol: TCP containerPort: 9848 servicePort: 9848 env: - name: MYSQL_SERVICE_DB_NAME value: nacos-dev2 - name: MYSQL_SERVICE_DB_PARAM value: >- useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&useSSL=false&zeroDateTimeBehavior=convertToNull&serverTimezone=Asia/Shanghai - name: MYSQL_SERVICE_HOST value: 192.168.179.215 - name: MYSQL_SERVICE_PASSWORD value: 数据库密码 - name: MYSQL_SERVICE_PORT value: '3306' - name: MYSQL_SERVICE_USER value: root - name: SPRING_DATASOURCE_PLATFORM value: mysql volumeMounts: - name: host-time mountPath: /etc/localtime readOnly: true - name: nacos readOnly: false mountPath: /home/nacos/data serviceAccount: default affinity: {} initContainers: [] volumes: - hostPath: path: /etc/localtime type: '' name: host-time - name: nacos emptyDir: {} imagePullSecrets: - name: harbor strategy: type: RollingUpdate rollingUpdate: maxUnavailable: 25% maxSurge: 25% --- apiVersion: v1 kind: Service metadata: namespace: dev2 labels: version: v1 app: nacos app.kubernetes.io/version: v1 app.kubernetes.io/name: nacos annotations: kubesphere.io/serviceType: statelessservice servicemesh.kubesphere.io/enabled: 'false' name: nacos spec: sessionAffinity: None selector: app: nacos app.kubernetes.io/version: v1 app.kubernetes.io/name: nacos template: metadata: labels: version: v1 app: nacos app.kubernetes.io/version: v1 app.kubernetes.io/name: nacos ports: - name: tcp-8848 protocol: TCP port: 8848 targetPort: 8848 - name: tcp-9848 protocol: TCP port: 9848 targetPort: 9848 type: NodePort\",\"3、容器组中查看日志启动成功\",\"image-20220420213711495\",\"4、服务中可查看Dns（应用名称+命名空间）\",\"dns用于集群内应用访问使用（连接nacos通过该dns连接）\",\"image-20220420213813756\"]},\"1686\":{\"h\":\"二、xxl-job部署\",\"t\":[\"https://gitee.com/xuxueli0323/xxl-job\"]},\"1687\":{\"h\":\"1）新建xxl-job数据库\",\"t\":[\"# # XXL-JOB v2.3.1-SNAPSHOT # Copyright (c) 2015-present, xuxueli. SET NAMES utf8mb4; CREATE TABLE `xxl_job_info` ( `id` int(11) NOT NULL AUTO_INCREMENT, `job_group` int(11) NOT NULL COMMENT '执行器主键ID', `job_desc` varchar(255) NOT NULL, `add_time` datetime DEFAULT NULL, `update_time` datetime DEFAULT NULL, `author` varchar(64) DEFAULT NULL COMMENT '作者', `alarm_email` varchar(255) DEFAULT NULL COMMENT '报警邮件', `schedule_type` varchar(50) NOT NULL DEFAULT 'NONE' COMMENT '调度类型', `schedule_conf` varchar(128) DEFAULT NULL COMMENT '调度配置，值含义取决于调度类型', `misfire_strategy` varchar(50) NOT NULL DEFAULT 'DO_NOTHING' COMMENT '调度过期策略', `executor_route_strategy` varchar(50) DEFAULT NULL COMMENT '执行器路由策略', `executor_handler` varchar(255) DEFAULT NULL COMMENT '执行器任务handler', `executor_param` varchar(512) DEFAULT NULL COMMENT '执行器任务参数', `executor_block_strategy` varchar(50) DEFAULT NULL COMMENT '阻塞处理策略', `executor_timeout` int(11) NOT NULL DEFAULT '0' COMMENT '任务执行超时时间，单位秒', `executor_fail_retry_count` int(11) NOT NULL DEFAULT '0' COMMENT '失败重试次数', `glue_type` varchar(50) NOT NULL COMMENT 'GLUE类型', `glue_source` mediumtext COMMENT 'GLUE源代码', `glue_remark` varchar(128) DEFAULT NULL COMMENT 'GLUE备注', `glue_updatetime` datetime DEFAULT NULL COMMENT 'GLUE更新时间', `child_jobid` varchar(255) DEFAULT NULL COMMENT '子任务ID，多个逗号分隔', `trigger_status` tinyint(4) NOT NULL DEFAULT '0' COMMENT '调度状态：0-停止，1-运行', `trigger_last_time` bigint(13) NOT NULL DEFAULT '0' COMMENT '上次调度时间', `trigger_next_time` bigint(13) NOT NULL DEFAULT '0' COMMENT '下次调度时间', PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4; CREATE TABLE `xxl_job_log` ( `id` bigint(20) NOT NULL AUTO_INCREMENT, `job_group` int(11) NOT NULL COMMENT '执行器主键ID', `job_id` int(11) NOT NULL COMMENT '任务，主键ID', `executor_address` varchar(255) DEFAULT NULL COMMENT '执行器地址，本次执行的地址', `executor_handler` varchar(255) DEFAULT NULL COMMENT '执行器任务handler', `executor_param` varchar(512) DEFAULT NULL COMMENT '执行器任务参数', `executor_sharding_param` varchar(20) DEFAULT NULL COMMENT '执行器任务分片参数，格式如 1/2', `executor_fail_retry_count` int(11) NOT NULL DEFAULT '0' COMMENT '失败重试次数', `trigger_time` datetime DEFAULT NULL COMMENT '调度-时间', `trigger_code` int(11) NOT NULL COMMENT '调度-结果', `trigger_msg` text COMMENT '调度-日志', `handle_time` datetime DEFAULT NULL COMMENT '执行-时间', `handle_code` int(11) NOT NULL COMMENT '执行-状态', `handle_msg` text COMMENT '执行-日志', `alarm_status` tinyint(4) NOT NULL DEFAULT '0' COMMENT '告警状态：0-默认、1-无需告警、2-告警成功、3-告警失败', PRIMARY KEY (`id`), KEY `I_trigger_time` (`trigger_time`), KEY `I_handle_code` (`handle_code`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4; CREATE TABLE `xxl_job_log_report` ( `id` int(11) NOT NULL AUTO_INCREMENT, `trigger_day` datetime DEFAULT NULL COMMENT '调度-时间', `running_count` int(11) NOT NULL DEFAULT '0' COMMENT '运行中-日志数量', `suc_count` int(11) NOT NULL DEFAULT '0' COMMENT '执行成功-日志数量', `fail_count` int(11) NOT NULL DEFAULT '0' COMMENT '执行失败-日志数量', `update_time` datetime DEFAULT NULL, PRIMARY KEY (`id`), UNIQUE KEY `i_trigger_day` (`trigger_day`) USING BTREE ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4; CREATE TABLE `xxl_job_logglue` ( `id` int(11) NOT NULL AUTO_INCREMENT, `job_id` int(11) NOT NULL COMMENT '任务，主键ID', `glue_type` varchar(50) DEFAULT NULL COMMENT 'GLUE类型', `glue_source` mediumtext COMMENT 'GLUE源代码', `glue_remark` varchar(128) NOT NULL COMMENT 'GLUE备注', `add_time` datetime DEFAULT NULL, `update_time` datetime DEFAULT NULL, PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4; CREATE TABLE `xxl_job_registry` ( `id` int(11) NOT NULL AUTO_INCREMENT, `registry_group` varchar(50) NOT NULL, `registry_key` varchar(255) NOT NULL, `registry_value` varchar(255) NOT NULL, `update_time` datetime DEFAULT NULL, PRIMARY KEY (`id`), KEY `i_g_k_v` (`registry_group`,`registry_key`,`registry_value`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4; CREATE TABLE `xxl_job_group` ( `id` int(11) NOT NULL AUTO_INCREMENT, `app_name` varchar(64) NOT NULL COMMENT '执行器AppName', `title` varchar(12) NOT NULL COMMENT '执行器名称', `address_type` tinyint(4) NOT NULL DEFAULT '0' COMMENT '执行器地址类型：0=自动注册、1=手动录入', `address_list` text COMMENT '执行器地址列表，多地址逗号分隔', `update_time` datetime DEFAULT NULL, PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4; CREATE TABLE `xxl_job_user` ( `id` int(11) NOT NULL AUTO_INCREMENT, `username` varchar(50) NOT NULL COMMENT '账号', `password` varchar(50) NOT NULL COMMENT '密码', `role` tinyint(4) NOT NULL COMMENT '角色：0-普通用户、1-管理员', `permission` varchar(255) DEFAULT NULL COMMENT '权限：执行器ID列表，多个逗号分割', PRIMARY KEY (`id`), UNIQUE KEY `i_username` (`username`) USING BTREE ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4; CREATE TABLE `xxl_job_lock` ( `lock_name` varchar(50) NOT NULL COMMENT '锁名称', PRIMARY KEY (`lock_name`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4; INSERT INTO `xxl_job_group`(`id`, `app_name`, `title`, `address_type`, `address_list`, `update_time`) VALUES (1, 'xxl-job-executor-sample', '示例执行器', 0, NULL, '2018-11-03 22:21:31' ); INSERT INTO `xxl_job_info`(`id`, `job_group`, `job_desc`, `add_time`, `update_time`, `author`, `alarm_email`, `schedule_type`, `schedule_conf`, `misfire_strategy`, `executor_route_strategy`, `executor_handler`, `executor_param`, `executor_block_strategy`, `executor_timeout`, `executor_fail_retry_count`, `glue_type`, `glue_source`, `glue_remark`, `glue_updatetime`, `child_jobid`) VALUES (1, 1, '测试任务1', '2018-11-03 22:21:31', '2018-11-03 22:21:31', 'XXL', '', 'CRON', '0 0 0 * * ? *', 'DO_NOTHING', 'FIRST', 'demoJobHandler', '', 'SERIAL_EXECUTION', 0, 0, 'BEAN', '', 'GLUE代码初始化', '2018-11-03 22:21:31', ''); INSERT INTO `xxl_job_user`(`id`, `username`, `password`, `role`, `permission`) VALUES (1, 'admin', 'e10adc3949ba59abbe56e057f20f883e', 1, NULL); INSERT INTO `xxl_job_lock` ( `lock_name`) VALUES ( 'schedule_lock'); commit;\"]},\"1688\":{\"h\":\"2）自制应用创建xxl-job\",\"t\":[\"注意修改 命名空间namespace，镜像源地址images，数据库连接方式，\",\"yml中数据库名称要于自建应用数据库连接对应\",\"apiVersion: app.k8s.io/v1beta1 kind: Application metadata: name: xxl-job namespace: dev3 labels: app.kubernetes.io/version: v1 app.kubernetes.io/name: xxl-job annotations: servicemesh.kubesphere.io/enabled: 'false' spec: selector: matchLabels: app.kubernetes.io/version: v1 app.kubernetes.io/name: xxl-job addOwnerRef: true componentKinds: - group: '' kind: Service - group: apps kind: Deployment - group: apps kind: StatefulSet - group: extensions kind: Ingress - group: servicemesh.kubesphere.io kind: Strategy - group: servicemesh.kubesphere.io kind: ServicePolicy --- apiVersion: extensions/v1beta1 kind: Ingress metadata: namespace: dev3 labels: app.kubernetes.io/version: v1 app.kubernetes.io/name: xxl-job name: xxl-job-ingress-j6ldh4 spec: rules: [] --- apiVersion: apps/v1 kind: Deployment metadata: namespace: dev3 labels: version: v1 app: xxl-job app.kubernetes.io/version: v1 app.kubernetes.io/name: xxl-job name: xxl-job-v1 annotations: servicemesh.kubesphere.io/enabled: 'false' spec: replicas: 1 selector: matchLabels: version: v1 app: xxl-job app.kubernetes.io/version: v1 app.kubernetes.io/name: xxl-job template: metadata: labels: version: v1 app: xxl-job app.kubernetes.io/version: v1 app.kubernetes.io/name: xxl-job annotations: logging.kubesphere.io/logsidecar-config: '{}' sidecar.istio.io/inject: 'false' spec: containers: - name: container-7qspzi imagePullPolicy: IfNotPresent pullSecret: harbor image: '192.168.179.188:8080/common/xxl-job-admin' ports: - name: http-8094 protocol: TCP containerPort: 8094 servicePort: 8094 env: - name: MYSQL_SERVICE_DB_NAME value: xxl-job-dev3 - name: MYSQL_SERVICE_HOST value: 192.168.179.215 - name: MYSQL_SERVICE_PORT value: '3306' - name: MYSQL_SERVICE_PASSWORD value: 数据库密码 - name: MYSQL_SERVICE_USER value: root - name: SPRING_MAIL_HOST value: imap.163.com - name: SPRING_MAIL_PORT value: '143' - name: SPRING_MAIL_USERNAME value: xk_admin@163.com - name: SPRING_MAIL_FROM value: xk_admin@163.com - name: SPRING_MAIL_PASSWORD value: MDBSBUJZFYASSOUS volumeMounts: - name: app readOnly: false mountPath: /app serviceAccount: default affinity: {} initContainers: [] volumes: - name: app emptyDir: {} imagePullSecrets: - name: harbor strategy: type: RollingUpdate rollingUpdate: maxUnavailable: 25% maxSurge: 25% --- apiVersion: v1 kind: Service metadata: namespace: dev3 labels: version: v1 app: xxl-job app.kubernetes.io/version: v1 app.kubernetes.io/name: xxl-job annotations: kubesphere.io/serviceType: statelessservice servicemesh.kubesphere.io/enabled: 'false' name: xxl-job spec: sessionAffinity: None selector: app: xxl-job app.kubernetes.io/version: v1 app.kubernetes.io/name: xxl-job template: metadata: labels: version: v1 app: xxl-job app.kubernetes.io/version: v1 app.kubernetes.io/name: xxl-job ports: - name: http-8094 protocol: TCP port: 8094 targetPort: 8094 type: NodePort\",\"查看容器组日志，启动成功\",\"image-20220420214945237\",\"服务中查看nds\",\"image-20220420215058926\"]},\"1689\":{\"h\":\"三、redis部署\"},\"1690\":{\"h\":\"1）配置中心创建配置\",\"t\":[\"image-20220421160057253\"]},\"1691\":{\"h\":\"2）创建存储卷\",\"t\":[\"image-20220421154812227\"]},\"1692\":{\"h\":\"3）创建容器\",\"t\":[\"有状态服务不能对外暴露端口，只有无状态服务才可以；当然如果上线部署的话还是要选择有状态服务\",\"设置启动命令\",\"此处启动并加载/etc/redis/redis.conf的配置文件，下文中配置文件路径一致\",\"image-20220421160335556\"]},\"1693\":{\"h\":\"4）添加存储卷\",\"t\":[\"目录为/data\",\"image-20220421155236818\"]},\"1694\":{\"h\":\"5）挂载配置文件\",\"t\":[\"挂在配置文件，这里我们选择上面配置的配置文件，路径和上面一致为/etc/redis/redis.conf，意思就是上面启动命令是启动/etc/redis/redis.conf配置文件，这里将redis-conf中的配置信息关联给/etc/redis/redis.conf(这里redis.conf不写的话需要跟配置中的键保持一致)\",\"image-20220421160454198\"]},\"1695\":{\"h\":\"二、项目代码配置\"},\"1696\":{\"h\":\"一、pom文件\",\"t\":[\"修改pom连接配置\",\"1、检查nacos的dns是否一致\",\"2、配置文件名称，组名是否一致\",\"image-20220420220429122\",\"项目采用的是nacos\",\"在kubesphere面板服务里查看nacos的外放访问端口，处于哪台服务器，ip+端口/nacos访问nacos\",\"登录nacos添加项目配置文件(跟项目中pom所写保持一致)\",\"image-20220421163229765\"]},\"1697\":{\"h\":\"二、配置Dockerfile构建构建文件（每个服务都要）\",\"t\":[\"注意：每个服务端口不一致，jar包名称不一致\",\"#设置镜像基础，jdk8 FROM java:8 #维护人员信息 MAINTAINER hetao #设置镜像对外暴露端口 EXPOSE 10014 ENV TZ=PRC RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone #将当前 target 目录下的 jar 放置在根目录下，命名为 app.jar，推荐使用绝对路径。 ADD target/devops-validator.jar /devops-validator.jar #执行启动命令 ENTRYPOINT java ${JVM:=-Xms2048m -Xmx2048m} -Djava.security.egd=file:/dev/./urandom -jar /devops-validator.jar\"]},\"1698\":{\"h\":\"三、项目中流水线构建Deployment容器所需的配置文件（每个服务都要）\",\"t\":[\"每个服务配置不一样，主要修改其中的 名称name，命名空间namespace，应用名称app，镜像源地址images，端口tcp\",\"image-20220421163617011\",\"kind: Deployment apiVersion: apps/v1 metadata: name: devops-validator-v1 namespace: dev2 labels: app: devops-validator app.kubernetes.io/name: devops-cloud-cluster app.kubernetes.io/version: v1 version: v1 annotations: deployment.kubernetes.io/revision: '2' kubesphere.io/creator: admin servicemesh.kubesphere.io/enabled: 'false' spec: replicas: 1 selector: matchLabels: app: devops-validator app.kubernetes.io/name: devops-cloud-cluster app.kubernetes.io/version: v1 version: v1 template: metadata: labels: app: devops-validator app.kubernetes.io/name: devops-cloud-cluster app.kubernetes.io/version: v1 version: v1 annotations: kubesphere.io/restartedAt: '2021-12-02T05:13:43.487Z' logging.kubesphere.io/logsidecar-config: '{}' sidecar.istio.io/inject: 'false' spec: volumes: - name: host-time hostPath: path: /etc/localtime type: '' - name: app emptyDir: {} containers: - name: container-bejgi2 image: '192.168.x.x:8080/trade-dev2/devops-validator' ports: - name: tcp-10014 containerPort: 10014 protocol: TCP env: - name: JVM value: '-Xms256m -Xmx256m' resources: limits: cpu: '1' memory: 1000Mi requests: cpu: 500m memory: 500Mi volumeMounts: - name: host-time readOnly: true mountPath: /etc/localtime - name: app mountPath: /app terminationMessagePath: /dev/termination-log terminationMessagePolicy: File imagePullPolicy: Always restartPolicy: Always terminationGracePeriodSeconds: 30 dnsPolicy: ClusterFirst serviceAccountName: default serviceAccount: default securityContext: {} imagePullSecrets: - name: harbor affinity: {} schedulerName: default-scheduler strategy: type: Recreate revisionHistoryLimit: 10 progressDeadlineSeconds: 600\"]},\"1699\":{\"h\":\"三、拉通流水线\"},\"1700\":{\"h\":\"一、创建流水线工程 devops-cloud-auto\"},\"1701\":{\"h\":\"二、创建所需凭证\"},\"1702\":{\"h\":\"1、新建镜像仓库凭证\",\"t\":[\"image-20220420222126737\"]},\"1703\":{\"h\":\"2、新建kubeconfig\",\"t\":[\"默认生成\",\"image-20220420222210612\"]},\"1704\":{\"h\":\"三、创建流水线\",\"t\":[\"主要4步：\",\"代码检出\",\"集成测试环境构建制品\",\"清理部署\",\"发布测试环境\",\"注意：在构建制品时项目pom文件中镜像源地址仓库名是否在harbor中有创建，没有的话，运行流水线会报错，需要自己创建仓库\",\"image-20220421164903217\",\"image-20220420221640323\"]},\"1705\":{\"h\":\"1)代理环境 maven\"},\"1706\":{\"h\":\"2）代码检出\",\"t\":[\"凭证是项目代码仓库地址\",\"image-20220420222438920\",\"image-20220421173225644\"]},\"1707\":{\"h\":\"3）集成测试环境制品构建\",\"t\":[\"注意环境变量需要自己在保存后的面板上，编辑jekins，添加相关配置（当然也可写死不配置在环境变量中，不建议）\",\"image-20220420223545289\",\"image-20220420222922754\"]},\"1708\":{\"h\":\"4）清理部署\",\"t\":[\"image-20220420223120319\"]},\"1709\":{\"h\":\"5）发布测试环境\",\"t\":[\"image-20220420223342778\"]},\"1710\":{\"h\":\"6）运行部署\",\"t\":[\"失败，点击活动，查看日志。分析报错\",\"image-20220420223815150\",\"成功，等启动完，查看服务下所有容器的的日志，是否启动完成无报错\",\"image-20220420224253239\"]},\"1711\":{\"h\":\"7）（可选）使用配置文件形式构建流水线\",\"t\":[\"1、environment环境变量要改一下\",\"2、编辑流水线每一个环节的凭证也改成自己定义的\",\"image-20220421164309958\",\"pipeline { agent { node { label 'maven' } } stages { stage('代码检出') { agent none steps { git(branch: 'dev-checkService-ldf', url: 'http://47.x.x.x/devops-studio/devops-cloud.git', credentialsId: 'zhao-huang', changelog: true, poll: false) } } stage('集成测试环境制品构建') { agent none steps { container('maven') { withCredentials([usernamePassword(credentialsId : 'zhaohuanh-docker' ,passwordVariable : 'DOCKER_PASSWORD' ,usernameVariable : 'DOCKER_USERNAME')]) { sh 'echo \\\"$DOCKER_PASSWORD\\\" | docker login $REGISTRY -u \\\"$DOCKER_USERNAME\\\" --password-stdin' } sh 'mvn clean package -P dev2 -T 1C -Dmaven.test.skip=true -Dmaven.compile.fork=true dockerfile:build dockerfile:push' } } } stage('清理部署') { agent none steps { kubernetesDeploy(enableConfigSubstitution: true, deleteResource: true, kubeconfigId: 'kubeconfig', configs: 'dev/dev2/*') } } stage('发布测试环境') { agent none steps { container('maven') { withCredentials([ kubeconfigFile( credentialsId: env.KUBECONFIG_CREDENTIAL_ID, variable: 'KUBECONFIG') ]) { sh 'envsubst < dev/dev2/deployment-aggregate.yaml | kubectl apply -f -' sh 'envsubst < dev/dev2/deployment-bank.yaml | kubectl apply -f -' sh 'envsubst < dev/dev2/deployment-file.yaml | kubectl apply -f -' sh 'envsubst < dev/dev2/deployment-gateway.yaml | kubectl apply -f -' sh 'envsubst < dev/dev2/deployment-main.yaml | kubectl apply -f -' sh 'envsubst < dev/dev2/deployment-object.yaml | kubectl apply -f -' sh 'envsubst < dev/dev2/deployment-process.yaml | kubectl apply -f -' sh 'envsubst < dev/dev2/deployment-system.yaml | kubectl apply -f -' sh 'envsubst < dev/dev2/deployment-websocket.yaml | kubectl apply -f -' sh 'envsubst < dev/dev2/deployment-workflow.yaml | kubectl apply -f -' sh 'envsubst < dev/dev2/deployment-analysis.yaml | kubectl apply -f -' sh 'envsubst < dev/dev2/deployment-sign.yaml | kubectl apply -f -' sh 'envsubst < dev/dev2/deployment-validator.yaml | kubectl apply -f -' } } } } } environment { DOCKER_CREDENTIAL_ID = 'zhaohuanh-docker' KUBECONFIG_CREDENTIAL_ID = 'kubeconfig' REGISTRY = '192.168.x.x:8080' DOCKERHUB_NAMESPACE = 'zhongzhi' APP_NAME = 'dev-estate' BRANCH_NAME = 'dev' DOCKER_USERNAME = 'admin' DOCKER_PASSWORD = '镜像仓库密码' } }\"]},\"1712\":{\"h\":\"8)问题：\",\"t\":[\"私有仓库依赖下不下来（配置自己的仓库地址）\",\"集群管理 -> 配置 -> 配置字典 -> 搜索ks-devops-agent -> 右边三个点 -> 编辑配置 -> MavenSetting -> 编辑 -> 把值改成自己通用的maven settings配置就好。\"]},\"1713\":{\"h\":\"四、自制服务应用\",\"t\":[\"由于在代码中构建容器的配置文件是构建工作负载的yml，\",\"所以只能看到工作负载中有容器，而无法通过服务关联资源和开放外网。\",\"当然通过面板服务关联资源可以实现，但通过自制应用统一管理各服务应用更方便管理\",\"注意修改 自制应用名称name，命名空间namespace，镜像源地址images，\",\"apiVersion: app.k8s.io/v1beta1 kind: Application metadata: name: devops-cloud-cluster namespace: dev2 labels: app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster annotations: servicemesh.kubesphere.io/enabled: 'false' spec: selector: matchLabels: app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster addOwnerRef: true componentKinds: - group: '' kind: Service - group: apps kind: Deployment - group: apps kind: StatefulSet - group: extensions kind: Ingress - group: servicemesh.kubesphere.io kind: Strategy - group: servicemesh.kubesphere.io kind: ServicePolicy --- apiVersion: extensions/v1beta1 kind: Ingress metadata: namespace: dev2 labels: app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster name: devops-cloud-cluster-ingress-dydnej spec: rules: [] --- apiVersion: apps/v1 kind: Deployment metadata: namespace: dev2 labels: version: v1 app: devops-cloud-gateway app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster name: devops-cloud-gateway-v1 annotations: servicemesh.kubesphere.io/enabled: 'false' spec: replicas: 1 selector: matchLabels: version: v1 app: devops-cloud-gateway app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster template: metadata: labels: version: v1 app: devops-cloud-gateway app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster annotations: logging.kubesphere.io/logsidecar-config: '{}' sidecar.istio.io/inject: 'false' spec: containers: - name: container-n68t1b imagePullPolicy: Always pullSecret: harbor image: '192.168.x.x:8080/trade-dev2/devops-cloud-gateway:latest' ports: - name: tcp-10001 protocol: TCP containerPort: 10001 servicePort: 10001 volumeMounts: - name: host-time mountPath: /etc/localtime readOnly: true - name: app readOnly: false mountPath: /app serviceAccount: default affinity: {} initContainers: [] volumes: - hostPath: path: /etc/localtime type: '' name: host-time - name: app emptyDir: {} imagePullSecrets: - name: harbor nodeSelector: kubernetes.io/hostname: node187 strategy: type: RollingUpdate rollingUpdate: maxUnavailable: 25% maxSurge: 25% --- apiVersion: v1 kind: Service metadata: namespace: dev2 labels: version: v1 app: devops-cloud-gateway app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster annotations: kubesphere.io/serviceType: statelessservice servicemesh.kubesphere.io/enabled: 'false' name: devops-cloud-gateway spec: sessionAffinity: None selector: app: devops-cloud-gateway app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster template: metadata: labels: version: v1 app: devops-cloud-gateway app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster ports: - name: tcp-10001 protocol: TCP port: 10001 targetPort: 10001 type: NodePort --- apiVersion: apps/v1 kind: Deployment metadata: namespace: dev2 labels: version: v1 app: devops-file app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster name: devops-file-v1 annotations: servicemesh.kubesphere.io/enabled: 'false' spec: replicas: 1 selector: matchLabels: version: v1 app: devops-file app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster template: metadata: labels: version: v1 app: devops-file app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster annotations: logging.kubesphere.io/logsidecar-config: '{}' sidecar.istio.io/inject: 'false' spec: containers: - name: container-5qxqpy imagePullPolicy: Always pullSecret: harbor image: '192.168.x.x:8080/trade-dev2/devops-file' ports: - name: tcp-10002 protocol: TCP containerPort: 10002 servicePort: 10002 volumeMounts: - name: host-time mountPath: /etc/localtime readOnly: true - name: app readOnly: false mountPath: /app serviceAccount: default affinity: {} initContainers: [] volumes: - hostPath: path: /etc/localtime type: '' name: host-time - name: app emptyDir: {} imagePullSecrets: - name: harbor strategy: type: RollingUpdate rollingUpdate: maxUnavailable: 25% maxSurge: 25% --- apiVersion: v1 kind: Service metadata: namespace: dev2 labels: version: v1 app: devops-file app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster annotations: kubesphere.io/serviceType: statelessservice servicemesh.kubesphere.io/enabled: 'false' name: devops-file spec: sessionAffinity: None selector: app: devops-file app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster template: metadata: labels: version: v1 app: devops-file app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster ports: - name: tcp-10002 protocol: TCP port: 10002 targetPort: 10002 --- apiVersion: apps/v1 kind: Deployment metadata: namespace: dev2 labels: version: v1 app: devops-system app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster name: devops-system-v1 annotations: servicemesh.kubesphere.io/enabled: 'false' spec: replicas: 1 selector: matchLabels: version: v1 app: devops-system app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster template: metadata: labels: version: v1 app: devops-system app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster annotations: logging.kubesphere.io/logsidecar-config: '{}' sidecar.istio.io/inject: 'false' spec: containers: - name: container-bejgi2 imagePullPolicy: Always pullSecret: harbor image: '192.168.x.x:8080/trade-dev2/devops-system' ports: - name: tcp-10003 protocol: TCP containerPort: 10003 servicePort: 10003 volumeMounts: - name: host-time mountPath: /etc/localtime readOnly: true - name: app readOnly: false mountPath: /app serviceAccount: default affinity: {} initContainers: [] volumes: - hostPath: path: /etc/localtime type: '' name: host-time - name: app emptyDir: {} imagePullSecrets: - name: harbor strategy: type: RollingUpdate rollingUpdate: maxUnavailable: 25% maxSurge: 25% --- apiVersion: v1 kind: Service metadata: namespace: dev2 labels: version: v1 app: devops-system app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster annotations: kubesphere.io/serviceType: statelessservice servicemesh.kubesphere.io/enabled: 'false' name: devops-system spec: sessionAffinity: None selector: app: devops-system app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster template: metadata: labels: version: v1 app: devops-system app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster ports: - name: tcp-10003 protocol: TCP port: 10003 targetPort: 10003 --- apiVersion: apps/v1 kind: Deployment metadata: namespace: dev2 labels: version: v1 app: devops-trade-aggregate app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster name: devops-trade-aggregate-v1 annotations: servicemesh.kubesphere.io/enabled: 'false' spec: replicas: 1 selector: matchLabels: version: v1 app: devops-trade-aggregate app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster template: metadata: labels: version: v1 app: devops-trade-aggregate app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster annotations: logging.kubesphere.io/logsidecar-config: '{}' sidecar.istio.io/inject: 'false' spec: containers: - name: container-v6eeyv imagePullPolicy: Always pullSecret: harbor image: '192.168.x.x:8080/trade-dev2/devops-trade-aggregate' ports: - name: tcp-10005 protocol: TCP containerPort: 10005 servicePort: 10005 volumeMounts: - name: host-time mountPath: /etc/localtime readOnly: true - name: app readOnly: false mountPath: /app serviceAccount: default affinity: {} initContainers: [] volumes: - hostPath: path: /etc/localtime type: '' name: host-time - name: app emptyDir: {} imagePullSecrets: - name: harbor strategy: type: RollingUpdate rollingUpdate: maxUnavailable: 25% maxSurge: 25% --- apiVersion: v1 kind: Service metadata: namespace: dev2 labels: version: v1 app: devops-trade-aggregate app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster annotations: kubesphere.io/serviceType: statelessservice servicemesh.kubesphere.io/enabled: 'false' name: devops-trade-aggregate spec: sessionAffinity: None selector: app: devops-trade-aggregate app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster template: metadata: labels: version: v1 app: devops-trade-aggregate app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster ports: - name: tcp-10005 protocol: TCP port: 10005 targetPort: 10005 --- apiVersion: apps/v1 kind: Deployment metadata: namespace: dev2 labels: version: v1 app: devops-trade-main app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster name: devops-trade-main-v1 annotations: servicemesh.kubesphere.io/enabled: 'false' spec: replicas: 1 selector: matchLabels: version: v1 app: devops-trade-main app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster template: metadata: labels: version: v1 app: devops-trade-main app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster annotations: logging.kubesphere.io/logsidecar-config: '{}' sidecar.istio.io/inject: 'false' spec: containers: - name: container-omhakh imagePullPolicy: Always pullSecret: harbor image: '192.168.x.x:8080/trade-dev2/devops-trade-main' ports: - name: tcp-10006 protocol: TCP containerPort: 10006 servicePort: 10006 volumeMounts: - name: host-time mountPath: /etc/localtime readOnly: true - name: app readOnly: false mountPath: /app serviceAccount: default affinity: {} initContainers: [] volumes: - hostPath: path: /etc/localtime type: '' name: host-time - name: app emptyDir: {} imagePullSecrets: - name: harbor strategy: type: RollingUpdate rollingUpdate: maxUnavailable: 25% maxSurge: 25% --- apiVersion: v1 kind: Service metadata: namespace: dev2 labels: version: v1 app: devops-trade-main app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster annotations: kubesphere.io/serviceType: statelessservice servicemesh.kubesphere.io/enabled: 'false' name: devops-trade-main spec: sessionAffinity: None selector: app: devops-trade-main app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster template: metadata: labels: version: v1 app: devops-trade-main app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster ports: - name: tcp-10006 protocol: TCP port: 10006 targetPort: 10006 --- apiVersion: apps/v1 kind: Deployment metadata: namespace: dev2 labels: version: v1 app: devops-trade-object app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster name: devops-trade-object-v1 annotations: servicemesh.kubesphere.io/enabled: 'false' spec: replicas: 1 selector: matchLabels: version: v1 app: devops-trade-object app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster template: metadata: labels: version: v1 app: devops-trade-object app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster annotations: logging.kubesphere.io/logsidecar-config: '{}' sidecar.istio.io/inject: 'false' spec: containers: - name: container-rsvqcf imagePullPolicy: Always pullSecret: harbor image: '192.168.x.x:8080/trade-dev2/devops-trade-object' ports: - name: tcp-10007 protocol: TCP containerPort: 10007 servicePort: 10007 volumeMounts: - name: host-time mountPath: /etc/localtime readOnly: true - name: app readOnly: false mountPath: /app serviceAccount: default affinity: {} initContainers: [] volumes: - hostPath: path: /etc/localtime type: '' name: host-time - name: app emptyDir: {} imagePullSecrets: - name: harbor strategy: type: RollingUpdate rollingUpdate: maxUnavailable: 25% maxSurge: 25% --- apiVersion: v1 kind: Service metadata: namespace: dev2 labels: version: v1 app: devops-trade-object app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster annotations: kubesphere.io/serviceType: statelessservice servicemesh.kubesphere.io/enabled: 'false' name: devops-trade-object spec: sessionAffinity: None selector: app: devops-trade-object app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster template: metadata: labels: version: v1 app: devops-trade-object app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster ports: - name: tcp-10007 protocol: TCP port: 10007 targetPort: 10007 --- apiVersion: apps/v1 kind: Deployment metadata: namespace: dev2 labels: version: v1 app: devops-trade-pay app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster name: devops-trade-pay-v1 annotations: servicemesh.kubesphere.io/enabled: 'false' spec: replicas: 1 selector: matchLabels: version: v1 app: devops-trade-pay app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster template: metadata: labels: version: v1 app: devops-trade-pay app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster annotations: logging.kubesphere.io/logsidecar-config: '{}' sidecar.istio.io/inject: 'false' spec: containers: - name: container-7xq5cc imagePullPolicy: Always pullSecret: harbor image: '192.168.x.x:8080/trade-dev2/devops-trade-pay' ports: - name: tcp-10008 protocol: TCP containerPort: 10008 servicePort: 10008 - name: tcp-8201 protocol: TCP containerPort: 8201 servicePort: 8201 volumeMounts: - name: host-time mountPath: /etc/localtime readOnly: true - name: app readOnly: false mountPath: /app serviceAccount: default affinity: {} initContainers: [] volumes: - hostPath: path: /etc/localtime type: '' name: host-time - name: app emptyDir: {} imagePullSecrets: - name: harbor strategy: type: RollingUpdate rollingUpdate: maxUnavailable: 25% maxSurge: 25% --- apiVersion: v1 kind: Service metadata: namespace: dev2 labels: version: v1 app: devops-trade-pay app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster annotations: kubesphere.io/serviceType: statelessservice servicemesh.kubesphere.io/enabled: 'false' name: devops-trade-pay spec: sessionAffinity: None selector: app: devops-trade-pay app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster template: metadata: labels: version: v1 app: devops-trade-pay app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster ports: - name: tcp-10008 protocol: TCP port: 10008 targetPort: 10008 - name: tcp-8201 protocol: TCP port: 8201 targetPort: 8201 --- apiVersion: apps/v1 kind: Deployment metadata: namespace: dev2 labels: version: v1 app: devops-trade-process app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster name: devops-trade-process-v1 annotations: servicemesh.kubesphere.io/enabled: 'false' spec: replicas: 1 selector: matchLabels: version: v1 app: devops-trade-process app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster template: metadata: labels: version: v1 app: devops-trade-process app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster annotations: logging.kubesphere.io/logsidecar-config: '{}' sidecar.istio.io/inject: 'false' spec: containers: - name: container-7e9lc8 imagePullPolicy: Always pullSecret: harbor image: '192.168.x.x:8080/trade-dev2/devops-trade-process' ports: - name: tcp-10009 protocol: TCP containerPort: 10009 servicePort: 10009 volumeMounts: - name: host-time mountPath: /etc/localtime readOnly: true - name: app readOnly: false mountPath: /app serviceAccount: default affinity: {} initContainers: [] volumes: - hostPath: path: /etc/localtime type: '' name: host-time - name: app emptyDir: {} imagePullSecrets: - name: harbor strategy: type: RollingUpdate rollingUpdate: maxUnavailable: 25% maxSurge: 25% --- apiVersion: v1 kind: Service metadata: namespace: dev2 labels: version: v1 app: devops-trade-process app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster annotations: kubesphere.io/serviceType: statelessservice servicemesh.kubesphere.io/enabled: 'false' name: devops-trade-process spec: sessionAffinity: None selector: app: devops-trade-process app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster template: metadata: labels: version: v1 app: devops-trade-process app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster ports: - name: tcp-10009 protocol: TCP port: 10009 targetPort: 10009 --- apiVersion: apps/v1 kind: Deployment metadata: namespace: dev2 labels: version: v1 app: devops-websocket app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster name: devops-websocket-v1 annotations: servicemesh.kubesphere.io/enabled: 'false' spec: replicas: 1 selector: matchLabels: version: v1 app: devops-websocket app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster template: metadata: labels: version: v1 app: devops-websocket app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster annotations: logging.kubesphere.io/logsidecar-config: '{}' sidecar.istio.io/inject: 'false' spec: containers: - name: container-1vn5nf imagePullPolicy: Always pullSecret: harbor image: '192.168.x.x:8080/trade-dev2/devops-websocket' ports: - name: tcp-10004 protocol: TCP containerPort: 10004 servicePort: 10004 volumeMounts: - name: host-time mountPath: /etc/localtime readOnly: true - name: app readOnly: false mountPath: /app serviceAccount: default affinity: {} initContainers: [] volumes: - hostPath: path: /etc/localtime type: '' name: host-time - name: app emptyDir: {} imagePullSecrets: - name: harbor strategy: type: RollingUpdate rollingUpdate: maxUnavailable: 25% maxSurge: 25% --- apiVersion: v1 kind: Service metadata: namespace: dev2 labels: version: v1 app: devops-websocket app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster annotations: kubesphere.io/serviceType: statelessservice servicemesh.kubesphere.io/enabled: 'false' name: devops-websocket spec: sessionAffinity: None selector: app: devops-websocket app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster template: metadata: labels: version: v1 app: devops-websocket app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster ports: - name: tcp-10004 protocol: TCP port: 10004 targetPort: 10004 --- apiVersion: apps/v1 kind: Deployment metadata: namespace: dev2 labels: version: v1 app: devops-workflow-core app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster name: devops-workflow-core-v1 annotations: servicemesh.kubesphere.io/enabled: 'false' spec: replicas: 1 selector: matchLabels: version: v1 app: devops-workflow-core app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster template: metadata: labels: version: v1 app: devops-workflow-core app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster annotations: logging.kubesphere.io/logsidecar-config: '{}' sidecar.istio.io/inject: 'false' spec: containers: - name: container-u985hw imagePullPolicy: Always pullSecret: harbor image: '192.168.x.x:8080/trade-dev2/devops-workflow-core' ports: - name: tcp-10010 protocol: TCP containerPort: 10010 servicePort: 10010 volumeMounts: - name: host-time mountPath: /etc/localtime readOnly: true - name: app readOnly: false mountPath: /app serviceAccount: default affinity: {} initContainers: [] volumes: - hostPath: path: /etc/localtime type: '' name: host-time - name: app emptyDir: {} imagePullSecrets: - name: harbor strategy: type: RollingUpdate rollingUpdate: maxUnavailable: 25% maxSurge: 25% --- apiVersion: v1 kind: Service metadata: namespace: dev2 labels: version: v1 app: devops-workflow-core app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster annotations: kubesphere.io/serviceType: statelessservice servicemesh.kubesphere.io/enabled: 'false' name: devops-workflow-core spec: sessionAffinity: None selector: app: devops-workflow-core app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster template: metadata: labels: version: v1 app: devops-workflow-core app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster ports: - name: tcp-10010 protocol: TCP port: 10010 targetPort: 10010 --- apiVersion: apps/v1 kind: Deployment metadata: namespace: dev2 labels: version: v1 app: devops-validator app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster name: devops-validator-v1 annotations: servicemesh.kubesphere.io/enabled: 'false' spec: replicas: 1 selector: matchLabels: version: v1 app: devops-validator app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster template: metadata: labels: version: v1 app: devops-validator app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster annotations: logging.kubesphere.io/logsidecar-config: '{}' sidecar.istio.io/inject: 'false' spec: containers: - name: container-u985hw imagePullPolicy: Always pullSecret: harbor image: '192.168.x.x:8080/trade-dev2/devops-validator' ports: - name: tcp-10014 protocol: TCP containerPort: 10014 servicePort: 10014 volumeMounts: - name: host-time mountPath: /etc/localtime readOnly: true - name: app readOnly: false mountPath: /app serviceAccount: default affinity: {} initContainers: [] volumes: - hostPath: path: /etc/localtime type: '' name: host-time - name: app emptyDir: {} imagePullSecrets: - name: harbor strategy: type: RollingUpdate rollingUpdate: maxUnavailable: 25% maxSurge: 25% --- apiVersion: v1 kind: Service metadata: namespace: dev2 labels: version: v1 app: devops-validator app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster annotations: kubesphere.io/serviceType: statelessservice servicemesh.kubesphere.io/enabled: 'false' name: devops-validator spec: sessionAffinity: None selector: app: devops-validator app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster template: metadata: labels: version: v1 app: devops-validator app.kubernetes.io/version: v1 app.kubernetes.io/name: devops-cloud-cluster ports: - name: tcp-10014 protocol: TCP port: 10014 targetPort: 10014\"]},\"1714\":{\"h\":\"五、安装Harbor\",\"t\":[\"私有镜像仓库\",\"安装前先安装好docker、docker-compase\",\"mac和windows客户端下安装完docker之后,docker-compose是带着的\",\"linux系统下,需要先安装docker,然后再安装docker-compose\",\"Docker-compose安装\",\"curl -L \\\"https://github.com/docker/compose/releases/download/1.28.3/docker-compose-$(uname -s)-$(uname -m)\\\" -o /usr/local/bin/docker-compose chmod +x /usr/local/bin/docker-compose\",\"或者\",\"# 下载docker compose sudo curl -L \\\"https://github.com/docker/compose/releases/download/1.25.0/docker-compose-$(uname -s)-$(uname -m)\\\" -o /usr/local/bin/docker-compose # 添加可执行权限 sudo chmod +x /usr/local/bin/docker-compose # 将文件copy到 /usr/bin/目录下 sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose # 查看版本 docker-compose --version\"]},\"1715\":{\"h\":\"1、下载安装包拷贝到linux中\",\"t\":[\"离线安装\",\"离线安装包下载\",\"https://github.com/goharbor/harbor/releases\",\"cd /data/ # 切换至/data/目录下 mkdir harbor # 创建目录harbor # 将下载好的harbor-offline-installer-v1.10.1.tgz解压 tar -xcvf harbor-offline-installer-v1.10.1.tgz #解压\",\"在线安装\",\"在线安装包下载\",\"https://mirror.rancher.cn/#harbor/\",\"cd /data/ # 切换至/data/目录下 mkdir harbor # 创建目录harbor # 将下载好的harbor-online-installer-v1.10.10.tgz解压 tar -zxvf harbor-online-installer-v1.10.10.tgz #解压\"]},\"1716\":{\"h\":\"2、修改配置文件\",\"t\":[\"vim harbor.yml\",\"图片\"]},\"1717\":{\"h\":\"3、执行安装脚本\",\"t\":[\"./install.sh # 安装\",\"图片\"]},\"1718\":{\"h\":\"4、查看镜像\",\"t\":[\"因为harbor本身自带docker 私有仓库，可以通过docker ps查看\",\"图片\"]},\"1719\":{\"h\":\"5、访问harbor\",\"t\":[\"ip+端口\",\"image-20220426140408316\",\"#启动harbor docker-compose start #停止harbor docker-compose stop\"]},\"1720\":{\"h\":\"Linux安装JDK\"},\"1721\":{\"h\":\"1，切换权限为root\",\"t\":[\"su root\"]},\"1722\":{\"h\":\"2，查看版本\",\"t\":[\"java -version\",\"http://img.lindaifeng.vip/typora-picgo-tuchaung/20221113220313.png\"]},\"1723\":{\"h\":\"3，查看CentOS中自带的JDK\",\"t\":[\"rpm -qa | grep java\",\"http://img.lindaifeng.vip/typora-picgo-tuchaung/20221113220327.png\"]},\"1724\":{\"h\":\"4，删除红色划线部分\",\"t\":[\"rpm -e --nodeps java-1.7.0-openjdk-1.7.0.191-2.6.15.5.el7.x86_64 rpm -e --nodeps java-1.7.0-openjdk-headless-1.7.0.191-2.6.15.5.el7.x86_64 rpm -e --nodeps java-1.8.0-openjdk-headless-1.8.0.181-7.b13.el7.x86_64 rpm -e --nodeps java-1.8.0-openjdk-1.8.0.181-7.b13.el7.x86_64\"]},\"1725\":{\"h\":\"5，检查是否删除成功\",\"t\":[\"java -version 再次查看Java版本，没有任何信息就表示删除成功了\"]},\"1726\":{\"h\":\"6，下载JDK\"},\"1727\":{\"h\":\"7，把JDK上传至CentOS中。\",\"t\":[\"alt + p 输出上传路径\"]},\"1728\":{\"h\":\"8，在根的usr文件夹里面新建一个java文件夹\",\"t\":[\"mkdir /usr/java\"]},\"1729\":{\"h\":\"9，把压缩包拷贝到/usr/java文件夹当中\",\"t\":[\"cp jdk-8u261-linux-x64.tar.gz /usr/java\"]},\"1730\":{\"h\":\"10，进入到/usr/java 去解压。\",\"t\":[\"cd /usr/java\",\"解压：tar -zxvf 压缩包\"]},\"1731\":{\"h\":\"11，配置环境变量\",\"t\":[\"vim /etc/profile #到行首 gg #到行尾 shift+g\",\"#java environment export JAVA_HOME=/usr/java/jdk1.8.0_261 export CLASSPATH=.:${JAVA_HOME}/jre/lib/rt.jar:${JAVA_HOME}/lib/dt.jar:${JAVA_HOME}/lib/tools.jar export PATH=$PATH:${JAVA_HOME}/bin\"]},\"1732\":{\"h\":\"12，让当前环境变量生效\",\"t\":[\"source /etc/profile\"]},\"1733\":{\"h\":\"MongoDB的安装配置与开启审计日志\",\"t\":[\"欢迎来到知道的越多，不知道的越多系列！\"]},\"1734\":{\"h\":\"1、Mongo的安装教程（Linux）\",\"t\":[\"1、下载安装包\",\"https://www.mongodb.com/download-center/community 2、上传安装包3、解压，移动\",\"tar -zxvf mongodb-linux-x86_64-4.0.6.tgz mv ./mongodb-linux-x86_64-4.0.6 /usr/local/mongodb\",\"4、进去mongodb文件夹\",\"cd /usr/local/mongodb/\",\"5、创建db的目录和日志文件夹\",\"mkdir -p ./data/db mkdir -p ./logs touch ./logs/mongodb.log\",\"6、创建mongo配置文件\",\"​ 6.1、conf配置文件形式：\",\"vim mongodb.conf #端口号 port=27017 #数据目录 dbpath=/usr/local/mongodb/data/db #日志目录 logpath=/usr/local/mongodb/logs/mongodb.log #后台启动 fork=true #追加日志输出 logappend=true #允许远程IP连接（所有） bind_ip=0.0.0.0\",\"​ 6.2、yml配置文件形式：\",\"processManagement: fork: true net: bindIp: 127.0.0.1 port: 27017 storage: dbPath: 数据存放路径/data/db systemLog: destination: file path: log/mongo27017.log logAppend: true storage: journal: enabled: true\",\"processManagement: fork: true net: bindIp: 0.0.0.0 port: 27017 storage: dbPath: /usr/local/mongodb/data/db systemLog: destination: file path: /usr/local/mongodb/logs/mongodb.log logAppend: true storage: journal: enabled: true # 改动 security: # 开启认证 authorization: enabled # 认证文件的路径 keyFile: \\\"/usr/local/mongodb/mongodb-keyfile\\\" clusterAuthMode: keyFile # 改动 replication: oplogSizeMB: 10240 # 副本集名称 replSetName: replSet\",\"7、配置文件启动\",\"​ 7.1、conf配置文件启动：\",\"./bin/mongod --config mongodb.conf\",\"​ 7.2、yml配置文件形式启动：\",\"./bin/mongod --config mongodb.yml\",\"8、连接到mongo\",\"./bin/mongo\"]},\"1735\":{\"h\":\"\",\"t\":[\"1、配置文件启动时报错\",\"error while loading shared libraries: libcrypto.so.10: cannot open shared object file: No such file or directory 原因：没有装libcrypto.so.10库 解决方案：安装yum -y install compat-openssl10\",\"2、配置文件启动时报错\",\"error while loading shared libraries: libnetsnmpmibs.so.35: cannot open shared object file: No such file or directory 原因：没有装net-snmp 解决方案：安装yum install net-snmp\"]},\"1736\":{\"h\":\"3、创建mongo账户\",\"t\":[\"1、Read：允许用户读取指定数据库 2、readWrite：允许用户读写指定数据库 3、dbAdmin：允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile 4、userAdmin：允许用户向system.users集合写入，可以找指定数据库里创建、删除和管理用户 5、clusterAdmin：只在admin数据库中可用，赋予用户所有分片和复制集相关函数的管理权限。 6、readAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读权限 7、readWriteAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读写权限 8、userAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的userAdmin权限 9、dbAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的dbAdmin权限。 10、root：只在admin数据库中可用。超级账号，超级权限\",\"创建管理员账户\",\"切换到admin数据库\",\"use admin\",\"添加账户(root：最高权限任意操作，userAdminAnyDatabase:管理用户权限)\",\"db.createUser({ user: \\\"root\\\", pwd: \\\"Zz@123456\\\", roles: [{ role: \\\"root\\\", db: \\\"admin\\\" }] })\",\"修改mongo.conf文件, 增加配置\",\"auth=true 或者yml格式的加入这个配置 security: authorization: enabled\",\"重启MongoDB服务\",\"#停掉服务 ps -ef|grep mongo kill -9 PID #根据配置文件启动服务 ./bin/mongod --config mongodb.conf\",\"连接mongo\",\"./mongo\",\"认证：（未认证查看或操作）\",\"use admin db.auth(\\\"root\\\",\\\"Zz@123456\\\") #返回1，认证成功\"]},\"1737\":{\"h\":\"2）创建普通用户\",\"t\":[\"管理员账户认证\",\"use admin db.auth(\\\"root\\\",\\\"Zz@123456\\\")\",\"切换到指定库\",\"use 指定库名\",\"创建普通账户，给定权限\",\"db.createUser({ user: \\\"user\\\", pwd: \\\"123456\\\", roles: [{ role: \\\"readWrite\\\", db: \\\"test数据库名称\\\" }] })\",\"注意：创建成功，无需重启\",\"更新角色权限(root最高权限)\",\"db.updateUser(\\\"root\\\",{roles : [{\\\"role\\\" : \\\"root\\\",\\\"db\\\" : \\\"admin\\\"}]})\"]},\"1738\":{\"h\":\"4、开启mongo审计功能\",\"t\":[\"https://blog.csdn.net/zhaoyuqiang/article/details/105361948\",\"1、概述\",\"在数据库安全的生命周期中，包括：保护、检测、响应及补救。检测的核心就是审计（Audit）。\",\"审计功能可以用来记录用户对数据库的所有相关操作。这些记录可以让系统管理员在需要的时候分析数据库在什么时段发生了什么事情。\",\"mongodb分为社区版和企业版，只有企业版MongoDB Enterprise才有审计功能。\",\"mongodb的企业版下载链接：\",\"https://www.mongodb.com/try/download/enterprise 安装mongodb的rpm包时会提示缺少依赖包，可通过yum的方式安装所需的依赖包\",\"yum install net-snmp cyrus-sasl cyrus-sasl-plain cyrus-sasl-gssapi\",\"注意：配置文件采用yml格式\",\"auditLog: destination: 审计展示类型（console窗口展示、syslog系统日志保存、file文件保存。） format: 在JSON文件或者BSON文件中 path: 保存路径 filter: 日志过滤条件 setParameter: { auditAuthorizationSuccess: true } # 审计日志设置（此过滤能满足绝大部分的日志记录，减少记录无效日志） auditLog: destination: file format: JSON path: /usr/local/mongodb/data/auditLog/audit.json filter: '{ atype:{ $in: [\\\"authCheck\\\",\\\"createCollection\\\",\\\"createDatabase\\\"] },\\\"param.ns\\\":{$nin:[ \\\"admin.system.version\\\"]},\\\"param.command\\\":{$nin:[ \\\"isMaster\\\",\\\"ismaster\\\",\\\"saslStart\\\",\\\"saslContinue\\\",\\\"listCollections\\\",\\\"listDatabases\\\",\\\"listIndexes\\\",\\\"collStats\\\",\\\"find\\\",\\\"getlasterror\\\",\\\"buildinfo\\\",\\\"getLastError\\\",\\\"aggregate\\\"] } }' setParameter: { auditAuthorizationSuccess: true }\",\"注意：日志则保存在audit.json中，可通过tail -f audit.json实时在线查看日志打印情况。\"]},\"1739\":{\"h\":\"5、日志详情介绍\",\"t\":[\"任何一种数据库都有各种各样的日志，MongoDB也不例外。MongoDB中有4种日志，分别是系统日志、Journal日志、oplog主从日志、慢查询日志等。这些日志记录着MongoDB数据库不同方面的踪迹。下面分别介绍这几种日志。\",\"1、系统日志\",\"系统日志在MongoDB数据库中很重要，它记录着MongoDB启动和停止的操作，以及服务器在运行过程中发生的任何异常信息。 配置系统日志的方法比较简单，在启动mongod时指定logpath参数即可\",\"mongod -logpath=/data/log/mongodb/serverlog.log -logappend\",\"系统日志会向logpath指定的文件持续追加。\",\"2、Journal日志（一般配置文件中开启）\",\"journaling(日记) 日志功能则是 MongoDB 里面非常重要的一个功能 ， 它保证了数据库服务器在意外断电 、 自然灾害等情况下数据的完整性。它通过预写式的redo日志为MongoDB增加了额外的可靠性保障。开启该功能时,MongoDB会在进行写入时建立一条Journal日志,其中包含了此次写入操作具体更改的磁盘地址和字节。因此一旦服务器突然停机，可在启动时对日志进行重放，从而重新执行那些停机前没能够刷新到磁盘的写入操作\",\"3、oplog主从日志\",\"Replica Sets复制集用于在多台服务器之间备份数据。MongoDB的复制功能是使用操作日志oplog实现的，操作日志包含了主节点的每一次写操作。\",\"一个mongod实例中的所有数据库都使用同一个oplog，也就是所有数据库的操作日志(插入，删除，修改)都会记录到oplog中\",\"4、慢查询日志\",\"MongoDB中使用系统分析器(system profiler)来查找耗时过长的操作。系统分析器记录固定集合system.profile中的操作，并提供大量有关耗时过长的操作信息，但相应的mongod的整体性能也会有所下降。因此我们一般定期打开分析器来获取信息。\",\"默认情况下，系统分析器处于关闭状态，不会进行任何记录。可以在shell中运行db.setProfilingLevel()开启分析器\",\"db.setProfilingLevel(``level``,<slowms>) 0=``off` `1=slow 2=``all\",\"第一个参数是指定级别，不同的级别代表不同的意义，0表示关闭，1表示默认记录耗时大于100毫秒的操作，2表示记录所有操作。第二个参数则是自定义“耗时过长\\\"标准，比如记录所有耗时操作500ms的操作\",\"db.setProfilingLevel(1,500);\",\"如果开启了分析器而system.profile集合并不存在，MongoDB会为其建立一个大小为若干MB的固定集合(capped collection)。如希望分析器运行更长时间，可能需要更大的空间记录更多的操作。此时可以关闭分析器，删除并重新建立一个新的名为system.profile的固定集合，并令其容量符合要求。然后在数据库上重新启用分析器。\",\"可以通过db.system.profile.stats()查看集合的最大容量.\",\"总结\",\"以上就是这篇文章的全部内容了，希望本文的内容对大家的学习或者工作具有一定的参考学习价值。\"]},\"1740\":{\"h\":\"Linux 安装docker\"},\"1741\":{\"h\":\"一、安装前须知\",\"t\":[\"（可选）卸载之前的docker\",\"方法一： 查询docker状态 systemctl status docker 停止docker状态 systemctl stop docker 卸载docker sudo yum remove docker \\\\ docker-client \\\\ docker-client-latest \\\\ docker-common \\\\ docker-latest \\\\ docker-latest-logrotate \\\\ docker-logrotate \\\\ docker-engine 方法二： 查询docker状态 systemctl status docker 查询docker安装过的包 yum list installed | grep docker 删除安装包 yum remove docker-ce.x86_64 ddocker-ce-cli.x86_64 -y 删除镜像/容器等 rm -rf /var/lib/docker\"]},\"1742\":{\"h\":\"二、在线安装Docker\"},\"1743\":{\"h\":\"配置相关yum源\",\"t\":[\"sudo yum install -y yum-utils sudo yum-config-manager \\\\ --add-repo \\\\ http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\"]},\"1744\":{\"h\":\"安装docker\",\"t\":[\"#以下是在安装k8s的时候使用 yum install -y docker-ce-20.10.7 docker-ce-cli-20.10.7 containerd.io-1.4.6 或 #安装最新版docker sudo yum install -y docker-ce docker-ce-cli containerd.io\"]},\"1745\":{\"h\":\"启动docker\",\"t\":[\"systemctl enable docker --now\"]},\"1746\":{\"h\":\"配置加速\",\"t\":[\"#这里额外添加了docker的生产环境核心配置cgroup sudo mkdir -p /etc/docker sudo tee /etc/docker/daemon.json <<-'EOF' { \\\"registry-mirrors\\\": [\\\"https://82m9ar63.mirror.aliyuncs.com\\\"], \\\"exec-opts\\\": [\\\"native.cgroupdriver=systemd\\\"], \\\"log-driver\\\": \\\"json-file\\\", \\\"log-opts\\\": { \\\"max-size\\\": \\\"100m\\\" }, \\\"storage-driver\\\": \\\"overlay2\\\" } EOF sudo systemctl daemon-reload sudo systemctl restart docker\"]},\"1747\":{\"h\":\"在线安装docker-compose\",\"t\":[\"-- 这个命令会下载最新版本的 Docker Compose 并保存到 /usr/local/bin/docker-compose。 curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose\",\"赋予执行权限：\",\"chmod +x /usr/local/bin/docker-compose\",\"安装完成后，可以运行以下命令来验证 Docker Compose 是否成功安装：\",\"docker-compose --version\"]},\"1748\":{\"h\":\"三、离线安装Docker\"},\"1749\":{\"h\":\"下载安装包\",\"t\":[\"Docker版本必须大于19.03.8+\",\"Docker下载地址：https://download.docker.com/linux/static/stable/x86_64/\",\"选择合适的docker版本\"]},\"1750\":{\"h\":\"解压缩\",\"t\":[\" tar -zxvf docker-19.03.9.tgz\"]},\"1751\":{\"h\":\"移动文件\",\"t\":[\"解压的docker文件夹全部移动至/usr/bin目录\",\"cp docker/* /usr/bin/\"]},\"1752\":{\"h\":\"将Docker注册为系统服务\",\"t\":[\"vi /etc/systemd/system/docker.service\",\"[Unit] Description=Docker Application Container Engine Documentation=https://docs.docker.com After=network-online.target firewalld.service Wants=network-online.target [Service] Type=notify ExecStart=/usr/bin/dockerd ExecReload=/bin/kill -s HUP $MAINPID LimitNOFILE=infinity LimitNPROC=infinity LimitCORE=infinity TimeoutStartSec=0 Delegate=yes KillMode=process Restart=on-failure StartLimitBurst=3 StartLimitInterval=60s [Install] WantedBy=multi-user.target\",\"#依次执行以下脚本 chmod +x /etc/systemd/system/docker.service #刷新配置&&启动服务&&开启自启 systemctl daemon-reload && systemctl start docker && systemctl enable docker.service #查看版本 docker -v\"]},\"1753\":{\"h\":\"配置dcker仓库路径\",\"t\":[\"vi /etc/docker/daemon.json填入以下内容：（私仓IP改成自己的，也可事先预留装好harbor后再修改）\",\"#镜像加速（可不配）：registry-mirrors #仓库地址：insecure-registries #额外参数：exec-opts { \\\"registry-mirrors\\\": [ \\\"https://sq9p56f6.mirror.aliyuncs.com\\\" ], \\\"insecure-registries\\\": [\\\"私服ip:8088\\\"], \\\"exec-opts\\\":[\\\"native.cgroupdriver=systemd\\\"] } #刷新配置&&启动服务&&开启自启 systemctl daemon-reload && systemctl restart docker\"]},\"1754\":{\"h\":\"四、离线安装Docker-compose\"},\"1755\":{\"h\":\"下载安装包\",\"t\":[\"所有版本下载路径： https://github.com/docker/compose/releases\",\"Docker-Compose下载路径：https://github.com/docker/compose/releases/download/1.24.1/docker-compose-Linux-x86_64\",\"选择合适的docker版本\"]},\"1756\":{\"h\":\"配置\",\"t\":[\"mv docker-compose-Linux-x86_64 /usr/local/bin/docker-compose chmod +x /usr/local/bin/docker-compose ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose\"]},\"1757\":{\"h\":\"验证\",\"t\":[\"docker-compose version\"]},\"1758\":{\"h\":\"Linux安装mongo主从模式\"},\"1759\":{\"h\":\"一、知识沉淀：\",\"t\":[\"Mongodb的replication主要有两种：主从和副本集（replica set）。现在mongodb官方建议用副本集替代主从复制。\",\"什么是oplog：\",\"MongoDB 的Replication是通过一个日志来存储写操作的，这个日志就叫做oplog。 在默认情况下,oplog分配的是5%的空闲磁盘空间。通常而言,这是一种合理的设置。可以通过mongod --oplogSize来改变oplog的日志大小。\"]},\"1760\":{\"h\":\"主从复制：\",\"t\":[\"主从的原理和mysql类似，主节点记录在其上的所有操作oplog，从节点定期轮询主节点获取这些操作，然后对自己的数据副本执行这些操作，从而保证从节点的数据与主节点一致。 主服务器数据库的每次操作都会记录在其二进制文件mysql-bin.xxx（该文件可以在mysql目录下的data目录中看到）中，从服务器的I/O线程使用专用账号登录到主服务器中读取该二进制文件，并将文件内容写入到自己本地的中继日志relay-log文件中，然后从服务器的SQL线程会根据中继日志中的内容执行SQL语句\",\"img\",\"MySQL主从同步的作用\",\"1、可以作为备份机制，相当于热备份 2、可以用来做读写分离，均衡数据库负载\"]},\"1761\":{\"h\":\"\",\"t\":[\"MongoDB复制结构图\"]},\"1762\":{\"h\":\"二、实战操作：\"},\"1763\":{\"h\":\"1、Mongo主从模式\",\"t\":[\"主从模式是MongoDB最早的部署架构。从节点备份数据，在主节点挂了后，可以让从节点接替主节点；也可以做到读写分离，减轻主库压力。\",\"主节点：\",\"mongod --dbpath=E:\\\\mongodb\\\\3.2.9\\\\mongodb\\\\db --logpath=E:\\\\mongodb\\\\3.2.9\\\\mongodb\\\\log\\\\log.txt --logappend --port=27017 --master\",\"从节点\",\"mongod --dbpath=E:\\\\mongodb\\\\3.2.9\\\\slaveA\\\\db --logpath=E:\\\\mongodb\\\\3.2.9\\\\slaveA\\\\log\\\\log_slaveA.txt --logappend --port=27018 --slave --source=127.0.0.1:27017 或者，再主节点启动后，手动添加从节点 use local; -- local库的sources集合 db.sources.insert({\\\"host\\\":\\\"127.0.0.1:27017\\\"}); -- 在子节点，指定主节点\",\"但是，主从有它很大的局限性，比如:主节点挂了不能自动切换连接，需要手动切换，这时候怎么办呢？\"]},\"1764\":{\"h\":\"2、Mongo副本集\",\"t\":[\"复制集：由多个数据节点和选举节点组成，相连的数据节点只有一个是主节点，主节点负责接收写的操作，从节点是通过复制主节点来实现数据的同步。简单来说就是：从节点是通过数据的冗余来提高数据的可靠性。\",\"从节点通过主节点的oplog文件，异步复制主节点的数据。\",\"复制集基本角色：\",\"1、标准节点：参与主节点primary的选举，自身宕机让出primary，复制读写操作。\",\"2、从节点：从节点second不参与选举，只能被设置为被动节点。\",\"3、仲裁节点：只参与投票，不负责存放数据。确保标准节点投票数不相同。\",\"mongo无认证的情况：\",\"配置文件如下【配置路径时需要确保 路径存在】\",\"logpath=/var/lib/mongo/mongodb.log logappend=true dbpath=/var/lib/mongo/ port = 27017 journal=true quiet=true fork=true bind_ip=0.0.0.0\",\"# 集群配置\",\"replSet=replSet\",\"确保两边的防火墙关闭成功\",\"复制集配置\",\"将配置文件都修修改完之后\",\"其中 replSet 是副本集名称，和conf文件中要保持一致\",\"在mongod 控制台内输入\",\"rs.conf();\",\"提示找不到相关配置\",\"##第一步：设置副本集内容\",\"config = { _id: 'replSet', members: [ {_id: 0, host: '192.168.179.3:27017',priority:1}, {_id: 1, host: '192.168.179.4:27017',priority:2}, {_id: 2, host: '192.168.179.5:27017',priority:3} ] }\",\"##第一步：初始化副本集\",\"rs.initiate(config)\",\"##第三步：查看副本集状态，找到private节点的IP\",\"rs.status()\",\"各个节点需要执行\",\"rs.secondaryOk()\",\"主节点启动监听\",\"db.enableFreeMonitoring()\",\"mongo有认证的情况\",\"1、yml配置文件启动 processManagement: fork: true net: bindIp: 0.0.0.0 port: 27017 storage: dbPath: /usr/local/mongodb/data/db systemLog: destination: file path: /usr/local/mongodb/logs/mongodb.log logAppend: true storage: journal: enabled: true # 改动 security: # 开启认证 authorization: enabled # 认证文件的路径 keyFile: \\\"/usr/local/mongodb/mongodb-keyfile\\\" clusterAuthMode: keyFile # 改动 replication: oplogSizeMB: 10240 # 副本集名称 replSetName: replSet\",\"配置文件启动：\",\"./bin/mongod --config mongodb.yml\",\"生成 keyFile(认证文件)及配置-上传到到每个服务器上\",\"openssl rand -base64 756> /root/keyfile\",\"修改读写权限为 600 mongodb-keyfile\",\"chmod 600 /mongo/mongodb-keyfile\",\"进入mongo输入：\",\"rs.conf(); 查看配置信息，无任何配置信息 2021-09-11T17:32:30.840+0800 E QUERY [thread1] Error: Could not retrieve replica set config: { \\\"info\\\" : \\\"run rs.initiate(...) if not yet done for the set\\\", \\\"ok\\\" : 0, \\\"errmsg\\\" : \\\"no replset config has been received\\\", \\\"code\\\" : 94, \\\"codeName\\\" : \\\"NotYetInitialized\\\" } :\",\"第一步：设置副本集内容\",\"config = { _id: 'replSet', members: [ {_id: 0, host: '主机ip:端口',priority:1}, //权重 {_id: 1, host: '主机ip:27017',priority:2}, //权重（salve） {_id: 2, host: '主机ip:27017',priority:3} //权重高（master） ] } config = { _id: 'replSet', members: [ {_id: 0, host: '192.168.179.3:27017',priority:1}, {_id: 1, host: '192.168.179.4:27017',priority:2}, {_id: 2, host: '192.168.179.5:27017',priority:3} ] }\",\"##第一步：初始化副本集\",\"rs.initiate(config) 返回{ \\\"ok\\\" : 1 }成功 返回错误信息 { \\\"operationTime\\\" : Timestamp(1631352818, 2), \\\"ok\\\" : 0, \\\"errmsg\\\" : \\\"there are no users authenticated\\\", \\\"code\\\" : 13, \\\"codeName\\\" : \\\"Unauthorized\\\", \\\"$clusterTime\\\" : { \\\"clusterTime\\\" : Timestamp(1631352818, 2), \\\"signature\\\" : { \\\"hash\\\" : BinData(0,\\\"7qIwiTKM1e6QGQ5FpA23DSjUYTA=\\\"), \\\"keyId\\\" : NumberLong(\\\"7006606872698421250\\\") } } } 则需要认证 use admin; db.auth('root','123456'); 返回1认证成功 在执行配置命令 rs.initiate(config)\",\"##第三步：查看副本集状态，找到private节点的IP\",\"rs.status()\",\"image-20210911174818855\",\"这样配相当于主从，权重高的为主节点，权重低的为从节点。\",\"//查看副本集主节点 db.isMaster(); //查看节点状态 rs.status() //添加一个服务器为仲裁节点 rs.addArb(ip:端口); //移除所有节点 db.shutdownServer() //移除单个节点 rs.remove('192.168.56.105:27017')\",\"主节点能操作，从节点同步数据，但从节点不能操作。\",\"至此，mongo的集群搭建完毕。\"]},\"1765\":{\"h\":\"Linux安装mysql\",\"t\":[\"如果系统之前⾃带 Mariadb ，可以先卸载之。\",\"⾸先查询已安装的 Mariadb 安装包：\",\"rpm -qa|grep mariadb\",\"将其均卸载之：\",\"yum -y remove mariadb-server-5.5.56-2.el7.x86_64\",\"yum -y remove mariadb-5.5.56-2.el7.x86_64\",\"yum -y remove mariadb-devel-5.5.56-2.el7.x86_64\",\"yum -y remove mariadb-libs-5.5.56-2.el7.x86_64\"]},\"1766\":{\"h\":\"1、下载安装包\"},\"1767\":{\"h\":\"2、上传安装包\",\"t\":[\" alt + p -------> put d:/setup/mysql-5.7.27-1.el7.x86_64.rpm-bundle.tar\"]},\"1768\":{\"h\":\"3、解压 mysql 的安装包\",\"t\":[\"mkdir mysql tar -xvf mysql-5.7.27-1.el7.x86_64.rpm-bundle.tar -C mysql/\"]},\"1769\":{\"h\":\"4、安装客户端\",\"t\":[\"cd mysql/ #强制安装 rpm -ivh mysql-community-client-5.7.27-1.el7.x86_64.rpm --force --nodeps\"]},\"1770\":{\"h\":\"5、安装服务端\",\"t\":[\"rpm -ivh mysql-community-server-5.7.27-1.el7.x86_64.rpm --force --nodeps \"]},\"1771\":{\"h\":\"6、修改mysql默认字符集\",\"t\":[\"​ vi /etc/my.cnf\",\" 1、添加如下内容： [mysqld] character-set-server=utf8 collation-server=utf8_general_ci #忽略大小写可加 lower_case_table_names=1 2、在文件最下方添加 [client] default-character-set=utf8\"]},\"1772\":{\"h\":\"7、 启动mysql服务\",\"t\":[\"service mysqld start \"]},\"1773\":{\"h\":\"8、登录mysql\",\"t\":[\"初始密码查看：cat /var/log/mysqld.log | grep password mysql -u root -p 敲回车，输入密码 mysql -uroot -proot 在root@localhost: 后面的就是初始密码\"]},\"1774\":{\"h\":\"9、修改mysql登录密码\",\"t\":[\" set global validate_password_policy=0; set global validate_password_length=1; set password=password('root');\"]},\"1775\":{\"h\":\"10、授予远程连接权限\",\"t\":[\"可能是你的帐号不允许从远程登陆，只能在localhost。这个时候只要在localhost的那台电脑，登入mysql后，更改 \\\"mysql\\\" 数据库里的 \\\"user\\\" 表里的 \\\"host\\\" 项，从\\\"localhost\\\"改称\\\"%\\\"\",\"mysql -u root -p mysql>use mysql; mysql>update user set host = '%' where user = 'root'; mysql>select host, user from user;\",\" //授权 grant all privileges on *.* to 'root' @'%' identified by 'root'; //刷新 flush privileges;\"]},\"1776\":{\"h\":\"11、关闭Linux系统防火墙\",\"t\":[\"systemctl stop firewalld\"]},\"1777\":{\"h\":\"12、重启mysql服务\",\"t\":[\"service mysqld restart\"]},\"1778\":{\"h\":\"13、卸载：mysql\",\"t\":[\"1、使用yum卸载安装的mysql：yum remove mysql mysql-server mysql-libs mysql-server 2、查询剩余的安装包rpm -qa|grep mysql 3、移除掉这些安装包rpm -ev mysql-community-common-5.7.29-1.el7.x86_64 4、有包删除包 rpm -e -nodeps 包名 5、查找之前老版本mysql的目录、并且删除老版本mysql的文件和库 find / -name mysql rm -rf /var/lib/mysql 6、卸载后/etc/my.cnf不会删除，需要进行手工删除 rm -rf /etc/my.cnf 7、再次查找机器是否安装mysql rpm -qa|grep -i mysql\"]},\"1779\":{\"h\":\"Linux安装nginx\",\"t\":[\"Nginx的安装可分为两种：\",\"1、通过Nginx源码安装\",\"2、通过yum安装\",\"一、下面通过源码安装：\",\"通过源码安装需要提前安装好GCC编译器、PCRE兼容正则表达式库、zlib压缩库、OpenSSL安全通信的软件库包，然后才能进行Nginx的安装\",\"1、通过一条指令全部安装：\",\"yum install -y gcc pcre pcre-devel zlib zlib-devel openssl openssl-devel\",\"2、下载好安装包\",\"wget http://nginx.org/download/nginx-1.16.1.tar.gz\",\"3、建议大家将下载的资源进行包管理（将安装包放入core文件夹中管理）\",\"mkdir -p nginx/core mv nginx-1.16.1.tar.gz nginx/core\",\"4、解压\",\"tar -xzf nginx-1.16.1.tar.gz\",\"5、进入解压后的nginx，会看到configure\",\"./configure 如果要安装其他模块支持执行（事先安装好软件包） ./configure \\\\ --prefix=/usr/local/nginx \\\\ --with-http_ssl_module \\\\ --with-http_v2_module \\\\ --with-http_gzip_static_module \\\\ --with-http_stub_status_module \\\\ --with-http_realip_module \\\\ --with-http_sub_module \\\\ --with-http_dav_module \\\\ --with-http_flv_module \\\\ --with-http_mp4_module \\\\ --with-http_gunzip_module\",\"6、编译\",\"make\",\"7、安装\",\"make install\",\"8、查看安装的位置（默认在/usr/local/nginx）\",\"whereis nginx\",\"9、进入安装的ngin文件夹中可查看到conf、html、sbin等文件夹\",\"conf 配置文件\",\"html 静态资源文件\",\"sbin 可执行程序文件\",\"10、进入sbin文件夹,查看版本信息\",\"./nginx -V\",\"image-20210523175503891\",\"11、可通过tree指令查看nignx的目录结构\",\"yum install -y tree //安装tree指令 tree /usr/local/nginx //执行tree指令 + 安装软件的路径\",\"image-20210523180911420\"]},\"1780\":{\"h\":\"Linux安装redis\",\"t\":[\"以下是所需软件和服务器版本： Redis版本 5.0.4 服务器版本 Linux CentOS 7.6 64位\",\"1、查看redis是否在运行： ps aux | grep redis\",\"2、启动redis： redis-server redis-conf\",\"3、重启redis：systemctl restart redis.service\",\"4、关闭redis： redis-cli shutdown\",\"5、当设置密码后，上面的关闭命令无效：带密码输入： redis-cli -a [password] 回车后输入：shutdown\",\"即可关闭redis，输入exit 退出。\",\"6、查看redis密码；可查看 redis 安装根目录下的配置文件：redis-conf 中SECURITY下面的 requirepass 后面的内容\"]},\"1781\":{\"h\":\"一、下载redis软件\",\"t\":[\"先进入官网找到下载地址下载redis安装包： https://redis.io/download 通过xshell软件连接到远程服务器输入rz命令把安装包上传到linux服务器 或者服务器自动下载：进入到Xshell控制台(默认当前是root根目录)，输入wget 将上面复制的下载链接粘贴上，如下命令:\",\"wget http://download.redis.io/releases/redis-5.0.7.tar.gz\",\" 等待下载完成。\"]},\"1782\":{\"h\":\"二、解压并安装Redis\",\"t\":[\"下载完成后需要将压缩文件解压，输入以下命令解压到当前目录\",\"tar -zvxf redis-5.0.7.tar.gz\",\"解压后在根目录上输入ls 列出所有目录会发现与下载redis之前多了一个redis-5.0.7.tar.gz文件和 redis-5.0.7的目录。\",\"在这里插入图片描述\"]},\"1783\":{\"h\":\"三、移动redis目录\",\"t\":[\"一般都会将redis目录放置到 /usr/local/redis目录，所以这里输入下面命令将目前在/root目录下的redis-5.0.7文件夹更改目录，同时更改文件夹名称为redis。\",\"mv /root/redis-5.0.7 /usr/local/redis\",\"cd 到/usr/local目录下输入ls命令可以查询到当前目录已经多了一个redis子目录，同时/root目录下已经没有redis-5.0.7文件夹\",\"cd /usr/local/\",\"在这里插入图片描述\"]},\"1784\":{\"h\":\"四、编译\",\"t\":[\"cd到/usr/local/redis目录，输入命令make执行编译命令，接下来控制台会输出各种编译过程中输出的内容。\",\"cd /usr/local/redis\",\"make\",\"在这里插入图片描述\"]},\"1785\":{\"h\":\"五、安装\",\"t\":[\"输入以下命令\",\"make PREFIX=/usr/local/redis install\",\"这里多了一个关键字 PREFIX= 这个关键字的作用是编译的时候用于指定程序存放的路径。比如我们现在就是指定了redis必须存放在/usr/local/redis目录。\",\"假设不添加该关键字Linux会将可执行文件存放在/usr/local/bin目录，库文件会存放在/usr/local/lib目录。配置文件会存放在/usr/local/etc目录。其他的资源文件会存放在usr/local/share目录。这里指定号目录也方便后续的卸载，后续直接rm -rf /usr/local/redis 即可删除redis。\",\"在这里插入图片描述\"]},\"1786\":{\"h\":\"六、启动redis\",\"t\":[\"根据上面的操作已经将redis安装完成了。在目录/usr/local/redis 输入下面命令启动redis\",\"./bin/redis-server& ./redis.conf\",\"Redis到这里已经启动完毕。 我们可以ctrl+c退出后，查看进程redis检查后台进程是否正在运行有两种方式：\",\"1.1 采取查看进程方式\",\"ps -ef |grep redis\",\" 1.2 采取端口监听查看方式（redis默认端口是6379）\",\"netstat -lanp | grep 6379\",\"在这里插入图片描述\",\"检查到redis服务正在运行，我们就可以启动redis客户端进入redis了 使用redis-cli客户端检测连接是否正常（注意redis-cli在redis/bin目录下，需要切换到该目录下才能启动，注意自己所处的目录）\",\"./bin/redis-cli\",\"在这里插入图片描述\",\"2、如果检查到我们redis服务没有开启我们可以设置守护进程后台运行的方式将配置文件中的daemonize设置为yes，将protected-mode设置为no。\",\"这里我要将daemonize改为yes，不然我每次启动都得在redis-server命令后面加符号&，不这样操作则只要回到Linux控制台则redis服务会自动关闭， 同时也将bind注释，将protected-mode设置为no。 这样启动后我就可以在外网访问了。\",\"修改方式（进入配置文件）\",\"vim /usr/local/redis/redis.conf\",\"在这里插入图片描述\"]},\"1787\":{\"h\":\"七、redis.conf配置文件讲解\",\"t\":[\"在目录/usr/local/redis下有一个redis.conf的配置文件。我们上面启动方式就是执行了该配置文件的配置运行的。我么可以通过cat、vim、less等Linux内置的读取命令读取该文件。 \",\"设置Redis密码： 1、打开redis.conf，\",\"查找requirepass foobared（Esc ：/requirepass foobared）,\",\"把前面的；去掉，\",\"2、将foobared改成自己的密码，\",\"例如：requirepass 1234546\",\"3、重启后，进入cli\",\"redis-cli\",\"4、进入后输入ping测试，会提示未认证\",\"ping NOAUTH Authentication required\",\"退出后\",\" ./bin/redis-cli -h 127.0.0.1 -p 6379 -a 123456\",\"认证进入\",\"ping ok！\",\"方法二： 查看当前redis有没有设置密码： 127.0.0.1:6379> config get requirepass\",\"无显示说明没有密码\",\"那么现在来设置密码：\",\"127.0.0.1:6379> config set requirepass abcdefg\",\"OK 再次查看当前redis就提示需要密码： 127.0.0.1:6379> config get requirepass\",\"(error) NOAUTH Authentication required.\"]},\"1788\":{\"h\":\"八、常见问题\",\"t\":[\"1、远程连接问题Java程序连接redis时报错：JedisConnectionException: Failed connecting to host xx.xx.xx.xx:6379 原因： 1）机器之间网络无法联通 进入redis输入ping命令如果返回pong则网络通畅，反之则是网络不通 \",\"2）ip和端口号不正确 检查redis.conf配置文件中的ip和端口是否一致\",\"3）虚拟机中防火墙的原因（可能性较大）\",\"1）连接不上可能是防火墙拒绝了本地连接请求，关闭防火墙即可，可以但不安全当然开发时可以这样关（unbantu系统指令，其他系统指令不同） 1、查看防火墙状态： sudo ufw status 2、关闭防火墙： sudo ufw disable 3、开启防火墙： sudo ufw enable\",\"2）安全一点的方法就是修改防火墙规则，如需远程连接redis，需配置redis端口6379在linux防火墙中开放，代码如下： 1编辑防火强配置文件 vim /etc/sysconfig/iptables 2 添加一行: -A INPUT -m state --state NEW -m tcp -p tcp --dport 6379 -j ACCEPT 3 重启服务: service iptable\",\"4）服务器端的redis.config配置问题 1.redis.conf 中bind 127.0.0.1 未用#注释掉（未注释默认只接收本机访问） 2.protected-mode no 守护进程设置no 3.daemonize yes 作为守护进程运行yes\",\"5）服务器的防火墙问题（没有放开redis端口） 如：阿里云服务器配置实例安全组 \",\"2、持久化问题Java程序连接redis时报错：MISCONF Redis is configured to save RDB snapshots, but is currently not able to persist on disk. Commands that may modify the data set are disabled. Please check Redis logs for details about the error\",\"意思是说redis配置了RDB存储快照，但是当前不能持久化到磁盘disk。即：强制关闭Redis快照导致不能持久化！！！！究其原因是因为强制把redis快照关闭了导致不能持久化的问题，在网上查了一些相关解决方案，通过stop-writes-on-bgsave-error值设置为no即可避免这种问题。\",\"有两种修改方法，一种是通过redis命令行修改，另一种是直接修改redis.conf配置文件 1、命令行修改方式示例： 127.0.0.1:6379> config set stop-writes-on-bgsave-error no 2、修改redis.conf文件：vi打开redis-server配置的redis.conf文件，然后使用快捷匹配模式：/stop-writes-on-bgsave-error定位到stop-writes-on-bgsave-error字符串所在位置，接着把后面的yes设置为no即可。 修改完后需要重启redis服务 重启redis：systemctl restart redis.service\",\"但上方的方法治标不治本，下面采用直接修改内核参数的方式 配置优化，添加以下配置项到/etc/sysctl.conf配置文件：\",\"cat /etc/sysctl.conf //查看配置文件信息 vim /etc/sysctl.conf //编辑配置信息 vm.overcommit_memory = 1 //加入该行代码 sysctl vm.overcommit_memory=1 //执行该命令使其实时生效\"]},\"1789\":{\"h\":\"Docker常用命令\"},\"1790\":{\"h\":\"docker容器内下载vim\",\"t\":[\"1）apt-get update apt-get install vim 2）yum install vim 3）apk update apk add vim\"]},\"1791\":{\"h\":\"查看docker容器日志\",\"t\":[\"docker logs id docker logs -f id\"]},\"1792\":{\"h\":\"容器间数据相互拷贝\",\"t\":[\"docker cp 目录数据 容器id:目录数据 docker cp 容器id:目录数据 目录数据\"]},\"1793\":{\"h\":\"容器构建\",\"t\":[\"docker build -f 文件名 -t 容器名 . 或者使用增强型构建工具构建多平台架构（要安装并使用 buildx, 需要 Docker Engine 版本号大于等于 19.03） docker buildx build --platform=linux/arm64 -f 文件名 -t 容器名 .\"]},\"1794\":{\"h\":\"容器打包成一个镜像\",\"t\":[\"docker commit -m=\\\"描述信息\\\" -a=\\\"作者\\\" 容器id 目标镜像名:[TAG] docker commit -a=\\\"badaodechengxvyuan\\\" -m\\\"addgeoserver\\\" 39f5b723d1b8 tomcatwithgeoserver:1.0\"]},\"1795\":{\"h\":\"镜像重命名\",\"t\":[\"docker tag 原始镜像名 新的镜像名:版本 docker tag centos centos:v1 Docker hub：docker tag 镜像id 你的账户名/镜像仓库名:tag名 harbor: docker tag 镜像id ip+端口+仓库名+镜像名：版本\"]},\"1796\":{\"h\":\"关闭自动重启\",\"t\":[\"docker update --restart=no或always 容器名 禁用所有自动重启（守护程序）容器 docker update --restart=no $(docker ps -a -q)\"]},\"1797\":{\"h\":\"docker登录\",\"t\":[\"docker login ip+port -u admin\"]},\"1798\":{\"h\":\"docker镜像导入导出\",\"t\":[\"文件会保存到当前的 docker 终端目录（当前文件夹下） docker save 0fdf2b4c26d3 > hangge_server.tar docker load < hangge_server.tar 或者 docker export f299f501774c > hangger_server.tar docker import - new_hangger_server < hangger_server.tar\"]},\"1799\":{\"h\":\"docker镜像拉取与推送\",\"t\":[\"拉取 docker pull 192.168.179.188:8080/common/nacos-server:2.0.2 推送（1、改成仓库地址+仓库名+镜像名+版本号 2、推送） docker tag SOURCE_IMAGE[:TAG] 192.168.179.188:8080/trade-dev2/IMAGE[:TAG] docker push 192.168.179.188:8080/trade-dev2/IMAGE[:TAG]\"]},\"1800\":{\"h\":\"查看镜像架构\",\"t\":[\"docker inspect 镜像id 查看系统架构 uname -a 指定下载镜像架构(x86用amd64，m1用arm64) --platform=amd64/arm64\"]},\"1801\":{\"h\":\"磁盘镜像满了，删除镜像\",\"t\":[\"docker rmi -f $(docker images -qa)\"]},\"1802\":{\"h\":\"清理所有无用镜像\",\"t\":[\"docker system prune -a\"]},\"1803\":{\"h\":\"重新加载daemon.json配置\",\"t\":[\"systemctl daemon-reload\"]},\"1804\":{\"h\":\"重启docker服务\",\"t\":[\"systemctl restart docker\"]},\"1805\":{\"h\":\"查看docker服务状态\",\"t\":[\"systemctl status docker\"]},\"1806\":{\"h\":\"查看容器ip信息\",\"t\":[\"查看容器的 ip 信息 docker inspect 容器id\"]},\"1807\":{\"h\":\"创建网桥\",\"t\":[\"docker network create MYname\"]},\"1808\":{\"h\":\"查看k8s详细信息\",\"t\":[\"kubectl describe pods/pod_name --namespace pod namespace kubectl describe pods/devops-validator-v1-5f8f5b6f9f-vl9p4 --namespace test12\"]},\"1809\":{\"h\":\"查看 Docker 在 Linux 中占用了多少内存\",\"t\":[\"docker stats --no-stream 该命令将显示所有正在运行的容器的内存使用情况，包括以下信息： CONTAINER: 容器的 ID。 CPU %: 容器使用的 CPU 百分比。 MEM USAGE / LIMIT: 容器当前使用的内存量和内存限制。 MEM %: 容器当前使用的内存占总内存的百分比。 NET I/O: 容器的网络 I/O。 BLOCK I/O: 容器的块 I/O。 PIDS: 容器中的进程数量。\"]},\"1810\":{\"h\":\"实时查看容器的资源使用情况\",\"t\":[\"docker stats\"]},\"1811\":{\"h\":\"显示Docker容器和物理主机挂载目录信息\",\"t\":[\"方法一 docker inspect -f \\\"{{.Mounts}}\\\" 369a1376f78c 方法二 docker inspect 369a1376f78c | grep Mounts -A 50\"]},\"1812\":{\"h\":\"Mongo常用命令\"},\"1813\":{\"h\":\"1、mongo数据备份与恢复\",\"t\":[\"mongodump --host 124.71.2.157 --port 27017 -d qjsqb --username admin --password pass -o /root/a mongorestore --host <dbhost> --port <dbport> -d <dbname> --drop <path>\"]},\"1814\":{\"h\":\"2、mongo 更新多条 要加multi:true\",\"t\":[\" db.表名.update({\\\"字段\\\":null}, {$set:{\\\"字段\\\":\\\"true\\\"}},{multi:true} ); 更新数组中的元素 db.P_Land.update({}, {$push:{\\\"字段名\\\":数组}},{multi:true} );\"]},\"1815\":{\"h\":\"Mysql常用命令\"},\"1816\":{\"h\":\"1、查看用户连接权限\",\"t\":[\"select user,host from user;\"]},\"1817\":{\"h\":\"2、查看MySQL某个用户的权限：\",\"t\":[\"show grants for root;\"]},\"1818\":{\"h\":\"3、查看相关连接参数\",\"t\":[\"show variables like \\\"%connection_control%\\\";\"]},\"1819\":{\"h\":\"4、修改密码\",\"t\":[\"alter user’root’@’%’ IDENTIFIED BY 'test123 '; 设置密码(8.0该方式远程连不上) SET PASSWORD FOR 'root'@'%' = 'Zz@2020'; 以这种方式连接 ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY \\\"FZZXnet1@3\\\"; ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY \\\"FZZXnet1@3\\\";\"]},\"1820\":{\"h\":\"5、刷新权限\",\"t\":[\"flush privileges;\"]},\"1821\":{\"h\":\"6、赋予任何主机访问权限\",\"t\":[\"mysql5.7版本 GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '密码' WITH GRANT OPTION; 8.0版本 update user set host='%' where user='root'; 刷新权限 flush privileges;\"]},\"1822\":{\"h\":\"7、修改密码过期时间\",\"t\":[\"show variables like 'default_password_lifetime'; SET GLOBAL default_password_lifetime = 90;\"]},\"1823\":{\"h\":\"8、命令行导出文件\",\"t\":[\"Mysql8.0命令行导出文件 mysqldump --column-statistics=0 -h ip -uroot -p --max_allowed_packet=512M dbname > 路径 Mysql5.7命令行导出文件 mysqldump -h ip -uroot -p --max_allowed_packet=512M dbname > 路径\"]},\"1824\":{\"h\":\"9、重启服务\",\"t\":[\"service mysqld restart\"]},\"1825\":{\"h\":\"10.sql导库\",\"t\":[\"CREATE DATABASE IF NOT EXISTS 库名 DEFAULT CHARACTER SET utf8mb4 DEFAULT COLLATE utf8mb4_general_ci; CREATE DATABASE `wangzy_table` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci; CREATE DATABASE `filling` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci; use 库名 source sql文件路径\"]},\"1826\":{\"h\":\"11、# 查看最大连接数\",\"t\":[\"show variables like '%max_connection%'; 重新设置最大连接数 set global max_connections=1000;\"]},\"1827\":{\"h\":\"12、更新数据到另一张表\",\"t\":[\"方式一：update 更新表 set 字段 = (select 参考数据 from 参考表 where 更新表.id = 参考表.id) 例如：update a set aaa = (select aaa from b where a.id = b.id),bbb = (select bbb from b where a.id = b.id) 方式二：update 更新表,参考表 set 更新表数据 = 参考表数据 where 更新表.id = 参考表.id 例如：update a,b set a.aaa = b.aaa,a.bbb = b.bbb where a.id = b.id;\"]},\"1828\":{\"h\":\"13、重置自增序列\",\"t\":[\"ALTER TABLE cloud_connector_data_push_record AUTO_INCREMENT =1\"]},\"1829\":{\"h\":\"14、Mysql修改表名\",\"t\":[\"alter Table titles_test rename to titles_2017;\"]},\"1830\":{\"h\":\"15、查看是否开启binglog日志 on开启\",\"t\":[\"show VARIABLES LIKE 'log_%';\"]},\"1831\":{\"h\":\"刷新字符编码集\",\"t\":[\"将数据库字符编码集修改为utf8mb4_general_ci\",\"-- 数据库字符编码集修改为utf8mb4_general_ci SELECT TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME, CHARACTER_SET_NAME, COLLATION_NAME, column_comment, CONCAT( 'ALTER TABLE `', TABLE_SCHEMA, '`.', TABLE_NAME, ' MODIFY COLUMN ', COLUMN_NAME, ' ', COLUMN_TYPE, ' CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci ', CASE WHEN column_default IS NOT NULL OR column_default!='' THEN CONCAT(' DEFAULT \\\\'',column_default,'\\\\' ') ELSE '' END, case when is_nullable = 'YES' THEN ' NULL' ELSE ' NOT NULL' END,' COMMENT \\\\'', column_comment, '\\\\'; ' ) '修正SQL' FROM information_schema.`COLUMNS` WHERE TABLE_SCHEMA = '库名' and table_name not like '%act_%' and collation_name != 'utf8mb4_general_ci' AND ( DATA_TYPE = 'varchar' OR DATA_TYPE = 'char' OR DATA_TYPE='longtext'); -- 生成 ALTER TABLE 语句 SELECT CONCAT('ALTER TABLE `', table_name, '` CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;') AS alter_statement FROM information_schema.tables WHERE table_schema = '主题名' AND table_type = 'BASE TABLE' and table_name != 'utf8mb4_general_ci'\"]},\"1832\":{\"h\":\"Oracle常用命令\"},\"1833\":{\"h\":\"查看表空间信息\",\"t\":[\"1、查看表空间信息 SELECT TOTAL.TABLESPACE_NAME AS 表空间名, ROUND(TOTAL.MB - FREE.MB, 2) || ' MB' AS 当前已使用的空间, ROUND(TOTAL.MB, 2) || ' MB' AS 当前可使用总空间, ROUND(FREE.MB, 2) || ' MB' AS 当前剩余可使用空间, ROUND((1 - FREE.MB / TOTAL.MB) * 100, 2) || '%' AS 当前使用百分比, ROUND(TOTAL.MAX_MB, 2) || ' MB' AS 可扩展到的最大空间, DECODE(TOTAL.MAX_MB, 0, 0, ROUND(TOTAL.MAX_MB - TOTAL.MB, 2)) || ' MB' AS 剩余可扩展的空间, DECODE(TOTAL.MAX_MB, 0, 0, ROUND((1 - TOTAL.MB / TOTAL.MAX_MB) * 100, 2)) || '%' AS 剩余可扩展的百分比 FROM (SELECT TABLESPACE_NAME, SUM(BYTES) / 1024 / 1024 AS MB FROM DBA_FREE_SPACE GROUP BY TABLESPACE_NAME) FREE, (SELECT TABLESPACE_NAME, SUM(BYTES) / 1024 / 1024 AS MB, SUM(MAXBYTES) / 1024 / 1024 AS MAX_MB FROM DBA_DATA_FILES GROUP BY TABLESPACE_NAME) TOTAL WHERE FREE.TABLESPACE_NAME = TOTAL.TABLESPACE_NAME ORDER BY TOTAL.TABLESPACE_NAME 2、查看表空间存储位置 select tablespace_name, file_id, file_name, round(bytes / (1024 * 1024), 0) total_space from sys.dba_data_files order by tablespace_name; 2、扩容指定表空间： alter database datafile 'C:\\\\APP\\\\ORADATA\\\\ORCL\\\\SYSTEM01.DBF' resize 20000M;xxxxxxxxxx 更新数组中的元素 db.P_Land.update({}, {$push:{\\\"字段名\\\":数组}},{multi:true});\"]},\"1834\":{\"h\":\"RocketMQ常用命令\",\"t\":[\"//启动 nohup sh mqnamesrv & nohup sh mqbroker -n localhost:9876 & //停止 sh mqshutdown broker sh mqshutdown namesrvxxxxxxxxxx 更新数组中的元素 db.P_Land.update({}, {$push:{\\\"字段名\\\":数组}},{multi:true}); \"]},\"1835\":{\"h\":\"Java常用Linux命令\",\"t\":[\"基本操作\",\"Linux关机,重启\",\"查看系统,CPU信息\",\"建立软连接\",\"rpm相关\",\"sshkey\",\"命令重命名\",\"同步服务器时间\",\"后台运行命令\",\"强制活动用户退出\",\"查看命令路径\",\"查看进程所有打开最大fd数\",\"配置dns\",\"nslookup,查看域名路由表\",\"last, 最近登录信息列表\",\"设置固定ip\",\"查看进程内加载的环境变量\",\"查看进程树找到服务器进程\",\"查看进程启动路径\",\"添加用户, 配置sudo权限\",\"强制关闭进程名包含xxx的所有进程\",\"vim操作\",\"打开只读文件,修改后需要保存时(不用切换用户即可保存的方式)\",\"查看磁盘, 文件目录基本信息\",\"wc命令\",\"常用压缩, 解压缩命令\",\"压缩命令\",\"解压缩命令\",\"变更文件所属用户, 用户组\",\"cp, scp, mkdir\",\"比较两个文件\",\"日志输出的字节数,可以用作性能测试\",\"查看, 去除特殊字符\",\"处理因系统原因引起的文件中特殊字符的问题\",\"tee, 重定向的同时输出到屏幕\",\"grep\",\"awk\",\"find检索命令\",\"查看什么进程使用了该端口\",\"获取本机ip地址\",\"iptables\",\"nc命令, tcp调试利器\",\"tcpdump\",\"跟踪网络路由路径\",\"ss\",\"netstat\",\"top\",\"dmesg,查看系统日志\",\"iostat,磁盘IO情况监控\",\"free,内存使用情况\",\"sar,查看网络吞吐状态\",\"vmstat, 给定时间监控CPU使用率, 内存使用, 虚拟内存交互, IO读写\"]},\"1836\":{\"h\":\"基本操作\"},\"1837\":{\"h\":\"Linux关机,重启\",\"t\":[\"# 关机 shutdown -h now # 重启 shutdown -r now\"]},\"1838\":{\"h\":\"查看系统,CPU信息\",\"t\":[\"# 查看系统内核信息 uname -a # 查看系统内核版本 cat /proc/version # 查看当前用户环境变量 env cat /proc/cpuinfo # 查看有几个逻辑cpu, 包括cpu型号 cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c # 查看有几颗cpu,每颗分别是几核 cat /proc/cpuinfo | grep physical | uniq -c # 查看当前CPU运行在32bit还是64bit模式下, 如果是运行在32bit下也不代表CPU不支持64bit getconf LONG_BIT # 结果大于0, 说明支持64bit计算. lm指long mode, 支持lm则是64bit cat /proc/cpuinfo | grep flags | grep ' lm ' | wc -l\"]},\"1839\":{\"h\":\"建立软连接\",\"t\":[\"ln -s /usr/local/jdk1.8/ jdk\"]},\"1840\":{\"h\":\"rpm相关\",\"t\":[\"# 查看是否通过rpm安装了该软件 rpm -qa | grep 软件名\"]},\"1841\":{\"h\":\"sshkey\",\"t\":[\"# 创建sshkey ssh-keygen -t rsa -C your_email@example.com #id_rsa.pub 的内容拷贝到要控制的服务器的 home/username/.ssh/authorized_keys 中,如果没有则新建(.ssh权限为700, authorized_keys权限为600)\"]},\"1842\":{\"h\":\"命令重命名\",\"t\":[\"# 在各个用户的.bash_profile中添加重命名配置 alias ll='ls -alF'\"]},\"1843\":{\"h\":\"同步服务器时间\",\"t\":[\"sudo ntpdate -u ntp.api.bz\"]},\"1844\":{\"h\":\"后台运行命令\",\"t\":[\"# 后台运行,并且有nohup.out输出 nohup xxx & # 后台运行, 不输出任何日志 nohup xxx > /dev/null & # 后台运行, 并将错误信息做标准输出到日志中 nohup xxx >out.log 2>&1 &\"]},\"1845\":{\"h\":\"强制活动用户退出\",\"t\":[\"# 命令来完成强制活动用户退出.其中TTY表示终端名称 pkill -kill -t [TTY]\"]},\"1846\":{\"h\":\"查看命令路径\",\"t\":[\"which <命令>\"]},\"1847\":{\"h\":\"查看进程所有打开最大fd数\",\"t\":[\"ulimit -n\"]},\"1848\":{\"h\":\"配置dns\",\"t\":[\"vim /etc/resolv.conf\"]},\"1849\":{\"h\":\"nslookup,查看域名路由表\",\"t\":[\"nslookup google.com\"]},\"1850\":{\"h\":\"last, 最近登录信息列表\",\"t\":[\"# 最近登录的5个账号 last -n 5\"]},\"1851\":{\"h\":\"设置固定ip\",\"t\":[\"搜索公纵号：MarkerHub，关注回复[ vue ]获取前后端入门教程！\",\"ifconfig em1 192.168.5.177 netmask 255.255.255.0\"]},\"1852\":{\"h\":\"查看进程内加载的环境变量\",\"t\":[\"# 也可以去 cd /proc 目录下, 查看进程内存中加载的东西 ps eww -p XXXXX(进程号)\"]},\"1853\":{\"h\":\"查看进程树找到服务器进程\",\"t\":[\"ps auwxf\"]},\"1854\":{\"h\":\"查看进程启动路径\",\"t\":[\"cd /proc/xxx(进程号) ls -all # cwd对应的是启动路径\"]},\"1855\":{\"h\":\"添加用户, 配置sudo权限\",\"t\":[\"# 新增用户 useradd 用户名 passwd 用户名 #增加sudo权限 vim /etc/sudoers # 修改文件里面的 # root ALL=(ALL) ALL # 用户名 ALL=(ALL) ALL\"]},\"1856\":{\"h\":\"强制关闭进程名包含xxx的所有进程\",\"t\":[\"ps aux|grep xxx | grep -v grep | awk '{print $2}' | xargs kill -9\"]},\"1857\":{\"h\":\"vim操作\",\"t\":[\"#normal模式下 g表示全局, x表示查找的内容, y表示替换后的内容 :%s/x/y/g #normal模式下 0 # 光标移到行首(数字0) $ # 光标移至行尾 shift + g # 跳到文件最后 gg # 跳到文件头 # 显示行号 :set nu # 去除行号 :set nonu # 检索 /xxx(检索内容) # 从头检索, 按n查找下一个 ?xxx(检索内容) # 从尾部检索\"]},\"1858\":{\"h\":\"打开只读文件,修改后需要保存时(不用切换用户即可保存的方式)\",\"t\":[\"# 在normal模式下 :w !sudo tee %\"]},\"1859\":{\"h\":\"查看磁盘, 文件目录基本信息\",\"t\":[\"# 查看磁盘挂载情况 mount # 查看磁盘分区信息 df # 查看目录及子目录大小 du -H -h # 查看当前目录下各个文件, 文件夹占了多少空间, 不会递归 du -sh *\"]},\"1860\":{\"h\":\"wc命令\",\"t\":[\"# 查看文件里有多少行 wc -l filename # 看文件里有多少个word wc -w filename # 文件里最长的那一行是多少个字 wc -L filename # 统计字节数 wc -c\"]},\"1861\":{\"h\":\"常用压缩, 解压缩命令\"},\"1862\":{\"h\":\"压缩命令\",\"t\":[\"tar czvf xxx.tar 压缩目录 zip -r xxx.zip 压缩目录\"]},\"1863\":{\"h\":\"解压缩命令\",\"t\":[\"tar zxvf xxx.tar # 解压到指定文件夹 tar zxvf xxx.tar -C /xxx/yyy/ unzip xxx.zip\"]},\"1864\":{\"h\":\"变更文件所属用户, 用户组\",\"t\":[\"chown eagleye.eagleye xxx.log\"]},\"1865\":{\"h\":\"cp, scp, mkdir\",\"t\":[\"#复制 cp xxx.log # 复制并强制覆盖同名文件 cp -f xxx.log # 复制文件夹 cp -r xxx(源文件夹) yyy(目标文件夹) # 远程复制 scp -P ssh端口 username@10.10.10.101:/home/username/xxx /home/xxx # 级联创建目录 mkdir -p /xxx/yyy/zzz # 批量创建文件夹, 会在test,main下都创建java, resources文件夹 mkdir -p src/{test,main}/{java,resources}\"]},\"1866\":{\"h\":\"比较两个文件\",\"t\":[\"diff -u 1.txt 2.txt\"]},\"1867\":{\"h\":\"日志输出的字节数,可以用作性能测试\",\"t\":[\"# 如果做性能测试, 可以每执行一次, 往日志里面输出 “.” , 这样日志中的字节数就是实际的性能测试运行的次数, 还可以看见实时速率. tail -f xxx.log | pv -bt\"]},\"1868\":{\"h\":\"查看, 去除特殊字符\",\"t\":[\"# 查看特殊字符 cat -v xxx.sh # 去除特殊字符 sed -i 's/^M//g’ env.sh 去除文件的特殊字符, 比如^M: 需要这样输入: ctrl+v+enter\"]},\"1869\":{\"h\":\"处理因系统原因引起的文件中特殊字符的问题\",\"t\":[\"# 可以转换为该系统下的文件格式 cat file.sh > file.sh_bak # 先将file.sh中文件内容复制下来然后运行, 然后粘贴内容, 最后ctrl + d 保存退出 cat > file1.sh # 在vim中通过如下设置文件编码和文件格式 :set fileencodings=utf-8 ，然后 w （存盘）一下即可转化为 utf8 格式， :set fileformat=unix # 在mac下使用dos2unix进行文件格式化 find . -name \\\"*.sh\\\" | xargs dos2unix\"]},\"1870\":{\"h\":\"tee, 重定向的同时输出到屏幕\",\"t\":[\"awk ‘{print $0}’ xxx.log | tee test.log\"]},\"1871\":{\"h\":\"grep\",\"t\":[\"# 反向匹配, 查找不包含xxx的内容 grep -v xxx # 排除所有空行 grep -v '^$' # 返回结果 2,则说明第二行是空行 grep -n “^$” 111.txt # 查询以abc开头的行 grep -n “^abc” 111.txt # 同时列出该词语出现在文章的第几行 grep 'xxx' -n xxx.log # 计算一下该字串出现的次数 grep 'xxx' -c xxx.log # 比对的时候，不计较大小写的不同 grep 'xxx' -i xxx.log\"]},\"1872\":{\"h\":\"awk\",\"t\":[\"# 以':' 为分隔符,如果第五域有user则输出该行 awk -F ':' '{if ($5 ~ /user/) print $0}' /etc/passwd # 统计单个文件中某个字符（串）(中文无效)出现的次数 awk -v RS='character' 'END {print --NR}' xxx.txt\"]},\"1873\":{\"h\":\"find检索命令\",\"t\":[\"# 在目录下找后缀是.mysql的文件 find /home/eagleye -name '*.mysql' -print # 会从 /usr 目录开始往下找，找最近3天之内存取过的文件。 find /usr -atime 3 –print # 会从 /usr 目录开始往下找，找最近5天之内修改过的文件。 find /usr -ctime 5 –print # 会从 /doc 目录开始往下找，找jacky 的、文件名开头是 j的文件。 find /doc -user jacky -name 'j*' –print # 会从 /doc 目录开始往下找，找寻文件名是 ja 开头或者 ma开头的文件。 find /doc \\\\( -name 'ja*' -o- -name 'ma*' \\\\) –print # 会从 /doc 目录开始往下找，找到凡是文件名结尾为 bak的文件，把它删除掉。-exec 选项是执行的意思，rm 是删除命令，{ } 表示文件名，“\\\\;”是规定的命令结尾。 find /doc -name '*bak' -exec rm {} \\\\;\"]},\"1874\":{\"h\":\"查看什么进程使用了该端口\",\"t\":[\"lsof -i:port\"]},\"1875\":{\"h\":\"获取本机ip地址\",\"t\":[\"/sbin/ifconfig -a|grep inet|grep -v 127.0.0.1|grep -v inet6|awk '{print $2}'|tr -d \\\"addr:\\\"\"]},\"1876\":{\"h\":\"iptables\",\"t\":[\"# 查看iptables状态 service iptables status # 要封停一个ip iptables -I INPUT -s ***.***.***.*** -j DROP # 要解封一个IP，使用下面这条命令： iptables -D INPUT -s ***.***.***.*** -j DROP 备注: 参数-I是表示Insert（添加），-D表示Delete（删除）。后面跟的是规则，INPUT表示入站，***.***.***.***表示要封停的IP，DROP表示放弃连接。 #开启9090端口的访问 /sbin/iptables -I INPUT -p tcp --dport 9090 -j ACCEPT # 防火墙开启、关闭、重启 /etc/init.d/iptables status /etc/init.d/iptables start /etc/init.d/iptables stop /etc/init.d/iptables restart\"]},\"1877\":{\"h\":\"nc命令, tcp调试利器\",\"t\":[\"#给某一个endpoint发送TCP请求,就将data的内容发送到对端 nc 192.168.0.11 8000 < data.txt #nc可以当做服务器，监听某个端口号,把某一次请求的内容存储到received_data里 nc -l 8000 > received_data #上边只监听一次，如果多次可以加上-k参数 nc -lk 8000\"]},\"1878\":{\"h\":\"tcpdump\",\"t\":[\"# dump出本机12301端口的tcp包 tcpdump -i em1 tcp port 12301 -s 1500 -w abc.pcap\"]},\"1879\":{\"h\":\"跟踪网络路由路径\",\"t\":[\"# traceroute默认使用udp方式, 如果是-I则改成icmp方式 traceroute -I www.163.com # 从ttl第3跳跟踪 traceroute -M 3 www.163.com # 加上端口跟踪 traceroute -p 8080 192.168.10.11\"]},\"1880\":{\"h\":\"ss\",\"t\":[\"# 显示本地打开的所有端口 ss -l # 显示每个进程具体打开的socket ss -pl # 显示所有tcp socket ss -t -a # 显示所有的UDP Socekt ss -u -a # 显示所有已建立的SMTP连接 ss -o state established '( dport = :smtp or sport = :smtp )' # 显示所有已建立的HTTP连接 ss -o state established '( dport = :http or sport = :http )' 找出所有连接X服务器的进程 ss -x src /tmp/.X11-unix/* 列出当前socket统计信息 ss -s 解释：netstat是遍历/proc下面每个PID目录，ss直接读/proc/net下面的统计信息。所以ss执行的时候消耗资源以及消耗的时间都比netstat少很多\"]},\"1881\":{\"h\":\"netstat\",\"t\":[\"# 输出每个ip的连接数，以及总的各个状态的连接数 netstat -n | awk '/^tcp/ {n=split($(NF-1),array,\\\":\\\");if(n<=2)++S[array[(1)]];else++S[array[(4)]];++s[$NF];++N} END {for(a in S){printf(\\\"%-20s %s\\\\n\\\", a, S[a]);++I}printf(\\\"%-20s %s\\\\n\\\",\\\"TOTAL_IP\\\",I);for(a in s) printf(\\\"%-20s %s\\\\n\\\",a, s[a]);printf(\\\"%-20s %s\\\\n\\\",\\\"TOTAL_LINK\\\",N);}' # 统计所有连接状态, # CLOSED：无连接是活动的或正在进行 # LISTEN：服务器在等待进入呼叫 # SYN_RECV：一个连接请求已经到达，等待确认 # SYN_SENT：应用已经开始，打开一个连接 # ESTABLISHED：正常数据传输状态 # FIN_WAIT1：应用说它已经完成 # FIN_WAIT2：另一边已同意释放 # ITMED_WAIT：等待所有分组死掉 # CLOSING：两边同时尝试关闭 # TIME_WAIT：主动关闭连接一端还没有等到另一端反馈期间的状态 # LAST_ACK：等待所有分组死掉 netstat -n | awk '/^tcp/ {++state[$NF]} END {for(key in state) print key,\\\"\\\\t\\\",state[key]}' # 查找较多time_wait连接 netstat -n|grep TIME_WAIT|awk '{print $5}'|sort|uniq -c|sort -rn|head -n20\"]},\"1882\":{\"h\":\"top\",\"t\":[\"按大写的 F 或 O 键，然后按 a-z 可以将进程按照相应的列进行排序, 然后回车。而大写的 R 键可以将当前的排序倒转\",\"列名\",\"含义\",\"PID\",\"进程id\",\"PPID\",\"父进程id\",\"RUSER\",\"Real user name\",\"UID\",\"进程所有者的用户id\",\"USER\",\"进程所有者的用户名\",\"GROUP\",\"进程所有者的组名\",\"TTY\",\"启动进程的终端名。不是从终端启动的进程则显示为 ?\",\"PR\",\"优先级\",\"NI\",\"nice值。负值表示高优先级，正值表示低优先级\",\"P\",\"最后使用的CPU，仅在多CPU环境下有意义\",\"%CPU\",\"上次更新到现在的CPU时间占用百分比\",\"TIME\",\"进程使用的CPU时间总计，单位秒\",\"TIME+\",\"进程使用的CPU时间总计，单位1/100秒\",\"%MEM\",\"进程使用的物理内存百分比\",\"VIRT\",\"进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES\",\"SWAP\",\"进程使用的虚拟内存中，被换出的大小，单位kb。\",\"RES\",\"进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA\",\"CODE\",\"可执行代码占用的物理内存大小，单位kb\",\"DATA\",\"可执行代码以外的部分(数据段+栈)占用的物理内存大小，单位kb\",\"SHR\",\"共享内存大小，单位kb\",\"nFLT\",\"页面错误次数\",\"nDRT\",\"最后一次写入到现在，被修改过的页面数。\",\"S\",\"进程状态。D=不可中断的睡眠状态,R=运行,S=睡眠,T=跟踪/停止,Z=僵尸进程\",\"COMMAND\",\"命令名/命令行\",\"WCHAN\",\"若该进程在睡眠，则显示睡眠中的系统函数名\",\"Flags\",\"任务标志，参考 sched.h\"]},\"1883\":{\"h\":\"dmesg,查看系统日志\",\"t\":[\"dmesg\"]},\"1884\":{\"h\":\"iostat,磁盘IO情况监控\",\"t\":[\"iostat -xz 1 # r/s, w/s, rkB/s, wkB/s：分别表示每秒读写次数和每秒读写数据量（千字节）。读写量过大，可能会引起性能问题。 # await：IO操作的平均等待时间，单位是毫秒。这是应用程序在和磁盘交互时，需要消耗的时间，包括IO等待和实际操作的耗时。如果这个数值过大，可能是硬件设备遇到了瓶颈或者出现故障。 # avgqu-sz：向设备发出的请求平均数量。如果这个数值大于1，可能是硬件设备已经饱和（部分前端硬件设备支持并行写入）。 # %util：设备利用率。这个数值表示设备的繁忙程度，经验值是如果超过60，可能会影响IO性能（可以参照IO操作平均等待时间）。如果到达100%，说明硬件设备已经饱和。 # 如果显示的是逻辑设备的数据，那么设备利用率不代表后端实际的硬件设备已经饱和。值得注意的是，即使IO性能不理想，也不一定意味这应用程序性能会不好，可以利用诸如预读取、写缓存等策略提升应用性能。\"]},\"1885\":{\"h\":\"free,内存使用情况\",\"t\":[\"free -m eg: total used free shared buffers cached Mem: 1002 769 232 0 62 421 -/+ buffers/cache: 286 715 Swap: 1153 0 1153 第一部分Mem行: total 内存总数: 1002M used 已经使用的内存数: 769M free 空闲的内存数: 232M shared 当前已经废弃不用,总是0 buffers Buffer 缓存内存数: 62M cached Page 缓存内存数:421M 关系：total(1002M) = used(769M) + free(232M) 第二部分(-/+ buffers/cache): (-buffers/cache) used内存数：286M (指的第一部分Mem行中的used – buffers – cached) (+buffers/cache) free内存数: 715M (指的第一部分Mem行中的free + buffers + cached) 可见-buffers/cache反映的是被程序实实在在吃掉的内存,而+buffers/cache反映的是可以挪用的内存总数. 第三部分是指交换分区\"]},\"1886\":{\"h\":\"sar,查看网络吞吐状态\",\"t\":[\"# sar命令在这里可以查看网络设备的吞吐率。在排查性能问题时，可以通过网络设备的吞吐量，判断网络设备是否已经饱和 sar -n DEV 1 # # sar命令在这里用于查看TCP连接状态，其中包括： # active/s：每秒本地发起的TCP连接数，既通过connect调用创建的TCP连接； # passive/s：每秒远程发起的TCP连接数，即通过accept调用创建的TCP连接； # retrans/s：每秒TCP重传数量； # TCP连接数可以用来判断性能问题是否由于建立了过多的连接，进一步可以判断是主动发起的连接，还是被动接受的连接。TCP重传可能是因为网络环境恶劣，或者服务器压力过大导致丢包 sar -n TCP,ETCP 1\"]},\"1887\":{\"h\":\"vmstat, 给定时间监控CPU使用率, 内存使用, 虚拟内存交互, IO读写\",\"t\":[\"# 2表示每2秒采集一次状态信息, 1表示只采集一次(忽略既是一直采集) vmstat 2 1 eg: r b swpd free buff cache si so bi bo in cs us sy id wa 1 0 0 3499840 315836 3819660 0 0 0 1 2 0 0 0 100 0 0 0 0 3499584 315836 3819660 0 0 0 0 88 158 0 0 100 0 0 0 0 3499708 315836 3819660 0 0 0 2 86 162 0 0 100 0 0 0 0 3499708 315836 3819660 0 0 0 10 81 151 0 0 100 0 1 0 0 3499732 315836 3819660 0 0 0 2 83 154 0 0 100 0\",\"r 表示运行队列(就是说多少个进程真的分配到CPU)，我测试的服务器目前CPU比较空闲，没什么程序在跑，当这个值超过了CPU数目，就会出现CPU瓶颈了。这个也和top的负载有关系，一般负载超过了3就比较高，超过了5就高，超过了10就不正常了，服务器的状态很危险。top的负载类似每秒的运行队列。如果运行队列过大，表示你的CPU很繁忙，一般会造成CPU使用率很高。\",\"b 表示阻塞的进程,这个不多说，进程阻塞，大家懂的。\",\"swpd 虚拟内存已使用的大小，如果大于0，表示你的机器物理内存不足了，如果不是程序内存泄露的原因，那么你该升级内存了或者把耗内存的任务迁移到其他机器。\",\"free 空闲的物理内存的大小，我的机器内存总共8G，剩余3415M。\",\"buff Linux/Unix系统是用来存储，目录里面有什么内容，权限等的缓存，我本机大概占用300多M\",\"cache cache直接用来记忆我们打开的文件,给文件做缓冲，我本机大概占用300多M(这里是Linux/Unix的聪明之处，把空闲的物理内存的一部分拿来做文件和目录的缓存，是为了提高 程序执行的性能，当程序使用内存时，buffer/cached会很快地被使用。)\",\"si 每秒从磁盘读入虚拟内存的大小，如果这个值大于0，表示物理内存不够用或者内存泄露了，要查找耗内存进程解决掉。我的机器内存充裕，一切正常。\",\"so 每秒虚拟内存写入磁盘的大小，如果这个值大于0，同上。\",\"bi 块设备每秒接收的块数量，这里的块设备是指系统上所有的磁盘和其他块设备，默认块大小是1024byte，我本机上没什么IO操作，所以一直是0，但是我曾在处理拷贝大量数据(2-3T)的机器上看过可以达到140000/s，磁盘写入速度差不多140M每秒\",\"bo 块设备每秒发送的块数量，例如我们读取文件，bo就要大于0。bi和bo一般都要接近0，不然就是IO过于频繁，需要调整。\",\"in 每秒CPU的中断次数，包括时间中断\",\"cs 每秒上下文切换次数，例如我们调用系统函数，就要进行上下文切换，线程的切换，也要进程上下文切换，这个值要越小越好，太大了，要考虑调低线程或者进程的数目,例如在apache和nginx这种web服务器中，我们一般做性能测试时会进行几千并发甚至几万并发的测试，选择web服务器的进程可以由进程或者线程的峰值一直下调，压测，直到cs到一个比较小的值，这个进程和线程数就是比较合适的值了。系统调用也是，每次调用系统函数，我们的代码就会进入内核空间，导致上下文切换，这个是很耗资源，也要尽量避免频繁调用系统函数。上下文切换次数过多表示你的CPU大部分浪费在上下文切换，导致CPU干正经事的时间少了，CPU没有充分利用，是不可取的。\",\"us 用户CPU时间，我曾经在一个做加密解密很频繁的服务器上，可以看到us接近100,r运行队列达到80(机器在做压力测试，性能表现不佳)。\",\"sy 系统CPU时间，如果太高，表示系统调用时间长，例如是IO操作频繁。\",\"id 空闲 CPU时间，一般来说，id + us + sy = 100,一般我认为id是空闲CPU使用率，us是用户CPU使用率，sy是系统CPU使用率。\",\"wt 等待IO CPU时间。\"]},\"1888\":{\"h\":\"Linux常用命令\"},\"1889\":{\"h\":\"一、进程相关命令\"},\"1890\":{\"h\":\"1、查询文件位置：\",\"t\":[\"find / -name devops\"]},\"1891\":{\"h\":\"2、查看tomcat实时日志：\",\"t\":[\"tail -f catalina.out\"]},\"1892\":{\"h\":\"3、查看进程及端口(linux/win)：\",\"t\":[\"Linux: ps -ef |grep 进程号/名称 或者 lsof -i:80 netstat -an | grep 端口号 netstat -tunlp |grep 80 Windows： 查看进程: netstat -ano|findstr 8080 杀进程: taskkill -pid 9380 -f\"]},\"1893\":{\"h\":\"二、jar包相关命令\"},\"1894\":{\"h\":\"1、解压jar包：\",\"t\":[\"（默认解压到当前目录）\",\"jar -xvf xxx.jar\"]},\"1895\":{\"h\":\"2、运行jar包\",\"t\":[\"nohup java -jar DevOps-Land-Market-0.0.1-SNAPSHOT.jar > devops.log 2>&1 & 外置改端口： java -jar xxx.jar --server.port=8081 实时监听： tail -f xxx.log\"]},\"1896\":{\"h\":\"3、windows后台运行jar脚本\",\"t\":[\"@echo off start javaw -jar xxxxxxxx-SNAPSHOT.jar exit\"]},\"1897\":{\"h\":\"4、打包上传\",\"t\":[\"打包：tar cvf xxx.tar xxx 解压：tar xvf xxx.tar put D:\\\\Zhongzhi\\\\devops-land-market\\\\target\\\\DevOps-Land-Market-0.0.1-SNAPSHOT.jar\"]},\"1898\":{\"h\":\"5、打包下载\",\"t\":[\"xftp 下载 get 文件路径+名称\",\"下载到本地路径（默认D:\\\\默认储存位置\\\\NetSarang\\\\Xshell\\\\Sessions或C:\\\\本机\\\\本机\\\\Documents\\\\NetSarang\\\\Xshell\\\\Sessions\\\\）\",\"上传在xftp中put回车即可\",\"文件夹下载\",\"文件夹打包 tar -zcvf xxx.tar xxx 下载到本地 （yum install lrzsz） sz xxx.tar 解压： tar zxvf FileName.tar.gz 压缩： tar zcvf FileName.tar.gz DirName\"]},\"1899\":{\"h\":\"6、查看日志\",\"t\":[\"查看最后五十行日志：\",\"tail -n 50 a.log -f（实时监听）\"]},\"1900\":{\"h\":\"三、权限相关命令\"},\"1901\":{\"h\":\"1、赋予所有权限：\",\"t\":[\"chmod -R 777\"]},\"1902\":{\"h\":\"四、系统相关命令\"},\"1903\":{\"h\":\"1、查看系统版本：\",\"t\":[\"lsb_release -a 或 cat /proc/version 或 cat /etc/centos-release 或 redhat版本的cat /etc/redhat-release 查看32还是64：g etconf LONG_BIT\"]},\"1904\":{\"h\":\"2、安装rpm\",\"t\":[\"单个安装：rpm -ivh xxx.rpm 一键安装：rpm -Uvh *.rpm --nodeps --force\"]},\"1905\":{\"h\":\"3、重启网卡linux\",\"t\":[\"systemctl restart network\"]},\"1906\":{\"h\":\"4、查看已执行命令历史\",\"t\":[\"history\"]},\"1907\":{\"h\":\"5、linux同步网络时间\",\"t\":[\"yum install -y ntpdate 时间同步命令： ntpdata time.windows.com 或者 ntpdata ntp.aliyun.com 自动时间同步： 需要配置/etc/crontab文件，实现自动执行任务 让linux从time.windows.com自动同步时间 vi /etc/crontab 加上一句： 00 0 1 * * root ntpdate -s time.windows.com time.nist.gov 是一个时间服务器.\"]},\"1908\":{\"h\":\"6、查看文件大小\",\"t\":[\"查看磁盘占用情况 df -h 查看当前文件总大小 du -sh 查看当前文件大小 du -sh * 或者 du -sh /home\"]},\"1909\":{\"h\":\"7、linux新建定时任务\",\"t\":[\"systemctl enable crond systemctl start crond service crond status crontab -e crontab -l\"]},\"1910\":{\"h\":\"8、查看操作系统日志\",\"t\":[\"鉴于上述几点都无法解决，就想到查看Linux系统操作日志(最后200行就可以排查)： tail -200f /var/log/messages\"]},\"1911\":{\"h\":\"9、检测硬盘大小\",\"t\":[\"命令 fdisk -l 或 lsblk\"]},\"1912\":{\"h\":\"10、模拟启动一个监听端口\",\"t\":[\"nc -lk 8080\"]},\"1913\":{\"h\":\"网络常用命令\"},\"1914\":{\"h\":\"1、curl命令发送post请求\",\"t\":[\"curl -X POST -H \\\"Content-Type: application/json\\\" -H \\\"referer:http://localhost\\\" http://localhost:8080/test/file/import -d '{\\\"param\\\":\\\"20210608\\\"}'\"]},\"1915\":{\"h\":\"2、命令行下载远程文件\",\"t\":[\"curl -O http://xxxx\"]},\"1916\":{\"h\":\"3、检测ip和端口通畅\",\"t\":[\"ping 检测ip是否通 telnet 检测ip端口是否开放 如： telnet 127.0.0.1 3306 （win出现全黑框表示通的，linux：没报连接不上就是通的）\"]},\"1917\":{\"h\":\"4、跟踪路由\",\"t\":[\"检测ip途径的各代理地址\",\"tracert是获得目标ip经过路径的所有地址 Ping就是一个测试程序,可以检验本地或目标网络的延迟,如果Ping运行正确,我们大体上就可以排除网络访问层、网卡、路由器等存在的故障减小了问题的范围\",\"win版 tracert ip地址 linux版 traceroute ip地址\"]},\"1918\":{\"h\":\"5、linux网卡开机自启动\",\"t\":[\"centos：不同网卡修改不同文件\",\"vi /etc/sysconfig/network-scripts/ifcfg-enxxx 找到其中的ONBOOT=no 改作ONBOOT=yes,然后:wq保存 TYPE=Ethernet PROXY_METHOD=none BROWSER_ONLY=no BOOTPROTO=dhcp DEFROUTE=yes IPV4_FAILURE_FATAL=no IPV6INIT=yes IPV6_AUTOCONF=yes IPV6_DEFROUTE=yes IPV6_FAILURE_FATAL=no IPV6_ADDR_GEN_MODE=stable-privacy NAME=enp2s1 UUID=eef13cf9-886b-476f-a977-50a7299fbe21 DEVICE=enp2s1 ONBOOT=yes ZONE=public #重启网络（重启挂载不会掉） service network restart\"]},\"1919\":{\"h\":\"6、linux刷新网卡\",\"t\":[\"/etc/init.d/network restart\"]},\"1920\":{\"h\":\"7、网络传输\",\"t\":[\"scp 本地文件 用户名@ip：传输到远程文件夹 scp /home/wmx/1.mp3 root@114.168.1.81:/home/root/music/001.mp3\"]},\"1921\":{\"h\":\"防火墙常用命令\"},\"1922\":{\"h\":\"Linux防火墙常用命令\"},\"1923\":{\"h\":\"启动、停止和重启防火墙\",\"t\":[\"启动防火墙\",\"systemctl start firewalld\",\"停止防火墙\",\"systemctl stop firewalld\",\"重启防火墙\",\"systemctl restart firewalld\",\"查看防火墙状态：\",\"systemctl status firewalld 或者 firewall-cmd --state\",\"重新加载配置：\",\"firewall-cmd --reload\"]},\"1924\":{\"h\":\"防火墙规则配置\"},\"1925\":{\"h\":\"添加端口：\",\"t\":[\"这将永久地为public区域添加TCP端口80的访问权限。注意--permanent参数确保规则在系统重启后仍然有效。\",\"firewall-cmd --zone=public --add-port=80/tcp --permanent\"]},\"1926\":{\"h\":\"移除端口：\",\"t\":[\"这将永久地从public区域移除TCP端口80的访问权限。\",\"firewall-cmd --zone=public --remove-port=80/tcp --permanent\"]},\"1927\":{\"h\":\"添加服务：\",\"t\":[\"这将为public区域添加HTTP服务的访问权限。\",\"firewall-cmd --zone=public --add-service=http --permanent\"]},\"1928\":{\"h\":\"移除服务：\",\"t\":[\"这将从public区域移除HTTP服务的访问权限。\",\"firewall-cmd --zone=public --remove-service=http --permanent\"]},\"1929\":{\"h\":\"防火墙规则查询\"},\"1930\":{\"h\":\"列出所有开放的端口：\",\"t\":[\"这将列出public区域中所有开放的端口。\",\"firewall-cmd --zone=public --list-ports\"]},\"1931\":{\"h\":\"列出所有区域：\",\"t\":[\"这将列出所有已配置的区域以及它们各自绑定的接口。\",\"firewall-cmd --get-active-zones\"]},\"1932\":{\"h\":\"列出特定区域的所有配置：\",\"t\":[\"这将显示public区域的所有配置，包括端口、服务和接口。\",\"firewall-cmd --zone=public --list-all\"]},\"1933\":{\"h\":\"防火墙其他常用命令\"},\"1934\":{\"h\":\"查看版本：\",\"t\":[\"firewall-cmd --version\"]},\"1935\":{\"h\":\"查看帮助信息：\",\"t\":[\"firewall-cmd --help\"]},\"1936\":{\"h\":\"将设置为开机自启：\",\"t\":[\"systemctl enable firewalld\"]},\"1937\":{\"h\":\"禁止开机自启：\",\"t\":[\"systemctl disable firewalld\"]},\"1938\":{\"h\":\"是否设置为开机自启：\",\"t\":[\"systemctl is-enabled firewalld\"]},\"1939\":{\"h\":\"扩展\"},\"1940\":{\"h\":\"\",\"t\":[\"命令中如果不加zone信息，会将规则作用于默认域\",\" #查看默认域 firewall-cmd --get-default-zone\",\"public(公共) —— [默认]公网访问，不受任何限制。\",\"work(工作) —— 用于工作区。基本信任的网络，仅仅接收经过选择的连接。\",\"home(家庭) —— 用于家庭网络。基本信任的网络，仅仅接收经过选择的连接。\",\"trusted(信任) —— 接收的外部网络连接是可信任、可接受的。\",\"block(限制) —— 任何接收的网络连接都被IPv4的icmp-host-prohibited信息和IPv6的icmp6-adm-prohibited信息所拒绝。\",\"dmz(隔离区) —— 英文\\\"demilitarized zone\\\"的缩写，此区域内可公开访问，它是非安全系统与安全系统之间的缓冲区。\",\"drop(丢弃) —— 任何接收的网络数据包都被丢弃，没有任何回复。仅能有发送出去的网络连接。\",\"external(外部) —— 允许指定的外部网络进入连接，特别是为路由器启用了伪装功能的外部网。\",\"internal(内部) —— 内部访问。只限于本地访问，其他不能访问。\"]},\"1941\":{\"h\":\"基础-API文档规范\"},\"1942\":{\"h\":\"概述\",\"t\":[\"API文档是软件开发中不可或缺的一部分，它是开发者之间沟通的桥梁，也是用户使用API的指南。良好的API文档可以提高开发效率，减少沟通成本，提升用户体验。\"]},\"1943\":{\"h\":\"知识要点\"},\"1944\":{\"h\":\"1. API文档的重要性\",\"t\":[\"提高开发效率: 良好的API文档可以帮助开发者快速理解和使用API，减少学习成本。\",\"减少沟通成本: 开发者可以通过API文档了解API的功能和使用方法，减少不必要的沟通。\",\"提升用户体验: 清晰、详细的API文档可以提升用户的使用体验，减少用户的疑惑和错误。\",\"便于维护: 良好的API文档可以帮助维护人员快速理解API的设计和实现，便于后续的维护和升级。\"]},\"1945\":{\"h\":\"2. API文档的基本要素\",\"t\":[\"API描述: 简要描述API的功能和用途。\",\"接口定义: 包括接口名称、参数、返回值、异常等。\",\"使用示例: 提供API的使用示例，帮助用户快速掌握API的使用方法。\",\"注意事项: 包括API的限制、使用条件、性能考虑等。\",\"版本信息: 包括API的版本号、更新时间、更新内容等。\"]},\"1946\":{\"h\":\"3. API文档的规范\",\"t\":[\"命名规范: 包括接口名称、参数名称、返回值名称等的命名规范。\",\"格式规范: 包括文档的格式、字体、颜色、布局等的规范。\",\"内容规范: 包括文档的内容、深度、广度等的规范。\",\"更新规范: 包括文档的更新频率、更新方式、更新内容等的规范。\"]},\"1947\":{\"h\":\"4. 代码示例\"},\"1948\":{\"h\":\"接口定义示例\",\"t\":[\"/** * 用户服务接口 * 提供用户的CRUD操作 */ public interface UserService { /** * 根据ID获取用户 * @param id 用户ID * @return 用户对象 * @throws IllegalArgumentException 当ID为null或小于等于0时抛出 */ User getUserById(Long id); /** * 保存用户 * @param user 用户对象 * @return 保存后的用户对象 * @throws NullPointerException 当user为null时抛出 * @throws IllegalArgumentException 当user的名称为空或长度超过50时抛出 */ User saveUser(User user); // 省略其他方法 }\"]},\"1949\":{\"h\":\"接口实现示例\",\"t\":[\"/** * 用户服务实现类 * 实现用户的CRUD操作 */ @Service public class UserServiceImpl implements UserService { @Autowired private UserDao userDao; @Override public User getUserById(Long id) { if (id == null || id <= 0) { throw new IllegalArgumentException(\\\"ID must be not null and greater than 0\\\"); } return userDao.findById(id); } @Override public User saveUser(User user) { if (user == null) { throw new NullPointerException(\\\"User must be not null\\\"); } if (user.getName() == null || user.getName().length() > 50) { throw new IllegalArgumentException(\\\"User name must be not null and length must be less than or equal to 50\\\"); } return userDao.save(user); } // 省略其他方法 }\"]},\"1950\":{\"h\":\"知识扩展\"},\"1951\":{\"h\":\"设计思想\",\"t\":[\"API文档的设计思想是沟通和共享，它通过提供清晰、详细的API信息，促进开发者之间的沟通和协作，提高开发效率和代码质量。\"]},\"1952\":{\"h\":\"避坑指南\",\"t\":[\"不要忽略API文档的重要性，它是软件开发中不可或缺的一部分。\",\"不要提供模糊、不完整的API文档，这会导致开发者的误解和错误。\",\"不要忘记更新API文档，当API发生变化时，要及时更新文档。\",\"不要使用过于复杂的语言和结构，保持文档的简洁和清晰。\"]},\"1953\":{\"h\":\"深度思考题\",\"t\":[\"深度思考题: 为什么说API文档是软件开发中不可或缺的一部分？\",\"思考题回答: API文档是开发者之间沟通的桥梁，也是用户使用API的指南。良好的API文档可以提高开发效率，减少沟通成本，提升用户体验，便于后续的维护和升级。如果没有API文档，开发者需要花费更多的时间和精力去理解和使用API，这会导致开发效率的降低和沟通成本的增加。\",\"深度思考题: 如何编写一份良好的API文档？\",\"思考题回答: 编写一份良好的API文档需要考虑以下几点：\",\"清晰、详细的API描述和接口定义\",\"提供实用的使用示例\",\"指出注意事项和限制\",\"保持文档的简洁和清晰\",\"及时更新文档\",\"遵循相关的规范和标准\"]},\"1954\":{\"h\":\"架构-文档管理体系设计\"},\"1955\":{\"h\":\"概述\",\"t\":[\"文档管理体系是软件开发过程中不可或缺的一部分，它负责组织、存储、检索和维护项目中的所有文档。良好的文档管理体系可以提高开发效率，减少沟通成本，确保项目的顺利进行。\"]},\"1956\":{\"h\":\"知识要点\"},\"1957\":{\"h\":\"1. 文档管理体系的重要性\",\"t\":[\"提高开发效率: 良好的文档管理体系可以帮助开发者快速找到所需的文档，减少查找成本。\",\"减少沟通成本: 开发者可以通过文档管理体系了解项目的进展和需求，减少不必要的沟通。\",\"确保项目顺利进行: 良好的文档管理体系可以确保项目的所有文档都得到妥善的组织、存储、检索和维护，确保项目的顺利进行。\",\"便于后续维护: 良好的文档管理体系可以帮助维护人员快速理解项目的设计和实现，便于后续的维护和升级。\"]},\"1958\":{\"h\":\"2. 文档管理体系的基本要素\",\"t\":[\"文档分类: 根据文档的类型、用途、阶段等对文档进行分类，便于查找和管理。\",\"文档存储: 选择合适的存储方式和位置，确保文档的安全性和可用性。\",\"文档检索: 提供便捷的检索方式，帮助开发者快速找到所需的文档。\",\"文档维护: 定期更新和维护文档，确保文档的准确性和完整性。\",\"文档权限: 设置适当的文档访问权限，确保文档的安全性和保密性。\"]},\"1959\":{\"h\":\"3. 文档管理体系的设计原则\",\"t\":[\"实用性原则: 文档管理体系应该满足开发者的实际需求，便于使用和管理。\",\"系统性原则: 文档管理体系应该是一个完整的系统，包括文档的分类、存储、检索、维护和权限等方面。\",\"灵活性原则: 文档管理体系应该具有一定的灵活性，能够适应项目的变化和发展。\",\"安全性原则: 文档管理体系应该确保文档的安全性和保密性，防止文档的丢失和泄露。\",\"可扩展性原则: 文档管理体系应该具有一定的可扩展性，能够适应项目的增长和发展。\"]},\"1960\":{\"h\":\"4. 文档管理体系的实现示例\"},\"1961\":{\"h\":\"文档分类示例\",\"t\":[\"/** * 文档分类枚举 * 定义项目中常见的文档类型 */ public enum DocumentType { // 需求文档 REQUIREMENT, // 设计文档 DESIGN, // 开发文档 DEVELOPMENT, // 测试文档 TEST, // 部署文档 DEPLOYMENT, // 维护文档 MAINTENANCE }\"]},\"1962\":{\"h\":\"文档管理类示例\",\"t\":[\"/** * 文档管理类 * 提供文档的CRUD操作 */ public class DocumentManager { // 文档存储路径 private String storagePath; /** * 构造函数 * @param storagePath 文档存储路径 */ public DocumentManager(String storagePath) { this.storagePath = storagePath; } /** * 保存文档 * @param document 文档对象 * @return 保存后的文档ID * @throws NullPointerException 当document为null时抛出 * @throws IllegalArgumentException 当document的名称为空或长度超过50时抛出 */ public String saveDocument(Document document) { if (document == null) { throw new NullPointerException(\\\"Document must be not null\\\"); } if (document.getName() == null || document.getName().length() > 50) { throw new IllegalArgumentException(\\\"Document name must be not null and length must be less than or equal to 50\\\"); } // 生成文档ID String documentId = UUID.randomUUID().toString(); // 保存文档 // ... return documentId; } /** * 根据ID获取文档 * @param documentId 文档ID * @return 文档对象 * @throws IllegalArgumentException 当documentId为null或空时抛出 * @throws DocumentNotFoundException 当找不到对应的文档时抛出 */ public Document getDocumentById(String documentId) { if (documentId == null || documentId.isEmpty()) { throw new IllegalArgumentException(\\\"Document ID must be not null and not empty\\\"); } // 获取文档 // ... return document; } // 省略其他方法 }\"]},\"1963\":{\"h\":\"知识扩展\"},\"1964\":{\"h\":\"设计思想\",\"t\":[\"文档管理体系的设计思想是组织、存储、检索和维护，它通过提供清晰、详细的文档管理机制，促进开发者之间的沟通和协作，提高开发效率和代码质量。\"]},\"1965\":{\"h\":\"避坑指南\",\"t\":[\"不要忽略文档管理体系的重要性，它是软件开发中不可或缺的一部分。\",\"不要提供模糊、不完整的文档管理机制，这会导致开发者的误解和错误。\",\"不要忘记更新和维护文档管理体系，当项目发生变化时，要及时更新文档管理机制。\",\"不要使用过于复杂的语言和结构，保持文档管理体系的简洁和清晰。\"]},\"1966\":{\"h\":\"深度思考题\",\"t\":[\"深度思考题: 为什么说文档管理体系是软件开发中不可或缺的一部分？\",\"思考题回答: 文档管理体系是组织、存储、检索和维护项目文档的重要机制，它可以帮助开发者快速找到所需的文档，减少查找成本，提高开发效率。同时，文档管理体系也可以确保项目的所有文档都得到妥善的组织、存储、检索和维护，确保项目的顺利进行。如果没有文档管理体系，开发者需要花费更多的时间和精力去查找和管理文档，这会导致开发效率的降低和沟通成本的增加。\",\"深度思考题: 如何设计一个良好的文档管理体系？\",\"思考题回答: 设计一个良好的文档管理体系需要考虑以下几点：\",\"明确文档的分类标准和方法\",\"选择合适的文档存储方式和位置\",\"提供便捷的文档检索方式\",\"建立定期更新和维护文档的机制\",\"设置适当的文档访问权限\",\"确保文档管理体系的灵活性和可扩展性\",\"遵循相关的规范和标准\"]},\"1967\":{\"h\":\"生态-文档生态系统\"},\"1968\":{\"h\":\"概述\",\"t\":[\"文档生态系统是软件开发过程中不可或缺的一部分，它由文档、工具、流程和人员组成，负责文档的创建、管理、使用和维护。良好的文档生态系统可以提高开发效率，减少沟通成本，确保项目的顺利进行。\"]},\"1969\":{\"h\":\"知识要点\"},\"1970\":{\"h\":\"1. 文档生态系统的重要性\",\"t\":[\"提高开发效率: 良好的文档生态系统可以帮助开发者快速创建、管理、使用和维护文档，减少开发成本。\",\"减少沟通成本: 开发者可以通过文档生态系统了解项目的进展和需求，减少不必要的沟通。\",\"确保项目顺利进行: 良好的文档生态系统可以确保项目的所有文档都得到妥善的创建、管理、使用和维护，确保项目的顺利进行。\",\"便于后续维护: 良好的文档生态系统可以帮助维护人员快速理解项目的设计和实现，便于后续的维护和升级。\"]},\"1971\":{\"h\":\"2. 文档生态系统的基本要素\",\"t\":[\"文档: 包括需求文档、设计文档、开发文档、测试文档、部署文档、维护文档等。\",\"工具: 包括文档创建工具、文档管理工具、文档检索工具、文档转换工具等。\",\"流程: 包括文档的创建流程、审核流程、更新流程、维护流程等。\",\"人员: 包括文档的创建者、审核者、使用者、维护者等。\"]},\"1972\":{\"h\":\"3. 文档生态系统的设计原则\",\"t\":[\"实用性原则: 文档生态系统应该满足开发者的实际需求，便于使用和管理。\",\"系统性原则: 文档生态系统应该是一个完整的系统，包括文档、工具、流程和人员等方面。\",\"灵活性原则: 文档生态系统应该具有一定的灵活性，能够适应项目的变化和发展。\",\"安全性原则: 文档生态系统应该确保文档的安全性和保密性，防止文档的丢失和泄露。\",\"可扩展性原则: 文档生态系统应该具有一定的可扩展性，能够适应项目的增长和发展。\"]},\"1973\":{\"h\":\"4. 文档生态系统的实现示例\"},\"1974\":{\"h\":\"文档工具类示例\",\"t\":[\"/** * 文档工具类 * 提供文档的各种操作 */ public class DocumentTool { /** * 转换文档格式 * @param sourcePath 源文档路径 * @param targetPath 目标文档路径 * @param sourceFormat 源文档格式 * @param targetFormat 目标文档格式 * @throws NullPointerException 当sourcePath或targetPath为null时抛出 * @throws IllegalArgumentException 当sourceFormat或targetFormat不支持时抛出 * @throws IOException 当转换失败时抛出 */ public static void convertDocumentFormat(String sourcePath, String targetPath, String sourceFormat, String targetFormat) throws IOException { if (sourcePath == null || targetPath == null) { throw new NullPointerException(\\\"Source path and target path must be not null\\\"); } if (!isSupportedFormat(sourceFormat) || !isSupportedFormat(targetFormat)) { throw new IllegalArgumentException(\\\"Unsupported format\\\"); } // 转换文档格式 // ... } /** * 检查格式是否支持 * @param format 文档格式 * @return 是否支持 */ private static boolean isSupportedFormat(String format) { // 检查格式是否支持 // ... return true; } // 省略其他方法 }\"]},\"1975\":{\"h\":\"文档流程示例\",\"t\":[\"/** * 文档流程类 * 定义文档的各种流程 */ public class DocumentProcess { /** * 文档审核流程 * @param document 文档对象 * @param reviewers 审核人员列表 * @return 审核结果 * @throws NullPointerException 当document或reviewers为null时抛出 * @throws IllegalArgumentException 当reviewers为空时抛出 */ public static boolean reviewDocument(Document document, List<User> reviewers) { if (document == null || reviewers == null) { throw new NullPointerException(\\\"Document and reviewers must be not null\\\"); } if (reviewers.isEmpty()) { throw new IllegalArgumentException(\\\"Reviewers must be not empty\\\"); } // 文档审核流程 // ... return true; } // 省略其他方法 }\"]},\"1976\":{\"h\":\"知识扩展\"},\"1977\":{\"h\":\"设计思想\",\"t\":[\"文档生态系统的设计思想是协作和共享，它通过提供清晰、详细的文档生态机制，促进开发者之间的沟通和协作，提高开发效率和代码质量。\"]},\"1978\":{\"h\":\"避坑指南\",\"t\":[\"不要忽略文档生态系统的重要性，它是软件开发中不可或缺的一部分。\",\"不要提供模糊、不完整的文档生态机制，这会导致开发者的误解和错误。\",\"不要忘记更新和维护文档生态系统，当项目发生变化时，要及时更新文档生态机制。\",\"不要使用过于复杂的语言和结构，保持文档生态系统的简洁和清晰。\"]},\"1979\":{\"h\":\"深度思考题\",\"t\":[\"深度思考题: 为什么说文档生态系统是软件开发中不可或缺的一部分？\",\"思考题回答: 文档生态系统是协作和共享项目文档的重要机制，它可以帮助开发者快速创建、管理、使用和维护文档，减少开发成本，提高开发效率。同时，文档生态系统也可以确保项目的所有文档都得到妥善的创建、管理、使用和维护，确保项目的顺利进行。如果没有文档生态系统，开发者需要花费更多的时间和精力去创建、管理、使用和维护文档，这会导致开发效率的降低和沟通成本的增加。\",\"深度思考题: 如何设计一个良好的文档生态系统？\",\"思考题回答: 设计一个良好的文档生态系统需要考虑以下几点：\",\"明确文档的类型和用途\",\"选择合适的文档工具\",\"建立清晰的文档流程\",\"确定相关的人员和职责\",\"确保文档生态系统的灵活性和可扩展性\",\"遵循相关的规范和标准\"]},\"1980\":{\"h\":\"进阶-文档自动化工具\"},\"1981\":{\"h\":\"概述\",\"t\":[\"文档自动化工具是软件开发过程中不可或缺的一部分，它可以帮助开发者自动创建、管理、使用和维护文档，减少手动操作，提高开发效率。良好的文档自动化工具可以提高开发效率，减少沟通成本，确保项目的顺利进行。\"]},\"1982\":{\"h\":\"知识要点\"},\"1983\":{\"h\":\"1. 文档自动化工具的重要性\",\"t\":[\"提高开发效率: 良好的文档自动化工具可以帮助开发者自动创建、管理、使用和维护文档，减少手动操作，提高开发效率。\",\"减少沟通成本: 开发者可以通过文档自动化工具了解项目的进展和需求，减少不必要的沟通。\",\"确保项目顺利进行: 良好的文档自动化工具可以确保项目的所有文档都得到妥善的创建、管理、使用和维护，确保项目的顺利进行。\",\"便于后续维护: 良好的文档自动化工具可以帮助维护人员快速理解项目的设计和实现，便于后续的维护和升级。\"]},\"1984\":{\"h\":\"2. 文档自动化工具的基本类型\",\"t\":[\"文档生成工具: 自动生成文档，如JavaDoc、Swagger等。\",\"文档管理工具: 自动管理文档，如Confluence、GitHub Wiki等。\",\"文档检索工具: 自动检索文档，如Elasticsearch、Solr等。\",\"文档转换工具: 自动转换文档格式，如Pandoc、Apache POI等。\",\"文档测试工具: 自动测试文档的正确性和完整性，如DocTest、Sphinx等。\"]},\"1985\":{\"h\":\"3. 文档自动化工具的设计原则\",\"t\":[\"实用性原则: 文档自动化工具应该满足开发者的实际需求，便于使用和管理。\",\"系统性原则: 文档自动化工具应该是一个完整的系统，包括文档的生成、管理、检索、转换和测试等方面。\",\"灵活性原则: 文档自动化工具应该具有一定的灵活性，能够适应项目的变化和发展。\",\"安全性原则: 文档自动化工具应该确保文档的安全性和保密性，防止文档的丢失和泄露。\",\"可扩展性原则: 文档自动化工具应该具有一定的可扩展性，能够适应项目的增长和发展。\"]},\"1986\":{\"h\":\"4. 文档自动化工具的实现示例\"},\"1987\":{\"h\":\"文档生成工具示例\",\"t\":[\"/** * 文档生成工具类 * 自动生成文档 */ public class DocumentGenerator { /** * 生成API文档 * @param sourcePath 源代码路径 * @param targetPath 目标文档路径 * @param format 文档格式 * @throws NullPointerException 当sourcePath或targetPath为null时抛出 * @throws IllegalArgumentException 当format不支持时抛出 * @throws IOException 当生成失败时抛出 */ public static void generateApiDocument(String sourcePath, String targetPath, String format) throws IOException { if (sourcePath == null || targetPath == null) { throw new NullPointerException(\\\"Source path and target path must be not null\\\"); } if (!isSupportedFormat(format)) { throw new IllegalArgumentException(\\\"Unsupported format\\\"); } // 生成API文档 // ... } /** * 检查格式是否支持 * @param format 文档格式 * @return 是否支持 */ private static boolean isSupportedFormat(String format) { // 检查格式是否支持 // ... return true; } // 省略其他方法 }\"]},\"1988\":{\"h\":\"文档测试工具示例\",\"t\":[\"/** * 文档测试工具类 * 自动测试文档 */ public class DocumentTester { /** * 测试文档的正确性和完整性 * @param documentPath 文档路径 * @return 测试结果 * @throws NullPointerException 当documentPath为null时抛出 * @throws IOException 当测试失败时抛出 */ public static boolean testDocument(String documentPath) throws IOException { if (documentPath == null) { throw new NullPointerException(\\\"Document path must be not null\\\"); } // 测试文档的正确性和完整性 // ... return true; } // 省略其他方法 }\"]},\"1989\":{\"h\":\"知识扩展\"},\"1990\":{\"h\":\"设计思想\",\"t\":[\"文档自动化工具的设计思想是自动化和智能化，它通过提供清晰、详细的文档自动化机制，减少手动操作，提高开发效率和代码质量。\"]},\"1991\":{\"h\":\"避坑指南\",\"t\":[\"不要忽略文档自动化工具的重要性，它是软件开发中不可或缺的一部分。\",\"不要提供模糊、不完整的文档自动化机制，这会导致开发者的误解和错误。\",\"不要忘记更新和维护文档自动化工具，当项目发生变化时，要及时更新文档自动化机制。\",\"不要使用过于复杂的语言和结构，保持文档自动化工具的简洁和清晰。\"]},\"1992\":{\"h\":\"深度思考题\",\"t\":[\"深度思考题: 为什么说文档自动化工具是软件开发中不可或缺的一部分？\",\"思考题回答: 文档自动化工具是自动化和智能化创建、管理、使用和维护项目文档的重要机制，它可以帮助开发者减少手动操作，提高开发效率。同时，文档自动化工具也可以确保项目的所有文档都得到妥善的创建、管理、使用和维护，确保项目的顺利进行。如果没有文档自动化工具，开发者需要花费更多的时间和精力去手动创建、管理、使用和维护文档，这会导致开发效率的降低和沟通成本的增加。\",\"深度思考题: 如何设计一个良好的文档自动化工具？\",\"思考题回答: 设计一个良好的文档自动化工具需要考虑以下几点：\",\"明确文档自动化的需求和目标\",\"选择合适的文档自动化技术和方法\",\"建立清晰的文档自动化流程\",\"确保文档自动化工具的灵活性和可扩展性\",\"测试和验证文档自动化工具的正确性和有效性\",\"遵循相关的规范和标准\"]},\"1993\":{\"h\":\"基础-命名规范\",\"t\":[\"编程规范的重要性 编程规范是指导开发者编写清晰、可维护代码的规则集合。它们不仅帮助减少团队沟通成本，还有助于避免常见的编程错误，提高系统稳定性和性能。\"]},\"1994\":{\"h\":\"1. 命名基本原则\",\"t\":[\"清晰性：名称应准确描述其功能或含义\",\"一致性：项目内保持统一的命名风格\",\"简洁性：避免过长或冗余的命名\",\"有意义：避免无意义的缩写或拼音\"]},\"1995\":{\"h\":\"2. 具体命名规则\"},\"1996\":{\"h\":\"2.1 类名\",\"t\":[\"使用PascalCase命名法（首字母大写）\",\"采用名词或名词短语\",\"示例：\",\"public class UserService { ... } public class OrderRepository { ... }\"]},\"1997\":{\"h\":\"2.2 方法名\",\"t\":[\"使用camelCase命名法（首字母小写）\",\"采用动词或动词短语\",\"示例：\",\"public void getUserById(Long id) { ... } public boolean validateOrder(Order order) { ... }\"]},\"1998\":{\"h\":\"2.3 变量名\",\"t\":[\"使用camelCase命名法\",\"采用名词\",\"避免使用单字母变量（除常见循环变量i,j,k外）\",\"示例：\",\"String userName; int orderCount; List<Product> productList;\"]},\"1999\":{\"h\":\"2.4 常量名\",\"t\":[\"使用UPPER_SNAKE_CASE命名法\",\"全部大写，单词间用下划线分隔\",\"示例：\",\"public static final int MAX_RETRY_COUNT = 3; public static final String DEFAULT_ENCODING = \\\"UTF-8\\\";\"]},\"2000\":{\"h\":\"2.5 包名\",\"t\":[\"全部小写\",\"采用反转域名形式\",\"示例：\",\"com.company.project.service com.company.project.util\"]},\"2001\":{\"h\":\"3. 避坑指南\",\"t\":[\"避免使用Java关键字作为标识符\",\"不要使用拼音与英文混合命名\",\"避免过度缩写，保持名称可读性\",\"集合类型变量建议使用复数形式\"]},\"2002\":{\"h\":\"4. 命名规范检查工具\",\"t\":[\"IDE插件：Checkstyle、SonarLint\",\"构建工具集成：Maven Checkstyle Plugin\"]},\"2003\":{\"h\":\"架构-架构设计规范\"},\"2004\":{\"h\":\"1. 架构设计基本原则\"},\"2005\":{\"h\":\"1.1 SOLID原则在架构中的应用\",\"t\":[\"单一职责原则：每个模块只负责一个业务领域\",\"开闭原则：通过接口和抽象类实现扩展开放、修改关闭\",\"里氏替换原则：子类必须能替换父类且不影响功能正确性\",\"接口隔离原则：客户端不应依赖不需要的接口\",\"依赖倒置原则：依赖抽象而非具体实现\"]},\"2006\":{\"h\":\"2. 分层架构设计\"},\"2007\":{\"h\":\"2.1 经典四层架构\",\"t\":[\"表示层：处理HTTP请求和响应\",\"业务逻辑层：实现核心业务规则\",\"数据访问层：与数据库交互\",\"领域模型层：定义业务实体\",\"// 领域模型层 public class Order { private Long id; private User user; private List<OrderItem> items; // 领域行为 public BigDecimal calculateTotal() { return items.stream() .map(item -> item.getPrice().multiply(new BigDecimal(item.getQuantity()))) .reduce(BigDecimal.ZERO, BigDecimal::add); } } // 数据访问层 public interface OrderRepository extends JpaRepository<Order, Long> { List<Order> findByUserId(Long userId); } // 业务逻辑层 @Service public class OrderService { private final OrderRepository orderRepository; private final InventoryService inventoryService; // 构造函数注入 public OrderService(OrderRepository orderRepository, InventoryService inventoryService) { this.orderRepository = orderRepository; this.inventoryService = inventoryService; } @Transactional public Order createOrder(OrderRequest request) { // 业务逻辑实现 } } // 表示层 @RestController @RequestMapping(\\\"/api/orders\\\") public class OrderController { private final OrderService orderService; public OrderController(OrderService orderService) { this.orderService = orderService; } @PostMapping public ResponseEntity<OrderDTO> createOrder(@RequestBody @Valid OrderRequest request) { Order order = orderService.createOrder(request); return ResponseEntity.status(HttpStatus.CREATED) .body(OrderMapper.toDTO(order)); } }\"]},\"2008\":{\"h\":\"3. 微服务架构设计\"},\"2009\":{\"h\":\"3.1 服务拆分策略\",\"t\":[\"按业务领域边界拆分\",\"考虑数据自治和团队结构\",\"避免分布式事务\"]},\"2010\":{\"h\":\"3.2 服务通信模式\",\"t\":[\"同步通信：REST API、gRPC\",\"异步通信：消息队列（Kafka、RabbitMQ）\"]},\"2011\":{\"h\":\"4. 架构安全性设计\"},\"2012\":{\"h\":\"4.1 认证与授权\",\"t\":[\"使用OAuth 2.0/OpenID Connect实现认证\",\"基于角色的访问控制(RBAC)\",\"API权限粒度控制\",\"@Configuration @EnableWebSecurity public class SecurityConfig { @Bean public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception { http .authorizeHttpRequests(auth -> auth .requestMatchers(\\\"/api/public/**\\\").permitAll() .requestMatchers(\\\"/api/admin/**\\\").hasRole(\\\"ADMIN\\\") .requestMatchers(\\\"/api/orders/**\\\").hasAnyRole(\\\"USER\\\", \\\"ADMIN\\\") .anyRequest().authenticated() ) .oauth2ResourceServer(oauth2 -> oauth2.jwt()); return http.build(); } }\"]},\"2013\":{\"h\":\"5. 避坑指南\",\"t\":[\"避免过度设计：YAGNI(You Aren't Gonna Need It)原则\",\"警惕分布式事务陷阱，优先使用最终一致性\",\"避免服务间紧耦合，通过API版本控制实现兼容\",\"防止架构腐化，定期进行代码和架构评审\"]},\"2014\":{\"h\":\"6. 深度思考题\",\"t\":[\"在微服务架构设计中，如何平衡服务粒度和系统复杂性？请结合具体业务场景分析服务拆分的决策过程和演进策略。 服务粒度平衡需考虑以下因素：\",\"业务边界清晰度：通过领域驱动设计(DDD)识别限界上下文\",\"团队结构匹配度：遵循康威定律，服务边界与团队结构对齐\",\"数据自治程度：每个服务应拥有私有数据存储\",\"性能与可用性：避免过多服务间调用导致的性能损耗\",\"变更频率：将变更频率相似的功能放在同一服务\",\"演进策略：从小粒度单体开始，随业务增长逐步拆分为微服务，通过API网关和服务发现实现平滑过渡。\"]},\"2015\":{\"h\":\"生态-规范落地与工具链\"},\"2016\":{\"h\":\"1. 规范自动化工具链\"},\"2017\":{\"h\":\"1.1 静态代码分析工具\",\"t\":[\"Checkstyle：强制代码风格规范\",\"PMD：检测代码缺陷和潜在问题\",\"FindBugs/SpotBugs：字节码级别的缺陷检测\",\"SonarQube：综合代码质量平台，支持多语言\"]},\"2018\":{\"h\":\"1.2 工具集成配置\",\"t\":[\"<!-- pom.xml 中集成Checkstyle --> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-checkstyle-plugin</artifactId> <version>3.2.0</version> <configuration> <configLocation>checkstyle.xml</configLocation> <failOnViolation>true</failOnViolation> <violationSeverity>error</violationSeverity> </configuration> <executions> <execution> <phase>validate</phase> <goals> <goal>check</goal> </goals> </execution> </executions> </plugin>\"]},\"2019\":{\"h\":\"2. CI/CD中的规范集成\"},\"2020\":{\"h\":\"2.1 GitHub Actions工作流配置\",\"t\":[\"# .github/workflows/code-quality.yml name: Code Quality on: push: branches: [ main, develop ] pull_request: branches: [ main, develop ] jobs: code-quality: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 - name: Set up JDK 17 uses: actions/setup-java@v3 with: java-version: '17' distribution: 'temurin' - name: Checkstyle run: mvn checkstyle:check - name: PMD run: mvn pmd:check - name: SonarQube Scan run: mvn sonar:sonar -Dsonar.projectKey=my-project -Dsonar.host.url=${{ secrets.SONAR_URL }} -Dsonar.login=${{ secrets.SONAR_TOKEN }}\"]},\"2021\":{\"h\":\"2.2 质量门禁设置\",\"t\":[\"代码覆盖率最低阈值：80%\",\"不允许阻断性bug\",\"不允许安全漏洞\",\"代码重复率低于5%\"]},\"2022\":{\"h\":\"3. 代码评审流程与规范执行\"},\"2023\":{\"h\":\"3.1 评审 checklist\",\"t\":[\"代码是否符合项目命名规范\",\"是否遵循架构设计原则\",\"是否包含适当的单元测试\",\"是否处理了异常情况\",\"性能和安全性考虑\"]},\"2024\":{\"h\":\"3.2 自动化评审工具\",\"t\":[\"Crucible：专业代码评审工具\",\"GitHub Pull Request：集成代码评审功能\",\"GitLab Merge Request：内置评审流程\"]},\"2025\":{\"h\":\"4. 规范合规度量与改进\"},\"2026\":{\"h\":\"4.1 关键指标监控\",\"t\":[\"规范违规数量趋势\",\"代码评审通过率\",\"自动化工具覆盖率\",\"规范执行耗时\"]},\"2027\":{\"h\":\"4.2 持续改进流程\",\"t\":[\"定期审计规范执行情况\",\"收集团队反馈优化规范\",\"更新工具配置适应新规范\",\"培训新规范和工具使用\",\"// 规范改进示例：自定义SonarQube规则 public class CustomSonarRule extends IssuableSubscriptionVisitor { @Override public List<Tree.Kind> nodesToVisit() { return Collections.singletonList(Tree.Kind.METHOD); } @Override public void visitNode(Tree tree) { MethodTree methodTree = (MethodTree) tree; if (methodTree.block() == null) { // 抽象方法不需要检查 return; } if (methodTree.parameters().size() > 5) { reportIssue(methodTree.simpleName(), \\\"方法参数不应超过5个，考虑使用DTO封装\\\"); } } }\"]},\"2028\":{\"h\":\"5. 避坑指南\",\"t\":[\"避免过度自动化：保留必要的人工评审\",\"规范不是一成不变的：定期回顾和更新\",\"工具只是辅助：培养团队规范意识更重要\",\"平衡严格性和开发效率：避免规范成为负担\"]},\"2029\":{\"h\":\"6. 深度思考题\",\"t\":[\"在大型分布式团队中，如何确保不同团队遵循统一的编码规范？请设计一套规范落地的完整解决方案，包括工具选择、流程设计和文化建设。\",\"大型分布式团队规范落地解决方案：\",\"分层规范体系：\",\"公司级基础规范（必须遵守）\",\"业务线特定规范（灵活扩展）\",\"项目级补充规范（按需定制）\",\"工具链策略：\",\"统一的规范配置库（Git管理）\",\"容器化的规范检查环境\",\"规范自动同步机制\",\"流程保障：\",\"规范培训与认证机制\",\"跨团队规范委员会\",\"定期规范审计与改进\",\"文化建设：\",\"规范大使制度\",\"规范执行优秀团队表彰\",\"技术分享会中的规范实践案例\",\"通过技术手段（自动化工具）+ 管理手段（流程与文化）相结合，实现规范的有效落地。\"]},\"2030\":{\"h\":\"进阶-代码规范\"},\"2031\":{\"h\":\"1. 代码风格规范\"},\"2032\":{\"h\":\"1.1 缩进与空格\",\"t\":[\"使用4个空格进行缩进，不使用Tab\",\"运算符两侧各保留一个空格\",\"逗号后保留一个空格\",\"示例：\",\"if (user != null && user.isActive()) { processOrder(user, order); }\"]},\"2033\":{\"h\":\"1.2 大括号位置\",\"t\":[\"采用K&R风格，左大括号与语句同行\",\"右大括号单独成行，与对应语句对齐\",\"示例：\",\"public void processData() { // 方法体 if (condition) { // 条件体 } else { // else体 } }\"]},\"2034\":{\"h\":\"2. 注释规范\"},\"2035\":{\"h\":\"2.1 Javadoc注释\",\"t\":[\"类、公共方法、接口必须包含Javadoc\",\"包含作者、版本、参数说明、返回值和异常信息\",\"示例：\",\"/** * 用户服务类，处理用户相关业务逻辑 * * @author 架构师团队 * @version 1.0.0 * @since JDK 17 */ public class UserService { /** * 根据ID获取用户信息 * * @param userId 用户ID * @return 用户信息对象 * @throws UserNotFoundException 当用户不存在时抛出 */ public User getUserById(Long userId) throws UserNotFoundException { // 方法实现 } }\"]},\"2036\":{\"h\":\"3. 异常处理规范\"},\"2037\":{\"h\":\"3.1 异常使用原则\",\"t\":[\"避免捕获通用异常（Exception），应捕获具体异常\",\"不忽略异常，至少记录日志\",\"自定义业务异常继承RuntimeException\",\"示例：\",\"try { // 可能抛出IO异常的代码 fileReader.read(buffer); } catch (FileNotFoundException e) { log.error(\\\"文件未找到: {}\\\", filePath, e); throw new BusinessException(\\\"配置文件缺失\\\", e); } catch (IOException e) { log.error(\\\"文件读取失败: {}\\\", filePath, e); throw new SystemException(\\\"系统IO错误\\\", e); }\",\"可视化规则\"]},\"2038\":{\"h\":\"4. 并发编程规范\"},\"2039\":{\"h\":\"4.1 线程安全\",\"t\":[\"共享可变状态必须进行同步\",\"优先使用并发容器（ConcurrentHashMap）而非同步容器（Hashtable）\",\"使用原子类（AtomicInteger）替代手动同步\",\"示例：\",\"// 推荐 private final ConcurrentMap<String, Object> cache = new ConcurrentHashMap<>(); private final AtomicInteger counter = new AtomicInteger(0); // 不推荐 private final Map<String, Object> unsafeCache = new HashMap<>();\"]},\"2040\":{\"h\":\"5. 避坑指南\",\"t\":[\"避免在循环中创建对象\",\"慎用static关键字，防止内存泄漏\",\"集合初始化时指定初始容量\",\"关闭资源使用try-with-resources\"]},\"2041\":{\"h\":\"6. 深度思考题\",\"t\":[\"在高并发场景下，如何平衡代码规范性和性能优化需求？请举例说明在遵循编码规范的同时进行性能调优的实践方法。 在高并发场景下，可通过以下方式平衡规范性和性能：\",\"使用不可变对象减少同步需求\",\"合理使用线程池而非手动创建线程\",\"采用延迟初始化减少启动开销\",\"使用本地缓存减少远程调用 例如：通过ConcurrentHashMap实现高效缓存，既保证线程安全又提供良好性能。\"]},\"2042\":{\"h\":\"7. 代码规范检查工具配置\",\"t\":[\"以下是Checkstyle配置示例，用于强制实施上述规范：\",\"<module name=\\\"Indentation\\\"> <property name=\\\"basicOffset\\\" value=\\\"4\\\"/> <property name=\\\"braceAdjustment\\\" value=\\\"0\\\"/> </module> <module name=\\\"JavadocMethod\\\"> <property name=\\\"scope\\\" value=\\\"public\\\"/> </module>\"]},\"2043\":{\"h\":\"8. 单元测试规范\"},\"2044\":{\"h\":\"8.1 单元测试基本原则\",\"t\":[\"AIR原则：自动化（Automatic）、独立性（Independent）、可重复执行（Repeatable）\",\"测试用例应独立运行，不依赖外部资源和其他测试用例\",\"测试结果应稳定可靠，不受环境影响\"]},\"2045\":{\"h\":\"8.2 测试范围与要求\",\"t\":[\"所有业务逻辑代码必须编写单元测试\",\"核心模块代码覆盖率不低于80%\",\"测试粒度应为方法级别\",\"测试目录结构应与源码保持一致：src/test/java\"]},\"2046\":{\"h\":\"8.3 测试方法命名规范\",\"t\":[\"使用test[MethodName][Scenario][ExpectedResult]格式\",\"示例：\",\"public void testCalculateTotal_withDiscount_returnsDiscountedPrice() { // 测试实现 }\"]},\"2047\":{\"h\":\"8.4 BCDE测试原则\",\"t\":[\"边界值测试（Boundary Value）：测试输入输出的边界条件\",\"正确输入测试（Correct Input）：验证正常业务场景\",\"设计规范测试（Design Specification）：验证代码符合设计规范\",\"错误输入测试（Error Input）：验证异常处理机制\",\"@Test void testCreateOrder_withInvalidProductId_throwsBusinessException() { // 准备测试数据 OrderRequest request = new OrderRequest(); request.setProductId(null); request.setQuantity(1); // 执行测试并验证结果 assertThrows(BusinessException.class, () -> orderService.createOrder(request)); }\"]},\"2048\":{\"h\":\"8.5 数据库测试规范\",\"t\":[\"使用内存数据库（如H2）进行单元测试\",\"测试数据应自动创建和清理\",\"事务测试应使用@Transactional注解确保自动回滚\"]},\"2049\":{\"h\":\"9. 错误码规范\"},\"2050\":{\"h\":\"9.1 错误码格式\",\"t\":[\"采用5位字符串格式：A-BBBB\",\"A：1位字母，表示错误来源（如B-业务错误，S-系统错误）\",\"BBBB：4位数字，表示具体错误编号\",\"示例：B0001（业务错误-参数验证失败），S0002（系统错误-数据库连接失败）\"]},\"2051\":{\"h\":\"9.2 错误码设计原则\",\"t\":[\"快速溯源：通过错误码可直接定位错误类型和模块\",\"扩展性：预留一定区间给新增业务模块\",\"避免语义过载：一个错误码对应一种具体错误场景\",\"禁止包含版本号：错误码不应体现版本信息\",\"public enum ErrorCode { // 业务错误（B开头） PARAM_VALIDATION_FAILED(\\\"B0001\\\", \\\"参数验证失败\\\"), RESOURCE_NOT_FOUND(\\\"B0002\\\", \\\"资源不存在\\\"), // 系统错误（S开头） DB_CONNECTION_ERROR(\\\"S0001\\\", \\\"数据库连接错误\\\"), CACHE_OPERATION_FAILED(\\\"S0002\\\", \\\"缓存操作失败\\\"); private final String code; private final String message; ErrorCode(String code, String message) { this.code = code; this.message = message; } // getter方法 public String getCode() { return code; } public String getMessage() { return message; } }\"]},\"2052\":{\"h\":\"10. NPE防护规范\"},\"2053\":{\"h\":\"10.1 常见NPE场景\",\"t\":[\"返回null的方法调用链\",\"自动拆箱null的包装类型\",\"集合中存放null元素\",\"远程调用返回null\",\"Optional.get()在值为空时调用\",\"JSON反序列化可能产生null\"]},\"2054\":{\"h\":\"10.2 NPE防护措施\",\"t\":[\"使用Optional类包装可能为null的返回值\",\"集合初始化时避免null，使用空集合替代\",\"方法参数使用@NonNull注解并进行前置校验\",\"使用Objects.requireNonNull()进行空值检查\",\"优先使用Java 8+的Stream API和Optional API\",\"// 推荐：使用Optional避免NPE public Optional<User> findUserById(Long id) { // 数据库查询逻辑 User user = userRepository.findById(id); return Optional.ofNullable(user); } // 调用方处理 User user = findUserById(1L) .orElseThrow(() -> new UserNotFoundException(\\\"用户不存在\\\")); // 集合初始化 List<String> list = new ArrayList<>(); // 而非 null // 参数校验 public void processOrder(Order order) { Objects.requireNonNull(order, \\\"订单对象不能为空\\\"); // 业务逻辑 }\"]},\"2055\":{\"h\":\"8.5 数据库测试规范\",\"t\":[\"使用内存数据库（如H2）进行单元测试\",\"测试数据应自动创建和清理\",\"事务测试应使用@Transactional注解确保自动回滚\"]},\"2056\":{\"h\":\"11. 集合处理规范\"},\"2057\":{\"h\":\"11.1 集合初始化\",\"t\":[\"明确指定集合初始容量，避免频繁扩容\",\"使用接口而非实现类声明集合变量\",\"禁止使用new ArrayList()无参构造器初始化已知大小的集合\",\"// 推荐 List<User> users = new ArrayList<>(10); // 已知需要存储10个元素 Map<String, Object> config = new HashMap<>(4); // 已知需要存储4个键值对 // 不推荐 List<User> badUsers = new ArrayList<>(); // 已知大小却不指定容量 ArrayList<User> notInterface = new ArrayList<>(); // 使用实现类声明\"]},\"2058\":{\"h\":\"11.2 集合判空\",\"t\":[\"使用Collection.isEmpty()判断集合是否为空，而非size() == 0\",\"集合为null时必须显式处理，避免NPE\",\"// 推荐 if (CollectionUtils.isEmpty(users)) { // 使用工具类处理可能为null的情况 return; } // 不推荐 if (users.size() == 0) { // 无法处理users为null的情况 return; }\"]},\"2059\":{\"h\":\"11.3 集合遍历\",\"t\":[\"避免在遍历过程中修改集合结构（添加/删除元素）\",\"优先使用增强for循环或Stream API遍历集合\",\"遍历Map时根据场景选择合适的方式（keySet/entrySet/values）\",\"// 推荐 for (User user : users) { // 增强for循环 process(user); } users.forEach(user -> process(user)); // forEach方法 Map<String, User> userMap = new HashMap<>(); for (Map.Entry<String, User> entry : userMap.entrySet()) { // 遍历键值对 String key = entry.getKey(); User value = entry.getValue(); // 处理逻辑 }\"]},\"2060\":{\"h\":\"12. 控制语句规范\"},\"2061\":{\"h\":\"12.1 if-else语句\",\"t\":[\"避免超过3层的if-else嵌套，考虑使用卫语句、策略模式等优化\",\"优先处理异常情况或特殊情况，尽早返回\",\"条件表达式中避免否定判断\",\"// 推荐：卫语句优化多层嵌套 public void processOrder(Order order) { if (order == null) { log.error(\\\"订单对象为空\\\"); return; } if (!order.isValid()) { log.error(\\\"订单无效: {}\\\", order.getId()); return; } // 正常业务逻辑 doProcess(order); } // 不推荐：深层嵌套 public void badProcessOrder(Order order) { if (order != null) { if (order.isValid()) { // 业务逻辑 } else { log.error(\\\"订单无效\\\"); } } else { log.error(\\\"订单为空\\\"); } }\"]},\"2062\":{\"h\":\"12.2 switch-case语句\",\"t\":[\"每个case必须以break/return/throw结束，或使用注释说明穿透意图\",\"必须包含default分支，处理意外情况\",\"JDK 17+推荐使用switch表达式\",\"// 推荐：switch表达式（JDK 17+） String result = switch (status) { case PENDING -> \\\"待处理\\\"; case PROCESSING -> \\\"处理中\\\"; case COMPLETED -> \\\"已完成\\\"; case CANCELLED -> \\\"已取消\\\"; default -> { log.warn(\\\"未知状态: {}\\\", status); yield \\\"未知状态\\\"; } }; // 传统switch语句 switch (type) { case TYPE_A: handleTypeA(); break; case TYPE_B: handleTypeB(); break; default: handleDefault(); break; }\"]},\"2063\":{\"h\":\"12.2 数据库测试规范\",\"t\":[\"使用内存数据库（如H2）进行单元测试\",\"测试数据应自动创建和清理\",\"事务测试应使用@Transactional注解确保自动回滚\"]},\"2064\":{\"h\":\"13. 安全规约\"},\"2065\":{\"h\":\"13.1 输入验证\",\"t\":[\"所有外部输入必须进行验证，包括参数、请求头、Cookie等\",\"使用正则表达式或验证框架（如Hibernate Validator）进行输入校验\",\"验证失败时应返回明确错误信息，不暴露系统实现细节\",\"@PostMapping(\\\"/users\\\") public ResponseEntity<UserDTO> createUser(@RequestBody @Valid UserRequest request) { // @Valid触发验证，验证规则在UserRequest中定义 return ResponseEntity.status(HttpStatus.CREATED) .body(userService.createUser(request)); } // UserRequest类 public class UserRequest { @NotBlank(message = \\\"用户名不能为空\\\") @Pattern(regexp = \\\"^[a-zA-Z0-9_]{4,20}$\\\", message = \\\"用户名只能包含字母、数字和下划线，长度4-20位\\\") private String username; @NotBlank(message = \\\"密码不能为空\\\") @Length(min = 8, max = 32, message = \\\"密码长度必须为8-32位\\\") private String password; // getter和setter }\"]},\"2066\":{\"h\":\"13.2 SQL注入防护\",\"t\":[\"禁止直接拼接SQL字符串，必须使用参数化查询\",\"优先使用ORM框架（MyBatis、JPA）的参数绑定功能\",\"避免使用动态SQL，如必须使用应严格过滤输入内容\",\"// 推荐 @Select(\\\"SELECT * FROM user WHERE username = #{username}\\\") User findByUsername(String username); // 不推荐 String sql = \\\"SELECT * FROM user WHERE username = '\\\" + username + \\\"'\\\"; statement.executeQuery(sql);\"]},\"2067\":{\"h\":\"13.3 XSS防护\",\"t\":[\"输出HTML内容时必须进行转义\",\"使用安全的模板引擎（如Thymeleaf自动转义）\",\"对用户输入的HTML内容使用白名单过滤（如OWASP AntiSamy）\"]},\"2068\":{\"h\":\"13.4 敏感信息保护\",\"t\":[\"密码必须使用加密存储（如BCrypt、Argon2）\",\"传输敏感信息必须使用HTTPS\",\"日志中禁止记录明文密码、身份证号等敏感信息\",\"// 密码加密存储 @Service public class UserService { private final PasswordEncoder passwordEncoder = new BCryptPasswordEncoder(); public User createUser(UserRequest request) { User user = new User(); user.setUsername(request.getUsername()); // 加密密码 user.setPassword(passwordEncoder.encode(request.getPassword())); return userRepository.save(user); } }\"]},\"2069\":{\"h\":\"14. 日志规范\"},\"2070\":{\"h\":\"14.1 日志级别使用\",\"t\":[\"ERROR：影响系统运行的错误，需要立即处理\",\"WARN：不影响主流程但需关注的异常情况\",\"INFO：重要业务操作、系统启动/关闭等关键事件\",\"DEBUG：开发调试信息，生产环境默认关闭\",\"TRACE：详细跟踪信息，仅在特定问题排查时开启\"]},\"2071\":{\"h\":\"14.2 日志内容规范\",\"t\":[\"日志应包含时间、日志级别、线程名、类名、具体信息\",\"异常日志必须包含完整堆栈信息\",\"避免重复日志，确保日志唯一性\",\"日志信息应清晰、完整、无二义性\",\"// 推荐 log.info(\\\"用户[{}]成功登录系统，IP地址：{}\\\", username, ipAddress); log.error(\\\"订单[{}]处理失败，原因：{}\\\", orderId, e.getMessage(), e); // 不推荐 log.info(\\\"登录成功\\\"); // 信息不完整 log.error(e); // 缺少业务上下文 log.debug(\\\"用户\\\" + username + \\\"登录失败\\\"); // 字符串拼接，性能差\"]},\"2072\":{\"h\":\"14.3 日志工具选择与配置\",\"t\":[\"统一使用SLF4J作为日志门面，底层实现可选用Logback/Log4j2\",\"生产环境日志应滚动输出，避免单个文件过大\",\"设置合理的日志保留策略，兼顾问题排查和磁盘空间\",\"<!-- Logback配置示例 --> <appender name=\\\"ROLLING_FILE\\\" class=\\\"ch.qos.logback.core.rolling.RollingFileAppender\\\"> <file>logs/application.log</file> <rollingPolicy class=\\\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\\\"> <fileNamePattern>logs/application.%d{yyyy-MM-dd}.log</fileNamePattern> <maxHistory>30</maxHistory> <!-- 保留30天日志 --> </rollingPolicy> <encoder> <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern> </encoder> </appender>\"]},\"2073\":{\"h\":\"Java基础-关键字\"},\"2074\":{\"h\":\"概述\",\"t\":[\"关键字是Java语言中具有特殊含义的保留单词，它们不能被用作标识符（变量名、类名、方法名等）。掌握Java关键字是学习Java语法的基础，本章节将系统梳理Java中的关键字分类及核心用法。\"]},\"2075\":{\"h\":\"知识要点\"},\"2076\":{\"h\":\"1. 访问控制关键字\",\"t\":[\"Java提供了四个访问控制关键字，用于控制类、变量、方法的访问权限：\",\"public class AccessControlDemo { // 公共访问级别，任何地方都可以访问 public String publicVar = \\\"public\\\"; // 受保护访问级别，同一包或子类可以访问 protected String protectedVar = \\\"protected\\\"; // 默认访问级别，同一包可以访问 String defaultVar = \\\"default\\\"; // 私有访问级别，只有本类可以访问 private String privateVar = \\\"private\\\"; }\"]},\"2077\":{\"h\":\"2. 类与对象相关关键字\",\"t\":[\"这些关键字用于定义类、对象以及它们之间的关系：\",\"// class: 定义类 public class Person { // static: 静态成员，属于类而不是实例 static String className = \\\"Person\\\"; // final: 最终的，不可修改 final String name; // this: 引用当前对象 public Person(String name) { this.name = name; } // super: 引用父类 public void printInfo() { System.out.println(\\\"Name: \\\" + name); } } // interface: 定义接口 interface Animal { void eat(); } // implements: 实现接口 class Dog implements Animal { @Override public void eat() { System.out.println(\\\"Dog eats骨头\\\"); } } // extends: 继承类 class Puppy extends Dog { @Override public void eat() { super.eat(); // 调用父类方法 System.out.println(\\\"Puppy eats小狗粮\\\"); } }\"]},\"2078\":{\"h\":\"3. 流程控制关键字\",\"t\":[\"这些关键字用于控制程序的执行流程：\",\"public class FlowControlDemo { public void controlFlow() { // if-else: 条件判断 int a = 10; if (a > 5) { System.out.println(\\\"a > 5\\\"); } else if (a == 5) { System.out.println(\\\"a = 5\\\"); } else { System.out.println(\\\"a < 5\\\"); } // for: 循环 for (int i = 0; i < 5; i++) { System.out.println(\\\"i = \\\" + i); } // while: 循环 int j = 0; while (j < 5) { System.out.println(\\\"j = \\\" + j); j++; } // do-while: 循环 int k = 0; do { System.out.println(\\\"k = \\\" + k); k++; } while (k < 5); // switch-case: 多条件分支 int month = 3; switch (month) { case 1: System.out.println(\\\"一月\\\"); break; case 2: System.out.println(\\\"二月\\\"); break; case 3: System.out.println(\\\"三月\\\"); break; default: System.out.println(\\\"其他月份\\\"); } // break: 跳出循环 for (int m = 0; m < 10; m++) { if (m == 5) { break; } System.out.println(\\\"m = \\\" + m); } // continue: 跳过当前循环 for (int n = 0; n < 10; n++) { if (n == 5) { continue; } System.out.println(\\\"n = \\\" + n); } } }\"]},\"2079\":{\"h\":\"4. 异常处理关键字\",\"t\":[\"这些关键字用于处理程序运行过程中的异常：\",\"public class ExceptionHandlingDemo { public void handleException() { try { // 可能抛出异常的代码 int result = 10 / 0; } catch (ArithmeticException e) { // 捕获特定异常 System.out.println(\\\"算术异常: \\\" + e.getMessage()); } catch (Exception e) { // 捕获所有异常 System.out.println(\\\"发生异常: \\\" + e.getMessage()); } finally { // 无论是否发生异常都会执行 System.out.println(\\\"程序继续执行\\\"); } } // throws: 声明方法可能抛出的异常 public void declareException() throws Exception { throw new Exception(\\\"抛出异常\\\"); } }\"]},\"2080\":{\"h\":\"5. 变量类型关键字\",\"t\":[\"这些关键字用于定义变量的类型：\",\"public class VariableTypeDemo { // 基本类型 byte b = 10; short s = 100; int i = 1000; long l = 10000L; float f = 3.14f; double d = 3.14159; char c = 'A'; boolean bool = true; // 引用类型 String str = \\\"Hello\\\"; int[] arr = {1, 2, 3}; }\"]},\"2081\":{\"h\":\"6. 保留关键字\",\"t\":[\"这些关键字是Java保留的，目前没有特定用途，但可能在未来版本中使用：\",\"goto\",\"const\"]},\"2082\":{\"h\":\"知识扩展\"},\"2083\":{\"h\":\"设计思想\",\"t\":[\"Java关键字的设计体现了以下思想：\",\"简洁性：关键字数量控制在合理范围内，避免过多的保留单词\",\"一致性：关键字的含义和用法保持一致，便于学习和记忆\",\"扩展性：保留一些关键字，为未来版本的扩展预留空间\",\"可读性：通过关键字使代码结构清晰，提高代码的可读性\"]},\"2084\":{\"h\":\"避坑指南\",\"t\":[\"关键字误用：不要尝试使用关键字作为标识符，这会导致编译错误\",\"大小写敏感：Java关键字是大小写敏感的，例如class是关键字，但Class不是\",\"特殊含义：某些关键字具有特殊含义，例如null、true、false不是关键字，但它们是保留字，不能用作标识符\",\"版本差异：注意不同Java版本中关键字的变化，例如var在Java 10中成为保留类型名称\"]},\"2085\":{\"h\":\"深度思考题\",\"t\":[\"思考题1: 为什么Java要保留一些关键字（如goto、const）而不直接使用它们？\",\"回答: Java保留这些关键字是为了保持语言的向后兼容性和未来的扩展性。虽然这些关键字在当前版本中没有使用，但它们可能在未来的版本中被赋予新的含义。此外，这也可以避免开发者使用这些可能在未来版本中成为关键字的单词作为标识符，从而避免代码迁移的困难。\",\"思考题2: Java中的访问控制关键字有什么设计优势？\",\"回答: Java的访问控制关键字提供了灵活而精细的访问控制机制，这有助于实现封装性原则。通过控制类、变量和方法的访问权限，开发者可以隐藏内部实现细节，只暴露必要的接口，从而提高代码的安全性、可维护性和可重用性。\",\"思考题3: 为什么Java要区分static和final这两个关键字？\",\"回答:static和final是两个不同的概念。static表示成员属于类而不是实例，它可以被修改（除非同时被final修饰）。final表示成员是最终的，不可修改，它可以是实例成员也可以是类成员。这种区分使得Java的类型系统更加灵活，可以更好地满足不同的编程需求。\"]},\"2086\":{\"h\":\"Java基础-注释\"},\"2087\":{\"h\":\"概述\",\"t\":[\"注释是Java代码中不可或缺的一部分，它用于解释代码的功能、目的和实现细节，提高代码的可读性和可维护性。本章节将系统梳理Java中的注释类型及使用规范。\"]},\"2088\":{\"h\":\"知识要点\"},\"2089\":{\"h\":\"1. 单行注释\",\"t\":[\"单行注释以//开头，用于解释单行代码的功能：\",\"public class SingleLineCommentDemo { public static void main(String[] args) { // 定义一个整数变量 int num = 10; // 输出变量的值 System.out.println(\\\"num = \\\" + num); // 这是一个行尾注释 } }\"]},\"2090\":{\"h\":\"2. 多行注释\",\"t\":[\"多行注释以/*开头，以*/结尾，用于解释多行代码的功能：\",\"public class MultiLineCommentDemo { /* * 这是一个多行注释 * 用于解释下面的方法 * 该方法用于计算两个数的和 */ public int add(int a, int b) { return a + b; // 返回两个数的和 } }\"]},\"2091\":{\"h\":\"3. 文档注释\",\"t\":[\"文档注释以/**开头，以*/结尾，用于生成API文档：\",\"/** * 这是一个文档注释 * 用于描述Person类 */ public class Person { /** * 人员姓名 */ private String name; /** * 人员年龄 */ private int age; /** * 构造方法 * @param name 姓名 * @param age 年龄 */ public Person(String name, int age) { this.name = name; this.age = age; } /** * 获取姓名 * @return 姓名 */ public String getName() { return name; } /** * 设置姓名 * @param name 姓名 */ public void setName(String name) { this.name = name; } /** * 获取年龄 * @return 年龄 */ public int getAge() { return age; } /** * 设置年龄 * @param age 年龄 */ public void setAge(int age) { this.age = age; } }\"]},\"2092\":{\"h\":\"知识扩展\"},\"2093\":{\"h\":\"设计思想\",\"t\":[\"Java注释的设计体现了以下思想：\",\"可读性优先：通过注释提高代码的可读性，便于其他开发者理解和维护\",\"文档化：通过文档注释生成API文档，方便用户使用\",\"灵活性：提供多种注释类型，满足不同的注释需求\",\"无干扰性：注释不会影响代码的执行，只是提供解释信息\"]},\"2094\":{\"h\":\"避坑指南\",\"t\":[\"过度注释：不要为每个代码行都添加注释，只注释关键部分\",\"过时注释：及时更新或删除过时的注释，避免误导其他开发者\",\"错误注释：确保注释与代码一致，不要提供错误的信息\",\"冗余注释：避免添加与代码重复的注释，注释应该提供额外的信息\",\"不规范注释：遵循团队的注释规范，保持一致性\"]},\"2095\":{\"h\":\"深度思考题\",\"t\":[\"思考题1: 为什么说注释是代码的\\\"第二语言\\\"？\",\"回答: 注释是代码的\\\"第二语言\\\"，因为它可以帮助其他开发者理解代码的功能、目的和实现细节。一份好的代码不仅要能正确运行，还要易于理解和维护。通过注释，开发者可以表达代码背后的思想和设计理念，使得代码更具有可读性和可维护性。\",\"思考题2: 如何平衡代码中的注释数量？\",\"回答: 注释的数量应该适中，过多的注释会使代码变得臃肿，过少的注释会使代码难以理解。一般来说，我们应该为以下部分添加注释：\",\"类和接口的目的和功能\",\"方法的目的、参数、返回值和异常\",\"复杂的算法和逻辑\",\"代码中的特殊处理和边界条件\",\"容易引起误解的部分\",\"思考题3: 文档注释有什么优势？\",\"回答: 文档注释的优势主要有以下几点：\",\"可以通过Javadoc工具生成API文档，方便用户使用\",\"可以规范地描述类、方法的功能、参数、返回值和异常\",\"可以提高代码的可读性和可维护性\",\"可以帮助开发者更好地理解和使用代码\",\"可以作为代码审查的依据之一\"]},\"2096\":{\"h\":\"Java基础-数据类型\"},\"2097\":{\"h\":\"概述\",\"t\":[\"数据类型是Java语言的基础，它决定了变量可以存储什么样的值，以及可以对这些值进行什么样的操作。Java是一种强类型语言，每个变量都必须明确声明其数据类型。本章节将系统梳理Java中的数据类型分类及核心用法。\"]},\"2098\":{\"h\":\"知识要点\"},\"2099\":{\"h\":\"1. 基本数据类型\",\"t\":[\"基本数据类型是Java语言中内置的、不可再分的数据类型，它们直接存储值而不是引用。Java共有8种基本数据类型：\",\"public class BasicDataTypeDemo { // 整数类型 byte b = 10; // 1字节，范围：-128 ~ 127 short s = 100; // 2字节，范围：-32768 ~ 32767 int i = 1000; // 4字节，范围：-2^31 ~ 2^31-1 long l = 10000L; // 8字节，范围：-2^63 ~ 2^63-1 // 浮点类型 float f = 3.14f; // 4字节，精度：约6-7位小数 double d = 3.14159; // 8字节，精度：约15-17位小数 // 字符类型 char c = 'A'; // 2字节，范围：0 ~ 65535 // 布尔类型 boolean bool = true; // 1位，值：true 或 false }\"]},\"2100\":{\"h\":\"2. 引用数据类型\",\"t\":[\"引用数据类型是对对象的引用，它们存储的是对象的地址而不是对象本身。Java中的引用数据类型包括类、接口和数组：\",\"public class ReferenceDataTypeDemo { // 类 String str = \\\"Hello\\\"; Person person = new Person(); // 接口 Animal animal = new Dog(); // 数组 int[] arr = {1, 2, 3}; String[] strArr = {\\\"a\\\", \\\"b\\\", \\\"c\\\"}; } // 定义一个类 class Person { private String name; private int age; // 省略getter和setter方法 } // 定义一个接口 interface Animal { void eat(); } // 实现接口 class Dog implements Animal { @Override public void eat() { System.out.println(\\\"Dog eats骨头\\\"); } }\"]},\"2101\":{\"h\":\"3. 数据类型转换\",\"t\":[\"Java中的数据类型转换分为自动类型转换和强制类型转换：\",\"public class TypeConversionDemo { public void conversion() { // 自动类型转换（小范围 -> 大范围） byte b = 10; short s = b; int i = s; long l = i; float f = l; double d = f; // 强制类型转换（大范围 -> 小范围） int i2 = (int)l; byte b2 = (byte)i2; // 注意：强制类型转换可能会导致精度丢失 double d2 = 3.14159; int i3 = (int)d2; // 结果为3，丢失了小数部分 // 字符串转换 String str = \\\"100\\\"; int i4 = Integer.parseInt(str); String str2 = String.valueOf(i4); } }\"]},\"2102\":{\"h\":\"知识扩展\"},\"2103\":{\"h\":\"设计思想\",\"t\":[\"Java数据类型的设计体现了以下思想：\",\"简洁性：基本数据类型数量控制在合理范围内，避免过多的类型\",\"一致性：数据类型的命名和用法保持一致，便于学习和记忆\",\"扩展性：通过引用数据类型提供灵活的扩展机制\",\"安全性：强类型检查可以避免很多类型错误\",\"效率：基本数据类型直接存储值，提高访问效率\"]},\"2104\":{\"h\":\"避坑指南\",\"t\":[\"类型溢出：注意整数类型的范围，避免溢出\",\"精度丢失：注意浮点类型的精度限制，避免精度丢失\",\"空指针异常：引用数据类型可能为null，使用前需要检查\",\"自动装箱/拆箱：注意自动装箱/拆箱可能带来的性能问题\",\"类型转换：强制类型转换时注意范围和精度问题\"]},\"2105\":{\"h\":\"深度思考题\",\"t\":[\"思考题1: 为什么Java要区分基本数据类型和引用数据类型？\",\"回答: Java区分基本数据类型和引用数据类型主要是出于效率和设计的考虑。基本数据类型直接存储值，访问效率高，适合存储简单的数值。引用数据类型存储的是对象的地址，它们可以引用复杂的对象，提供更灵活的功能。这种区分使得Java既可以高效地处理简单数据，又可以灵活地处理复杂对象。\",\"思考题2: 什么是自动装箱和拆箱？它们有什么优缺点？\",\"回答: 自动装箱是指将基本数据类型自动转换为对应的包装类对象，自动拆箱是指将包装类对象自动转换为对应的基本数据类型。它们的优点是简化了代码，使得开发者可以更方便地在基本数据类型和包装类之间进行转换。它们的缺点是可能会带来性能问题，因为频繁的装箱和拆箱会创建大量的临时对象，增加垃圾回收的负担。\",\"思考题3: 为什么Java中的浮点数不适合用于金融计算？\",\"回答: Java中的浮点数（float和double）是基于IEEE 754标准的，它们使用二进制表示十进制小数，这会导致精度问题。例如，0.1在二进制中无法精确表示，它会被表示为一个近似值。这种精度问题在金融计算中是不可接受的，因为金融计算通常需要精确到小数点后几位。因此，在金融计算中，我们应该使用BigDecimal类而不是浮点数。\"]},\"2106\":{\"h\":\"Java基础-运算符\"},\"2107\":{\"h\":\"概述\",\"t\":[\"运算符是Java语言中用于执行操作的特殊符号，它们可以用于操作变量和值。掌握Java运算符是学习Java语法的基础，本章节将系统梳理Java中的运算符分类及核心用法。\"]},\"2108\":{\"h\":\"知识要点\"},\"2109\":{\"h\":\"1. 算术运算符\",\"t\":[\"算术运算符用于执行基本的数学运算：\",\"public class ArithmeticOperatorDemo { public void arithmetic() { int a = 10; int b = 5; // 加法 int add = a + b; // 15 // 减法 int sub = a - b; // 5 // 乘法 int mul = a * b; // 50 // 除法 int div = a / b; // 2 // 取模 int mod = a % b; // 0 // 自增 a++; // 11 ++a; // 12 // 自减 b--; // 4 --b; // 3 } }\"]},\"2110\":{\"h\":\"2. 关系运算符\",\"t\":[\"关系运算符用于比较两个值的关系：\",\"public class RelationalOperatorDemo { public void relational() { int a = 10; int b = 5; // 等于 boolean eq = (a == b); // false // 不等于 boolean ne = (a != b); // true // 大于 boolean gt = (a > b); // true // 小于 boolean lt = (a < b); // false // 大于等于 boolean ge = (a >= b); // true // 小于等于 boolean le = (a <= b); // false } }\"]},\"2111\":{\"h\":\"3. 逻辑运算符\",\"t\":[\"逻辑运算符用于连接布尔表达式：\",\"public class LogicalOperatorDemo { public void logical() { boolean a = true; boolean b = false; // 逻辑与 boolean and = a && b; // false // 逻辑或 boolean or = a || b; // true // 逻辑非 boolean not = !a; // false // 短路运算 // 当a为false时，不会计算b的值 boolean shortCircuitAnd = a && (b = true); // false // 当a为true时，不会计算b的值 boolean shortCircuitOr = a || (b = false); // true } }\"]},\"2112\":{\"h\":\"4. 位运算符\",\"t\":[\"位运算符用于操作二进制位：\",\"public class BitOperatorDemo { public void bit() { int a = 60; // 0011 1100 int b = 13; // 0000 1101 // 按位与 int and = a & b; // 12 (0000 1100) // 按位或 int or = a | b; // 61 (0011 1101) // 按位异或 int xor = a ^ b; // 49 (0011 0001) // 按位非 int not = ~a; // -61 (1100 0011) // 左移 int leftShift = a << 2; // 240 (1111 0000) // 右移 int rightShift = a >> 2; // 15 (0000 1111) // 无符号右移 int unsignedRightShift = a >>> 2; // 15 (0000 1111) } }\"]},\"2113\":{\"h\":\"5. 赋值运算符\",\"t\":[\"赋值运算符用于给变量赋值：\",\"public class AssignmentOperatorDemo { public void assignment() { int a = 10; // 简单赋值 int b = a; // 10 // 加法赋值 b += a; // 20 // 减法赋值 b -= a; // 10 // 乘法赋值 b *= a; // 100 // 除法赋值 b /= a; // 10 // 取模赋值 b %= a; // 0 // 位与赋值 b &= a; // 0 // 位或赋值 b |= a; // 10 // 位异或赋值 b ^= a; // 0 // 左移赋值 b <<= a; // 0 // 右移赋值 b >>= a; // 0 // 无符号右移赋值 b >>>= a; // 0 } }\"]},\"2114\":{\"h\":\"6. 条件运算符\",\"t\":[\"条件运算符是Java中唯一的三目运算符：\",\"public class ConditionalOperatorDemo { public void conditional() { int a = 10; int b = 5; // 条件运算符 int max = (a > b) ? a : b; // 10 // 嵌套条件运算符 int min = (a < b) ? a : ((a == b) ? a : b); // 5 } }\"]},\"2115\":{\"h\":\"7. 其他运算符\",\"t\":[\"Java中还有一些其他运算符：\",\"public class OtherOperatorDemo { public void other() { // 点运算符 Person person = new Person(); person.setName(\\\"张三\\\"); // instanceof运算符 boolean isPerson = person instanceof Person; // true // 括号运算符 int result = (a + b) * c; // 先计算a + b，再乘以c // 数组访问运算符 int[] arr = {1, 2, 3}; int first = arr[0]; // 1 } }\"]},\"2116\":{\"h\":\"知识扩展\"},\"2117\":{\"h\":\"设计思想\",\"t\":[\"Java运算符的设计体现了以下思想：\",\"简洁性：运算符符号简洁明了，便于记忆和使用\",\"一致性：运算符的含义和用法保持一致，便于学习和记忆\",\"完备性：提供了丰富的运算符，满足各种编程需求\",\"效率：位运算符等可以直接操作二进制位，提高运行效率\",\"可读性：运算符的使用使得代码更加简洁和可读\"]},\"2118\":{\"h\":\"避坑指南\",\"t\":[\"整数除法：注意整数除法会截断小数部分，而不是四舍五入\",\"优先级：注意运算符的优先级，避免因优先级问题导致的错误\",\"短路运算：注意逻辑运算符的短路特性，避免依赖未执行的代码\",\"溢出：注意算术运算可能导致的溢出问题\",\"类型转换：注意不同类型之间的运算可能导致的类型转换问题\"]},\"2119\":{\"h\":\"深度思考题\",\"t\":[\"思考题1: 什么是运算符的优先级？为什么要了解运算符的优先级？\",\"回答: 运算符的优先级是指在表达式中，不同的运算符按照一定的顺序进行计算。了解运算符的优先级可以帮助我们正确地理解和编写表达式，避免因优先级问题导致的错误。例如，在表达式a + b * c中，乘法的优先级高于加法，所以会先计算b * c，然后再加上a。\",\"思考题2: 什么是短路运算？它有什么优势？\",\"回答: 短路运算是指在逻辑运算中，当确定整个表达式的结果后，就不再计算剩余的部分。例如，在表达式a && b中，如果a为false，那么无论b的值是什么，整个表达式的结果都是false，所以不会计算b的值。短路运算的优势是可以提高代码的执行效率，避免不必要的计算。\",\"思考题3: 位运算符有什么应用场景？\",\"回答: 位运算符的应用场景主要包括：\",\"底层编程：如操作系统、驱动程序等，需要直接操作硬件\",\"性能优化：位运算比算术运算更快，可以提高代码的执行效率\",\"数据压缩：如位图、音频、视频等的压缩\",\"加密算法：如对称加密、非对称加密等\",\"游戏开发：如碰撞检测、物理模拟等\",\"网络编程：如IP地址、端口号的处理等\"]},\"2120\":{\"h\":\"Java基础-流程控制\"},\"2121\":{\"h\":\"概述\",\"t\":[\"流程控制是Java语言中用于控制程序执行流程的机制，它决定了程序中的语句按照什么顺序执行。掌握流程控制是学习Java编程的基础，本章节将系统梳理Java中的流程控制分类及核心用法。\"]},\"2122\":{\"h\":\"知识要点\"},\"2123\":{\"h\":\"1. 顺序结构\",\"t\":[\"顺序结构是程序中最基本的流程控制结构，它按照代码的书写顺序依次执行：\",\"public class SequenceStructureDemo { public static void main(String[] args) { // 顺序执行 System.out.println(\\\"第一步\\\"); System.out.println(\\\"第二步\\\"); System.out.println(\\\"第三步\\\"); } }\"]},\"2124\":{\"h\":\"2. 分支结构\",\"t\":[\"分支结构根据条件决定执行哪一段代码：\"]},\"2125\":{\"h\":\"2.1 if-else\",\"t\":[\"public class IfElseDemo { public static void main(String[] args) { int score = 85; if (score >= 90) { System.out.println(\\\"优秀\\\"); } else if (score >= 80) { System.out.println(\\\"良好\\\"); } else if (score >= 70) { System.out.println(\\\"中等\\\"); } else if (score >= 60) { System.out.println(\\\"及格\\\"); } else { System.out.println(\\\"不及格\\\"); } } }\"]},\"2126\":{\"h\":\"2.2 switch-case\",\"t\":[\"public class SwitchCaseDemo { public static void main(String[] args) { int month = 3; switch (month) { case 1: System.out.println(\\\"一月\\\"); break; case 2: System.out.println(\\\"二月\\\"); break; case 3: System.out.println(\\\"三月\\\"); break; case 4: System.out.println(\\\"四月\\\"); break; case 5: System.out.println(\\\"五月\\\"); break; case 6: System.out.println(\\\"六月\\\"); break; default: System.out.println(\\\"其他月份\\\"); } } }\"]},\"2127\":{\"h\":\"3. 循环结构\",\"t\":[\"循环结构用于重复执行一段代码：\"]},\"2128\":{\"h\":\"3.1 for\",\"t\":[\"public class ForDemo { public static void main(String[] args) { // 基本for循环 for (int i = 0; i < 5; i++) { System.out.println(\\\"i = \\\" + i); } // 增强for循环（for-each） int[] arr = {1, 2, 3, 4, 5}; for (int num : arr) { System.out.println(\\\"num = \\\" + num); } } }\"]},\"2129\":{\"h\":\"3.2 while\",\"t\":[\"public class WhileDemo { public static void main(String[] args) { int i = 0; while (i < 5) { System.out.println(\\\"i = \\\" + i); i++; } } }\"]},\"2130\":{\"h\":\"3.3 do-while\",\"t\":[\"public class DoWhileDemo { public static void main(String[] args) { int i = 0; do { System.out.println(\\\"i = \\\" + i); i++; } while (i < 5); } }\"]},\"2131\":{\"h\":\"4. 跳转结构\",\"t\":[\"跳转结构用于改变程序的执行流程：\"]},\"2132\":{\"h\":\"4.1 break\",\"t\":[\"public class BreakDemo { public static void main(String[] args) { for (int i = 0; i < 10; i++) { if (i == 5) { break; // 跳出循环 } System.out.println(\\\"i = \\\" + i); } } }\"]},\"2133\":{\"h\":\"4.2 continue\",\"t\":[\"public class ContinueDemo { public static void main(String[] args) { for (int i = 0; i < 10; i++) { if (i == 5) { continue; // 跳过当前循环 } System.out.println(\\\"i = \\\" + i); } } }\"]},\"2134\":{\"h\":\"4.3 return\",\"t\":[\"public class ReturnDemo { public static void main(String[] args) { System.out.println(\\\"开始\\\"); test(); System.out.println(\\\"结束\\\"); } public static void test() { for (int i = 0; i < 5; i++) { if (i == 3) { return; // 结束方法 } System.out.println(\\\"i = \\\" + i); } } }\"]},\"2135\":{\"h\":\"知识扩展\"},\"2136\":{\"h\":\"设计思想\",\"t\":[\"Java流程控制的设计体现了以下思想：\",\"结构化：提供了结构化的流程控制语句，避免了 goto 语句带来的混乱\",\"简洁性：流程控制语句简洁明了，便于记忆和使用\",\"灵活性：提供了丰富的流程控制语句，满足各种编程需求\",\"可读性：流程控制语句的使用使得代码更加清晰和可读\",\"可维护性：结构化的流程控制使得代码更容易维护和修改\"]},\"2137\":{\"h\":\"避坑指南\",\"t\":[\"无限循环：注意循环条件，避免无限循环\",\"边界条件：注意循环的边界条件，避免多执行或少执行一次\",\"break和continue的区别：break用于跳出循环，continue用于跳过当前循环\",\"switch-case的穿透性：注意switch-case语句的穿透性，不要忘记添加break\",\"空语句块：避免出现空的语句块，这可能会导致逻辑错误\"]},\"2138\":{\"h\":\"深度思考题\",\"t\":[\"思考题1: 为什么Java要避免使用goto语句？\",\"回答: Java避免使用goto语句主要是因为goto语句会破坏程序的结构化特性，使得代码难以理解和维护。goto语句可以跳转到程序的任何位置，这可能会导致代码的执行流程变得混乱，难以跟踪。此外，goto语句也可能会导致一些难以发现的错误，例如跳过了一些重要的初始化或清理代码。\",\"思考题2: for、while和do-while循环有什么区别？\",\"回答: for、while和do-while循环的主要区别在于它们的语法和执行条件的检查时机：\",\"for循环：语法上包含初始化、循环条件和更新表达式，适合于已知循环次数的情况\",\"while循环：只有循环条件，没有初始化和更新表达式，适合于未知循环次数的情况\",\"do-while循环：先执行循环体，然后检查循环条件，至少会执行一次循环体\",\"思考题3: 什么是死循环？如何避免死循环？\",\"回答: 死循环是指循环条件始终为true，导致循环永远不会结束的情况。避免死循环的方法主要有：\",\"确保循环条件最终会变为false\",\"避免在循环体中修改循环条件相关的变量\",\"使用break语句在适当的时候跳出循环\",\"对于复杂的循环条件，进行充分的测试\",\"避免使用过于复杂的循环条件，保持简洁明了\"]},\"2139\":{\"h\":\"1.2.1 数组\"},\"2140\":{\"h\":\"概述\",\"t\":[\"数组是Java中最基础的数据结构之一，它是一种连续存储相同数据类型元素的容器。数组具有固定长度、随机访问效率高、内存连续分配等特点，是实现其他复杂数据结构的基础。\"]},\"2141\":{\"h\":\"知识要点\"},\"2142\":{\"h\":\"2.1 数组的定义与初始化\",\"t\":[\"数组在Java中可以通过两种方式定义：声明数组变量和创建数组对象。初始化方式包括静态初始化和动态初始化。\"]},\"2143\":{\"h\":\"2.1.1 数组声明\",\"t\":[\"// 方式一：数据类型[] 数组名 int[] numbers; String[] names; // 方式二：数据类型 数组名[] (不推荐，易混淆) int ages[];\"]},\"2144\":{\"h\":\"2.1.2 数组初始化\",\"t\":[\"// 1. 静态初始化：声明的同时赋值 int[] scores = {90, 85, 95, 80}; // 长度为4的int数组 String[] fruits = new String[]{\\\"apple\\\", \\\"banana\\\", \\\"orange\\\"}; // 2. 动态初始化：指定长度，默认初始化值 int[] ids = new int[5]; // 长度为5，默认值为0 Object[] objects = new Object[3]; // 长度为3，默认值为null // 3. 数组创建后赋值 String[] colors = new String[3]; colors[0] = \\\"red\\\"; colors[1] = \\\"green\\\"; colors[2] = \\\"blue\\\";\"]},\"2145\":{\"h\":\"2.2 数组的访问与遍历\",\"t\":[\"数组通过索引访问元素，索引从0开始。遍历数组常用for循环和增强for循环两种方式。\"]},\"2146\":{\"h\":\"2.2.1 数组访问\",\"t\":[\"int[] arr = {10, 20, 30, 40}; System.out.println(arr[0]); // 访问第一个元素，输出10 System.out.println(arr[2]); // 访问第三个元素，输出30 arr[1] = 25; // 修改第二个元素的值\"]},\"2147\":{\"h\":\"2.2.2 数组遍历\",\"t\":[\"int[] numbers = {1, 2, 3, 4, 5}; // 1. 普通for循环 for (int i = 0; i < numbers.length; i++) { System.out.println(numbers[i]); } // 2. 增强for循环(foreach) for (int num : numbers) { System.out.println(num); } // 3. 使用Arrays.toString()打印数组 import java.util.Arrays; System.out.println(Arrays.toString(numbers)); // 输出: [1, 2, 3, 4, 5]\"]},\"2148\":{\"h\":\"2.3 数组的常用操作\",\"t\":[\"Java提供了java.util.Arrays工具类来简化数组操作，包括排序、查找、填充等。\"]},\"2149\":{\"h\":\"2.3.1 数组排序\",\"t\":[\"import java.util.Arrays; int[] arr = {3, 1, 4, 2, 5}; Arrays.sort(arr); // 对数组进行升序排序 System.out.println(Arrays.toString(arr)); // 输出: [1, 2, 3, 4, 5]\"]},\"2150\":{\"h\":\"2.3.2 数组查找\",\"t\":[\"import java.util.Arrays; int[] arr = {10, 20, 30, 40, 50}; int index = Arrays.binarySearch(arr, 30); // 二分查找，返回索引 System.out.println(index); // 输出: 2\"]},\"2151\":{\"h\":\"2.3.3 数组复制\",\"t\":[\"import java.util.Arrays; int[] original = {1, 2, 3}; int[] copy = Arrays.copyOf(original, original.length); // 复制整个数组 int[] rangeCopy = Arrays.copyOfRange(original, 1, 3); // 复制指定范围 System.out.println(Arrays.toString(copy)); // 输出: [1, 2, 3] System.out.println(Arrays.toString(rangeCopy)); // 输出: [2, 3]\"]},\"2152\":{\"h\":\"2.4 数组的内存特性\",\"t\":[\"数组在Java中是引用类型，存储在堆内存中，数组变量存储的是数组对象的引用地址。\"]},\"2153\":{\"h\":\"知识扩展\"},\"2154\":{\"h\":\"3.1 设计思想\"},\"2155\":{\"h\":\"3.1.1 数组的优缺点\",\"t\":[\"优点：\",\"随机访问效率高，时间复杂度为O(1)\",\"内存连续，缓存利用率高\",\"实现简单，是其他数据结构的基础\",\"缺点：\",\"长度固定，扩容需要创建新数组\",\"插入删除效率低，时间复杂度为O(n)\",\"只能存储相同类型的数据\"]},\"2156\":{\"h\":\"3.1.2 数组与集合的选择\",\"t\":[\"当元素数量固定且需要频繁访问时，选择数组\",\"当元素数量不确定且需要频繁增删时，选择集合框架(如ArrayList)\"]},\"2157\":{\"h\":\"3.2 避坑指南\"},\"2158\":{\"h\":\"3.2.1 数组越界异常\",\"t\":[\"问题：访问数组时索引超出范围 解决方案：始终检查数组边界，使用数组长度控制循环\",\"int[] arr = {1, 2, 3}; // 错误示例 for (int i = 0; i <= arr.length; i++) { // i <= arr.length 导致越界 System.out.println(arr[i]); } // 正确示例 for (int i = 0; i < arr.length; i++) { System.out.println(arr[i]); }\"]},\"2159\":{\"h\":\"3.2.2 空指针异常\",\"t\":[\"问题：访问未初始化的数组或已置为null的数组 解决方案：初始化数组后再使用，避免将数组引用置为null\",\"int[] arr = null; // 错误示例 System.out.println(arr.length); // 抛出NullPointerException // 正确示例 int[] arr = new int[0]; // 空数组但已初始化 System.out.println(arr.length); // 输出: 0\"]},\"2160\":{\"h\":\"3.3 深度思考题\",\"t\":[\"如何实现一个动态数组(ArrayList的简化版)？\",\"数组去重有哪些方法？各有什么优缺点？\",\"如何找出数组中出现次数最多的元素？\"]},\"2161\":{\"h\":\"思考题参考答案\",\"t\":[\"动态数组实现思路：\",\"public class DynamicArray { private int[] elements; private int size; private static final int DEFAULT_CAPACITY = 10; public DynamicArray() { elements = new int[DEFAULT_CAPACITY]; size = 0; } // 添加元素，容量不足时扩容 public void add(int element) { if (size == elements.length) { // 扩容为原来的1.5倍 int newCapacity = elements.length * 3 / 2; elements = Arrays.copyOf(elements, newCapacity); } elements[size++] = element; } // 获取元素 public int get(int index) { if (index < 0 || index >= size) { throw new IndexOutOfBoundsException(); } return elements[index]; } // 其他方法：remove、size等 }\"]},\"2162\":{\"h\":\"1.2.2 二维数组\"},\"2163\":{\"h\":\"概述\",\"t\":[\"二维数组是数组的数组，它在内存中以行优先的方式存储，可以看作是具有行和列的表格结构。二维数组常用于表示矩阵、表格数据等具有二维结构的信息，是处理多维数据的基础。\"]},\"2164\":{\"h\":\"知识要点\"},\"2165\":{\"h\":\"2.1 二维数组的定义与初始化\",\"t\":[\"二维数组可以理解为每个元素都是一维数组的数组，它有多种声明和初始化方式。\"]},\"2166\":{\"h\":\"2.1.1 二维数组声明\",\"t\":[\"// 方式一：数据类型[][] 数组名 int[][] matrix; String[][] table; // 方式二：数据类型 数组名[][] (不推荐) int scores[][];\"]},\"2167\":{\"h\":\"2.1.2 二维数组初始化\",\"t\":[\"// 1. 静态初始化 int[][] identityMatrix = { {1, 0, 0}, {0, 1, 0}, {0, 0, 1} }; // 2. 动态初始化 - 确定行和列 int[][] intArray = new int[3][4]; // 3行4列的二维数组 // 3. 动态初始化 - 先确定行，后确定列（不规则数组） int[][] jaggedArray = new int[3][]; jaggedArray[0] = new int[2]; // 第一行2列 jaggedArray[1] = new int[3]; // 第二行3列 jaggedArray[2] = new int[1]; // 第三行1列 // 4. 初始化后赋值 String[][] names = new String[2][2]; names[0][0] = \\\"Alice\\\"; names[0][1] = \\\"Bob\\\"; names[1][0] = \\\"Charlie\\\"; names[1][1] = \\\"David\\\";\"]},\"2168\":{\"h\":\"2.2 二维数组的访问与遍历\",\"t\":[\"二维数组通过行索引和列索引访问元素，遍历方式包括嵌套for循环和增强for循环。\"]},\"2169\":{\"h\":\"2.2.1 元素访问\",\"t\":[\"int[][] matrix = { {1, 2, 3}, {4, 5, 6}, {7, 8, 9} }; System.out.println(matrix[0][0]); // 访问第一行第一列元素，输出1 System.out.println(matrix[1][2]); // 访问第二行第三列元素，输出6 matrix[2][1] = 88; // 修改第三行第二列元素\"]},\"2170\":{\"h\":\"2.2.2 数组遍历\",\"t\":[\"int[][] numbers = { {1, 2, 3}, {4, 5, 6}, {7, 8, 9} }; // 1. 嵌套for循环 for (int i = 0; i < numbers.length; i++) { // 遍历行 for (int j = 0; j < numbers[i].length; j++) { // 遍历列 System.out.print(numbers[i][j] + \\\" \\\"); } System.out.println(); } // 2. 增强for循环 for (int[] row : numbers) { // 遍历每一行 for (int num : row) { // 遍历行中的每个元素 System.out.print(num + \\\" \\\"); } System.out.println(); } // 3. 使用Arrays.deepToString()打印二维数组 import java.util.Arrays; System.out.println(Arrays.deepToString(numbers)); // 输出: [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\"]},\"2171\":{\"h\":\"2.3 二维数组的内存结构\",\"t\":[\"二维数组在内存中表现为数组引用的数组，每个引用指向一个一维数组。规则数组和不规则数组在内存结构上有所不同。\"]},\"2172\":{\"h\":\"2.4 二维数组的常用操作\"},\"2173\":{\"h\":\"2.4.1 矩阵转置\",\"t\":[\"public class MatrixOperations { // 矩阵转置：将行变为列 public static int[][] transpose(int[][] matrix) { int rows = matrix.length; int cols = matrix[0].length; int[][] result = new int[cols][rows]; for (int i = 0; i < rows; i++) { for (int j = 0; j < cols; j++) { result[j][i] = matrix[i][j]; } } return result; } }\"]},\"2174\":{\"h\":\"2.4.2 矩阵相加\",\"t\":[\"public class MatrixOperations { // 矩阵相加：对应位置元素相加 public static int[][] add(int[][] a, int[][] b) { int rows = a.length; int cols = a[0].length; int[][] result = new int[rows][cols]; for (int i = 0; i < rows; i++) { for (int j = 0; j < cols; j++) { result[i][j] = a[i][j] + b[i][j]; } } return result; } }\"]},\"2175\":{\"h\":\"知识扩展\"},\"2176\":{\"h\":\"3.1 设计思想\"},\"2177\":{\"h\":\"3.1.1 二维数组的适用场景\",\"t\":[\"矩阵运算：科学计算、图形处理中的矩阵操作\",\"表格数据：数据库查询结果、Excel表格数据\",\"游戏开发：二维游戏地图、棋盘游戏（如五子棋、象棋）\",\"图像处理：像素点矩阵表示\"]},\"2178\":{\"h\":\"3.1.2 多维数组的替代方案\",\"t\":[\"对于复杂的多维数据，考虑使用：\",\"集合的集合：如List<List<Integer>>，更灵活但性能略低\",\"自定义对象：将二维数据封装为对象，提高代码可读性\",\"稀疏矩阵：当大部分元素为0时，使用稀疏矩阵存储节省空间\"]},\"2179\":{\"h\":\"3.2 避坑指南\"},\"2180\":{\"h\":\"3.2.1 不规则数组的空指针问题\",\"t\":[\"问题：动态初始化不规则数组时，如果未初始化子数组就访问元素 解决方案：确保每个子数组都已正确初始化\",\"int[][] jaggedArray = new int[3][]; jaggedArray[0] = new int[2]; // 错误示例：jaggedArray[1]未初始化 System.out.println(jaggedArray[1][0]); // 抛出NullPointerException // 正确示例 jaggedArray[1] = new int[3]; System.out.println(jaggedArray[1][0]); // 输出0\"]},\"2181\":{\"h\":\"3.2.2 数组长度陷阱\",\"t\":[\"问题：错误地认为二维数组的列长度统一 解决方案：获取每行的实际长度\",\"int[][] array = { {1, 2}, {3}, {4, 5, 6} }; // 错误示例：假设所有行长度相同 for (int i = 0; i < array.length; i++) { for (int j = 0; j < array[0].length; j++) { // array[0].length=2，第三行会越界 System.out.println(array[i][j]); } } // 正确示例：使用当前行的长度 for (int i = 0; i < array.length; i++) { for (int j = 0; j < array[i].length; j++) { System.out.println(array[i][j]); } }\"]},\"2182\":{\"h\":\"3.3 深度思考题\",\"t\":[\"如何实现矩阵乘法？\",\"如何将二维数组转换为一维数组？有哪些转换策略？\",\"如何处理大型二维数组以提高性能？\"]},\"2183\":{\"h\":\"思考题参考答案\",\"t\":[\"矩阵乘法实现：\",\"public class MatrixMultiplication { public static int[][] multiply(int[][] a, int[][] b) { int aRows = a.length; int aCols = a[0].length; int bRows = b.length; int bCols = b[0].length; // 检查矩阵乘法条件：a的列数必须等于b的行数 if (aCols != bRows) { throw new IllegalArgumentException(\\\"矩阵a的列数必须等于矩阵b的行数\\\"); } int[][] result = new int[aRows][bCols]; for (int i = 0; i < aRows; i++) { for (int j = 0; j < bCols; j++) { int sum = 0; for (int k = 0; k < aCols; k++) { sum += a[i][k] * b[k][j]; } result[i][j] = sum; } } return result; } }\"]},\"2184\":{\"h\":\"1.2.2 字符串\"},\"2185\":{\"h\":\"概述\",\"t\":[\"字符串是Java中最常用的数据类型之一，用于表示文本数据。Java中的字符串由java.lang.String类实现，具有不可变性、常量池优化等特性。字符串操作是Java开发中的基础技能，掌握字符串的特性和常用方法对编写高效代码至关重要。\"]},\"2186\":{\"h\":\"知识要点\"},\"2187\":{\"h\":\"2.1 字符串的创建与初始化\",\"t\":[\"Java中字符串有多种创建方式，不同方式在内存分配和性能上存在差异。\"]},\"2188\":{\"h\":\"2.1.1 字符串创建方式\",\"t\":[\"// 1. 字符串字面量（存储在常量池） String str1 = \\\"hello\\\"; String str2 = \\\"hello\\\"; // 复用常量池中的对象 // 2. new关键字（存储在堆内存） String str3 = new String(\\\"hello\\\"); String str4 = new String(\\\"hello\\\"); // 创建新的对象 // 3. 字符数组转换 char[] chars = {'h', 'e', 'l', 'l', 'o'}; String str5 = new String(chars); // 4. 字节数组转换 byte[] bytes = {104, 101, 108, 108, 111}; // ASCII码 String str6 = new String(bytes);\"]},\"2189\":{\"h\":\"2.1.2 字符串常量池机制\",\"t\":[\"String s1 = \\\"java\\\"; String s2 = \\\"java\\\"; String s3 = new String(\\\"java\\\"); String s4 = s3.intern(); // 将字符串对象加入常量池 System.out.println(s1 == s2); // true，引用常量池同一对象 System.out.println(s1 == s3); // false，s3在堆内存 System.out.println(s1 == s4); // true，s4指向常量池对象\"]},\"2190\":{\"h\":\"2.2 字符串的不可变性\",\"t\":[\"String类被final修饰，其内部char数组也被final修饰，因此字符串对象创建后内容不可修改，任何修改操作都会创建新的字符串对象。\",\"public final class String { private final char value[]; // 存储字符串的字符数组 // ...其他代码 }\"]},\"2191\":{\"h\":\"2.2.1 不可变性的表现\",\"t\":[\"String s = \\\"hello\\\"; String s2 = s.toUpperCase(); // 创建新对象 String s3 = s.concat(\\\" world\\\"); // 创建新对象 System.out.println(s); // 输出: hello，原字符串不变 System.out.println(s == s2); // false，不同对象\"]},\"2192\":{\"h\":\"2.2.2 不可变性的好处\",\"t\":[\"线程安全：不可变对象天然线程安全\",\"常量池优化：可被共享，节省内存\",\"哈希码缓存：hashCode计算后缓存，提高Map等容器的性能\",\"安全性：作为参数传递时不会被修改\"]},\"2193\":{\"h\":\"2.3 字符串常用方法\"},\"2194\":{\"h\":\"2.3.1 字符串比较\",\"t\":[\"String str1 = \\\"Hello\\\"; String str2 = \\\"hello\\\"; // 1. equals()：比较内容 boolean isEqual = str1.equals(str2); // false // 2. equalsIgnoreCase()：忽略大小写比较 boolean isEqualIgnoreCase = str1.equalsIgnoreCase(str2); // true // 3. compareTo()：按字典顺序比较，返回int值 int compareResult = str1.compareTo(str2); // 区分大小写 int compareResultIgnoreCase = str1.compareToIgnoreCase(str2); // 忽略大小写 // 4. ==：比较引用（地址） boolean isSameObject = (str1 == str2); // false\"]},\"2195\":{\"h\":\"2.3.2 字符串查找\",\"t\":[\"String str = \\\"Java Programming Language\\\"; // 1. 包含判断 boolean contains = str.contains(\\\"Program\\\"); // true // 2. 前缀后缀判断 boolean startsWith = str.startsWith(\\\"Java\\\"); // true boolean endsWith = str.endsWith(\\\"age\\\"); // true // 3. 字符位置查找 int indexOf = str.indexOf('P'); // 5（第一次出现位置） int lastIndexOf = str.lastIndexOf('g'); // 18（最后一次出现位置） int indexOfSub = str.indexOf(\\\"Language\\\"); // 17（子串位置）\"]},\"2196\":{\"h\":\"2.3.3 字符串截取与替换\",\"t\":[\"String str = \\\"Hello, World!\\\"; // 1. 截取子串 String substring1 = str.substring(7); // 从索引7开始到结束: \\\"World!\\\" String substring2 = str.substring(0, 5); // 从索引0到5（不包含5）: \\\"Hello\\\" // 2. 替换操作 String replaced1 = str.replace('o', 'O'); // 替换字符: \\\"HellO, WOrld!\\\" String replaced2 = str.replace(\\\"World\\\", \\\"Java\\\"); // 替换子串: \\\"Hello, Java!\\\" String replaced3 = str.replaceAll(\\\"[aeiou]\\\", \\\"*\\\"); // 正则替换: \\\"H*ll*, W*rld!\\\"\"]},\"2197\":{\"h\":\"2.3.4 字符串分割与拼接\",\"t\":[\"// 1. 字符串分割 String str = \\\"apple,banana,orange\\\"; String[] fruits = str.split(\\\",\\\"); // 按逗号分割 // 2. 字符串拼接 String s1 = \\\"Hello\\\"; String s2 = \\\"World\\\"; String s3 = s1 + \\\" \\\" + s2; // 使用+号拼接 String s4 = String.join(\\\" \\\", s1, s2); // 使用String.join()\"]},\"2198\":{\"h\":\"2.4 字符串与其他类型转换\",\"t\":[\"// 1. 基本类型转字符串 String numStr = String.valueOf(123); // \\\"123\\\" String boolStr = String.valueOf(true); // \\\"true\\\" // 2. 字符串转基本类型 int num = Integer.parseInt(\\\"123\\\"); // 123 double d = Double.parseDouble(\\\"3.14\\\"); // 3.14 boolean b = Boolean.parseBoolean(\\\"true\\\"); // true // 3. 字符串转字符数组 char[] chars = \\\"hello\\\".toCharArray(); // 4. 字符数组转字符串 String str = new String(chars);\"]},\"2199\":{\"h\":\"知识扩展\"},\"2200\":{\"h\":\"3.1 设计思想\"},\"2201\":{\"h\":\"3.1.1 String、StringBuilder与StringBuffer\",\"t\":[\"类\",\"可变性\",\"线程安全\",\"性能\",\"适用场景\",\"String\",\"不可变\",\"是\",\"低（每次修改创建新对象）\",\"少量字符串操作\",\"StringBuilder\",\"可变\",\"否\",\"高\",\"单线程大量字符串拼接\",\"StringBuffer\",\"可变\",\"是（方法加synchronized）\",\"中\",\"多线程环境\"]},\"2202\":{\"h\":\"3.1.2 字符串拼接性能对比\",\"t\":[\"// 1. String拼接（性能差） String str = \\\"\\\"; for (int i = 0; i < 10000; i++) { str += i; // 每次创建新对象 } // 2. StringBuilder拼接（性能好） StringBuilder sb = new StringBuilder(); for (int i = 0; i < 10000; i++) { sb.append(i); // 同一对象操作 } String result = sb.toString();\"]},\"2203\":{\"h\":\"3.2 避坑指南\"},\"2204\":{\"h\":\"3.2.1 字符串比较使用==的陷阱\",\"t\":[\"问题：使用==比较字符串内容 解决方案：使用equals()方法比较内容，==用于比较对象引用\",\"String s1 = \\\"java\\\"; String s2 = new String(\\\"java\\\"); // 错误示例 if (s1 == s2) { ... } // false，比较的是引用 // 正确示例 if (s1.equals(s2)) { ... } // true，比较的是内容 // 更安全的写法（避免空指针） if (\\\"java\\\".equals(s2)) { ... } // 常量在前\"]},\"2205\":{\"h\":\"3.2.2 字符串空值判断\",\"t\":[\"问题：未正确处理null和空字符串 解决方案：使用工具类或短路判断\",\"String str = null; // 错误示例 if (str.equals(\\\"\\\")) { ... } // 抛出NullPointerException // 正确示例 if (str == null || str.isEmpty()) { ... } // 先判断null // JDK1.6+推荐使用 if (str == null || str.length() == 0) { ... } // Apache Commons工具类 if (StringUtils.isEmpty(str)) { ... }\"]},\"2206\":{\"h\":\"3.3 深度思考题\",\"t\":[\"为什么String类被设计为不可变的？\",\"如何实现一个高效的字符串反转算法？\",\"String.intern()方法的作用及使用场景？\",\"字符串常量池的实现原理是什么？\"]},\"2207\":{\"h\":\"思考题参考答案\",\"t\":[\"String类不可变的设计原因：\",\"安全：字符串常被用作参数，不可变保证参数不被修改\",\"高效：可被缓存和共享，节省内存\",\"线程安全：无需同步即可在多线程中使用\",\"哈希稳定：哈希码可缓存，适合作为Map键\",\"高效字符串反转实现：\",\"public class StringReverse { // 方法1：使用StringBuilder public static String reverse1(String s) { if (s == null) return null; return new StringBuilder(s).reverse().toString(); } // 方法2：字符数组反转（手动实现） public static String reverse2(String s) { if (s == null) return null; char[] chars = s.toCharArray(); int left = 0, right = chars.length - 1; while (left < right) { // 交换字符 char temp = chars[left]; chars[left] = chars[right]; chars[right] = temp; left++; right--; } return new String(chars); } }\"]},\"2208\":{\"h\":\"1.2.3 打印数组\"},\"2209\":{\"h\":\"概述\",\"t\":[\"在Java开发中，数组打印是日常调试和数据展示的常见需求。由于数组直接打印会输出内存地址而非实际内容，掌握正确的数组打印方法对开发效率至关重要。本章将系统介绍Java中打印数组的多种方式，包括基础循环打印、工具类打印、流打印等方法，并分析各种方法的适用场景和性能特点。\"]},\"2210\":{\"h\":\"知识要点\"},\"2211\":{\"h\":\"2.1 基础循环打印法\",\"t\":[\"循环打印是最原始但最灵活的数组打印方式，适用于所有数组类型，尤其适合需要自定义格式的场景。\"]},\"2212\":{\"h\":\"2.1.1 for循环打印一维数组\",\"t\":[\"public class ArrayPrintDemo { public static void printArrayWithForLoop() { int[] numbers = {1, 2, 3, 4, 5}; System.out.print(\\\"[\\\"); for (int i = 0; i < numbers.length; i++) { System.out.print(numbers[i]); if (i < numbers.length - 1) { System.out.print(\\\", \\\"); } } System.out.println(\\\"]\\\"); // 输出: [1, 2, 3, 4, 5] } }\"]},\"2213\":{\"h\":\"2.1.2 增强for循环打印数组\",\"t\":[\"public class ArrayPrintDemo { public static void printArrayWithEnhancedFor() { String[] fruits = {\\\"Apple\\\", \\\"Banana\\\", \\\"Orange\\\"}; System.out.print(\\\"[\\\"); boolean first = true; for (String fruit : fruits) { if (!first) { System.out.print(\\\", \\\"); } System.out.print(fruit); first = false; } System.out.println(\\\"]\\\"); // 输出: [Apple, Banana, Orange] } }\"]},\"2214\":{\"h\":\"2.1.3 嵌套循环打印二维数组\",\"t\":[\"public class ArrayPrintDemo { public static void print2DArrayWithLoop() { int[][] matrix = { {1, 2, 3}, {4, 5, 6}, {7, 8, 9} }; System.out.println(\\\"[\\\"); for (int i = 0; i < matrix.length; i++) { System.out.print(\\\" [\\\"); for (int j = 0; j < matrix[i].length; j++) { System.out.print(matrix[i][j]); if (j < matrix[i].length - 1) { System.out.print(\\\", \\\"); } } System.out.println(\\\"]\\\"); } System.out.println(\\\"]\\\"); /* 输出: [ [1, 2, 3] [4, 5, 6] [7, 8, 9] ] */ } }\"]},\"2215\":{\"h\":\"2.2 Arrays工具类打印法\",\"t\":[\"Java提供了java.util.Arrays工具类，封装了常用的数组操作方法，其中toString()和deepToString()是打印数组的便捷工具。\"]},\"2216\":{\"h\":\"2.2.1 Arrays.toString()打印一维数组\",\"t\":[\"import java.util.Arrays; public class ArrayPrintDemo { public static void printWithArraysToString() { int[] numbers = {1, 2, 3, 4, 5}; String[] fruits = {\\\"Apple\\\", \\\"Banana\\\", \\\"Orange\\\"}; double[] prices = {10.99, 20.50, 5.99}; System.out.println(Arrays.toString(numbers)); // [1, 2, 3, 4, 5] System.out.println(Arrays.toString(fruits)); // [Apple, Banana, Orange] System.out.println(Arrays.toString(prices)); // [10.99, 20.5, 5.99] } }\"]},\"2217\":{\"h\":\"2.2.2 Arrays.deepToString()打印多维数组\",\"t\":[\"import java.util.Arrays; public class ArrayPrintDemo { public static void printWithArraysDeepToString() { int[][] matrix = { {1, 2, 3}, {4, 5, 6}, {7, 8, 9} }; String[][] names = { {\\\"Alice\\\", \\\"Bob\\\"}, {\\\"Charlie\\\", \\\"David\\\"} }; System.out.println(Arrays.deepToString(matrix)); // [[1, 2, 3], [4, 5, 6], [7, 8, 9]] System.out.println(Arrays.deepToString(names)); // [[Alice, Bob], [Charlie, David]] } }\"]},\"2218\":{\"h\":\"2.2.3 Arrays.asList()配合打印\",\"t\":[\"import java.util.Arrays; public class ArrayPrintDemo { public static void printWithArraysAsList() { String[] fruits = {\\\"Apple\\\", \\\"Banana\\\", \\\"Orange\\\"}; // Arrays.asList()将数组转换为List集合 System.out.println(Arrays.asList(fruits)); // [Apple, Banana, Orange] } }\"]},\"2219\":{\"h\":\"2.3 Java 8+流API打印法\",\"t\":[\"Java 8引入的Stream API提供了更现代、更灵活的数组打印方式，支持函数式编程风格。\"]},\"2220\":{\"h\":\"2.3.1 使用Stream.forEach()打印\",\"t\":[\"import java.util.Arrays; public class ArrayPrintDemo { public static void printWithStreamForEach() { int[] numbers = {1, 2, 3, 4, 5}; String[] fruits = {\\\"Apple\\\", \\\"Banana\\\", \\\"Orange\\\"}; // 打印int数组 System.out.print(\\\"[\\\"); Arrays.stream(numbers).forEach(n -> System.out.print(n + \\\", \\\")); System.out.println(\\\"]\\\"); // [1, 2, 3, 4, 5, ] // 打印String数组 System.out.print(\\\"[\\\"); Arrays.stream(fruits).forEach(f -> System.out.print(f + \\\", \\\")); System.out.println(\\\"]\\\"); // [Apple, Banana, Orange, ] } }\"]},\"2221\":{\"h\":\"2.3.2 使用Collectors.joining()格式化打印\",\"t\":[\"import java.util.Arrays; import java.util.stream.Collectors; public class ArrayPrintDemo { public static void printWithCollectorsJoining() { String[] fruits = {\\\"Apple\\\", \\\"Banana\\\", \\\"Orange\\\"}; // 使用Stream API和Collectors.joining()格式化 String result = Arrays.stream(fruits) .collect(Collectors.joining(\\\", \\\", \\\"[\\\", \\\"]\\\")); System.out.println(result); // [Apple, Banana, Orange] } }\"]},\"2222\":{\"h\":\"2.4 常见数组类型打印对比\",\"t\":[\"不同类型的数组需要采用不同的打印策略，以下是常见数组类型的最佳打印实践：\"]},\"2223\":{\"h\":\"2.4.1 基本类型数组\",\"t\":[\"import java.util.Arrays; public class ArrayPrintDemo { public static void printPrimitiveArrays() { int[] intArray = {1, 2, 3}; char[] charArray = {'a', 'b', 'c'}; boolean[] boolArray = {true, false, true}; // 基本类型数组推荐使用Arrays.toString() System.out.println(Arrays.toString(intArray)); // [1, 2, 3] System.out.println(Arrays.toString(charArray)); // [a, b, c] System.out.println(Arrays.toString(boolArray)); // [true, false, true] } }\"]},\"2224\":{\"h\":\"2.4.2 对象数组\",\"t\":[\"import java.util.Arrays; class Person { private String name; private int age; public Person(String name, int age) { this.name = name; this.age = age; } // 重写toString()方法 @Override public String toString() { return name + \\\"(\\\" + age + \\\")\\\"; } } public class ArrayPrintDemo { public static void printObjectArrays() { Person[] people = { new Person(\\\"Alice\\\", 25), new Person(\\\"Bob\\\", 30) }; // 对象数组打印依赖于对象的toString()方法 System.out.println(Arrays.toString(people)); // [Alice(25), Bob(30)] } }\"]},\"2225\":{\"h\":\"知识扩展\"},\"2226\":{\"h\":\"3.1 设计思想\"},\"2227\":{\"h\":\"3.1.1 数组打印方法性能对比\",\"t\":[\"方法\",\"优点\",\"缺点\",\"适用场景\",\"for循环\",\"完全自定义，无额外依赖\",\"代码冗长，易出错\",\"需要高度自定义格式\",\"Arrays.toString()\",\"简洁高效，代码量少\",\"格式固定，无法自定义\",\"快速打印，调试场景\",\"Stream API\",\"函数式风格，可链式操作\",\"JDK8+依赖，性能略低\",\"复杂格式化，函数式编程\",\"第三方库\",\"功能丰富，使用简单\",\"引入外部依赖\",\"企业级项目，复杂需求\"]},\"2228\":{\"h\":\"3.1.2 自定义数组打印工具类\",\"t\":[\"import java.util.Arrays; public class ArrayPrinter { // 私有化构造方法，防止实例化 private ArrayPrinter() {} // 打印一维数组 public static <T> void print(T[] array) { if (array == null) { System.out.println(\\\"null\\\"); return; } System.out.println(Arrays.toString(array)); } // 打印基本类型int数组 public static void print(int[] array) { if (array == null) { System.out.println(\\\"null\\\"); return; } System.out.println(Arrays.toString(array)); } // 打印多维数组 public static void print(Object[][] array) { if (array == null) { System.out.println(\\\"null\\\"); return; } System.out.println(Arrays.deepToString(array)); } // 自定义格式打印 public static <T> void printCustom(T[] array, String prefix, String suffix, String delimiter) { if (array == null) { System.out.println(prefix + suffix); return; } StringBuilder sb = new StringBuilder(prefix); for (int i = 0; i < array.length; i++) { sb.append(array[i]); if (i < array.length - 1) { sb.append(delimiter); } } sb.append(suffix); System.out.println(sb.toString()); } }\"]},\"2229\":{\"h\":\"3.2 避坑指南\"},\"2230\":{\"h\":\"3.2.1 直接打印数组引用的陷阱\",\"t\":[\"问题：直接打印数组变量会输出内存地址而非内容 解决方案：使用Arrays.toString()或其他打印方法\",\"int[] numbers = {1, 2, 3}; // 错误示例 System.out.println(numbers); // 输出类似: [I@1b6d3586 // 正确示例 System.out.println(Arrays.toString(numbers)); // [1, 2, 3]\"]},\"2231\":{\"h\":\"3.2.2 多维数组打印的问题\",\"t\":[\"问题：使用Arrays.toString()打印多维数组无法正确显示嵌套内容 解决方案：使用Arrays.deepToString()方法\",\"int[][] matrix = { {1, 2, 3}, {4, 5, 6} }; // 错误示例 System.out.println(Arrays.toString(matrix)); // [[I@4554617c, [I@74a14482] // 正确示例 System.out.println(Arrays.deepToString(matrix)); // [[1, 2, 3], [4, 5, 6]]\"]},\"2232\":{\"h\":\"3.2.3 对象数组打印无意义内容\",\"t\":[\"问题：对象数组打印时显示类似com.example.Person@123456解决方案：重写对象的toString()方法\",\"class Person { private String name; private int age; // 构造方法省略 // 重写toString()方法 @Override public String toString() { return \\\"Person{name='\\\" + name + \\\"', age=\\\" + age + \\\"}\\\"; } } // 打印结果将变为有意义的内容 // [Person{name='Alice', age=25}, Person{name='Bob', age=30}]\"]},\"2233\":{\"h\":\"3.3 深度思考题\",\"t\":[\"Arrays.toString()和Arrays.deepToString()的实现原理有何不同？\",\"为什么基本类型数组和对象数组的打印方式需要区分对待？\",\"如何实现一个通用的数组打印工具类，支持任意类型、任意维度的数组？\",\"在大数据量数组打印时，如何避免内存溢出和性能问题？\"]},\"2234\":{\"h\":\"思考题参考答案\",\"t\":[\"Arrays.toString()与Arrays.deepToString()的实现区别：\",\"Arrays.toString()：适用于一维数组，直接遍历数组元素并拼接字符串\",\"Arrays.deepToString()：适用于多维数组，通过递归方式处理嵌套数组\",\"源码核心区别在于deepToString()会检查元素是否为数组类型，如果是则递归调用\",\"通用数组打印工具类实现思路：\",\"public class UniversalArrayPrinter { public static String toString(Object array) { if (array == null) return \\\"null\\\"; if (!array.getClass().isArray()) return array.toString(); StringBuilder sb = new StringBuilder(); sb.append(\\\"[\\\"); int length = java.lang.reflect.Array.getLength(array); for (int i = 0; i < length; i++) { Object element = java.lang.reflect.Array.get(array, i); if (i > 0) sb.append(\\\", \\\"); sb.append(toString(element)); // 递归处理 } sb.append(\\\"]\\\"); return sb.toString(); } }\"]},\"2235\":{\"h\":\"1.2.4 字符串常量\"},\"2236\":{\"h\":\"概述\",\"t\":[\"字符串常量是Java中一种特殊的字符串表示形式，具有不可变性和常量池存储特性。理解字符串常量的实现机制对于编写高效Java代码至关重要。本章将深入探讨字符串常量的内存模型、常量池工作原理、字符串驻留机制以及相关的性能优化策略，帮助开发者掌握字符串常量的正确使用方法和最佳实践。\"]},\"2237\":{\"h\":\"知识要点\"},\"2238\":{\"h\":\"2.1 字符串常量的定义与特性\",\"t\":[\"字符串常量是通过双引号直接声明的字符串，在编译期确定其值，并存储在字符串常量池中，具有不可变性和全局唯一性。\"]},\"2239\":{\"h\":\"2.1.1 字符串常量的声明方式\",\"t\":[\"public class StringConstantDemo { public static void main(String[] args) { // 字符串常量声明（存储在常量池） String str1 = \\\"Hello World\\\"; String str2 = \\\"Hello World\\\"; // 复用常量池中的同一对象 // 字符串对象声明（存储在堆内存） String str3 = new String(\\\"Hello World\\\"); String str4 = new String(\\\"Hello World\\\"); // 创建新的堆对象 System.out.println(str1 == str2); // true，引用常量池同一对象 System.out.println(str1 == str3); // false，引用不同内存区域 System.out.println(str3 == str4); // false，引用不同堆对象 } }\"]},\"2240\":{\"h\":\"2.1.2 不可变性的底层实现\",\"t\":[\"String类的不可变性通过类声明和内部存储结构实现，确保字符串对象创建后其值无法被修改。\",\"public final class String { private final char value[]; // 存储字符串的字符数组 private int hash; // 缓存的哈希码 // 构造方法 public String(String original) { this.value = original.value; this.hash = original.hash; } // 所有修改方法都会创建新的String对象 public String substring(int beginIndex) { // ...实现逻辑 return new String(result, 0, len); } }\"]},\"2241\":{\"h\":\"2.2 字符串常量池机制\",\"t\":[\"字符串常量池是Java堆内存中的一个特殊区域，用于存储字符串常量，实现字符串的复用和内存优化。\"]},\"2242\":{\"h\":\"2.2.1 常量池的内存结构\"},\"2243\":{\"h\":\"2.2.2 字符串常量池的工作流程\",\"t\":[\"编译期：字符串常量被记录在Class文件的常量池中\",\"类加载期：Class常量池内容被加载到运行时常量池\",\"运行期：首次使用字符串常量时，JVM在字符串常量池中查找或创建对应对象\",\"public class ConstantPoolWorkflow { public static void main(String[] args) { // 编译期：\\\"Java\\\"被记录在Class常量池 // 类加载期：\\\"Java\\\"被加载到运行时常量池 // 运行期首次使用：在字符串常量池创建\\\"Java\\\"对象 String s1 = \\\"Java\\\"; // 运行期再次使用：直接引用常量池已有的\\\"Java\\\"对象 String s2 = \\\"Java\\\"; System.out.println(s1 == s2); // true，引用同一对象 } }\"]},\"2244\":{\"h\":\"2.3 String.intern()方法\",\"t\":[\"intern()方法是Java提供的显式操作字符串常量池的方式，用于将字符串对象加入常量池并返回常量池中的引用。\"]},\"2245\":{\"h\":\"2.3.1 intern()方法的基本使用\",\"t\":[\"public class StringInternDemo { public static void main(String[] args) { // 创建堆内存字符串对象 String s1 = new String(\\\"Hello\\\"); String s2 = new String(\\\"Hello\\\"); // 将对象加入常量池并获取引用 String s3 = s1.intern(); String s4 = s2.intern(); // 常量池中的字符串字面量 String s5 = \\\"Hello\\\"; System.out.println(s1 == s2); // false，不同堆对象 System.out.println(s3 == s4); // true，引用常量池同一对象 System.out.println(s3 == s5); // true，引用常量池同一对象 System.out.println(s1 == s3); // false，堆对象与常量池对象 } }\"]},\"2246\":{\"h\":\"2.3.2 JDK版本中intern()行为差异\",\"t\":[\"JDK版本\",\"intern()行为\",\"常量池位置\",\"JDK 6及之前\",\"复制字符串到永久代常量池\",\"永久代\",\"JDK 7及之后\",\"仅在常量池存储引用（指向堆中对象）\",\"堆内存\",\"// JDK 6与JDK 7+行为对比示例 public class InternVersionDiff { public static void main(String[] args) { String s = new String(\\\"1\\\"); s.intern(); String s2 = \\\"1\\\"; System.out.println(s == s2); // JDK6: false; JDK7+: false String s3 = new String(\\\"2\\\") + new String(\\\"2\\\"); s3.intern(); String s4 = \\\"22\\\"; System.out.println(s3 == s4); // JDK6: false; JDK7+: true } }\"]},\"2247\":{\"h\":\"2.4 字符串常量的比较操作\",\"t\":[\"字符串常量比较需要区分引用比较(==)和内容比较(equals())，理解两者差异对避免常见错误至关重要。\"]},\"2248\":{\"h\":\"2.4.1 ==与equals()的区别\",\"t\":[\"public class StringComparisonDemo { public static void main(String[] args) { String s1 = \\\"hello\\\"; String s2 = \\\"hello\\\"; String s3 = new String(\\\"hello\\\"); String s4 = new String(\\\"hello\\\"); // 引用比较（==） System.out.println(s1 == s2); // true，同一常量池对象 System.out.println(s1 == s3); // false，不同内存区域 System.out.println(s3 == s4); // false，不同堆对象 // 内容比较（equals()） System.out.println(s1.equals(s2)); // true，内容相同 System.out.println(s1.equals(s3)); // true，内容相同 System.out.println(s3.equals(s4)); // true，内容相同 } }\"]},\"2249\":{\"h\":\"2.4.2 常量折叠现象\",\"t\":[\"编译器会对字符串常量表达式进行优化，在编译期计算结果并合并相同字符串。\",\"public class ConstantFoldingDemo { public static void main(String[] args) { String s1 = \\\"a\\\" + \\\"b\\\" + \\\"c\\\"; // 编译期优化为\\\"abc\\\" String s2 = \\\"abc\\\"; System.out.println(s1 == s2); // true String a = \\\"a\\\"; String s3 = a + \\\"bc\\\"; // 运行期拼接，new String(\\\"abc\\\") System.out.println(s3 == s2); // false // final变量也会触发常量折叠 final String b = \\\"b\\\"; String s4 = \\\"a\\\" + b + \\\"c\\\"; // 编译期优化为\\\"abc\\\" System.out.println(s4 == s2); // true } }\"]},\"2250\":{\"h\":\"知识扩展\"},\"2251\":{\"h\":\"3.1 设计思想\"},\"2252\":{\"h\":\"3.1.1 字符串常量池的设计目的\",\"t\":[\"内存优化：避免相同字符串的重复创建，节省内存空间\",\"性能提升：常量比较可直接使用==，提高比较效率\",\"安全保障：不可变字符串适合作为哈希表键和参数传递\"]},\"2253\":{\"h\":\"3.1.2 字符串常量 vs 字符串对象\",\"t\":[\"特性\",\"字符串常量\",\"字符串对象\",\"创建方式\",\"字面量声明：\\\"abc\\\"\",\"new关键字：new String(\\\"abc\\\")\",\"存储位置\",\"字符串常量池\",\"堆内存\",\"复用性\",\"自动复用，全局唯一\",\"每次创建新对象\",\"内存效率\",\"高，避免重复存储\",\"低，可能存在重复对象\",\"适用场景\",\"固定不变的字符串\",\"需要动态修改的字符串\"]},\"2254\":{\"h\":\"3.2 避坑指南\"},\"2255\":{\"h\":\"3.2.1 字符串常量比较错误\",\"t\":[\"问题：错误使用==比较字符串内容 解决方案：使用equals()比较内容，==仅用于判断引用是否相同\",\"String username = getUserInput(); // 错误示例 if (username == \\\"admin\\\") { // 比较的是引用而非内容 // 逻辑处理 } // 正确示例 if (\\\"admin\\\".equals(username)) { // 安全比较，避免空指针 // 逻辑处理 } // 带空值判断的比较 if (username != null && username.equals(\\\"admin\\\")) { // 逻辑处理 }\"]},\"2256\":{\"h\":\"3.2.2 过度使用intern()方法\",\"t\":[\"问题：盲目使用intern()方法尝试优化内存 解决方案：仅对高频复用字符串使用intern()\",\"// 不推荐：低频使用的字符串无需intern() String lowFrequencyStr = new String(getDynamicInput()).intern(); // 推荐：高频复用的字符串适合intern() public class Constants { public static final String ERROR_CODE_404 = \\\"NOT_FOUND\\\".intern(); public static final String ERROR_CODE_500 = \\\"INTERNAL_ERROR\\\".intern(); // ...其他常量 }\"]},\"2257\":{\"h\":\"3.2.3 字符串拼接性能问题\",\"t\":[\"问题：在循环中使用+拼接字符串常量 解决方案：使用StringBuilder或StringBuffer\",\"// 性能差：每次循环创建新String对象 String result =\"]},\"2258\":{\"h\":\"1.2.5 可变字符串\"},\"2259\":{\"h\":\"概述\",\"t\":[\"可变字符串是Java中用于处理动态字符串内容的重要工具，主要通过StringBuilder和StringBuffer类实现。与不可变的String类不同，可变字符串允许在原有对象上进行修改操作，避免频繁创建新对象带来的性能开销。本章将深入讲解可变字符串的实现原理、使用方法、性能特性以及在不同场景下的最佳实践，帮助开发者高效处理字符串动态拼接和修改需求。\"]},\"2260\":{\"h\":\"知识要点\"},\"2261\":{\"h\":\"2.1 可变字符串核心类\",\"t\":[\"Java提供了两个主要的可变字符串类：StringBuilder（非线程安全）和StringBuffer（线程安全），均继承自AbstractStringBuilder抽象类。\"]},\"2262\":{\"h\":\"2.1.1 类继承关系与核心结构\"},\"2263\":{\"h\":\"2.1.2 类定义与核心字段\",\"t\":[\"// AbstractStringBuilder核心结构 abstract class AbstractStringBuilder implements Appendable, CharSequence { char[] value; // 存储字符的数组（非final，支持修改） int count; // 实际字符数量 // 构造方法 AbstractStringBuilder(int capacity) { value = new char[capacity]; } } // StringBuilder类定义（JDK8） public final class StringBuilder extends AbstractStringBuilder implements java.io.Serializable, CharSequence { // 无额外字段，继承自父类 // 构造方法 public StringBuilder() { super(16); } // 默认容量16 public StringBuilder(int capacity) { super(capacity); } public StringBuilder(String str) { super(str.length() + 16); append(str); } } // StringBuffer类定义（JDK8） public final class StringBuffer extends AbstractStringBuilder implements java.io.Serializable, CharSequence { // 无额外字段，继承自父类 // 构造方法 public StringBuffer() { super(16); } // 默认容量16 public StringBuffer(int capacity) { super(capacity); } public StringBuffer(String str) { super(str.length() + 16); append(str); } }\"]},\"2264\":{\"h\":\"2.2 StringBuilder的使用\",\"t\":[\"StringBuilder是单线程环境下的首选可变字符串类，提供了丰富的字符串修改方法，支持链式调用。\"]},\"2265\":{\"h\":\"2.2.1 基本操作方法\",\"t\":[\"public class StringBuilderDemo { public static void main(String[] args) { // 创建StringBuilder对象 StringBuilder sb = new StringBuilder(); // 追加操作 sb.append(\\\"Hello\\\"); sb.append(\\\" \\\"); sb.append(\\\"World\\\"); System.out.println(sb.toString()); // Hello World // 插入操作 sb.insert(5, \\\",\\\"); // 在索引5处插入逗号 System.out.println(sb.toString()); // Hello, World // 删除操作 sb.delete(5, 6); // 删除索引5-6（不包含6）的字符 System.out.println(sb.toString()); // Hello World // 替换操作 sb.replace(6, 11, \\\"Java\\\"); // 替换索引6-11的字符 System.out.println(sb.toString()); // Hello Java // 反转操作 sb.reverse(); System.out.println(sb.toString()); // avaJ olleH // 清空操作 sb.setLength(0); System.out.println(sb.length()); // 0 } }\"]},\"2266\":{\"h\":\"2.2.2 链式调用特性\",\"t\":[\"public class StringBuilderChainDemo { public static void main(String[] args) { // 链式调用示例 String result = new StringBuilder() .append(\\\"User: \\\") .append(\\\"Alice\\\") .append(\\\" (ID: \\\") .append(12345) .append(\\\")\\\") .toString(); System.out.println(result); // User: Alice (ID: 12345) } }\"]},\"2267\":{\"h\":\"2.3 StringBuffer的使用\",\"t\":[\"StringBuffer与StringBuilder API完全一致，但所有方法都添加了synchronized修饰，确保多线程安全。\"]},\"2268\":{\"h\":\"2.3.1 线程安全实现\",\"t\":[\"// StringBuffer的append方法（带同步锁） public synchronized StringBuffer append(String str) { toStringCache = null; super.append(str); return this; } // StringBuilder的append方法（无同步锁） public StringBuilder append(String str) { super.append(str); return this; }\"]},\"2269\":{\"h\":\"2.3.2 多线程环境使用示例\",\"t\":[\"import java.util.concurrent.CountDownLatch; public class StringBufferThreadSafeDemo { private static final int THREAD_COUNT = 10; private static StringBuffer safeBuffer = new StringBuffer(); private static StringBuilder unsafeBuilder = new StringBuilder(); private static CountDownLatch latch = new CountDownLatch(THREAD_COUNT); public static void main(String[] args) throws InterruptedException { // 启动多个线程操作字符串 for (int i = 0; i < THREAD_COUNT; i++) { final int threadId = i; new Thread(() -> { try { safeBuffer.append(\\\"thread\\\").append(threadId).append(\\\",\\\"); unsafeBuilder.append(\\\"thread\\\").append(threadId).append(\\\",\\\"); } finally { latch.countDown(); } }).start(); } latch.await(); // 等待所有线程完成 System.out.println(\\\"StringBuffer结果长度: \\\" + safeBuffer.length()); // 预期: 10*(6+1+1)=80 System.out.println(\\\"StringBuilder结果长度: \\\" + unsafeBuilder.length()); // 可能小于80（因线程不安全） } }\"]},\"2270\":{\"h\":\"2.4 容量管理机制\",\"t\":[\"可变字符串内部通过字符数组存储数据，合理的容量管理对性能至关重要。\"]},\"2271\":{\"h\":\"2.4.1 容量与长度的区别\",\"t\":[\"容量(Capacity)：内部字符数组的总长度\",\"长度(Length)：实际存储的字符数量\",\"public class CapacityDemo { public static void main(String[] args) { StringBuilder sb = new StringBuilder(); System.out.println(\\\"初始容量: \\\" + sb.capacity()); // 16 System.out.println(\\\"初始长度: \\\" + sb.length()); // 0 sb.append(\\\"HelloWorld\\\"); System.out.println(\\\"添加后容量: \\\" + sb.capacity()); // 16（未超过） System.out.println(\\\"添加后长度: \\\" + sb.length()); // 10 // 追加超出当前容量的内容 sb.append(\\\"1234567\\\"); // 总长度变为17 System.out.println(\\\"扩容后容量: \\\" + sb.capacity()); // 34（原容量*2+2） } }\"]},\"2272\":{\"h\":\"2.4.2 扩容机制\",\"t\":[\"当追加内容导致长度超过容量时，会触发扩容：\",\"JDK6及之前：新容量 = 原容量 * 2 + 2\",\"JDK7及之后：若原容量2 < 所需容量，则新容量 = 所需容量；否则新容量 = 原容量2\",\"// AbstractStringBuilder的扩容逻辑 void ensureCapacityInternal(int minimumCapacity) { // overflow-conscious code if (minimumCapacity - value.length > 0) { value = Arrays.copyOf(value, newCapacity(minimumCapacity)); } } private int newCapacity(int minCapacity) { // overflow-conscious code int newCapacity = (value.length << 1) + 2; // 原容量*2+2 if (newCapacity - minCapacity < 0) { newCapacity = minCapacity; } return (newCapacity <= 0 || MAX_ARRAY_SIZE - newCapacity < 0) ? hugeCapacity(minCapacity) : newCapacity; }\"]},\"2273\":{\"h\":\"知识扩展\"},\"2274\":{\"h\":\"3.1 设计思想\"},\"2275\":{\"h\":\"3.1.1 StringBuilder vs StringBuffer vs String\",\"t\":[\"特性\",\"String\",\"StringBuilder\",\"StringBuffer\",\"可变性\",\"不可变\",\"可变\",\"可变\",\"线程安全\",\"安全（不可变）\",\"不安全\",\"安全（同步方法）\",\"性能\",\"低（每次修改创建新对象）\",\"高\",\"中（同步开销）\",\"适用场景\",\"少量固定字符串\",\"单线程大量字符串操作\",\"多线程字符串操作\",\"继承关系\",\"直接实现CharSequence\",\"继承AbstractStringBuilder\",\"继承AbstractStringBuilder\"]},\"2276\":{\"h\":\"3.1.2 性能对比测试\",\"t\":[\"public class PerformanceComparison { private static final int ITERATIONS = 100000; public static void main(String[] args) { // String拼接性能测试 long startTime = System.currentTimeMillis(); String str = \\\"\\\"; for (int i = 0; i < ITERATIONS; i++) { str += i; } long stringTime = System.currentTimeMillis() - startTime; // StringBuilder性能测试 startTime = System.currentTimeMillis(); StringBuilder sb = new StringBuilder(); for (int i = 0; i < ITERATIONS; i++) { sb.append(i); } long sbTime = System.currentTimeMillis() - startTime; // StringBuffer性能测试 startTime = System.currentTimeMillis(); StringBuffer sbf = new StringBuffer(); for (int i = 0; i < ITERATIONS; i++) { sbf.append(i); } long sbfTime = System.currentTimeMillis() - startTime; System.out.println(\\\"String耗时: \\\" + stringTime + \\\"ms\\\"); // 最慢 System.out.println(\\\"StringBuilder耗时: \\\" + sbTime + \\\"ms\\\"); // 最快 System.out.println(\\\"StringBuffer耗时: \\\" + sbfTime + \\\"ms\\\"); // 中等 } }\"]},\"2277\":{\"h\":\"3.2 避坑指南\"},\"2278\":{\"h\":\"3.2.1 初始容量设置不当\",\"t\":[\"问题：未指定初始容量导致频繁扩容 解决方案：预估字符串长度并设置初始容量\",\"// 不推荐：默认容量16，可能导致多次扩容 StringBuilder sb = new StringBuilder(); // 推荐：根据预期长度设置初始容量 int expectedLength = 1000; StringBuilder sb = new StringBuilder(expectedLength);\"]},\"2279\":{\"h\":\"3.2.2 多线程误用StringBuilder\",\"t\":[\"问题：在多线程环境使用StringBuilder导致数据错乱 解决方案：使用StringBuffer或手动同步\",\"// 错误示例：多线程使用StringBuilder StringBuilder sb = new StringBuilder(); // 多线程同时调用sb.append()... // 正确示例1：使用StringBuffer StringBuffer sb = new StringBuffer(); // 正确示例2：手动同步StringBuilder StringBuilder sb = new StringBuilder(); synchronized(sb) { sb.append(\\\"thread-safe\\\"); }\"]},\"2280\":{\"h\":\"3.2.3 不必要的toString()调用\",\"t\":[\"问题：循环中频繁调用toString()方法 解决方案：循环结束后一次性调用\",\"// 不推荐：每次循环都创建新String对象 StringBuilder sb = new StringBuilder(); for (int i = 0; i < 100; i++) { sb.append(i); System.out.println(sb.toString()); // 每次调用创建新String } // 推荐：循环结束后调用一次 StringBuilder sb = new StringBuilder(); for (int i = 0; i < 100; i++) { sb.append(i); } System.out.println(sb.toString()); // 仅创建一个String对象\"]},\"2281\":{\"h\":\"3.3 深度思考题\",\"t\":[\"为什么StringBuilder和StringBuffer的默认初始容量是16？\",\"如何实现一个自定义的线程安全且高性能的可变字符串类？\",\"在JDK9及以上版本中，String类的实现改为byte数组存储，这对StringBuilder有影响吗？\",\"分析以下代码的性能瓶颈及优化方案：\",\"public String processData(List<String> dataList) { String result = \\\"\\\"; for (String data : dataList) { result += \\\"[\\\" + data + \\\"]\\\"; } return result; }\"]},\"2282\":{\"h\":\"思考题参考答案\",\"t\":[\"默认容量16的设计考量：\",\"平衡内存占用和扩容频率\",\"大多数字符串操作场景下，16个字符足以避免初始扩容\",\"较小的初始容量可减少内存浪费\",\"二进制计算友好（2^4=16）\",\"高性能线程安全可变字符串实现思路：\",\"import java.util.concurrent.locks.ReentrantLock; public class FastStringBuffer { private final ReentrantLock lock = new ReentrantLock(); private char[] value; private int count; public FastStringBuffer(int capacity) { value = new char[capacity > 0 ? capacity : 16]; } public FastStringBuffer append(String str) { lock.lock(); try { // 实现追加逻辑，参考AbstractStringBuilder int len = str.length(); ensureCapacityInternal(count + len); str.getChars(0, len, value, count); count += len; return this; } finally { lock.unlock(); } } // 其他方法实现... private void ensureCapacityInternal(int minimumCapacity) { // 扩容逻辑... } }\"]},\"2283\":{\"h\":\"1.2.6 字符串源码解读\"},\"2284\":{\"h\":\"概述\",\"t\":[\"Java中的String类是最常用的类之一，其源码实现蕴含了丰富的设计思想和性能优化技巧。本章将深入JDK源码，剖析String类的内部结构、核心方法实现、不可变性机制以及字符串常量池的工作原理。通过对源码的解读，帮助开发者理解String类的底层实现，掌握字符串操作的性能特性，避免常见的使用误区，并能在实际开发中做出更合理的技术选择。\"]},\"2285\":{\"h\":\"知识要点\"},\"2286\":{\"h\":\"2.1 String类的定义与结构\"},\"2287\":{\"h\":\"2.1.1 类定义与继承关系\",\"t\":[\"// JDK8 String类定义 gpublic final class String implements java.io.Serializable, Comparable<String>, CharSequence { // 类主体 }\",\"关键特性：\",\"使用final修饰，不能被继承\",\"实现Serializable接口，支持序列化\",\"实现Comparable接口，支持自然排序\",\"实现CharSequence接口，提供字符序列操作\"]},\"2288\":{\"h\":\"2.1.2 核心字段（JDK8）\",\"t\":[\"// 存储字符串的字符数组，使用final修饰确保不可变性 private final char value[]; // 缓存字符串的哈希码，默认为0 private int hash; // Default to 0 // 序列化版本号 private static final long serialVersionUID = -6849794470754667710L; // 用于支持字符串拼接的特殊构造方法标记 private static final ObjectStreamField[] serialPersistentFields = new ObjectStreamField[0];\"]},\"2289\":{\"h\":\"2.1.3 JDK9及以上版本的结构变化\",\"t\":[\"JDK9对String的实现进行了优化，将存储结构从char[]改为byte[]，并增加了编码标识：\",\"// JDK9+ String类核心字段 private final byte[] value; // 编码标识：0-Latin-1(单字节), 1-UTF-16(双字节) private final byte coder; // 哈希码缓存 private int hash;\",\"优化原因：\",\"大多数字符串使用Latin-1字符集，每个字符仅需1个字节\",\"相比char[]节省50%的内存空间\",\"保留UTF-16支持以处理复杂字符\"]},\"2290\":{\"h\":\"2.2 构造方法实现\",\"t\":[\"String类提供了多种构造方法，用于从不同数据源创建字符串对象。\"]},\"2291\":{\"h\":\"2.2.1 常用构造方法（JDK8）\",\"t\":[\"// 1. 无参构造方法（已过时，JDK1.1引入，JDK9标记为过时） @Deprecated(since=\\\"9\\\") public String() { this.value = \\\"\\\".value; } // 2. 通过char数组创建 public String(char value[]) { this.value = Arrays.copyOf(value, value.length); } // 3. 通过char数组指定范围创建 public String(char value[], int offset, int count) { // 边界检查 if (offset < 0) { throw new StringIndexOutOfBoundsException(offset); } if (count <= 0) { if (count < 0) { throw new StringIndexOutOfBoundsException(count); } if (offset <= value.length) { this.value = \\\"\\\".value; return; } } // Note: offset or count might be near -1>>>1. if (offset > value.length - count) { throw new StringIndexOutOfBoundsException(offset + count); } this.value = Arrays.copyOfRange(value, offset, offset+count); } // 4. 通过String对象创建（字符串常量池相关） public String(String original) { this.value = original.value; this.hash = original.hash; }\"]},\"2292\":{\"h\":\"2.2.2 构造方法的深拷贝特性\",\"t\":[\"String构造方法对传入的数组参数进行深拷贝，确保外部数组修改不会影响String内部：\",\"public class StringConstructorDemo { public static void main(String[] args) { char[] arr = {'h', 'e', 'l', 'l', 'o'}; String str = new String(arr); arr[0] = 'H'; // 修改原数组 System.out.println(str); // 输出\\\"hello\\\"，不受原数组修改影响 } }\"]},\"2293\":{\"h\":\"2.3 核心方法源码解析\"},\"2294\":{\"h\":\"2.3.1 equals()方法\",\"t\":[\"String重写了Object的equals()方法，基于字符序列比较：\",\"public boolean equals(Object anObject) { // 1. 引用相同对象，直接返回true if (this == anObject) { return true; } // 2. 检查是否为String类型 if (anObject instanceof String) { String anotherString = (String)anObject; int n = value.length; // 3. 长度相同才继续比较 if (n == anotherString.value.length) { char v1[] = value; char v2[] = anotherString.value; int i = 0; // 4. 逐个字符比较 while (n-- != 0) { if (v1[i] != v2[i]) return false; i++; } return true; } } return false; }\",\"性能特点：\",\"时间复杂度：O(n)，n为字符串长度\",\"短路比较：发现第一个不同字符立即返回\",\"先比较引用，再比较类型，最后比较内容\"]},\"2295\":{\"h\":\"2.3.2 hashCode()方法\",\"t\":[\"String重写了Object的hashCode()方法，基于字符序列计算哈希值：\",\"public int hashCode() { int h = hash; if (h == 0 && value.length > 0) { char val[] = value; // 哈希计算公式：s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1] for (int i = 0; i < value.length; i++) { h = 31 * h + val[i]; } hash = h; } return h; }\",\"选择31作为乘数的原因：\",\"31是一个奇素数，减少哈希碰撞\",\"31 = 2^5 - 1，编译器可优化为位运算：31 * i = (i << 5) - i\",\"历史原因，早期Java实现选择后一直沿用\"]},\"2296\":{\"h\":\"2.3.3 substring()方法\",\"t\":[\"JDK6与JDK7+的substring实现有显著差异：\",\"JDK6实现（存在内存泄漏风险）：\",\"public String substring(int beginIndex, int endIndex) { // 直接使用原字符数组的引用 return new String(offset + beginIndex, endIndex - beginIndex, value); }\",\"JDK7+实现（解决内存泄漏问题）：\",\"public String substring(int beginIndex, int endIndex) { // 边界检查 if (beginIndex < 0) { throw new StringIndexOutOfBoundsException(beginIndex); } if (endIndex > value.length) { throw new StringIndexOutOfBoundsException(endIndex); } int subLen = endIndex - beginIndex; if (subLen < 0) { throw new StringIndexOutOfBoundsException(subLen); } // 创建新的字符数组 return ((beginIndex == 0) && (endIndex == value.length)) ? this : new String(value, beginIndex, subLen); }\",\"JDK7改进原因：\",\"原实现会导致小字符串引用大字符数组，造成内存泄漏\",\"新实现通过Arrays.copyOfRange创建新数组，切断对原数组的引用\"]},\"2297\":{\"h\":\"2.3.4 intern()方法\",\"t\":[\"intern()方法用于将字符串加入常量池并返回池中的引用：\",\"public native String intern();\",\"这是一个本地方法，其实现与字符串常量池密切相关：\",\"如果常量池中已存在该字符串，返回池中的引用\",\"如果不存在，将当前字符串加入常量池并返回其引用\",\"JDK6与JDK7+的intern()差异：\",\"JDK6：常量池在永久代，intern()会复制字符串到永久代\",\"JDK7+：常量池在堆中，intern()不会复制字符串，仅记录引用\"]},\"2298\":{\"h\":\"2.4 不可变性机制\",\"t\":[\"String的不可变性是通过多重机制保证的：\"]},\"2299\":{\"h\":\"2.4.1 不可变性的实现方式\",\"t\":[\"char数组使用final修饰：value数组引用不可变\",\"无修改数组的方法：String类没有提供修改value数组的方法\",\"私有字段：value数组是private的，外部无法直接访问\",\"防御性拷贝：构造方法接收外部数组时进行深拷贝\",\"// String类中没有类似setCharAt()的修改方法 // 所有\\\"修改\\\"操作都会创建新的String对象 public String toUpperCase() { // ... 创建新字符串的逻辑 ... }\"]},\"2300\":{\"h\":\"2.4.2 不可变性的好处\",\"t\":[\"线程安全：不可变对象天然线程安全\",\"常量池优化：可在常量池中共享相同字符串\",\"哈希码缓存：hashCode可缓存，提升Map等集合性能\",\"安全性：作为参数传递时不会被修改\"]},\"2301\":{\"h\":\"2.5 字符串常量池实现\",\"t\":[\"字符串常量池是JVM为优化字符串性能而设计的缓存机制。\"]},\"2302\":{\"h\":\"2.5.1 常量池存储位置变迁\"},\"2303\":{\"h\":\"2.5.2 字符串创建与常量池交互\",\"t\":[\"public class StringPoolDemo { public static void main(String[] args) { // 直接赋值：使用常量池中的对象 String s1 = \\\"abc\\\"; String s2 = \\\"abc\\\"; System.out.println(s1 == s2); // true，引用同一对象 // new关键字：在堆中创建新对象 String s3 = new String(\\\"abc\\\"); System.out.println(s1 == s3); // false，引用不同对象 // intern()方法：强制使用常量池 String s4 = s3.intern(); System.out.println(s1 == s4); // true，引用常量池对象 } }\"]},\"2304\":{\"h\":\"2.5.3 字符串拼接与常量池\",\"t\":[\"public class StringConcatenationDemo { public static void main(String[] args) { String s1 = \\\"a\\\"; String s2 = \\\"b\\\"; String s3 = \\\"ab\\\"; // 编译期优化：等同于\\\"ab\\\" String s4 = \\\"a\\\" + \\\"b\\\"; System.out.println(s3 == s4); // true // 运行期拼接：new String(\\\"ab\\\") String s5 = s1 + s2; System.out.println(s3 == s5); // false // final变量拼接：编译期优化 final String s6 = \\\"a\\\"; final String s7 = \\\"b\\\"; String s8 = s6 + s7; System.out.println(s3 == s8); // true } }\"]},\"2305\":{\"h\":\"知识扩展\"},\"2306\":{\"h\":\"3.1 设计思想\"},\"2307\":{\"h\":\"3.1.1 不可变对象设计模式\",\"t\":[\"String类是不可变对象设计模式的经典实现，遵循以下原则：\",\"类声明为final，避免被继承\",\"所有字段声明为private final\",\"不提供修改内部状态的方法\",\"对可变对象参数进行防御性拷贝\",\"返回副本而非原对象引用\",\"不可变模式的适用场景：\",\"字符串、数值等基础数据类型\",\"多线程环境下的共享对象\",\"哈希表的键（Key）\",\"常量值\"]},\"2308\":{\"h\":\"3.1.2 享元模式在常量池中的应用\",\"t\":[\"字符串常量池采用享元模式（Flyweight Pattern）优化内存使用：\",\"共享：相同字符串只存储一份\",\"细粒度：字符串是最小粒度的共享单位\",\"外部状态：通过String.intern()控制是否共享\"]},\"2309\":{\"h\":\"3.2 性能优化\"},\"2310\":{\"h\":\"3.2.1 字符串拼接性能对比\",\"t\":[\"拼接方式\",\"原理\",\"性能\",\"适用场景\",\"+ 运算符\",\"编译期转换为StringBuilder\",\"中等\",\"少量、简单拼接\",\"StringBuilder\",\"可变字符序列，无同步\",\"高\",\"单线程大量拼接\",\"StringBuffer\",\"可变字符序列，有同步\",\"中\",\"多线程拼接\",\"String.join()\",\"内部使用StringJoiner\",\"中\",\"集合元素拼接\"]},\"2311\":{\"h\":\"3.2.2 合理使用intern()方法\",\"t\":[\"intern()使用建议：\",\"对频繁出现的字符串（如数据库表名、配置项）使用intern()\",\"避免对长字符串使用intern()，可能导致常量池膨胀\",\"JDK7+中，intern()性能优于JDK6，可适当使用\",\"性能测试示例：\",\"public class InternPerformanceTest { public static void main(String[] args) { int iterations = 1000000; // 不使用intern() long start = System.currentTimeMillis(); for (int i = 0; i < iterations; i++) { String s = new String(\\\"test\\\" + i % 100); } long noInternTime = System.currentTimeMillis() - start; // 使用intern() start = System.currentTimeMillis(); for (int i = 0; i < iterations; i++) { String s = new String(\"]},\"2312\":{\"h\":\"1.3.1 集合-List\"},\"2313\":{\"h\":\"核心理论\"},\"2314\":{\"h\":\"1.1 List接口概述\",\"t\":[\"List是Java集合框架中最基础的有序集合接口，继承自Collection接口，具有以下核心特性：\",\"有序性：元素按插入顺序排列，支持通过索引访问\",\"可重复性：允许存储重复元素\",\"动态容量：相比数组，无需在创建时指定固定大小\",\"泛型支持：支持泛型编程，提供类型安全\",\"List接口的定义如下：\",\"public interface List<E> extends Collection<E> { // 基本操作 int size(); boolean isEmpty(); boolean contains(Object o); Iterator<E> iterator(); Object[] toArray(); <T> T[] toArray(T[] a); boolean add(E e); boolean remove(Object o); boolean containsAll(Collection<?> c); boolean addAll(Collection<? extends E> c); boolean addAll(int index, Collection<? extends E> c); boolean removeAll(Collection<?> c); boolean retainAll(Collection<?> c); void clear(); boolean equals(Object o); int hashCode(); // List特有操作 E get(int index); E set(int index, E element); void add(int index, E element); E remove(int index); int indexOf(Object o); int lastIndexOf(Object o); ListIterator<E> listIterator(); ListIterator<E> listIterator(int index); List<E> subList(int fromIndex, int toIndex); }\"]},\"2315\":{\"h\":\"1.2 List接口的继承体系\"},\"2316\":{\"h\":\"1.3 主要实现类对比\",\"t\":[\"实现类\",\"底层数据结构\",\"线程安全\",\"随机访问\",\"插入删除\",\"内存占用\",\"初始容量\",\"扩容机制\",\"ArrayList\",\"动态数组\",\"否\",\"快(O(1))\",\"慢(O(n))\",\"低\",\"10\",\"1.5倍扩容\",\"LinkedList\",\"双向链表\",\"否\",\"慢(O(n))\",\"快(O(1))\",\"高\",\"-\",\"无需扩容\",\"Vector\",\"动态数组\",\"是\",\"快(O(1))\",\"慢(O(n))\",\"中\",\"10\",\"2倍扩容\",\"Stack\",\"动态数组\",\"是\",\"快(O(1))\",\"慢(O(n))\",\"中\",\"10\",\"2倍扩容\"]},\"2317\":{\"h\":\"1.4 底层数据结构详解\"},\"2318\":{\"h\":\"1.4.1 ArrayList的动态数组\",\"t\":[\"ArrayList基于动态数组实现，其核心是维护一个Object类型的数组elementData：\",\"初始容量：默认10（JDK 7+）\",\"扩容阈值：当元素数量达到容量时触发扩容\",\"扩容机制：新容量 = 旧容量 + (旧容量 >> 1)，即1.5倍扩容\",\"空间浪费：可能存在未使用的数组空间\",\"JDK 8中ArrayList的关键源码：\",\"// 默认初始容量 private static final int DEFAULT_CAPACITY = 10; // 空数组实例 private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {}; // 存储元素的数组 transient Object[] elementData; // 元素数量 private int size; // 构造函数 public ArrayList() { this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA; } // 添加元素 public boolean add(E e) { ensureCapacityInternal(size + 1); // 确保容量 elementData[size++] = e; return true; } // 扩容核心方法 private void ensureCapacityInternal(int minCapacity) { if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) { minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity); } ensureExplicitCapacity(minCapacity); } private void ensureExplicitCapacity(int minCapacity) { modCount++; if (minCapacity - elementData.length > 0) grow(minCapacity); } // 实际扩容方法 private void grow(int minCapacity) { int oldCapacity = elementData.length; int newCapacity = oldCapacity + (oldCapacity >> 1); // 1.5倍扩容 if (newCapacity - minCapacity < 0) newCapacity = minCapacity; if (newCapacity - MAX_ARRAY_SIZE > 0) newCapacity = hugeCapacity(minCapacity); // 数组复制 elementData = Arrays.copyOf(elementData, newCapacity); }\"]},\"2319\":{\"h\":\"1.4.2 LinkedList的双向链表\",\"t\":[\"LinkedList基于双向链表实现，每个节点包含前驱节点、后继节点和数据：\",\"private static class Node<E> { E item; Node<E> next; Node<E> prev; Node(Node<E> prev, E element, Node<E> next) { this.item = element; this.next = next; this.prev = prev; } }\",\"LinkedList同时实现了Deque接口，因此可以作为双端队列使用，提供了高效的首尾操作：\",\"addFirst(E e)/offerFirst(E e)：在头部添加元素\",\"addLast(E e)/offerLast(E e)：在尾部添加元素\",\"getFirst()/peekFirst()：获取头部元素\",\"getLast()/peekLast()：获取尾部元素\",\"removeFirst()/pollFirst()：删除头部元素\",\"removeLast()/pollLast()：删除尾部元素\"]},\"2320\":{\"h\":\"1.5 List接口的JDK版本特性\",\"t\":[\"JDK版本\",\"新增特性\",\"JDK 1.2\",\"引入List接口及ArrayList、LinkedList、Vector\",\"JDK 1.4\",\"引入ListIterator，支持双向遍历\",\"JDK 5\",\"支持泛型、增强for循环\",\"JDK 8\",\"引入stream()、forEach()、removeIf()等函数式方法\",\"JDK 9\",\"引入of()方法创建不可变List\",\"JDK 10\",\"引入copyOf()方法创建不可变副本\",\"JDK 16\",\"引入toArray(IntFunction<T[]> generator)方法\",\"不可变List示例（JDK 9+）：\",\"// 创建不可变List List<String> immutableList = List.of(\\\"a\\\", \\\"b\\\", \\\"c\\\"); // 创建现有集合的不可变副本 List<String> copy = List.copyOf(immutableList);\"]},\"2321\":{\"h\":\"代码实践\"},\"2322\":{\"h\":\"2.1 List的初始化与基本操作\"},\"2323\":{\"h\":\"2.1.1 初始化方式对比\",\"t\":[\"import java.util.ArrayList; import java.util.Arrays; import java.util.LinkedList; import java.util.List; public class ListInitialization { public static void main(String[] args) { // 1. 无初始元素 List<String> arrayList1 = new ArrayList<>(); List<String> linkedList1 = new LinkedList<>(); // 2. 指定初始容量（仅ArrayList适用） List<String> arrayList2 = new ArrayList<>(20); // 3. 从现有集合初始化 List<String> arrayList3 = new ArrayList<>(Arrays.asList(\\\"a\\\", \\\"b\\\", \\\"c\\\")); List<String> linkedList2 = new LinkedList<>(Arrays.asList(\\\"x\\\", \\\"y\\\", \\\"z\\\")); // 4. JDK 9+ of()方法创建不可变List List<String> immutableList = List.of(\\\"1\\\", \\\"2\\\", \\\"3\\\"); // 5. 使用匿名内部类（不推荐） List<String> anonymousList = new ArrayList<String>() {{ add(\\\"one\\\"); add(\\\"two\\\"); add(\\\"three\\\"); }}; } }\"]},\"2324\":{\"h\":\"2.1.2 常用操作示例\",\"t\":[\"import java.util.ArrayList; import java.util.List; /** * List常用操作示例 */ public class ListCommonOperations { public static void main(String[] args) { List<String> fruits = new ArrayList<>(); // 添加元素 fruits.add(\\\"Apple\\\"); fruits.add(\\\"Banana\\\"); fruits.add(\\\"Cherry\\\"); System.out.println(\\\"添加元素后: \\\" + fruits); // [Apple, Banana, Cherry] // 在指定位置添加元素 fruits.add(1, \\\"Blueberry\\\"); System.out.println(\\\"指定位置添加后: \\\" + fruits); // [Apple, Blueberry, Banana, Cherry] // 获取元素 String firstFruit = fruits.get(0); System.out.println(\\\"第一个元素: \\\" + firstFruit); // Apple // 修改元素 fruits.set(2, \\\"Blackberry\\\"); System.out.println(\\\"修改元素后: \\\" + fruits); // [Apple, Blueberry, Blackberry, Cherry] // 查找元素索引 int index = fruits.indexOf(\\\"Cherry\\\"); System.out.println(\\\"Cherry的索引: \\\" + index); // 3 // 判断是否包含元素 boolean contains = fruits.contains(\\\"Apple\\\"); System.out.println(\\\"是否包含Apple: \\\" + contains); // true // 删除元素 fruits.remove(1); // 按索引删除 System.out.println(\\\"按索引删除后: \\\" + fruits); // [Apple, Blackberry, Cherry] fruits.remove(\\\"Cherry\\\"); // 按元素删除 System.out.println(\\\"按元素删除后: \\\" + fruits); // [Apple, Blackberry] // 获取子列表 List<String> subList = fruits.subList(0, 1); System.out.println(\\\"子列表: \\\" + subList); // [Apple] // 清空列表 fruits.clear(); System.out.println(\\\"清空后: \\\" + fruits); // [] System.out.println(\\\"是否为空: \\\" + fruits.isEmpty()); // true } }\"]},\"2325\":{\"h\":\"2.2 List的遍历方式\",\"t\":[\"import java.util.ArrayList; import java.util.Iterator; import java.util.List; import java.util.ListIterator; /** * List遍历方式对比 */ public class ListTraversal { public static void main(String[] args) { List<String> languages = new ArrayList<>(); languages.add(\\\"Java\\\"); languages.add(\\\"Python\\\"); languages.add(\\\"C++\\\"); languages.add(\\\"JavaScript\\\"); languages.add(\\\"Go\\\"); // 1. 普通for循环 System.out.println(\\\"普通for循环:\\\"); for (int i = 0; i < languages.size(); i++) { System.out.println(languages.get(i)); } // 2. 增强for循环 System.out.println(\\\"\\\\n增强for循环:\\\"); for (String lang : languages) { System.out.println(lang); } // 3. Iterator迭代器 System.out.println(\\\"\\\\nIterator迭代器:\\\"); Iterator<String> iterator = languages.iterator(); while (iterator.hasNext()) { System.out.println(iterator.next()); } // 4. ListIterator双向迭代器 System.out.println(\\\"\\\\nListIterator正向遍历:\\\"); ListIterator<String> listIterator = languages.listIterator(); while (listIterator.hasNext()) { System.out.println(listIterator.next()); } System.out.println(\\\"\\\\nListIterator反向遍历:\\\"); while (listIterator.hasPrevious()) { System.out.println(listIterator.previous()); } // 5. forEach()方法 (JDK 8+) System.out.println(\\\"\\\\nforEach()方法:\\\"); languages.forEach(System.out::println); // 6. stream流 (JDK 8+) System.out.println(\\\"\\\\nstream流:\\\"); languages.stream().forEach(System.out::println); } }\"]},\"2326\":{\"h\":\"2.3 List的排序与查找\",\"t\":[\"import java.util.ArrayList; import java.util.Collections; import java.util.Comparator; import java.util.List; /** * List排序与查找示例 */ public class ListSortAndSearch { public static void main(String[] args) { // 创建并初始化列表 List<Integer> numbers = new ArrayList<>(); numbers.add(3); numbers.add(1); numbers.add(4); numbers.add(1); numbers.add(5); numbers.add(9); numbers.add(2); numbers.add(6); System.out.println(\\\"原始列表: \\\" + numbers); // 1. 自然排序 (升序) Collections.sort(numbers); System.out.println(\\\"自然排序后: \\\" + numbers); // 2. 自定义排序 (降序) Collections.sort(numbers, Collections.reverseOrder()); System.out.println(\\\"降序排序后: \\\" + numbers); // 3. 使用Comparator排序 (JDK 8+ Lambda) numbers.sort((a, b) -> a.compareTo(b)); // 升序 System.out.println(\\\"Lambda升序排序: \\\" + numbers); // 4. 查找元素 (二分查找，必须先排序) int index = Collections.binarySearch(numbers, 5); System.out.println(\\\"元素5的索引: \\\" + index); // 5. 查找最大值和最小值 Integer max = Collections.max(numbers); Integer min = Collections.min(numbers); System.out.println(\\\"最大值: \\\" + max + \\\", 最小值: \\\" + min); // 6. 打乱列表顺序 Collections.shuffle(numbers); System.out.println(\\\"打乱后: \\\" + numbers); } }\"]},\"2327\":{\"h\":\"2.4 ArrayList与LinkedList性能对比\",\"t\":[\"import java.util.ArrayList; import java.util.LinkedList; import java.util.List; /** * ArrayList与LinkedList性能对比测试 */ public class ListPerformanceComparison { private static final int ELEMENT_COUNT = 100000; private static final int TEST_ROUNDS = 10; public static void main(String[] args) { // 测试添加性能 testAddPerformance(); // 测试访问性能 testAccessPerformance(); // 测试删除性能 testRemovePerformance(); } /** * 测试添加元素性能 */ private static void testAddPerformance() { System.out.println(\\\"=== 添加性能测试 ===\\\"); // 测试尾部添加 long arrayListAddLastTime = testAdd(new ArrayList<>(), true); long linkedListAddLastTime = testAdd(new LinkedList<>(), true); // 测试头部添加 long arrayListAddFirstTime = testAdd(new ArrayList<>(), false); long linkedListAddFirstTime = testAdd(new LinkedList<>(), false); System.out.println(\\\"尾部添加 - ArrayList: \\\" + arrayListAddLastTime + \\\"ms\\\"); System.out.println(\\\"尾部添加 - LinkedList: \\\" + linkedListAddLastTime + \\\"ms\\\"); System.out.println(\\\"头部添加 - ArrayList: \\\" + arrayListAddFirstTime + \\\"ms\\\"); System.out.println(\\\"头部添加 - LinkedList: \\\" + linkedListAddFirstTime + \\\"ms\\\"); } /** * 测试访问元素性能 */ private static void testAccessPerformance() { System.out.println(\\\"\\\\n=== 访问性能测试 ===\\\"); List<Integer> arrayList = new ArrayList<>(); List<Integer> linkedList = new LinkedList<>(); // 初始化数据 for (int i = 0; i < ELEMENT_COUNT; i++) { arrayList.add(i); linkedList.add(i); } // 测试随机访问 long arrayListAccessTime = 0; long linkedListAccessTime = 0; for (int r = 0; r < TEST_ROUNDS; r++) { long startTime = System.currentTimeMillis(); for (int i = 0; i < ELEMENT_COUNT; i++) { arrayList.get(i); } arrayListAccessTime += System.currentTimeMillis() - startTime; startTime = System.currentTimeMillis(); for (int i = 0; i < ELEMENT_COUNT; i++) { linkedList.get(i); } linkedListAccessTime += System.currentTimeMillis() - startTime; } System.out.println(\\\"随机访问 - ArrayList: \\\" + (arrayListAccessTime / TEST_ROUNDS) + \\\"ms\\\"); System.out.println(\\\"随机访问 - LinkedList: \\\" + (linkedListAccessTime / TEST_ROUNDS) + \\\"ms\\\"); } /** * 测试删除元素性能 */ private static void testRemovePerformance() { System.out.println(\\\"\\\\n=== 删除性能测试 ===\\\"); // 测试尾部删除 long arrayListRemoveLastTime = testRemove(new ArrayList<>(), true); long linkedListRemoveLastTime = testRemove(new LinkedList<>(), true); // 测试头部删除 long arrayListRemoveFirstTime = testRemove(new ArrayList<>(), false); long linkedListRemoveFirstTime = testRemove(new LinkedList<>(), false); System.out.println(\\\"尾部删除 - ArrayList: \\\" + arrayListRemoveLastTime + \\\"ms\\\"); System.out.println(\\\"尾部删除 - LinkedList: \\\" + linkedListRemoveLastTime + \\\"ms\\\"); System.out.println(\\\"头部删除 - ArrayList: \\\" + arrayListRemoveFirstTime + \\\"ms\\\"); System.out.println(\\\"头部删除 - LinkedList: \\\" + linkedListRemoveFirstTime + \\\"ms\\\"); } /** * 测试添加元素 * @param list 要测试的列表 * @param addLast 是否添加到尾部 * @return 耗时(毫秒) */ private static long testAdd(List<Integer> list, boolean addLast) { long totalTime = 0; for (int r = 0; r < TEST_ROUNDS; r++) { list.clear(); long startTime = System.currentTimeMillis(); for (int i = 0; i < ELEMENT_COUNT; i++) { if (addLast) { list.add(i); // 尾部添加 } else { list.add(0, i); // 头部添加 } } totalTime += System.currentTimeMillis() - startTime; } return totalTime / TEST_ROUNDS; } /** * 测试删除元素 * @param list 要测试的列表 * @param removeLast 是否从尾部删除 * @return 耗时(毫秒) */ private static long testRemove(List<Integer> list, boolean removeLast) { long totalTime = 0; for (int r = 0; r < TEST_ROUNDS; r++) { // 初始化数据 list.clear(); for (int i = 0; i < ELEMENT_COUNT; i++) { list.add(i); } long startTime = System.currentTimeMillis(); while (!list.isEmpty()) { if (removeLast) { list.remove(list.size() - 1); // 尾部删除 } else { list.remove(0); // 头部删除 } } totalTime += System.currentTimeMillis() - startTime; } return totalTime / TEST_ROUNDS; } }\"]},\"2328\":{\"h\":\"2.5 线程安全的List实现\",\"t\":[\"import java.util.ArrayList; import java.util.Collections; import java.util.List; import java.util.Vector; import java.util.concurrent.CopyOnWriteArrayList; /** * 线程安全的List实现对比 */ public class ThreadSafeListExamples { public static void main(String[] args) { // 1. Vector (古老的线程安全实现) List<String> vector = new Vector<>(); // 2. 使用Collections.synchronizedList()包装 List<String> synchronizedList = Collections.synchronizedList(new ArrayList<>()); // 3. CopyOnWriteArrayList (JDK 5+ 并发容器) List<String> cowList = new CopyOnWriteArrayList<>(); // 使用示例 threadSafeListDemo(cowList); } /** * 演示线程安全List的使用 */ private static void threadSafeListDemo(List<String> list) { // 创建多个线程同时操作列表 Runnable task = () -> { for (int i = 0; i < 1000; i++) { list.add(Thread.currentThread().getName() + \\\": \\\" + i); } }; // 启动10个线程 Thread[] threads = new Thread[10]; for (int i = 0; i < threads.length; i++) { threads[i] = new Thread(task, \\\"Thread-\\\" + i); threads[i].start(); } // 等待所有线程完成 try { for (Thread thread : threads) { thread.join(); } } catch (InterruptedException e) { Thread.currentThread().interrupt(); return; } System.out.println(\\\"列表大小: \\\" + list.size()); System.out.println(\\\"预期大小: 10000\\\"); } }\"]},\"2329\":{\"h\":\"2.6 List的高级操作（JDK 8+）\",\"t\":[\"import java.util.ArrayList; import java.util.List; import java.util.stream.Collectors; /** * List的高级操作示例 (JDK 8+) */ public class ListAdvancedOperations { public static void main(String[] args) { List<Person> people = new ArrayList<>(); people.add(new Person(\\\"张三\\\", 25, \\\"男\\\", \\\"北京\\\")); people.add(new Person(\\\"李四\\\", 30, \\\"男\\\", \\\"上海\\\")); people.add(new Person(\\\"王五\\\", 28, \\\"女\\\", \\\"广州\\\")); people.add(new Person(\\\"赵六\\\", 35, \\\"男\\\", \\\"北京\\\")); people.add(new Person(\\\"钱七\\\", 22, \\\"女\\\", \\\"深圳\\\")); // 1. 过滤 (年龄大于等于28岁) List<Person> adults = people.stream() .filter(person -> person.getAge() >= 28) .collect(Collectors.toList()); System.out.println(\\\"年龄大于等于28岁的人: \\\" + adults); // 2. 映射 (提取所有人名) List<String> names = people.stream() .map(Person::getName) .collect(Collectors.toList()); System.out.println(\\\"所有人名: \\\" + names); // 3. 排序 (按年龄升序) List<Person> sortedByAge = people.stream() .sorted((p1, p2) -> p1.getAge() - p2.getAge()) .collect(Collectors.toList()); System.out.println(\\\"按年龄排序: \\\" + sortedByAge); // 4. 分组 (按城市分组) java.util.Map<String, List<Person>> groupedByCity = people.stream() .collect(Collectors.groupingBy(Person::getCity)); System.out.println(\\\"按城市分组: \\\" + groupedByCity); // 5. 聚合 (计算平均年龄) double averageAge = people.stream() .mapToInt(Person::getAge) .average() .orElse(0); System.out.println(\\\"平均年龄: \\\" + averageAge); // 6. 批量删除 (删除年龄小于25岁的人) people.removeIf(person -> person.getAge() < 25); System.out.println(\\\"删除年龄小于25岁后: \\\" + people); } /** * 人员实体类 */ static class Person { private String name; private int age; private String gender; private String city; public Person(String name, int age, String gender, String city) { this.name = name; this.age = age; this.gender = gender; this.city = city; } // Getters and toString public String getName() { return name; } public int getAge() { return age; } public String getGender() { return gender; } public String getCity() { return city; } @Override public String toString() { return name + \\\"(\\\" + age + \\\")\\\"; } } }\"]},\"2330\":{\"h\":\"设计思想\"},\"2331\":{\"h\":\"3.1 接口与实现分离原则\",\"t\":[\"List接口体现了Java集合框架的核心设计思想——接口与实现分离：\",\"接口层：定义了List的行为规范（如add、remove、get等方法）\",\"实现层：提供不同的数据结构实现（动态数组、链表等）\",\"这种设计带来的好处：\",\"灵活性：同一接口可有多种实现，适应不同场景\",\"可替换性：更换实现类无需修改使用接口的代码\",\"扩展性：可以轻松添加新的实现类\"]},\"2332\":{\"h\":\"3.2 迭代器模式\",\"t\":[\"List接口继承了Iterable接口，支持迭代器模式，提供了统一的遍历方式：\",\"Iterator：支持单向遍历和删除操作\",\"ListIterator：支持双向遍历、添加、修改操作\",\"迭代器模式的优势：\",\"简化遍历：统一的遍历接口，无需关注底层数据结构\",\"解耦：遍历逻辑与集合实现分离\",\"支持并发修改检测：通过modCount机制检测并发修改\"]},\"2333\":{\"h\":\"3.3 动态数组与链表的设计权衡\",\"t\":[\"ArrayList和LinkedList代表了两种经典的数据结构设计，体现了时间与空间的权衡：\"]},\"2334\":{\"h\":\"ArrayList的设计思想\",\"t\":[\"空间局部性：数组元素连续存储，充分利用CPU缓存\",\"预分配与扩容：通过预分配空间减少频繁扩容开销\",\"随机访问优化：通过索引直接访问，时间复杂度O(1)\"]},\"2335\":{\"h\":\"LinkedList的设计思想\",\"t\":[\"非连续存储：元素分散存储，无需连续内存空间\",\"节点复用：通过节点引用连接，插入删除无需移动大量元素\",\"双端队列支持：可高效实现栈、队列等数据结构\"]},\"2336\":{\"h\":\"3.4 不可变集合设计\",\"t\":[\"JDK 9引入的不可变List设计体现了不可变对象模式：\",\"安全性：不可变对象天然线程安全\",\"简洁性：API简洁，无需考虑并发修改\",\"性能优化：可共享内部数据结构，节省内存\",\"不可变List的实现原理：\",\"没有提供修改方法（add、remove等）\",\"内部数组使用final修饰\",\"对修改操作抛出UnsupportedOperationException\"]},\"2337\":{\"h\":\"3.5 装饰器模式\",\"t\":[\"Collections.synchronizedList()使用了装饰器模式：\",\"透明增强：不改变原有类，动态添加功能（线程安全）\",\"职责单一：原有类专注于数据存储，装饰器专注于同步控制\",\"灵活组合：可叠加多个装饰器，实现多种功能组合\"]},\"2338\":{\"h\":\"避坑指南\"},\"2339\":{\"h\":\"4.1 常见异常及解决方案\"},\"2340\":{\"h\":\"4.1.1 ConcurrentModificationException（并发修改异常）\",\"t\":[\"产生原因：在迭代过程中修改了集合结构（添加/删除元素）\",\"// 错误示例 List<String> list = new ArrayList<>(Arrays.asList(\\\"a\\\", \\\"b\\\", \\\"c\\\")); for (String s : list) { if (s.equals(\\\"b\\\")) { list.remove(s); // 会抛出ConcurrentModificationException } }\",\"解决方案：\",\"使用迭代器的remove()方法\",\"Iterator<String> iterator = list.iterator(); while (iterator.hasNext()) { String s = iterator.next(); if (s.equals(\\\"b\\\")) { iterator.remove(); // 正确方式 } }\",\"使用Stream API的filter()方法\",\"list = list.stream().filter(s -> !s.equals(\\\"b\\\")).collect(Collectors.toList());\",\"使用CopyOnWriteArrayList（适用于读多写少场景）\",\"List<String> list = new CopyOnWriteArrayList<>(Arrays.asList(\\\"a\\\", \\\"b\\\", \\\"c\\\")); for (String s : list) { if (s.equals(\\\"b\\\")) { list.remove(s); // 不会抛出异常 } }\"]},\"2341\":{\"h\":\"4.1.2 IndexOutOfBoundsException（索引越界异常）\",\"t\":[\"产生原因：访问了不存在的索引位置\",\"List<String> list = new ArrayList<>(); list.add(\\\"a\\\"); String element = list.get(1); // 索引1不存在，抛出异常\",\"解决方案：\",\"访问前检查索引范围\",\"if (index >= 0 && index < list.size()) { String element = list.get(index); }\",\"使用增强for循环遍历，避免手动索引\"]},\"2342\":{\"h\":\"4.1.3 UnsupportedOperationException（不支持操作异常）\",\"t\":[\"产生原因：对不可变集合执行修改操作\",\"List<String> list = List.of(\\\"a\\\", \\\"b\\\", \\\"c\\\"); list.add(\\\"d\\\"); // 抛出UnsupportedOperationException\",\"解决方案：\",\"创建可变副本\",\"List<String> mutableList = new ArrayList<>(List.of(\\\"a\\\", \\\"b\\\", \\\"c\\\")); mutableList.add(\\\"d\\\"); // 正常执行\"]},\"2343\":{\"h\":\"4.2 ArrayList的性能陷阱\"},\"2344\":{\"h\":\"4.2.1 频繁扩容问题\",\"t\":[\"问题：当ArrayList元素数量接近容量时，会触发扩容，导致数组复制开销\",\"解决方案：\",\"预估容量，初始化时指定合适大小\",\"List<String> list = new ArrayList<>(1000); // 已知需要存储约1000个元素\",\"使用ensureCapacity()提前扩容\",\"list.ensureCapacity(1000); // 提前扩容到至少1000容量\"]},\"2345\":{\"h\":\"4.2.2 数组复制开销\",\"t\":[\"问题：add(int index, E element)和remove(int index)操作会导致大量元素移动\",\"解决方案：\",\"频繁插入删除操作使用LinkedList\",\"批量添加使用addAll()方法\",\"考虑使用CopyOnWriteArrayList（读多写少场景）\"]},\"2346\":{\"h\":\"4.2.3 subList()方法的陷阱\",\"t\":[\"问题：subList()返回的是原列表的视图，不是独立副本\",\"List<Integer> list = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5)); List<Integer> subList = list.subList(1, 4); // [2, 3, 4] subList.clear(); // 会影响原列表 System.out.println(list); // [1, 5]\",\"解决方案：创建独立副本\",\"List<Integer> subList = new ArrayList<>(list.subList(1, 4));\"]},\"2347\":{\"h\":\"4.3 LinkedList的使用误区\"},\"2348\":{\"h\":\"4.3.1 随机访问性能问题\",\"t\":[\"问题：LinkedList的get(int index)方法时间复杂度为O(n)\",\"List<String> linkedList = new LinkedList<>(); // 添加10000个元素... for (int i = 0; i < linkedList.size(); i++) { String element = linkedList.get(i); // 性能极差，O(n²)时间复杂度 }\",\"解决方案：\",\"需要随机访问时使用ArrayList\",\"遍历LinkedList使用迭代器或增强for循环\"]},\"2349\":{\"h\":\"4.3.2 作为队列使用的最佳实践\",\"t\":[\"LinkedList实现了Queue接口，作为队列使用时应优先使用Queue接口方法：\",\"操作\",\"失败时抛出异常\",\"失败时返回特殊值\",\"添加\",\"add(e)\",\"offer(e)\",\"移除\",\"remove()\",\"poll()\",\"查看\",\"element()\",\"peek()\",\"推荐使用offer/poll/peek方法，避免抛出异常，代码更健壮。\"]},\"2350\":{\"h\":\"4.4 线程安全问题\"},\"2351\":{\"h\":\"4.4.1 ArrayList的线程不安全\",\"t\":[\"问题：ArrayList在多线程环境下可能导致数据不一致、数组越界等问题\",\"解决方案：\",\"使用Vector（不推荐，性能差）\",\"使用Collections.synchronizedList()\",\"使用CopyOnWriteArrayList（JDK 5+，推荐）\",\"使用ConcurrentLinkedQueue（如果用作队列）\"]},\"2352\":{\"h\":\"4.4.2 迭代器的弱一致性\",\"t\":[\"问题：CopyOnWriteArrayList的迭代器是弱一致性的，不反映迭代过程中的修改\",\"CopyOnWriteArrayList<String> list = new CopyOnWriteArrayList<>(Arrays.asList(\\\"a\\\", \\\"b\\\", \\\"c\\\")); Iterator<String> iterator = list.iterator(); list.add(\\\"d\\\"); while (iterator.hasNext()) { System.out.println(iterator.next()); // 不会输出\\\"d\\\" }\",\"解决方案：了解并接受这种特性，或在需要强一致性时使用其他同步机制。\"]},\"2353\":{\"h\":\"深度思考题\"},\"2354\":{\"h\":\"思考题1：ArrayList和LinkedList的性能对比及适用场景\",\"t\":[\"问题：详细对比ArrayList和LinkedList在不同操作（添加、删除、访问）上的性能差异，并分析各自的适用场景。\",\"思考题回答：\",\"ArrayList和LinkedList的性能差异主要源于其底层数据结构：\",\"添加操作：\",\"ArrayList尾部添加：O(1)（无扩容时），O(n)（需要扩容时）\",\"ArrayList中间/头部添加：O(n)（需要移动元素）\",\"LinkedList尾部/头部添加：O(1)\",\"LinkedList中间添加：O(n)（需要遍历找到位置）\",\"删除操作：\",\"ArrayList尾部删除：O(1)\",\"ArrayList中间/头部删除：O(n)（需要移动元素）\",\"LinkedList尾部/头部删除：O(1)\",\"LinkedList中间删除：O(n)（需要遍历找到位置）\",\"访问操作：\",\"ArrayList：O(1)（随机访问）\",\"LinkedList：O(n)（顺序访问）\",\"适用场景：\",\"ArrayList：适合频繁访问、较少插入删除的场景，如数据存储、查找为主的场景\",\"LinkedList：适合频繁在首尾插入删除、较少随机访问的场景，如实现队列、栈等数据结构\",\"在大多数业务场景中，ArrayList的综合性能优于LinkedList，除非有大量的首尾操作。\"]},\"2355\":{\"h\":\"思考题2：ArrayList的扩容机制及优化\",\"t\":[\"问题：详细描述ArrayList的扩容机制，并探讨如何优化ArrayList在频繁添加大量元素时的性能。\",\"思考题回答：\",\"ArrayList扩容机制：\",\"初始容量：JDK 7+中，ArrayList默认初始容量为10，但在首次添加元素时才会初始化数组\",\"扩容阈值：当元素数量(size)达到当前容量时触发扩容\",\"扩容公式：新容量 = 旧容量 + (旧容量 >> 1)，即1.5倍扩容\",\"数组复制：使用Arrays.copyOf()方法将旧数组元素复制到新数组\",\"最大容量：Integer.MAX_VALUE - 8（避免内存溢出）\",\"性能优化策略：\",\"预指定容量：在已知元素数量时，创建ArrayList时指定初始容量\",\"List<String> list = new ArrayList<>(1000); // 已知需要存储1000个元素\",\"批量添加：使用addAll()方法代替多次add()，减少扩容次数\",\"List<String> elements = ...; // 包含大量元素 list.addAll(elements); // 一次添加\",\"提前扩容：使用ensureCapacity(int minCapacity)方法提前扩容\",\"list.ensureCapacity(1000); // 确保容量至少为1000\",\"使用合适的数据结构：如果需要频繁添加大量元素，考虑使用LinkedList或ArrayDeque\",\"JDK版本选择：JDK 8及以上版本对ArrayList的实现进行了优化，包括延迟初始化等\"]},\"2356\":{\"h\":\"思考题3：如何实现一个线程安全的List\",\"t\":[\"问题：除了使用Java提供的线程安全List实现，如何自己实现一个线程安全的List？比较不同实现方式的优缺点。\",\"思考题回答：\",\"实现线程安全的List主要有以下几种方式：\",\"同步方法：对所有public方法添加synchronized修饰符\",\"public class SynchronizedList<E> implements List<E> { private final List<E> list = new ArrayList<>(); @Override public synchronized int size() { return list.size(); } @Override public synchronized boolean add(E e) { return list.add(e); } // 其他方法... }\",\"优点：实现简单，安全性高 缺点：并发性差，同一时间只能有一个线程访问\",\"同步代码块：使用细粒度的同步代码块，减少锁竞争\",\"public class FineGrainedSyncList<E> implements List<E> { private final List<E> list = new ArrayList<>(); private final Object lock = new Object(); @Override public int size() { synchronized (lock) { return list.size(); } } @Override public boolean add(E e) { synchronized (lock) { return list.add(e); } } // 其他方法... }\",\"优点：可自定义锁对象，灵活性高 缺点：并发性仍然受限\",\"读写锁：使用ReentrantReadWriteLock分离读写操作，提高并发性\",\"public class ReadWriteList<E> implements List<E> { private final List<E> list = new ArrayList<>(); private final ReentrantReadWriteLock rwLock = new ReentrantReadWriteLock(); private final Lock readLock = rwLock.readLock(); private final Lock writeLock = rwLock.writeLock(); @Override public int size() { readLock.lock(); try { return list.size(); } finally { readLock.unlock(); } } @Override public boolean add(E e) { writeLock.lock(); try { return list.add(e); } finally { writeLock.unlock(); } } // 其他方法... }\",\"优点：读操作可并发执行，适合读多写少场景 缺点：实现复杂，写操作仍需互斥\",\"Copy-On-Write：写时复制，读操作无锁，写操作复制整个数组\",\"public class CopyOnWriteList<E> implements List<E> { private volatile Object[] array; public CopyOnWriteList() { array = new Object[0]; } @Override public boolean add(E e) { synchronized (this) { Object[] oldArray = array; int newLen = oldArray.length + 1; Object[] newArray = Arrays.copyOf(oldArray, newLen); newArray[newLen - 1] = e; array = newArray; return true; } } @Override public E get(int index) { return (E) array[index]; // 无锁读取 } // 其他方法... }\",\"优点：读操作性能优异，无锁竞争 缺点：写操作成本高，内存占用大，不保证实时一致性\",\"对比总结：\",\"同步方法/代码块：实现简单，适合并发量小的场景\",\"读写锁：适合读多写少场景，平衡了性能和一致性\",\"Copy-On-Write：适合读操作远多于写操作的场景，如缓存\",\"在实际开发中，推荐使用Java并发包提供的线程安全集合，如CopyOnWriteArrayList、ConcurrentLinkedQueue等，而非自己实现。\"]},\"2357\":{\"h\":\"思考题4：List的排序算法实现\",\"t\":[\"问题：Java中的Collections.sort()使用什么排序算法？分析其时间复杂度和空间复杂度，并探讨为什么选择这种算法。\",\"思考题回答：\",\"Java中的Collections.sort()方法在不同版本使用了不同的排序算法：\",\"JDK 6及之前：使用归并排序（Merge Sort）\",\"时间复杂度：O(n log n)\",\"空间复杂度：O(n)\",\"特点：稳定排序，但需要额外空间\",\"JDK 7及之后：使用TimSort算法\",\"时间复杂度：平均O(n log n)，最坏O(n log n)\",\"空间复杂度：O(n)\",\"特点：稳定排序，是归并排序和插入排序的混合体\",\"TimSort算法原理： TimSort是一种自适应的排序算法，它利用了数据可能已部分排序的特点：\",\"将数组分成多个\\\"run\\\"（连续的升序或降序序列）\",\"对每个run使用插入排序进行排序\",\"使用归并排序将多个run合并成最终有序数组\",\"优化合并过程，减少比较次数\",\"选择TimSort的原因：\",\"实际性能优异：在真实世界的数据中，很多数据都有部分有序的特性，TimSort能很好地利用这一点\",\"稳定性：保持相等元素的相对顺序，这对对象排序很重要\",\"最坏情况保证：虽然快速排序平均性能好，但最坏情况是O(n²)，而TimSort最坏情况仍是O(n log n)\",\"适应性：对不同类型的数据有良好的适应性\",\"工业验证：TimSort最初由Python引入，表现优异后被Java、Android等采用\",\"注意：对于基本类型数组，Java使用双轴快速排序（Dual-Pivot Quicksort），因为基本类型排序不需要稳定性，而快速排序的空间效率更高。\"]},\"2358\":{\"h\":\"思考题5：JDK 9+中不可变集合的实现原理\",\"t\":[\"问题：JDK 9引入了List.of()等方法创建不可变集合，分析其实现原理、与Collections.unmodifiableList()的区别，以及使用场景。\",\"思考题回答：\",\"JDK 9+不可变集合实现原理： JDK 9引入的不可变集合（List.of()、Set.of()、Map.of()等）是通过专门的不可变实现类实现的，如：\",\"List.of() -> ImmutableCollections.ListN\",\"Set.of() -> ImmutableCollections.SetN\",\"Map.of() -> ImmutableCollections.MapN\",\"这些实现类的特点：\",\"无修改方法：没有实现add、remove、set等修改方法\",\"final字段：内部存储结构使用final修饰，确保引用不可变\",\"紧凑存储：根据元素数量使用不同的存储方式，减少内存占用\",\"快速失败：对修改操作抛出UnsupportedOperationException\",\"null拒绝：不允许存储null元素（Map的key和value都不允许）\",\"与Collections.unmodifiableList()的区别：\",\"特性\",\"Collections.unmodifiableList()\",\"List.of()\",\"实现方式\",\"装饰器模式，包装可变集合\",\"专门的不可变实现类\",\"原始集合修改\",\"会影响视图\",\"不可能，本身就是源集合\",\"修改操作\",\"抛出异常，但集合本身可变\",\"抛出异常，集合本身不可变\",\"null元素\",\"允许（取决于原始集合）\",\"不允许\",\"性能\",\"有包装开销，间接访问\",\"直接访问，性能更好\",\"内存占用\",\"额外的包装对象\",\"更紧凑，无额外开销\",\"使用场景：\",\"常量集合：存储固定不变的数据，如配置项、枚举值等\",\"线程安全：多线程环境下共享数据，无需同步\",\"防御性编程：返回不可变视图，防止外部修改内部集合\",\"API设计：作为方法参数或返回值，明确表示不希望被修改\",\"流处理：作为流操作的结果收集容器\",\"注意事项：\",\"不可变集合不允许null元素，尝试添加null会抛出NullPointerException\",\"不可变集合的equals()方法是基于内容的比较\",\"对于包含可变对象的不可变集合，集合本身不可变，但元素对象仍可变\",\"示例：\",\"// 创建不可变List List<String> immutableList = List.of(\\\"a\\\", \\\"b\\\", \\\"c\\\"); // 尝试修改会抛出异常 immutableList.add(\\\"d\\\"); // UnsupportedOperationException // 与unmodifiableList对比 List<String> mutableList = new ArrayList<>(); List<String> unmodifiable = Collections.unmodifiableList(mutableList); mutableList.add(\\\"x\\\"); // 可以通过原始集合修改 System.out.println(unmodifiable); // [x]，反映了原始集合的变化\",\"综上所述，JDK 9+的不可变集合提供了更安全、更高效的不可变集合实现，推荐优先使用。\"]},\"2359\":{\"h\":\"1.3.2 集合-Set\"},\"2360\":{\"h\":\"一、核心理论\"},\"2361\":{\"h\":\"1.1 Set接口概述\",\"t\":[\"Set接口继承自Collection接口，是一种不允许包含重复元素的集合。它维持元素的无序性（除特定实现类外），并且最多只能包含一个null元素。Set接口常用于需要保证元素唯一性的场景，如数据去重、关键字存储等。\"]},\"2362\":{\"h\":\"1.2 继承体系\"},\"2363\":{\"h\":\"1.3 主要实现类对比\",\"t\":[\"实现类\",\"底层数据结构\",\"有序性\",\"线程安全\",\"允许null\",\"插入性能\",\"查找性能\",\"HashSet\",\"哈希表\",\"无序\",\"否\",\"是\",\"O(1)\",\"O(1)\",\"LinkedHashSet\",\"哈希表+双向链表\",\"插入顺序\",\"否\",\"是\",\"O(1)\",\"O(1)\",\"TreeSet\",\"红黑树\",\"自然排序/定制排序\",\"否\",\"否\",\"O(log n)\",\"O(log n)\",\"EnumSet\",\"位向量\",\"枚举顺序\",\"否\",\"否\",\"O(1)\",\"O(1)\",\"CopyOnWriteArraySet\",\"数组\",\"插入顺序\",\"是\",\"是\",\"O(n)\",\"O(n)\",\"ConcurrentSkipListSet\",\"跳表\",\"自然排序\",\"是\",\"否\",\"O(log n)\",\"O(log n)\"]},\"2364\":{\"h\":\"1.4 底层数据结构详解\"},\"2365\":{\"h\":\"1.4.1 HashSet\",\"t\":[\"HashSet基于哈希表（HashMap）实现，通过计算元素的hashCode值来确定存储位置。当两个元素的hashCode相同且equals方法返回true时，视为重复元素，后添加的元素会覆盖前一个元素。\"]},\"2366\":{\"h\":\"1.4.2 TreeSet\",\"t\":[\"TreeSet基于红黑树（NavigableMap）实现，能够保证元素按照自然顺序或定制顺序进行排序。它不允许插入null元素，因为null无法参与比较。\"]},\"2367\":{\"h\":\"1.5 JDK版本特性\",\"t\":[\"JDK 8：HashSet的底层HashMap实现引入红黑树优化，当链表长度超过8时转为红黑树\",\"JDK 9：引入of()方法创建不可变Set集合\",\"JDK 16：增加toUnmodifiableSet()方法，将集合转换为不可变Set\",\"JDK 21：增强了Set集合的stream操作，支持更多并行处理功能\"]},\"2368\":{\"h\":\"二、代码实践\"},\"2369\":{\"h\":\"2.1 初始化与基本操作\",\"t\":[\"import java.util.*; import java.util.stream.Collectors; public class SetDemo { public static void main(String[] args) { // 1. 初始化方式 Set<String> hashSet = new HashSet<>(); Set<String> linkedHashSet = new LinkedHashSet<>(); Set<String> treeSet = new TreeSet<>(); Set<String> enumSet = EnumSet.noneOf(Season.class); Set<String> copyOnWriteSet = new CopyOnWriteArraySet<>(); Set<String> concurrentSkipListSet = new ConcurrentSkipListSet<>(); // JDK 9+ 不可变集合 Set<String> immutableSet = Set.of(\\\"a\\\", \\\"b\\\", \\\"c\\\"); // 2. 添加元素 hashSet.add(\\\"apple\\\"); hashSet.add(\\\"banana\\\"); hashSet.add(\\\"cherry\\\"); hashSet.add(\\\"apple\\\"); // 重复元素，添加失败 // 3. 删除元素 hashSet.remove(\\\"banana\\\"); // 4. 判断元素是否存在 boolean contains = hashSet.contains(\\\"apple\\\"); // 5. 集合大小 int size = hashSet.size(); // 6. 清空集合 hashSet.clear(); // 7. 集合转换 List<String> list = Arrays.asList(\\\"a\\\", \\\"b\\\", \\\"c\\\", \\\"a\\\"); Set<String> distinctSet = new HashSet<>(list); // 去重 } } enum Season { SPRING, SUMMER, AUTUMN, WINTER }\"]},\"2370\":{\"h\":\"2.2 遍历方式\",\"t\":[\"public class SetTraversalDemo { public static void main(String[] args) { Set<String> fruits = new HashSet<>(Arrays.asList(\\\"apple\\\", \\\"banana\\\", \\\"cherry\\\")); // 1. 增强for循环 for (String fruit : fruits) { System.out.println(fruit); } // 2. 迭代器 Iterator<String> iterator = fruits.iterator(); while (iterator.hasNext()) { String fruit = iterator.next(); if (fruit.startsWith(\\\"a\\\")) { iterator.remove(); // 安全删除 } } // 3. forEach + Lambda fruits.forEach(fruit -> System.out.println(fruit)); // 4. 流操作 fruits.stream() .filter(fruit -> fruit.length() > 5) .forEach(System.out::println); } }\"]},\"2371\":{\"h\":\"2.3 排序与查找\",\"t\":[\"public class SetSortDemo { public static void main(String[] args) { // 1. TreeSet自然排序 Set<Integer> numbers = new TreeSet<>(Arrays.asList(3, 1, 2, 5, 4)); System.out.println(numbers); // [1, 2, 3, 4, 5] // 2. 定制排序 Set<String> words = new TreeSet<>((s1, s2) -> s2.compareTo(s1)); // 降序 words.addAll(Arrays.asList(\\\"apple\\\", \\\"banana\\\", \\\"cherry\\\")); System.out.println(words); // [cherry, banana, apple] // 3. 查找操作 TreeSet<Integer> sortedNumbers = new TreeSet<>(Arrays.asList(1, 2, 3, 4, 5)); Integer lower = sortedNumbers.lower(3); // 小于3的最大元素: 2 Integer higher = sortedNumbers.higher(3); // 大于3的最小元素: 4 Integer floor = sortedNumbers.floor(3); // 小于等于3的最大元素: 3 Integer ceiling = sortedNumbers.ceiling(3); // 大于等于3的最小元素: 3 Integer first = sortedNumbers.first(); // 第一个元素: 1 Integer last = sortedNumbers.last(); // 最后一个元素: 5 } }\"]},\"2372\":{\"h\":\"2.4 集合运算\",\"t\":[\"public class SetOperationDemo { public static void main(String[] args) { Set<String> setA = new HashSet<>(Arrays.asList(\\\"a\\\", \\\"b\\\", \\\"c\\\")); Set<String> setB = new HashSet<>(Arrays.asList(\\\"b\\\", \\\"c\\\", \\\"d\\\")); // 1. 并集 Set<String> union = new HashSet<>(setA); union.addAll(setB); // [a, b, c, d] // 2. 交集 Set<String> intersection = new HashSet<>(setA); intersection.retainAll(setB); // [b, c] // 3. 差集 Set<String> difference = new HashSet<>(setA); difference.removeAll(setB); // [a] // 4. 对称差集 Set<String> symmetricDifference = new HashSet<>(setA); symmetricDifference.addAll(setB); Set<String> temp = new HashSet<>(setA); temp.retainAll(setB); symmetricDifference.removeAll(temp); // [a, d] // 5. 包含关系 boolean isSubset = setA.containsAll(setB); // false } }\"]},\"2373\":{\"h\":\"2.5 线程安全的Set实现\",\"t\":[\"import java.util.Collections; import java.util.HashSet; import java.util.Set; import java.util.concurrent.CopyOnWriteArraySet; import java.util.concurrent.ConcurrentSkipListSet; public class ThreadSafeSetDemo { public static void main(String[] args) { // 1. 使用Collections.synchronizedSet Set<String> syncSet = Collections.synchronizedSet(new HashSet<>()); // 2. CopyOnWriteArraySet (读多写少场景) Set<String> cowSet = new CopyOnWriteArraySet<>(); // 3. ConcurrentSkipListSet (有序且线程安全) Set<String> skipListSet = new ConcurrentSkipListSet<>(); } }\"]},\"2374\":{\"h\":\"三、设计思想\"},\"2375\":{\"h\":\"3.1 接口与实现分离\",\"t\":[\"Set接口定义了集合的行为规范，而具体实现类则提供了不同的数据结构和性能特性。这种设计使得用户可以根据具体需求选择合适的实现，而无需修改使用集合的代码。\"]},\"2376\":{\"h\":\"3.2 哈希表设计\",\"t\":[\"HashSet的哈希表设计采用了数组+链表/红黑树的结构，通过哈希函数将元素映射到数组索引。当发生哈希冲突时，使用链表存储相同哈希值的元素，当链表长度超过阈值时转为红黑树，以提高查找性能。\"]},\"2377\":{\"h\":\"3.3 红黑树应用\",\"t\":[\"TreeSet使用红黑树作为底层数据结构，它是一种自平衡的二叉查找树，能够保证插入、删除和查找操作的时间复杂度为O(log n)。红黑树通过一系列的旋转和变色操作来维持树的平衡，确保性能稳定。\"]},\"2378\":{\"h\":\"3.4 不可变集合设计\",\"t\":[\"JDK 9引入的不可变Set集合（通过Set.of()方法创建）采用了不可变设计模式，一旦创建就无法修改。这种设计具有线程安全、内存高效等优点，适用于存储常量数据或作为方法返回值防止外部修改。\"]},\"2379\":{\"h\":\"3.5 装饰器模式\",\"t\":[\"Collections.synchronizedSet()方法使用装饰器模式，为普通Set集合添加线程同步功能。这种设计避免了为每个Set实现类单独编写线程安全版本，提高了代码复用性。\"]},\"2380\":{\"h\":\"四、避坑指南\"},\"2381\":{\"h\":\"4.1 常见异常及解决方案\"},\"2382\":{\"h\":\"4.1.1 ConcurrentModificationException\",\"t\":[\"当使用迭代器遍历集合时，如果同时修改集合结构（添加/删除元素），会抛出此异常。\",\"解决方案：\",\"使用迭代器的remove()方法\",\"使用并发集合（如CopyOnWriteArraySet）\",\"在遍历期间对集合进行复制\",\"// 错误示例 Set<String> set = new HashSet<>(Arrays.asList(\\\"a\\\", \\\"b\\\", \\\"c\\\")); for (String s : set) { if (s.equals(\\\"a\\\")) { set.remove(s); // 抛出ConcurrentModificationException } } // 正确示例 Iterator<String> iterator = set.iterator(); while (iterator.hasNext()) { String s = iterator.next(); if (s.equals(\\\"a\\\")) { iterator.remove(); // 安全删除 } }\"]},\"2383\":{\"h\":\"4.1.2 NullPointerException\",\"t\":[\"HashSet允许存储null元素，但TreeSet不允许，插入null会抛出NullPointerException。\",\"解决方案：\",\"使用TreeSet时确保元素不为null\",\"如需存储可能为null的元素，选择HashSet或LinkedHashSet\"]},\"2384\":{\"h\":\"4.2 HashSet性能陷阱\"},\"2385\":{\"h\":\"4.2.1 哈希冲突\",\"t\":[\"当大量元素的hashCode值相同时，哈希表会退化为链表，导致插入和查找性能下降。\",\"解决方案：\",\"重写hashCode()方法，确保分布均匀\",\"避免使用常量hashCode\",\"合理设置初始容量和负载因子\"]},\"2386\":{\"h\":\"4.2.2 初始容量和负载因子\",\"t\":[\"初始容量过小或负载因子过高会导致频繁扩容和rehash操作，影响性能。\",\"解决方案：\",\"根据预期元素数量设置初始容量（建议为预期数量 / 负载因子）\",\"负载因子默认0.75，一般无需修改\",\"// 优化初始容量 int expectedSize = 1000; Set<String> optimizedSet = new HashSet<>((int)(expectedSize / 0.75) + 1);\"]},\"2387\":{\"h\":\"4.3 TreeSet使用误区\"},\"2388\":{\"h\":\"4.3.1 自定义对象排序\",\"t\":[\"使用TreeSet存储自定义对象时，如果未实现Comparable接口且未提供Comparator，会抛出ClassCastException。\",\"解决方案：\",\"实现Comparable接口\",\"提供Comparator比较器\",\"class Person implements Comparable<Person> { private String name; private int age; @Override public int compareTo(Person o) { return Integer.compare(this.age, o.age); } // getters and setters } // 或使用Comparator Set<Person> personSet = new TreeSet<>((p1, p2) -> p1.getName().compareTo(p2.getName()));\"]},\"2389\":{\"h\":\"4.4 线程安全问题\",\"t\":[\"HashSet、LinkedHashSet和TreeSet都是线程不安全的，多线程环境下可能导致数据不一致或ConcurrentModificationException。\",\"解决方案：\",\"使用Collections.synchronizedSet()\",\"使用CopyOnWriteArraySet（读多写少场景）\",\"使用ConcurrentSkipListSet（有序且线程安全）\"]},\"2390\":{\"h\":\"五、深度思考题\"},\"2391\":{\"h\":\"思考题1：HashSet、LinkedHashSet和TreeSet的性能对比及适用场景\",\"t\":[\"思考题回答： HashSet：基于哈希表实现，插入和查找性能为O(1)，但元素无序。适用于不需要保证元素顺序，追求插入和查找效率的场景。\",\"LinkedHashSet：基于哈希表+双向链表实现，插入和查找性能略低于HashSet，但能保持元素的插入顺序。适用于需要保证元素插入顺序，同时兼顾查找效率的场景。\",\"TreeSet：基于红黑树实现，插入、删除和查找性能为O(log n)，但能保证元素有序。适用于需要对元素进行排序或需要执行范围查询的场景。\"]},\"2392\":{\"h\":\"思考题2：如何实现一个线程安全的HashSet\",\"t\":[\"思考题回答： 实现线程安全的HashSet有以下几种方式：\",\"使用Collections.synchronizedSet()方法包装普通HashSet：\",\"Set<String> syncSet = Collections.synchronizedSet(new HashSet<>());\",\"这种方式通过在每个方法上添加同步锁实现线程安全，但并发性能较差。\",\"使用CopyOnWriteArraySet：\",\"Set<String> cowSet = new CopyOnWriteArraySet<>();\",\"这种方式通过写时复制机制实现线程安全，读操作无需加锁，适用于读多写少的场景。\",\"基于ConcurrentHashMap实现自定义线程安全HashSet：\",\"public class ConcurrentHashSet<E> { private final ConcurrentHashMap<E, Object> map; private static final Object PRESENT = new Object(); public ConcurrentHashSet() { map = new ConcurrentHashMap<>(); } public boolean add(E e) { return map.put(e, PRESENT) == null; } public boolean remove(E e) { return map.remove(e) == PRESENT; } // 其他方法... }\",\"这种方式利用ConcurrentHashMap的线程安全特性，实现高效的线程安全HashSet。\"]},\"2393\":{\"h\":\"思考题3：HashSet如何检查元素是否重复\",\"t\":[\"思考题回答： HashSet通过以下步骤检查元素是否重复：\",\"计算新元素的hashCode值，确定在哈希表中的存储位置。\",\"检查该位置是否已有元素： \",\"如果没有，直接存储新元素。\",\"如果有，通过equals方法比较新元素与已有元素是否相等： \",\"如果equals返回true，视为重复元素，不存储。\",\"如果equals返回false，说明发生哈希冲突，将新元素添加到链表或红黑树中。\",\"因此，为了保证HashSet能正确检查重复元素，需要同时重写元素类的hashCode()和equals()方法，并且确保相等的对象具有相同的hashCode。\"]},\"2394\":{\"h\":\"思考题4：JDK 8中HashSet的红黑树优化原理\",\"t\":[\"思考题回答： JDK 8中HashSet的底层实现HashMap引入了红黑树优化，当链表长度超过8且数组容量大于等于64时，会将链表转换为红黑树。这是因为在哈希冲突严重的情况下，链表的查找性能会退化为O(n)，而红黑树的查找性能为O(log n)，能够显著提高性能。\",\"当红黑树的节点数量减少到6个时，会自动转换回链表，因为在元素数量较少的情况下，链表的性能反而优于红黑树（红黑树需要维护平衡，有额外开销）。\"]},\"2395\":{\"h\":\"思考题5：不可变Set的实现原理及应用场景\",\"t\":[\"思考题回答： JDK 9引入的不可变Set（通过Set.of()方法创建）具有以下特点：\",\"实现原理：\",\"使用final修饰集合，防止引用被修改\",\"内部存储结构使用不可变数组\",\"所有修改方法（add、remove等）都直接抛出UnsupportedOperationException\",\"不允许存储null元素\",\"应用场景：\",\"存储常量数据，如配置信息、枚举值等\",\"作为方法返回值，防止外部修改内部集合\",\"多线程环境下共享数据，无需同步\",\"作为Map的key（不可变对象更适合作为Map的key）\",\"不可变Set相比普通Set具有线程安全、内存高效、防止意外修改等优点，但不适合需要频繁修改的场景。\"]},\"2396\":{\"h\":\"1.3.3 集合-Map集合\"},\"2397\":{\"h\":\"一、核理论\"},\"2398\":{\"h\":\"1.1 Map接口概述\",\"t\":[\"Map接口是Java集合框架中的双列集合根接口，用于存储键值对(key-value)映射关系。它提供了一种通过键快速查找值的机制，键不能重复，每个键最多映射到一个值。\"]},\"2399\":{\"h\":\"1.2 继承体系\"},\"2400\":{\"h\":\"1.3 主要实现类对比\",\"t\":[\"实现类\",\"底层数据结构\",\"线程安全\",\"有序性\",\"允许null键/值\",\"初始容量\",\"扩容因子\",\"HashMap\",\"数组+链表+红黑树\",\"否\",\"无序\",\"是/是\",\"16\",\"0.75\",\"TreeMap\",\"红黑树\",\"否\",\"有序(自然排序/定制排序)\",\"否/是\",\"-\",\"-\",\"LinkedHashMap\",\"哈希表+双向链表\",\"否\",\"插入顺序/访问顺序\",\"是/是\",\"16\",\"0.75\",\"Hashtable\",\"数组+链表\",\"是\",\"无序\",\"否/否\",\"11\",\"0.75\",\"ConcurrentHashMap\",\"数组+链表+红黑树(Segment/JDK8:CAS+synchronized)\",\"是\",\"无序\",\"否/否\",\"16\",\"0.75\"]},\"2401\":{\"h\":\"1.4 底层数据结构详解\"},\"2402\":{\"h\":\"1.4.1 HashMap数据结构(JDK8+)\"},\"2403\":{\"h\":\"1.4.2 ConcurrentHashMap数据结构演变\",\"t\":[\"JDK7: Segment分段锁机制\",\"JDK8+: CAS+synchronized+红黑树\"]},\"2404\":{\"h\":\"1.5 JDK版本特性\",\"t\":[\"JDK 1.2: 引入HashMap、Hashtable\",\"JDK 1.4: 引入LinkedHashMap\",\"JDK 1.5: 引入ConcurrentHashMap\",\"JDK 8: HashMap引入红黑树优化，ConcurrentHashMap重构为CAS+synchronized\",\"JDK 9: Map接口新增of()方法创建不可变集合\",\"JDK 16: HashMap新增putIfAbsentElseThrow()方法\"]},\"2405\":{\"h\":\"二、代码实践\"},\"2406\":{\"h\":\"2.1 初始化与基本操作\",\"t\":[\"import java.util.*; import java.util.concurrent.ConcurrentHashMap; /** * Map集合初始化与基本操作示例 * 展示不同Map实现类的创建方式和常用API */ public class MapInitializationExample { public static void main(String[] args) { // 1. HashMap初始化与操作 Map<String, Integer> hashMap = new HashMap<>(); hashMap.put(\\\"apple\\\", 10); hashMap.put(\\\"banana\\\", 20); hashMap.put(\\\"orange\\\", 30); System.out.println(\\\"HashMap: \\\" + hashMap); // 2. TreeMap初始化(自然排序) Map<String, Integer> treeMap = new TreeMap<>(); treeMap.putAll(hashMap); System.out.println(\\\"TreeMap(自然排序): \\\" + treeMap); // 3. LinkedHashMap初始化(保持插入顺序) Map<String, Integer> linkedHashMap = new LinkedHashMap<>(); linkedHashMap.put(\\\"apple\\\", 10); linkedHashMap.put(\\\"banana\\\", 20); linkedHashMap.put(\\\"orange\\\", 30); System.out.println(\\\"LinkedHashMap(插入顺序): \\\" + linkedHashMap); // 4. ConcurrentHashMap初始化(线程安全) Map<String, Integer> concurrentHashMap = new ConcurrentHashMap<>(); concurrentHashMap.putAll(hashMap); System.out.println(\\\"ConcurrentHashMap: \\\" + concurrentHashMap); // 5. JDK9+不可变Map Map<String, Integer> immutableMap = Map.of(\\\"a\\\", 1, \\\"b\\\", 2, \\\"c\\\", 3); System.out.println(\\\"不可变Map: \\\" + immutableMap); } }\"]},\"2407\":{\"h\":\"2.2 遍历方式\",\"t\":[\"import java.util.*; import java.util.function.BiConsumer; /** * Map集合遍历方式示例 * 展示5种常见的Map遍历方法及其适用场景 */ public class MapTraversalExample { public static void main(String[] args) { Map<String, Integer> map = new HashMap<>(); map.put(\\\"apple\\\", 10); map.put(\\\"banana\\\", 20); map.put(\\\"orange\\\", 30); // 方式1: 遍历entrySet(推荐,效率高) System.out.println(\\\"方式1: 遍历entrySet\\\"); for (Map.Entry<String, Integer> entry : map.entrySet()) { System.out.println(\\\"Key: \\\" + entry.getKey() + \\\", Value: \\\" + entry.getValue()); } // 方式2: 遍历keySet System.out.println(\\\"\\\\n方式2: 遍历keySet\\\"); for (String key : map.keySet()) { System.out.println(\\\"Key: \\\" + key + \\\", Value: \\\" + map.get(key)); } // 方式3: 遍历values System.out.println(\\\"\\\\n方式3: 遍历values\\\"); for (Integer value : map.values()) { System.out.println(\\\"Value: \\\" + value); } // 方式4: Lambda表达式(JDK8+) System.out.println(\\\"\\\\n方式4: Lambda表达式\\\"); map.forEach((key, value) -> System.out.println(\\\"Key: \\\" + key + \\\", Value: \\\" + value)); // 方式5: 迭代器遍历(支持删除操作) System.out.println(\\\"\\\\n方式5: 迭代器遍历\\\"); Iterator<Map.Entry<String, Integer>> iterator = map.entrySet().iterator(); while (iterator.hasNext()) { Map.Entry<String, Integer> entry = iterator.next(); if (\\\"banana\\\".equals(entry.getKey())) { iterator.remove(); // 安全删除 } else { System.out.println(\\\"Key: \\\" + entry.getKey() + \\\", Value: \\\" + entry.getValue()); } } System.out.println(\\\"删除后Map: \\\" + map); } }\"]},\"2408\":{\"h\":\"2.3 排序与查找\",\"t\":[\"import java.util.*; import java.util.stream.Collectors; /** * Map排序与查找示例 * 展示按键、按值排序及高效查找的实现 */ public class MapSortAndSearchExample { public static void main(String[] args) { Map<String, Integer> map = new HashMap<>(); map.put(\\\"apple\\\", 10); map.put(\\\"banana\\\", 20); map.put(\\\"orange\\\", 5); map.put(\\\"grape\\\", 15); // 1. 按键排序(升序) Map<String, Integer> sortedByKeyAsc = map.entrySet() .stream() .sorted(Map.Entry.comparingByKey()) .collect(Collectors.toMap( Map.Entry::getKey, Map.Entry::getValue, (oldValue, newValue) -> oldValue, LinkedHashMap::new )); System.out.println(\\\"按键升序排序: \\\" + sortedByKeyAsc); // 2. 按值排序(降序) Map<String, Integer> sortedByValueDesc = map.entrySet() .stream() .sorted(Map.Entry.<String, Integer>comparingByValue().reversed()) .collect(Collectors.toMap( Map.Entry::getKey, Map.Entry::getValue, (oldValue, newValue) -> oldValue, LinkedHashMap::new )); System.out.println(\\\"按值降序排序: \\\" + sortedByValueDesc); // 3. 查找最大值 Map.Entry<String, Integer> maxEntry = map.entrySet() .stream() .max(Map.Entry.comparingByValue()) .orElseThrow(() -> new NoSuchElementException(\\\"Map is empty\\\")); System.out.println(\\\"最大值: \\\" + maxEntry); // 4. 查找符合条件的元素 List<Map.Entry<String, Integer>> filteredEntries = map.entrySet() .stream() .filter(entry -> entry.getValue() > 10) .collect(Collectors.toList()); System.out.println(\\\"值大于10的元素: \\\" + filteredEntries); } }\"]},\"2409\":{\"h\":\"2.4 HashMap与TreeMap性能对比\",\"t\":[\"import java.util.HashMap; import java.util.Map; import java.util.TreeMap; /** * HashMap与TreeMap性能对比测试 * 测试两种Map在不同操作上的性能表现 */ public class MapPerformanceComparison { private static final int OPERATION_COUNT = 1000000; public static void main(String[] args) { // 测试HashMap Map<Integer, String> hashMap = new HashMap<>(); long hashMapPutTime = testPutPerformance(hashMap); long hashMapGetTime = testGetPerformance(hashMap); long hashMapRemoveTime = testRemovePerformance(hashMap); // 测试TreeMap Map<Integer, String> treeMap = new TreeMap<>(); long treeMapPutTime = testPutPerformance(treeMap); long treeMapGetTime = testGetPerformance(treeMap); long treeMapRemoveTime = testRemovePerformance(treeMap); // 输出结果 System.out.println(\\\"操作次数: \\\" + OPERATION_COUNT); System.out.println(\\\"HashMap - 插入: \\\" + hashMapPutTime + \\\"ms, 查询: \\\" + hashMapGetTime + \\\"ms, 删除: \\\" + hashMapRemoveTime + \\\"ms\\\"); System.out.println(\\\"TreeMap - 插入: \\\" + treeMapPutTime + \\\"ms, 查询: \\\" + treeMapGetTime + \\\"ms, 删除: \\\" + treeMapRemoveTime + \\\"ms\\\"); } private static long testPutPerformance(Map<Integer, String> map) { long startTime = System.currentTimeMillis(); for (int i = 0; i < OPERATION_COUNT; i++) { map.put(i, \\\"value\\\" + i); } return System.currentTimeMillis() - startTime; } private static long testGetPerformance(Map<Integer, String> map) { long startTime = System.currentTimeMillis(); for (int i = 0; i < OPERATION_COUNT; i++) { map.get(i); } return System.currentTimeMillis() - startTime; } private static long testRemovePerformance(Map<Integer, String> map) { long startTime = System.currentTimeMillis(); for (int i = 0; i < OPERATION_COUNT; i++) { map.remove(i); } return System.currentTimeMillis() - startTime; } }\"]},\"2410\":{\"h\":\"2.5 线程安全的Map实现\",\"t\":[\"import java.util.Collections; import java.util.HashMap; import java.util.Map; import java.util.concurrent.ConcurrentHashMap; import java.util.concurrent.ConcurrentSkipListMap; /** * 线程安全Map实现对比 * 展示四种线程安全Map的使用场景和特性 */ public class ThreadSafeMapExample { public static void main(String[] args) { // 1. Hashtable(古老实现,不推荐) Map<String, Integer> hashtable = new java.util.Hashtable<>(); // 2. Collections.synchronizedMap(装饰器模式) Map<String, Integer> synchronizedMap = Collections.synchronizedMap(new HashMap<>()); // 3. ConcurrentHashMap(高性能并发实现) Map<String, Integer> concurrentHashMap = new ConcurrentHashMap<>(); // 4. ConcurrentSkipListMap(并发有序映射) Map<String, Integer> concurrentSkipListMap = new ConcurrentSkipListMap<>(); // 演示ConcurrentHashMap的原子操作 concurrentHashMap.putIfAbsent(\\\"a\\\", 1); concurrentHashMap.computeIfAbsent(\\\"b\\\", k -> k.hashCode()); concurrentHashMap.merge(\\\"a\\\", 2, Integer::sum); System.out.println(\\\"ConcurrentHashMap结果: \\\" + concurrentHashMap); } }\"]},\"2411\":{\"h\":\"三、设计思想\"},\"2412\":{\"h\":\"3.1 接口与实现分离\",\"t\":[\"Map接口定义了键值对映射的规范，而具体实现类则提供不同的存储结构和性能特性。这种设计使得用户可以根据需求选择合适的实现，而无需修改使用Map的代码。\"]},\"2413\":{\"h\":\"3.2 哈希表设计\",\"t\":[\"HashMap采用哈希表作为底层结构，通过哈希函数将键映射到数组索引。当发生哈希冲突时，使用链表和红黑树解决冲突，保证了平均O(1)的查找效率。\"]},\"2414\":{\"h\":\"3.3 红黑树应用\",\"t\":[\"当HashMap中链表长度超过阈值(默认8)且数组长度不小于64时，链表会转换为红黑树，将最坏情况下的时间复杂度从O(n)优化为O(log n)。\"]},\"2415\":{\"h\":\"3.4 不可变集合设计\",\"t\":[\"JDK9引入的Map.of()方法创建不可变集合，通过以下方式保证不可变性：\",\"私有构造函数\",\"不可变内部存储\",\"不支持修改操作\",\"对null值严格检查\"]},\"2416\":{\"h\":\"3.5 并发设计\",\"t\":[\"ConcurrentHashMap在JDK8中的设计：\",\"取消Segment分段锁，使用CAS+synchronized实现并发控制\",\"对数组元素(链表头)加锁，减小锁粒度\",\"支持高并发读写，读操作无锁\",\"扩容时支持并发操作\"]},\"2417\":{\"h\":\"四、避坑指南\"},\"2418\":{\"h\":\"4.1 常见异常及解决方案\"},\"2419\":{\"h\":\"4.1.1 NullPointerException\",\"t\":[\"原因：使用null作为HashMap的键或值，而某些操作不允许null 解决方案：\",\"// 错误示例 Map<String, String> map = new HashMap<>(); map.put(null, \\\"value\\\"); // 允许 String value = map.get(null); // 允许 // TreeMap不允许null键 Map<String, String> treeMap = new TreeMap<>(); treeMap.put(null, \\\"value\\\"); // 抛出NullPointerException // 解决方案: 使用Optional或空对象模式 String safeValue = Optional.ofNullable(map.get(key)).orElse(\\\"default\\\");\"]},\"2420\":{\"h\":\"4.1.2 ConcurrentModificationException\",\"t\":[\"原因：迭代过程中修改Map结构 解决方案：\",\"// 错误示例 for (String key : map.keySet()) { if (key.startsWith(\\\"temp\\\")) { map.remove(key); // 抛出ConcurrentModificationException } } // 正确示例: 使用迭代器 Iterator<Map.Entry<String, String>> iterator = map.entrySet().iterator(); while (iterator.hasNext()) { Map.Entry<String, String> entry = iterator.next(); if (entry.getKey().startsWith(\\\"temp\\\")) { iterator.remove(); // 安全删除 } } // 或使用ConcurrentHashMap ConcurrentHashMap<String, String> concurrentMap = new ConcurrentHashMap<>(); for (String key : concurrentMap.keySet()) { if (key.startsWith(\\\"temp\\\")) { concurrentMap.remove(key); // 不会抛出异常 } }\"]},\"2421\":{\"h\":\"4.2 HashMap性能陷阱\"},\"2422\":{\"h\":\"4.2.1 哈希冲突\",\"t\":[\"问题：不当的hashCode()实现导致大量哈希冲突，性能退化 解决方案：\",\"实现合理的hashCode()方法，使哈希值分布均匀\",\"对于自定义对象作为键，重写hashCode()和equals()方法\"]},\"2423\":{\"h\":\"4.2.2 频繁扩容\",\"t\":[\"问题：初始容量设置不当导致频繁扩容 解决方案：\",\"// 预估元素数量时指定初始容量 int expectedSize = 1000; // 初始容量 = 预期元素数 / 负载因子 + 1 Map<String, Object> map = new HashMap<>((int)(expectedSize / 0.75f) + 1);\"]},\"2424\":{\"h\":\"4.3 线程安全问题\",\"t\":[\"问题：在多线程环境下使用非线程安全的Map 解决方案：\",\"低并发: Collections.synchronizedMap()\",\"高并发: ConcurrentHashMap\",\"并发且有序: ConcurrentSkipListMap\"]},\"2425\":{\"h\":\"五、深度思考题\"},\"2426\":{\"h\":\"思考题1: HashMap和ConcurrentHashMap的实现原理及性能对比\",\"t\":[\"思考题回答: HashMap基于数组+链表+红黑树实现，非线程安全，在并发环境下可能导致死循环或数据不一致。ConcurrentHashMap在JDK7使用Segment分段锁，JDK8及以上使用CAS+synchronized实现，支持高并发操作。\",\"性能方面，单线程环境下HashMap性能略优，多线程环境下ConcurrentHashMap表现更好，特别是读多写少场景。ConcurrentHashMap的get操作是无锁的，而HashMap在并发修改时可能抛出ConcurrentModificationException。\"]},\"2427\":{\"h\":\"思考题2: 如何实现一个自定义的LRU缓存\",\"t\":[\"思考题回答: 可以使用LinkedHashMap实现LRU(最近最少使用)缓存，重写removeEldestEntry()方法：\",\"import java.util.LinkedHashMap; import java.util.Map; public class LRUCache<K, V> extends LinkedHashMap<K, V> { private final int capacity; public LRUCache(int capacity) { super(capacity, 0.75f, true); this.capacity = capacity; } @Override protected boolean removeEldestEntry(Map.Entry<K, V> eldest) { return size() > capacity; } public static void main(String[] args) { LRUCache<Integer, String> cache = new LRUCache<>(3); cache.put(1, \\\"a\\\"); cache.put(2, \\\"b\\\"); cache.put(3, \\\"c\\\"); System.out.println(cache); // {1=a, 2=b, 3=c} cache.get(2); // 访问2 cache.put(4, \\\"d\\\"); // 超出容量，移除最近最少使用的1 System.out.println(cache); // {3=c, 2=b, 4=d} } }\"]},\"2428\":{\"h\":\"思考题3: HashMap在JDK8中的优化有哪些\",\"t\":[\"思考题回答: JDK8对HashMap的主要优化包括：\",\"引入红黑树：当链表长度超过阈值(8)且数组长度>=64时，将链表转换为红黑树，提高查询性能\",\"优化哈希函数：简化哈希计算，减少碰撞\",\"扩容优化：扩容时不需要重新计算哈希值，通过高位运算确定新位置\",\"新增函数：如computeIfAbsent、forEach、merge等便捷方法\",\"改进迭代器：使用fast-fail机制，及时检测并发修改\"]},\"2429\":{\"h\":\"思考题4: 如何实现线程安全的HashMap\",\"t\":[\"思考题回答: 实现线程安全的HashMap有以下几种方式：\",\"使用Hashtable：所有方法加synchronized，性能较差\",\"使用Collections.synchronizedMap()：装饰器模式，对所有方法加锁\",\"使用ConcurrentHashMap：JDK7分段锁，JDK8 CAS+synchronized，性能最优\",\"使用读写锁：ReadWriteLock，读多写少场景性能好\",\"示例代码(读写锁实现)：\",\"import java.util.HashMap; import java.util.Map; import java.util.concurrent.locks.ReadWriteLock; import java.util.concurrent.locks.ReentrantReadWriteLock; public class ThreadSafeHashMap<K, V> { private final Map<K, V> map = new HashMap<>(); private final ReadWriteLock lock = new ReentrantReadWriteLock(); public V get(K key) { lock.readLock().lock(); try { return map.get(key); } finally { lock.readLock().unlock(); } } public V put(K key, V value) { lock.writeLock().lock(); try { return map.put(key, value); } finally { lock.writeLock().unlock(); } } }\"]},\"2430\":{\"h\":\"1.3.4 集合-ArrayList源码\"},\"2431\":{\"h\":\"一、核理论\"},\"2432\":{\"h\":\"1.1 ArrayList类结构分析\",\"t\":[\"ArrayList是Java集合框架中最常用的动态数组实现，实现了List接口，继承自AbstractList抽象类，支持快速随机访问。其核心特点是基于数组实现、容量动态扩展、允许null元素、非线程安全。\"]},\"2433\":{\"h\":\"1.2 核心成员变量\",\"t\":[\"// 存储元素的数组，非私有以简化嵌套类访问 transient Object[] elementData; // JDK 8及之前版本 // private Object[] elementData; // JDK 11及之后版本 // 集合中的元素数量 private int size; // 默认初始容量 private static final int DEFAULT_CAPACITY = 10; // 空数组实例（指定初始容量为0时使用） private static final Object[] EMPTY_ELEMENTDATA = {}; // 默认空数组实例（无参构造时使用） private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {}; // 最大数组容量（Integer.MAX_VALUE - 8，留出头部信息空间） private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;\"]},\"2434\":{\"h\":\"1.3 版本差异特性\",\"t\":[\"版本\",\"重要特性\",\"JDK 1.2\",\"首次引入ArrayList\",\"JDK 1.4\",\"新增addAll(), removeAll(), retainAll()等批量操作方法\",\"JDK 5\",\"支持泛型，引入foreach循环支持\",\"JDK 6\",\"新增ensureCapacity(int minCapacity)方法\",\"JDK 7\",\"优化扩容算法，引入Arrays.copyOf()替代手动数组复制\",\"JDK 8\",\"新增removeIf(), forEach(), spliterator()等方法\",\"JDK 11\",\"将elementData从transient改为private，增强封装性\",\"JDK 16\",\"新增forEachRemaining(Consumer<? super E> action)方法\",\"JDK 17\",\"优化迭代器实现，增强并发修改检测\"]},\"2435\":{\"h\":\"二、代码实践\"},\"2436\":{\"h\":\"2.1 构造方法实现\",\"t\":[\"/** * 无参构造方法，使用默认空数组 * 首次添加元素时会扩容至默认容量10 */ public ArrayList() { this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA; } /** * 指定初始容量的构造方法 * @param initialCapacity 初始容量 * @throws IllegalArgumentException 如果初始容量为负数 */ public ArrayList(int initialCapacity) { if (initialCapacity > 0) { this.elementData = new Object[initialCapacity]; } else if (initialCapacity == 0) { this.elementData = EMPTY_ELEMENTDATA; } else { throw new IllegalArgumentException(\\\"Illegal Capacity: \\\" + initialCapacity); } } /** * 通过集合创建ArrayList的构造方法 * @param c 包含要放入此列表的元素的集合 * @throws NullPointerException 如果指定的集合为null */ public ArrayList(Collection<? extends E> c) { elementData = c.toArray(); if ((size = elementData.length) != 0) { // 检查c.toArray()是否正确返回Object[]类型 if (elementData.getClass() != Object[].class) { elementData = Arrays.copyOf(elementData, size, Object[].class); } } else { // 集合为空时使用空数组 this.elementData = EMPTY_ELEMENTDATA; } }\"]},\"2437\":{\"h\":\"2.2 添加元素核心方法\",\"t\":[\"/** * 在列表末尾添加指定元素 * @param e 要添加的元素 * @return true（始终返回true，符合Collection接口规范） */ public boolean add(E e) { // 确保容量足够，size+1 ensureCapacityInternal(size + 1); // Increments modCount!! // 将元素添加到数组的size位置，然后size自增 elementData[size++] = e; return true; } /** * 在指定位置插入元素 * @param index 要插入元素的位置 * @param element 要插入的元素 * @throws IndexOutOfBoundsException 如果索引超出范围 */ public void add(int index, E element) { // 检查索引是否合法 rangeCheckForAdd(index); // 确保容量足够 ensureCapacityInternal(size + 1); // Increments modCount!! // 将index及其后的元素向后移动一位 System.arraycopy(elementData, index, elementData, index + 1, size - index); // 在index位置插入新元素 elementData[index] = element; // 元素数量加1 size++; } /** * 确保内部容量足够 * @param minCapacity 所需的最小容量 */ private void ensureCapacityInternal(int minCapacity) { ensureExplicitCapacity(calculateCapacity(elementData, minCapacity)); } /** * 计算所需容量 * @param elementData 当前存储元素的数组 * @param minCapacity 所需最小容量 * @return 计算后的容量 */ private static int calculateCapacity(Object[] elementData, int minCapacity) { // 如果是使用无参构造创建的空数组，返回默认容量10和minCapacity中的较大值 if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) { return Math.max(DEFAULT_CAPACITY, minCapacity); } return minCapacity; } /** * 确保显式容量 * @param minCapacity 所需最小容量 */ private void ensureExplicitCapacity(int minCapacity) { modCount++; // 如果所需容量大于当前数组长度，则需要扩容 if (minCapacity - elementData.length > 0) { grow(minCapacity); } }\"]},\"2438\":{\"h\":\"2.3 扩容机制实现\",\"t\":[\"/** * 扩容数组以支持至少minCapacity的容量 * @param minCapacity 所需的最小容量 * @return 扩容后的数组 */ private void grow(int minCapacity) { // 获取当前数组长度 int oldCapacity = elementData.length; // 新容量为旧容量的1.5倍（oldCapacity >> 1 相当于 oldCapacity / 2） int newCapacity = oldCapacity + (oldCapacity >> 1); // 如果新容量仍然小于所需容量，则直接使用所需容量 if (newCapacity - minCapacity < 0) { newCapacity = minCapacity; } // 如果新容量超过最大数组容量，则使用Integer.MAX_VALUE if (newCapacity - MAX_ARRAY_SIZE > 0) { newCapacity = hugeCapacity(minCapacity); } // 复制原数组元素到新数组 elementData = Arrays.copyOf(elementData, newCapacity); } /** * 处理大容量情况 * @param minCapacity 所需最小容量 * @return 合适的大容量值 * @throws OutOfMemoryError 如果minCapacity超过Integer.MAX_VALUE */ private static int hugeCapacity(int minCapacity) { if (minCapacity < 0) { throw new OutOfMemoryError(); } // 如果所需容量超过MAX_ARRAY_SIZE，则返回Integer.MAX_VALUE，否则返回MAX_ARRAY_SIZE return (minCapacity > MAX_ARRAY_SIZE) ? Integer.MAX_VALUE : MAX_ARRAY_SIZE; }\"]},\"2439\":{\"h\":\"2.4 获取和修改元素\",\"t\":[\"/** * 获取指定位置的元素 * @param index 要获取的元素索引 * @return 指定位置的元素 * @throws IndexOutOfBoundsException 如果索引超出范围 */ public E get(int index) { // 检查索引是否合法 rangeCheck(index); // 返回指定位置的元素 return elementData(index); } /** * 修改指定位置的元素 * @param index 要修改的元素索引 * @param element 要设置的新元素 * @return 被替换的旧元素 * @throws IndexOutOfBoundsException 如果索引超出范围 */ public E set(int index, E element) { // 检查索引是否合法 rangeCheck(index); // 获取旧元素 E oldValue = elementData(index); // 设置新元素 elementData[index] = element; // 返回旧元素 return oldValue; } /** * 检查索引是否超出范围 * @param index 要检查的索引 * @throws IndexOutOfBoundsException 如果索引超出范围 */ private void rangeCheck(int index) { if (index >= size) { throw new IndexOutOfBoundsException(outOfBoundsMsg(index)); } } /** * 检查添加操作的索引是否合法 * @param index 要检查的索引 * @throws IndexOutOfBoundsException 如果索引超出范围 */ private void rangeCheckForAdd(int index) { if (index > size || index < 0) { throw new IndexOutOfBoundsException(outOfBoundsMsg(index)); } } /** * 生成索引越界异常消息 * @param index 越界的索引 * @return 异常消息 */ private String outOfBoundsMsg(int index) { return \\\"Index: \\\" + index + \\\", Size: \\\" + size; } /** * 元素数据访问，将Object类型转换为泛型E * @param index 元素索引 * @return 泛型E类型的元素 */ @SuppressWarnings(\\\"unchecked\\\") E elementData(int index) { return (E) elementData[index]; }\"]},\"2440\":{\"h\":\"2.5 删除元素操作\",\"t\":[\"/** * 删除指定位置的元素 * @param index 要删除的元素索引 * @return 被删除的元素 * @throws IndexOutOfBoundsException 如果索引超出范围 */ public E remove(int index) { // 检查索引是否合法 rangeCheck(index); // 修改次数加1 modCount++; // 获取要删除的元素 E oldValue = elementData(index); // 计算需要移动的元素数量 int numMoved = size - index - 1; if (numMoved > 0) { // 将index+1及其后的元素向前移动一位 System.arraycopy(elementData, index + 1, elementData, index, numMoved); } // 将最后一个元素置为null，帮助GC回收 elementData[--size] = null; // clear to let GC do its work // 返回被删除的元素 return oldValue; } /** * 删除指定元素（首次出现的） * @param o 要删除的元素，如果为null则删除null元素 * @return 如果列表包含指定元素则返回true */ public boolean remove(Object o) { if (o == null) { for (int index = 0; index < size; index++) { if (elementData[index] == null) { fastRemove(index); return true; } } } else { for (int index = 0; index < size; index++) { if (o.equals(elementData[index])) { fastRemove(index); return true; } } } return false; } /** * 快速删除指定位置的元素，不进行边界检查，不返回被删除元素 * @param index 要删除的元素索引 */ private void fastRemove(int index) { // 修改次数加1 modCount++; // 计算需要移动的元素数量 int numMoved = size - index - 1; if (numMoved > 0) { // 将index+1及其后的元素向前移动一位 System.arraycopy(elementData, index + 1, elementData, index, numMoved); } // 将最后一个元素置为null，帮助GC回收 elementData[--size] = null; // clear to let GC do its work } /** * 清空列表 */ public void clear() { // 修改次数加1 modCount++; // 将所有元素置为null，帮助GC回收 for (int i = 0; i < size; i++) { elementData[i] = null; } // 重置元素数量为0 size = 0; }\"]},\"2441\":{\"h\":\"2.6 迭代器实现\",\"t\":[\"/** * 返回列表的迭代器 * @return 列表的迭代器 */ public Iterator<E> iterator() { return new Itr(); } /** * ArrayList的内部迭代器实现 */ private class Itr implements Iterator<E> { // 下一个要返回的元素索引 int cursor; // index of next element to return // 最后一个返回的元素索引 int lastRet = -1; // index of last element returned; -1 if no such // 期望的修改次数，用于检测并发修改 int expectedModCount = modCount; Itr() {} /** * 判断是否还有下一个元素 * @return 如果还有元素则返回true */ public boolean hasNext() { return cursor != size; } /** * 获取下一个元素 * @return 下一个元素 * @throws NoSuchElementException 如果没有更多元素 * @throws ConcurrentModificationException 如果检测到并发修改 */ @SuppressWarnings(\\\"unchecked\\\") public E next() { // 检查并发修改 checkForComodification(); int i = cursor; if (i >= size) { throw new NoSuchElementException(); } Object[] elementData = ArrayList.this.elementData; if (i >= elementData.length) { throw new ConcurrentModificationException(); } cursor = i + 1; return (E) elementData[lastRet = i]; } /** * 删除当前元素 * @throws IllegalStateException 如果没有下一个元素 * @throws ConcurrentModificationException 如果检测到并发修改 */ public void remove() { if (lastRet < 0) { throw new IllegalStateException(); } // 检查并发修改 checkForComodification(); try { // 调用ArrayList的remove方法 ArrayList.this.remove(lastRet); cursor = lastRet; lastRet = -1; // 更新期望的修改次数 expectedModCount = modCount; } catch (IndexOutOfBoundsException ex) { throw new ConcurrentModificationException(); } } /** * 检查并发修改 * @throws ConcurrentModificationException 如果修改次数不匹配 */ final void checkForComodification() { if (modCount != expectedModCount) { throw new ConcurrentModificationException(); } } }\"]},\"2442\":{\"h\":\"三、设计思想\"},\"2443\":{\"h\":\"3.1 动态数组设计\",\"t\":[\"ArrayList的核心设计思想是基于动态数组实现，通过自动扩容机制提供灵活的容量管理：\"]},\"2444\":{\"h\":\"3.2 快速失败机制\",\"t\":[\"ArrayList通过modCount（修改次数）实现快速失败(fail-fast)机制：\",\"每次结构性修改（add、remove等）都会使modCount自增\",\"迭代器创建时记录expectedModCount = modCount\",\"迭代过程中检查modCount是否等于expectedModCount\",\"如果不等，说明集合被并发修改，抛出ConcurrentModificationException\"]},\"2445\":{\"h\":\"3.3 内存优化策略\",\"t\":[\"ArrayList采用了多种内存优化策略：\",\"延迟初始化：无参构造时不立即分配容量，首次添加元素时才扩容至10\",\"空间预分配：扩容时预留1.5倍容量，减少频繁扩容次数\",\"内存释放：删除元素时将不再使用的数组位置置为null，帮助GC回收\",\"trimToSize()：提供该方法允许手动将容量调整为元素数量，释放多余空间\",\"数组复用：使用静态空数组实例（EMPTY_ELEMENTDATA和DEFAULTCAPACITY_EMPTY_ELEMENTDATA）复用空数组，减少对象创建\"]},\"2446\":{\"h\":\"3.4 接口设计原则\",\"t\":[\"ArrayList遵循了多个重要的接口设计原则：\",\"单一职责：专注于动态数组的实现，不负责线程安全\",\"接口隔离：实现了List、RandomAccess等多个专门接口\",\"开闭原则：通过继承AbstractList实现基础功能，自身专注于数组特性\",\"里氏替换：可以在任何需要List的地方使用ArrayList\",\"封装性：内部数组elementData私有，通过方法暴露操作\"]},\"2447\":{\"h\":\"四、避坑指南\"},\"2448\":{\"h\":\"4.1 并发修改异常\",\"t\":[\"问题：在迭代过程中修改集合（如添加/删除元素）会抛出ConcurrentModificationException 解决方案：\",\"// 错误示例 List<String> list = new ArrayList<>(); list.add(\\\"a\\\"); list.add(\\\"b\\\"); list.add(\\\"c\\\"); for (String item : list) { if (item.equals(\\\"b\\\")) { list.remove(item); // 抛出ConcurrentModificationException } } // 正确方案1: 使用迭代器的remove()方法 Iterator<String> iterator = list.iterator(); while (iterator.hasNext()) { String item = iterator.next(); if (item.equals(\\\"b\\\")) { iterator.remove(); // 安全删除 } } // 正确方案2: 使用Stream API（JDK 8+） List<String> newList = list.stream() .filter(item -> !item.equals(\\\"b\\\")) .collect(Collectors.toList()); // 正确方案3: 使用CopyOnWriteArrayList（高并发场景） List<String> cowList = new CopyOnWriteArrayList<>(list); for (String item : cowList) { if (item.equals(\\\"b\\\")) { cowList.remove(item); } }\"]},\"2449\":{\"h\":\"4.2 扩容性能问题\",\"t\":[\"问题：频繁扩容会导致性能开销，特别是大数据量时 解决方案：\",\"// 错误示例: 频繁扩容 List<Integer> list = new ArrayList<>(); for (int i = 0; i < 100000; i++) { list.add(i); // 会触发多次扩容 } // 正确方案: 预估容量，指定初始大小 List<Integer> list = new ArrayList<>(100000); // 避免多次扩容 for (int i = 0; i < 100000; i++) { list.add(i); } // 正确方案: 已知集合大小，使用ensureCapacity() List<Integer> list = new ArrayList<>(); list.ensureCapacity(100000); // 预扩容 for (int i = 0; i < 100000; i++) { list.add(i); }\"]},\"2450\":{\"h\":\"4.3 数组下标越界\",\"t\":[\"问题：get/set/remove时使用无效索引导致IndexOutOfBoundsException 解决方案：\",\"List<String> list = new ArrayList<>(); list.add(\\\"a\\\"); list.add(\\\"b\\\"); // 错误示例 String item = list.get(2); // 抛出IndexOutOfBoundsException // 正确方案1: 使用前检查索引 int index = 2; if (index >= 0 && index < list.size()) { String item = list.get(index); } else { // 处理索引无效情况 System.out.println(\\\"索引超出范围\\\"); } // 正确方案2: 使用try-catch捕获异常 try { String item = list.get(2); } catch (IndexOutOfBoundsException e) { // 处理异常 System.err.println(\\\"获取元素失败: \\\" + e.getMessage()); }\"]},\"2451\":{\"h\":\"4.4 内存泄漏风险\",\"t\":[\"问题：ArrayList可能导致内存泄漏，特别是作为类成员变量时 解决方案：\",\"public class MemoryLeakExample { private List<Object> largeList = new ArrayList<>(); // 错误示例: 只清空元素但不释放引用 public void clearListWrong() { largeList.clear(); // 元素被清空，但list本身仍占用内存 } // 正确方案1: 清空并设置为null public void clearListCorrect1() { largeList.clear(); largeList = null; // 允许GC回收整个列表 } // 正确方案2: 替换为新的空列表 public void clearListCorrect2() { largeList = new ArrayList<>(); // 旧列表可被GC回收 } // 正确方案3: 使用trimToSize()释放多余容量 public void optimizeMemory() { largeList.trimToSize(); // 将容量调整为元素数量 } }\"]},\"2452\":{\"h\":\"4.5 自动装箱性能损耗\",\"t\":[\"问题：存储基本类型时会自动装箱，导致性能损耗 解决方案：\",\"// 错误示例: 大量自动装箱操作 List<Integer> list = new ArrayList<>(); for (int i = 0; i < 1000000; i++) { list.add(i); // 每次添加都会自动装箱为Integer } // 正确方案1: JDK 8+使用IntStream避免装箱 List<Integer> list = IntStream.range(0, 1000000) .boxed() .collect(Collectors.toCollection(() -> new ArrayList<>(1000000))); // 正确方案2: 使用专门的基本类型集合库（如Eclipse Collections、FastUtil） IntList intList = new IntArrayList(1000000); for (int i = 0; i < 1000000; i++) { intList.add(i); // 无装箱操作 }\"]},\"2453\":{\"h\":\"五、深度思考题\"},\"2454\":{\"h\":\"思考题1: ArrayList和Vector的区别及适用场景\",\"t\":[\"思考题回答: ArrayList和Vector都是基于动态数组的List实现，但存在以下关键区别：\",\"线程安全性：\",\"Vector是线程安全的，几乎所有方法都使用synchronized修饰\",\"ArrayList是非线程安全的，没有同步机制\",\"性能：\",\"Vector由于同步开销，单线程环境下性能低于ArrayList\",\"ArrayList在多线程环境下需要手动同步，否则会有线程安全问题\",\"扩容机制：\",\"Vector默认扩容为原来的2倍（可通过capacityIncrement设置增量）\",\"ArrayList默认扩容为原来的1.5倍\",\"迭代器：\",\"Vector的elements()方法返回Enumeration，不支持快速失败\",\"ArrayList的iterator()返回Iterator，支持快速失败\",\"API丰富度：\",\"Vector提供了更多古老的方法，如elementAt()、insertElementAt()等\",\"ArrayList遵循Collection框架标准API\",\"适用场景：\",\"单线程环境或可手动控制同步：优先使用ArrayList，性能更优\",\"多线程环境且需要内置同步：使用Vector（但更推荐使用Collections.synchronizedList或CopyOnWriteArrayList）\",\"需要精细化控制扩容策略：Vector可通过capacityIncrement参数调整\"]},\"2455\":{\"h\":\"思考题2: ArrayList的扩容为什么是1.5倍而不是2倍或其他倍数\",\"t\":[\"思考题回答: ArrayList选择1.5倍作为扩容因子主要基于时间和空间效率的权衡：\",\"时间复杂度分析：\",\"假设初始容量为C，扩容因子为k，添加n个元素的总时间复杂度为O(n)\",\"无论k是1.5还是2，均能保证分摊时间复杂度为O(1)\",\"1.5倍扩容的重分配次数略多于2倍扩容，但单次复制成本更低\",\"空间复杂度分析：\",\"2倍扩容可能导致更多的内存浪费，尤其当集合达到较大规模后\",\"1.5倍扩容在内存利用率上更优，减少内存浪费\",\"1.5是斐波那契数列比例，有助于减少内存碎片\",\"数学原理：\",\"1.5是黄金分割比例的近似值(约0.618)的倒数，具有较好的分布特性\",\"从数学上证明，1.5倍扩容可以使新分配的数组空间与旧空间的重叠概率最小\",\"这有助于减少内存分配的冲突，提高内存利用率\",\"实际应用考量：\",\"Java集合框架设计者在时间和空间之间选择了平衡\",\"对于大多数应用场景，1.5倍既能满足性能需求，又不会过度浪费内存\",\"如果需要更多空间预分配，可以通过ensureCapacity()方法手动控制\"]},\"2456\":{\"h\":\"思考题3: 如何实现一个线程安全的ArrayList\",\"t\":[\"思考题回答: 实现线程安全的ArrayList有以下几种方案：\",\"使用Collections.synchronizedList()：\",\"List<String> syncList = Collections.synchronizedList(new ArrayList<>()); // 使用方式与普通ArrayList相同，但所有方法都通过同步包装器实现线程安全\",\"原理：通过包装器模式，为所有方法添加synchronized同步块，保证线程安全。 优点：实现简单，适用于并发度不高的场景。 缺点：性能较差，每次操作都需要获取锁，可能导致线程竞争。\",\"使用CopyOnWriteArrayList：\",\"List<String> cowList = new CopyOnWriteArrayList<>(); // 读操作无锁，写操作复制整个数组\",\"原理：写时复制机制，修改操作会创建新数组并复制元素，然后替换旧数组引用。 优点：读操作性能极高，适合读多写少场景。 缺点：写操作成本高，内存占用大，数据一致性较弱。\",\"自定义同步ArrayList：\",\"public class SynchronizedArrayList<E> { private final List<E> list = new ArrayList<>(); private final Object lock = new Object(); public boolean add(E e) { synchronized (lock) { return list.add(e); } } public E get(int index) { synchronized (lock) { return list.get(index); } } // 实现其他必要方法... }\",\"原理：使用显式锁对象，对关键操作进行同步。 优点：可根据需求灵活控制同步粒度，性能可优化。 缺点：实现复杂，需要确保所有访问路径都经过同步。\",\"使用ReentrantLock实现细粒度同步：\",\"public class LockBasedArrayList<E> { private final List<E> list = new ArrayList<>(); private final ReentrantLock lock = new ReentrantLock(); public boolean add(E e) { lock.lock(); try { return list.add(e); } finally { lock.unlock(); } } // 实现其他方法... }\",\"原理：使用可重入锁实现同步，支持更灵活的锁定策略。 优点：支持尝试锁定、超时锁定等高级特性，可中断。 缺点：实现复杂度高于synchronized。\",\"选择建议：\",\"低并发场景：Collections.synchronizedList()简单易用\",\"读多写少高并发场景：CopyOnWriteArrayList性能最优\",\"复杂并发控制需求：自定义ReentrantLock实现\"]},\"2457\":{\"h\":\"1.3.4 集合-Queue\"},\"2458\":{\"h\":\"一、核心理论\"},\"2459\":{\"h\":\"1.1 Queue接口概述\",\"t\":[\"Queue接口是Java集合框架中的队列数据结构，遵循FIFO(先进先出)原则，用于存储按顺序排列的元素。除了基本的Collection操作外，Queue还提供了专门的插入、删除和检查操作，并针对这些操作定义了两种行为模式：当操作失败时要么抛出异常，要么返回特殊值。\"]},\"2460\":{\"h\":\"1.2 继承体系\"},\"2461\":{\"h\":\"1.3 主要实现类对比\",\"t\":[\"实现类\",\"底层结构\",\"阻塞特性\",\"有序性\",\"容量限制\",\"线程安全\",\"适用场景\",\"PriorityQueue\",\"数组/堆\",\"非阻塞\",\"自然排序/定制排序\",\"无(动态扩容)\",\"否\",\"优先级任务调度\",\"ArrayDeque\",\"数组\",\"非阻塞\",\"插入顺序\",\"无(动态扩容)\",\"否\",\"栈/队列实现\",\"LinkedList\",\"双向链表\",\"非阻塞\",\"插入顺序\",\"无\",\"否\",\"简单队列实现\",\"ArrayBlockingQueue\",\"数组\",\"阻塞\",\"FIFO\",\"有界\",\"是\",\"固定容量并发场景\",\"LinkedBlockingQueue\",\"链表\",\"阻塞\",\"FIFO\",\"可选有界\",\"是\",\"高并发生产者-消费者\",\"SynchronousQueue\",\"无缓冲\",\"阻塞\",\"FIFO\",\"容量为0\",\"是\",\"线程间直接移交数据\",\"DelayQueue\",\"优先级队列\",\"阻塞\",\"延迟时间\",\"无\",\"是\",\"定时任务调度\",\"ConcurrentLinkedQueue\",\"链表\",\"非阻塞\",\"FIFO\",\"无\",\"是\",\"高并发非阻塞场景\"]},\"2462\":{\"h\":\"1.4 核心操作对比\",\"t\":[\"操作类型\",\"抛出异常\",\"返回特殊值\",\"阻塞\",\"超时退出\",\"插入\",\"add(e)\",\"offer(e)\",\"put(e)\",\"offer(e, time, unit)\",\"删除\",\"remove()\",\"poll()\",\"take()\",\"poll(time, unit)\",\"检查\",\"element()\",\"peek()\",\"-\",\"-\"]},\"2463\":{\"h\":\"1.5 JDK版本特性\",\"t\":[\"JDK 1.5: 引入Queue接口及PriorityQueue、ConcurrentLinkedQueue\",\"JDK 1.6: 完善阻塞队列实现，新增SynchronousQueue等\",\"JDK 8: 新增Stream API支持，如queue.stream()\",\"JDK 9: 新增of()方法创建不可变队列\",\"JDK 16: 新增addAll()默认实现\"]},\"2464\":{\"h\":\"二、代码实践\"},\"2465\":{\"h\":\"2.1 基本操作示例\",\"t\":[\"import java.util.*; import java.util.concurrent.ArrayBlockingQueue; import java.util.concurrent.LinkedBlockingQueue; import java.util.concurrent.TimeUnit; /** * Queue接口基本操作示例 * 展示不同类型队列的创建和常用API */ public class QueueBasicOperations { public static void main(String[] args) throws InterruptedException { // 1. 优先级队列(自然排序) Queue<Integer> priorityQueue = new PriorityQueue<>(); priorityQueue.add(3); priorityQueue.add(1); priorityQueue.add(2); System.out.println(\\\"PriorityQueue: \\\" + priorityQueue); // [1, 3, 2] System.out.println(\\\"Poll: \\\" + priorityQueue.poll()); // 1 // 2. 双端队列 Deque<String> arrayDeque = new ArrayDeque<>(); arrayDeque.addFirst(\\\"a\\\"); arrayDeque.addLast(\\\"b\\\"); arrayDeque.push(\\\"c\\\"); // 等价于addFirst System.out.println(\\\"ArrayDeque: \\\" + arrayDeque); // [c, a, b] System.out.println(\\\"Pop: \\\" + arrayDeque.pop()); // c // 3. 阻塞队列 BlockingQueue<String> blockingQueue = new ArrayBlockingQueue<>(2); blockingQueue.put(\\\"x\\\"); blockingQueue.put(\\\"y\\\"); System.out.println(\\\"BlockingQueue size: \\\" + blockingQueue.size()); // 2 // 超时插入 boolean inserted = blockingQueue.offer(\\\"z\\\", 1, TimeUnit.SECONDS); System.out.println(\\\"插入成功? \\\" + inserted); // false // 4. 并发队列 Queue<String> concurrentQueue = new ConcurrentLinkedQueue<>(); concurrentQueue.offer(\\\"A\\\"); concurrentQueue.offer(\\\"B\\\"); concurrentQueue.offer(\\\"C\\\"); System.out.println(\\\"ConcurrentLinkedQueue: \\\" + concurrentQueue); // [A, B, C] } }\"]},\"2466\":{\"h\":\"2.2 生产者-消费者模型实现\",\"t\":[\"import java.util.concurrent.ArrayBlockingQueue; import java.util.concurrent.BlockingQueue; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; /** * 使用阻塞队列实现生产者-消费者模型 * 展示ArrayBlockingQueue在并发场景下的应用 */ public class ProducerConsumerExample { // 缓冲区大小 private static final int BUFFER_SIZE = 5; // 产品数量 private static final int PRODUCT_COUNT = 10; public static void main(String[] args) { // 创建有界阻塞队列作为缓冲区 BlockingQueue<Integer> buffer = new ArrayBlockingQueue<>(BUFFER_SIZE); // 创建生产者和消费者 ExecutorService executor = Executors.newFixedThreadPool(3); executor.submit(new Producer(buffer, PRODUCT_COUNT)); executor.submit(new Consumer(buffer, PRODUCT_COUNT)); executor.submit(new Consumer(buffer, PRODUCT_COUNT)); executor.shutdown(); } /** * 生产者线程 */ static class Producer implements Runnable { private final BlockingQueue<Integer> buffer; private final int productCount; public Producer(BlockingQueue<Integer> buffer, int productCount) { this.buffer = buffer; this.productCount = productCount; } @Override public void run() { try { for (int i = 1; i <= productCount; i++) { System.out.println(\\\"生产者生产产品: \\\" + i); buffer.put(i); // 若缓冲区满则阻塞 Thread.sleep(100); // 模拟生产耗时 } System.out.println(\\\"生产者完成生产任务\\\"); } catch (InterruptedException e) { Thread.currentThread().interrupt(); } } } /** * 消费者线程 */ static class Consumer implements Runnable { private final BlockingQueue<Integer> buffer; private final int productCount; private static int totalConsumed = 0; public Consumer(BlockingQueue<Integer> buffer, int productCount) { this.buffer = buffer; this.productCount = productCount; } @Override public void run() { try { while (totalConsumed < productCount) { Integer product = buffer.take(); // 若缓冲区空则阻塞 synchronized (Consumer.class) { if (totalConsumed < productCount) { System.out.println(\\\"消费者消费产品: \\\" + product); totalConsumed++; Thread.sleep(200); // 模拟消费耗时 } } } System.out.println(\\\"消费者完成消费任务\\\"); } catch (InterruptedException e) { Thread.currentThread().interrupt(); } } } }\"]},\"2467\":{\"h\":\"2.3 延迟队列应用\",\"t\":[\"import java.util.concurrent.DelayQueue; import java.util.concurrent.Delayed; import java.util.concurrent.TimeUnit; /** * 延迟队列(DelayQueue)应用示例 * 实现定时任务调度功能 */ public class DelayQueueExample { public static void main(String[] args) throws InterruptedException { DelayQueue<DelayedTask> delayQueue = new DelayQueue<>(); // 添加延迟任务 delayQueue.put(new DelayedTask(\\\"任务1\\\", 1, TimeUnit.SECONDS)); delayQueue.put(new DelayedTask(\\\"任务2\\\", 3, TimeUnit.SECONDS)); delayQueue.put(new DelayedTask(\\\"任务3\\\", 2, TimeUnit.SECONDS)); System.out.println(\\\"开始执行延迟任务...\\\"); // 执行延迟任务 while (!delayQueue.isEmpty()) { DelayedTask task = delayQueue.take(); // 阻塞直到有任务到期 task.run(); } } /** * 延迟任务类 */ static class DelayedTask implements Delayed, Runnable { private final String taskName; private final long executeTime; public DelayedTask(String taskName, long delay, TimeUnit unit) { this.taskName = taskName; this.executeTime = System.currentTimeMillis() + unit.toMillis(delay); } @Override public long getDelay(TimeUnit unit) { return unit.convert(executeTime - System.currentTimeMillis(), TimeUnit.MILLISECONDS); } @Override public int compareTo(Delayed other) { return Long.compare(this.executeTime, ((DelayedTask) other).executeTime); } @Override public void run() { System.out.println(\\\"执行任务: \\\" + taskName + \\\", 当前时间: \\\" + System.currentTimeMillis()); } } }\"]},\"2468\":{\"h\":\"2.4 双端队列实现栈和队列\",\"t\":[\"import java.util.ArrayDeque; import java.util.Deque; /** * 使用ArrayDeque实现栈和队列 * 展示双端队列的灵活性 */ public class DequeAsStackAndQueue { public static void main(String[] args) { // 1. 作为栈使用(LIFO) Deque<Integer> stack = new ArrayDeque<>(); stack.push(1); stack.push(2); stack.push(3); System.out.println(\\\"栈顶元素: \\\" + stack.peek()); // 3 System.out.println(\\\"弹出元素: \\\" + stack.pop()); // 3 System.out.println(\\\"栈大小: \\\" + stack.size()); // 2 // 2. 作为队列使用(FIFO) Deque<Integer> queue = new ArrayDeque<>(); queue.offer(1); queue.offer(2); queue.offer(3); System.out.println(\\\"队首元素: \\\" + queue.peek()); // 1 System.out.println(\\\"出队元素: \\\" + queue.poll()); // 1 System.out.println(\\\"队列大小: \\\" + queue.size()); // 2 // 3. 双端操作 Deque<Integer> deque = new ArrayDeque<>(); deque.addFirst(1); deque.addLast(2); deque.addFirst(0); System.out.println(\\\"双端队列: \\\" + deque); // [0, 1, 2] System.out.println(\\\"移除第一个: \\\" + deque.removeFirst()); // 0 System.out.println(\\\"移除最后一个: \\\" + deque.removeLast()); // 2 } }\"]},\"2469\":{\"h\":\"三、设计思想\"},\"2470\":{\"h\":\"3.1 接口设计模式\",\"t\":[\"Queue接口采用了\\\"接口继承+功能扩展\\\"的设计模式，在Collection接口基础上扩展了队列特有操作，并通过不同的实现类提供多样化的队列特性。这种设计保证了接口的简洁性和实现的灵活性。\"]},\"2471\":{\"h\":\"3.2 阻塞队列实现原理\",\"t\":[\"阻塞队列通过ReentrantLock和Condition实现线程间的协调：\"]},\"2472\":{\"h\":\"3.3 优先级队列设计\",\"t\":[\"PriorityQueue基于二叉小顶堆实现，通过数组存储元素，利用堆的特性实现元素的自动排序：\",\"父节点索引：i\",\"左子节点索引：2i+1\",\"右子节点索引：2i+2\",\"插入时\\\"上浮\\\"调整\",\"删除时\\\"下沉\\\"调整\"]},\"2473\":{\"h\":\"3.4 并发队列设计\",\"t\":[\"ConcurrentLinkedQueue采用无锁CAS操作实现高并发性能：\",\"基于单向链表实现\",\"使用volatile变量保证可见性\",\"通过CAS操作实现原子性\",\"采用Michael-Scott非阻塞算法\"]},\"2474\":{\"h\":\"四、避坑指南\"},\"2475\":{\"h\":\"4.1 常见异常及解决方案\"},\"2476\":{\"h\":\"4.1.1 NoSuchElementException\",\"t\":[\"原因：队列为空时调用element()或remove()方法 解决方案：\",\"Queue<String> queue = new LinkedList<>(); // 错误示例 queue.element(); // 抛出NoSuchElementException // 正确示例 if (!queue.isEmpty()) { String element = queue.element(); } // 更优方案: 使用peek() String element = queue.peek(); // 队列为空时返回null\"]},\"2477\":{\"h\":\"4.1.2 IllegalStateException\",\"t\":[\"原因：队列已满时调用add()方法 解决方案：\",\"Queue<String> queue = new ArrayBlockingQueue<>(1); queue.add(\\\"a\\\"); // 错误示例 queue.add(\\\"b\\\"); // 抛出IllegalStateException // 正确示例 boolean success = queue.offer(\\\"b\\\"); // 队列满时返回false if (!success) { System.out.println(\\\"队列已满，添加失败\\\"); }\"]},\"2478\":{\"h\":\"4.2 线程安全问题\",\"t\":[\"问题：在多线程环境下使用非线程安全的队列（如LinkedList、PriorityQueue） 解决方案：\",\"// 错误示例 - 多线程下不安全 Queue<String> unsafeQueue = new LinkedList<>(); // 正确方案1: 使用线程安全的实现类 Queue<String> safeQueue1 = new ConcurrentLinkedQueue<>(); // 正确方案2: 使用阻塞队列 BlockingQueue<String> safeQueue2 = new LinkedBlockingQueue<>(); // 正确方案3: 使用Collections.synchronized包装 Queue<String> safeQueue3 = Collections.synchronizedQueue(new LinkedList<>());\"]},\"2479\":{\"h\":\"4.3 PriorityQueue陷阱\"},\"2480\":{\"h\":\"4.3.1 无序遍历\",\"t\":[\"问题：PriorityQueue的迭代器不保证有序遍历 解决方案：\",\"PriorityQueue<Integer> pq = new PriorityQueue<>(); pq.add(3); pq.add(1); pq.add(2); // 错误: 直接遍历不保证有序 for (Integer num : pq) { System.out.print(num + \\\" \\\"); // 可能输出: 1 3 2 } // 正确: 逐个poll()获取有序元素 while (!pq.isEmpty()) { System.out.print(pq.poll() + \\\" \\\"); // 输出: 1 2 3 }\"]},\"2481\":{\"h\":\"4.3.2 null元素\",\"t\":[\"问题：PriorityQueue不允许添加null元素 解决方案：\",\"PriorityQueue<String> pq = new PriorityQueue<>(); // 错误示例 pq.add(null); // 抛出NullPointerException // 正确示例: 使用特殊值代替null pq.add(\\\"NULL_VALUE\\\");\"]},\"2482\":{\"h\":\"五、深度思考题\"},\"2483\":{\"h\":\"思考题1: 阻塞队列如何实现线程间通信\",\"t\":[\"思考题回答: 阻塞队列通过内置锁和条件变量实现线程间通信。以ArrayBlockingQueue为例，其内部维护了一个ReentrantLock和两个Condition（notEmpty和notFull）。当队列满时，生产者线程调用put()方法会被阻塞在notFull条件上；当队列空时，消费者线程调用take()方法会被阻塞在notEmpty条件上。当有元素入队时，会唤醒notEmpty条件上的消费者；当有元素出队时，会唤醒notFull条件上的生产者。这种机制实现了生产者和消费者之间的高效协作。\"]},\"2484\":{\"h\":\"思考题2: ArrayDeque与LinkedList作为队列和栈的性能对比\",\"t\":[\"思考题回答: ArrayDeque通常比LinkedList作为队列和栈时性能更好，原因如下：\",\"内存结构：ArrayDeque基于数组实现，内存连续，缓存利用率高；LinkedList基于节点，内存分散，可能导致更多缓存失效\",\"操作效率：ArrayDeque的add/remove操作都是O(1)时间复杂度且实现简单；LinkedList需要创建节点对象，涉及更多内存操作\",\"空间开销：LinkedList每个元素需要额外存储前后指针，空间开销更大\",\"迭代性能：ArrayDeque的迭代器实现更简单高效\",\"唯一适合使用LinkedList的场景是需要在队列中间进行插入/删除操作，或者需要实现双向迭代器的场景。\"]},\"2485\":{\"h\":\"思考题3: 如何实现一个线程安全的非阻塞队列\",\"t\":[\"思考题回答: 可以使用CAS(Compare-And-Swap)操作实现非阻塞队列，核心思想是通过原子操作避免使用锁：\",\"使用volatile变量存储头节点和尾节点，保证可见性\",\"入队时通过CAS原子更新尾节点\",\"出队时通过CAS原子更新头节点\",\"处理并发情况下的节点引用更新冲突\",\"简化实现示例：\",\"import java.util.concurrent.atomic.AtomicReference; public class ConcurrentNonBlockingQueue<T> { // 节点定义 private static class Node<T> { final T item; AtomicReference<Node<T>> next; Node(T item) { this.item = item; this.next = new AtomicReference<>(null); } } // 头节点和尾节点(AtomicReference保证原子操作) private final AtomicReference<Node<T>> head = new AtomicReference<>(new Node<>(null)); private final AtomicReference<Node<T>> tail = new AtomicReference<>(head.get()); // 入队操作 public void enqueue(T item) { Node<T> newNode = new Node<>(item); while (true) { Node<T> currentTail = tail.get(); Node<T> tailNext = currentTail.next.get(); // 检查尾节点是否被修改 if (currentTail == tail.get()) { // 如果尾节点的next为null，表示可以插入新节点 if (tailNext == null) { if (currentTail.next.compareAndSet(null, newNode)) { // 成功插入，更新尾节点 tail.compareAndSet(currentTail, newNode); return; } } else { // 尾节点已被其他线程修改，帮助更新尾节点 tail.compareAndSet(currentTail, tailNext); } } } } // 出队操作 public T dequeue() { while (true) { Node<T> currentHead = head.get(); Node<T> currentTail = tail.get(); Node<T> headNext = currentHead.next.get(); // 检查头节点是否被修改 if (currentHead == head.get()) { // 队列为空 if (currentHead == currentTail) { if (headNext == null) { return null; // 队列为空 } // 帮助更新尾节点 tail.compareAndSet(currentTail, headNext); } else { T item = headNext.item; // 尝试更新头节点 if (head.compareAndSet(currentHead, headNext)) { return item; } } } } } }\"]},\"2486\":{\"h\":\"思考题4: DelayQueue的实现原理及应用场景\",\"t\":[\"思考题回答: DelayQueue是一个支持延迟获取元素的无界阻塞队列，其实现原理如下：\",\"底层基于PriorityQueue实现，元素必须实现Delayed接口\",\"Delayed接口定义了getDelay()方法返回剩余延迟时间和compareTo()方法定义排序规则\",\"只有当元素的延迟时间<=0时才能被取出\",\"内部通过ReentrantLock保证线程安全\",\"使用Condition等待直到有元素延迟到期\",\"应用场景包括：\",\"定时任务调度：如定时执行的任务队列\",\"缓存过期清理：存储带有过期时间的缓存项\",\"订单超时处理：处理超过一定时间未支付的订单\",\"会话超时管理：管理用户会话的过期时间\",\"重试机制实现：失败操作的定时重试队列\"]},\"2487\":{\"h\":\"1.3.5 集合-LinkedList源码\"},\"2488\":{\"h\":\"一、核理论\"},\"2489\":{\"h\":\"1.1 LinkedList类结构分析\",\"t\":[\"LinkedList是Java集合框架中基于双向链表实现的List接口实现类，同时实现了Deque接口，因此兼具列表和双端队列的特性。其核心特点是插入删除效率高（O(1)时间复杂度）、随机访问效率低（O(n)时间复杂度）、允许null元素、非线程安全。\"]},\"2490\":{\"h\":\"1.2 核心成员变量与内部类\",\"t\":[\"// 双向链表的头节点 transient Node<E> first; // 双向链表的尾节点 transient Node<E> last; // 集合中的元素数量 transient int size = 0; // 序列化版本号 private static final long serialVersionUID = 876323262645176354L; /** * 双向链表节点内部类 */ private static class Node<E> { // 节点存储的元素 E item; // 指向下一个节点的引用 Node<E> next; // 指向前一个节点的引用 Node<E> prev; // 节点构造方法 Node(Node<E> prev, E element, Node<E> next) { this.item = element; this.next = next; this.prev = prev; } }\"]},\"2491\":{\"h\":\"1.3 版本差异特性\",\"t\":[\"版本\",\"重要特性\",\"JDK 1.2\",\"首次引入LinkedList\",\"JDK 1.4\",\"实现Deque接口，新增双端队列相关方法\",\"JDK 5\",\"支持泛型，引入foreach循环支持\",\"JDK 6\",\"优化迭代器实现，增强快速失败机制\",\"JDK 8\",\"新增removeIf(), forEach(), spliterator()等方法\",\"JDK 9\",\"新增of()静态工厂方法，支持创建不可变LinkedList\",\"JDK 16\",\"新增forEachRemaining(Consumer<? super E> action)方法\",\"JDK 17\",\"优化序列化机制，增强安全性\"]},\"2492\":{\"h\":\"二、代码实践\"},\"2493\":{\"h\":\"2.1 构造方法实现\",\"t\":[\"/** * 无参构造方法，创建一个空的LinkedList */ public LinkedList() { } /** * 通过集合创建LinkedList的构造方法 * @param c 包含要放入此列表的元素的集合 * @throws NullPointerException 如果指定的集合为null */ public LinkedList(Collection<? extends E> c) { this(); addAll(c); }\"]},\"2494\":{\"h\":\"2.2 添加元素核心方法\",\"t\":[\"/** * 在链表末尾添加指定元素 * @param e 要添加的元素 * @return true（始终返回true，符合Collection接口规范） */ public boolean add(E e) { linkLast(e); return true; } /** * 在指定位置插入元素 * @param index 要插入元素的位置 * @param element 要插入的元素 * @throws IndexOutOfBoundsException 如果索引超出范围 */ public void add(int index, E element) { // 检查索引是否合法 checkPositionIndex(index); if (index == size) { // 如果索引等于元素数量，直接添加到末尾 linkLast(element); } else { // 否则添加到指定节点之前 linkBefore(element, node(index)); } } /** * 将元素链接到链表末尾 * @param e 要链接的元素 */ void linkLast(E e) { // 保存尾节点 final Node<E> l = last; // 创建新节点，前驱为当前尾节点，后继为null final Node<E> newNode = new Node<>(l, e, null); // 更新尾节点为新节点 last = newNode; if (l == null) { // 如果原链表为空，头节点也指向新节点 first = newNode; } else { // 否则原尾节点的后继指向新节点 l.next = newNode; } // 元素数量加1 size++; // 修改次数加1 modCount++; } /** * 将元素链接到指定节点之前 * @param e 要链接的元素 * @param succ 指定的节点 */ void linkBefore(E e, Node<E> succ) { // 获取指定节点的前驱 final Node<E> pred = succ.prev; // 创建新节点，前驱为pred，后继为succ final Node<E> newNode = new Node<>(pred, e, succ); // 更新succ的前驱为新节点 succ.prev = newNode; if (pred == null) { // 如果pred为null，说明succ是头节点，更新头节点为新节点 first = newNode; } else { // 否则pred的后继指向新节点 pred.next = newNode; } // 元素数量加1 size++; // 修改次数加1 modCount++; } /** * 检查位置索引是否合法 * @param index 要检查的索引 * @throws IndexOutOfBoundsException 如果索引超出范围 */ private void checkPositionIndex(int index) { if (!isPositionIndex(index)) { throw new IndexOutOfBoundsException(outOfBoundsMsg(index)); } } /** * 判断位置索引是否合法 * @param index 要判断的索引 * @return 如果索引在0到size之间则返回true */ private boolean isPositionIndex(int index) { return index >= 0 && index <= size; }\"]},\"2495\":{\"h\":\"2.3 获取和修改元素\",\"t\":[\"/** * 获取指定位置的元素 * @param index 要获取的元素索引 * @return 指定位置的元素 * @throws IndexOutOfBoundsException 如果索引超出范围 */ public E get(int index) { // 检查索引是否合法 checkElementIndex(index); // 返回指定节点的元素 return node(index).item; } /** * 修改指定位置的元素 * @param index 要修改的元素索引 * @param element 要设置的新元素 * @return 被替换的旧元素 * @throws IndexOutOfBoundsException 如果索引超出范围 */ public E set(int index, E element) { // 检查索引是否合法 checkElementIndex(index); // 获取指定节点 Node<E> x = node(index); // 保存旧元素 E oldVal = x.item; // 设置新元素 x.item = element; // 返回旧元素 return oldVal; } /** * 返回指定索引处的节点 * @param index 要获取的节点索引 * @return 指定索引处的节点 */ Node<E> node(int index) { // 优化：如果索引在前半部分，从头节点开始遍历 if (index < (size >> 1)) { Node<E> x = first; for (int i = 0; i < index; i++) { x = x.next; } return x; } else { // 如果索引在后半部分，从尾节点开始遍历 Node<E> x = last; for (int i = size - 1; i > index; i--) { x = x.prev; } return x; } } /** * 检查元素索引是否合法 * @param index 要检查的索引 * @throws IndexOutOfBoundsException 如果索引超出范围 */ private void checkElementIndex(int index) { if (!isElementIndex(index)) { throw new IndexOutOfBoundsException(outOfBoundsMsg(index)); } } /** * 判断元素索引是否合法 * @param index 要判断的索引 * @return 如果索引在0到size-1之间则返回true */ private boolean isElementIndex(int index) { return index >= 0 && index < size; }\"]},\"2496\":{\"h\":\"2.4 删除元素操作\",\"t\":[\"/** * 删除指定位置的元素 * @param index 要删除的元素索引 * @return 被删除的元素 * @throws IndexOutOfBoundsException 如果索引超出范围 */ public E remove(int index) { // 检查索引是否合法 checkElementIndex(index); // 解除指定节点的链接并返回其元素 return unlink(node(index)); } /** * 删除首次出现的指定元素 * @param o 要删除的元素，如果为null则删除null元素 * @return 如果列表包含指定元素则返回true */ public boolean remove(Object o) { if (o == null) { // 遍历链表寻找null元素 for (Node<E> x = first; x != null; x = x.next) { if (x.item == null) { unlink(x); return true; } } } else { // 遍历链表寻找指定元素 for (Node<E> x = first; x != null; x = x.next) { if (o.equals(x.item)) { unlink(x); return true; } } } return false; } /** * 解除指定节点的链接 * @param x 要解除链接的节点 * @return 被解除链接的节点的元素 */ E unlink(Node<E> x) { // 获取节点的元素 final E element = x.item; // 获取节点的后继 final Node<E> next = x.next; // 获取节点的前驱 final Node<E> prev = x.prev; if (prev == null) { // 如果前驱为null，说明是头节点，更新头节点为后继 first = next; } else { // 否则前驱的后继指向后继 prev.next = next; // 帮助GC回收，将节点的前驱置为null x.prev = null; } if (next == null) { // 如果后继为null，说明是尾节点，更新尾节点为前驱 last = prev; } else { // 否则后继的前驱指向前驱 next.prev = prev; // 帮助GC回收，将节点的后继置为null x.next = null; } // 帮助GC回收，将节点的元素置为null x.item = null; // 元素数量减1 size--; // 修改次数加1 modCount++; // 返回被删除的元素 return element; } /** * 清空链表 */ public void clear() { // 遍历链表，将所有节点的引用置为null，帮助GC回收 for (Node<E> x = first; x != null; ) { Node<E> next = x.next; x.item = null; x.next = null; x.prev = null; x = next; } // 重置头节点和尾节点为null first = last = null; // 重置元素数量为0 size = 0; // 修改次数加1 modCount++; }\"]},\"2497\":{\"h\":\"2.5 双端队列特有方法\",\"t\":[\"/** * 在链表头部添加元素 * @param e 要添加的元素 */ public void addFirst(E e) { linkFirst(e); } /** * 在链表尾部添加元素 * @param e 要添加的元素 */ public void addLast(E e) { linkLast(e); } /** * 将元素链接到链表头部 * @param e 要链接的元素 */ private void linkFirst(E e) { // 保存头节点 final Node<E> f = first; // 创建新节点，前驱为null，后继为当前头节点 final Node<E> newNode = new Node<>(null, e, f); // 更新头节点为新节点 first = newNode; if (f == null) { // 如果原链表为空，尾节点也指向新节点 last = newNode; } else { // 否则原头节点的前驱指向新节点 f.prev = newNode; } // 元素数量加1 size++; // 修改次数加1 modCount++; } /** * 获取头部元素 * @return 头部元素 * @throws NoSuchElementException 如果链表为空 */ public E getFirst() { final Node<E> f = first; if (f == null) { throw new NoSuchElementException(); } return f.item; } /** * 获取尾部元素 * @return 尾部元素 * @throws NoSuchElementException 如果链表为空 */ public E getLast() { final Node<E> l = last; if (l == null) { throw new NoSuchElementException(); } return l.item; } /** * 删除并返回头部元素 * @return 头部元素 * @throws NoSuchElementException 如果链表为空 */ public E removeFirst() { final Node<E> f = first; if (f == null) { throw new NoSuchElementException(); } return unlinkFirst(f); } /** * 删除并返回尾部元素 * @return 尾部元素 * @throws NoSuchElementException 如果链表为空 */ public E removeLast() { final Node<E> l = last; if (l == null) { throw new NoSuchElementException(); } return unlinkLast(l); } /** * 解除头节点的链接 * @param f 头节点 * @return 头节点的元素 */ private E unlinkFirst(Node<E> f) { // 获取头节点的元素 final E element = f.item; // 获取头节点的后继 final Node<E> next = f.next; // 帮助GC回收，将头节点的元素和后继置为null f.item = null; f.next = null; // help GC // 更新头节点为后继 first = next; if (next == null) { // 如果后继为null，说明链表为空，尾节点也置为null last = null; } else { // 否则后继的前驱置为null next.prev = null; } // 元素数量减1 size--; // 修改次数加1 modCount++; // 返回被删除的元素 return element; } /** * 解除尾节点的链接 * @param l 尾节点 * @return 尾节点的元素 */ private E unlinkLast(Node<E> l) { // 获取尾节点的元素 final E element = l.item; // 获取尾节点的前驱 final Node<E> prev = l.prev; // 帮助GC回收，将尾节点的元素和前驱置为null l.item = null; l.prev = null; // help GC // 更新尾节点为前驱 last = prev; if (prev == null) { // 如果前驱为null，说明链表为空，头节点也置为null first = null; } else { // 否则前驱的后继置为null prev.next = null; } // 元素数量减1 size--; // 修改次数加1 modCount++; // 返回被删除的元素 return element; }\"]},\"2498\":{\"h\":\"2.6 迭代器实现\",\"t\":[\"/** * 返回列表的迭代器 * @return 列表的迭代器 */ public Iterator<E> iterator() { return new ListItr(0); } /** * 返回从指定位置开始的列表迭代器 * @param index 开始的位置 * @return 列表迭代器 */ public ListIterator<E> listIterator(int index) { checkPositionIndex(index); return new ListItr(index); } /** * 返回逆序迭代器 * @return 逆序迭代器 */ public Iterator<E> descendingIterator() { return new DescendingIterator(); } /** * 列表迭代器实现 */ private class ListItr implements ListIterator<E> { // 最后返回的节点 private Node<E> lastReturned; // 下一个要返回的节点 private Node<E> next; // 下一个要返回的节点的索引 private int nextIndex; // 期望的修改次数 private int expectedModCount = modCount; ListItr(int index) { // 断言index是否合法 // assert isPositionIndex(index); next = (index == size) ? null : node(index); nextIndex = index; } /** * 判断是否还有下一个元素 * @return 如果还有元素则返回true */ public boolean hasNext() { return nextIndex < size; } /** * 获取下一个元素 * @return 下一个元素 * @throws NoSuchElementException 如果没有更多元素 * @throws ConcurrentModificationException 如果检测到并发修改 */ public E next() { checkForComodification(); if (!hasNext()) { throw new NoSuchElementException(); } lastReturned = next; next = next.next; nextIndex++; return lastReturned.item; } /** * 判断是否还有前一个元素 * @return 如果还有前一个元素则返回true */ public boolean hasPrevious() { return nextIndex > 0; } /** * 获取前一个元素 * @return 前一个元素 * @throws NoSuchElementException 如果没有更多元素 * @throws ConcurrentModificationException 如果检测到并发修改 */ public E previous() { checkForComodification(); if (!hasPrevious()) { throw new NoSuchElementException(); } lastReturned = next = (next == null) ? last : next.prev; nextIndex--; return lastReturned.item; } /** * 获取下一个元素的索引 * @return 下一个元素的索引 */ public int nextIndex() { return nextIndex; } /** * 获取前一个元素的索引 * @return 前一个元素的索引 */ public int previousIndex() { return nextIndex - 1; } /** * 删除当前元素 * @throws IllegalStateException 如果没有下一个元素 * @throws ConcurrentModificationException 如果检测到并发修改 */ public void remove() { checkForComodification(); if (lastReturned == null) { throw new IllegalStateException(); } Node<E> lastNext = lastReturned.next; unlink(lastReturned); if (next == lastReturned) { next = lastNext; } else { nextIndex--; } lastReturned = null; expectedModCount = modCount; } /** * 设置当前元素 * @param e 要设置的元素 * @throws IllegalStateException 如果没有下一个元素 * @throws ConcurrentModificationException 如果检测到并发修改 */ public void set(E e) { if (lastReturned == null) { throw new IllegalStateException(); } checkForComodification(); lastReturned.item = e; } /** * 添加元素 * @param e 要添加的元素 * @throws ConcurrentModificationException 如果检测到并发修改 */ public void add(E e) { checkForComodification(); lastReturned = null; if (next == null) { linkLast(e); } else { linkBefore(e, next); } nextIndex++; expectedModCount = modCount; } /** * 检查并发修改 * @throws ConcurrentModificationException 如果修改次数不匹配 */ final void checkForComodification() { if (modCount != expectedModCount) { throw new ConcurrentModificationException(); } } } /** * 逆序迭代器实现 */ private class DescendingIterator implements Iterator<E> { private final ListItr itr = new ListItr(size()); /** * 判断是否还有下一个元素（逆序） * @return 如果还有元素则返回true */ public boolean hasNext() { return itr.hasPrevious(); } /** * 获取下一个元素（逆序） * @return 下一个元素 */ public E next() { return itr.previous(); } /** * 删除当前元素 */ public void remove() { itr.remove(); } }\"]},\"2499\":{\"h\":\"三、设计思想\"},\"2500\":{\"h\":\"3.1 双向链表设计\",\"t\":[\"LinkedList的核心设计思想是基于双向链表实现，每个节点包含前驱和后继引用，从而实现高效的插入和删除操作：\",\"添加元素到尾部的流程：\"]},\"2501\":{\"h\":\"3.2 索引访问优化\",\"t\":[\"LinkedList针对索引访问进行了优化，通过判断索引位置在前半部分还是后半部分，选择从头节点或尾节点开始遍历，从而将最坏情况下的时间复杂度从O(n)优化为O(n/2)：\"]},\"2502\":{\"h\":\"3.3 双端队列实现\",\"t\":[\"LinkedList实现了Deque接口，通过维护头节点和尾节点的引用，实现了高效的双端操作：\"]},\"2503\":{\"h\":\"3.4 与ArrayList的设计对比\",\"t\":[\"特性\",\"ArrayList\",\"LinkedList\",\"数据结构\",\"动态数组\",\"双向链表\",\"随机访问\",\"O(1)\",\"O(n)\",\"头部插入/删除\",\"O(n)\",\"O(1)\",\"尾部插入/删除\",\"O(1)（ amortized）\",\"O(1)\",\"中间插入/删除\",\"O(n)\",\"O(n)（查找节点耗时）\",\"内存占用\",\"连续内存空间，可能有冗余容量\",\"每个节点额外存储前后指针，内存开销更大\",\"迭代效率\",\"高（缓存友好）\",\"低（节点分散存储）\",\"扩容机制\",\"需要扩容，复制数组\",\"无需扩容\"]},\"2504\":{\"h\":\"四、避坑指南\"},\"2505\":{\"h\":\"4.1 随机访问性能问题\",\"t\":[\"问题：使用get(int index)进行随机访问时性能低下，时间复杂度为O(n) 解决方案：\",\"// 错误示例: 频繁使用get()方法访问元素 LinkedList<Integer> list = new LinkedList<>(); // 添加元素... for (int i = 0; i < list.size(); i++) { Integer value = list.get(i); // 时间复杂度O(n^2) // 处理value... } // 正确方案1: 使用迭代器遍历 Iterator<Integer> iterator = list.iterator(); while (iterator.hasNext()) { Integer value = iterator.next(); // 时间复杂度O(n) // 处理value... } // 正确方案2: 使用增强for循环 for (Integer value : list) { // 处理value... } // 正确方案3: 如果需要随机访问，考虑使用ArrayList List<Integer> list = new ArrayList<>(); // 随机访问O(1)\"]},\"2506\":{\"h\":\"4.2 误用LinkedList作为栈或队列\",\"t\":[\"问题：直接使用LinkedList的add()/remove()方法实现栈或队列，语义不清晰 解决方案：\",\"// 错误示例: 语义不清晰 LinkedList<String> stack = new LinkedList<>(); stack.add(stack.push(\\\"a\\\")); // 混淆add和push String top = stack.get(0); // 不直观 // 正确方案1: 使用Deque接口声明栈 Deque<String> stack = new LinkedList<>(); stack.push(\\\"a\\\"); // 入栈 stack.push(\\\"b\\\"); String top = stack.pop(); // 出栈，获取\\\"b\\\" // 正确方案2: 使用Deque接口声明队列 Deque<String> queue = new LinkedList<>(); queue.offer(\\\"a\\\"); // 入队 queue.offer(\\\"b\\\"); String front = queue.poll(); // 出队，获取\\\"a\\\" // 正确方案3: JDK 6+推荐使用ArrayDeque（性能更优） Deque<String> stack = new ArrayDeque<>(); Deque<String> queue = new ArrayDeque<>();\"]},\"2507\":{\"h\":\"4.3 并发修改异常\",\"t\":[\"问题：在迭代过程中修改集合（如添加/删除元素）会抛出ConcurrentModificationException 解决方案：\",\"// 错误示例 LinkedList<String> list = new LinkedList<>(); list.add(\\\"a\\\"); list.add(\\\"b\\\"); list.add(\\\"c\\\"); for (String item : list) { if (item.equals(\\\"b\\\")) { list.remove(item); // 抛出ConcurrentModificationException } } // 正确方案1: 使用迭代器的remove()方法 Iterator<String> iterator = list.iterator(); while (iterator.hasNext()) { String item = iterator.next(); if (item.equals(\\\"b\\\")) { iterator.remove(); // 安全删除 } } // 正确方案2: 使用ListIterator的add()/remove()方法 ListIterator<String> listIterator = list.listIterator(); while (listIterator.hasNext()) { String item = listIterator.next(); if (item.equals(\\\"b\\\")) { listIterator.remove(); // 安全删除 listIterator.add(\\\"d\\\"); // 安全添加 } } // 正确方案3: 使用CopyOnWriteArrayList（高并发场景） List<String> cowList = new CopyOnWriteArrayList<>(list); for (String item : cowList) { if (item.equals(\\\"b\\\")) { cowList.remove(item); } }\"]},\"2508\":{\"h\":\"4.4 内存泄漏风险\",\"t\":[\"问题：LinkedList可能导致内存泄漏，特别是在迭代过程中保留节点引用时 解决方案：\",\"public class MemoryLeakExample { private LinkedList<Object> list = new LinkedList<>(); private Node<Object> lastNode; // 可能导致内存泄漏 public void processList() { Iterator<Object> iterator = list.iterator(); while (iterator.hasNext()) { Object item = iterator.next(); // 错误示例: 保存节点引用 if (item.equals(\\\"target\\\")) { // 注意：这里只是演示，实际无法直接获取Node对象 // lastNode = (Node<Object>) item; } } } // 正确方案: 不保留节点引用，只保存必要数据 public void correctProcessList() { Object targetData = null; for (Object item : list) { if (item.equals(\\\"target\\\")) { targetData = item; // 只保存数据，不保存节点 break; } } // 使用targetData... } // 正确方案: 清空列表时确保所有引用被释放 public void clearList() { list.clear(); // 内部会将所有节点的引用置为null // 如果有其他引用，也需要置为null // lastNode = null; } }\"]},\"2509\":{\"h\":\"4.5 错误的集合转换\",\"t\":[\"问题：将LinkedList转换为数组时使用toArray()方法，可能导致类型转换异常 解决方案：\",\"LinkedList<String> list = new LinkedList<>(); list.add(\\\"a\\\"); list.add(\\\"b\\\"); // 错误示例 String[] array = (String[]) list.toArray(); // 抛出ClassCastException // 正确方案1: 使用带参数的toArray()方法 String[] array = list.toArray(new String[0]); // 正确方案2: 指定数组大小（更高效） String[] array = list.toArray(new String[list.size()]); // 正确方案3: JDK 8+使用Stream API String[] array = list.stream().toArray(String[]::new);\"]},\"2510\":{\"h\":\"五、深度思考题\"},\"2511\":{\"h\":\"思考题1: LinkedList和ArrayList的性能对比及适用场景\",\"t\":[\"思考题回答: LinkedList和ArrayList作为List接口的两个主要实现类，在性能和适用场景上有显著差异：\",\"性能对比:\",\"随机访问：\",\"ArrayList：O(1)时间复杂度，基于数组的直接索引访问\",\"LinkedList：O(n)时间复杂度，需要从头或尾遍历节点\",\"差距在大数据量时尤为明显，ArrayList优势显著\",\"插入删除操作：\",\"头部操作：LinkedList为O(1)，ArrayList为O(n)\",\"尾部操作：两者均为O(1)（ArrayList在需要扩容时为O(n)）\",\"中间操作：两者均为O(n)，但原因不同： \",\"ArrayList：需要移动元素\",\"LinkedList：需要遍历找到目标节点\",\"小数据量时差异不明显，大数据量时LinkedList在头部操作有优势\",\"内存占用：\",\"ArrayList：连续内存空间，可能有未使用的容量\",\"LinkedList：每个节点需要额外存储前后指针，内存开销更大\",\"数据量越大，LinkedList的内存劣势越明显\",\"迭代性能：\",\"ArrayList：由于内存连续性，缓存命中率高，迭代速度快\",\"LinkedList：节点分散存储，缓存命中率低，迭代速度慢\",\"适用场景:\",\"优先选择ArrayList：\",\"需要频繁随机访问元素\",\"元素数量相对稳定，插入删除操作较少\",\"遍历操作频繁\",\"内存资源有限\",\"优先选择LinkedList：\",\"需要频繁在头部或尾部进行插入删除操作\",\"实现栈或队列数据结构\",\"元素数量不确定，频繁进行插入删除操作\",\"不需要随机访问元素\",\"特殊场景：\",\"实现LRU缓存：LinkedList的removeLast()和addFirst()可高效实现\",\"实现双端队列：LinkedList实现了Deque接口，功能完善\",\"高并发场景：两者均非线程安全，需额外同步或使用CopyOnWriteArrayList\",\"最佳实践： 在大多数业务场景中，ArrayList的综合性能优于LinkedList，除非有明确的频繁头部操作需求，否则建议优先使用ArrayList。\"]},\"2512\":{\"h\":\"思考题2: LinkedList如何实现LRU缓存\",\"t\":[\"思考题回答: LRU（Least Recently Used，最近最少使用）缓存是一种常见的缓存淘汰策略，当缓存满时，会淘汰最近最少使用的元素。LinkedList可以与HashMap结合实现LRU缓存：\",\"实现原理：\",\"使用LinkedList维护元素的访问顺序，最近访问的元素移到头部，最少访问的元素在尾部\",\"使用HashMap提供O(1)时间复杂度的查找\",\"当缓存满时，删除LinkedList尾部元素\",\"代码实现：\",\"import java.util.*; public class LRUCache<K, V> { // 缓存容量 private final int capacity; // 存储键值对，提供O(1)查找 private final Map<K, Node> cacheMap; // 维护访问顺序，头部为最近访问，尾部为最少访问 private final LinkedList<Node> accessOrder; // 节点类，存储键和值 private class Node { K key; V value; Node(K key, V value) { this.key = key; this.value = value; } } // 构造方法，指定缓存容量 public LRUCache(int capacity) { if (capacity <= 0) { throw new IllegalArgumentException(\\\"Capacity must be positive\\\"); } this.capacity = capacity; this.cacheMap = new HashMap<>(capacity); this.accessOrder = new LinkedList<>(); } /** * 获取缓存中的值 * @param key 键 * @return 值，如果不存在返回null */ public V get(K key) { if (!cacheMap.containsKey(key)) { return null; } // 获取节点 Node node = cacheMap.get(key); // 将节点移到头部，表示最近访问 accessOrder.remove(node); accessOrder.addFirst(node); return node.value; } /** * 向缓存中放入键值对 * @param key 键 * @param value 值 */ public void put(K key, V value) { if (cacheMap.containsKey(key)) { // 如果键已存在，更新值并移到头部 Node node = cacheMap.get(key); node.value = value; accessOrder.remove(node); accessOrder.addFirst(node); return; } // 如果缓存已满，删除最少访问的元素（尾部元素） if (cacheMap.size() >= capacity) { Node leastUsed = accessOrder.removeLast(); cacheMap.remove(leastUsed.key); } // 添加新节点到头部 Node newNode = new Node(key, value); accessOrder.addFirst(newNode); cacheMap.put(key, newNode); } /** * 移除缓存中的键值对 * @param key 键 * @return 被移除的值，如果不存在返回null */ public V remove(K key) { if (!cacheMap.containsKey(key)) { return null; } Node node = cacheMap.remove(key); accessOrder.remove(node); return node.value; } /** * 清空缓存 */ public void clear() { cacheMap.clear(); accessOrder.clear(); } /** * 获取缓存大小 * @return 缓存大小 */ public int size() { return cacheMap.size(); } }\",\"性能分析：\",\"get操作：HashMap查找O(1)，LinkedList的remove(node)操作O(n)，整体O(n)\",\"put操作：最坏情况下O(n)（需要删除尾部元素并添加新元素）\",\"空间复杂度：O(capacity)\",\"JDK中的实现： JDK提供了LinkedHashMap类，通过设置accessOrder=true可以直接实现LRU缓存功能，其内部也是通过双向链表维护访问顺序。\",\"优化建议： 上述实现中，LinkedList的remove(node)操作是O(n)时间复杂度，可以通过使用自定义双向链表并维护节点引用，将其优化为O(1)时间复杂度，这也是LinkedHashMap的实现方式。\"]},\"2513\":{\"h\":\"思考题3: LinkedList的线程安全问题及解决方案\",\"t\":[\"思考题回答: LinkedList是非线程安全的集合类，在多线程环境下进行并发修改可能导致数据不一致或ConcurrentModificationException异常。解决LinkedList的线程安全问题有以下几种方案：\",\"1. 使用Collections.synchronizedList()\",\"// 创建线程安全的LinkedList List<String> syncList = Collections.synchronizedList(new LinkedList<>()); // 使用方式 // 读操作 String element = syncList.get(0); // 写操作 syncList.add(\\\"element\\\"); // 迭代操作（需要手动同步） synchronized (syncList) { Iterator<String> iterator = syncList.iterator(); while (iterator.hasNext()) { String element = iterator.next(); // 处理元素 } }\",\"原理：通过包装器模式，为所有方法添加synchronized同步块，保证线程安全。 优点：实现简单，适用于并发度不高的场景。 缺点：\",\"性能较差，每次操作都需要获取锁\",\"迭代操作需要手动同步，否则可能抛出ConcurrentModificationException\",\"可能导致线程竞争和阻塞\",\"2. 使用CopyOnWriteArrayList\",\"// 创建CopyOnWriteArrayList（虽然不是LinkedList，但可作为替代方案） List<String> cowList = new CopyOnWriteArrayList<>(); // 使用方式 cowList.add(\\\"element\\\"); String element = cowList.get(0); // 迭代操作（无需同步） for (String item : cowList) { // 处理元素 }\",\"原理：写时复制机制，修改操作会创建新数组并复制元素，然后替换旧数组引用。 优点：\",\"读操作无锁，性能极高\",\"迭代操作不会抛出ConcurrentModificationException\",\"适合读多写少的高并发场景 缺点：\",\"不是LinkedList实现，而是ArrayList的变体\",\"写操作成本高，需要复制整个数组\",\"内存占用大，可能导致GC压力\",\"数据一致性较弱，读取的可能是旧数据\",\"3. 使用显式锁（ReentrantLock）\",\"import java.util.LinkedList; import java.util.List; import java.util.concurrent.locks.Lock; import java.util.concurrent.locks.ReentrantLock; public class LockedLinkedList<E> { private final List<E> list = new LinkedList<>(); private final Lock lock = new ReentrantLock(); public boolean add(E e) { lock.lock(); try { return list.add(e); } finally { lock.unlock(); } } public E get(int index) { lock.lock(); try { return list.get(index); } finally { lock.unlock(); } } // 实现其他必要方法... }\",\"原理：使用可重入锁实现同步，支持更灵活的锁定策略。 优点：\",\"可灵活控制锁定粒度\",\"支持尝试锁定、超时锁定等高级特性\",\"可中断锁获取 缺点：\",\"实现复杂，需要手动管理锁的获取和释放\",\"仍需注意迭代操作的线程安全\",\"4. 使用ConcurrentLinkedDeque\",\"import java.util.concurrent.ConcurrentLinkedDeque; // 创建并发安全的双端队列 ConcurrentLinkedDeque<String> concurrentDeque = new ConcurrentLinkedDeque<>(); // 使用方式 concurrentDeque.add(\\\"element\\\"); String element = concurrentDeque.getFirst();\",\"原理：基于无锁算法（CAS）实现的并发双端队列。 优点：\",\"真正的并发集合，支持高并发场景\",\"无锁设计，避免线程阻塞\",\"实现了Deque接口，功能与LinkedList类似\",\"迭代器弱一致性，不会抛出ConcurrentModificationException 缺点：\",\"JDK 7+才提供\",\"内存占用较大\",\"某些操作的实现复杂\",\"选择建议：\",\"低并发场景：Collections.synchronizedList()简单易用\",\"读多写少场景：CopyOnWriteArrayList性能最优\",\"高并发场景：ConcurrentLinkedDeque是最佳选择\",\"需要细粒度控制：使用ReentrantLock自定义实现\",\"注意事项：\",\"即使使用了线程安全的包装，复合操作（如\\\"检查-然后-执行\\\"）仍需额外同步\",\"例如：if (!list.contains(element))\",\"这种情况需要使用外部同步机制保证原子性\"]},\"2514\":{\"h\":\"1.3.5 集合-并发集合\"},\"2515\":{\"h\":\"一、核心理论\"},\"2516\":{\"h\":\"1.1 并发集合概述\",\"t\":[\"并发集合是Java集合框架中专门为多线程环境设计的集合类，位于java.util.concurrent包下。它们通过精细的同步机制或无锁算法，在保证线程安全的同时提供了较高的并发性能，解决了传统集合在多线程环境下需要手动同步的问题。\"]},\"2517\":{\"h\":\"1.2 并发集合体系\"},\"2518\":{\"h\":\"1.3 并发集合对比\",\"t\":[\"集合类\",\"底层结构\",\"并发机制\",\"读写性能\",\"迭代特性\",\"适用场景\",\"ConcurrentHashMap\",\"数组+链表+红黑树\",\"分段锁/CAS+synchronized\",\"高\",\"弱一致性\",\"高并发键值对存储\",\"CopyOnWriteArrayList\",\"数组\",\"写时复制\",\"读高写低\",\"弱一致性\",\"读多写少场景\",\"ConcurrentLinkedQueue\",\"链表\",\"CAS\",\"高\",\"弱一致性\",\"高并发FIFO队列\",\"ArrayBlockingQueue\",\"数组\",\"显式锁\",\"中\",\"弱一致性\",\"有界缓冲区\",\"LinkedBlockingQueue\",\"链表\",\"显式锁\",\"中\",\"弱一致性\",\"无界/有界缓冲区\",\"SynchronousQueue\",\"无缓冲\",\"转移机制\",\"高\",\"不支持\",\"线程间直接通信\",\"ConcurrentSkipListMap\",\"跳表\",\"CAS\",\"高\",\"弱一致性\",\"有序并发映射\"]},\"2519\":{\"h\":\"1.4 并发级别\",\"t\":[\"并发集合的并发度设计：\",\"分段锁：将数据分成多个段，每段单独加锁（如ConcurrentHashMap早期版本）\",\"CAS操作：无锁算法，通过比较并交换实现原子操作\",\"写时复制：写操作时复制整个数组，读操作无锁（如CopyOnWriteArrayList）\",\"分离锁：读写操作使用不同的锁（如LinkedBlockingQueue的takeLock和putLock）\"]},\"2520\":{\"h\":\"1.5 JDK版本演进\",\"t\":[\"JDK 1.5：引入ConcurrentHashMap、ConcurrentLinkedQueue等早期并发集合\",\"JDK 1.6：优化ConcurrentHashMap性能，引入TransferQueue\",\"JDK 1.7：ConcurrentHashMap使用分段锁（Segment）实现\",\"JDK 1.8：ConcurrentHashMap彻底重构，使用CAS+synchronized替代分段锁\",\"JDK 9：新增不可变集合工厂方法，如List.of()、Map.of()\",\"JDK 16：ConcurrentHashMap新增stream()相关方法优化\"]},\"2521\":{\"h\":\"二、代码实践\"},\"2522\":{\"h\":\"2.1 ConcurrentHashMap使用示例\",\"t\":[\"import java.util.Map; import java.util.concurrent.ConcurrentHashMap; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import java.util.concurrent.TimeUnit; /** * ConcurrentHashMap并发操作示例 * 展示高并发环境下的安全读写操作 */ public class ConcurrentHashMapExample { private static final int THREAD_COUNT = 10; private static final int OPERATIONS_PER_THREAD = 10000; private static final Map<String, Integer> concurrentMap = new ConcurrentHashMap<>(); public static void main(String[] args) throws InterruptedException { // 初始化计数器 concurrentMap.put(\\\"counter\\\", 0); // 创建线程池 ExecutorService executor = Executors.newFixedThreadPool(THREAD_COUNT); // 提交增量任务 for (int i = 0; i < THREAD_COUNT; i++) { executor.submit(() -> { for (int j = 0; j < OPERATIONS_PER_THREAD; j++) { // 原子操作: increment by 1 concurrentMap.computeIfPresent(\\\"counter\\\", (k, v) -> v + 1); } }); } // 关闭线程池并等待完成 executor.shutdown(); executor.awaitTermination(1, TimeUnit.MINUTES); // 输出结果 System.out.println(\\\"预期结果: \\\" + (THREAD_COUNT * OPERATIONS_PER_THREAD)); System.out.println(\\\"实际结果: \\\" + concurrentMap.get(\\\"counter\\\")); } }\"]},\"2523\":{\"h\":\"2.2 CopyOnWriteArrayList使用示例\",\"t\":[\"import java.util.Iterator; import java.util.List; import java.util.concurrent.CopyOnWriteArrayList; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import java.util.concurrent.TimeUnit; /** * CopyOnWriteArrayList使用示例 * 展示读多写少场景下的并发安全 */ public class CopyOnWriteArrayListExample { private static final List<String> cowList = new CopyOnWriteArrayList<>(); public static void main(String[] args) throws InterruptedException { // 初始化列表 cowList.add(\\\"元素1\\\"); cowList.add(\\\"元素2\\\"); cowList.add(\\\"元素3\\\"); // 创建线程池 ExecutorService executor = Executors.newFixedThreadPool(2); // 读线程 executor.submit(() -> { System.out.println(\\\"读线程开始遍历\\\"); Iterator<String> iterator = cowList.iterator(); while (iterator.hasNext()) { String element = iterator.next(); System.out.println(\\\"读取元素: \\\" + element); try { Thread.sleep(1000); // 模拟读取耗时 } catch (InterruptedException e) { Thread.currentThread().interrupt(); } } }); // 写线程 executor.submit(() -> { try { Thread.sleep(500); // 等待读线程开始遍历 System.out.println(\\\"写线程添加元素\\\"); cowList.add(\\\"元素4\\\"); System.out.println(\\\"写线程修改完成，当前列表大小: \\\" + cowList.size()); } catch (InterruptedException e) { Thread.currentThread().interrupt(); } }); // 关闭线程池 executor.shutdown(); executor.awaitTermination(5, TimeUnit.SECONDS); // 最终列表内容 System.out.println(\\\"最终列表内容: \\\" + cowList); } }\"]},\"2524\":{\"h\":\"2.3 并发队列性能对比\",\"t\":[\"import java.util.Queue; import java.util.concurrent.*; /** * 不同并发队列的性能对比测试 */ public class ConcurrentQueuePerformanceTest { private static final int THREADS = 4; private static final int OPERATIONS = 100000; public static void main(String[] args) { testQueue(\\\"ConcurrentLinkedQueue\\\", new ConcurrentLinkedQueue<>()); testQueue(\\\"ArrayBlockingQueue\\\", new ArrayBlockingQueue<>(1000)); testQueue(\\\"LinkedBlockingQueue\\\", new LinkedBlockingQueue<>()); testQueue(\\\"SynchronousQueue\\\", new SynchronousQueue<>()); } private static void testQueue(String name, Queue<Integer> queue) { ExecutorService executor = Executors.newFixedThreadPool(THREADS); long startTime = System.nanoTime(); // 生产者 Runnable producer = () -> { for (int i = 0; i < OPERATIONS; i++) { try { queue.add(i); } catch (Exception e) { e.printStackTrace(); } } }; // 消费者 Runnable consumer = () -> { for (int i = 0; i < OPERATIONS; i++) { try { queue.poll(); } catch (Exception e) { e.printStackTrace(); } } }; // 提交任务 executor.submit(producer); executor.submit(consumer); executor.submit(producer); executor.submit(consumer); // 等待完成 executor.shutdown(); try { executor.awaitTermination(1, TimeUnit.MINUTES); } catch (InterruptedException e) { Thread.currentThread().interrupt(); } // 计算耗时 long duration = (System.nanoTime() - startTime) / 1_000_000; System.out.printf(\\\"%s: 耗时 %d ms, 最终大小: %d%n\\\", name, duration, queue.size()); } }\"]},\"2525\":{\"h\":\"2.4 并发集合在实际项目中的应用\",\"t\":[\"import java.util.Map; import java.util.Set; import java.util.concurrent.ConcurrentHashMap; import java.util.concurrent.CopyOnWriteArraySet; /** * 并发集合在实际项目中的应用示例 * 实现一个线程安全的用户会话管理器 */ public class ConcurrentSessionManager { // 存储用户会话: 用户ID -> 会话对象 private final Map<String, Session> sessions = new ConcurrentHashMap<>(); // 存储在线用户ID private final Set<String> onlineUsers = new CopyOnWriteArraySet<>(); /** * 创建新会话 */ public Session createSession(String userId) { // 原子操作: 如果不存在则创建 Session session = sessions.computeIfAbsent(userId, k -> new Session(userId)); onlineUsers.add(userId); return session; } /** * 获取会话 */ public Session getSession(String userId) { return sessions.get(userId); } /** * 销毁会话 */ public void destroySession(String userId) { sessions.remove(userId); onlineUsers.remove(userId); } /** * 获取在线用户数 */ public int getOnlineUserCount() { return onlineUsers.size(); } /** * 会话类 */ public static class Session { private final String userId; private final long createTime; private long lastAccessTime; public Session(String userId) { this.userId = userId; this.createTime = System.currentTimeMillis(); this.lastAccessTime = createTime; } // 省略getter和setter } }\"]},\"2526\":{\"h\":\"三、设计思想\"},\"2527\":{\"h\":\"3.1 ConcurrentHashMap实现原理\",\"t\":[\"JDK 8中ConcurrentHashMap的实现：\",\"核心优化点：\",\"取消分段锁：使用CAS+synchronized实现更细粒度的同步\",\"红黑树转换：链表长度超过阈值(8)时转为红黑树\",\"volatile可见性：节点值和next指针使用volatile修饰\",\"懒加载初始化：首次使用时才初始化数组\",\"并发扩容：支持多线程同时参与扩容\"]},\"2528\":{\"h\":\"3.2 写时复制容器原理\",\"t\":[\"CopyOnWriteArrayList的实现机制：\",\"优缺点分析：\",\"优点：读操作无锁，性能高；读多写少场景下效率极高\",\"缺点：写操作复制整个数组，内存开销大；数据一致性弱\"]},\"2529\":{\"h\":\"3.3 非阻塞队列算法\",\"t\":[\"ConcurrentLinkedQueue采用Michael-Scott非阻塞队列算法：\",\"使用CAS操作实现无锁入队和出队\",\"维护头节点和尾节点的volatile引用\",\"允许短暂的不一致状态，但最终会达到一致\",\"失败重试机制保证操作最终成功\"]},\"2530\":{\"h\":\"3.4 并发集合的迭代特性\",\"t\":[\"并发集合的迭代器特性：\",\"弱一致性：迭代器可以看到迭代开始时的元素，可能看不到后续修改\",\"快速失败：传统集合的迭代器在检测到并发修改时抛出ConcurrentModificationException\",\"安全失败：并发集合的迭代器从不抛出ConcurrentModificationException\"]},\"2531\":{\"h\":\"四、避坑指南\"},\"2532\":{\"h\":\"4.1 ConcurrentHashMap常见问题\"},\"2533\":{\"h\":\"4.1.1 size()方法的陷阱\",\"t\":[\"问题：ConcurrentHashMap的size()方法返回的不是精确值 解决方案：\",\"ConcurrentHashMap<String, Integer> map = new ConcurrentHashMap<>(); // 添加元素... // 错误: 期望精确计数 int size = map.size(); // 可能不是最新值 // 正确: 需要精确计数时使用 long accurateSize = map.mappingCount(); // JDK 8+提供，返回long类型 // 更好的方式: 避免依赖精确计数 // 设计不需要精确知道集合大小的算法\"]},\"2534\":{\"h\":\"4.1.2 原子操作的重要性\",\"t\":[\"问题：错误地组合多个操作，导致竞态条件 解决方案：\",\"ConcurrentHashMap<String, Integer> map = new ConcurrentHashMap<>(); // 错误: 非原子操作组合 if (map.containsKey(\\\"key\\\")) { map.put(\\\"key\\\", map.get(\\\"key\\\") + 1); // 存在竞态条件 } // 正确: 使用原子方法 map.computeIfPresent(\\\"key\\\", (k, v) -> v + 1); // 或者 map.putIfAbsent(\\\"key\\\", 0); map.compute(\\\"key\\\", (k, v) -> v + 1); // 对于简单计数 map.merge(\\\"key\\\", 1, Integer::sum);\"]},\"2535\":{\"h\":\"4.2 CopyOnWriteArrayList使用误区\"},\"2536\":{\"h\":\"4.2.1 内存占用问题\",\"t\":[\"问题：在大数据量和频繁修改场景下使用CopyOnWriteArrayList 解决方案：\",\"// 错误: 大数据量频繁修改场景 List<LargeObject> list = new CopyOnWriteArrayList<>(); for (int i = 0; i < 100000; i++) { list.add(new LargeObject()); // 每次添加都会复制整个数组 } // 正确: 根据场景选择合适的集合 if (readHeavy && writeRare) { // 读多写少场景使用CopyOnWriteArrayList List<LargeObject> list = new CopyOnWriteArrayList<>(); } else if (concurrentModification) { // 一般并发场景使用ConcurrentLinkedQueue或其他 Queue<LargeObject> queue = new ConcurrentLinkedQueue<>(); } else { // 单线程或低并发场景使用普通ArrayList List<LargeObject> list = new ArrayList<>(); // 手动同步 Collections.synchronizedList(list); }\"]},\"2537\":{\"h\":\"4.2.2 迭代器数据一致性\",\"t\":[\"问题：期望迭代器反映最新数据 解决方案：\",\"CopyOnWriteArrayList<String> list = new CopyOnWriteArrayList<>(); list.add(\\\"a\\\"); list.add(\\\"b\\\"); Iterator<String> iterator = list.iterator(); list.add(\\\"c\\\"); // 迭代器不会看到添加的\\\"c\\\"元素 while (iterator.hasNext()) { System.out.println(iterator.next()); // 只输出a和b } // 如果需要最新数据，应重新获取迭代器 iterator = list.iterator(); while (iterator.hasNext()) { System.out.println(iterator.next()); // 输出a、b和c }\"]},\"2538\":{\"h\":\"4.3 阻塞队列使用不当\"},\"2539\":{\"h\":\"4.3.1 队列容量设置不合理\",\"t\":[\"问题：ArrayBlockingQueue容量设置过小导致频繁阻塞 解决方案：\",\"// 错误: 容量设置过小 BlockingQueue<String> queue = new ArrayBlockingQueue<>(10); // 正确: 根据实际吞吐量设置合理容量 int expectedThroughput = 1000; BlockingQueue<String> queue = new ArrayBlockingQueue<>(expectedThroughput / 2); // 或者使用可动态调整的容量策略 BlockingQueue<String> queue = new LinkedBlockingQueue<>(); // 无界队列 // 或者使用饱和策略 RejectedExecutionHandler handler = new ThreadPoolExecutor.CallerRunsPolicy(); ThreadPoolExecutor executor = new ThreadPoolExecutor( corePoolSize, maxPoolSize, keepAliveTime, unit, queue, handler);\"]},\"2540\":{\"h\":\"五、深度思考题\"},\"2541\":{\"h\":\"思考题1: ConcurrentHashMap在JDK 7和JDK 8中的实现差异\",\"t\":[\"思考题回答: ConcurrentHashMap在JDK 7和JDK 8中的实现有显著差异：\",\"锁机制：\",\"JDK 7: 使用分段锁(Segment)，将整个数组分成多个Segment，每个Segment是一个小的HashMap，拥有独立的锁\",\"JDK 8: 取消分段锁，使用CAS+synchronized实现同步，只锁定链表头节点或红黑树的根节点\",\"数据结构：\",\"JDK 7: Segment数组 + HashEntry数组 + 链表\",\"JDK 8: Node数组 + 链表/红黑树，与HashMap结构类似\",\"并发度：\",\"JDK 7: 并发度由Segment数量决定，默认16，且不可动态调整\",\"JDK 8: 理论上并发度为数组长度，可动态扩容，并发性能更高\",\"扩容机制：\",\"JDK 7: 每个Segment独立扩容，扩容粒度大\",\"JDK 8: 支持多线程并发扩容，每个线程负责一部分桶的迁移\",\"功能增强：\",\"JDK 8新增了compute(), forEach(), merge()等原子操作方法\",\"支持Stream API和Lambda表达式\",\"这些改进使JDK 8的ConcurrentHashMap在高并发场景下具有更好的性能和可扩展性。\"]},\"2542\":{\"h\":\"思考题2: 如何选择合适的并发集合\",\"t\":[\"思考题回答: 选择并发集合应考虑以下因素：\",\"数据结构需求：\",\"键值对存储：ConcurrentHashMap、ConcurrentSkipListMap\",\"列表存储：CopyOnWriteArrayList、ConcurrentLinkedQueue\",\"队列操作：根据是否阻塞、是否有界、是否需要优先级选择\",\"操作类型比例：\",\"读多写少：CopyOnWriteArrayList、CopyOnWriteArraySet\",\"读写均衡：ConcurrentHashMap、ConcurrentLinkedQueue\",\"写操作频繁：考虑ConcurrentHashMap或阻塞队列\",\"线程安全需求：\",\"强一致性：阻塞队列如ArrayBlockingQueue\",\"弱一致性：ConcurrentHashMap、ConcurrentLinkedQueue\",\"原子操作支持：优先选择提供原子方法的集合\",\"性能要求：\",\"高并发读：CopyOnWriteArrayList性能最佳\",\"高并发写：ConcurrentHashMap (JDK8+)性能优异\",\"有序性需求：ConcurrentSkipListMap/Set提供排序功能\",\"内存占用：\",\"大数据量：避免使用CopyOnWrite容器\",\"小数据量：CopyOnWrite容器的性能优势更明显\",\"选择流程建议：先确定数据结构类型，再根据读写比例和一致性需求选择具体实现，最后进行性能测试验证。\"]},\"2543\":{\"h\":\"思考题3: 并发集合的弱一致性实现原理\",\"t\":[\"思考题回答: 并发集合的弱一致性(weakly consistent)是指：\",\"定义：迭代器可以看到迭代开始时集合的状态，可能看不到迭代过程中的修改，但不会抛出ConcurrentModificationException\",\"实现原理：\",\"ConcurrentHashMap：迭代器遍历的是数组的快照，对于已遍历的节点，即使发生修改也不会影响迭代结果\",\"ConcurrentLinkedQueue：迭代器保存了初始节点引用，后续修改不会影响已创建的迭代器\",\"CopyOnWriteArrayList：迭代器基于创建时的数组快照，后续修改操作会创建新数组，不影响旧迭代器\",\"实现机制：\",\"使用volatile变量保证节点引用的可见性\",\"不使用快速失败机制(fail-fast)，避免抛出ConcurrentModificationException\",\"迭代过程中不加锁，允许并发修改\",\"通过内存屏障或原子操作保证部分操作的有序性\",\"优缺点：\",\"优点：迭代过程中不需要加锁，性能高；不会抛出异常中断迭代\",\"缺点：可能读取到过期数据；无法保证数据的实时一致性\",\"弱一致性是并发性能和数据一致性之间的权衡，适用于可以接受短暂数据不一致的高并发场景。\"]},\"2544\":{\"h\":\"思考题4: 如何实现一个自定义的并发安全集合\",\"t\":[\"思考题回答: 实现自定义并发安全集合可采用以下方案：\",\"基于现有并发集合封装：\",\"public class CustomConcurrentSet<T> { private final ConcurrentHashMap<T, Boolean> backingMap; public CustomConcurrentSet() { this.backingMap = new ConcurrentHashMap<>(); } public boolean add(T element) { return backingMap.putIfAbsent(element, Boolean.TRUE) == null; } public boolean remove(T element) { return backingMap.remove(element) != null; } public boolean contains(T element) { return backingMap.containsKey(element); } // 其他方法... }\",\"基于锁机制实现：\",\"import java.util.*; import java.util.concurrent.locks.ReentrantLock; public class LockBasedConcurrentList<T> { private final List<T> list = new ArrayList<>(); private final ReentrantLock lock = new ReentrantLock(); public void add(T element) { lock.lock(); try { list.add(element); } finally { lock.unlock(); } } public T get(int index) { lock.lock(); try { return list.get(index); } finally { lock.unlock(); } } // 其他方法... }\",\"基于CAS操作实现：\",\"import java.util.concurrent.atomic.AtomicReference; public class CASBasedStack<T> { private static class Node<T> { T value; Node<T> next; Node(T value, Node<T> next) { this.value = value; this.next = next; } } private final AtomicReference<Node<T>> top = new AtomicReference<>(); public void push(T value) { Node<T> newNode; Node<T> currentTop; do { currentTop = top.get(); newNode = new Node<>(value, currentTop); } while (!top.compareAndSet(currentTop, newNode)); } public T pop() { Node<T> currentTop; Node<T> newTop; do { currentTop = top.get(); if (currentTop == null) { return null; } newTop = currentTop.next; } while (!top.compareAndSet(currentTop, newTop)); return currentTop.value; } }\",\"实现要点：\",\"选择合适的基础数据结构\",\"根据并发需求选择同步机制（锁、CAS或两者结合）\",\"实现原子操作避免竞态条件\",\"考虑迭代器的一致性保证\",\"提供适当的性能优化（如锁粒度控制、无锁设计）\",\"进行充分的并发测试验证线程安全性\"]},\"2545\":{\"h\":\"1.3.6 集合-Stack&Queue源码\"},\"2546\":{\"h\":\"一、核理论\"},\"2547\":{\"h\":\"1.1 Stack与Queue类结构分析\",\"t\":[\"Stack是基于Vector实现的后进先出(LIFO)数据结构，而Queue接口则提供了先进先出(FIFO)的规范，主要实现类包括ArrayDeque、LinkedList等。\"]},\"2548\":{\"h\":\"1.2 核心成员变量\",\"t\":[\"Stack: 继承Vector，底层使用数组存储元素\",\"ArrayDeque: 使用循环数组实现，维护head和tail指针\",\"LinkedList: 基于双向链表实现，维护first和last指针\"]},\"2549\":{\"h\":\"1.3 JDK版本特性差异\",\"t\":[\"JDK 1.0: 引入Stack类\",\"JDK 1.5: 引入Queue接口及LinkedList实现\",\"JDK 1.6: 引入ArrayDeque，提供更高效的双端队列实现\",\"JDK 21: 未对Stack和Queue接口做重大修改，但ArrayDeque性能持续优化\"]},\"2550\":{\"h\":\"二、代码实践\"},\"2551\":{\"h\":\"2.1 Stack核心方法实现\",\"t\":[\"/** * 栈的入栈操作 * @param item 要入栈的元素 * @return 入栈的元素 */ public E push(E item) { addElement(item); return item; } /** * 栈的出栈操作 * @return 出栈的元素 * @throws EmptyStackException 如果栈为空 */ public synchronized E pop() { E obj; int len = size(); obj = peek(); removeElementAt(len - 1); return obj; }\"]},\"2552\":{\"h\":\"2.2 ArrayDeque核心方法实现\",\"t\":[\"/** * 双端队列的尾部添加元素 * @param e 要添加的元素 * @return true (始终返回true) * @throws NullPointerException 如果指定元素为null */ public boolean add(E e) { addLast(e); return true; } /** * 双端队列的头部移除并返回元素 * @return 头部元素，如果队列为空则返回null */ public E poll() { return pollFirst(); }\"]},\"2553\":{\"h\":\"2.3 实际应用示例\"},\"2554\":{\"h\":\"2.3.1 使用Stack实现括号匹配\",\"t\":[\"/** * 检查括号是否匹配 * @param s 输入字符串 * @return 如果括号匹配则返回true，否则返回false */ public boolean isValid(String s) { Stack<Character> stack = new Stack<>(); for (char c : s.toCharArray()) { if (c == '(' || c == '{' || c == '[') { stack.push(c); } else { if (stack.isEmpty()) return false; char top = stack.pop(); if ((c == ')' && top != '(') || (c == '}' && top != '{') || (c == ']' && top != '[')) { return false; } } } return stack.isEmpty(); }\"]},\"2555\":{\"h\":\"2.3.2 使用Queue实现生产者-消费者模型\",\"t\":[\"/** * 生产者-消费者模型示例 */ public class ProducerConsumer { private final Queue<Integer> queue = new LinkedList<>(); private final int CAPACITY = 5; private int count = 0; /** * 生产者线程 */ public void produce() throws InterruptedException { while (true) { synchronized (this) { while (queue.size() == CAPACITY) { wait(); } System.out.println(\\\"生产者生产: \\\" + count); queue.add(count++); notifyAll(); Thread.sleep(1000); } } } /** * 消费者线程 */ public void consume() throws InterruptedException { while (true) { synchronized (this) { while (queue.isEmpty()) { wait(); } int val = queue.poll(); System.out.println(\\\"消费者消费: \\\" + val); notifyAll(); Thread.sleep(1000); } } } }\"]},\"2556\":{\"h\":\"三、设计思想\"},\"2557\":{\"h\":\"3.1 Stack的设计缺陷\",\"t\":[\"Stack继承自Vector，导致其所有方法都是同步的，性能较差。同时，继承Vector暴露了过多的公共方法，破坏了栈的封装性。\"]},\"2558\":{\"h\":\"3.2 ArrayDeque的高效设计\",\"t\":[\"ArrayDeque使用循环数组实现，避免了LinkedList的节点创建开销，同时通过head和tail指针实现高效的双端操作。\"]},\"2559\":{\"h\":\"3.3 接口与实现分离原则\",\"t\":[\"Queue接口定义了队列的规范，而具体实现由LinkedList、ArrayDeque等类提供，体现了面向接口编程的思想。\"]},\"2560\":{\"h\":\"四、避坑指南\"},\"2561\":{\"h\":\"4.1 Stack的线程安全问题\",\"t\":[\"虽然Stack是线程安全的，但性能较差，在单线程环境下建议使用ArrayDeque替代。\"]},\"2562\":{\"h\":\"4.2 Queue的add()与offer()区别\",\"t\":[\"add(): 当队列满时抛出IllegalStateException\",\"offer(): 当队列满时返回false 建议使用offer()方法并检查返回值，避免异常抛出。\"]},\"2563\":{\"h\":\"4.3 ArrayDeque的null元素问题\",\"t\":[\"ArrayDeque不允许添加null元素，否则会抛出NullPointerException，而LinkedList允许添加null元素。\"]},\"2564\":{\"h\":\"五、深度思考题\",\"t\":[\"为什么Java官方推荐使用Deque接口及其实现类替代Stack类？\",\"ArrayDeque和LinkedList作为Queue和Deque的实现，各自的性能特点是什么？\",\"如何实现一个线程安全的非阻塞队列？\",\"JDK中的PriorityQueue是如何实现的？它与普通Queue有何区别？\",\"思考题回答:\",\"Java官方推荐使用Deque接口替代Stack类的主要原因是:\",\"Stack继承自Vector，所有方法都是同步的，性能较差\",\"Stack暴露了过多的公共方法，破坏了栈的封装性\",\"Deque接口提供了更完整的双端队列操作，同时ArrayDeque实现性能更优\",\"ArrayDeque和LinkedList的性能特点对比:\",\"ArrayDeque基于数组实现，随机访问性能更好，添加删除元素时可能需要扩容\",\"LinkedList基于链表实现，添加删除元素不需要移动其他元素，但随机访问性能较差\",\"对于队列操作，ArrayDeque通常比LinkedList性能更好，因为它避免了节点创建和回收的开销\"]},\"2565\":{\"h\":\"1.3.7 集合-PriorityQueue 源码\"},\"2566\":{\"h\":\"一、核理论\"},\"2567\":{\"h\":\"1.1 PriorityQueue类结构分析\",\"t\":[\"PriorityQueue是基于优先级堆实现的无界队列，它根据元素的自然顺序或构造时提供的Comparator进行排序。不同于普通队列的FIFO原则，PriorityQueue中的元素按照指定的优先级顺序出队。\"]},\"2568\":{\"h\":\"1.2 核心成员变量\",\"t\":[\"queue[]: 存储元素的数组，实现二叉堆结构\",\"size: 当前元素数量\",\"comparator: 比较器，用于元素排序，null表示自然排序\",\"modCount: 用于快速失败机制的修改计数器\"]},\"2569\":{\"h\":\"1.3 JDK版本特性差异\",\"t\":[\"JDK 1.5: 引入PriorityQueue\",\"JDK 1.8: 优化siftUp和siftDown方法，使用Comparator时性能提升\",\"JDK 9: 引入of()静态工厂方法创建不可变PriorityQueue\",\"JDK 15: 优化堆结构调整算法，减少比较次数\",\"JDK 21: 未引入重大变更，但持续优化性能\"]},\"2570\":{\"h\":\"二、代码实践\"},\"2571\":{\"h\":\"2.1 构造方法实现\",\"t\":[\"/** * 使用指定初始容量和比较器创建优先级队列 * @param initialCapacity 初始容量 * @param comparator 比较器，null表示自然排序 * @throws IllegalArgumentException 如果初始容量小于1 */ public PriorityQueue(int initialCapacity, Comparator<? super E> comparator) { if (initialCapacity < 1) throw new IllegalArgumentException(); this.queue = new Object[initialCapacity]; this.comparator = comparator; }\"]},\"2572\":{\"h\":\"2.2 核心方法实现\"},\"2573\":{\"h\":\"2.2.1 入队操作(offer)\",\"t\":[\"/** * 将指定元素插入优先级队列 * @param e 要插入的元素 * @return true (始终返回true) * @throws NullPointerException 如果指定元素为null */ public boolean offer(E e) { if (e == null) throw new NullPointerException(); modCount++; int i = size; if (i >= queue.length) grow(i + 1); // 扩容 size = i + 1; if (i == 0) queue[0] = e; else siftUp(i, e); // 向上调整堆 return true; }\"]},\"2574\":{\"h\":\"2.2.2 出队操作(poll)\",\"t\":[\"/** * 获取并移除队列头部元素 * @return 队列头部元素，如果队列为空则返回null */ public E poll() { if (size == 0) return null; int s = --size; modCount++; E result = (E) queue[0]; E x = (E) queue[s]; queue[s] = null; if (s != 0) siftDown(0, x); // 向下调整堆 return result; }\"]},\"2575\":{\"h\":\"2.2.3 堆调整核心算法\",\"t\":[\"/** * 向上调整堆结构 * @param k 插入位置 * @param x 插入元素 */ private void siftUp(int k, E x) { if (comparator != null) siftUpUsingComparator(k, x); else siftUpComparable(k, x); } /** * 使用比较器向上调整 */ private void siftUpUsingComparator(int k, E x) { while (k > 0) { int parent = (k - 1) >>> 1; // 父节点索引 Object e = queue[parent]; if (comparator.compare(x, (E) e) >= 0) break; queue[k] = e; k = parent; } queue[k] = x; } /** * 向下调整堆结构 * @param k 起始位置 * @param x 调整元素 */ private void siftDown(int k, E x) { if (comparator != null) siftDownUsingComparator(k, x); else siftDownComparable(k, x); }\"]},\"2576\":{\"h\":\"2.3 实际应用示例\"},\"2577\":{\"h\":\"2.3.1 自定义对象排序\",\"t\":[\"/** * 学生类，实现Comparable接口 */ class Student implements Comparable<Student> { private String name; private int score; public Student(String name, int score) { this.name = name; this.score = score; } // 按分数升序排序 @Override public int compareTo(Student o) { return Integer.compare(this.score, o.score); } @Override public String toString() { return name + \\\":\\\" + score; } } // 使用示例 public class PriorityQueueExample { public static void main(String[] args) { PriorityQueue<Student> pq = new PriorityQueue<>(); pq.offer(new Student(\\\"Alice\\\", 85)); pq.offer(new Student(\\\"Bob\\\", 92)); pq.offer(new Student(\\\"Charlie\\\", 78)); // 输出结果: Charlie:78, Alice:85, Bob:92 while (!pq.isEmpty()) { System.out.print(pq.poll() + \\\" \\\"); } } }\"]},\"2578\":{\"h\":\"2.3.2 使用Comparator实现降序排序\",\"t\":[\"// 创建降序优先级队列 PriorityQueue<Integer> maxHeap = new PriorityQueue<>((a, b) -> Integer.compare(b, a)); maxHeap.offer(3); maxHeap.offer(1); maxHeap.offer(2); // 输出结果: 3, 2, 1 while (!maxHeap.isEmpty()) { System.out.print(maxHeap.poll() + \\\" \\\"); }\"]},\"2579\":{\"h\":\"三、设计思想\"},\"2580\":{\"h\":\"3.1 二叉堆数据结构\",\"t\":[\"PriorityQueue底层使用二叉小顶堆实现，堆中每个节点的值小于等于其子节点的值。堆使用数组存储，对于索引为i的节点：\",\"左孩子索引：2*i + 1\",\"右孩子索引：2*i + 2\",\"父节点索引：(i-1) >>> 1 (等价于(i-1)/2)\"]},\"2581\":{\"h\":\"3.2 动态扩容机制\",\"t\":[\"当元素数量达到容量时，PriorityQueue会自动扩容：\",\"当容量小于64时，每次扩容为原来的2倍+2\",\"当容量大于等于64时，每次扩容为原来的1.5倍\"]},\"2582\":{\"h\":\"3.3 优先级排序策略\",\"t\":[\"自然排序：元素必须实现Comparable接口\",\"定制排序：通过Comparator实现，优先级更高\"]},\"2583\":{\"h\":\"四、避坑指南\"},\"2584\":{\"h\":\"4.1 空元素异常\",\"t\":[\"PriorityQueue不允许添加null元素，否则会抛出NullPointerException。\"]},\"2585\":{\"h\":\"4.2 无序遍历\",\"t\":[\"PriorityQueue的迭代器不保证按优先级顺序遍历元素，若需有序遍历，需先转成数组排序或不断调用poll()方法。\",\"// 错误方式：遍历顺序不保证有序 for (Integer num : pq) { System.out.print(num + \\\" \\\"); } // 正确方式：使用poll()方法 while (!pq.isEmpty()) { System.out.print(pq.poll() + \\\" \\\"); }\"]},\"2586\":{\"h\":\"4.3 线程不安全\",\"t\":[\"PriorityQueue是非线程安全的，多线程环境下需使用Collections.synchronizedQueue()包装或使用ConcurrentSkipListSet。\",\"// 线程安全包装 Queue<Integer> safePq = Collections.synchronizedQueue(new PriorityQueue<>());\"]},\"2587\":{\"h\":\"4.4 初始容量选择\",\"t\":[\"合理设置初始容量可以减少扩容次数，提高性能。如果大致知道元素数量，建议在构造时指定合适的初始容量。\"]},\"2588\":{\"h\":\"五、深度思考题\",\"t\":[\"PriorityQueue的时间复杂度分析：add、poll、peek操作的时间复杂度分别是多少？\",\"如何实现一个支持动态修改优先级的优先级队列？\",\"PriorityQueue和TreeSet有什么异同？各自适用场景是什么？\",\"JDK中的PriorityQueue为什么选择小顶堆而不是大顶堆实现？\",\"如何实现一个延迟队列（DelayQueue）？它与PriorityQueue有什么关系？\",\"思考题回答:\",\"PriorityQueue操作时间复杂度分析:\",\"add/offer: O(log n)，需要向上调整堆\",\"poll: O(log n)，需要向下调整堆\",\"peek: O(1)，直接返回堆顶元素\",\"contains: O(n)，需要遍历整个数组\",\"remove: O(n)，需要遍历找到元素后删除并调整堆\",\"实现动态修改优先级的优先级队列可以通过以下方式:\",\"使用哈希表记录元素在堆中的索引\",\"当元素优先级改变时，同时更新哈希表和堆，并调用siftUp和siftDown调整堆结构\",\"注意处理并发修改和快速失败机制\"]},\"2589\":{\"h\":\"1.3.8 集合-HashSet&HashMap 源码\"},\"2590\":{\"h\":\"一、核心理论\"},\"2591\":{\"h\":\"1.1 HashMap与HashSet类结构分析\",\"t\":[\"HashMap是基于哈希表实现的键值对存储结构，而HashSet则是基于HashMap实现的集合，用于存储不重复元素。两者都允许null值，但不保证元素顺序，且都是非线程安全的。\"]},\"2592\":{\"h\":\"1.2 核心成员变量\"},\"2593\":{\"h\":\"HashMap核心变量\",\"t\":[\"table[]: 存储键值对的哈希表数组，每个元素是链表或红黑树的头节点\",\"size: 键值对数量\",\"threshold: 扩容阈值，等于容量×负载因子\",\"loadFactor: 负载因子，默认为0.75f\",\"modCount: 结构修改计数器，用于快速失败机制\"]},\"2594\":{\"h\":\"HashSet核心变量\",\"t\":[\"map: 内部使用的HashMap实例\",\"PRESENT: 静态常量，作为HashMap中的value占位符\"]},\"2595\":{\"h\":\"1.3 JDK版本特性差异\"},\"2596\":{\"h\":\"HashMap版本演进\",\"t\":[\"JDK 1.2: 引入HashMap，基于数组+链表实现\",\"JDK 1.4: 引入LinkedHashMap\",\"JDK 1.7: 优化哈希算法，引入\\\"扰动函数\\\"增强哈希分布\",\"JDK 1.8: 重大优化，引入红黑树结构，当链表长度超过8时转为红黑树\",\"JDK 1.8: 优化resize过程，避免多线程下的死循环问题\",\"JDK 1.9: 引入of()静态工厂方法创建不可变Map\",\"JDK 16: 引入record类作为键时的优化\",\"JDK 21: 未引入重大变更，但持续优化哈希冲突处理\"]},\"2597\":{\"h\":\"二、代码实践\"},\"2598\":{\"h\":\"2.1 HashMap核心方法实现\"},\"2599\":{\"h\":\"2.1.1 哈希计算与索引定位\",\"t\":[\"/** * 计算键的哈希值 * @param key 键对象 * @return 计算后的哈希值 */ static final int hash(Object key) { int h; // 扰动函数：将高16位与低16位异或，减少哈希冲突 return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16); } /** * 根据哈希值和数组长度计算索引 * @param hash 哈希值 * @param length 数组长度 * @return 数组索引 */ static int indexFor(int hash, int length) { return hash & (length - 1); // 等价于hash % length，但效率更高 }\"]},\"2600\":{\"h\":\"2.1.2 put方法实现\",\"t\":[\"/** * 将键值对放入映射 * @param key 键 * @param value 值 * @return 之前与key关联的值，或null */ public V put(K key, V value) { return putVal(hash(key), key, value, false, true); } /** * put操作的核心实现 */ final V putVal(int hash, K key, V value, boolean onlyIfAbsent, boolean evict) { Node<K,V>[] tab; Node<K,V> p; int n, i; // 初始化哈希表 if ((tab = table) == null || (n = tab.length) == 0) n = (tab = resize()).length; // 计算索引并检查是否为空 if ((p = tab[i = (n - 1) & hash]) == null) tab[i] = newNode(hash, key, value, null); else { Node<K,V> e; K k; // 键已存在，直接替换值 if (p.hash == hash && ((k = p.key) == key || (key != null && key.equals(k)))) e = p; // 红黑树节点 else if (p instanceof TreeNode) e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value); // 链表节点 else { for (int binCount = 0; ; ++binCount) { if ((e = p.next) == null) { p.next = newNode(hash, key, value, null); // 链表长度超过8，转为红黑树 if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st treeifyBin(tab, hash); break; } // 找到相同的键，退出循环 if (e.hash == hash && ((k = e.key) == key || (key != null && key.equals(k)))) break; p = e; } } // 替换旧值 if (e != null) { // existing mapping for key V oldValue = e.value; if (!onlyIfAbsent || oldValue == null) e.value = value; afterNodeAccess(e); return oldValue; } } ++modCount; // 检查是否需要扩容 if (++size > threshold) resize(); afterNodeInsertion(evict); return null; }\"]},\"2601\":{\"h\":\"2.1.3 扩容机制(resize)\",\"t\":[\"/** * 调整哈希表大小 * @return 新的哈希表数组 */ final Node<K,V>[] resize() { Node<K,V>[] oldTab = table; int oldCap = (oldTab == null) ? 0 : oldTab.length; int oldThr = threshold; int newCap, newThr = 0; if (oldCap > 0) { // 超过最大容量，不再扩容 if (oldCap >= MAXIMUM_CAPACITY) { threshold = Integer.MAX_VALUE; return oldTab; } // 容量翻倍 else if ((newCap = oldCap << 1) < MAXIMUM_CAPACITY && oldCap >= DEFAULT_INITIAL_CAPACITY) newThr = oldThr << 1; // threshold也翻倍 } else if (oldThr > 0) // 初始容量在构造函数中设置 newCap = oldThr; else { // 使用默认值 newCap = DEFAULT_INITIAL_CAPACITY; // 16 newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY); // 12 } // 计算新的扩容阈值 if (newThr == 0) { float ft = (float)newCap * loadFactor; newThr = (newCap < MAXIMUM_CAPACITY && ft < (float)MAXIMUM_CAPACITY ? (int)ft : Integer.MAX_VALUE); } threshold = newThr; @SuppressWarnings({\\\"rawtypes\\\",\\\"unchecked\\\"}) Node<K,V>[] newTab = (Node<K,V>[])new Node[newCap]; table = newTab; if (oldTab != null) { // 将旧表中的节点转移到新表 for (int j = 0; j < oldCap; ++j) { Node<K,V> e; if ((e = oldTab[j]) != null) { oldTab[j] = null; if (e.next == null) newTab[e.hash & (newCap - 1)] = e; else if (e instanceof TreeNode) ((TreeNode<K,V>)e).split(this, newTab, j, oldCap); else { // 保持链表顺序 Node<K,V> loHead = null, loTail = null; Node<K,V> hiHead = null, hiTail = null; Node<K,V> next; do { next = e.next; // 原索引 if ((e.hash & oldCap) == 0) { if (loTail == null) loHead = e; else loTail.next = e; loTail = e; } // 原索引 + oldCap else { if (hiTail == null) hiHead = e; else hiTail.next = e; hiTail = e; } } while ((e = next) != null); // 放到新数组的原索引位置 if (loTail != null) { loTail.next = null; newTab[j] = loHead; } // 放到新数组的原索引+oldCap位置 if (hiTail != null) { hiTail.next = null; newTab[j + oldCap] = hiHead; } } } } } return newTab; }\"]},\"2602\":{\"h\":\"2.2 HashSet核心方法实现\",\"t\":[\"/** * 向集合中添加元素 * @param e 要添加的元素 * @return 如果元素不存在且添加成功则返回true */ public boolean add(E e) { return map.put(e, PRESENT) == null; } /** * 从集合中移除元素 * @param o 要移除的元素 * @return 如果元素存在且移除成功则返回true */ public boolean remove(Object o) { return map.remove(o) == PRESENT; } /** * 检查集合是否包含指定元素 * @param o 要检查的元素 * @return 如果包含则返回true */ public boolean contains(Object o) { return map.containsKey(o); }\"]},\"2603\":{\"h\":\"2.3 实际应用示例\"},\"2604\":{\"h\":\"2.3.1 HashMap性能优化示例\",\"t\":[\"/** * 创建高效的HashMap * 初始容量设置为预期元素数量 / 负载因子 + 1 * 避免频繁扩容 */ public class OptimizedHashMapExample { public static void main(String[] args) { // 预期存储1000个元素 int expectedSize = 1000; // 计算初始容量: expectedSize / loadFactor + 1 int initialCapacity = (int) (expectedSize / 0.75f) + 1; // 创建优化初始容量的HashMap Map<String, Integer> optimizedMap = new HashMap<>(initialCapacity); // 添加元素 for (int i = 0; i < expectedSize; i++) { optimizedMap.put(\\\"key\\\" + i, i); } } }\"]},\"2605\":{\"h\":\"2.3.2 自定义对象作为HashMap键\",\"t\":[\"/** * 自定义对象作为HashMap键的正确实现 * 必须重写hashCode()和equals()方法 */ class Person { private String name; private int age; public Person(String name, int age) { this.name = name; this.age = age; } // 重写equals方法 @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; Person person = (Person) o; return age == person.age && Objects.equals(name, person.name); } // 重写hashCode方法 @Override public int hashCode() { return Objects.hash(name, age); } } // 使用示例 Map<Person, String> personMap = new HashMap<>(); personMap.put(new Person(\\\"Alice\\\", 30), \\\"Engineer\\\"); // 正确获取值，因为重写了hashCode和equals String occupation = personMap.get(new Person(\\\"Alice\\\", 30));\"]},\"2606\":{\"h\":\"三、设计思想\"},\"2607\":{\"h\":\"3.1 哈希表数据结构\",\"t\":[\"HashMap采用数组+链表+红黑树的复合数据结构：\",\"数组（哈希表）：存储链表或红黑树的头节点，通过哈希值快速定位\",\"链表：解决哈希冲突，当冲突较少时使用\",\"红黑树：当链表长度超过阈值（默认8）时转换，提高查询效率\"]},\"2608\":{\"h\":\"3.2 哈希冲突解决策略\",\"t\":[\"HashMap使用链地址法解决哈希冲突：\",\"当两个不同的键计算出相同的索引时，将新节点添加到链表末尾\",\"当链表长度超过阈值（默认8）且数组长度不小于64时，将链表转为红黑树\",\"当红黑树节点数量少于阈值（默认6）时，将红黑树转回链表\"]},\"2609\":{\"h\":\"3.3 动态扩容机制\",\"t\":[\"HashMap的动态扩容机制是其高性能的关键：\",\"初始容量：默认16，可通过构造函数指定\",\"负载因子：默认0.75，平衡空间和时间效率\",\"扩容阈值：容量×负载因子，达到该值时触发扩容\",\"扩容操作：创建原容量2倍的新数组，并重新哈希所有节点\"]},\"2610\":{\"h\":\"3.4 fail-fast机制\",\"t\":[\"HashMap通过modCount实现快速失败机制：\",\"当HashMap被修改（添加/删除元素）时，modCount自增\",\"迭代器创建时记录expectedModCount\",\"迭代过程中检查modCount是否等于expectedModCount，不等则抛出ConcurrentModificationException\"]},\"2611\":{\"h\":\"四、避坑指南\"},\"2612\":{\"h\":\"4.1 键的哈希值不可变\",\"t\":[\"作为HashMap键的对象必须保证哈希值不变，否则会导致无法正确获取值：\",\"// 错误示例：使用可变对象作为键 class MutableKey { private int value; // 省略构造方法和getter @Override public int hashCode() { return value; } } Map<MutableKey, String> map = new HashMap<>(); MutableKey key = new MutableKey(1); map.put(key, \\\"value\\\"); key.setValue(2); // 修改键的哈希值 String value = map.get(key); // null，无法获取值\"]},\"2613\":{\"h\":\"4.2 线程安全问题\",\"t\":[\"HashMap是非线程安全的，多线程环境下可能导致：\",\"数据不一致\",\"扩容时的死循环（JDK 1.7及之前）\",\"ConcurrentModificationException异常\",\"解决方案：\",\"// 1. 使用Collections.synchronizedMap Map<String, Integer> syncMap = Collections.synchronizedMap(new HashMap<>()); // 2. 使用ConcurrentHashMap (推荐) Map<String, Integer> concurrentMap = new ConcurrentHashMap<>();\"]},\"2614\":{\"h\":\"4.3 初始容量选择\",\"t\":[\"初始容量设置不当会导致频繁扩容，影响性能：\",\"过小：导致频繁扩容\",\"过大：浪费内存空间\",\"正确做法：根据预期元素数量计算初始容量\",\"int expectedSize = 1000; int initialCapacity = (int) (expectedSize / 0.75f) + 1; Map<String, Integer> map = new HashMap<>(initialCapacity);\"]},\"2615\":{\"h\":\"4.4 遍历方式选择\",\"t\":[\"不同遍历方式性能差异较大：\",\"// 1. 推荐：entrySet遍历键值对 for (Map.Entry<String, Integer> entry : map.entrySet()) { String key = entry.getKey(); Integer value = entry.getValue(); } // 2. 不推荐：keySet遍历后get获取值（多一次哈希查找） for (String key : map.keySet()) { Integer value = map.get(key); }\"]},\"2616\":{\"h\":\"五、深度思考题\",\"t\":[\"HashMap在JDK 7和JDK 8中的实现有哪些主要区别？这些改进带来了什么好处？\",\"为什么HashMap的容量必须是2的幂次方？如果传入非2的幂次方的初始容量，会发生什么？\",\"HashMap、Hashtable和ConcurrentHashMap的线程安全特性有何区别？各自的实现原理是什么？\",\"如何实现一个自定义的HashMap，支持按照插入顺序或访问顺序遍历？\",\"HashMap中的红黑树与TreeMap中的红黑树有何异同？\",\"思考题回答:\",\"JDK 7和JDK 8中HashMap的主要区别:\",\"数据结构: JDK 7使用数组+链表；JDK 8使用数组+链表+红黑树\",\"哈希计算: JDK 8优化了扰动函数，减少了哈希冲突\",\"扩容机制: JDK 8优化了resize过程，避免了多线程下的死循环\",\"插入方式: JDK 7使用头插法；JDK 8使用尾插法\",\"查询性能: JDK 8在哈希冲突严重时查询性能从O(n)提升到O(log n)\",\"HashMap容量必须是2的幂次方的原因:\",\"便于使用位运算计算索引: hash & (length - 1)，效率高于取模运算\",\"扩容时可以通过hash & oldCap快速判断元素应该放在原索引还是新索引\",\"如果传入非2的幂次方的初始容量，HashMap会通过tableSizeFor()方法将其转换为大于等于该值的最小2的幂次方\"]},\"2617\":{\"h\":\"1.3.9 集合-LinkedHashSet&LinkedHashMap 源码\"},\"2618\":{\"h\":\"一、核心理论\"},\"2619\":{\"h\":\"1.1 类结构分析\",\"t\":[\"LinkedHashMap是HashMap的子类，在HashMap的基础上通过维护一个双向链表来保持元素的插入顺序或访问顺序。LinkedHashSet则是基于LinkedHashMap实现的，其内部持有一个LinkedHashMap实例，利用其key的唯一性来实现集合功能。\"]},\"2620\":{\"h\":\"1.2 核心成员变量\"},\"2621\":{\"h\":\"LinkedHashMap核心变量\",\"t\":[\"head: 双向链表的头节点\",\"tail: 双向链表的尾节点\",\"accessOrder: 排序模式标志，false表示插入顺序，true表示访问顺序\",\"entrySet: 缓存的entry集合视图\"]},\"2622\":{\"h\":\"LinkedHashSet核心变量\",\"t\":[\"map: 内部使用的LinkedHashMap实例\",\"PRESENT: 静态常量，作为Map中的value占位符\"]},\"2623\":{\"h\":\"1.3 双向链表节点结构\",\"t\":[\"LinkedHashMap的Entry节点继承自HashMap的Node节点，并增加了两个指针用于维护双向链表：\",\"static class Entry<K,V> extends HashMap.Node<K,V> { Entry<K,V> before, after; Entry(int hash, K key, V value, Node<K,V> next) { super(hash, key, value, next); } }\"]},\"2624\":{\"h\":\"1.4 JDK版本特性\",\"t\":[\"JDK 1.4: 引入LinkedHashMap和LinkedHashSet\",\"JDK 8: 优化了红黑树转换逻辑，当链表长度超过阈值时转为红黑树\",\"JDK 9: 引入of()静态工厂方法创建不可变LinkedHashMap\",\"JDK 21: 增强了性能，优化了迭代器实现\"]},\"2625\":{\"h\":\"二、代码实践\"},\"2626\":{\"h\":\"2.1 LinkedHashMap核心方法实现\"},\"2627\":{\"h\":\"2.1.1 初始化方法\",\"t\":[\"/** * 构造方法，指定初始容量、加载因子和排序模式 * @param initialCapacity 初始容量 * @param loadFactor 加载因子 * @param accessOrder 排序模式，true表示访问顺序，false表示插入顺序 */ public LinkedHashMap(int initialCapacity, float loadFactor, boolean accessOrder) { super(initialCapacity, loadFactor); this.accessOrder = accessOrder; }\"]},\"2628\":{\"h\":\"2.1.2 put方法实现\",\"t\":[\"LinkedHashMap并未重写put方法，而是通过重写HashMap的newNode()和afterNodeInsertion()方法来维护双向链表：\",\"/** * 创建新节点，并添加到双向链表尾部 */ Node<K,V> newNode(int hash, K key, V value, Node<K,V> e) { LinkedHashMap.Entry<K,V> p = new LinkedHashMap.Entry<K,V>(hash, key, value, e); linkNodeLast(p); return p; } /** * 将节点链接到双向链表尾部 */ private void linkNodeLast(LinkedHashMap.Entry<K,V> p) { LinkedHashMap.Entry<K,V> last = tail; tail = p; if (last == null) head = p; else { p.before = last; last.after = p; } } /** * 插入节点后回调，用于移除 eldest 节点（LRU实现） */ void afterNodeInsertion(boolean evict) { LinkedHashMap.Entry<K,V> first; if (evict && (first = head) != null && removeEldestEntry(first)) { K key = first.key; removeNode(hash(key), key, null, false, true); } }\"]},\"2629\":{\"h\":\"2.1.3 get方法实现\",\"t\":[\"/** * 获取指定key的值，并在访问顺序模式下移动节点到链表尾部 * @param key 键 * @return 对应的value，不存在则返回null */ public V get(Object key) { Node<K,V> e; if ((e = getNode(hash(key), key)) == null) return null; if (accessOrder) afterNodeAccess(e); return e.value; } /** * 访问节点后回调，将节点移动到双向链表尾部 */ void afterNodeAccess(Node<K,V> e) { LinkedHashMap.Entry<K,V> last; if (accessOrder && (last = tail) != e) { LinkedHashMap.Entry<K,V> p = (LinkedHashMap.Entry<K,V>)e, b = p.before, a = p.after; p.after = null; if (b == null) head = a; else b.after = a; if (a != null) a.before = b; else last = b; if (last == null) head = p; else { p.before = last; last.after = p; } tail = p; ++modCount; } }\"]},\"2630\":{\"h\":\"2.1.4 remove方法实现\",\"t\":[\"LinkedHashMap通过重写afterNodeRemoval()方法在节点删除后维护双向链表：\",\"/** * 删除节点后回调，从双向链表中移除该节点 */ void afterNodeRemoval(Node<K,V> e) { LinkedHashMap.Entry<K,V> p = (LinkedHashMap.Entry<K,V>)e, b = p.before, a = p.after; p.before = p.after = null; if (b == null) head = a; else b.after = a; if (a == null) tail = b; else a.before = b; }\"]},\"2631\":{\"h\":\"2.2 LinkedHashSet核心方法实现\",\"t\":[\"/** * 构造方法，创建一个空的LinkedHashSet */ public LinkedHashSet() { map = new LinkedHashMap<>(); } /** * 向集合中添加元素 * @param e 要添加的元素 * @return 如果元素不存在且添加成功则返回true */ public boolean add(E e) { return map.put(e, PRESENT) == null; } /** * 移除集合中的元素 * @param o 要移除的元素 * @return 如果元素存在且移除成功则返回true */ public boolean remove(Object o) { return map.remove(o) == PRESENT; } /** * 判断集合是否包含指定元素 * @param o 要检查的元素 * @return 如果包含则返回true */ public boolean contains(Object o) { return map.containsKey(o); }\"]},\"2632\":{\"h\":\"2.3 LRU缓存实现示例\",\"t\":[\"利用LinkedHashMap的访问顺序模式可以轻松实现LRU（最近最少使用）缓存：\",\"/** * LRU缓存实现 * @param <K> 键类型 * @param <V> 值类型 */ class LRUCache<K, V> extends LinkedHashMap<K, V> { private final int capacity; /** * 构造方法 * @param capacity 缓存容量 */ public LRUCache(int capacity) { super(capacity, 0.75f, true); this.capacity = capacity; } /** * 判断是否移除最老的元素 * @param eldest 最老的元素 * @return 如果当前大小超过容量则返回true */ @Override protected boolean removeEldestEntry(Map.Entry<K, V> eldest) { return size() > capacity; } public static void main(String[] args) { LRUCache<Integer, String> cache = new LRUCache<>(3); cache.put(1, \\\"A\\\"); cache.put(2, \\\"B\\\"); cache.put(3, \\\"C\\\"); System.out.println(cache); // {1=A, 2=B, 3=C} cache.get(2); // 访问2，使其变为最近使用 cache.put(4, \\\"D\\\"); // 超过容量，移除最老的1 System.out.println(cache); // {3=C, 2=B, 4=D} } }\"]},\"2633\":{\"h\":\"三、设计思想\"},\"2634\":{\"h\":\"3.1 数据结构设计\",\"t\":[\"LinkedHashMap结合了哈希表和双向链表的优点：\",\"哈希表：提供O(1)时间复杂度的get和put操作\",\"双向链表：维护元素的顺序，支持按插入顺序或访问顺序迭代\"]},\"2635\":{\"h\":\"3.2 迭代顺序保证\",\"t\":[\"LinkedHashMap提供两种迭代顺序：\",\"插入顺序：元素的迭代顺序与插入顺序一致\",\"访问顺序：每次get或put操作会将元素移到链表尾部，迭代顺序为最近访问的元素在后\",\"这种设计使得LinkedHashMap非常适合实现需要保持插入顺序或实现LRU缓存策略的场景。\"]},\"2636\":{\"h\":\"3.3 性能权衡\",\"t\":[\"与HashMap相比，LinkedHashMap通过增加双向链表的维护开销，换取了迭代顺序的保证：\",\"优点：迭代时不需要像HashMap那样遍历整个哈希表，只需遍历双向链表，时间复杂度为O(n)\",\"缺点：插入和删除操作需要同时维护哈希表和双向链表，开销略高于HashMap\"]},\"2637\":{\"h\":\"3.4 接口设计原则\",\"t\":[\"LinkedHashMap遵循了以下设计原则：\",\"里氏替换原则：可以完全替代HashMap，API兼容\",\"单一职责原则：哈希表负责快速查找，双向链表负责顺序维护\",\"开闭原则：通过重写removeEldestEntry()方法可轻松扩展功能（如LRU缓存）\"]},\"2638\":{\"h\":\"四、避坑指南\"},\"2639\":{\"h\":\"4.1 性能陷阱\",\"t\":[\"迭代性能：LinkedHashMap的迭代性能优于HashMap，尤其是在哈希表稀疏时\",\"频繁修改影响：在accessOrder=true模式下，频繁get操作会导致链表频繁调整，影响性能\",\"初始容量选择：与HashMap一样，选择合适的初始容量可减少扩容次数\"]},\"2640\":{\"h\":\"4.2 并发问题\",\"t\":[\"LinkedHashMap和LinkedHashSet都是非线程安全的，多线程环境下可能导致：\",\"迭代时抛出ConcurrentModificationException\",\"数据不一致\",\"解决方案：\",\"// 使用Collections.synchronizedSet包装 Set<String> syncSet = Collections.synchronizedSet(new LinkedHashSet<>()); // 使用ConcurrentHashMap实现线程安全的LinkedHashMap功能 Map<String, Integer> concurrentMap = new ConcurrentHashMap<>(); // 结合ConcurrentLinkedQueue维护顺序\"]},\"2641\":{\"h\":\"4.3 序列化问题\",\"t\":[\"LinkedHashMap的序列化需要特别注意：\",\"默认序列化会保存整个哈希表结构，包括未使用的桶，导致序列化后体积较大\",\"解决方法：重写writeObject()和readObject()方法，只序列化双向链表\"]},\"2642\":{\"h\":\"4.4 正确实现LRU缓存\",\"t\":[\"实现LRU缓存时需注意：\",\"// 错误示例：未正确重写removeEldestEntry() class BadLRUCache extends LinkedHashMap<Object, Object> { private int maxSize; public BadLRUCache(int maxSize) { super(maxSize, 0.75f, true); this.maxSize = maxSize; } // 错误：应该比较size() > maxSize protected boolean removeEldestEntry(Map.Entry<Object, Object> eldest) { return size() == maxSize; // 当达到容量时就移除，实际应在超过容量时移除 } }\"]},\"2643\":{\"h\":\"五、深度思考题\",\"t\":[\"LinkedHashMap在JDK 8中如何处理哈希冲突？当红黑树转换发生时，双向链表如何维护？\",\"比较LinkedHashMap的accessOrder=true模式与LRU算法的异同，如何实现一个线程安全的LRU缓存？\",\"LinkedHashSet与HashSet、TreeSet的性能对比如何？在什么场景下应该选择LinkedHashSet？\",\"如何利用LinkedHashMap实现一个简单的FIFO（先进先出）缓存？\",\"分析LinkedHashMap的迭代器实现，为什么它比HashMap的迭代器更快？\",\"思考题回答:\",\"LinkedHashMap在JDK 8中处理哈希冲突的方式与HashMap相同，当链表长度超过8时转为红黑树。红黑树节点同样继承自LinkedHashMap.Entry，因此双向链表的维护方式与普通节点相同，只是节点在哈希表中的结构变为红黑树。\",\"LinkedHashMap的accessOrder=true模式本质上是一种近似LRU算法，它只记录了访问顺序但没有时间戳。实现线程安全的LRU缓存可使用ConcurrentHashMap+ConcurrentLinkedQueue，或使用Collections.synchronizedMap包装LinkedHashMap并配合锁机制。\",\"性能对比：HashSet插入查找最快但无序，TreeSet有序但性能较差(O(log n))，LinkedHashSet性能略低于HashSet但提供有序性。当需要保持插入顺序且频繁迭代时，应选择LinkedHashSet。\",\"实现FIFO缓存只需重写removeEldestEntry()方法，当size() > capacity时返回true，不需要设置accessOrder=true。\"]},\"2644\":{\"h\":\"1.4.0 集合-TreeSet&TreeMap源码\"},\"2645\":{\"h\":\"一、核理论\"},\"2646\":{\"h\":\"1.1 TreeMap与TreeSet类结构分析\",\"t\":[\"TreeMap是基于红黑树实现的有序键值对存储结构，而TreeSet则是基于TreeMap实现的有序集合，用于存储不重复元素。两者都实现了Navigable接口，支持一系列导航方法，默认按自然顺序排序或通过Comparator自定义排序。\"]},\"2647\":{\"h\":\"1.2 核心成员变量\"},\"2648\":{\"h\":\"TreeMap核心变量\",\"t\":[\"root: 红黑树的根节点\",\"size: 键值对数量\",\"comparator: 用于排序的比较器，null表示自然排序\",\"modCount: 结构修改计数器，用于快速失败机制\"]},\"2649\":{\"h\":\"TreeSet核心变量\",\"t\":[\"m: 内部使用的NavigableMap实例（实际为TreeMap）\",\"PRESENT: 静态常量，作为Map中的value占位符\"]},\"2650\":{\"h\":\"1.3 红黑树特性\",\"t\":[\"红黑树是一种自平衡的二叉查找树，具有以下特性：\",\"每个节点要么是红色，要么是黑色\",\"根节点是黑色\",\"所有叶子节点（NIL）是黑色\",\"如果一个节点是红色，则它的两个子节点都是黑色\",\"从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点\",\"这些特性确保了红黑树的平衡，使得基本操作（插入、删除、查找）的时间复杂度为O(log n)。\"]},\"2651\":{\"h\":\"1.4 JDK版本特性差异\",\"t\":[\"JDK 1.2: 引入TreeMap和TreeSet\",\"JDK 1.6: 引入NavigableMap和NavigableSet接口，TreeMap和TreeSet实现这些接口\",\"JDK 1.8: 优化红黑树实现，提高并发性能\",\"JDK 1.9: 引入of()静态工厂方法创建不可变SortedMap\",\"JDK 16: 增强NavigableMap接口，添加更多便捷方法\"]},\"2652\":{\"h\":\"二、代码实践\"},\"2653\":{\"h\":\"2.1 TreeMap核心方法实现\"},\"2654\":{\"h\":\"2.1.1 红黑树节点结构\",\"t\":[\"/** * 红黑树节点 */ static final class Entry<K,V> implements Map.Entry<K,V> { K key; V value; Entry<K,V> left; Entry<K,V> right; Entry<K,V> parent; boolean color = BLACK; // 默认黑色 // 构造方法和其他方法... }\"]},\"2655\":{\"h\":\"2.1.2 put方法实现\",\"t\":[\"/** * 将键值对放入映射 * @param key 键 * @param value 值 * @return 之前与key关联的值，或null */ public V put(K key, V value) { Entry<K,V> t = root; // 树为空，创建根节点 if (t == null) { compare(key, key); // 检查key是否为null（自然排序时） root = new Entry<>(key, value, null); size = 1; modCount++; return null; } int cmp; Entry<K,V> parent; // 分裂比较器和比较逻辑 Comparator<? super K> cpr = comparator; if (cpr != null) { // 使用自定义比较器查找插入位置 do { parent = t; cmp = cpr.compare(key, t.key); if (cmp < 0) t = t.left; else if (cmp > 0) t = t.right; else // 键已存在，替换值 return t.setValue(value); } while (t != null); } else { // 使用自然排序 if (key == null) throw new NullPointerException(); @SuppressWarnings(\\\"unchecked\\\") Comparable<? super K> k = (Comparable<? super K>) key; do { parent = t; cmp = k.compareTo(t.key); if (cmp < 0) t = t.left; else if (cmp > 0) t = t.right; else // 键已存在，替换值 return t.setValue(value); } while (t != null); } // 创建新节点 Entry<K,V> e = new Entry<>(key, value, parent); if (cmp < 0) parent.left = e; else parent.right = e; // 插入后修复红黑树平衡 fixAfterInsertion(e); size++; modCount++; return null; }\"]},\"2656\":{\"h\":\"2.1.3 红黑树插入后修复\",\"t\":[\"/** * 插入后修复红黑树平衡 */ private void fixAfterInsertion(Entry<K,V> x) { x.color = RED; // 新节点默认为红色 // 父节点为红色时需要修复 while (x != null && x != root && x.parent.color == RED) { if (parentOf(x) == leftOf(parentOf(parentOf(x)))) { Entry<K,V> y = rightOf(parentOf(parentOf(x))); if (colorOf(y) == RED) { // 情况1：叔叔节点为红色 setColor(parentOf(x), BLACK); setColor(y, BLACK); setColor(parentOf(parentOf(x)), RED); x = parentOf(parentOf(x)); } else { if (x == rightOf(parentOf(x))) { // 情况2：叔叔节点为黑色，且当前节点为右孩子 x = parentOf(x); rotateLeft(x); } // 情况3：叔叔节点为黑色，且当前节点为左孩子 setColor(parentOf(x), BLACK); setColor(parentOf(parentOf(x)), RED); rotateRight(parentOf(parentOf(x))); } } else { // 镜像情况：父节点是祖父节点的右孩子 Entry<K,V> y = leftOf(parentOf(parentOf(x))); if (colorOf(y) == RED) { // 情况1：叔叔节点为红色 setColor(parentOf(x), BLACK); setColor(y, BLACK); setColor(parentOf(parentOf(x)), RED); x = parentOf(parentOf(x)); } else { if (x == leftOf(parentOf(x))) { // 情况2：叔叔节点为黑色，且当前节点为左孩子 x = parentOf(x); rotateRight(x); } // 情况3：叔叔节点为黑色，且当前节点为右孩子 setColor(parentOf(x), BLACK); setColor(parentOf(parentOf(x)), RED); rotateLeft(parentOf(parentOf(x))); } } x = parentOf(x); } // 确保根节点为黑色 root.color = BLACK; }\"]},\"2657\":{\"h\":\"2.1.4 旋转操作\",\"t\":[\"/** * 左旋操作 */ private void rotateLeft(Entry<K,V> p) { if (p != null) { Entry<K,V> r = p.right; p.right = r.left; if (r.left != null) r.left.parent = p; r.parent = p.parent; if (p.parent == null) root = r; else if (p.parent.left == p) p.parent.left = r; else p.parent.right = r; r.left = p; p.parent = r; } } /** * 右旋操作 */ private void rotateRight(Entry<K,V> p) { if (p != null) { Entry<K,V> l = p.left; p.left = l.right; if (l.right != null) l.right.parent = p; l.parent = p.parent; if (p.parent == null) root = l; else if (p.parent.right == p) p.parent.right = l; else p.parent.left = l; l.right = p; p.parent = l; } }\"]},\"2658\":{\"h\":\"2.2 TreeSet核心方法实现\",\"t\":[\"/** * 向集合中添加元素 * @param e 要添加的元素 * @return 如果元素不存在且添加成功则返回true */ public boolean add(E e) { return m.put(e, PRESENT) == null; } /** * 获取集合的迭代器 * @return 按升序排列的元素迭代器 */ public Iterator<E> iterator() { return m.navigableKeySet().iterator(); } /** * 获取小于指定元素的最大元素 * @param e 要比较的元素 * @return 小于e的最大元素，不存在则返回null */ public E lower(E e) { return m.lowerKey(e); } /** * 获取大于指定元素的最小元素 * @param e 要比较的元素 * @return 大于e的最小元素，不存在则返回null */ public E higher(E e) { return m.higherKey(e); }\"]},\"2659\":{\"h\":\"2.3 实际应用示例\"},\"2660\":{\"h\":\"2.3.1 自定义排序示例\",\"t\":[\"/** * 使用自定义比较器的TreeMap示例 * 按字符串长度排序，长度相同则按字母顺序 */ public class CustomComparatorExample { public static void main(String[] args) { // 创建自定义比较器 Comparator<String> lengthComparator = (s1, s2) -> { if (s1.length() != s2.length()) { return Integer.compare(s1.length(), s2.length()); } else { return s1.compareTo(s2); } }; // 使用自定义比较器创建TreeMap Map<String, Integer> treeMap = new TreeMap<>(lengthComparator); // 添加元素 treeMap.put(\\\"apple\\\", 1); treeMap.put(\\\"banana\\\", 2); treeMap.put(\\\"pear\\\", 3); treeMap.put(\\\"orange\\\", 4); treeMap.put(\\\"grape\\\", 5); // 输出将按字符串长度排序 for (Map.Entry<String, Integer> entry : treeMap.entrySet()) { System.out.println(entry.getKey() + \\\": \\\" + entry.getValue()); } // 输出顺序: pear(4), apple(5), grape(5), banana(6), orange(6) } }\"]},\"2661\":{\"h\":\"2.3.2 导航方法使用示例\",\"t\":[\"/** * TreeSet导航方法使用示例 */ public class TreeSetNavigationExample { public static void main(String[] args) { TreeSet<Integer> numbers = new TreeSet<>(); numbers.add(10); numbers.add(20); numbers.add(30); numbers.add(40); numbers.add(50); System.out.println(\\\"集合: \\\" + numbers); // [10, 20, 30, 40, 50] System.out.println(\\\"第一个元素: \\\" + numbers.first()); // 10 System.out.println(\\\"最后一个元素: \\\" + numbers.last()); // 50 System.out.println(\\\"小于30的最大元素: \\\" + numbers.lower(30)); // 20 System.out.println(\\\"大于30的最小元素: \\\" + numbers.higher(30)); // 40 System.out.println(\\\"小于等于30的最大元素: \\\" + numbers.floor(30)); // 30 System.out.println(\\\"大于等于30的最小元素: \\\" + numbers.ceiling(30)); // 30 // 子集视图 SortedSet<Integer> subset = numbers.subSet(20, 40); System.out.println(\\\"20到40的子集: \\\" + subset); // [20, 30] } }\"]},\"2662\":{\"h\":\"三、设计思想\"},\"2663\":{\"h\":\"3.1 红黑树数据结构\",\"t\":[\"TreeMap采用红黑树作为底层数据结构，具有以下优势：\",\"自平衡：通过旋转和变色操作保持树的平衡\",\"有序性：中序遍历可得到有序序列\",\"高效性：插入、删除、查找操作的时间复杂度均为O(log n)\"]},\"2664\":{\"h\":\"3.2 排序机制\",\"t\":[\"TreeMap支持两种排序方式：\",\"自然排序：键必须实现Comparable接口，通过compareTo()方法比较\",\"定制排序：创建TreeMap时提供Comparator对象，通过compare()方法比较\",\"排序机制确保了TreeMap中的键始终处于有序状态，支持高效的范围查询操作。\"]},\"2665\":{\"h\":\"3.3 视图机制\",\"t\":[\"TreeMap提供了多种视图：\",\"keySet()：返回键的Set视图\",\"values()：返回值的Collection视图\",\"entrySet()：返回键值对的Set视图\",\"navigableKeySet()：返回支持导航方法的键集视图\",\"descendingKeySet()：返回逆序的键集视图\",\"这些视图是动态的，对视图的修改会反映到底层Map，反之亦然。\"]},\"2666\":{\"h\":\"3.4 与HashMap的对比\",\"t\":[\"特性\",\"TreeMap\",\"HashMap\",\"数据结构\",\"红黑树\",\"数组+链表+红黑树\",\"有序性\",\"按键有序\",\"无序\",\"时间复杂度\",\"O(log n)\",\"平均O(1)，最坏O(n)\",\"排序方式\",\"自然排序/定制排序\",\"无\",\"导航方法\",\"支持\",\"不支持\",\"哈希依赖\",\"不依赖\",\"依赖hashCode()和equals()\"]},\"2667\":{\"h\":\"四、避坑指南\"},\"2668\":{\"h\":\"4.1 键的可比较性\",\"t\":[\"使用自然排序时，键必须实现Comparable接口，否则会抛出ClassCastException：\",\"// 错误示例：使用不可比较的对象作为键 class UncomparableKey { private int value; // 省略构造方法和getter } Map<UncomparableKey, String> map = new TreeMap<>(); map.put(new UncomparableKey(1), \\\"value\\\"); // 抛出ClassCastException\"]},\"2669\":{\"h\":\"4.2 键的不可变性\",\"t\":[\"作为TreeMap键的对象应保持不可变，否则修改键可能导致排序混乱：\",\"// 错误示例：使用可变对象作为键 class MutableKey implements Comparable<MutableKey> { private int value; // 省略构造方法和getter @Override public int compareTo(MutableKey o) { return Integer.compare(this.value, o.value); } } TreeMap<MutableKey, String> map = new TreeMap<>(); MutableKey key = new MutableKey(1); map.put(key, \\\"value\\\"); key.setValue(2); // 修改键的值 String value = map.get(key); // 可能为null或错误值\"]},\"2670\":{\"h\":\"4.3 线程安全问题\",\"t\":[\"TreeMap是非线程安全的，多线程环境下可能导致：\",\"数据不一致\",\"ConcurrentModificationException异常\",\"解决方案：\",\"// 1. 使用Collections.synchronizedSortedMap SortedMap<String, Integer> syncMap = Collections.synchronizedSortedMap(new TreeMap<>()); // 2. 使用并发工具类加锁 Map<String, Integer> concurrentMap = new TreeMap<>(); // ... 使用ReentrantLock或synchronized块保护访问 ...\"]},\"2671\":{\"h\":\"4.4 性能陷阱\",\"t\":[\"频繁插入删除：红黑树的旋转和变色操作开销较大，频繁修改可能影响性能\",\"错误的比较器实现：比较器违反compareTo()约定（如不对称、不传递）会导致异常行为\",\"范围查询效率：TreeMap的范围查询（如subMap()）效率远高于HashMap\"]},\"2672\":{\"h\":\"五、深度思考题\",\"t\":[\"TreeMap中的红黑树与HashMap中的红黑树有何异同？为什么HashMap在JDK 8中才引入红黑树？\",\"如何实现一个线程安全的TreeMap？ConcurrentSkipListMap与TreeMap相比有哪些优势和劣势？\",\"TreeMap的subMap()方法返回的视图与原Map是什么关系？修改视图会对原Map产生什么影响？\",\"比较TreeSet、HashSet和LinkedHashSet的性能特性，分析各自适用的场景。\",\"如何在TreeMap中实现自定义排序，同时保证equals()方法与compareTo()方法的一致性？\",\"思考题回答:\",\"TreeMap与HashMap中红黑树的异同:\",\"相同点: 都实现了自平衡二叉查找树特性，保证O(log n)时间复杂度\",\"不同点: TreeMap的红黑树用于维护键的有序性，是其唯一数据结构；HashMap的红黑树仅在链表长度超过阈值时使用，用于解决哈希冲突\",\"HashMap在JDK 8引入红黑树的原因: 提高哈希冲突严重时的查询性能，从O(n)提升到O(log n)\",\"线程安全的TreeMap实现方式:\",\"使用Collections.synchronizedSortedMap包装\",\"使用ConcurrentSkipListMap (JDK 6+)\",\"ConcurrentSkipListMap优势: 无锁设计，支持更高并发；劣势: 内存占用更大，随机访问性能略低于TreeMap\"]},\"2673\":{\"h\":\"1.4.1 集合-WeakHashMap源码\"},\"2674\":{\"h\":\"核理論\"},\"2675\":{\"h\":\"1.1 类结构分析\",\"t\":[\"WeakHashMap是Java集合框架中一种特殊的Map实现，它使用弱引用(WeakReference)作为键(key)，当键对象不再被强引用时，对应的键值对会被自动移除。这种特性使得WeakHashMap非常适合实现缓存功能，能够自动释放不再使用的对象，避免内存泄漏。\"]},\"2676\":{\"h\":\"1.2 弱引用机制\",\"t\":[\"在Java中，引用分为四种级别：强引用(Strong Reference)、软引用(Soft Reference)、弱引用(Weak Reference)和虚引用(Phantom Reference)。WeakHashMap使用弱引用作为键，这意味着当键对象没有被其他强引用指向时，可能会被垃圾回收器回收，即使此时它仍然是WeakHashMap的键。\"]},\"2677\":{\"h\":\"1.3 JDK版本特性\",\"t\":[\"JDK 1.2：WeakHashMap首次被引入\",\"JDK 8：实现了Map.Entry接口的spliterator()方法\",\"JDK 9+：添加了of()、copyOf()等静态工厂方法，支持创建不可变WeakHashMap实例\"]},\"2678\":{\"h\":\"代码实践\"},\"2679\":{\"h\":\"2.1 核心成员变量\",\"t\":[\"public class WeakHashMap<K,V> extends AbstractMap<K,V> implements Map<K,V> { // 存储键值对的数组 private Entry<K,V>[] table; // 键值对数量 private int size; // 修改计数器，用于快速失败机制 private int modCount; // 扩容阈值 private int threshold; // 负载因子 private final float loadFactor; // 引用队列，用于存储被回收的键 private final ReferenceQueue<K> queue = new ReferenceQueue<>(); // ... }\"]},\"2680\":{\"h\":\"2.2 Entry节点实现\",\"t\":[\"private static class Entry<K,V> extends WeakReference<K> implements Map.Entry<K,V> { V value; final int hash; Entry<K,V> next; /** * 创建一个新的Entry节点 * @param key 键，将被包装为弱引用 * @param value 值，强引用 * @param queue 引用队列，当键被回收时会加入此队列 * @param hash 键的哈希值 * @param next 下一个节点 */ Entry(K key, V value, ReferenceQueue<K> queue, int hash, Entry<K,V> next) { super(key, queue); this.value = value; this.hash = hash; this.next = next; } // Entry接口实现 public K getKey() { return get(); } public V getValue() { return value; } public V setValue(V newValue) { ... } public boolean equals(Object o) { ... } public int hashCode() { ... } }\"]},\"2681\":{\"h\":\"2.3 清理过期条目\",\"t\":[\"expungeStaleEntries()方法是WeakHashMap的核心，它负责从表中移除那些键已经被回收的条目：\",\"/** * 清理所有键已被回收的条目 */ private void expungeStaleEntries() { Entry<K,V> e; // 循环从引用队列中获取被回收的键对应的Entry while ((e = (Entry<K,V>) queue.poll()) != null) { int h = e.hash; int i = indexFor(h, table.length); Entry<K,V> prev = table[i]; Entry<K,V> p = prev; while (p != null) { Entry<K,V> next = p.next; if (p == e) { // 找到要删除的节点 if (prev == e) table[i] = next; else prev.next = next; e.value = null; // 帮助GC回收value size--; } else { int i = indexFor(e.hash, dest.length); e.next = dest[i]; dest[i] = e; } e = next; } } }\"]},\"2682\":{\"h\":\"2.4 get方法实现\",\"t\":[\"/** * 根据键获取值 * @param key 要查找的键 * @return 键对应的值，如果键不存在或已被回收则返回null */ public V get(Object key) { Object k = maskNull(key); int h = hash(k); Entry<K,V>[] tab = getTable(); int index = indexFor(h, tab.length); Entry<K,V> e = tab[index]; // 遍历链表查找 while (e != null) { if (e.hash == h && eq(k, e.get())) return e.value; e = e.next; } return null; } /** * 获取哈希表前先清理过期条目 */ private Entry<K,V>[] getTable() { expungeStaleEntries(); return table; }\"]},\"2683\":{\"h\":\"2.5 put方法实现\",\"t\":[\"/** * 添加键值对到映射中 * @param key 键 * @param value 值 * @return 之前与key关联的值，如果没有则返回null */ public V put(K key, V value) { Object k = maskNull(key); int h = hash(k); Entry<K,V>[] tab = getTable(); int i = indexFor(h, tab.length); // 查找是否已存在该键，如果存在则替换值 for (Entry<K,V> e = tab[i]; e != null; e = e.next) { if (h == e.hash && eq(k, e.get())) { V oldValue = e.value; if (value != oldValue) e.value = value; return oldValue; } } modCount++; Entry<K,V> e = tab[i]; // 创建新的Entry并添加到链表头部 tab[i] = new Entry<>(k, value, queue, h, e); // 检查是否需要扩容 if (++size >= threshold) resize(tab.length * 2); return null; }\"]},\"2684\":{\"h\":\"2.6 扩容机制\",\"t\":[\"/** * 调整哈希表大小 * @param newCapacity 新容量 * @return 调整后的哈希表 */ private Entry<K,V>[] resize(int newCapacity) { Entry<K,V>[] oldTable = getTable(); int oldCapacity = oldTable.length; if (oldCapacity == MAXIMUM_CAPACITY) { threshold = Integer.MAX_VALUE; return oldTable; } Entry<K,V>[] newTable = new Entry[newCapacity]; // 转移条目到新表 transfer(oldTable, newTable); table = newTable; // 计算新的扩容阈值 threshold = (int)(newCapacity * loadFactor); return newTable; } /** * 将条目从旧表转移到新表 */ private void transfer(Entry<K,V>[] src, Entry<K,V>[] dest) { for (int j = 0; j < src.length; ++j) { Entry<K,V> e = src[j]; src[j] = null; while (e != null) { Entry<K,V> next = e.next; K key = e.get(); if (key == null) { e.next = null; // 帮助GC e.value = null; // 帮助GC回收value size--; } else { int i = indexFor(e.hash, dest.length); e.next = dest[i]; dest[i] = e; } e = next; } } }\"]},\"2685\":{\"h\":\"2.7 WeakHashMap缓存示例\",\"t\":[\"import java.util.WeakHashMap; /** * 使用WeakHashMap实现简单缓存 */ public class WeakHashMapCacheExample { private final WeakHashMap<String, Object> cache = new WeakHashMap<>(); /** * 从缓存获取对象 */ public Object get(String key) { return cache.get(key); } /** * 添加对象到缓存 */ public void put(String key, Object value) { cache.put(key, value); } /** * 清除缓存 */ public void clear() { cache.clear(); } public static void main(String[] args) { WeakHashMapCacheExample cache = new WeakHashMapCacheExample(); String key = new String(\\\"testKey\\\"); Object value = new Object(); cache.put(key, value); System.out.println(\\\"缓存中获取值: \\\" + (cache.get(key) != null)); // true // 移除强引用 key = null; value = null; // 触发GC System.gc(); // 短暂等待GC完成 try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } // 缓存中的条目已被自动移除 System.out.println(\\\"GC后缓存中获取值: \\\" + (cache.get(\\\"testKey\\\") != null)); // false } }\"]},\"2686\":{\"h\":\"设计思想\"},\"2687\":{\"h\":\"3.1 数据结构设计\",\"t\":[\"WeakHashMap的核心设计思想是结合哈希表和弱引用机制，实现自动过期的键值对存储。它的内部结构与HashMap类似，都使用数组+链表的结构来存储键值对，但有以下关键区别：\",\"键的存储方式：WeakHashMap的键被包装在WeakReference中，而HashMap使用强引用\",\"引用队列：WeakHashMap维护一个引用队列，用于跟踪被回收的键\",\"自动清理机制：在每次操作前会清理过期条目\"]},\"2688\":{\"h\":\"3.2 自动清理策略\",\"t\":[\"WeakHashMap采用懒清理策略，在以下几种情况下会触发过期条目的清理：\",\"调用get()、put()、remove()等方法时\",\"调用size()、isEmpty()等查询方法时\",\"遍历集合视图时(如keySet()、entrySet())\",\"这种策略避免了专门的清理线程，简化了实现并提高了并发性能，但可能导致已回收键对应的条目不会立即从表中移除。\"]},\"2689\":{\"h\":\"3.3 性能权衡\",\"t\":[\"与HashMap相比，WeakHashMap在性能上有以下特点：\",\"插入性能：略低于HashMap，因为需要创建WeakReference包装键\",\"查询性能：类似HashMap，但需要额外处理过期条目\",\"内存占用：通常更低，因为不再使用的键值对会被自动回收\",\"GC影响：GC可能会导致条目被移除，影响迭代行为\"]},\"2690\":{\"h\":\"避坑指南\"},\"2691\":{\"h\":\"4.1 键的强引用问题\",\"t\":[\"问题：如果键对象仍然被强引用，即使不再需要，WeakHashMap也不会自动移除对应的条目。\",\"解决方案：确保只将临时对象或明确希望被自动回收的对象作为WeakHashMap的键，避免意外的强引用。\",\"// 错误示例：字符串常量池中的字符串是强引用，不会被回收 WeakHashMap<String, Object> map = new WeakHashMap<>(); map.put(\\\"permanentKey\\\", new Object()); // 键是常量池中的字符串，永远不会被回收 // 正确示例：使用new创建的字符串对象，可以被回收 WeakHashMap<String, Object> map = new WeakHashMap<>(); map.put(new String(\\\"temporaryKey\\\"), new Object()); // 键是新创建的对象，没有其他强引用时可以被回收\"]},\"2692\":{\"h\":\"4.2 线程安全问题\",\"t\":[\"问题：WeakHashMap不是线程安全的，多线程环境下可能导致并发修改异常或数据不一致。\",\"解决方案：使用Collections.synchronizedMap()包装，或使用ConcurrentHashMap(如果不需要弱引用特性)。\",\"// 线程安全的WeakHashMap Map<K, V> safeMap = Collections.synchronizedMap(new WeakHashMap<>());\"]},\"2693\":{\"h\":\"4.3 值的内存泄漏\",\"t\":[\"问题：虽然键是弱引用，但值是强引用。如果值对象很大且生命周期长，即使键被回收，值也可能导致内存泄漏。\",\"解决方案：考虑使用弱引用包装值，或使用专门的缓存框架如Guava Cache。\",\"// 使用弱引用包装值 WeakHashMap<K, WeakReference<V>> map = new WeakHashMap<>(); map.put(key, new WeakReference<>(value));\"]},\"2694\":{\"h\":\"4.4 迭代行为不可预测\",\"t\":[\"问题：在迭代过程中，GC可能回收键导致条目被移除，产生不可预测的迭代行为。\",\"解决方案：迭代前获取快照，或使用同步块确保迭代过程中不发生GC。\",\"// 获取键集快照后迭代 Set<K> keySet; synchronized (map) { keySet = new HashSet<>(map.keySet()); } for (K key : keySet) { // 使用key访问map }\"]},\"2695\":{\"h\":\"深度思考题\"},\"2696\":{\"h\":\"思考题1：WeakHashMap与HashMap的红黑树实现有何不同？\",\"t\":[\"思考题回答：WeakHashMap在JDK 8及之后的版本中没有像HashMap那样引入红黑树优化。这是因为WeakHashMap的设计目标和使用场景与HashMap不同：\",\"WeakHashMap通常用于存储临时对象，条目数量一般不会太大\",\"键的生命周期不确定，红黑树的维护成本可能超过其带来的性能收益\",\"频繁的GC回收可能导致树结构频繁重组，降低性能\",\"如果需要高性能的大容量弱引用映射，可能需要考虑第三方库或自定义实现。\"]},\"2697\":{\"h\":\"思考题2：如何实现一个线程安全的WeakHashMap？\",\"t\":[\"思考题回答：实现线程安全的WeakHashMap可以有以下几种方案：\",\"使用Collections.synchronizedMap()：最简单的方式，但并发性能较差\",\"分段锁实现：类似ConcurrentHashMap的分段锁机制，将表分成多个段，每个段独立加锁\",\"读写锁：使用ReentrantReadWriteLock分离读写操作，提高并发读性能\",\"ConcurrentReferenceHashMap：Guava库提供的并发引用映射实现，比WeakHashMap更适合高并发场景\",\"以下是一个基于读写锁的简单实现：\",\"public class ConcurrentWeakHashMap<K, V> { private final WeakHashMap<K, V> map = new WeakHashMap<>(); private final ReentrantReadWriteLock rwLock = new ReentrantReadWriteLock(); private final Lock readLock = rwLock.readLock(); private final Lock writeLock = rwLock.writeLock(); public V get(K key) { readLock.lock(); try { return map.get(key); } finally { readLock.unlock(); } } public V put(K key, V value) { writeLock.lock(); try { return map.put(key, value); } finally { writeLock.unlock(); } } // 其他方法... }\"]},\"2698\":{\"h\":\"思考题3：WeakHashMap、SoftReference和PhantomReference在缓存实现中有何区别？\",\"t\":[\"思考题回答：在缓存实现中，这三种引用类型有明显区别：\",\"WeakHashMap(弱引用)：键被GC时立即回收，适合存储临时对象缓存\",\"SoftReference(软引用)：内存不足时才回收，适合实现内存敏感的缓存\",\"PhantomReference(虚引用)：仅用于跟踪对象回收，无法通过虚引用获取对象，不适合缓存\",\"选择建议：\",\"频繁使用且内存占用小的对象：WeakHashMap\",\"不常使用但内存占用大的对象：SoftReference\",\"需要在对象回收前执行清理操作：PhantomReference\",\"Java 9引入的Cleaner API结合PhantomReference提供了更灵活的对象清理机制，可以替代finalize()方法。\"]},\"2699\":{\"h\":\"1.4.2 时间复杂度\"},\"2700\":{\"h\":\"核心理论\"},\"2701\":{\"h\":\"1.1 时间复杂度定义与表示法\",\"t\":[\"时间复杂度是衡量算法执行时间随输入规模增长的变化趋势，通常使用大O符号（O-notation）表示。它描述了在最坏情况下算法执行步骤的数量级，忽略常数因子和低阶项。\"]},\"2702\":{\"h\":\"1.2 常见时间复杂度类型\",\"t\":[\"复杂度\",\"名称\",\"增长速率\",\"典型算法\",\"O(1)\",\"常数时间\",\"恒定\",\"数组访问、哈希表查找\",\"O(log n)\",\"对数时间\",\"缓慢增长\",\"二分查找、平衡树操作\",\"O(n)\",\"线性时间\",\"线性增长\",\"线性查找、数组遍历\",\"O(n log n)\",\"线性对数时间\",\"温和增长\",\"快速排序、归并排序\",\"O(n²)\",\"平方时间\",\"较快增长\",\"冒泡排序、选择排序\",\"O(n³)\",\"立方时间\",\"快速增长\",\"矩阵乘法\",\"O(2ⁿ)\",\"指数时间\",\"爆炸增长\",\"子集生成、汉诺塔\",\"O(n!)\",\"阶乘时间\",\"极速增长\",\"全排列生成\"]},\"2703\":{\"h\":\"1.3 空间复杂度基础\",\"t\":[\"空间复杂度用于衡量算法在执行过程中所需存储空间的增长趋势，同样使用大O符号表示。包括输入空间、辅助空间和输出空间三部分，通常关注辅助空间的增长情况。\"]},\"2704\":{\"h\":\"1.4 摊还时间复杂度\",\"t\":[\"摊还时间复杂度用于分析在一系列操作中，即使个别操作具有较高复杂度，但平均下来每个操作的复杂度较低的情况。典型例子包括动态数组的扩容和栈的多 pop 操作。\",\"/** * 动态数组扩容的摊还复杂度分析 * 平均每次add操作的摊还复杂度为O(1) */ public class DynamicArray { private int[] array; private int size; private int capacity; public DynamicArray() { capacity = 4; array = new int[capacity]; size = 0; } public void add(int element) { if (size == capacity) { // 扩容操作，复杂度O(n) capacity *= 2; int[] newArray = new int[capacity]; System.arraycopy(array, 0, newArray, 0, size); array = newArray; } // 普通添加操作，复杂度O(1) array[size++] = element; } }\"]},\"2705\":{\"h\":\"代码实践\"},\"2706\":{\"h\":\"2.1 复杂度分析实例\"},\"2707\":{\"h\":\"2.1.1 常数时间复杂度O(1)\",\"t\":[\"/** * 交换数组中两个元素 * @param arr 数组 * @param i 索引i * @param j 索引j * 时间复杂度：O(1)，无论数组大小，操作步骤固定 */ public void swap(int[] arr, int i, int j) { if (i < 0 || i >= arr.length || j < 0 || j >= arr.length) { throw new IndexOutOfBoundsException(); } int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; }\"]},\"2708\":{\"h\":\"2.1.2 线性时间复杂度O(n)\",\"t\":[\"/** * 查找数组中的最大值 * @param arr 输入数组 * @return 最大值 * 时间复杂度：O(n)，需遍历整个数组 */ public int findMax(int[] arr) { if (arr == null || arr.length == 0) { throw new IllegalArgumentException(\\\"Array must not be null or empty\\\"); } int max = arr[0]; for (int i = 1; i < arr.length; i++) { if (arr[i] > max) { max = arr[i]; } } return max; }\"]},\"2709\":{\"h\":\"2.1.3 平方时间复杂度O(n²)\",\"t\":[\"/** * 冒泡排序算法 * @param arr 待排序数组 * 时间复杂度：O(n²)，双层嵌套循环 */ public void bubbleSort(int[] arr) { if (arr == null || arr.length <= 1) { return; } for (int i = 0; i < arr.length - 1; i++) { boolean swapped = false; for (int j = 0; j < arr.length - 1 - i; j++) { if (arr[j] > arr[j + 1]) { // 交换元素 int temp = arr[j]; arr[j] = arr[j + 1]; arr[j + 1] = temp; swapped = true; } } // 如果没有交换，说明数组已排序完成 if (!swapped) { break; } } }\"]},\"2710\":{\"h\":\"2.1.4 对数时间复杂度O(log n)\",\"t\":[\"/** * 二分查找算法 * @param arr 已排序数组 * @param target 目标值 * @return 目标值索引，未找到返回-1 * 时间复杂度：O(log n)，每次查找范围减半 */ public int binarySearch(int[] arr, int target) { if (arr == null || arr.length == 0) { return -1; } int left = 0; int right = arr.length - 1; while (left <= right) { int mid = left + (right - left) / 2; // 避免溢出 if (arr[mid] == target) { return mid; } else if (arr[mid] < target) { left = mid + 1; } else { right = mid - 1; } } return -1; }\"]},\"2711\":{\"h\":\"2.2 递归算法复杂度分析\",\"t\":[\"/** * 斐波那契数列递归实现 * @param n 数列索引 * @return 第n个斐波那契数 * 时间复杂度：O(2ⁿ)，指数级增长 * 空间复杂度：O(n)，递归调用栈深度 */ public int fibonacci(int n) { if (n <= 1) { return n; } return fibonacci(n - 1) + fibonacci(n - 2); } /** * 优化后的斐波那契数列（尾递归） * @param n 数列索引 * @return 第n个斐波那契数 * 时间复杂度：O(n)，线性增长 * 空间复杂度：O(1)，常数空间（若编译器支持尾递归优化） */ public int fibonacciOptimized(int n) { return fibonacciTail(n, 0, 1); } private int fibonacciTail(int n, int a, int b) { if (n == 0) return a; if (n == 1) return b; return fibonacciTail(n - 1, b, a + b); }\"]},\"2712\":{\"h\":\"2.3 集合框架操作复杂度分析\",\"t\":[\"/** * 不同集合的常见操作复杂度对比 */ public class CollectionComplexityDemo { public static void main(String[] args) { // ArrayList操作复杂度 List<Integer> arrayList = new ArrayList<>(); arrayList.add(1); // O(1) amortized arrayList.get(0); // O(1) arrayList.remove(0); // O(n) arrayList.contains(1); // O(n) // LinkedList操作复杂度 List<Integer> linkedList = new LinkedList<>(); linkedList.add(1); // O(1) linkedList.get(0); // O(n) linkedList.remove(0); // O(1) linkedList.contains(1); // O(n) // HashSet操作复杂度 Set<Integer> hashSet = new HashSet<>(); hashSet.add(1); // O(1) average hashSet.contains(1); // O(1) average hashSet.remove(1); // O(1) average // TreeSet操作复杂度 Set<Integer> treeSet = new TreeSet<>(); treeSet.add(1); // O(log n) treeSet.contains(1); // O(log n) treeSet.remove(1); // O(log n) } }\"]},\"2713\":{\"h\":\"设计思想\"},\"2714\":{\"h\":\"3.1 复杂度优化策略\"},\"2715\":{\"h\":\"3.1.1 空间换时间\",\"t\":[\"通过增加额外存储空间来降低时间复杂度，如哈希表的使用：\",\"/** * 两数之和问题：空间换时间优化 * @param nums 输入数组 * @param target 目标和 * @return 两个数的索引 * 时间复杂度：O(n)，空间复杂度：O(n) */ public int[] twoSum(int[] nums, int target) { Map<Integer, Integer> numMap = new HashMap<>(); for (int i = 0; i < nums.length; i++) { int complement = target - nums[i]; if (numMap.containsKey(complement)) { return new int[] { numMap.get(complement), i }; } numMap.put(nums[i], i); } throw new IllegalArgumentException(\\\"No solution\\\"); }\"]},\"2716\":{\"h\":\"3.1.2 时间换空间\",\"t\":[\"在内存受限情况下，通过增加计算时间来减少空间占用，如斐波那契数列的迭代实现：\",\"/** * 斐波那契数列迭代实现（时间换空间） * @param n 数列索引 * @return 第n个斐波那契数 * 时间复杂度：O(n)，空间复杂度：O(1) */ public int fibonacciIterative(int n) { if (n <= 1) return n; int a = 0, b = 1, c; for (int i = 2; i <= n; i++) { c = a + b; a = b; b = c; } return b; }\"]},\"2717\":{\"h\":\"3.2 复杂度分析在系统设计中的应用\",\"t\":[\"在大型系统设计中，时间复杂度分析有助于选择合适的数据结构和算法：\",\"高频查询场景：选择O(1)或O(log n)复杂度的数据结构（哈希表、平衡树）\",\"大数据量处理：避免O(n²)及以上复杂度的算法\",\"实时系统：严格控制时间复杂度上限\"]},\"2718\":{\"h\":\"避坑指南\"},\"2719\":{\"h\":\"4.1 常见复杂度分析错误\"},\"2720\":{\"h\":\"4.1.1 忽略常数因子\",\"t\":[\"虽然大O表示法忽略常数因子，但在实际工程中，当输入规模较小时，常数因子可能显著影响性能。\"]},\"2721\":{\"h\":\"4.1.2 混淆最好、最坏和平均情况\",\"t\":[\"分析算法时需明确说明是哪种情况的复杂度：\",\"最好情况：最理想输入下的复杂度\",\"最坏情况：最不利输入下的复杂度\",\"平均情况：所有可能输入的期望复杂度\",\"/** * 顺序查找算法 * @param arr 数组 * @param target 目标值 * @return 目标值索引，未找到返回-1 * 最好情况：O(1)（第一个元素即目标） * 最坏情况：O(n)（最后一个元素或不存在） * 平均情况：O(n) */ public int sequentialSearch(int[] arr, int target) { for (int i = 0; i < arr.length; i++) { if (arr[i] == target) { return i; } } return -1; }\"]},\"2722\":{\"h\":\"4.2 面试中的复杂度陷阱\"},\"2723\":{\"h\":\"4.2.1 隐藏的复杂度\",\"t\":[\"某些看似简单的操作可能隐藏着较高的复杂度：\",\"// 看似O(n)，实则O(n²)，因为字符串拼接每次都会创建新对象 public String concatenateStrings(List<String> strings) { String result = \\\"\\\"; for (String s : strings) { result += s; // 每次拼接都是O(k)，k为当前字符串长度 } return result; } // 优化后：O(n)，使用StringBuilder避免重复创建对象 public String concatenateStringsOptimized(List<String> strings) { StringBuilder sb = new StringBuilder(); for (String s : strings) { sb.append(s); } return sb.toString(); }\"]},\"2724\":{\"h\":\"4.2.2 递归调用栈溢出风险\",\"t\":[\"递归算法虽然简洁，但可能导致栈溢出：\",\"// 递归过深会导致StackOverflowError public long factorial(int n) { if (n == 0) return 1; return n * factorial(n - 1); } // 优化：使用迭代或增加尾递归优化 public long factorialIterative(int n) { long result = 1; for (int i = 1; i <= n; i++) { result *= i; } return result; }\"]},\"2725\":{\"h\":\"深度思考题\"},\"2726\":{\"h\":\"思考题1：如何分析嵌套循环的时间复杂度？\",\"t\":[\"思考题回答：嵌套循环的时间复杂度分析需考虑各层循环变量之间的关系：\",\"独立循环变量：时间复杂度为各层循环次数的乘积，如for(i=0;i<n;i++){for(j=0;j<m;j++){...}}的复杂度为O(n×m)\",\"循环变量相关：如for(i=0;i<n;i++){for(j=i;j<n;j++){...}}的复杂度为O(n²/2)=O(n²)\",\"指数级增长：如递归嵌套或循环变量按指数增长，复杂度可能为O(2ⁿ)或O(n!)\",\"分析时需关注循环条件和迭代步长，步长为2的倍数通常意味着对数复杂度。\"]},\"2727\":{\"h\":\"思考题2：如何在不使用额外空间的情况下优化时间复杂度？\",\"t\":[\"思考题回答：无额外空间优化时间复杂度的常用策略：\",\"原地算法：直接修改输入数据，如原地排序（快速排序、堆排序）\",\"双指针技术：使用两个指针遍历数据，如链表反转、数组去重\",\"数学变换：通过数学公式减少计算步骤，如高斯求和公式\",\"位运算：利用位操作替代算术运算，如使用异或进行交换\",\"示例：使用双指针技术实现O(n)时间复杂度、O(1)空间复杂度的数组反转：\",\"public void reverseArray(int[] arr) { if (arr == null || arr.length <= 1) return; int left = 0, right = arr.length - 1; while (left < right) { // 不使用额外变量交换元素 arr[left] = arr[left] ^ arr[right]; arr[right] = arr[left] ^ arr[right]; arr[left] = arr[left] ^ arr[right]; left++; right--; } }\"]},\"2728\":{\"h\":\"思考题3：如何评估一个系统的性能瓶颈并进行优化？\",\"t\":[\"思考题回答：系统性能瓶颈评估与优化步骤：\",\"性能基准测试：建立性能指标基线，如响应时间、吞吐量\",\"性能剖析：使用工具识别瓶颈位置（CPU、内存、IO或网络）\",\"复杂度分析：检查关键算法和数据结构的时间/空间复杂度\",\"针对性优化： \",\"CPU瓶颈：优化算法复杂度，减少计算量\",\"内存瓶颈：优化数据结构，减少内存占用\",\"IO瓶颈：增加缓存，减少IO操作\",\"网络瓶颈：优化数据传输格式和协议\",\"验证优化效果：重新测试并与基线对比\",\"持续监控：建立长期性能监控机制\",\"实际案例：电商系统商品搜索优化可采用\\\"倒排索引+缓存+异步更新\\\"策略，将O(n)的全文搜索优化为O(log n)的索引查找，同时通过缓存减轻数据库压力。\"]},\"2729\":{\"h\":\"1.4.1 三大特性\"},\"2730\":{\"h\":\"概述\",\"t\":[\"面向对象编程（OOP）的三大核心特性是封装（Encapsulation）、继承（Inheritance）和多态（Polymorphism）。这些特性共同构成了面向对象设计的基础，帮助开发者构建模块化、可维护和可扩展的代码。\"]},\"2731\":{\"h\":\"知识要点\"},\"2732\":{\"h\":\"2.1 封装\",\"t\":[\"封装是指将对象的状态（属性）和行为（方法）捆绑在一起，并通过访问控制修饰符限制对内部实现的直接访问，仅暴露必要的接口。\"]},\"2733\":{\"h\":\"2.1.1 访问控制修饰符\",\"t\":[\"Java提供四种访问控制级别，从严格到宽松依次为：\",\"private：仅本类可见\",\"默认（package-private）：本包可见\",\"protected：本包及子类可见\",\"public：全局可见\",\"public class User { // 私有属性，仅本类可直接访问 private String username; private int age; // 公共getter方法，控制属性访问 public String getUsername() { return username; } // 公共setter方法，控制属性修改 public void setUsername(String username) { // 可以添加验证逻辑 if (username != null && username.length() <= 20) { this.username = username; } } // 省略age的getter和setter }\"]},\"2734\":{\"h\":\"2.1.2 JavaBean规范\",\"t\":[\"JavaBean是遵循特定规范的Java类，是封装的典型应用：\",\"类必须是公共的（public）\",\"属性私有化（private）\",\"提供公共的getter/setter方法\",\"提供无参构造方法\",\"public class Student implements Serializable { private String id; private String name; private int score; // 无参构造方法 public Student() {} // 有参构造方法 public Student(String id, String name) { this.id = id; this.name = name; } // getter和setter方法 public String getId() { return id; } public void setId(String id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getScore() { return score; } public void setScore(int score) { this.score = score; } }\"]},\"2735\":{\"h\":\"2.2 继承\",\"t\":[\"继承允许一个类（子类）继承另一个类（父类）的属性和方法，实现代码复用和层次化设计。Java中使用extends关键字实现单继承。\"]},\"2736\":{\"h\":\"2.2.1 继承的基本语法\",\"t\":[\"// 父类 public class Animal { protected String name; protected int age; public void eat() { System.out.println(name + \\\"正在进食\\\"); } public void sleep() { System.out.println(name + \\\"正在睡觉\\\"); } } // 子类继承父类 public class Dog extends Animal { // 子类特有属性 private String breed; // 子类特有方法 public void bark() { System.out.println(name + \\\"汪汪叫\\\"); } // 重写父类方法 @Override public void eat() { System.out.println(name + \\\"正在吃骨头\\\"); } }\"]},\"2737\":{\"h\":\"2.2.2 方法重写（Override）\",\"t\":[\"子类可以重写父类的方法，以提供特定实现。重写需满足：\",\"方法名、参数列表必须与父类一致\",\"返回类型必须与父类兼容（JDK7+允许协变返回类型）\",\"访问修饰符不能严于父类\",\"不能抛出比父类更多的 checked 异常\",\"public class Cat extends Animal { @Override public void eat() { System.out.println(name + \\\"正在吃鱼\\\"); } // 错误示例：参数列表与父类不一致，这是重载而非重写 // @Override // public void eat(String food) { // System.out.println(name + \\\"正在吃\\\" + food); // } }\"]},\"2738\":{\"h\":\"2.2.3 super关键字\",\"t\":[\"super关键字用于访问父类的成员和构造方法：\",\"public class Bird extends Animal { private String color; public Bird(String name, int age, String color) { // 调用父类构造方法 super(name, age); this.color = color; } @Override public void eat() { // 调用父类方法 super.eat(); System.out.println(\\\"这只\\\" + color + \\\"的鸟吃得很开心\\\"); } }\"]},\"2739\":{\"h\":\"2.3 多态\",\"t\":[\"多态是指同一操作作用于不同对象时，会产生不同的执行结果。Java通过方法重写和方法重载实现多态。\"]},\"2740\":{\"h\":\"2.3.1 向上转型\",\"t\":[\"子类对象可以赋值给父类引用，这是实现多态的基础：\",\"Animal animal1 = new Dog(); // 向上转型 Animal animal2 = new Cat(); // 向上转型 Animal animal3 = new Bird(); // 向上转型 // 调用相同方法，表现不同行为 animal1.eat(); // 输出：正在吃骨头 animal2.eat(); // 输出：正在吃鱼 animal3.eat(); // 输出：正在进食\"]},\"2741\":{\"h\":\"2.3.2 方法重载（Overload）\",\"t\":[\"在同一个类中，允许存在多个同名方法，只要它们的参数列表不同（参数类型、个数或顺序）：\",\"public class Calculator { // 两个整数相加 public int add(int a, int b) { return a + b; } // 三个整数相加（参数个数不同） public int add(int a, int b, int c) { return a + b + c; } // 两个浮点数相加（参数类型不同） public double add(double a, double b) { return a + b; } // 注意：返回类型不同不足以构成重载 // public double add(int a, int b) { // return a + b; // } }\"]},\"2742\":{\"h\":\"2.3.3 接口与多态\",\"t\":[\"接口是实现多态的重要方式，不同类可以实现相同接口并提供不同实现：\",\"// 定义接口 public interface Shape { double calculateArea(); double calculatePerimeter(); } // 圆形实现 public class Circle implements Shape { private double radius; public Circle(double radius) { this.radius = radius; } @Override public double calculateArea() { return Math.PI * radius * radius; } @Override public double calculatePerimeter() { return 2 * Math.PI * radius; } } // 矩形实现 public class Rectangle implements Shape { private double length; private double width; public Rectangle(double length, double width) { this.length = length; this.width = width; } @Override public double calculateArea() { return length * width; } @Override public double calculatePerimeter() { return 2 * (length + width); } } // 使用多态 public class ShapeCalculator { public static void printShapeInfo(Shape shape) { System.out.println(\\\"面积: \\\" + shape.calculateArea()); System.out.println(\\\"周长: \\\" + shape.calculatePerimeter()); } public static void main(String[] args) { Shape circle = new Circle(5); Shape rectangle = new Rectangle(4, 6); printShapeInfo(circle); // 输出圆形的面积和周长 printShapeInfo(rectangle); // 输出矩形的面积和周长 } }\"]},\"2743\":{\"h\":\"知识扩展\"},\"2744\":{\"h\":\"3.1 设计思想\"},\"2745\":{\"h\":\"3.1.1 里氏替换原则\",\"t\":[\"任何父类出现的地方，都可以用子类替换，且不会影响程序的正确性。这要求子类不能改变父类的预期行为。\",\"反例：\",\"public class Rectangle { protected int width; protected int height; public void setWidth(int width) { this.width = width; } public void setHeight(int height) { this.height = height; } public int getArea() { return width * height; } } // 违反里氏替换原则的正方形类 public class Square extends Rectangle { @Override public void setWidth(int width) { this.width = width; this.height = width; // 修改了父类的行为 } @Override public void setHeight(int height) { this.width = height; this.height = height; // 修改了父类的行为 } }\",\"解决方案：使用组合而非继承，或重新设计类层次结构。\"]},\"2746\":{\"h\":\"3.1.2 开闭原则\",\"t\":[\"软件实体（类、模块、函数等）应该对扩展开放，对修改关闭。通过多态可以很好地实现这一原则。\",\"// 符合开闭原则的设计 public interface Payment { void pay(double amount); } public class Alipay implements Payment { @Override public void pay(double amount) { System.out.println(\\\"支付宝支付: \\\" + amount + \\\"元\\\"); } } public class WechatPay implements Payment { @Override public void pay(double amount) { System.out.println(\\\"微信支付: \\\" + amount + \\\"元\\\"); } } // 新增支付方式时无需修改现有代码 public class UnionPay implements Payment { @Override public void pay(double amount) { System.out.println(\\\"银联支付: \\\" + amount + \\\"元\\\"); } }\"]},\"2747\":{\"h\":\"3.2 避坑指南\"},\"2748\":{\"h\":\"3.2.1 继承滥用\",\"t\":[\"问题：过度使用继承导致类层次结构复杂，耦合度高。 解决方案：优先考虑组合而非继承。组合是\\\"有一个\\\"关系，继承是\\\"是一个\\\"关系。\",\"// 继承方式（可能不合适） public class Bird extends Animal { private Flyable flyable; // ... } // 组合方式（更灵活） public class Bird extends Animal { private Flyable flyable; public Bird(Flyable flyable) { this.flyable = flyable; } public void fly() { flyable.fly(); } } public interface Flyable { void fly(); } public class HighFly implements Flyable { @Override public void fly() { System.out.println(\\\"高空飞行\\\"); } } public class LowFly implements Flyable { @Override public void fly() { System.out.println(\\\"低空飞行\\\"); } }\"]},\"2749\":{\"h\":\"3.2.2 多态误用\",\"t\":[\"问题：向下转型不安全，可能导致ClassCastException。 解决方案：使用instanceof关键字进行类型检查。\",\"public void doSomething(Animal animal) { if (animal instanceof Dog) { Dog dog = (Dog) animal; // 安全的向下转型 dog.bark(); } else if (animal instanceof Cat) { Cat cat = (Cat) animal; cat.meow(); } }\"]},\"2750\":{\"h\":\"3.2.3 封装过度\",\"t\":[\"问题：将所有属性都私有化并提供简单的getter/setter，实际上破坏了封装。 解决方案：暴露行为而非状态，将业务逻辑封装在对象内部。\",\"// 不好的设计 public class BankAccount { private double balance; public double getBalance() { return balance; } public void setBalance(double balance) { this.balance = balance; } } // 好的设计 public class BankAccount { private double balance; public void deposit(double amount) { if (amount > 0) { balance += amount; } } public void withdraw(double amount) { if (amount > 0 && amount <= balance) { balance -= amount; } } public double getBalance() { return balance; } }\"]},\"2751\":{\"h\":\"3.3 深度思考题\"},\"2752\":{\"h\":\"思考题1：重载和重写的区别是什么？\",\"t\":[\"回答：\",\"重载（Overload）：发生在同一个类中，方法名相同，参数列表不同（类型、个数、顺序），与返回类型和访问修饰符无关。是编译时多态。\",\"重写（Override）：发生在父子类中，方法名、参数列表、返回类型必须相同，访问修饰符不能严于父类，不能抛出更多checked异常。是运行时多态。\"]},\"2753\":{\"h\":\"思考题2：Java为什么不支持多继承？\",\"t\":[\"回答： Java不支持类的多继承，主要是为了避免菱形继承问题（钻石问题）。当一个类同时继承两个父类，而这两个父类又继承自同一个祖父类时，如果祖父类的方法被子类重写，子类将无法确定应该继承哪个父类的方法。\",\"Java通过接口实现了多继承的功能，一个类可以实现多个接口，从而避免了菱形继承问题，因为接口只定义方法签名，没有具体实现。\"]},\"2754\":{\"h\":\"思考题3：如何理解\\\"多态是封装和继承的延伸\\\"？\",\"t\":[\"回答： 封装隐藏了对象的内部实现，继承实现了代码复用和类层次结构，而多态则在这两者的基础上实现了接口的统一和行为的多样化。\",\"多态依赖于继承（或接口实现）来建立类型关系，依赖于封装来隐藏具体实现细节。通过多态，我们可以编写不依赖于具体类型的代码，而是依赖于抽象类型，从而提高代码的灵活性和可扩展性。\",\"例如，通过面向接口编程，我们可以在不修改现有代码的情况下，添加新的实现类，这正是多态带来的好处，也是封装和继承无法单独实现的。\"]},\"2755\":{\"h\":\"1.4.2 类&包&变量\"},\"2756\":{\"h\":\"概述\",\"t\":[\"Java面向对象编程的基础构建块包括类、包和变量三大核心元素。类是对象的模板，封装了数据和行为；包用于组织类并控制访问权限；变量则是程序中存储数据的基本单元。这三个概念相互关联，共同构成了Java程序的基本结构。\"]},\"2757\":{\"h\":\"知识要点\"},\"2758\":{\"h\":\"2.1 类\",\"t\":[\"类是Java面向对象编程的核心，是创建对象的模板。一个类通常包含属性（成员变量）和方法（成员函数）。\"]},\"2759\":{\"h\":\"2.1.1 类的定义与结构\",\"t\":[\"在Java中，类使用class关键字定义，基本结构如下：\",\"/** * 企业级用户实体类 * 遵循JavaBean规范，实现基本的用户信息管理 */ public class User { // 成员变量（属性） private Long id; private String username; private String email; private boolean isActive; // 构造方法 public User() { // 无参构造方法 } public User(Long id, String username) { this.id = id; this.username = username; } // 成员方法（行为） /** * 获取用户全名 * @return 格式化的用户全名 */ public String getFullName() { return username; } /** * 激活用户账号 */ public void activate() { this.isActive = true; } // 省略getter和setter方法 }\"]},\"2760\":{\"h\":\"2.1.2 类的加载机制\",\"t\":[\"当Java程序运行时，JVM需要将类加载到内存中。类加载过程分为三个主要阶段：加载（Loading）、链接（Linking）和初始化（Initialization）。\"]},\"2761\":{\"h\":\"2.1.3 类的修饰符\",\"t\":[\"Java类支持多种修饰符，用于控制类的访问权限和行为特性：\",\"// 公共类：可被任何包访问 public class PublicClass {} // 抽象类：不能实例化，只能被继承 abstract class AbstractClass { // 抽象方法：必须在子类中实现 public abstract void abstractMethod(); } // 最终类：不能被继承 final class FinalClass {} // 普通类：仅包内可见 class DefaultClass {}\"]},\"2762\":{\"h\":\"2.2 包\",\"t\":[\"包（Package）是Java中用于组织类和接口的命名空间，解决了类名冲突问题，并提供了访问控制机制。\"]},\"2763\":{\"h\":\"2.2.1 包的命名规范\",\"t\":[\"Java包名通常采用反转域名的方式命名，全部小写，例如：com.company.project.module。\",\"企业级项目包结构示例：\",\"com.company.project ├── controller // 控制器层 ├── service // 服务层 │ ├── impl // 服务实现 ├── dao // 数据访问层 ├── model // 数据模型 │ ├── entity // 实体类 │ ├── dto // 数据传输对象 │ └── vo // 视图对象 ├── util // 工具类 └── config // 配置类\"]},\"2764\":{\"h\":\"2.3 变量\",\"t\":[\"变量是Java程序中存储数据的基本单元，根据作用域和生命周期可分为不同类型。\"]},\"2765\":{\"h\":\"2.2.2 包的访问控制\",\"t\":[\"Java通过访问修饰符控制包内类的可见性：\",\"public：对所有类可见\",\"protected：在本包和子类可见\",\"默认（包私有）：仅在本包可见\",\"private：仅对本类可见\",\"包级私有类示例：\",\"// 包级私有工具类，仅在本包内可见 class PackageUtils { static String formatDate(Date date) { SimpleDateFormat sdf = new SimpleDateFormat(\\\"yyyy-MM-dd\\\"); return sdf.format(date); } }\"]},\"2766\":{\"h\":\"2.3.1 数据类型\",\"t\":[\"Java变量类型分为基本类型和引用类型两大类：\",\"基本类型（8种）：\",\"整数类型：byte(1字节), short(2), int(4), long(8)\",\"浮点类型：float(4), double(8)\",\"字符类型：char(2)\",\"布尔类型：boolean(1位)\",\"引用类型：\",\"类（Class）\",\"接口（Interface）\",\"数组（Array）\"]},\"2767\":{\"h\":\"2.3.2 变量作用域\",\"t\":[\"Java变量根据作用域可分为：\",\"类变量（静态变量）：用static修饰，属于类，在类加载时初始化\",\"实例变量：属于对象，在对象创建时初始化\",\"局部变量：在方法或代码块中定义，仅在执行期间有效\",\"块变量：在代码块中定义，仅在该代码块执行期间有效\"]},\"2768\":{\"h\":\"2.2.3 包导入语法\",\"t\":[\"Java使用import语句导入其他包的类：\",\"// 导入单个类 import java.util.Date; // 导入整个包 import java.util.*; // 静态导入 import static java.lang.Math.PI; import static java.util.Arrays.sort;\",\"最佳实践：避免使用通配符*导入，明确指定所需类以提高代码可读性。\"]},\"2769\":{\"h\":\"3.1 设计思想\"},\"2770\":{\"h\":\"3.1.1 单一职责原则\",\"t\":[\"一个类应该只有一个引起它变化的原因，即一个类只负责一项职责。这有助于提高代码的内聚性和可维护性。\",\"反例：\",\"// 违反单一职责原则：一个类负责用户管理和订单管理 public class UserOrderService { public void createUser(User user) { ... } public void updateUser(User user) { ... } public void createOrder(Order order) { ... } public void cancelOrder(Long orderId) { ... } }\",\"正例：\",\"// 用户服务：只负责用户管理 public class UserService { public void createUser(User user) { ... } public void updateUser(User user) { ... } } // 订单服务：只负责订单管理 public class OrderService { public void createOrder(Order order) { ... } public void cancelOrder(Long orderId) { ... } }\"]},\"2771\":{\"h\":\"3.1.3 封装原则\",\"t\":[\"封装是面向对象的核心特性之一，通过隐藏内部实现细节，只暴露必要的接口来提高代码安全性和可维护性。\",\"最佳实践：\",\"成员变量私有化（private）\",\"通过公共方法（getter/setter）控制访问\",\"对敏感操作进行权限检查\"]},\"2772\":{\"h\":\"3.1.4 接口隔离原则\",\"t\":[\"客户端不应该依赖它不需要的接口，一个类对另一个类的依赖应该建立在最小的接口上。\"]},\"2773\":{\"h\":\"3.2 避坑指南\"},\"2774\":{\"h\":\"3.2.2 变量作用域过大\",\"t\":[\"问题：变量定义在过大作用域，增加意外修改风险 解决方案：局部变量在使用前定义，避免类级别定义仅方法内使用的变量\"]},\"2775\":{\"h\":\"3.2.3 静态变量滥用\",\"t\":[\"问题：过度使用静态变量存储可变状态，导致线程安全问题和测试困难。 解决方案：\",\"静态变量只用于存储不变的常量\",\"避免使用静态变量共享对象状态\",\"考虑使用依赖注入代替静态变量\"]},\"2776\":{\"h\":\"3.2.4 基本类型与包装类型混用\",\"t\":[\"问题：基本类型与包装类型混用可能导致自动装箱/拆箱带来的性能问题或NPE。 解决方案：\",\"集合中只能使用包装类型\",\"注意包装类型的null值处理\",\"优先使用基本类型进行计算\"]},\"2777\":{\"h\":\"3.2.2 变量作用域过大\",\"t\":[\"问题：变量定义在过大作用域，增加意外修改风险 解决方案：局部变量在使用前定义，避免类级别定义仅方法内使用的变量\"]},\"2778\":{\"h\":\"3.3 深度思考题\"},\"2779\":{\"h\":\"思考题2：如何设计一个不可变对象？\",\"t\":[\"回答： 设计不可变对象需遵循以下原则：\",\"类声明为final，防止被继承\",\"所有属性设为final\",\"不提供setter方法\",\"引用类型属性需防御性拷贝\",\"代码示例：\",\"public final class ImmutableUser { private final Long id; private final String username; private final Date birthday; // 构造方法初始化所有属性 public ImmutableUser(Long id, String username, Date birthday) { this.id = id; this.username = username; // 防御性拷贝 this.birthday = new Date(birthday.getTime()); } // 只提供getter方法 public Long getId() { return id; } public String getUsername() { return username; } // 返回不可变的日期对象 public Date getBirthday() { return new Date(birthday.getTime()); } }\"]},\"2780\":{\"h\":\"思考题3：JDK8中的接口有哪些新特性？\",\"t\":[\"回答： JDK8允许接口包含默认方法（default）和静态方法（static），默认方法需有方法体，实现类可选择性重写。\"]},\"2781\":{\"h\":\"1.4.3 方法&参数\"},\"2782\":{\"h\":\"概述\",\"t\":[\"方法是Java中封装行为的基本单元，参数则是方法与外界交互的数据载体。本章将系统讲解方法的定义规范、参数传递机制、方法重载与重写的区别，以及实战开发中的最佳实践。\"]},\"2783\":{\"h\":\"知识要点\"},\"2784\":{\"h\":\"1. 方法的定义与结构\",\"t\":[\"Java方法由访问修饰符、返回值类型、方法名、参数列表和方法体组成，基本语法如下：\",\"public class MethodDemo { // 无参无返回值方法 public void printHello() { System.out.println(\\\"Hello, Method!\\\"); } // 有参有返回值方法 public int calculateSum(int a, int b) { return a + b; // 方法返回值 } }\",\"方法命名规范：采用小驼峰式命名，动词开头，如getUserInfo()、calculateTotal()，清晰表达方法功能。\"]},\"2785\":{\"h\":\"2. 参数传递机制\",\"t\":[\"Java中方法参数传递严格遵循\\\"值传递\\\"原则：\",\"基本类型：传递值的副本，方法内修改不影响原变量\",\"引用类型：传递引用地址的副本，方法内修改引用对象内容会影响原对象\",\"public class ParameterDemo { public static void main(String[] args) { int num = 10; String str = \\\"Hello\\\"; modifyValue(num); modifyReference(str); System.out.println(num); // 输出：10（基本类型未改变） System.out.println(str); // 输出：Hello（字符串不可变特性） } private static void modifyValue(int a) { a = 20; // 修改的是副本 } private static void modifyReference(String s) { s = \\\"World\\\"; // 引用指向新对象 } }\"]},\"2786\":{\"h\":\"3. 方法重载（Overload）\",\"t\":[\"在同一类中，允许存在多个同名方法，只要参数列表（类型、个数或顺序）不同即可：\",\"public class OverloadDemo { // 整数相加 public int add(int a, int b) { return a + b; } // 浮点数相加（参数类型不同） public double add(double a, double b) { return a + b; } // 三个整数相加（参数个数不同） public int add(int a, int b, int c) { return a + b + c; } }\",\"重载判断依据：仅看参数列表，与返回值类型和访问修饰符无关。\"]},\"2787\":{\"h\":\"知识扩展\"},\"2788\":{\"h\":\"设计思想\",\"t\":[\"单一职责原则：一个方法只做一件事，提高可读性和可维护性\",\"最小知识原则：方法参数越少越好，避免传递不需要修改的对象\",\"防御式编程：对方法参数进行合法性校验\"]},\"2789\":{\"h\":\"避坑指南\",\"t\":[\"递归调用风险：确保有明确终止条件，避免栈溢出\",\"可变参数陷阱：可变参数必须作为方法最后一个参数，且一个方法只能有一个可变参数\",\"自动装箱开销：避免在循环中频繁使用包装类型作为方法参数\"]},\"2790\":{\"h\":\"深度思考题\",\"t\":[\"问题：为什么Java中没有真正的引用传递？ 回答：Java设计哲学强调简单安全，值传递模型避免了指针操作风险。对于引用类型，传递的是对象地址的副本，而非引用本身，因此严格来说仍是值传递。\"]},\"2791\":{\"h\":\"1.4.4 权限修饰符\"},\"2792\":{\"h\":\"概述\",\"t\":[\"权限修饰符是Java实现封装特性的核心机制，通过控制类、方法和属性的访问范围，保障代码安全性和封装性。本章将详细讲解Java中的四种权限修饰符（private、default、protected、public）的作用范围、使用场景及最佳实践。\"]},\"2793\":{\"h\":\"知识要点\"},\"2794\":{\"h\":\"1. 权限修饰符作用范围\",\"t\":[\"Java四种权限修饰符的访问控制范围如下表所示：\",\"修饰符\",\"本类\",\"本包\",\"子类\",\"其他包\",\"private\",\"✅\",\"❌\",\"❌\",\"❌\",\"default\",\"✅\",\"✅\",\"❌\",\"❌\",\"protected\",\"✅\",\"✅\",\"✅\",\"❌\",\"public\",\"✅\",\"✅\",\"✅\",\"✅\"]},\"2795\":{\"h\":\"2. private修饰符\",\"t\":[\"私有修饰符，仅在当前类内部可见，是封装的核心体现：\",\"public class User { private String name; // 私有属性 private int age; // 通过公共方法暴露访问接口 public String getName() { return name; } public void setName(String name) { this.name = name; } }\",\"使用场景：类的属性、内部辅助方法，避免外部直接访问和修改。\"]},\"2796\":{\"h\":\"3. default修饰符（包私有）\",\"t\":[\"无显式修饰符，默认在同一包内可见：\",\"// 包com.example.service package com.example.service; class OrderService { // 包私有类 void processOrder() { // 包私有方法 // 业务逻辑 } }\",\"使用场景：包内组件协作，不对外暴露的实现类。\"]},\"2797\":{\"h\":\"4. protected修饰符\",\"t\":[\"受保护修饰符，允许子类访问父类成员：\",\"// 父类 public class Animal { protected String name; protected void eat() { System.out.println(\\\"动物进食\\\"); } } // 子类 public class Dog extends Animal { public void bark() { name = \\\"小狗\\\"; // 访问父类protected属性 eat(); // 调用父类protected方法 } }\",\"注意：子类只能访问自己继承的protected成员，不能访问其他子类实例的protected成员。\"]},\"2798\":{\"h\":\"5. public修饰符\",\"t\":[\"公共修饰符，全局可见，用于对外提供接口：\",\"public class MathUtils { public static final double PI = 3.1415926; public static int max(int a, int b) { return a > b ? a : b; } }\"]},\"2799\":{\"h\":\"知识扩展\"},\"2800\":{\"h\":\"设计思想\",\"t\":[\"最小权限原则：尽可能使用小范围的权限修饰符，降低组件间耦合\",\"接口隔离原则：public成员应构成最小接口，隐藏内部实现细节\",\"开闭原则：通过protected预留扩展点，允许子类重写扩展功能\"]},\"2801\":{\"h\":\"避坑指南\",\"t\":[\"protected跨包访问陷阱：跨包子类只能通过继承关系访问protected成员，不能通过父类实例直接访问\",\"内部类权限问题：内部类可以访问外部类的private成员，但外部类不能访问内部类的private成员\",\"接口成员权限：接口中定义的成员默认都是public static final，方法默认是public abstract\"]},\"2802\":{\"h\":\"深度思考题\",\"t\":[\"问题：为什么Java不允许在外部类上使用protected修饰符？ 回答：外部类的访问控制主要通过包结构管理，protected修饰符设计初衷是支持继承体系中的成员访问控制。如果允许外部类使用protected，会导致包管理与继承体系的权限控制混淆，违背Java简洁的设计哲学。\"]},\"2803\":{\"h\":\"1.4.5 关键字\"},\"2804\":{\"h\":\"概述\",\"t\":[\"Java关键字是被语言赋予特定含义的保留单词，用于定义程序结构、控制流程和数据类型。本章将系统梳理Java中的53个关键字（JDK8版本），按功能分类讲解其用法、注意事项及编程最佳实践。\"]},\"2805\":{\"h\":\"知识要点\"},\"2806\":{\"h\":\"1. 关键字分类与特性\",\"t\":[\"Java关键字按功能可分为以下几类：\"]},\"2807\":{\"h\":\"（1）访问控制关键字\",\"t\":[\"private: 仅本类可见\",\"protected: 本类、子类及同包可见\",\"public: 全局可见\"]},\"2808\":{\"h\":\"（2）类与方法修饰关键字\",\"t\":[\"class: 声明类\",\"interface: 声明接口\",\"extends: 类继承\",\"implements: 接口实现\",\"static: 静态成员\",\"final: 不可变标记\",\"abstract: 抽象成员\",\"public abstract class Shape { // abstract关键字定义抽象类 public abstract double area(); // 抽象方法 public static void printType() { // static关键字定义静态方法 System.out.println(\\\"This is a shape\\\"); } } public class Circle extends Shape { // extends关键字实现继承 private final double radius; // final关键字定义常量 public Circle(double radius) { this.radius = radius; } @Override public double area() { return Math.PI * radius * radius; } }\"]},\"2809\":{\"h\":\"（3）流程控制关键字\",\"t\":[\"条件分支: if/else/switch/case/default\",\"循环控制: for/while/do/break/continue\",\"异常处理: try/catch/finally/throw/throws\",\"public void processNumber(int num) { switch(num) { // switch-case结构 case 1: System.out.println(\\\"One\\\"); break; case 2: System.out.println(\\\"Two\\\"); break; default: System.out.println(\\\"Other\\\"); } for(int i=0; i<num; i++) { // for循环 if(i % 2 == 0) continue; // continue关键字 System.out.println(i); } }\"]},\"2810\":{\"h\":\"2. 特殊关键字\",\"t\":[\"this: 指代当前对象\",\"super: 指代父类对象\",\"null: 空引用\",\"void: 无返回值\",\"package/import: 包管理\",\"public class Person { private String name; public Person(String name) { this.name = name; // this关键字 } public void printInfo() { System.out.println(\\\"Name: \\\" + name); } }\"]},\"2811\":{\"h\":\"知识扩展\"},\"2812\":{\"h\":\"设计思想\",\"t\":[\"语义化编程：合理使用关键字使代码自文档化\",\"不可变设计：通过final关键字保障数据安全性\",\"接口隔离：使用interface定义清晰的功能边界\"]},\"2813\":{\"h\":\"避坑指南\",\"t\":[\"关键字误用：避免将关键字用作标识符\",\"final修饰引用：final修饰引用类型时，仅保证引用不变，对象内容可变\",\"static与实例成员：静态方法不能直接访问非静态成员\",\"switch穿透：忘记添加break导致case穿透执行\"]},\"2814\":{\"h\":\"深度思考题\",\"t\":[\"问题：为什么Java中没有goto关键字的实际应用？ 回答：Java保留goto作为关键字但未实现其功能，主要出于代码可读性和结构化编程考虑。goto可能导致代码流程混乱，增加维护难度，不符合Java强调的安全性和可读性设计哲学。\"]},\"2815\":{\"h\":\"1.4.6 枚举\"},\"2816\":{\"h\":\"概述\",\"t\":[\"枚举（Enumeration）是Java中一种特殊的引用类型，用于定义固定数量的命名常量集合。JDK5引入枚举类型（enum），提供了类型安全的常量定义方式，替代了传统的常量定义模式。本章将详细讲解枚举的定义语法、核心特性、使用场景及高级应用。\"]},\"2817\":{\"h\":\"知识要点\"},\"2818\":{\"h\":\"1. 枚举的基本定义\",\"t\":[\"枚举使用enum关键字定义，常量之间用逗号分隔，末尾可省略分号：\",\"// 基本枚举定义 public enum Weekday { MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY }\",\"编译期特性：枚举在编译后会生成一个继承java.lang.Enum的类，每个枚举常量都是该类的实例。\"]},\"2819\":{\"h\":\"2. 枚举的核心特性\",\"t\":[\"类型安全：编译期检查，避免常量值错误赋值\",\"不可变：枚举常量在类加载时创建，且不可修改\",\"单例性：每个枚举常量在JVM中只有一个实例\",\"线程安全：枚举常量的初始化是线程安全的\",\"public class EnumDemo { public static void main(String[] args) { Weekday day = Weekday.MONDAY; System.out.println(day); // 输出：MONDAY System.out.println(day.ordinal()); // 输出：0（枚举常量的索引） System.out.println(day.name()); // 输出：MONDAY } }\"]},\"2820\":{\"h\":\"3. 枚举的常用方法\",\"t\":[\"java.lang.Enum提供的核心方法：\",\"values(): 返回所有枚举常量的数组\",\"valueOf(String name): 根据名称获取枚举常量\",\"ordinal(): 返回枚举常量的索引位置\",\"name(): 返回枚举常量的名称\",\"// 枚举遍历 for (Weekday day : Weekday.values()) { System.out.println(day.ordinal() + \\\": \\\" + day.name()); } // 枚举转换 Weekday day = Weekday.valueOf(\\\"FRIDAY\\\");\"]},\"2821\":{\"h\":\"4. 带成员的枚举\",\"t\":[\"枚举可以包含字段、方法和构造函数，增强枚举的功能性：\",\"public enum Season { SPRING(\\\"春季\\\", 1), SUMMER(\\\"夏季\\\", 2), AUTUMN(\\\"秋季\\\", 3), WINTER(\\\"冬季\\\", 4); private final String chineseName; private final int seasonCode; // 私有构造函数 private Season(String chineseName, int seasonCode) { this.chineseName = chineseName; this.seasonCode = seasonCode; } // 自定义方法 public String getChineseName() { return chineseName; } public int getSeasonCode() { return seasonCode; } }\"]},\"2822\":{\"h\":\"5. 枚举与switch结合\",\"t\":[\"枚举是switch语句的理想选择，编译期确保case值的合法性：\",\"public void printSeasonInfo(Season season) { switch (season) { case SPRING: System.out.println(\\\"春暖花开\\\"); break; case SUMMER: System.out.println(\\\"夏日炎炎\\\"); break; case AUTUMN: System.out.println(\\\"秋高气爽\\\"); break; case WINTER: System.out.println(\\\"冬雪皑皑\\\"); break; // 无需default，枚举已覆盖所有可能值 } }\"]},\"2823\":{\"h\":\"知识扩展\"},\"2824\":{\"h\":\"设计思想\",\"t\":[\"替代常量模式：相比public static final常量，枚举提供更强的类型安全\",\"有限状态集合：适合表示固定数量的状态（如星期、季节、订单状态等）\",\"单例实现：枚举是实现单例模式的最佳方式，简洁且避免反射攻击\",\"// 枚举实现单例 public enum Singleton { INSTANCE; public void doSomething() { // 单例业务逻辑 } }\"]},\"2825\":{\"h\":\"避坑指南\",\"t\":[\"避免继承：枚举类默认继承Enum，不能再继承其他类\",\"序列化安全：枚举序列化机制特殊，不会创建新实例，保证单例性\",\"谨慎使用ordinal()：依赖索引位置可能因枚举常量顺序变化导致错误\",\"枚举与反射：反射无法创建枚举实例，newInstance()方法会抛出异常\"]},\"2826\":{\"h\":\"深度思考题\",\"t\":[\"问题：枚举实现的单例模式相比其他方式有哪些优势？ 回答：枚举单例具有以下优势：1. 天然线程安全，无需同步处理；2. 防止反射攻击，Java规范保证反射无法实例化枚举；3. 自动支持序列化，无需重写readResolve()方法；4. 代码简洁，只需声明枚举常量即可实现单例。这使枚举成为实现单例模式的最佳实践。\"]},\"2827\":{\"h\":\"1.5.1 文件流\"},\"2828\":{\"h\":\"概述\",\"t\":[\"文件流是Java IO中用于直接操作文件的流类型，主要包括FileInputStream、FileOutputStream、FileReader和FileWriter四大核心类。它们是所有IO操作的基础，用于实现文件的读取和写入功能。\"]},\"2829\":{\"h\":\"知识要点\"},\"2830\":{\"h\":\"1. 文件流的分类与特点\",\"t\":[\"文件流根据处理数据的单位不同，分为字节文件流和字符文件流：\",\"字节文件流：以字节为单位处理数据，适用于所有类型文件（文本、图片、音频等）\",\"FileInputStream：字节输入流，用于从文件读取字节数据\",\"FileOutputStream：字节输出流，用于向文件写入字节数据\",\"字符文件流：以字符为单位处理数据，仅适用于文本文件\",\"FileReader：字符输入流，用于从文件读取字符数据\",\"FileWriter：字符输出流，用于向文件写入字符数据\"]},\"2831\":{\"h\":\"2. FileInputStream的使用\",\"t\":[\"FileInputStream用于从文件中读取字节数据，常用构造方法和核心方法如下：\",\"import java.io.FileInputStream; import java.io.IOException; /** * FileInputStream使用示例 * 演示如何读取文件内容 */ public class FileInputStreamExample { public static void main(String[] args) { // 声明流对象 FileInputStream fis = null; try { // 创建流对象，指定文件路径 fis = new FileInputStream(\\\"example.txt\\\"); // 读取数据 byte[] buffer = new byte[1024]; int length; StringBuilder content = new StringBuilder(); // 循环读取文件内容，返回-1表示读取结束 while ((length = fis.read(buffer)) != -1) { content.append(new String(buffer, 0, length)); } System.out.println(\\\"文件内容：\\\" + content.toString()); } catch (IOException e) { e.printStackTrace(); } finally { // 关闭流资源 if (fis != null) { try { fis.close(); } catch (IOException e) { e.printStackTrace(); } } } } }\",\"关键要点：\",\"使用read(byte[] buffer)方法可以提高读取效率\",\"必须在finally块中关闭流资源，避免资源泄漏\",\"JDK7+可使用try-with-resources语法自动关闭流\"]},\"2832\":{\"h\":\"3. FileOutputStream的使用\",\"t\":[\"FileOutputStream用于向文件中写入字节数据，常用构造方法和核心方法如下：\",\"import java.io.FileOutputStream; import java.io.IOException; /** * FileOutputStream使用示例 * 演示如何写入数据到文件 */ public class FileOutputStreamExample { public static void main(String[] args) { // 使用try-with-resources语法，自动关闭流 try (FileOutputStream fos = new FileOutputStream(\\\"output.txt\\\")) { String content = \\\"Hello, FileOutputStream!\\\"; byte[] data = content.getBytes(); // 写入数据 fos.write(data); System.out.println(\\\"数据写入成功！\\\"); } catch (IOException e) { e.printStackTrace(); } } }\",\"关键要点：\",\"默认情况下，写入会覆盖文件原有内容\",\"若要追加内容，可使用构造方法FileOutputStream(String name, boolean append)并设置append为true\",\"write(byte[] b)方法可以写入字节数组\"]},\"2833\":{\"h\":\"4. FileReader和FileWriter的使用\",\"t\":[\"字符文件流适用于文本文件的读写，使用方式与字节流类似，但以字符为单位处理数据：\",\"import java.io.FileReader; import java.io.FileWriter; import java.io.IOException; /** * FileReader和FileWriter使用示例 * 演示文本文件的读写操作 */ public class FileReaderWriterExample { public static void main(String[] args) { // 复制文本文件 try (FileReader fr = new FileReader(\\\"source.txt\\\"); FileWriter fw = new FileWriter(\\\"destination.txt\\\")) { char[] buffer = new char[1024]; int length; // 读取并写入数据 while ((length = fr.read(buffer)) != -1) { fw.write(buffer, 0, length); } System.out.println(\\\"文件复制成功！\\\"); } catch (IOException e) { e.printStackTrace(); } } }\",\"关键要点：\",\"字符流会使用默认字符编码，可能导致跨平台问题\",\"推荐使用InputStreamReader和OutputStreamWriter指定字符编码\",\"read(char[] cbuf)和write(char[] cbuf, int off, int len)方法用于字符数组操作\"]},\"2834\":{\"h\":\"知识扩展\"},\"2835\":{\"h\":\"设计思想\",\"t\":[\"文件流设计遵循了以下核心思想：\",\"装饰器模式：基础流（如FileInputStream）可被缓冲流等装饰，增强功能\",\"开闭原则：通过继承InputStream/OutputStream和Reader/Writer抽象类，可扩展新的流类型\",\"资源管理：流资源需要显式关闭，JDK7引入的try-with-resources语法简化了资源管理\"]},\"2836\":{\"h\":\"避坑指南\",\"t\":[\"文件路径问题：\",\"使用绝对路径可避免相对路径带来的问题\",\"Windows系统路径分隔符使用\\\\\\\\或/，Linux/Mac使用/\",\"推荐使用File.separator实现跨平台路径处理\",\"异常处理：\",\"IO操作必须进行异常处理\",\"try-with-resources是推荐的资源管理方式\",\"关闭流操作应放在finally块中，确保执行\",\"性能优化：\",\"避免使用单个字节/字符读写，使用缓冲区提高效率\",\"大文件操作时，合理设置缓冲区大小（通常为1KB~8KB）\",\"及时关闭不再使用的流资源\"]},\"2837\":{\"h\":\"深度思考题\",\"t\":[\"思考题1：如何使用文件流实现大文件的复制，并显示复制进度？\",\"思考题回答： 可以通过以下步骤实现带进度显示的大文件复制：\",\"获取源文件大小\",\"读取数据时累计已复制字节数\",\"计算并显示复制进度百分比\",\"import java.io.FileInputStream; import java.io.FileOutputStream; import java.io.IOException; public class LargeFileCopy { public static void main(String[] args) { String sourcePath = \\\"large_file.iso\\\"; String destPath = \\\"copied_file.iso\\\"; try (FileInputStream fis = new FileInputStream(sourcePath); FileOutputStream fos = new FileOutputStream(destPath)) { long fileSize = fis.available(); byte[] buffer = new byte[8192]; // 8KB缓冲区 int bytesRead; long totalRead = 0; while ((bytesRead = fis.read(buffer)) != -1) { fos.write(buffer, 0, bytesRead); totalRead += bytesRead; // 计算并显示进度 int progress = (int) ((totalRead * 100) / fileSize); System.out.printf(\\\"复制进度：%d%%\\\\r\\\", progress); } System.out.println(\\\"\\\\n文件复制完成！\\\"); } catch (IOException e) { e.printStackTrace(); } } }\",\"思考题2：使用FileWriter写入中文时出现乱码如何解决？\",\"思考题回答： FileWriter使用默认字符编码，可能导致中文乱码。解决方法是使用OutputStreamWriter并显式指定编码：\",\"import java.io.FileOutputStream; import java.io.IOException; import java.io.OutputStreamWriter; import java.nio.charset.StandardCharsets; public class ChineseEncodingExample { public static void main(String[] args) { try (OutputStreamWriter osw = new OutputStreamWriter( new FileOutputStream(\\\"chinese.txt\\\"), StandardCharsets.UTF_8)) { osw.write(\\\"中文内容测试\\\"); System.out.println(\\\"写入成功！\\\"); } catch (IOException e) { e.printStackTrace(); } } }\"]},\"2838\":{\"h\":\"1.5.2 字节流\"},\"2839\":{\"h\":\"概述\",\"t\":[\"字节流是Java IO中最基础的流类型，以字节为单位处理数据，适用于所有类型的文件（文本、图片、音频、视频等）。字节流主要包括InputStream和OutputStream两大抽象基类，以及它们的各种实现类，是整个Java IO体系的基础。\"]},\"2840\":{\"h\":\"知识要点\"},\"2841\":{\"h\":\"1. InputStream抽象类\",\"t\":[\"InputStream是所有输入字节流的超类，定义了基本的字节读取方法：\",\"方法签名\",\"描述\",\"int read()\",\"读取一个字节，返回0-255的整数，若到达流末尾返回-1\",\"int read(byte[] b)\",\"读取多个字节到缓冲区数组b，返回实际读取的字节数\",\"int read(byte[] b, int off, int len)\",\"读取最多len个字节到缓冲区数组b，从偏移量off开始存储\",\"long skip(long n)\",\"跳过并丢弃n个字节的数据\",\"int available()\",\"返回可读取的字节数估计值\",\"void close()\",\"关闭此输入流并释放相关资源\",\"void mark(int readlimit)\",\"在此输入流中标记当前位置\",\"void reset()\",\"将此流重新定位到上次标记的位置\",\"boolean markSupported()\",\"测试此流是否支持mark()和reset()方法\"]},\"2842\":{\"h\":\"2. OutputStream抽象类\",\"t\":[\"OutputStream是所有输出字节流的超类，定义了基本的字节写入方法：\",\"方法签名\",\"描述\",\"void write(int b)\",\"写入指定的字节\",\"void write(byte[] b)\",\"将b.length个字节从数组b写入此输出流\",\"void write(byte[] b, int off, int len)\",\"从数组b的偏移量off开始写入len个字节\",\"void flush()\",\"刷新此输出流并强制写出所有缓冲的输出字节\",\"void close()\",\"关闭此输出流并释放相关资源\"]},\"2843\":{\"h\":\"3. 字节流的基本使用\",\"t\":[\"以下是使用字节流进行文件复制的基础示例：\",\"import java.io.FileInputStream; import java.io.FileOutputStream; import java.io.IOException; /** * 字节流基础使用示例 * 演示如何使用FileInputStream和FileOutputStream复制文件 */ public class BasicByteStreamExample { public static void main(String[] args) { // 源文件和目标文件路径 String sourceFile = \\\"source.jpg\\\"; String destFile = \\\"destination.jpg\\\"; // 声明流对象 FileInputStream fis = null; FileOutputStream fos = null; try { // 创建流对象 fis = new FileInputStream(sourceFile); fos = new FileOutputStream(destFile); // 创建缓冲区 byte[] buffer = new byte[1024]; int bytesRead; // 读取并写入数据 while ((bytesRead = fis.read(buffer)) != -1) { fos.write(buffer, 0, bytesRead); } System.out.println(\\\"文件复制成功！\\\"); } catch (IOException e) { e.printStackTrace(); } finally { // 关闭流资源 try { if (fos != null) fos.close(); if (fis != null) fis.close(); } catch (IOException e) { e.printStackTrace(); } } } }\"]},\"2844\":{\"h\":\"4. 字节数组流\",\"t\":[\"字节数组流用于在内存中操作字节数据，无需实际文件：\",\"import java.io.ByteArrayInputStream; import java.io.ByteArrayOutputStream; import java.io.IOException; /** * 字节数组流示例 * 演示在内存中使用字节流进行数据操作 */ public class ByteArrayStreamExample { public static void main(String[] args) { String originalData = \\\"Hello, ByteArray Streams!\\\"; // 使用ByteArrayOutputStream写入数据到内存 try (ByteArrayOutputStream baos = new ByteArrayOutputStream()) { // 写入数据 baos.write(originalData.getBytes()); // 获取内存中的字节数组 byte[] byteData = baos.toByteArray(); System.out.println(\\\"写入的数据: \\\" + new String(byteData)); // 使用ByteArrayInputStream读取内存中的数据 try (ByteArrayInputStream bais = new ByteArrayInputStream(byteData)) { byte[] buffer = new byte[1024]; int bytesRead = bais.read(buffer); String readData = new String(buffer, 0, bytesRead); System.out.println(\\\"读取的数据: \\\" + readData); } } catch (IOException e) { e.printStackTrace(); } } }\"]},\"2845\":{\"h\":\"5. 数据流\",\"t\":[\"DataInputStream和DataOutputStream允许读取和写入基本Java数据类型：\",\"import java.io.DataInputStream; import java.io.DataOutputStream; import java.io.FileInputStream; import java.io.FileOutputStream; import java.io.IOException; /** * 数据流示例 * 演示如何读写基本数据类型 */ public class DataStreamExample { public static void main(String[] args) { String fileName = \\\"data.dat\\\"; // 写入基本数据类型 try (DataOutputStream dos = new DataOutputStream(new FileOutputStream(fileName))) { dos.writeBoolean(true); dos.writeInt(42); dos.writeDouble(3.14159); dos.writeUTF(\\\"Hello, Data Streams!\\\"); System.out.println(\\\"数据写入完成！\\\"); } catch (IOException e) { e.printStackTrace(); } // 读取基本数据类型 try (DataInputStream dis = new DataInputStream(new FileInputStream(fileName))) { boolean boolValue = dis.readBoolean(); int intValue = dis.readInt(); double doubleValue = dis.readDouble(); String stringValue = dis.readUTF(); System.out.println(\\\"读取的数据:\\\"); System.out.println(\\\"布尔值: \\\" + boolValue); System.out.println(\\\"整数: \\\" + intValue); System.out.println(\\\"双精度数: \\\" + doubleValue); System.out.println(\\\"字符串: \\\" + stringValue); } catch (IOException e) { e.printStackTrace(); } } }\"]},\"2846\":{\"h\":\"知识扩展\"},\"2847\":{\"h\":\"设计思想\",\"t\":[\"字节流设计体现了以下核心思想：\",\"抽象与实现分离：InputStream和OutputStream定义接口，具体子类提供实现\",\"装饰器模式：通过FilterInputStream和FilterOutputStream为基础流添加功能\",\"单一职责：每个流类专注于单一功能（如缓冲、数据转换、文件操作等）\",\"资源管理：流资源需要显式释放，体现了Java的资源管理哲学\"]},\"2848\":{\"h\":\"避坑指南\",\"t\":[\"缓冲区使用：\",\"避免使用read()和write()的单字节操作，性能极低\",\"始终使用带缓冲区的read(byte[])和write(byte[], int, int)方法\",\"合理设置缓冲区大小（通常为1KB~8KB），过大可能浪费内存\",\"异常处理：\",\"IO操作必须捕获或声明IOException\",\"多个流嵌套时，关闭顺序应与创建顺序相反\",\"优先使用try-with-resources语法自动管理资源\",\"流的关闭：\",\"输出流在关闭前应调用flush()确保数据写入\",\"即使发生异常，也要确保流被关闭\",\"可以使用try-with-resources自动关闭实现了AutoCloseable接口的流\",\"文件操作：\",\"使用available()方法获取文件大小时需谨慎，对于网络流可能不准确\",\"操作大文件时，考虑分块处理而非一次性读取到内存\"]},\"2849\":{\"h\":\"深度思考题\",\"t\":[\"思考题1：如何使用字节流实现文件的断点续传功能？\",\"思考题回答： 断点续传可以通过记录已传输字节数，下次从该位置继续传输来实现：\",\"import java.io.FileInputStream; import java.io.FileOutputStream; import java.io.IOException; import java.io.RandomAccessFile; public class ResumeDownloadExample { public static void main(String[] args) { String sourceFile = \\\"large_file.zip\\\"; String targetFile = \\\"downloaded.zip\\\"; long startPosition = getLastDownloadPosition(targetFile); try (FileInputStream fis = new FileInputStream(sourceFile); RandomAccessFile raf = new RandomAccessFile(targetFile, \\\"rw\\\")) { // 跳过已下载的字节 fis.skip(startPosition); raf.seek(startPosition); byte[] buffer = new byte[4096]; int bytesRead; long totalRead = startPosition; long fileSize = fis.available() + startPosition; while ((bytesRead = fis.read(buffer)) != -1) { raf.write(buffer, 0, bytesRead); totalRead += bytesRead; // 更新下载进度 int progress = (int) ((totalRead * 100) / fileSize); System.out.printf(\\\"下载进度: %d%%\\\\r\\\", progress); // 保存当前下载位置（实际应用中可写入配置文件） saveDownloadPosition(targetFile, totalRead); } System.out.println(\\\"\\\\n文件下载完成！\\\"); } catch (IOException e) { e.printStackTrace(); } } private static long getLastDownloadPosition(String fileName) { // 实际应用中应从配置文件读取 return 0; // 简化示例，实际应返回上次中断的位置 } private static void saveDownloadPosition(String fileName, long position) { // 实际应用中应写入配置文件 } }\",\"思考题2：如何检测一个输入流是否支持mark()和reset()方法，并举例说明其应用场景？\",\"思考题回答： 可以使用markSupported()方法检测流是否支持标记和重置功能。这在需要多次读取同一部分数据的场景非常有用：\",\"import java.io.BufferedInputStream; import java.io.FileInputStream; import java.io.IOException; public class MarkResetExample { public static void main(String[] args) { String fileName = \\\"example.txt\\\"; try (BufferedInputStream bis = new BufferedInputStream(new FileInputStream(fileName))) { // 检查是否支持mark/reset if (bis.markSupported()) { System.out.println(\\\"流支持mark和reset操作\\\"); // 读取前5个字节 byte[] first5Bytes = new byte[5]; bis.read(first5Bytes); System.out.println(\\\"前5个字节: \\\" + new String(first5Bytes)); // 标记当前位置 bis.mark(100); // 参数表示在标记位置失效前可读取的最大字节数 // 读取接下来的10个字节 byte[] next10Bytes = new byte[10]; bis.read(next10Bytes); System.out.println(\\\"接下来10个字节: \\\" + new String(next10Bytes)); // 重置到标记位置 bis.reset(); // 再次读取这10个字节 byte[] again10Bytes = new byte[10]; bis.read(again10Bytes); System.out.println(\\\"再次读取的10个字节: \\\" + new String(again10Bytes)); } else { System.out.println(\\\"流不支持mark和reset操作\\\"); } } catch (IOException e) { e.printStackTrace(); } } }\",\"应用场景包括：解析文件格式时需要回溯、实现缓存机制、预览流内容后决定处理方式等。\"]},\"2850\":{\"h\":\"1.5.3 字符流\"},\"2851\":{\"h\":\"概述\",\"t\":[\"字符流是Java IO中以字符为单位处理数据的流类型，专门用于处理文本数据。字符流基于Unicode编码，能够正确处理各种语言的字符，解决了字节流处理文本时可能出现的乱码问题。字符流主要包括Reader和Writer两大抽象基类，以及它们的各种实现类，为文本处理提供了便捷的API。\"]},\"2852\":{\"h\":\"知识要点\"},\"2853\":{\"h\":\"1. Reader抽象类\",\"t\":[\"Reader是所有输入字符流的超类，定义了基本的字符读取方法：\",\"方法签名\",\"描述\",\"int read()\",\"读取单个字符，返回0-65535的整数，若到达流末尾返回-1\",\"int read(char[] cbuf)\",\"读取多个字符到缓冲区数组cbuf，返回实际读取的字符数\",\"int read(char[] cbuf, int off, int len)\",\"读取最多len个字符到缓冲区数组cbuf，从偏移量off开始存储\",\"long skip(long n)\",\"跳过并丢弃n个字符的数据\",\"boolean ready()\",\"判断此流是否已准备好读取\",\"void close()\",\"关闭此输入流并释放相关资源\",\"void mark(int readAheadLimit)\",\"在此输入流中标记当前位置\",\"void reset()\",\"将此流重新定位到上次标记的位置\",\"boolean markSupported()\",\"测试此流是否支持mark()和reset()方法\"]},\"2854\":{\"h\":\"2. Writer抽象类\",\"t\":[\"Writer是所有输出字符流的超类，定义了基本的字符写入方法：\",\"方法签名\",\"描述\",\"void write(int c)\",\"写入单个字符\",\"void write(char[] cbuf)\",\"写入字符数组cbuf的所有字符\",\"void write(char[] cbuf, int off, int len)\",\"从数组cbuf的偏移量off开始写入len个字符\",\"void write(String str)\",\"写入字符串str的所有字符\",\"void write(String str, int off, int len)\",\"从字符串str的偏移量off开始写入len个字符\",\"Writer append(CharSequence csq)\",\"将指定的字符序列追加到此writer\",\"Writer append(CharSequence csq, int start, int end)\",\"将指定字符序列的子序列追加到此writer\",\"Writer append(char c)\",\"追加指定字符到此writer\",\"void flush()\",\"刷新此输出流并强制写出所有缓冲的输出字符\",\"void close()\",\"关闭此输出流并释放相关资源\"]},\"2855\":{\"h\":\"3. 字符流与字节流的转换\",\"t\":[\"InputStreamReader和OutputStreamWriter是字节流与字符流之间的桥梁，允许指定字符编码：\",\"import java.io.FileInputStream; import java.io.FileOutputStream; import java.io.IOException; import java.io.InputStreamReader; import java.io.OutputStreamWriter; import java.nio.charset.StandardCharsets; /** * 字节流与字符流转换示例 * 演示如何指定字符编码读写文本文件 */ public class StreamConversionExample { public static void main(String[] args) { String fileName = \\\"encoded_text.txt\\\"; // 使用指定编码写入文件 try (OutputStreamWriter osw = new OutputStreamWriter( new FileOutputStream(fileName), StandardCharsets.UTF_8)) { osw.write(\\\"Hello, 世界! 这是UTF-8编码的文本。\\\"); System.out.println(\\\"文件写入成功！\\\"); } catch (IOException e) { e.printStackTrace(); } // 使用指定编码读取文件 try (InputStreamReader isr = new InputStreamReader( new FileInputStream(fileName), StandardCharsets.UTF_8)) { char[] buffer = new char[1024]; int charsRead = isr.read(buffer); String content = new String(buffer, 0, charsRead); System.out.println(\\\"文件内容：\\\" + content); } catch (IOException e) { e.printStackTrace(); } } }\"]},\"2856\":{\"h\":\"4. 缓冲字符流\",\"t\":[\"BufferedReader和BufferedWriter提供缓冲功能，显著提高字符流的读写性能：\",\"import java.io.BufferedReader; import java.io.BufferedWriter; import java.io.FileReader; import java.io.FileWriter; import java.io.IOException; /** * 缓冲字符流示例 * 演示高效读写文本文件 */ public class BufferedCharStreamExample { public static void main(String[] args) { String sourceFile = \\\"source.txt\\\"; String destFile = \\\"destination.txt\\\"; try (BufferedReader br = new BufferedReader(new FileReader(sourceFile)); BufferedWriter bw = new BufferedWriter(new FileWriter(destFile))) { String line; int lineNumber = 0; // 按行读取文件内容 while ((line = br.readLine()) != null) { lineNumber++; // 写入行号和内容 bw.write(lineNumber + \\\": \\\" + line); // 写入换行符 bw.newLine(); } System.out.println(\\\"文件复制成功！共复制\\\" + lineNumber + \\\"行\\\"); } catch (IOException e) { e.printStackTrace(); } } }\"]},\"2857\":{\"h\":\"5. 字符数组流和字符串流\",\"t\":[\"CharArrayReader、CharArrayWriter、StringReader和StringWriter用于在内存中操作字符数据：\",\"import java.io.CharArrayReader; import java.io.CharArrayWriter; import java.io.IOException; import java.io.StringReader; import java.io.StringWriter; /** * 内存字符流示例 * 演示在内存中操作字符数据 */ public class MemoryCharStreamExample { public static void main(String[] args) { // 使用CharArrayWriter写入字符数据到内存 try (CharArrayWriter caw = new CharArrayWriter()) { caw.write(\\\"Hello, CharArrayWriter!\\\"); caw.append(\\\" 这是追加的内容。\\\"); // 获取内存中的字符数组 char[] charData = caw.toCharArray(); System.out.println(\\\"CharArrayWriter写入的数据: \\\" + new String(charData)); // 使用CharArrayReader读取内存中的字符数据 try (CharArrayReader car = new CharArrayReader(charData)) { char[] buffer = new char[1024]; int charsRead = car.read(buffer); System.out.println(\\\"CharArrayReader读取的数据: \\\" + new String(buffer, 0, charsRead)); } } catch (IOException e) { e.printStackTrace(); } // 使用StringWriter和StringReader try (StringWriter sw = new StringWriter()) { sw.write(\\\"Hello, StringWriter!\\\"); sw.write(\\\" 这是另一部分内容。\\\"); String stringData = sw.toString(); System.out.println(\\\"StringWriter写入的数据: \\\" + stringData); try (StringReader sr = new StringReader(stringData)) { char[] buffer = new char[1024]; int charsRead = sr.read(buffer); System.out.println(\\\"StringReader读取的数据: \\\" + new String(buffer, 0, charsRead)); } } catch (IOException e) { e.printStackTrace(); } } }\"]},\"2858\":{\"h\":\"知识扩展\"},\"2859\":{\"h\":\"设计思想\",\"t\":[\"字符流设计体现了以下核心思想：\",\"分层设计：基础流处理数据传输，装饰流添加功能（缓冲、编码转换等）\",\"适配器模式：InputStreamReader和OutputStreamWriter充当字节流和字符流之间的适配器\",\"开闭原则：通过抽象类定义接口，具体实现可灵活扩展\",\"关注点分离：字符流专注于文本处理，字节流专注于二进制数据处理\"]},\"2860\":{\"h\":\"避坑指南\",\"t\":[\"字符编码问题：\",\"始终显式指定字符编码，避免依赖系统默认编码\",\"使用StandardCharsets类中的常量（如StandardCharsets.UTF_8）确保编码一致\",\"读写文件时使用相同的字符编码\",\"性能优化：\",\"处理文本文件时，始终使用缓冲字符流（BufferedReader/BufferedWriter）\",\"使用readLine()方法按行读取文本比单个字符读取效率高\",\"大文件处理时，避免一次性读取全部内容到内存\",\"资源管理：\",\"字符流也需要显式关闭，推荐使用try-with-resources语法\",\"输出字符流在关闭前会自动刷新，但显式调用flush()可确保数据及时写入\",\"嵌套流关闭时，只需关闭最外层流即可\",\"特殊字符处理：\",\"注意不同操作系统换行符的差异（Windows: \\\\r\\\\n, Linux: \\\\n, Mac: \\\\r）\",\"使用BufferedWriter.newLine()方法生成平台无关的换行符\",\"处理包含特殊Unicode字符的文本时，确保字体支持\"]},\"2861\":{\"h\":\"深度思考题\",\"t\":[\"思考题1：如何实现一个功能，读取一个GBK编码的文本文件并转换为UTF-8编码的文件？\",\"思考题回答： 可以通过组合使用InputStreamReader和OutputStreamWriter并指定不同编码来实现：\",\"import java.io.FileInputStream; import java.io.FileOutputStream; import java.io.IOException; import java.io.InputStreamReader; import java.io.OutputStreamWriter; import java.nio.charset.Charset; public class EncodingConversionExample { public static void main(String[] args) { String gbkFile = \\\"input_gbk.txt\\\"; String utf8File = \\\"output_utf8.txt\\\"; try (InputStreamReader isr = new InputStreamReader( new FileInputStream(gbkFile), Charset.forName(\\\"GBK\\\")); OutputStreamWriter osw = new OutputStreamWriter( new FileOutputStream(utf8File), Charset.forName(\\\"UTF-8\\\")); BufferedReader br = new BufferedReader(isr); BufferedWriter bw = new BufferedWriter(osw)) { String line; while ((line = br.readLine()) != null) { bw.write(line); bw.newLine(); } System.out.println(\\\"文件编码转换成功！\\\"); } catch (IOException e) { e.printStackTrace(); } } }\",\"思考题2：比较BufferedReader的readLine()方法和Scanner类的nextLine()方法在读取文本时的优缺点。\",\"思考题回答： 两者各有优缺点，适用于不同场景：\",\"特性\",\"BufferedReader.readLine()\",\"Scanner.nextLine()\",\"性能\",\"更高，专为字符流设计\",\"较低，功能更全面但有额外开销\",\"异常处理\",\"需要显式处理IOException\",\"不需要显式处理异常\",\"分隔符\",\"只能按行分隔\",\"可自定义分隔符\",\"功能\",\"仅读取行\",\"提供丰富的解析方法（nextInt(), nextDouble()等）\",\"大文件处理\",\"更适合，内存效率高\",\"不适合，可能有性能问题\",\"空行处理\",\"保留空行\",\"保留空行\",\"流关闭\",\"需要显式关闭\",\"需要显式关闭\",\"使用建议：\",\"简单读取文本文件时，优先使用BufferedReader，性能更好\",\"需要解析基本数据类型或使用自定义分隔符时，使用Scanner更方便\",\"处理大文件时，BufferedReader是更好的选择\",\"无论使用哪种方式，都要确保资源正确关闭\"]},\"2862\":{\"h\":\"1.5.4 缓冲流\"},\"2863\":{\"h\":\"概述\",\"t\":[\"缓冲流（Buffered Stream）是Java IO中提供的一种带缓冲功能的流，通过在内存中创建缓冲区来提高IO操作的性能。缓冲流本身并不直接与数据源或目标交互，而是作为装饰器包装其他基本流，通过减少实际的IO操作次数来提升读写效率。Java中的缓冲流主要包括BufferedInputStream、BufferedOutputStream、BufferedReader和BufferedWriter，分别对应字节缓冲流和字符缓冲流。\"]},\"2864\":{\"h\":\"知识要点\"},\"2865\":{\"h\":\"1. 缓冲流的工作原理\",\"t\":[\"缓冲流的核心原理是在内存中创建一个缓冲区（字节数组或字符数组），当进行读写操作时，数据先被传输到缓冲区，当缓冲区满或手动刷新时，才将数据一次性写入到目标设备或从源设备读取。这种方式显著减少了与磁盘等外部设备的交互次数，从而提高了IO性能。\",\"读取过程：从数据源读取数据到缓冲区，程序从缓冲区读取数据\",\"写入过程：程序将数据写入缓冲区，当缓冲区满时，将数据一次性写入目标\",\"缓冲区大小：默认缓冲区大小通常为8KB（8192字节），也可自定义\"]},\"2866\":{\"h\":\"2. 字节缓冲流\",\"t\":[\"BufferedInputStream和BufferedOutputStream用于包装字节流，提供缓冲功能：\",\"import java.io.BufferedInputStream; import java.io.BufferedOutputStream; import java.io.FileInputStream; import java.io.FileOutputStream; import java.io.IOException; /** * 字节缓冲流示例 * 演示使用缓冲流复制大文件以提高性能 */ public class BufferedByteStreamExample { private static final int BUFFER_SIZE = 8192; // 8KB缓冲区 public static void main(String[] args) { String sourceFile = \\\"large_file.dat\\\"; String destFile = \\\"copied_file.dat\\\"; long startTime = System.currentTimeMillis(); try (BufferedInputStream bis = new BufferedInputStream( new FileInputStream(sourceFile), BUFFER_SIZE); BufferedOutputStream bos = new BufferedOutputStream( new FileOutputStream(destFile), BUFFER_SIZE)) { byte[] buffer = new byte[BUFFER_SIZE]; int bytesRead; // 读取数据到缓冲区，再写入目标文件 while ((bytesRead = bis.read(buffer)) != -1) { bos.write(buffer, 0, bytesRead); } // 确保所有缓冲数据都被写入 bos.flush(); } catch (IOException e) { e.printStackTrace(); } long endTime = System.currentTimeMillis(); System.out.println(\\\"文件复制完成，耗时: \\\" + (endTime - startTime) + \\\"毫秒\\\"); } }\"]},\"2867\":{\"h\":\"3. 字符缓冲流\",\"t\":[\"BufferedReader和BufferedWriter用于包装字符流，除了缓冲功能外，还提供了便捷的按行读写方法：\",\"import java.io.BufferedReader; import java.io.BufferedWriter; import java.io.FileReader; import java.io.FileWriter; import java.io.IOException; /** * 字符缓冲流示例 * 演示高效读写文本文件，包括按行读写功能 */ public class BufferedCharStreamExample { public static void main(String[] args) { String sourceFile = \\\"input.txt\\\"; String destFile = \\\"output.txt\\\"; try (BufferedReader br = new BufferedReader(new FileReader(sourceFile)); BufferedWriter bw = new BufferedWriter(new FileWriter(destFile))) { String line; int lineNumber = 0; // 按行读取文件内容 while ((line = br.readLine()) != null) { lineNumber++; // 写入行号和内容 bw.write(lineNumber + \\\": \\\" + line); // 写入平台无关的换行符 bw.newLine(); } System.out.println(\\\"文件处理完成，共处理\\\" + lineNumber + \\\"行\\\"); } catch (IOException e) { e.printStackTrace(); } } }\"]},\"2868\":{\"h\":\"4. 缓冲流的性能优势\",\"t\":[\"使用缓冲流可以显著提升IO性能，特别是对于大文件操作。以下是一个性能对比示例：\",\"import java.io.FileInputStream; import java.io.FileOutputStream; import java.io.IOException; import java.io.InputStream; import java.io.OutputStream; /** * 缓冲流与非缓冲流性能对比 * 演示使用缓冲流对大文件复制性能的提升 */ public class BufferPerformanceComparison { private static final String LARGE_FILE = \\\"large_test_file.dat\\\"; private static final String COPY_WITHOUT_BUFFER = \\\"copy_without_buffer.dat\\\"; private static final String COPY_WITH_BUFFER = \\\"copy_with_buffer.dat\\\"; public static void main(String[] args) { // 创建测试文件 createTestFile(LARGE_FILE, 1024 * 1024 * 100); // 100MB // 不使用缓冲流复制 long startTime = System.currentTimeMillis(); copyWithoutBuffer(LARGE_FILE, COPY_WITHOUT_BUFFER); long endTime = System.currentTimeMillis(); System.out.println(\\\"不使用缓冲流耗时: \\\" + (endTime - startTime) + \\\"ms\\\"); // 使用缓冲流复制 startTime = System.currentTimeMillis(); copyWithBuffer(LARGE_FILE, COPY_WITH_BUFFER); endTime = System.currentTimeMillis(); System.out.println(\\\"使用缓冲流耗时: \\\" + (endTime - startTime) + \\\"ms\\\"); } private static void createTestFile(String fileName, int size) { try (OutputStream os = new FileOutputStream(fileName)) { byte[] data = new byte[1024]; for (int i = 0; i < size / 1024; i++) { os.write(data); } } catch (IOException e) { e.printStackTrace(); } } private static void copyWithoutBuffer(String source, String dest) { try (InputStream is = new FileInputStream(source); OutputStream os = new FileOutputStream(dest)) { int b; while ((b = is.read()) != -1) { os.write(b); } } catch (IOException e) { e.printStackTrace(); } } private static void copyWithBuffer(String source, String dest) { try (BufferedInputStream bis = new BufferedInputStream(new FileInputStream(source)); BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(dest))) { byte[] buffer = new byte[8192]; int bytesRead; while ((bytesRead = bis.read(buffer)) != -1) { bos.write(buffer, 0, bytesRead); } } catch (IOException e) { e.printStackTrace(); } } }\"]},\"2869\":{\"h\":\"5. 缓冲流的特殊方法\",\"t\":[\"字符缓冲流提供了一些额外的便捷方法：\",\"BufferedReader:\",\"String readLine(): 读取一行文本\",\"void mark(int readAheadLimit): 标记当前位置\",\"void reset(): 重置到标记位置\",\"BufferedWriter:\",\"void newLine(): 写入平台特定的换行符\",\"void write(String s, int off, int len): 写入字符串的一部分\"]},\"2870\":{\"h\":\"知识扩展\"},\"2871\":{\"h\":\"设计思想\",\"t\":[\"缓冲流体现了以下设计模式和思想：\",\"装饰器模式：缓冲流不改变原有流的功能，而是在其基础上添加缓冲功能\",\"空间换时间：通过使用内存缓冲区减少IO操作次数，提高性能\",\"懒加载策略：数据只有在缓冲区满或显式刷新时才写入目标\",\"接口隔离原则：缓冲流专注于提供缓冲功能，不改变原有流的接口\"]},\"2872\":{\"h\":\"避坑指南\",\"t\":[\"缓冲区大小选择：\",\"默认缓冲区大小（8KB）适用于大多数场景\",\"对于大文件传输，可以适当增大缓冲区（如64KB或128KB）\",\"缓冲区并非越大越好，过大会浪费内存并可能降低性能\",\"刷新与关闭：\",\"输出缓冲流必须在操作完成后刷新或关闭，否则数据可能残留在缓冲区\",\"使用try-with-resources语法可自动关闭流并刷新缓冲区\",\"手动刷新使用flush()方法，通常在需要立即写入数据时使用\",\"异常处理：\",\"缓冲流的close()方法可能抛出IOException，需要适当处理\",\"关闭外层缓冲流会自动关闭内层被包装的流，无需单独关闭\",\"读写操作都可能抛出异常，应使用try-catch-finally或try-with-resources\",\"性能优化：\",\"避免频繁的小数据量写入，尽量批量处理\",\"自定义缓冲区大小时，使用2的幂次方值（如4096, 8192）通常更高效\",\"对于顺序读写，缓冲流性能优势明显；随机访问时优势不大\"]},\"2873\":{\"h\":\"深度思考题\",\"t\":[\"思考题1：如何设计一个自定义大小的缓冲区，并实现高效的缓冲读写功能？\",\"思考题回答： 可以通过封装一个字节数组作为缓冲区，并实现基本的读写方法：\",\"import java.io.IOException; import java.io.InputStream; /** * 自定义缓冲区输入流实现 * 演示缓冲流的基本工作原理 */ public class CustomBufferedInputStream extends InputStream { private final InputStream in; private final byte[] buffer; private int position; private int count; public CustomBufferedInputStream(InputStream in, int bufferSize) { this.in = in; this.buffer = new byte[bufferSize]; this.position = 0; this.count = 0; } @Override public int read() throws IOException { // 如果缓冲区已读完，从底层流填充缓冲区 if (position >= count) { fillBuffer(); if (count == -1) { return -1; // 流结束 } } return buffer[position++] & 0xFF; // 返回下一个字节 } @Override public int read(byte[] b, int off, int len) throws IOException { if (b == null) { throw new NullPointerException(); } else if (off < 0 || len < 0 || len > b.length - off) { throw new IndexOutOfBoundsException(); } else if (len == 0) { return 0; } // 从缓冲区读取数据 int bytesRead = 0; while (len > 0) { if (position >= count) { fillBuffer(); if (count == -1) { break; // 流结束 } } int available = count - position; int toRead = Math.min(available, len); System.arraycopy(buffer, position, b, off + bytesRead, toRead); position += toRead; bytesRead += toRead; len -= toRead; } return bytesRead == 0 && count == -1 ? -1 : bytesRead; } private void fillBuffer() throws IOException { count = in.read(buffer); position = 0; } @Override public void close() throws IOException { in.close(); } }\",\"思考题2：缓冲流在什么情况下性能提升不明显甚至可能降低性能？如何避免？\",\"思考题回答： 缓冲流性能可能下降的情况及避免方法：\",\"缓冲区过大：\",\"情况：缓冲区超过内存页大小或系统缓存\",\"影响：增加内存开销，可能导致频繁的内存页交换\",\"避免：使用适中的缓冲区大小，通常8KB-64KB\",\"频繁随机访问：\",\"情况：对文件进行大量随机读写操作\",\"影响：缓冲命中率低，反而增加内存复制开销\",\"避免：随机访问时考虑使用NIO的Channel和Buffer\",\"已经有缓冲的流：\",\"情况：对已经带缓冲的流再次包装缓冲流\",\"影响：双重缓冲，增加内存使用和复制操作\",\"避免：检查流的类型，避免重复缓冲\",\"小文件操作：\",\"情况：文件大小远小于缓冲区大小\",\"影响：缓冲区优势无法发挥，增加初始化开销\",\"避免：小文件可考虑不使用缓冲流或使用较小缓冲区\",\"频繁刷新：\",\"情况：在循环中频繁调用flush()方法\",\"影响：破坏缓冲机制，增加IO操作次数\",\"避免：减少刷新次数，仅在必要时刷新\"]},\"2874\":{\"h\":\"1.5.5 转换流\"},\"2875\":{\"h\":\"概述\",\"t\":[\"转换流是Java IO中用于在字节流和字符流之间进行转换的特殊流，主要包括InputStreamReader和OutputStreamWriter两个类。它们充当字节流与字符流之间的桥梁，允许应用程序将字节流转换为字符流，并指定字符编码格式，从而解决不同编码导致的乱码问题。转换流在处理文本数据时尤为重要，特别是当需要明确控制字符编码时。\"]},\"2876\":{\"h\":\"知识要点\"},\"2877\":{\"h\":\"1. 转换流的作用与原理\",\"t\":[\"转换流的核心作用是在字节流和字符流之间架起桥梁，实现两者之间的转换，并处理字符编码：\",\"字节流到字符流：InputStreamReader将字节流转换为字符流，通过指定的字符编码将字节解码为字符\",\"字符流到字节流：OutputStreamWriter将字符流转换为字节流，通过指定的字符编码将字符编码为字节\",\"编码处理：允许显式指定字符编码（如UTF-8、GBK等），解决不同编码环境下的文本处理问题\",\"转换流的工作原理：\",\"接收字节流作为输入（InputStreamReader）或输出（OutputStreamWriter）\",\"使用指定的字符编码（Charset）进行字节与字符的转换\",\"提供字符流接口，供上层应用操作\"]},\"2878\":{\"h\":\"2. InputStreamReader详解\",\"t\":[\"InputStreamReader是字节流通向字符流的桥梁，它使用指定的charset读取字节并将其解码为字符：\",\"import java.io.FileInputStream; import java.io.IOException; import java.io.InputStreamReader; import java.nio.charset.StandardCharsets; /** * InputStreamReader示例 * 演示如何使用指定编码读取文本文件 */ public class InputStreamReaderExample { public static void main(String[] args) { String fileName = \\\"encoded_text.txt\\\"; // 使用UTF-8编码读取文件 try (InputStreamReader isr = new InputStreamReader( new FileInputStream(fileName), StandardCharsets.UTF_8)) { char[] buffer = new char[1024]; int charsRead; System.out.println(\\\"文件内容(UTF-8):\\\"); while ((charsRead = isr.read(buffer)) != -1) { System.out.print(new String(buffer, 0, charsRead)); } } catch (IOException e) { e.printStackTrace(); } // 使用GBK编码读取同一文件（可能产生乱码） try (InputStreamReader isr = new InputStreamReader( new FileInputStream(fileName), \\\"GBK\\\")) { char[] buffer = new char[1024]; int charsRead; System.out.println(\\\"\\\\n文件内容(GBK):\\\"); while ((charsRead = isr.read(buffer)) != -1) { System.out.print(new String(buffer, 0, charsRead)); } } catch (IOException e) { e.printStackTrace(); } } }\"]},\"2879\":{\"h\":\"3. OutputStreamWriter详解\",\"t\":[\"OutputStreamWriter是字符流通向字节流的桥梁，它使用指定的charset将字符编码为字节：\",\"import java.io.FileOutputStream; import java.io.IOException; import java.io.OutputStreamWriter; import java.nio.charset.StandardCharsets; /** * OutputStreamWriter示例 * 演示如何使用指定编码写入文本文件 */ public class OutputStreamWriterExample { public static void main(String[] args) { String fileName = \\\"output_utf8.txt\\\"; String content = \\\"Hello, 世界! 这是使用UTF-8编码写入的文本。\\\"; // 使用UTF-8编码写入文件 try (OutputStreamWriter osw = new OutputStreamWriter( new FileOutputStream(fileName), StandardCharsets.UTF_8)) { osw.write(content); System.out.println(\\\"文件写入成功！\\\"); } catch (IOException e) { e.printStackTrace(); } // 使用GBK编码写入另一个文件 fileName = \\\"output_gbk.txt\\\"; try (OutputStreamWriter osw = new OutputStreamWriter( new FileOutputStream(fileName), \\\"GBK\\\")) { osw.write(content); System.out.println(\\\"GBK编码文件写入成功！\\\"); } catch (IOException e) { e.printStackTrace(); } } }\"]},\"2880\":{\"h\":\"4. 转换流与缓冲流的结合使用\",\"t\":[\"转换流通常与缓冲流结合使用，以提高读写性能并提供更便捷的API：\",\"import java.io.BufferedReader; import java.io.BufferedWriter; import java.io.FileInputStream; import java.io.FileOutputStream; import java.io.IOException; import java.io.InputStreamReader; import java.io.OutputStreamWriter; import java.nio.charset.StandardCharsets; /** * 转换流与缓冲流结合示例 * 演示高效的编码转换文件复制 */ public class ConversionWithBufferExample { public static void main(String[] args) { String sourceFile = \\\"source_gbk.txt\\\"; String destFile = \\\"dest_utf8.txt\\\"; try (BufferedReader br = new BufferedReader( new InputStreamReader(new FileInputStream(sourceFile), \\\"GBK\\\")); BufferedWriter bw = new BufferedWriter( new OutputStreamWriter(new FileOutputStream(destFile), StandardCharsets.UTF_8))) { String line; while ((line = br.readLine()) != null) { bw.write(line); bw.newLine(); } System.out.println(\\\"文件编码转换完成！\\\"); } catch (IOException e) { e.printStackTrace(); } } }\"]},\"2881\":{\"h\":\"5. 字符编码的处理\",\"t\":[\"转换流的关键功能是处理字符编码，Java支持多种字符集：\",\"import java.nio.charset.Charset; import java.util.SortedMap; /** * 字符编码示例 * 演示Java支持的字符集 */ public class CharsetExample { public static void main(String[] args) { // 获取所有可用的字符集 SortedMap<String, Charset> charsets = Charset.availableCharsets(); System.out.println(\\\"可用字符集总数: \\\" + charsets.size()); System.out.println(\\\"常用字符集:\\\"); // 打印常用字符集 printCharsetInfo(charsets, \\\"UTF-8\\\"); printCharsetInfo(charsets, \\\"GBK\\\"); printCharsetInfo(charsets, \\\"ISO-8859-1\\\"); printCharsetInfo(charsets, \\\"UTF-16\\\"); printCharsetInfo(charsets, \\\"GB2312\\\"); } private static void printCharsetInfo(SortedMap<String, Charset> charsets, String name) { Charset charset = charsets.get(name); if (charset != null) { System.out.printf(\\\"- %s: 别名=%s, 是否支持=%s%n\\\", name, charset.aliases(), charset.isSupported()); } } }\"]},\"2882\":{\"h\":\"知识扩展\"},\"2883\":{\"h\":\"设计思想\",\"t\":[\"转换流体现了以下设计思想和模式：\",\"适配器模式：将字节流接口适配为字符流接口，使不兼容的接口可以一起工作\",\"桥接模式：将抽象部分与实现部分分离，使它们可以独立变化（字符流操作与字节流实现分离）\",\"单一职责原则：转换流专注于字节与字符的转换，不改变原有流的其他功能\",\"开闭原则：通过抽象类（Reader/Writer）定义接口，具体实现可灵活扩展\"]},\"2884\":{\"h\":\"避坑指南\",\"t\":[\"编码一致性问题：\",\"读取和写入文件时必须使用相同的字符编码，否则会产生乱码\",\"推荐使用StandardCharsets类中的常量（如StandardCharsets.UTF_8）而非字符串编码名\",\"避免依赖系统默认编码，始终显式指定编码\",\"异常处理：\",\"处理不支持的编码时会抛出UnsupportedEncodingException\",\"JDK7+推荐使用StandardCharsets类避免检查异常\",\"使用try-with-resources确保流资源正确关闭\",\"性能优化：\",\"转换流本身不提供缓冲功能，必须与缓冲流结合使用以提高性能\",\"大文件处理时，合理设置缓冲区大小（通常8KB~64KB）\",\"避免频繁的字符与字节转换操作\",\"特殊字符处理：\",\"某些编码不支持所有Unicode字符（如ISO-8859-1不支持中文）\",\"处理特殊字符时选择合适的编码（如UTF-8支持所有Unicode字符）\",\"考虑使用BOM（字节顺序标记）处理UTF-8/UTF-16编码的文件开头标识\"]},\"2885\":{\"h\":\"深度思考题\",\"t\":[\"思考题1：如何检测一个文本文件的字符编码？\",\"思考题回答： Java标准库没有提供直接检测文件编码的API，但可以通过第三方库如ICU4J或juniversalchardet，或实现简单的编码检测算法：\",\"import java.io.FileInputStream; import java.io.IOException; import java.nio.ByteBuffer; import java.nio.charset.CharacterCodingException; import java.nio.charset.Charset; import java.nio.charset.CharsetDecoder; /** * 简单的文件编码检测示例 */ public class EncodingDetector { public static void main(String[] args) { String fileName = \\\"unknown_encoding.txt\\\"; // 尝试常用编码检测 String[] encodings = {\\\"UTF-8\\\", \\\"GBK\\\", \\\"ISO-8859-1\\\", \\\"UTF-16\\\"}; try (FileInputStream fis = new FileInputStream(fileName)) { byte[] buffer = new byte[1024]; int bytesRead = fis.read(buffer); ByteBuffer byteBuffer = ByteBuffer.wrap(buffer, 0, bytesRead); for (String encoding : encodings) { Charset charset = Charset.forName(encoding); CharsetDecoder decoder = charset.newDecoder(); try { decoder.decode(byteBuffer); byteBuffer.rewind(); // 重置缓冲区以便下次尝试 System.out.println(\\\"可能的编码: \\\" + encoding); } catch (CharacterCodingException e) { // 解码失败，尝试下一种编码 } } } catch (IOException e) { e.printStackTrace(); } } }\",\"思考题2：InputStreamReader和FileReader有什么区别？在什么情况下应该使用哪个？\",\"思考题回答： InputStreamReader和FileReader的主要区别及使用场景：\",\"特性\",\"InputStreamReader\",\"FileReader\",\"继承关系\",\"继承自Reader\",\"继承自InputStreamReader\",\"功能\",\"字节流到字符流的转换\",\"便捷的文件字符读取\",\"编码控制\",\"可显式指定字符编码\",\"使用系统默认编码\",\"灵活性\",\"可包装任何InputStream\",\"只能读取文件\",\"兼容性\",\"JDK1.1及以上\",\"JDK1.1及以上\",\"推荐使用\",\"需要控制编码时\",\"简单文件读取且不关心编码\",\"使用建议：\",\"当需要读取文件且明确知道编码时，优先使用InputStreamReader+FileInputStream组合\",\"当需要读取网络流或其他字节流并转换为字符流时，必须使用InputStreamReader\",\"当编写跨平台应用时，避免使用FileReader，因为它依赖系统默认编码\",\"当处理中文等非ASCII字符时，始终使用InputStreamReader并显式指定编码\"]},\"2886\":{\"h\":\"1.5.6 序列流\"},\"2887\":{\"h\":\"概述\",\"t\":[\"序列流（SequenceInputStream）是Java IO中一种特殊的输入流，它允许将多个输入流逻辑上串联起来，形成一个单一的输入流进行顺序读取。通过序列流，应用程序可以像操作单个流一样依次读取多个数据源，而无需关心底层多个流的存在。这种流的组合方式在处理分散存储的数据或需要合并多个输入源时非常有用。\"]},\"2888\":{\"h\":\"知识要点\"},\"2889\":{\"h\":\"1. 序列流的工作原理\",\"t\":[\"序列流的核心功能是将多个输入流组合成一个逻辑流，其工作原理如下：\",\"流的组合：通过构造方法接收多个输入流（可以是两个独立流或一个包含多个流的Enumeration枚举）\",\"顺序读取：从第一个输入流开始读取，当到达流的末尾时自动切换到下一个输入流\",\"透明操作：对使用者而言，多个流的组合读取过程是透明的，就像读取单个流一样\",\"资源管理：当序列流关闭时，会自动关闭所有被组合的输入流\"]},\"2890\":{\"h\":\"2. SequenceInputStream的构造方法\",\"t\":[\"SequenceInputStream提供两种构造方法来组合输入流：\",\"// 构造方法1：组合两个输入流 public SequenceInputStream(InputStream s1, InputStream s2) // 构造方法2：组合多个输入流（通过Enumeration枚举） public SequenceInputStream(Enumeration<? extends InputStream> e)\"]},\"2891\":{\"h\":\"3. 组合两个输入流的示例\",\"t\":[\"使用第一个构造方法组合两个输入流并读取数据：\",\"import java.io.ByteArrayInputStream; import java.io.IOException; import java.io.SequenceInputStream; /** * 组合两个输入流的示例 */ public class TwoStreamsExample { public static void main(String[] args) { // 创建两个字节输入流 byte[] data1 = \\\"Hello \\\".getBytes(); byte[] data2 = \\\"World! \\\".getBytes(); ByteArrayInputStream stream1 = new ByteArrayInputStream(data1); ByteArrayInputStream stream2 = new ByteArrayInputStream(data2); // 使用SequenceInputStream组合两个流 try (SequenceInputStream sequenceStream = new SequenceInputStream(stream1, stream2)) { int data; System.out.print(\\\"组合流内容: \\\"); while ((data = sequenceStream.read()) != -1) { System.out.print((char) data); } } catch (IOException e) { e.printStackTrace(); } } }\"]},\"2892\":{\"h\":\"4. 组合多个输入流的示例\",\"t\":[\"使用第二个构造方法通过Enumeration组合多个输入流：\",\"import java.io.ByteArrayInputStream; import java.io.IOException; import java.io.SequenceInputStream; import java.util.Enumeration; import java.util.Vector; /** * 组合多个输入流的示例 */ public class MultipleStreamsExample { public static void main(String[] args) { // 创建多个字节输入流 ByteArrayInputStream stream1 = new ByteArrayInputStream(\\\"Java \\\".getBytes()); ByteArrayInputStream stream2 = new ByteArrayInputStream(\\\"IO \\\".getBytes()); ByteArrayInputStream stream3 = new ByteArrayInputStream(\\\"Sequence \\\".getBytes()); ByteArrayInputStream stream4 = new ByteArrayInputStream(\\\"Stream\\\".getBytes()); // 将流添加到Vector集合 Vector<ByteArrayInputStream> vector = new Vector<>(); vector.add(stream1); vector.add(stream2); vector.add(stream3); vector.add(stream4); // 获取Enumeration对象 Enumeration<ByteArrayInputStream> enumeration = vector.elements(); // 使用SequenceInputStream组合多个流 try (SequenceInputStream sequenceStream = new SequenceInputStream(enumeration)) { byte[] buffer = new byte[1024]; int bytesRead; System.out.print(\\\"组合流内容: \\\"); while ((bytesRead = sequenceStream.read(buffer)) != -1) { System.out.print(new String(buffer, 0, bytesRead)); } } catch (IOException e) { e.printStackTrace(); } } }\"]},\"2893\":{\"h\":\"5. 序列流的实际应用场景\",\"t\":[\"序列流在以下场景中特别有用：\",\"import java.io.*; import java.util.Enumeration; import java.util.Vector; /** * 序列流的实际应用：合并多个文本文件 */ public class FileMergeExample { public static void main(String[] args) { String[] inputFiles = {\\\"part1.txt\\\", \\\"part2.txt\\\", \\\"part3.txt\\\"}; String outputFile = \\\"merged.txt\\\"; try { // 创建多个文件输入流 Vector<FileInputStream> inputStreams = new Vector<>(); for (String file : inputFiles) { inputStreams.add(new FileInputStream(file)); } // 获取Enumeration对象 Enumeration<FileInputStream> enumeration = inputStreams.elements(); // 使用序列流组合所有输入流 try (SequenceInputStream sequenceStream = new SequenceInputStream(enumeration); BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(outputFile))) { byte[] buffer = new byte[1024]; int bytesRead; // 读取序列流并写入到输出文件 while ((bytesRead = sequenceStream.read(buffer)) != -1) { outputStream.write(buffer, 0, bytesRead); } System.out.println(\\\"文件合并完成！\\\"); } } catch (IOException e) { e.printStackTrace(); } } }\"]},\"2894\":{\"h\":\"知识扩展\"},\"2895\":{\"h\":\"设计思想\",\"t\":[\"序列流体现了以下设计思想和模式：\",\"组合模式：将对象组合成树形结构以表示\\\"部分-整体\\\"的层次结构，使得用户对单个对象和组合对象的使用具有一致性\",\"装饰器模式：动态地给一个对象添加一些额外的职责，就增加功能来说，装饰器模式比生成子类更为灵活\",\"单一职责原则：每个流专注于单一功能，序列流专注于流的组合，而不是数据读取本身\",\"开闭原则：可以灵活添加新的输入流类型，而无需修改序列流的代码\"]},\"2896\":{\"h\":\"避坑指南\",\"t\":[\"流的关闭顺序：\",\"序列流关闭时会自动关闭所有被组合的输入流，无需手动关闭每个流\",\"避免在序列流关闭后再次使用被组合的流\",\"即使某个被组合的流关闭失败，序列流仍会尝试关闭其他流\",\"空流处理：\",\"避免组合空的输入流，这会导致读取时直接跳过\",\"组合流中如果某个流为null，会抛出NullPointerException\",\"处理可能为空的流时，应先进行非空判断\",\"异常处理：\",\"序列流的read()方法在遇到一个流的IO异常时会停止读取并抛出异常\",\"对于关键数据，应考虑单个流的异常处理机制\",\"使用try-with-resources确保资源正确释放\",\"性能考量：\",\"序列流本身不提供缓冲功能，建议与缓冲流一起使用\",\"对于大量小文件的合并，序列流比多次单独读取更高效\",\"避免组合过多流导致的性能开销\"]},\"2897\":{\"h\":\"深度思考题\",\"t\":[\"思考题1：如何使用序列流实现多个文件的合并，同时在每个文件内容之间添加分隔符？\",\"思考题回答： 可以通过自定义InputStream包装类在每个文件内容之间添加分隔符：\",\"import java.io.*; import java.util.Enumeration; import java.util.Vector; /** * 带分隔符的文件合并示例 */ public class FileMergeWithSeparatorExample { public static void main(String[] args) { String[] inputFiles = {\\\"part1.txt\\\", \\\"part2.txt\\\", \\\"part3.txt\\\"}; String outputFile = \\\"merged_with_separator.txt\\\"; String separator = \\\"\\\\n--- 文件分隔符 ---\\\\n\\\"; try { Vector<InputStream> inputStreams = new Vector<>(); for (int i = 0; i < inputFiles.length; i++) { // 添加文件输入流 inputStreams.add(new FileInputStream(inputFiles[i])); // 除最后一个文件外，添加分隔符输入流 if (i != inputFiles.length - 1) { inputStreams.add(new ByteArrayInputStream(separator.getBytes())); } } Enumeration<InputStream> enumeration = inputStreams.elements(); try (SequenceInputStream sequenceStream = new SequenceInputStream(enumeration); BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(outputFile))) { byte[] buffer = new byte[1024]; int bytesRead; while ((bytesRead = sequenceStream.read(buffer)) != -1) { outputStream.write(buffer, 0, bytesRead); } System.out.println(\\\"带分隔符的文件合并完成！\\\"); } } catch (IOException e) { e.printStackTrace(); } } }\",\"思考题2：SequenceInputStream和其他流组合方式（如使用管道流）有什么区别？各适用于什么场景？\",\"思考题回答： SequenceInputStream与管道流（PipedInputStream/PipedOutputStream）的区别及适用场景：\",\"特性\",\"SequenceInputStream\",\"管道流\",\"核心功能\",\"组合多个输入流顺序读取\",\"线程间通信的流\",\"数据流方向\",\"仅输入\",\"输入输出配对使用\",\"并发性\",\"不支持并发，顺序读取\",\"支持并发，通常用于不同线程\",\"连接方式\",\"静态组合多个流\",\"动态连接两个线程\",\"主要用途\",\"合并多个数据源\",\"线程间数据传递\",\"实现复杂度\",\"简单，无需额外线程\",\"复杂，需要处理线程同步\",\"适用场景：\",\"SequenceInputStream：适用于需要按顺序读取多个数据源的场景，如合并多个文件、读取分散存储的数据片段等\",\"管道流：适用于多线程环境下的数据通信，如生产者-消费者模型、后台线程处理数据并传递给主线程等\",\"当需要合并多个输入源且不需要并发处理时，优先使用SequenceInputStream\",\"当需要在不同线程间传递数据时，必须使用管道流\"]},\"2898\":{\"h\":\"1.5.7 打印流\"},\"2899\":{\"h\":\"概述\",\"t\":[\"打印流（Print Stream）是Java IO中用于方便地输出各种数据类型的特殊流，主要包括PrintStream和PrintWriter两个类。它们提供了一系列重载的print()和println()方法，可以直接输出基本数据类型、对象和字符串等，而无需手动进行类型转换。打印流的特点是操作简便、支持自动刷新、不会抛出IOException（而是通过checkError()方法检查错误），是日常开发中输出数据的常用工具。\"]},\"2900\":{\"h\":\"知识要点\"},\"2901\":{\"h\":\"1. 打印流的核心特点\",\"t\":[\"打印流具有以下核心特点，使其在IO操作中广泛应用：\",\"多种数据类型输出：提供print()和println()方法的重载版本，支持输出基本数据类型、字符数组、字符串、对象等\",\"自动刷新机制：当启用自动刷新时，写入换行符（\\\\n）、调用println()或format()方法后会自动刷新缓冲区\",\"异常处理机制：不抛出IOException，而是通过checkError()方法检查是否发生错误\",\"格式化输出：支持使用printf()方法进行格式化字符串输出，类似C语言的printf函数\",\"便捷性：无需手动转换数据类型，直接输出各种类型数据\"]},\"2902\":{\"h\":\"2. PrintStream详解\",\"t\":[\"PrintStream是字节打印流，继承自FilterOutputStream，主要用于处理字节输出：\",\"import java.io.FileNotFoundException; import java.io.FileOutputStream; import java.io.PrintStream; /** * PrintStream示例 * 演示字节打印流的基本用法 */ public class PrintStreamExample { public static void main(String[] args) { String fileName = \\\"printstream_demo.txt\\\"; // 创建PrintStream，指定文件输出流和自动刷新 try (PrintStream ps = new PrintStream(new FileOutputStream(fileName), true)) { // 输出各种数据类型 ps.print(\\\"整数: \\\"); ps.println(123); ps.print(\\\"浮点数: \\\"); ps.println(3.14159); ps.print(\\\"布尔值: \\\"); ps.println(true); ps.print(\\\"字符: \\\"); ps.println('A'); ps.print(\\\"对象: \\\"); ps.println(new Object()); // 格式化输出 ps.printf(\\\"格式化输出: 姓名=%s, 年龄=%d, 成绩=%.2f%n\\\", \\\"张三\\\", 20, 95.5); System.out.println(\\\"数据写入完成！\\\"); } catch (FileNotFoundException e) { e.printStackTrace(); } // 标准输出流System.out就是PrintStream的实例 System.out.println(\\\"这是标准输出流\\\"); System.err.println(\\\"这是标准错误流\\\"); } }\"]},\"2903\":{\"h\":\"3. PrintWriter详解\",\"t\":[\"PrintWriter是字符打印流，继承自Writer，主要用于处理字符输出，支持指定字符编码：\",\"import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.charset.StandardCharsets; /** * PrintWriter示例 * 演示字符打印流的基本用法 */ public class PrintWriterExample { public static void main(String[] args) { String fileName = \\\"printwriter_demo.txt\\\"; // 创建PrintWriter，指定文件写入器和自动刷新 try (PrintWriter pw = new PrintWriter(new FileWriter(fileName), true)) { // 输出各种数据类型 pw.print(\\\"Hello, \\\"); pw.println(\\\"世界！\\\"); // 支持 Unicode 字符 pw.print(\\\"数组: \\\"); pw.println(new int[]{1, 2, 3, 4, 5}); // 格式化输出 pw.printf(\\\"用户信息: ID=%d, 名称=%s, 状态=%b%n\\\", 1001, \\\"管理员\\\", true); System.out.println(\\\"字符数据写入完成！\\\"); } catch (IOException e) { e.printStackTrace(); } // 创建指定编码的PrintWriter try (PrintWriter pw = new PrintWriter(fileName, StandardCharsets.UTF_8.name())) { pw.println(\\\"使用指定编码写入的文本: 你好，世界！\\\"); } catch (IOException e) { e.printStackTrace(); } } }\"]},\"2904\":{\"h\":\"4. 自动刷新机制\",\"t\":[\"打印流的自动刷新功能可以通过构造方法启用，当满足特定条件时自动刷新缓冲区：\",\"import java.io.ByteArrayOutputStream; import java.io.PrintStream; /** * 打印流自动刷新示例 */ public class AutoFlushExample { public static void main(String[] args) { ByteArrayOutputStream baos = new ByteArrayOutputStream(); // 第二个参数为true表示启用自动刷新 try (PrintStream ps = new PrintStream(baos, true)) { // 情况1: 使用println()方法会触发自动刷新 ps.println(\\\"这行内容会被自动刷新\\\"); System.out.println(\\\"缓冲区内容长度: \\\" + baos.size()); // 情况2: 输出包含换行符的字符串不会触发自动刷新 ps.print(\\\"这行内容不会被自动刷新\\\\n\\\"); System.out.println(\\\"缓冲区内容长度: \\\" + baos.size()); // 情况3: 使用printf()方法输出包含换行符会触发自动刷新 ps.printf(\\\"这行内容会被自动刷新%n\\\"); System.out.println(\\\"缓冲区内容长度: \\\" + baos.size()); // 情况4: 调用flush()方法手动刷新 ps.print(\\\"这行内容需要手动刷新\\\"); ps.flush(); System.out.println(\\\"缓冲区内容长度: \\\" + baos.size()); } } }\"]},\"2905\":{\"h\":\"5. 格式化输出详解\",\"t\":[\"打印流提供了强大的格式化输出功能，通过printf()方法实现：\",\"import java.io.PrintWriter; import java.util.Date; /** * 打印流格式化输出示例 */ public class FormatOutputExample { public static void main(String[] args) { try (PrintWriter pw = new PrintWriter(System.out)) { // 格式化整数 pw.printf(\\\"十进制: %d, 八进制: %o, 十六进制: %x%n\\\", 255, 255, 255); // 格式化浮点数 pw.printf(\\\"默认浮点: %f, 保留两位小数: %.2f, 科学计数法: %e%n\\\", 3.14159, 3.14159, 3.14159); // 格式化字符串 pw.printf(\\\"姓名: %s, 年龄: %d%n\\\", \\\"张三\\\", 25); // 格式化日期时间 pw.printf(\\\"当前时间: %tF %tT%n\\\", new Date(), new Date()); // 格式化宽度和对齐 pw.printf(\\\"左对齐: %-10s 右对齐: %10s%n\\\", \\\"左侧\\\", \\\"右侧\\\"); // 格式化百分比 pw.printf(\\\"成功率: %.2f%%%n\\\", 98.76); } } }\"]},\"2906\":{\"h\":\"知识扩展\"},\"2907\":{\"h\":\"设计思想\",\"t\":[\"打印流体现了以下设计思想和模式：\",\"装饰器模式：包装其他输出流，添加打印和格式化功能\",\"简化接口模式：提供简单易用的接口，隐藏底层复杂的转换细节\",\"责任分离原则：将数据输出和格式化的责任分离到专门的类中\",\"便利性设计：以开发者友好为目标，提供直观的API设计\"]},\"2908\":{\"h\":\"避坑指南\",\"t\":[\"异常处理问题：\",\"打印流不会抛出IOException，必须主动调用checkError()方法检查错误\",\"checkError()方法会刷新流，可能导致之前未检测到的错误被发现\",\"建议在关键操作后调用checkError()验证操作是否成功\",\"自动刷新陷阱：\",\"自动刷新仅在调用println()、printf()或format()方法时生效，普通print()方法不会触发\",\"自动刷新需要在构造方法中显式启用（第二个参数设为true）\",\"输出包含\\\\n的字符串不会触发自动刷新\",\"字符编码问题：\",\"PrintStream使用平台默认编码，可能导致跨平台字符问题\",\"处理字符数据时优先使用PrintWriter并显式指定编码\",\"创建PrintWriter时使用new PrintWriter(file, charset)构造方法确保编码一致\",\"资源关闭问题：\",\"确保正确关闭打印流，否则可能导致缓冲区数据未写入\",\"优先使用try-with-resources语句自动管理资源\",\"关闭打印流会自动关闭其包装的底层输出流\"]},\"2909\":{\"h\":\"深度思考题\",\"t\":[\"思考题1：如何重定向System.out和System.err输出到文件？\",\"思考题回答： 可以通过System.setOut()和System.setErr()方法重定向标准输出流：\",\"import java.io.FileNotFoundException; import java.io.PrintStream; /** * 重定向标准输出流示例 */ public class RedirectSystemOutExample { public static void main(String[] args) { String logFile = \\\"system_out.log\\\"; String errFile = \\\"system_err.log\\\"; // 保存原始输出流 PrintStream originalOut = System.out; PrintStream originalErr = System.err; try { // 重定向System.out到文件 System.setOut(new PrintStream(logFile)); // 重定向System.err到文件 System.setErr(new PrintStream(errFile)); // 测试输出 System.out.println(\\\"这行内容会写入到日志文件\\\"); System.err.println(\\\"这行错误信息会写入到错误日志文件\\\"); // 故意产生一个错误 int division = 1 / 0; } catch (FileNotFoundException | ArithmeticException e) { // 错误信息会写入到重定向的错误日志 e.printStackTrace(); } finally { // 恢复原始输出流 System.setOut(originalOut); System.setErr(originalErr); System.out.println(\\\"输出流已恢复正常\\\"); } } }\",\"思考题2：PrintStream和PrintWriter有哪些主要区别？在实际开发中如何选择？\",\"思考题回答： PrintStream和PrintWriter的主要区别及选择依据：\",\"特性\",\"PrintStream\",\"PrintWriter\",\"流类型\",\"字节流\",\"字符流\",\"继承关系\",\"继承自FilterOutputStream\",\"继承自Writer\",\"编码支持\",\"使用平台默认编码，不支持显式指定\",\"支持显式指定字符编码\",\"构造方法\",\"接受OutputStream\",\"接受Writer或OutputStream\",\"方法差异\",\"提供write(byte[])方法\",\"提供write(int c)和write(char[])方法\",\"错误处理\",\"checkError()返回boolean\",\"checkError()返回boolean\",\"自动刷新\",\"支持\",\"支持\",\"格式化输出\",\"支持printf()\",\"支持printf()\",\"标准流\",\"System.out和System.err是PrintStream实例\",\"无对应的标准流\",\"选择建议：\",\"当处理字节数据或需要与标准输出流交互时，使用PrintStream\",\"当处理字符数据且需要控制编码时，优先使用PrintWriter\",\"写入文件时推荐使用PrintWriter并指定编码，如new PrintWriter(file, StandardCharsets.UTF_8)\",\"网络编程中，根据数据类型选择：二进制数据用PrintStream，文本数据用PrintWriter\",\"跨平台应用必须使用PrintWriter并显式指定编码，避免依赖平台默认编码\"]},\"2910\":{\"h\":\"1.5.8 NIO流\"},\"2911\":{\"h\":\"概述\",\"t\":[\"Java NIO（New IO）是JDK 1.4引入的新IO模型，提供了与传统IO（InputStream/OutputStream）不同的工作方式，主要基于通道（Channel）和缓冲区（Buffer）进行操作，支持非阻塞IO、选择器（Selector）和内存映射文件等高级特性。NIO旨在提高IO操作的效率，特别适用于高并发、高吞吐量的网络编程场景。与传统IO的面向流（Stream-oriented）不同，NIO是面向缓冲区（Buffer-oriented）的，数据读取到缓冲区后进行处理，大大提升了IO操作的灵活性和性能。\"]},\"2912\":{\"h\":\"知识要点\"},\"2913\":{\"h\":\"1. NIO与传统IO的主要区别\",\"t\":[\"NIO相比传统IO（也称为BIO，Blocking IO）具有以下显著区别：\",\"特性\",\"传统IO (BIO)\",\"NIO\",\"操作方式\",\"面向流(Stream)\",\"面向缓冲区(Buffer)\",\"阻塞特性\",\"阻塞IO\",\"非阻塞IO\",\"处理模式\",\"同步阻塞\",\"同步非阻塞(可通过Selector实现多路复用)\",\"线程模型\",\"一个连接一个线程\",\"一个线程处理多个连接\",\"数据处理\",\"流式处理，一次一个字节\",\"缓冲区批量处理\",\"适用场景\",\"连接数少且固定\",\"高并发、高吞吐量\"]},\"2914\":{\"h\":\"2. 缓冲区(Buffer)详解\",\"t\":[\"Buffer是NIO中用于存储数据的容器，所有数据操作都通过缓冲区进行。Buffer本质上是一个数组，提供了对数据的结构化访问和维护读写位置的机制。\",\"import java.nio.ByteBuffer; /** * Buffer基本操作示例 * 演示缓冲区的创建、写入、读取和翻转等核心操作 */ public class BufferExample { public static void main(String[] args) { // 1. 创建缓冲区，分配容量为1024字节 ByteBuffer buffer = ByteBuffer.allocate(1024); System.out.println(\\\"初始化状态: \\\" + buffer); // 2. 写入数据到缓冲区 String data = \\\"Hello NIO Buffer!\\\"; buffer.put(data.getBytes()); System.out.println(\\\"写入数据后: \\\" + buffer); // 3. 翻转缓冲区(切换为读模式) buffer.flip(); System.out.println(\\\"翻转后: \\\" + buffer); // 4. 从缓冲区读取数据 byte[] readData = new byte[buffer.remaining()]; buffer.get(readData); System.out.println(\\\"读取的数据: \\\" + new String(readData)); System.out.println(\\\"读取数据后: \\\" + buffer); // 5. 清空缓冲区(切换为写模式) buffer.clear(); System.out.println(\\\"清空后: \\\" + buffer); // 6. 压缩缓冲区(保留未读取数据) buffer.put(\\\"追加的数据\\\".getBytes()); buffer.flip(); byte[] partialData = new byte[5]; buffer.get(partialData); System.out.println(\\\"部分读取后: \\\" + buffer); buffer.compact(); System.out.println(\\\"压缩后: \\\" + buffer); } }\",\"Buffer的核心属性：\",\"capacity: 缓冲区容量，创建后不可改变\",\"position: 当前读写位置\",\"limit: 读写限制位置\",\"mark: 标记位置，用于后续重置\",\"Buffer的核心方法：\",\"allocate(int capacity): 创建缓冲区\",\"put(): 写入数据到缓冲区\",\"get(): 从缓冲区读取数据\",\"flip(): 翻转缓冲区，切换读写模式\",\"rewind(): 重置position为0，可重新读取数据\",\"clear(): 清空缓冲区，准备重新写入\",\"compact(): 压缩缓冲区，保留未读取数据\",\"mark()/reset(): 标记和重置position\"]},\"2915\":{\"h\":\"3. 通道(Channel)详解\",\"t\":[\"Channel是NIO中用于连接数据源和目标的通道，类似于传统IO中的流，但具有双向性和异步操作能力。\",\"import java.io.FileInputStream; import java.io.FileOutputStream; import java.io.IOException; import java.nio.ByteBuffer; import java.nio.channels.FileChannel; /** * FileChannel示例 * 演示使用通道进行文件复制操作 */ public class FileChannelExample { public static void main(String[] args) { String sourcePath = \\\"source.txt\\\"; String destPath = \\\"destination.txt\\\"; try ( FileInputStream fis = new FileInputStream(sourcePath); FileOutputStream fos = new FileOutputStream(destPath); FileChannel sourceChannel = fis.getChannel(); FileChannel destChannel = fos.getChannel(); ) { // 创建缓冲区 ByteBuffer buffer = ByteBuffer.allocate(1024); // 从源通道读取数据到缓冲区 while (sourceChannel.read(buffer) != -1) { // 切换为读模式 buffer.flip(); // 从缓冲区写入数据到目标通道 destChannel.write(buffer); // 清空缓冲区，准备下一次读取 buffer.clear(); } System.out.println(\\\"文件复制完成！\\\"); } catch (IOException e) { e.printStackTrace(); } } }\",\"常用Channel类型：\",\"FileChannel: 文件通道，用于文件读写\",\"SocketChannel: 套接字通道，用于TCP客户端\",\"ServerSocketChannel: 服务器套接字通道，用于TCP服务器\",\"DatagramChannel: 数据报通道，用于UDP通信\"]},\"2916\":{\"h\":\"4. 选择器(Selector)详解\",\"t\":[\"Selector是NIO实现非阻塞IO的核心组件，允许单个线程监控多个通道的IO事件（如连接、读取、写入等），实现一个线程处理多个通道的高效IO模型。\",\"import java.io.IOException; import java.net.InetSocketAddress; import java.nio.ByteBuffer; import java.nio.channels.SelectionKey; import java.nio.channels.Selector; import java.nio.channels.ServerSocketChannel; import java.nio.channels.SocketChannel; import java.util.Iterator; import java.util.Set; /** * Selector示例 * 演示非阻塞IO多路复用 */ public class SelectorExample { public static void main(String[] args) { try { // 创建选择器 Selector selector = Selector.open(); // 创建服务器通道 ServerSocketChannel serverSocketChannel = ServerSocketChannel.open(); serverSocketChannel.socket().bind(new InetSocketAddress(8080)); serverSocketChannel.configureBlocking(false); // 注册通道到选择器，关注接受连接事件 serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT); System.out.println(\\\"服务器启动，监听端口8080...\\\"); while (true) { // 阻塞等待就绪事件 int readyChannels = selector.select(); if (readyChannels == 0) continue; // 获取就绪事件集合 Set<SelectionKey> selectionKeys = selector.selectedKeys(); Iterator<SelectionKey> iterator = selectionKeys.iterator(); while (iterator.hasNext()) { SelectionKey key = iterator.next(); // 处理接受连接事件 if (key.isAcceptable()) { handleAccept(key, selector); } // 处理读事件 if (key.isReadable()) { handleRead(key); } // 移除已处理的事件 iterator.remove(); } } } catch (IOException e) { e.printStackTrace(); } } private static void handleAccept(SelectionKey key, Selector selector) throws IOException { ServerSocketChannel serverSocketChannel = (ServerSocketChannel) key.channel(); SocketChannel socketChannel = serverSocketChannel.accept(); socketChannel.configureBlocking(false); System.out.println(\\\"接受新连接: \\\" + socketChannel.getRemoteAddress()); // 注册读事件 socketChannel.register(selector, SelectionKey.OP_READ, ByteBuffer.allocate(1024)); } private static void handleRead(SelectionKey key) throws IOException { SocketChannel socketChannel = (SocketChannel) key.channel(); ByteBuffer buffer = (ByteBuffer) key.attachment(); int bytesRead = socketChannel.read(buffer); if (bytesRead == -1) { // 客户端关闭连接 socketChannel.close(); System.out.println(\\\"连接关闭: \\\" + socketChannel.getRemoteAddress()); return; } // 处理读取的数据 buffer.flip(); byte[] data = new byte[buffer.remaining()]; buffer.get(data); System.out.println(\\\"收到数据: \\\" + new String(data) + \\\" 来自: \\\" + socketChannel.getRemoteAddress()); // 清空缓冲区 buffer.clear(); // 回写数据 String response = \\\"服务器已收到: \\\" + new String(data); buffer.put(response.getBytes()); buffer.flip(); socketChannel.write(buffer); } }\",\"Selector的核心操作：\",\"open(): 创建选择器\",\"register(Selector sel, int ops): 注册通道到选择器\",\"select(): 阻塞等待就绪事件\",\"selectedKeys(): 获取就绪事件集合\",\"wakeup(): 唤醒阻塞的select()方法\"]},\"2917\":{\"h\":\"5. 内存映射文件\",\"t\":[\"NIO提供了内存映射文件（Memory-mapped Files）功能，允许将文件直接映射到内存地址空间，实现高效的文件读写操作。\",\"import java.io.IOException; import java.nio.MappedByteBuffer; import java.nio.channels.FileChannel; import java.nio.file.Paths; import java.nio.file.StandardOpenOption; /** * 内存映射文件示例 * 演示高效的大文件读写 */ public class MappedFileExample { public static void main(String[] args) { String filePath = \\\"large_file.txt\\\"; int fileSize = 1024 * 1024; // 1MB try (FileChannel channel = FileChannel.open( Paths.get(filePath), StandardOpenOption.READ, StandardOpenOption.WRITE, StandardOpenOption.CREATE)) { // 将文件映射到内存 MappedByteBuffer buffer = channel.map( FileChannel.MapMode.READ_WRITE, 0, // 映射起始位置 fileSize); // 映射大小 // 写入数据 String data = \\\"内存映射文件测试数据\\\"; buffer.put(data.getBytes()); // 切换到读模式 buffer.flip(); // 读取数据 byte[] readData = new byte[data.getBytes().length]; buffer.get(readData); System.out.println(\\\"读取数据: \\\" + new String(readData)); // 强制刷新到磁盘 buffer.force(); } catch (IOException e) { e.printStackTrace(); } } }\"]},\"2918\":{\"h\":\"知识扩展\"},\"2919\":{\"h\":\"设计思想\",\"t\":[\"NIO的设计体现了以下核心思想：\",\"面向缓冲区：通过缓冲区实现数据的批量处理，减少IO操作次数\",\"非阻塞IO：通过Selector实现单线程处理多通道，提高并发处理能力\",\"事件驱动：基于事件模型，只在有IO事件发生时才进行处理\",\"零拷贝：通过内存映射文件减少数据拷贝次数，提高性能\",\"双向通道：通道支持双向操作，比单向流更灵活\"]},\"2920\":{\"h\":\"避坑指南\",\"t\":[\"Buffer操作顺序问题：\",\"忘记调用flip()方法切换读写模式，导致数据读取错误\",\"读取后未调用clear()或compact()，导致后续写入覆盖数据\",\"解决方案：严格遵循\\\"写入→flip()→读取→clear()/compact()\\\"的操作顺序\",\"Selector空轮询问题：\",\"在某些JDK版本中存在Selector空轮询bug，导致CPU使用率100%\",\"解决方案：使用select(timeout)设置超时时间，或升级JDK版本\",\"通道关闭问题：\",\"未正确关闭通道导致资源泄漏\",\"关闭通道前未确保缓冲区数据已写入\",\"解决方案：使用try-with-resources自动管理通道资源\",\"内存映射文件陷阱：\",\"内存映射文件大小受限于可用虚拟内存\",\"写入后未调用force()方法可能导致数据丢失\",\"关闭通道后映射内存依然可访问，但操作会导致异常\",\"解决方案：合理设置映射大小，关键数据写入后调用force()\",\"非阻塞模式下的异常处理：\",\"非阻塞模式下read()和write()可能返回0，表示未读取/写入任何数据\",\"错误处理需要检查返回值，不能简单依赖异常\",\"解决方案：正确处理返回值为0的情况，实现循环读写\"]},\"2921\":{\"h\":\"深度思考题\",\"t\":[\"思考题1：NIO的Reactor模式和Proactor模式有什么区别？在Java NIO中如何实现Reactor模式？\",\"思考题回答： Reactor模式和Proactor模式是两种常见的异步IO设计模式：\",\"Reactor模式（反应器模式）：\",\"基于同步IO，由应用程序主动等待IO事件就绪\",\"当IO事件就绪后，应用程序负责完成实际的IO操作\",\"Java NIO的Selector就是Reactor模式的实现\",\"优点：实现简单，控制流清晰\",\"缺点：IO操作仍在应用线程中完成，可能阻塞\",\"Proactor模式（前摄器模式）：\",\"基于异步IO，由操作系统完成IO操作\",\"应用程序只需发起IO请求，由操作系统在后台完成\",\"当IO操作完成后，操作系统通知应用程序\",\"Java没有原生Proactor模式实现，但可以通过CompletableFuture等方式模拟\",\"优点：应用线程不参与IO操作，效率更高\",\"缺点：实现复杂，依赖操作系统支持\",\"Java NIO实现Reactor模式示例：\",\"import java.io.IOException; import java.net.InetSocketAddress; import java.nio.channels.SelectionKey; import java.nio.channels.Selector; import java.nio.channels.ServerSocketChannel; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; /** * Reactor模式实现 * 单Reactor单线程模型 */ public class ReactorPatternExample { private final Selector selector; private final ServerSocketChannel serverSocketChannel; private final ExecutorService handlerPool; public ReactorPatternExample(int port) throws IOException { // 创建选择器 selector = Selector.open(); // 创建服务器通道 serverSocketChannel = ServerSocketChannel.open(); serverSocketChannel.socket().bind(new InetSocketAddress(port)); serverSocketChannel.configureBlocking(false); // 注册接受事件 serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT, new AcceptHandler()); // 创建处理器线程池 handlerPool = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors()); } public void start() { new Thread(this::reactorLoop).start(); System.out.println(\\\"Reactor服务器启动...\\\"); } private void reactorLoop() { try { while (!Thread.interrupted()) { selector.select(); var iterator = selector.selectedKeys().iterator(); while (iterator.hasNext()) { SelectionKey key = iterator.next(); iterator.remove(); // 分发事件到对应的处理器 Runnable handler = (Runnable) key.attachment(); if (handler != null) { handler.run(); } } } } catch (IOException e) { e.printStackTrace(); } } // 接受连接处理器 private class AcceptHandler implements Runnable { @Override public void run() { try { var socketChannel = serverSocketChannel.accept(); if (socketChannel != null) { System.out.println(\\\"接受新连接: \\\" + socketChannel.getRemoteAddress()); socketChannel.configureBlocking(false); // 注册读事件和处理器 var readHandler = new ReadHandler(socketChannel); socketChannel.register(selector, SelectionKey.OP_READ, readHandler); } } catch (IOException e) { e.printStackTrace(); } } } // 读取数据处理器 private class ReadHandler implements Runnable { private final SocketChannel socketChannel; public ReadHandler(SocketChannel socketChannel) { this.socketChannel = socketChannel; } @Override public void run() { // 提交到线程池处理 handlerPool.submit(() -> { try { ByteBuffer buffer = ByteBuffer.allocate(1024); int bytesRead = socketChannel.read(buffer); if (bytesRead == -1) { socketChannel.close(); System.out.println(\\\"连接关闭: \\\" + socketChannel.getRemoteAddress()); return; } if (bytesRead > 0) { buffer.flip(); byte[] data = new byte[buffer.remaining()]; buffer.get(data); System.out.println(\\\"收到数据: \\\" + new String(data)); // 处理数据... String response = \\\"处理结果: \\\" + new String(data); // 写入响应 buffer.clear(); buffer.put(response.getBytes()); buffer.flip(); socketChannel.write(buffer); } } catch (IOException e) { e.printStackTrace(); } }); } } public static void main(String[] args) throws IOException { new ReactorPatternExample(8080).start(); } }\",\"思考题2：如何使用Java NIO实现一个简单的HTTP服务器？\",\"思考题回答： 以下是使用Java NIO实现简单HTTP服务器的核心代码：\",\"import java.io.IOException; import java.net.InetSocketAddress; import java.nio.ByteBuffer; import java.nio.channels.SelectionKey; import java.nio.channels.Selector; import java.nio.channels.ServerSocketChannel; import java.nio.channels.SocketChannel; import java.util.Iterator; import java.util.Set; /** * 简单NIO HTTP服务器 */ public class SimpleHttpServer { public static void main(String[] args) { try { Selector selector = Selector.open(); ServerSocketChannel serverSocket = ServerSocketChannel.open(); serverSocket.bind(new InetSocketAddress(8080)); serverSocket.configureBlocking(false); serverSocket.register(selector, SelectionKey.OP_ACCEPT); System.out.println(\\\"HTTP服务器启动，监听端口8080...\\\"); while (true) { selector.select(); Set<SelectionKey> selectedKeys = selector.selectedKeys(); Iterator<SelectionKey> iterator = selectedKeys.iterator(); while (iterator.hasNext()) { SelectionKey key = iterator.next(); if (key.isAcceptable()) { handleAccept(key, selector); } else if (key.isReadable()) { handleRead(key); } iterator.remove(); } } } catch (IOException e) { e.printStackTrace(); } } private static void handleAccept(SelectionKey key, Selector selector) throws IOException { ServerSocketChannel serverSocket = (ServerSocketChannel) key.channel(); SocketChannel clientSocket = serverSocket.accept(); clientSocket.configureBlocking(false); clientSocket.register(selector, SelectionKey.OP_READ); } private static void handleRead(SelectionKey key) throws IOException { SocketChannel clientSocket = (SocketChannel) key.channel(); ByteBuffer buffer = ByteBuffer.allocate(1024); int bytesRead = clientSocket.read(buffer); if (bytesRead == -1) { clientSocket.close(); return; } if (bytesRead > 0) { buffer.flip(); byte[] requestData = new byte[buffer.remaining()]; buffer.get(requestData); String request = new String(requestData); // 解析HTTP请求 String[] requestLines = request.split(\\\"\\\\r\\\\n\\\"); String[] firstLine = requestLines[0].split(\\\" \\\"); String method = firstLine[0]; String path = firstLine[1]; System.out.println(\\\"收到请求: \\\" + method + \\\" \\\" + path); // 构建HTTP响应 String response = \\\"HTTP/1.1 200 OK\\\\r\\\\n\\\" + \\\"Content-Type: text/html\\\\r\\\\n\\\" + \\\"Connection: close\\\\r\\\\n\\\" + \\\"\\\\r\\\\n\\\" + \\\"<html><body><h1>Hello NIO HTTP Server</h1>\\\" + \\\"<p>Request: \\\" + method + \\\" \\\" + path + \\\"</p></body></html>\\\"; // 发送响应 ByteBuffer responseBuffer = ByteBuffer.wrap(response.getBytes()); clientSocket.write(responseBuffer); clientSocket.close(); } } }\",\"这个简单的HTTP服务器实现了以下功能：\",\"使用Selector实现非阻塞IO\",\"处理客户端连接请求\",\"解析HTTP请求的方法和路径\",\"返回简单的HTML响应\",\"支持基本的HTTP 1.1协议\",\"实际应用中还需要添加错误处理、请求路由、静态资源处理等功能，但这个示例展示了NIO在网络编程中的基本应用。\"]},\"2922\":{\"h\":\"基础-异常体系设计\"},\"2923\":{\"h\":\"概述\",\"t\":[\"异常是程序运行过程中出现的意外情况，Java通过异常处理机制提供了一种结构化的错误处理方式。Java异常体系以Throwable为根类，分为Error和Exception两大分支，其中Exception又分为受检异常（Checked Exception）和非受检异常（Unchecked Exception）。\"]},\"2924\":{\"h\":\"知识要点\"},\"2925\":{\"h\":\"1. 异常体系结构\",\"t\":[\"Java异常体系的核心类层次结构如下：\",\"Throwable: 所有错误和异常的父类，包含异常信息和堆栈跟踪\",\"Error: 表示严重错误，如OutOfMemoryError，程序通常无法恢复\",\"Exception: 表示程序可以处理的异常 \",\"RuntimeException: 非受检异常，编译器不强制捕获\",\"其他Exception子类: 受检异常，编译器强制要求捕获或声明抛出\"]},\"2926\":{\"h\":\"2. 异常的分类\",\"t\":[\"受检异常（Checked Exception）: 编译期检查的异常，必须显式捕获或声明抛出，如IOException、ClassNotFoundException\",\"非受检异常（Unchecked Exception）: 运行时异常，编译器不强制处理，通常由程序逻辑错误导致，如NullPointerException、ArrayIndexOutOfBoundsException\"]},\"2927\":{\"h\":\"3. 异常的基本使用\",\"t\":[\"import java.io.FileInputStream; import java.io.FileNotFoundException; import java.io.IOException; /** * 异常处理基本示例 */ public class ExceptionBasicExample { /** * 读取文件内容 * @param filePath 文件路径 * @throws FileNotFoundException 如果文件不存在 * @throws IOException 如果读取文件时发生错误 */ public void readFile(String filePath) throws FileNotFoundException, IOException { FileInputStream fis = null; try { fis = new FileInputStream(filePath); int data = fis.read(); while (data != -1) { System.out.print((char) data); data = fis.read(); } } finally { // 确保资源关闭 if (fis != null) { try { fis.close(); } catch (IOException e) { e.printStackTrace(); } } } } /** * 演示运行时异常 */ public void demonstrateRuntimeException() { String str = null; // 会抛出NullPointerException，无需显式捕获 System.out.println(str.length()); } }\"]},\"2928\":{\"h\":\"知识扩展\"},\"2929\":{\"h\":\"设计思想\",\"t\":[\"异常体系设计遵循了以下原则：\",\"层次化: 通过类继承构建异常体系，便于分类和处理\",\"区分错误类型: 将严重错误(Error)与普通异常(Exception)分离\",\"编译时检查: 受检异常确保程序员处理可预见的错误\",\"异常链: 支持异常包装，保留原始异常信息\"]},\"2930\":{\"h\":\"避坑指南\",\"t\":[\"避免捕获Exception基类: 这会隐藏潜在错误，应该捕获具体异常\",\"不要忽略异常: 空的catch块会导致错误被掩盖\",\"资源释放: 使用try-finally或try-with-resources确保资源正确释放\",\"异常信息: 提供有意义的异常消息，便于调试\",\"不要在finally中使用return: 会覆盖try或catch中的return值\"]},\"2931\":{\"h\":\"深度思考题\",\"t\":[\"思考题: 为什么Java将异常分为受检异常和非受检异常？这种设计有什么优缺点？\",\"思考题回答: Java的异常分类设计基于错误的可预测性和处理责任。受检异常用于表示可预见且应该处理的错误（如文件操作），强制程序员处理这些情况，提高了代码健壮性。非受检异常用于表示编程错误（如空指针），这类错误通常应该在开发阶段修复，而非运行时处理。\",\"优点：提高代码可靠性，强制处理可预见错误，使异常处理更加结构化。 缺点：有时过度使用受检异常会导致代码臃肿（如IO操作），程序员可能会用空catch块简单规避，反而降低代码质量。Java 8的Stream API和Lambda表达式更倾向于使用非受检异常，反映了设计思想的演变。\"]},\"2932\":{\"h\":\"深化-深入理解异常\"},\"2933\":{\"h\":\"概述\",\"t\":[\"深入理解异常处理需要掌握异常的底层实现机制、异常链传递、自定义异常设计以及异常对性能的影响。本章将从JVM层面解析异常处理原理，探讨异常链的构建与使用，指导如何设计高质量的自定义异常，并分析异常处理的性能考量。\"]},\"2934\":{\"h\":\"知识要点\"},\"2935\":{\"h\":\"1. 异常的底层实现机制\",\"t\":[\"JVM通过异常表（Exception Table）实现异常处理，当异常发生时，JVM会在当前方法的异常表中查找匹配的catch块。异常表包含以下信息：\",\"from: 可能抛出异常的起始字节码索引\",\"to: 可能抛出异常的结束字节码索引\",\"target: 异常处理代码的起始字节码索引\",\"type: 捕获的异常类型\",\"/** * 演示异常表机制 */ public class ExceptionTableDemo { public void process() { try { riskyOperation(); } catch (IOException e) { handleException(e); } catch (SQLException e) { handleException(e); } } private void riskyOperation() throws IOException, SQLException { // 可能抛出异常的操作 } private void handleException(Exception e) { // 异常处理 } }\",\"编译后，process()方法的异常表会包含两个条目，分别对应IOException和SQLException的捕获范围。\"]},\"2936\":{\"h\":\"2. 堆栈跟踪（Stack Trace）\",\"t\":[\"堆栈跟踪记录了异常发生时的方法调用链，通过Throwable.getStackTrace()获取。JVM在创建异常对象时自动填充堆栈信息，这一过程会遍历调用栈，存在一定性能开销。\",\"/** * 堆栈跟踪使用示例 */ public class StackTraceDemo { public static void main(String[] args) { try { methodA(); } catch (Exception e) { System.out.println(\\\"异常信息:\\\"); e.printStackTrace(); System.out.println(\\\"\\\\n堆栈跟踪元素:\\\"); StackTraceElement[] stackTrace = e.getStackTrace(); for (StackTraceElement element : stackTrace) { System.out.println(element.getClassName() + \\\".\\\" + element.getMethodName() + \\\":\\\" + element.getLineNumber()); } } } private static void methodA() { methodB(); } private static void methodB() { methodC(); } private static void methodC() { throw new RuntimeException(\\\"演示堆栈跟踪\\\"); } }\"]},\"2937\":{\"h\":\"3. 异常链（Exception Chaining）\",\"t\":[\"异常链用于包装原始异常，传递底层错误信息，同时提供高层异常语义。通过initCause()方法或构造函数参数设置原因异常。\",\"/** * 异常链示例 */ public class ExceptionChainingDemo { public void businessOperation() throws BusinessException { try { dataAccessOperation(); } catch (SQLException e) { // 包装原始异常，传递业务异常 BusinessException be = new BusinessException(\\\"业务操作失败\\\"); be.initCause(e); throw be; } } private void dataAccessOperation() throws SQLException { throw new SQLException(\\\"数据库连接失败\\\"); } // 自定义业务异常 static class BusinessException extends Exception { public BusinessException(String message) { super(message); } } }\"]},\"2938\":{\"h\":\"4. 自定义异常设计\",\"t\":[\"设计高质量自定义异常应遵循以下原则：\",\"选择合适的父类（受检或非受检）\",\"提供有意义的异常消息\",\"包含必要的错误码和上下文信息\",\"实现序列化接口（Serializable）\",\"import java.io.Serializable; /** * 自定义业务异常示例 */ public class OrderException extends Exception implements Serializable { // 错误码 private final int errorCode; // 订单ID private final String orderId; public OrderException(String message, int errorCode, String orderId) { super(message); this.errorCode = errorCode; this.orderId = orderId; } public OrderException(String message, Throwable cause, int errorCode, String orderId) { super(message, cause); this.errorCode = errorCode; this.orderId = orderId; } // Getters public int getErrorCode() { return errorCode; } public String getOrderId() { return orderId; } }\"]},\"2939\":{\"h\":\"知识扩展\"},\"2940\":{\"h\":\"设计思想\",\"t\":[\"异常处理的核心设计思想包括：\",\"责任分离: 异常的产生者负责抛出异常，调用者负责处理异常\",\"信息完整: 异常应包含足够的上下文信息，便于问题定位\",\"异常转换: 底层技术异常应转换为高层业务异常，隐藏实现细节\",\"异常聚合: 将多个相关异常聚合为一个复合异常，简化异常处理\"]},\"2941\":{\"h\":\"避坑指南\",\"t\":[\"避免过度使用异常: 不要用异常控制正常业务流程，这会影响性能\",\"谨慎使用异常链: 避免创建过长的异常链，增加调试复杂度\",\"堆栈跟踪开销: 异常创建时的堆栈填充是昂贵操作，高频场景需优化\",\"序列化问题: 自定义异常如需要跨进程传输，必须正确实现序列化\",\"异常匹配规则: catch块顺序应从具体到一般，否则特定异常会被父类异常捕获\"]},\"2942\":{\"h\":\"深度思考题\",\"t\":[\"思考题: 为什么在高性能系统中应避免在循环中创建异常对象？如何优化频繁异常场景的性能？\",\"思考题回答: 在循环中创建异常对象会导致频繁的堆栈跟踪生成和内存分配，严重影响性能。异常对象创建时，JVM需要遍历当前线程的调用栈并记录每个栈帧信息，这是一个O(n)操作。\",\"优化方案：\",\"异常缓存: 对于频繁发生的已知异常，可以缓存异常对象（注意线程安全）\",\"预检查机制: 在可能抛出异常前进行条件检查，避免异常发生\",\"状态码模式: 对于高频操作，使用状态码代替异常传递错误信息\",\"延迟异常创建: 仅在确实需要抛出异常时才创建异常对象\",\"异常抑制: Java 7+提供addSuppressed()方法，可将多个异常关联到一个主异常\",\"示例代码（预检查优化）：\",\"// 低效方式 public int getValue(List<Integer> list, int index) { try { return list.get(index); } catch (IndexOutOfBoundsException e) { return -1; // 高频场景下性能差 } } // 优化方式 public int getValueOptimized(List<Integer> list, int index) { if (index < 0 || index >= list.size()) { return -1; // 预检查避免异常 } return list.get(index); }\"]},\"2943\":{\"h\":\"进阶-异常处理最佳实践\"},\"2944\":{\"h\":\"概述\",\"t\":[\"异常处理最佳实践是构建健壮Java应用的关键环节，它涉及异常的合理抛出、捕获、处理和日志记录等方面。本章将系统介绍异常处理的设计原则、实用模式以及在不同场景下的最佳实践，帮助开发者编写更具可维护性和可靠性的代码。\"]},\"2945\":{\"h\":\"知识要点\"},\"2946\":{\"h\":\"1. 异常处理的核心原则\"},\"2947\":{\"h\":\"1.1 明确性原则\",\"t\":[\"异常应该准确反映问题本质，异常消息应包含具体上下文信息，避免模糊不清的描述。\",\"/** * 明确异常示例 */ public void transferMoney(Account from, Account to, BigDecimal amount) { if (amount.compareTo(BigDecimal.ZERO) <= 0) { // 异常消息包含具体金额信息，便于问题定位 throw new IllegalArgumentException(\\\"转账金额必须为正数: \\\" + amount); } if (from.getBalance().compareTo(amount) < 0) { // 包含账户ID和余额信息 throw new InsufficientFundsException( String.format(\\\"账户%s余额不足，当前余额: %s, 需要: %s\\\", from.getId(), from.getBalance(), amount) ); } // 执行转账逻辑 }\"]},\"2948\":{\"h\":\"1.2 专一性原则\",\"t\":[\"每个方法应只抛出与其职责相关的特定异常，避免抛出过于宽泛的异常类型。\",\"/** * 专一性异常示例 - 反面教材 */ public void processOrder(Order order) throws Exception { // 不推荐: 抛出过于宽泛的Exception // 处理订单逻辑 } /** * 专一性异常示例 - 推荐做法 */ public void processOrder(Order order) throws OrderNotFoundException, InvalidOrderStatusException, PaymentFailedException { // 处理订单逻辑 }\"]},\"2949\":{\"h\":\"1.3 及时性原则\",\"t\":[\"异常应在错误发生时立即抛出，避免在后续处理中丢失上下文信息。\",\"/** * 及时性原则示例 */ public Product findProduct(String productId) { if (productId == null || productId.trim().isEmpty()) { // 立即抛出异常，不继续执行 throw new IllegalArgumentException(\\\"产品ID不能为空\\\"); } Product product = productRepository.findById(productId); if (product == null) { // 发现问题立即抛出 throw new ProductNotFoundException(\\\"产品不存在: \\\" + productId); } return product; }\"]},\"2950\":{\"h\":\"2. 异常处理实用模式\"},\"2951\":{\"h\":\"2.1 try-with-resources自动资源管理\",\"t\":[\"JDK7引入的try-with-resources语句可以自动关闭实现AutoCloseable接口的资源，避免资源泄漏。\",\"/** * try-with-resources使用示例 */ public String readFileContent(String filePath) throws IOException { // 资源会自动关闭，无需手动finally块 try (FileInputStream fis = new FileInputStream(filePath); BufferedReader br = new BufferedReader(new InputStreamReader(fis, StandardCharsets.UTF_8))) { StringBuilder content = new StringBuilder(); String line; while ((line = br.readLine()) != null) { content.append(line).append(System.lineSeparator()); } return content.toString(); } // 无需显式关闭资源 }\"]},\"2952\":{\"h\":\"2.2 异常转换模式\",\"t\":[\"将底层技术异常转换为高层业务异常，隐藏实现细节，同时保留原始异常信息。\",\"/** * 异常转换示例 */ public Order getOrder(String orderId) { try { return orderDao.findById(orderId); } catch (SQLException e) { // 将SQL异常转换为业务异常，保留原始异常作为原因 throw new DataAccessException( \\\"获取订单信息失败: \\\" + orderId, e); } }\"]},\"2953\":{\"h\":\"2.3 异常聚合模式\",\"t\":[\"在批量操作中，收集多个异常并聚合为一个复合异常，避免单个异常导致整个操作失败。\",\"/** * 异常聚合示例 */ public void batchProcess(List<Order> orders) { List<OrderProcessingException> exceptions = new ArrayList<>(); for (Order order : orders) { try { processSingleOrder(order); } catch (Exception e) { // 收集异常而非立即抛出 exceptions.add(new OrderProcessingException( \\\"处理订单失败: \\\" + order.getId(), e)); } } if (!exceptions.isEmpty()) { // 聚合多个异常并抛出 throw new BatchProcessingException( \\\"批量处理失败，共\\\" + exceptions.size() + \\\"个订单处理异常\\\", exceptions); } }\"]},\"2954\":{\"h\":\"3. 不同层级的异常处理策略\"},\"2955\":{\"h\":\"3.1 业务层异常处理\",\"t\":[\"业务层应抛出有业务含义的异常，由上层统一处理。\",\"/** * 业务层异常处理示例 */ @Service public class OrderService { @Autowired private PaymentService paymentService; public OrderResult createOrder(OrderRequest request) { // 业务规则验证 validateOrderRequest(request); try { // 调用支付服务 PaymentResult paymentResult = paymentService.processPayment( request.getUserId(), request.getAmount()); if (!paymentResult.isSuccess()) { throw new PaymentFailedException( \\\"支付失败: \\\" + paymentResult.getErrorCode(), paymentResult.getErrorCode()); } // 创建订单 Order order = createOrderRecord(request, paymentResult); return new OrderResult(order.getId(), OrderStatus.SUCCESS); } catch (PaymentServiceUnavailableException e) { // 特定异常处理 log.error(\\\"支付服务不可用\\\", e); throw new ServiceUnavailableException(\\\"支付服务暂时不可用，请稍后重试\\\"); } } }\"]},\"2956\":{\"h\":\"3.2 控制器层异常统一处理\",\"t\":[\"使用Spring的@ControllerAdvice统一处理控制器层异常，返回友好响应。\",\"/** * 全局异常处理器 */ @ControllerAdvice public class GlobalExceptionHandler { private static final Logger log = LoggerFactory.getLogger(GlobalExceptionHandler.class); @ExceptionHandler(BusinessException.class) @ResponseBody public ApiResponse handleBusinessException(BusinessException e) { // 业务异常，返回友好消息 return ApiResponse.fail(e.getErrorCode(), e.getMessage()); } @ExceptionHandler(ResourceNotFoundException.class) @ResponseStatus(HttpStatus.NOT_FOUND) @ResponseBody public ApiResponse handleResourceNotFound(ResourceNotFoundException e) { // 资源未找到异常 return ApiResponse.fail(404, e.getMessage()); } @ExceptionHandler(Exception.class) @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR) @ResponseBody public ApiResponse handleGenericException(Exception e) { // 未捕获的异常，记录日志 log.error(\\\"未处理的异常\\\", e); return ApiResponse.fail(500, \\\"系统繁忙，请稍后重试\\\"); } }\"]},\"2957\":{\"h\":\"知识扩展\"},\"2958\":{\"h\":\"设计思想\",\"t\":[\"异常处理的设计思想主要基于以下几个核心概念：\",\"责任分离：异常的产生者负责抛出准确的异常，调用者负责适当处理异常\",\"信息完整：异常应包含足够的上下文信息，便于问题诊断和修复\",\"关注点分离：业务逻辑与错误处理分离，提高代码可读性和可维护性\",\"防御式编程：在可能出错的地方进行预判和保护，但不过度使用异常控制流程\"]},\"2959\":{\"h\":\"避坑指南\",\"t\":[\"避免过度使用try-catch 不要在循环内部使用try-catch，这会严重影响性能。应将try-catch放在循环外部，或重构代码避免频繁异常。\",\"// 不推荐 for (String id : ids) { try { process(id); } catch (ProcessingException e) { // 处理异常 } } // 推荐 List<String> failedIds = new ArrayList<>(); for (String id : ids) { if (!canProcess(id)) { // 预检查 failedIds.add(id); continue; } try { process(id); } catch (ProcessingException e) { failedIds.add(id); log.error(\\\"处理{}失败\\\", id, e); } }\",\"不要忽略异常 空的catch块会隐藏错误，导致问题难以诊断。至少应记录异常信息。\",\"// 不推荐 try { riskyOperation(); } catch (Exception e) { // 空catch块，隐藏错误 } // 推荐 try { riskyOperation(); } catch (Exception e) { log.error(\\\"执行风险操作失败\\\", e); // 或者重新抛出包装后的异常 throw new ServiceException(\\\"操作失败，请联系管理员\\\", e); }\",\"正确使用finally块 finally块用于释放资源，但不应在finally中使用return语句，这会覆盖try或catch中的返回值。\",\"// 错误示例 public boolean process() { try { return true; } finally { return false; // 这会覆盖try中的return } } // 正确示例 public boolean process() { boolean success = false; try { // 处理逻辑 success = true; } finally { // 释放资源 cleanup(); } return success; }\"]},\"2960\":{\"h\":\"深度思考题\",\"t\":[\"思考题：在微服务架构中，如何设计跨服务的异常处理策略？如何保证异常信息在服务间传递的完整性和安全性？\",\"思考题回答：在微服务架构中，跨服务异常处理需要考虑以下几点：\",\"统一异常响应格式：定义跨服务的标准异常响应格式，包含错误码、消息、时间戳和请求ID等信息\",\"异常传递机制：使用Feign等客户端时，通过Decoder捕获远程服务异常并转换为本地异常\",\"public class FeignErrorDecoder implements ErrorDecoder { @Override public Exception decode(String methodKey, Response response) { try { ErrorResponse error = new ObjectMapper().readValue( response.body().asInputStream(), ErrorResponse.class); return new RemoteServiceException( error.getCode(), error.getMessage(), error.getRequestId()); } catch (Exception e) { return new ServiceCommunicationException( \\\"服务通信异常: \\\" + response.status()); } } }\",\"分布式追踪：集成Sleuth和Zipkin等工具，在异常中包含追踪ID，便于跨服务问题定位\",\"安全考虑：异常信息不应包含敏感数据，在API网关层对异常信息进行过滤和脱敏\",\"熔断降级：结合Resilience4j或Hystrix等框架，当依赖服务异常时执行降级策略\",\"异常聚合：在BFF层聚合多个微服务的异常信息，返回统一的用户友好响应\",\"通过这些策略，可以在保证异常信息完整性的同时，确保系统的安全性和可靠性，为用户提供一致的错误体验。\"]},\"2961\":{\"h\":\"基础-反射机制原理\"},\"2962\":{\"h\":\"概述\",\"t\":[\"反射是Java语言的一种强大特性，它允许程序在运行时动态获取类的信息并操作类的属性、方法和构造函数。通过反射，我们可以打破封装性，访问私有成员，实现框架的灵活配置和动态代理等高级功能。本章节将深入解析反射的底层原理、核心API及其基本使用方法。\"]},\"2963\":{\"h\":\"知识要点\"},\"2964\":{\"h\":\"1. 反射的核心类与获取方式\"},\"2965\":{\"h\":\"1.1 Class类\",\"t\":[\"Class类是反射机制的入口，它代表一个类的字节码文件，包含了类的所有信息。获取Class对象有三种常用方式：\",\"/** * Class对象的三种获取方式 */ public class ClassObjectDemo { public static void main(String[] args) throws ClassNotFoundException { // 方式1：通过类名.class获取（编译期确定） Class<?> clazz1 = User.class; System.out.println(\\\"方式1: \\\" + clazz1.getName()); // 方式2：通过对象.getClass()获取（运行期确定） User user = new User(); Class<?> clazz2 = user.getClass(); System.out.println(\\\"方式2: \\\" + clazz2.getName()); // 方式3：通过Class.forName()获取（动态加载类） Class<?> clazz3 = Class.forName(\\\"com.example.reflection.User\\\"); System.out.println(\\\"方式3: \\\" + clazz3.getName()); // 验证三种方式获取的是同一个Class对象 System.out.println(\\\"clazz1 == clazz2: \\\" + (clazz1 == clazz2)); System.out.println(\\\"clazz1 == clazz3: \\\" + (clazz1 == clazz3)); } } class User { private String name; private int age; // 省略getter和setter方法 }\"]},\"2966\":{\"h\":\"1.2 反射核心API\",\"t\":[\"Java反射API主要包含在java.lang.reflect包中，核心类包括：\",\"Constructor：类的构造方法\",\"Method：类的方法\",\"Field：类的属性\",\"Modifier：访问修饰符工具类\",\"Parameter：方法参数（JDK8+）\"]},\"2967\":{\"h\":\"2. 反射的基本操作\"},\"2968\":{\"h\":\"2.1 获取类的基本信息\",\"t\":[\"通过Class对象可以获取类的完整信息，包括类名、父类、接口、注解等：\",\"import java.lang.annotation.Annotation; import java.lang.reflect.Modifier; /** * 获取类的基本信息 */ public class ClassInfoDemo { public static void main(String[] args) { Class<?> clazz = User.class; // 获取类名 System.out.println(\\\"类名: \\\" + clazz.getName()); System.out.println(\\\"简单类名: \\\" + clazz.getSimpleName()); // 获取修饰符 int modifiers = clazz.getModifiers(); System.out.println(\\\"修饰符: \\\" + Modifier.toString(modifiers)); // 获取父类 Class<?> superClass = clazz.getSuperclass(); System.out.println(\\\"父类: \\\" + (superClass != null ? superClass.getName() : \\\"无\\\")); // 获取实现的接口 Class<?>[] interfaces = clazz.getInterfaces(); System.out.println(\\\"实现的接口: \\\"); for (Class<?> inter : interfaces) { System.out.println(\\\"- \\\" + inter.getName()); } // 获取类注解 Annotation[] annotations = clazz.getAnnotations(); System.out.println(\\\"类注解: \\\"); for (Annotation anno : annotations) { System.out.println(\\\"- \\\" + anno.annotationType().getName()); } } } @Deprecated class User implements Cloneable { private String name; private int age; // 省略getter和setter方法 }\"]},\"2969\":{\"h\":\"2.2 创建对象\",\"t\":[\"通过反射可以使用构造方法创建对象，包括无参构造和有参构造：\",\"import java.lang.reflect.Constructor; /** * 通过反射创建对象 */ public class ObjectCreationDemo { public static void main(String[] args) throws Exception { Class<?> clazz = User.class; // 1. 使用无参构造创建对象（需要类有无参构造） User user1 = (User) clazz.newInstance(); user1.setName(\\\"张三\\\"); user1.setAge(20); System.out.println(\\\"无参构造创建: \\\" + user1.getName() + \\\", \\\" + user1.getAge()); // 2. 使用有参构造创建对象 Constructor<?> constructor = clazz.getConstructor(String.class, int.class); User user2 = (User) constructor.newInstance(\\\"李四\\\", 25); System.out.println(\\\"有参构造创建: \\\" + user2.getName() + \\\", \\\" + user2.getAge()); // 3. 使用私有构造创建对象 Constructor<?> privateConstructor = clazz.getDeclaredConstructor(String.class); privateConstructor.setAccessible(true); // 暴力访问私有构造 User user3 = (User) privateConstructor.newInstance(\\\"王五\\\"); user3.setAge(30); System.out.println(\\\"私有构造创建: \\\" + user3.getName() + \\\", \\\" + user3.getAge()); } } class User { private String name; private int age; // 无参构造 public User() {} // 有参构造 public User(String name, int age) { this.name = name; this.age = age; } // 私有构造 private User(String name) { this.name = name; } // getter和setter public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } }\"]},\"2970\":{\"h\":\"2.3 调用方法\",\"t\":[\"反射可以调用类的方法，包括公有方法、私有方法和静态方法：\",\"import java.lang.reflect.Method; /** * 通过反射调用方法 */ public class MethodInvocationDemo { public static void main(String[] args) throws Exception { Class<?> clazz = User.class; User user = new User(\\\"张三\\\", 20); // 1. 调用公有方法 Method setNameMethod = clazz.getMethod(\\\"setName\\\", String.class); setNameMethod.invoke(user, \\\"张三三\\\"); System.out.println(\\\"调用公有方法后: \\\" + user.getName()); Method getNameMethod = clazz.getMethod(\\\"getName\\\"); String name = (String) getNameMethod.invoke(user); System.out.println(\\\"获取姓名: \\\" + name); // 2. 调用私有方法 Method privateMethod = clazz.getDeclaredMethod(\\\"privateMethod\\\"); privateMethod.setAccessible(true); // 暴力访问私有方法 privateMethod.invoke(user); // 3. 调用静态方法 Method staticMethod = clazz.getMethod(\\\"staticMethod\\\"); staticMethod.invoke(null); // 静态方法调用时，对象参数为null // 4. 调用带返回值的方法 Method calculateMethod = clazz.getMethod(\\\"calculate\\\", int.class, int.class); int result = (int) calculateMethod.invoke(user, 10, 20); System.out.println(\\\"计算结果: \\\" + result); } } class User { private String name; private int age; public User(String name, int age) { this.name = name; this.age = age; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } // 私有方法 private void privateMethod() { System.out.println(\\\"调用了私有方法\\\"); } // 静态方法 public static void staticMethod() { System.out.println(\\\"调用了静态方法\\\"); } // 带返回值的方法 public int calculate(int a, int b) { return a + b; } }\"]},\"2971\":{\"h\":\"2.4 访问属性\",\"t\":[\"反射可以获取和修改类的属性值，包括私有属性：\",\"import java.lang.reflect.Field; /** * 通过反射访问属性 */ public class FieldAccessDemo { public static void main(String[] args) throws Exception { Class<?> clazz = User.class; User user = new User(\\\"张三\\\", 20); // 1. 获取公有属性 Field publicField = clazz.getField(\\\"publicField\\\"); System.out.println(\\\"公有属性值: \\\" + publicField.get(user)); publicField.set(user, \\\"修改后的公有属性\\\"); System.out.println(\\\"修改后公有属性值: \\\" + publicField.get(user)); // 2. 获取私有属性 Field nameField = clazz.getDeclaredField(\\\"name\\\"); nameField.setAccessible(true); // 暴力访问私有属性 System.out.println(\\\"私有属性name值: \\\" + nameField.get(user)); nameField.set(user, \\\"李四\\\"); System.out.println(\\\"修改后name值: \\\" + nameField.get(user)); Field ageField = clazz.getDeclaredField(\\\"age\\\"); ageField.setAccessible(true); System.out.println(\\\"私有属性age值: \\\" + ageField.get(user)); ageField.setInt(user, 25); System.out.println(\\\"修改后age值: \\\" + ageField.get(user)); // 3. 获取静态属性 Field staticField = clazz.getField(\\\"staticField\\\"); System.out.println(\\\"静态属性值: \\\" + staticField.get(null)); // 静态属性获取时，对象参数为null staticField.set(null, \\\"修改后的静态属性\\\"); System.out.println(\\\"修改后静态属性值: \\\" + staticField.get(null)); } } class User { private String name; private int age; public String publicField = \\\"公有属性\\\"; public static String staticField = \\\"静态属性\\\"; public User(String name, int age) { this.name = name; this.age = age; } }\"]},\"2972\":{\"h\":\"知识扩展\"},\"2973\":{\"h\":\"设计思想\",\"t\":[\"反射机制体现了Java的动态性和灵活性，其设计思想主要包括：\",\"开-闭原则：通过反射可以在不修改原有代码的情况下，动态扩展程序功能\",\"接口隔离原则：反射允许基于接口而非具体实现进行编程，降低耦合度\",\"控制反转：框架通过反射实现对应用程序的控制，如Spring的依赖注入\",\"元数据驱动：通过反射读取注解等元数据，实现配置与代码的分离\"]},\"2974\":{\"h\":\"避坑指南\",\"t\":[\"使用反射时需要注意以下问题：\",\"性能问题 反射调用比直接调用慢约10-100倍，因为需要动态解析类信息。解决方法：\",\"缓存反射对象（Class、Method、Field等）\",\"避免在性能敏感的代码中频繁使用反射\",\"使用MethodHandle（JDK7+）替代反射获取更好性能\",\"import java.lang.invoke.MethodHandle; import java.lang.invoke.MethodHandles; import java.lang.invoke.MethodType; /** * 使用MethodHandle提高反射性能 */ public class MethodHandleDemo { public static void main(String[] args) throws Throwable { User user = new User(\\\"张三\\\", 20); MethodHandles.Lookup lookup = MethodHandles.lookup(); // 获取setName方法的MethodHandle MethodType methodType = MethodType.methodType(void.class, String.class); MethodHandle setNameHandle = lookup.findVirtual(User.class, \\\"setName\\\", methodType); // 调用方法 setNameHandle.invokeExact(user, \\\"张三三\\\"); System.out.println(user.getName()); } }\",\"安全问题 反射可以访问私有成员，破坏封装性。解决方法：\",\"在安全管理器（SecurityManager）中限制反射权限\",\"谨慎使用setAccessible(true)，避免暴露敏感信息\",\"生产环境中对反射调用进行审计和监控\",\"兼容性问题 反射依赖于类结构，当类发生变化（如方法签名修改）时，反射代码可能会抛出异常。解决方法：\",\"尽量使用接口而非具体实现类\",\"反射调用时捕获并处理NoSuchMethodException等异常\",\"版本升级时进行充分的反射兼容性测试\"]},\"2975\":{\"h\":\"深度思考题\",\"t\":[\"思考题1：为什么Java反射可以访问私有成员？这是否违背了Java的封装性原则？\",\"思考题1回答：Java反射能够访问私有成员是因为它通过调用setAccessible(true)方法绕过了访问检查。这并不完全违背封装性原则，而是提供了一种灵活的机制，允许在特定场景下（如框架开发、调试工具）访问私有成员。封装性主要是编译期的概念，而反射是运行期的特性，合理使用反射可以在不破坏整体设计的前提下实现高级功能。不过，滥用反射确实会降低代码的可维护性和安全性，因此需要谨慎使用。\",\"思考题2：Class对象在JVM中是如何存储的？一个类在JVM中会对应几个Class对象？\",\"思考题2回答：Class对象是在类加载过程中由JVM创建的，存储在方法区（Method Area）中。对于同一个类加载器加载的同一个类，JVM中只会有一个Class对象。即使创建多个实例对象，它们的getClass()方法返回的都是同一个Class对象。但是，如果一个类被不同的类加载器加载，即使类名相同，也会产生不同的Class对象，并且这些对象不相等。\"]},\"2976\":{\"h\":\"理解-反射机制执行的流程\"},\"2977\":{\"h\":\"概述\",\"t\":[\"反射机制的执行流程是Java动态性的核心体现，它涉及类加载、元数据解析、访问控制和方法调用等多个环节。深入理解反射的执行流程，不仅有助于掌握其底层实现原理，还能帮助开发者优化反射性能、规避潜在风险。本章将从JVM视角详细剖析反射机制的完整执行流程，包括Class对象的生成、成员查找、权限检查和方法调用的底层实现。\"]},\"2978\":{\"h\":\"知识要点\"},\"2979\":{\"h\":\"1. 类加载与Class对象生成流程\",\"t\":[\"反射的起点是Class对象，它的生成依赖于JVM的类加载机制。完整的类加载流程包括以下阶段：\"]},\"2980\":{\"h\":\"1.1 类加载的生命周期\",\"t\":[\"/** * 演示类加载过程与Class对象生成 */ public class ClassLoadingDemo { public static void main(String[] args) throws Exception { // 初始状态：User类未加载 System.out.println(\\\"初始状态: User类未加载\\\"); // 触发类加载（方式1：Class.forName） System.out.println(\\\"调用Class.forName加载类...\\\"); Class<?> clazz = Class.forName(\\\"com.example.reflection.User\\\"); System.out.println(\\\"类加载完成，Class对象: \\\" + clazz); // 验证Class对象唯一性 Class<?> clazz2 = User.class; System.out.println(\\\"通过类名.class获取的Class对象是否相同: \\\" + (clazz == clazz2)); } } class User { // 静态代码块，类初始化阶段执行 static { System.out.println(\\\"User类初始化阶段执行静态代码块\\\"); } private String name; private int age; // 省略getter和setter方法 }\",\"执行上述代码会输出：\",\"初始状态: User类未加载 调用Class.forName加载类... User类初始化阶段执行静态代码块 类加载完成，Class对象: class com.example.reflection.User 通过类名.class获取的Class对象是否相同: true\"]},\"2981\":{\"h\":\"1.2 Class对象在JVM中的存储\",\"t\":[\"Class对象存储在方法区（Method Area），包含以下关键信息：\",\"类的运行时常量池\",\"字段信息（Field）\",\"方法信息（Method）\",\"构造函数信息（Constructor）\",\"类加载器引用\",\"父类引用\",\"接口信息\",\"访问修饰符\",\"常量池\"]},\"2982\":{\"h\":\"2. 反射成员查找机制\",\"t\":[\"反射获取类成员（方法、字段、构造函数）的过程涉及复杂的查找逻辑，JVM会按照特定规则搜索并返回匹配的成员。\"]},\"2983\":{\"h\":\"2.1 方法查找流程\",\"t\":[\"import java.lang.reflect.Method; /** * 演示反射方法查找机制 */ public class MethodLookupDemo { public static void main(String[] args) throws Exception { Class<?> clazz = User.class; // 1. 获取公有方法（包括继承的公有方法） Method publicMethod = clazz.getMethod(\\\"toString\\\"); System.out.println(\\\"getMethod获取公有方法: \\\" + publicMethod); // 2. 获取当前类声明的方法（包括私有方法，但不包括继承的方法） Method declaredMethod = clazz.getDeclaredMethod(\\\"privateMethod\\\"); System.out.println(\\\"getDeclaredMethod获取声明的方法: \\\" + declaredMethod); // 3. 获取所有公有方法 Method[] publicMethods = clazz.getMethods(); System.out.println(\\\"getMethods获取公有方法数量: \\\" + publicMethods.length); // 4. 获取当前类声明的所有方法 Method[] declaredMethods = clazz.getDeclaredMethods(); System.out.println(\\\"getDeclaredMethods获取声明的方法数量: \\\" + declaredMethods.length); } } class User { private String name; private int age; public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } private void privateMethod() {} protected void protectedMethod() {} void defaultMethod() {} }\",\"方法查找规则：\",\"getMethod(String name, Class<?>... parameterTypes)：\",\"首先搜索当前类声明的公有方法\",\"若未找到，递归搜索父类的公有方法\",\"若未找到，搜索实现的接口方法\",\"找到后进行参数类型匹配\",\"getDeclaredMethod(String name, Class<?>... parameterTypes)：\",\"仅搜索当前类声明的方法（不包括继承的方法）\",\"不检查访问修饰符\",\"找到后进行参数类型匹配\"]},\"2984\":{\"h\":\"2.2 字段查找流程\",\"t\":[\"字段查找与方法查找类似，但有重要区别：私有字段不会被继承，因此getDeclaredField只能找到当前类声明的字段。\",\"import java.lang.reflect.Field; /** * 演示反射字段查找机制 */ public class FieldLookupDemo { public static void main(String[] args) throws Exception { Class<?> clazz = User.class; // 获取公有字段 Field publicField = clazz.getField(\\\"publicField\\\"); System.out.println(\\\"公有字段: \\\" + publicField); // 获取私有字段 Field privateField = clazz.getDeclaredField(\\\"name\\\"); System.out.println(\\\"私有字段: \\\" + privateField); // 尝试获取父类私有字段（会抛出异常） try { Field parentField = clazz.getDeclaredField(\\\"parentField\\\"); System.out.println(\\\"父类私有字段: \\\" + parentField); } catch (NoSuchFieldException e) { System.out.println(\\\"无法获取父类私有字段: \\\" + e.getMessage()); } } } class Parent { private String parentField; } class User extends Parent { private String name; private int age; public String publicField; }\"]},\"2985\":{\"h\":\"3. 反射调用的底层实现\",\"t\":[\"反射调用方法的底层实现与直接方法调用有显著差异，涉及更多的运行时检查和动态分派。\"]},\"2986\":{\"h\":\"3.1 反射调用与直接调用的区别\",\"t\":[\"import java.lang.reflect.Method; /** * 比较反射调用与直接调用的区别 */ public class ReflectionPerformanceDemo { private static final int ITERATIONS = 10_000_000; private final User user = new User(); public static void main(String[] args) throws Exception { ReflectionPerformanceDemo demo = new ReflectionPerformanceDemo(); // 直接调用 long directTime = demo.testDirectCall(); System.out.println(\\\"直接调用耗时: \\\" + directTime + \\\"ms\\\"); // 反射调用（未优化） long reflectionTime = demo.testReflectionCall(false); System.out.println(\\\"反射调用(未优化)耗时: \\\" + reflectionTime + \\\"ms\\\"); // 反射调用（优化后） long optimizedReflectionTime = demo.testReflectionCall(true); System.out.println(\\\"反射调用(优化后)耗时: \\\" + optimizedReflectionTime + \\\"ms\\\"); } // 直接调用测试 public long testDirectCall() { long start = System.currentTimeMillis(); for (int i = 0; i < ITERATIONS; i++) { user.setName(\\\"test\\\" + i); } return System.currentTimeMillis() - start; } // 反射调用测试 public long testReflectionCall(boolean optimize) throws Exception { Method method = User.class.getMethod(\\\"setName\\\", String.class); if (optimize) { method.setAccessible(true); // 关闭访问检查 } long start = System.currentTimeMillis(); for (int i = 0; i < ITERATIONS; i++) { method.invoke(user, \\\"test\\\" + i); } return System.currentTimeMillis() - start; } } class User { private String name; public void setName(String name) { this.name = name; } }\",\"典型输出（不同环境可能有差异）：\",\"直接调用耗时: 5ms 反射调用(未优化)耗时: 850ms 反射调用(优化后)耗时: 320ms\",\"性能差异原因：\",\"直接调用在编译期确定方法，执行效率高\",\"反射调用需要： \",\"运行时验证方法参数类型\",\"检查访问权限\",\"动态分派方法\",\"可能的安全管理器检查\"]},\"2987\":{\"h\":\"3.2 反射调用的字节码实现\",\"t\":[\"反射调用最终通过Method.invoke()方法实现，其底层依赖于JVM的invokevirtual或invokeinterface指令。JDK源码中，Method.invoke()的实现如下（简化版）：\",\"public Object invoke(Object obj, Object... args) throws ... { // 检查访问权限 if (!override) { if (!Reflection.quickCheckMemberAccess(clazz, modifiers)) { Class<?> caller = Reflection.getCallerClass(); checkAccess(caller, clazz, obj, modifiers); } } // 方法调用的实际实现 MethodAccessor ma = methodAccessor; if (ma == null) { ma = acquireMethodAccessor(); } // 调用MethodAccessor实现 return ma.invoke(obj, args); }\",\"MethodAccessor有两个实现：\",\"NativeMethodAccessorImpl：本地实现，初始调用使用\",\"DelegatingMethodAccessorImpl：动态生成字节码实现，调用次数超过阈值（默认15次）后切换，提供更好性能\"]},\"2988\":{\"h\":\"4. 反射中的访问控制\",\"t\":[\"Java反射机制提供了访问私有成员的能力，但这需要绕过JVM的访问控制检查。\"]},\"2989\":{\"h\":\"4.1 AccessibleObject与访问控制\",\"t\":[\"AccessibleObject是Field、Method和Constructor的父类，提供了setAccessible(boolean)方法来启用/禁用访问检查。\",\"import java.lang.reflect.Field; import java.lang.reflect.Method; /** * 演示反射访问控制机制 */ public class AccessControlDemo { public static void main(String[] args) throws Exception { User user = new User(\\\"张三\\\", 20); Class<?> clazz = User.class; // 访问私有字段 Field nameField = clazz.getDeclaredField(\\\"name\\\"); // nameField.setAccessible(true); // 不设置会抛出IllegalAccessException try { System.out.println(\\\"私有字段值: \\\" + nameField.get(user)); } catch (IllegalAccessException e) { System.out.println(\\\"访问私有字段失败: \\\" + e.getMessage()); nameField.setAccessible(true); System.out.println(\\\"设置setAccessible(true)后的值: \\\" + nameField.get(user)); } // 访问私有方法 Method privateMethod = clazz.getDeclaredMethod(\\\"privateMethod\\\"); privateMethod.setAccessible(true); privateMethod.invoke(user); } } class User { private String name; private int age; public User(String name, int age) { this.name = name; this.age = age; } private void privateMethod() { System.out.println(\\\"调用私有方法成功\\\"); } }\"]},\"2990\":{\"h\":\"4.2 安全管理器对反射的限制\",\"t\":[\"当Java安全管理器（SecurityManager）启用时，反射访问私有成员可能会被阻止，即使调用了setAccessible(true)。\",\"/** * 安全管理器对反射的限制示例 */ public class SecurityManagerDemo { public static void main(String[] args) { // 设置安全管理器 System.setSecurityManager(new SecurityManager() { @Override public void checkPermission(Permission perm) { // 拒绝反射访问权限 if (perm instanceof ReflectPermission) { throw new SecurityException(\\\"反射访问被拒绝\\\"); } } }); try { User user = new User(); Field field = User.class.getDeclaredField(\\\"name\\\"); field.setAccessible(true); // 会抛出SecurityException field.set(user, \\\"测试\\\"); } catch (Exception e) { System.out.println(\\\"反射操作失败: \\\" + e.getMessage()); } } } class User { private String name; }\"]},\"2991\":{\"h\":\"知识扩展\"},\"2992\":{\"h\":\"设计思想\",\"t\":[\"反射机制的设计体现了以下重要思想：\",\"动态性与静态性平衡：Java是静态类型语言，但反射提供了动态操作能力，平衡了静态类型检查的安全性和动态编程的灵活性\",\"元数据驱动设计：反射允许程序通过元数据（类信息、注解等）驱动行为，实现配置与代码分离，这是Spring、Hibernate等框架的核心设计思想\",\"开闭原则：通过反射，框架可以在不修改自身代码的情况下支持新的用户类，如Spring可以管理任何标注了@Component的类\",\"代理模式的基础：动态代理（如JDK动态代理）完全基于反射实现，允许在运行时创建代理类，为方法调用提供横切关注点（AOP）支持\"]},\"2993\":{\"h\":\"避坑指南\",\"t\":[\"使用反射时需要特别注意以下问题：\",\"性能优化策略\",\"缓存反射对象：Class、Method、Field等对象创建成本高，应缓存重用\",\"// 缓存反射对象的示例 public class ReflectionCacheDemo { // 缓存Method对象 private static final Method SET_NAME_METHOD; static { try { SET_NAME_METHOD = User.class.getMethod(\\\"setName\\\", String.class); SET_NAME_METHOD.setAccessible(true); // 提前设置访问权限 } catch (NoSuchMethodException e) { throw new RuntimeException(e); } } public void updateName(User user, String name) throws Exception { SET_NAME_METHOD.invoke(user, name); // 直接使用缓存的Method } }\",\"使用MethodHandle：JDK7引入的MethodHandle比反射性能更好\",\"批量操作：减少反射调用次数，尽量批量处理\",\"避免在循环中使用反射：循环内反射调用性能开销大\",\"安全风险防范\",\"最小权限原则：仅对必要的反射操作设置setAccessible(true)\",\"输入验证：反射操作的类名、方法名等参数应严格验证，防止恶意输入\",\"安全管理器：生产环境可通过安全管理器限制反射权限\",\"审计日志：记录反射调用，特别是私有成员访问\",\"兼容性处理\",\"处理类结构变化：反射依赖类结构，当类发生变化时可能抛出异常\",\"// 安全的反射调用示例 public void safeInvoke(User user, String methodName) { try { Method method = User.class.getMethod(methodName); method.invoke(user); } catch (NoSuchMethodException e) { log.error(\\\"方法不存在: {}\\\", methodName, e); // 提供降级策略 fallbackMethod(user); } catch (Exception e) { log.error(\\\"反射调用失败\\\", e); } }\",\"版本适配：不同JDK版本反射行为可能不同，需测试验证\",\"避免依赖私有API：私有API可能在未来版本中移除\"]},\"2994\":{\"h\":\"深度思考题\",\"t\":[\"思考题1：JDK动态代理为什么只能代理接口而不能代理类？这与反射机制有什么关系？\",\"思考题1回答：JDK动态代理基于接口实现，主要原因有两点：一是Java不支持多继承，如果动态生成的代理类已经继承了Proxy类，就无法再继承其他类；二是接口通常定义了契约，代理模式的目的是增强接口实现的功能。反射在动态代理中扮演关键角色：Proxy.newProxyInstance()通过反射创建代理类实例，InvocationHandler.invoke()通过反射调用目标方法。CGLIB可以代理类是因为它使用字节码生成技术创建目标类的子类，而非反射直接实现。\",\"思考题2：为什么反射调用在JDK9及以上版本中对模块化类的访问会受到限制？如何解决？\",\"思考题2回答：JDK9引入的模块系统（JPMS）加强了封装性，默认情况下模块不会导出其内部包，即使使用反射也无法访问未导出包中的类。解决方法有：1. 在module-info.java中使用exports语句导出包；2. 使用opens语句允许反射访问未导出包；3. 添加--add-opens命令行参数（如--add-opens java.base/java.lang=ALL-UNNAMED）临时开放访问。这种限制体现了Java对安全性和封装性的重视，即使反射也不能随意打破模块边界。\"]},\"2995\":{\"h\":\"进阶-反射在实践中的应用\"},\"2996\":{\"h\":\"概述\",\"t\":[\"反射机制作为Java语言的重要特性，在实际开发中有着广泛的应用场景。它为框架设计、动态编程和元编程提供了强大的支持，是许多主流Java框架（如Spring、Hibernate、MyBatis）实现的核心技术之一。本章将从实践角度出发，深入探讨反射机制在框架开发、注解处理、动态代理、序列化与反序列化等场景中的具体应用，分析其实现原理，并提供可直接应用于项目的代码示例和最佳实践。\"]},\"2997\":{\"h\":\"知识要点\"},\"2998\":{\"h\":\"1. 反射在框架设计中的应用\"},\"2999\":{\"h\":\"1.1 Spring IoC容器的反射应用\",\"t\":[\"Spring IoC容器的核心功能是对象的创建和依赖注入，这一过程大量使用了反射机制。\",\"/** * Spring IoC容器反射应用简化实现 */ public class SimpleIocContainer { // 存储Bean定义 private Map<String, BeanDefinition> beanDefinitions = new HashMap<>(); // 存储实例化的Bean private Map<String, Object> singletonBeans = new HashMap<>(); /** * 注册Bean定义 */ public void registerBeanDefinition(String beanName, BeanDefinition beanDefinition) { beanDefinitions.put(beanName, beanDefinition); } /** * 获取Bean实例 */ public Object getBean(String beanName) throws Exception { // 如果单例Bean已存在，直接返回 if (singletonBeans.containsKey(beanName)) { return singletonBeans.get(beanName); } // 获取Bean定义 BeanDefinition beanDefinition = beanDefinitions.get(beanName); if (beanDefinition == null) { throw new RuntimeException(\\\"Bean definition not found for: \\\" + beanName); } // 反射创建Bean实例 Class<?> beanClass = Class.forName(beanDefinition.getClassName()); Object bean = createBean(beanClass); // 依赖注入 populateBean(bean, beanClass); // 存储单例Bean if (beanDefinition.isSingleton()) { singletonBeans.put(beanName, bean); } return bean; } // 反射创建Bean实例 private Object createBean(Class<?> beanClass) throws Exception { // 获取默认构造函数 Constructor<?> constructor = beanClass.getDeclaredConstructor(); // 设置可访问私有构造函数 constructor.setAccessible(true); // 实例化对象 return constructor.newInstance(); } // 反射实现依赖注入 private void populateBean(Object bean, Class<?> beanClass) throws Exception { // 获取所有字段 Field[] fields = beanClass.getDeclaredFields(); for (Field field : fields) { // 检查是否有@Autowired注解 if (field.isAnnotationPresent(Autowired.class)) { // 获取字段类型 Class<?> fieldType = field.getType(); // 递归获取依赖的Bean Object dependency = getBean(fieldType.getSimpleName().substring(0, 1).toLowerCase() + fieldType.getSimpleName().substring(1)); // 设置字段可访问 field.setAccessible(true); // 设置字段值 field.set(bean, dependency); } } } // Bean定义类 public static class BeanDefinition { private String className; private boolean singleton = true; // 省略构造函数和getter/setter } } // 自定义@Autowired注解 @interface Autowired {} // 示例Service类 class UserService { @Autowired private UserDao userDao; public void saveUser() { userDao.save(); } } class UserDao { public void save() { System.out.println(\\\"Saving user...\\\"); } } // 使用示例 class SpringIocDemo { public static void main(String[] args) throws Exception { SimpleIocContainer container = new SimpleIocContainer(); // 注册Bean定义 container.registerBeanDefinition(\\\"userService\\\", new SimpleIocContainer.BeanDefinition(\\\"com.example.UserService\\\")); container.registerBeanDefinition(\\\"userDao\\\", new SimpleIocContainer.BeanDefinition(\\\"com.example.UserDao\\\")); // 获取Bean并使用 UserService userService = (UserService) container.getBean(\\\"userService\\\"); userService.saveUser(); // 输出: Saving user... } }\",\"Spring IoC容器使用反射的主要步骤：\",\"根据类名反射加载Class对象\",\"通过构造函数反射创建实例\",\"检查字段和方法上的注解\",\"反射设置字段值或调用方法完成依赖注入\",\"将创建好的实例存入容器\"]},\"3000\":{\"h\":\"1.2 MyBatis中的反射应用\",\"t\":[\"MyBatis使用反射实现数据库结果集到Java对象的映射：\",\"/** * MyBatis结果集映射简化实现 */ public class ResultSetMapper { /** * 将ResultSet映射为Java对象列表 */ public <T> List<T> mapResultSet(ResultSet rs, Class<T> clazz) throws Exception { List<T> results = new ArrayList<>(); ResultSetMetaData metaData = rs.getMetaData(); int columnCount = metaData.getColumnCount(); while (rs.next()) { // 创建对象实例 T instance = clazz.getDeclaredConstructor().newInstance(); // 遍历所有列 for (int i = 1; i <= columnCount; i++) { String columnName = metaData.getColumnName(i); Object columnValue = rs.getObject(i); // 下划线转驼峰 String fieldName = underlineToCamel(columnName); try { // 获取字段并设置值 Field field = clazz.getDeclaredField(fieldName); field.setAccessible(true); field.set(instance, columnValue); } catch (NoSuchFieldException e) { // 忽略不存在的字段 System.out.println(\\\"Field not found: \\\" + fieldName); } } results.add(instance); } return results; } // 下划线转驼峰命名 private String underlineToCamel(String name) { StringBuilder result = new StringBuilder(); boolean nextUpperCase = false; for (char c : name.toCharArray()) { if (c == '_') { nextUpperCase = true; } else { if (nextUpperCase) { result.append(Character.toUpperCase(c)); nextUpperCase = false; } else { result.append(Character.toLowerCase(c)); } } } return result.toString(); } } // 使用示例 class MyBatisReflectionDemo { public static void main(String[] args) throws Exception { // 模拟ResultSet ResultSet rs = mockResultSet(); // 映射结果集 ResultSetMapper mapper = new ResultSetMapper(); List<User> users = mapper.mapResultSet(rs, User.class); // 输出结果 for (User user : users) { System.out.println(user.getId() + \\\": \\\" + user.getUserName()); } } // 模拟数据库结果集 private static ResultSet mockResultSet() throws Exception { // 此处使用Mock框架模拟ResultSet，实际项目中由JDBC提供 // 省略模拟实现 return null; } } class User { private Long id; private String userName; private Integer age; // 省略构造函数和getter/setter }\"]},\"3001\":{\"h\":\"2. 反射与注解处理\",\"t\":[\"反射与注解结合使用可以实现强大的元数据驱动编程，这是许多框架和库的核心功能。\"]},\"3002\":{\"h\":\"2.1 自定义注解处理器\",\"t\":[\"import java.lang.annotation.*; import java.lang.reflect.Method; /** * 自定义注解与反射处理器示例 */ // 自定义日志注解 @Target(ElementType.METHOD) @Retention(RetentionPolicy.RUNTIME) @interface Logging { String value() default \\\"Executing method\\\"; boolean logParameters() default true; boolean logResult() default true; } // 服务类 class OrderService { @Logging(\\\"Creating new order\\\", logParameters = true, logResult = true) public Order createOrder(Long userId, String productId, int quantity) { System.out.println(\\\"Creating order for user: \\\" + userId); return new Order(System.currentTimeMillis(), userId, productId, quantity); } @Logging(\\\"Canceling order\\\", logParameters = true) public void cancelOrder(Long orderId) { System.out.println(\\\"Canceling order: \\\" + orderId); } } // 订单类 class Order { private Long id; private Long userId; private String productId; private int quantity; // 构造函数和toString public Order(Long id, Long userId, String productId, int quantity) { this.id = id; this.userId = userId; this.productId = productId; this.quantity = quantity; } @Override public String toString() { return \\\"Order{id=\\\" + id + \\\", userId=\\\" + userId + \\\", productId='\\\" + productId + \\\"', quantity=\\\" + quantity + \\\"}\\\"; } } // 注解处理器 class LoggingAnnotationProcessor { public static Object process(Object target, Method method, Object[] args) throws Exception { // 检查方法是否有@Logging注解 if (method.isAnnotationPresent(Logging.class)) { Logging logging = method.getAnnotation(Logging.class); // 记录方法执行开始 System.out.println(\\\"[LOG] \\\" + logging.value() + \\\": \\\" + method.getName()); // 记录参数 if (logging.logParameters() && args != null) { System.out.println(\\\"[LOG] Parameters: \\\"); for (int i = 0; i < args.length; i++) { String paramName = getParameterName(method, i); System.out.println(\\\"[LOG] \\\" + paramName + \\\": \\\" + args[i]); } } // 执行原方法 long startTime = System.currentTimeMillis(); Object result = method.invoke(target, args); long endTime = System.currentTimeMillis(); // 记录返回结果 if (logging.logResult()) { System.out.println(\\\"[LOG] Result: \\\" + result); } // 记录执行时间 System.out.println(\\\"[LOG] Execution time: \\\" + (endTime - startTime) + \\\"ms\\\"); return result; } // 如果没有注解，直接执行方法 return method.invoke(target, args); } // 获取参数名称（简化实现） private static String getParameterName(Method method, int index) { // 在实际应用中，可以使用Parameter.getName() (Java 8+)或ASM库获取参数名 return \\\"param\\\" + (index + 1); } } // 动态代理实现日志切面 class LoggingProxy implements InvocationHandler { private Object target; private LoggingProxy(Object target) { this.target = target; } public static <T> T createProxy(T target) { return (T) Proxy.newProxyInstance( target.getClass().getClassLoader(), target.getClass().getInterfaces(), new LoggingProxy(target) ); } @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { return LoggingAnnotationProcessor.process(target, method, args); } } // 使用示例 class AnnotationReflectionDemo { public static void main(String[] args) throws Exception { // 创建目标对象 OrderService orderService = new OrderService(); // 创建代理对象 OrderService proxy = LoggingProxy.createProxy(orderService); // 调用带注解的方法 proxy.createOrder(123L, \\\"PROD-456\\\", 2); proxy.cancelOrder(789L); } }\",\"执行上述代码会输出：\",\"[LOG] Creating new order: createOrder [LOG] Parameters: [LOG] param1: 123 [LOG] param2: PROD-456 [LOG] param3: 2 Creating order for user: 123 [LOG] Result: Order{id=1622500000000, userId=123, productId='PROD-456', quantity=2} [LOG] Execution time: 1ms [LOG] Canceling order: cancelOrder [LOG] Parameters: [LOG] param1: 789 Canceling order: 789 [LOG] Execution time: 0ms\"]},\"3003\":{\"h\":\"2.2 基于反射的注解验证框架\",\"t\":[\"import java.lang.annotation.*; import java.lang.reflect.Field; /** * 基于反射的注解验证框架 */ // 非空注解 @Target(ElementType.FIELD) @Retention(RetentionPolicy.RUNTIME) @interface NotNull { String message() default \\\"Field cannot be null\\\"; } // 长度验证注解 @Target(ElementType.FIELD) @Retention(RetentionPolicy.RUNTIME) @interface Length { int min() default 0; int max() default Integer.MAX_VALUE; String message() default \\\"Field length is invalid\\\"; } // 范围验证注解 @Target(ElementType.FIELD) @Retention(RetentionPolicy.RUNTIME) @interface Range { long min() default Long.MIN_VALUE; long max() default Long.MAX_VALUE; String message() default \\\"Value out of range\\\"; } // 用户类 class User { @NotNull(message = \\\"ID cannot be null\\\") private Long id; @NotNull(message = \\\"Username cannot be null\\\") @Length(min = 3, max = 20, message = \\\"Username must be 3-20 characters\\\") private String username; @Range(min = 18, max = 120, message = \\\"Age must be between 18 and 120\\\") private Integer age; // 构造函数和getter/setter public User(Long id, String username, Integer age) { this.id = id; this.username = username; this.age = age; } } // 验证器 class Validator { public static <T> void validate(T object) throws ValidationException { Class<?> clazz = object.getClass(); Field[] fields = clazz.getDeclaredFields(); for (Field field : fields) { field.setAccessible(true); Object value; try { value = field.get(object); } catch (IllegalAccessException e) { throw new ValidationException(\\\"Cannot access field: \\\" + field.getName()); } // 验证@NotNull if (field.isAnnotationPresent(NotNull.class) && value == null) { NotNull annotation = field.getAnnotation(NotNull.class); throw new ValidationException(annotation.message() + \\\" (field: \\\" + field.getName() + \\\")\\\"); } // 验证@Length if (field.isAnnotationPresent(Length.class) && value instanceof String) { Length annotation = field.getAnnotation(Length.class); String strValue = (String) value; if (strValue.length() < annotation.min() || strValue.length() > annotation.max()) { throw new ValidationException(annotation.message() + \\\" (field: \\\" + field.getName() + \\\", length: \\\" + strValue.length() + \\\")\\\"); } } // 验证@Range if (field.isAnnotationPresent(Range.class) && value instanceof Number) { Range annotation = field.getAnnotation(Range.class); long numValue = ((Number) value).longValue(); if (numValue < annotation.min() || numValue > annotation.max()) { throw new ValidationException(annotation.message() + \\\" (field: \\\" + field.getName() + \\\", value: \\\" + numValue + \\\")\\\"); } } } } } // 自定义验证异常 class ValidationException extends Exception { public ValidationException(String message) { super(message); } } // 使用示例 class AnnotationValidationDemo { public static void main(String[] args) { // 验证通过的对象 User validUser = new User(1L, \\\"john_doe\\\", 25); try { Validator.validate(validUser); System.out.println(\\\"Validation passed for validUser\\\"); } catch (ValidationException e) { System.out.println(\\\"Validation failed: \\\" + e.getMessage()); } // 验证失败的对象 User invalidUser = new User(null, \\\"jd\\\", 15); try { Validator.validate(invalidUser); System.out.println(\\\"Validation passed for invalidUser\\\"); } catch (ValidationException e) { System.out.println(\\\"Validation failed: \\\" + e.getMessage()); } } }\"]},\"3004\":{\"h\":\"3. 反射与动态代理\",\"t\":[\"动态代理是反射机制的重要应用之一，广泛用于AOP编程、远程方法调用等场景。\"]},\"3005\":{\"h\":\"3.1 JDK动态代理实现事务管理\",\"t\":[\"import java.lang.reflect.InvocationHandler; import java.lang.reflect.Method; import java.lang.reflect.Proxy; import java.sql.Connection; import java.sql.DriverManager; /** * 使用反射和动态代理实现事务管理 */ // 事务注解 @Target(ElementType.METHOD) @Retention(RetentionPolicy.RUNTIME) @interface Transactional { boolean readOnly() default false; } // 数据访问接口 interface UserDao { @Transactional void createUser(String name, int age); @Transactional(readOnly = true) String getUserById(long id); } // 数据访问实现 class UserDaoImpl implements UserDao { private Connection connection; public UserDaoImpl(Connection connection) { this.connection = connection; } @Override public void createUser(String name, int age) { try { // 执行SQL（简化实现） System.out.println(\\\"Executing SQL: INSERT INTO users (name, age) VALUES ('\\\" + name + \\\"', \\\" + age + \\\")\\\"); // 模拟可能的异常 if (age < 0) { throw new RuntimeException(\\\"Age cannot be negative\\\"); } } catch (Exception e) { throw new RuntimeException(\\\"Failed to create user\\\", e); } } @Override public String getUserById(long id) { try { // 执行SQL（简化实现） System.out.println(\\\"Executing SQL: SELECT * FROM users WHERE id = \\\" + id); return \\\"User{id=\\\" + id + \\\", name='John Doe', age=30}\\\"; } catch (Exception e) { throw new RuntimeException(\\\"Failed to get user\\\", e); } } } // 事务代理 class TransactionProxy implements InvocationHandler { private Object target; private Connection connection; private TransactionProxy(Object target, Connection connection) { this.target = target; this.connection = connection; } public static <T> T createProxy(T target, Connection connection) { return (T) Proxy.newProxyInstance( target.getClass().getClassLoader(), target.getClass().getInterfaces(), new TransactionProxy(target, connection) ); } @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { // 检查方法是否有@Transactional注解 if (method.isAnnotationPresent(Transactional.class)) { Transactional transactional = method.getAnnotation(Transactional.class); boolean readOnly = transactional.readOnly(); try { // 设置事务属性 connection.setAutoCommit(false); connection.setReadOnly(readOnly); System.out.println(\\\"Starting transaction (readOnly: \\\" + readOnly + \\\")\\\"); // 执行目标方法 Object result = method.invoke(target, args); // 提交事务 if (!readOnly) { connection.commit(); System.out.println(\\\"Transaction committed\\\"); } return result; } catch (Exception e) { // 回滚事务 if (!readOnly) { connection.rollback(); System.out.println(\\\"Transaction rolled back due to exception: \\\" + e.getMessage()); } throw e; } finally { // 恢复自动提交 connection.setAutoCommit(true); connection.setReadOnly(false); } } // 如果没有事务注解，直接执行方法 return method.invoke(target, args); } } // 使用示例 class TransactionProxyDemo { public static void main(String[] args) throws Exception { // 获取数据库连接（简化实现） Connection connection = DriverManager.getConnection(\\\"jdbc:h2:mem:test\\\"); // 创建目标对象 UserDao userDao = new UserDaoImpl(connection); // 创建事务代理 UserDao transactionalUserDao = TransactionProxy.createProxy(userDao, connection); try { // 执行有事务的写操作 transactionalUserDao.createUser(\\\"John Doe\\\", 30); // 执行有事务的读操作 String user = transactionalUserDao.getUserById(1); System.out.println(\\\"User: \\\" + user); // 执行会导致异常的操作 transactionalUserDao.createUser(\\\"Invalid User\\\", -5); } catch (Exception e) { System.out.println(\\\"Operation failed: \\\" + e.getMessage()); } } }\"]},\"3006\":{\"h\":\"4. 反射在序列化与反序列化中的应用\",\"t\":[\"反射机制常用于实现通用的序列化和反序列化功能，如JSON框架、对象深拷贝等。\"]},\"3007\":{\"h\":\"4.1 通用对象深拷贝工具\",\"t\":[\"import java.lang.reflect.Constructor; import java.lang.reflect.Field; import java.lang.reflect.Modifier; import java.util.*; /** * 基于反射的通用深拷贝工具 */ public class DeepCopyUtils { // 缓存已拷贝的对象，处理循环引用 private static final ThreadLocal<Map<Object, Object>> COPIED_OBJECTS = ThreadLocal.withInitial(HashMap::new); /** * 深拷贝对象 */ @SuppressWarnings(\\\"unchecked\\\") public static <T> T deepCopy(T obj) throws Exception { if (obj == null) { return null; } // 处理基本类型和包装类 if (obj instanceof Boolean || obj instanceof Byte || obj instanceof Character || obj instanceof Short || obj instanceof Integer || obj instanceof Long || obj instanceof Float || obj instanceof Double || obj instanceof String) { return obj; } // 处理枚举 if (obj.getClass().isEnum()) { return obj; } // 处理已经拷贝过的对象（循环引用） Map<Object, Object> copied = COPIED_OBJECTS.get(); if (copied.containsKey(obj)) { return (T) copied.get(obj); } Class<?> clazz = obj.getClass(); Object copy; // 处理数组 if (clazz.isArray()) { int length = Array.getLength(obj); copy = Array.newInstance(clazz.getComponentType(), length); copied.put(obj, copy); for (int i = 0; i < length; i++) { Array.set(copy, i, deepCopy(Array.get(obj, i))); } return (T) copy; } // 处理集合 if (obj instanceof Collection) { Collection<Object> originalCollection = (Collection<Object>) obj; Collection<Object> newCollection; // 根据具体类型创建新集合 if (obj instanceof List) { newCollection = new ArrayList<>(); } else if (obj instanceof Set) { if (obj instanceof SortedSet) { newCollection = new TreeSet<>(); } else { newCollection = new HashSet<>(); } } else if (obj instanceof Queue) { newCollection = new LinkedList<>(); } else { // 使用默认构造函数 newCollection = (Collection<Object>) clazz.getDeclaredConstructor().newInstance(); } copied.put(obj, newCollection); for (Object item : originalCollection) { newCollection.add(deepCopy(item)); } return (T) newCollection; } // 处理Map if (obj instanceof Map) { Map<Object, Object> originalMap = (Map<Object, Object>) obj; Map<Object, Object> newMap; // 根据具体类型创建新Map if (obj instanceof SortedMap) { newMap = new TreeMap<>(); } else if (obj instanceof HashMap) { newMap = new HashMap<>(); } else if (obj instanceof LinkedHashMap) { newMap = new LinkedHashMap<>(); } else { // 使用默认构造函数 newMap = (Map<Object, Object>) clazz.getDeclaredConstructor().newInstance(); } copied.put(obj, newMap); for (Map.Entry<Object, Object> entry : originalMap.entrySet()) { newMap.put(deepCopy(entry.getKey()), deepCopy(entry.getValue())); } return (T) newMap; } // 处理普通对象 try { // 获取无参构造函数 Constructor<?> constructor = clazz.getDeclaredConstructor(); constructor.setAccessible(true); copy = constructor.newInstance(); // 缓存已创建的拷贝对象 copied.put(obj, copy); // 拷贝字段值 Field[] fields = clazz.getDeclaredFields(); for (Field field : fields) { // 跳过静态字段 if (Modifier.isStatic(field.getModifiers())) { continue; } field.setAccessible(true); Object fieldValue = field.get(obj); Object copiedFieldValue = deepCopy(fieldValue); field.set(copy, copiedFieldValue); } return (T) copy; } finally { // 清除ThreadLocal，避免内存泄漏 copied.remove(obj); } } } // 使用示例 class DeepCopyDemo { static class Address { private String street; private String city; // 构造函数、getter/setter和toString public Address(String street, String city) { this.street = street; this.city = city; } @Override public String toString() { return \\\"Address{street='\\\" + street + \\\"', city='\\\" + city + \\\"'}\\\"; } } static class Person { private String name; private int age; private Address address; private List<String> hobbies; // 构造函数、getter/setter和toString public Person(String name, int age, Address address, List<String> hobbies) { this.name = name; this.age = age; this.address = address; this.hobbies = hobbies; } @Override public String toString() { return \\\"Person{name='\\\" + name + \\\"', age=\\\" + age + \\\", address=\\\" + address + \\\", hobbies=\\\" + hobbies + \\\"}\\\"; } } public static void main(String[] args) throws Exception { // 创建原始对象 Address address = new Address(\\\"Main St\\\", \\\"New York\\\"); List<String> hobbies = new ArrayList<>(); hobbies.add(\\\"Reading\\\"); hobbies.add(\\\"Sports\\\"); Person original = new Person(\\\"John Doe\\\", 30, address, hobbies); // 深拷贝对象 Person copy = DeepCopyUtils.deepCopy(original); // 修改原始对象的属性 original.getAddress().setCity(\\\"Boston\\\"); original.getHobbies().add(\\\"Cooking\\\"); // 打印结果，验证深拷贝是否成功 System.out.println(\\\"Original: \\\" + original); System.out.println(\\\"Copy: \\\" + copy); } }\",\"执行上述代码会输出：\",\"Original: Person{name='John Doe', age=30, address=Address{street='Main St', city='Boston'}, hobbies=[Reading, Sports, Cooking]} Copy: Person{name='John Doe', age=30, address=Address{street='Main St', city='New York'}, hobbies=[Reading, Sports]}\"]},\"3008\":{\"h\":\"知识扩展\"},\"3009\":{\"h\":\"设计思想\",\"t\":[\"反射机制的实践应用体现了以下重要设计思想：\",\"控制反转（IoC）：反射允许框架控制对象的创建和依赖注入，将对象创建的控制权从应用代码转移到框架，实现了好莱坞原则（\\\"不要调用我们，我们会调用你\\\"）\",\"面向切面编程（AOP）：通过反射和动态代理，可以在不修改原有代码的情况下，为方法添加横切关注点（如日志、事务、安全检查），实现功能的模块化\",\"元数据驱动开发：反射与注解结合，允许程序通过元数据描述如何处理数据，实现了配置与代码的分离，提高了系统的灵活性和可维护性\",\"开闭原则：反射使得框架可以在不修改自身代码的情况下支持新的用户类，只需遵循框架定义的接口或注解规范\",\"组合优于继承：反射提供了在运行时动态组合对象功能的能力，比静态继承更加灵活，减少了类层次结构的复杂性\"]},\"3010\":{\"h\":\"避坑指南\",\"t\":[\"在实践中使用反射时，需要特别注意以下问题：\",\"性能优化高级策略\",\"使用MethodHandle替代反射：JDK 7引入的MethodHandle提供了比反射更高的性能和更灵活的调用方式\",\"import java.lang.invoke.MethodHandle; import java.lang.invoke.MethodHandles; import java.lang.invoke.MethodType; public class MethodHandleDemo { public static void main(String[] args) throws Throwable { // 获取MethodHandles.Lookup MethodHandles.Lookup lookup = MethodHandles.lookup(); // 查找方法 MethodType methodType = MethodType.methodType(void.class, String.class); MethodHandle setNameHandle = lookup.findVirtual(User.class, \\\"setName\\\", methodType); // 创建对象 User user = new User(); // 调用方法 setNameHandle.invoke(user, \\\"John Doe\\\"); System.out.println(user.getName()); // 输出: John Doe } } class User { private String name; public void setName(String name) { this.name = name; } public String getName() { return name; } }\",\"反射操作预热：对于频繁使用的反射操作，可以在应用启动时进行预热，触发JVM的优化\",\"使用字节码生成技术：对于性能要求极高的场景，可以考虑使用ASM、Javassist等字节码生成框架，直接生成字节码替代反射\",\"反射缓存优化：使用ConcurrentHashMap等线程安全的缓存机制，避免反射对象的重复创建\",\"安全最佳实践\",\"避免过度使用setAccessible(true)：只在必要时才开放私有成员的访问权限，并在使用后恢复\",\"使用SecurityManager限制反射权限：在生产环境中配置适当的安全策略，限制反射对敏感类和成员的访问\",\"输入验证和过滤：对于通过反射加载的类名、方法名等外部输入，必须进行严格验证，防止类加载漏洞\",\"反射操作审计：记录反射调用，特别是对私有成员的访问，便于安全审计和问题排查\",\"兼容性处理策略\",\"模块化系统适配：在JDK 9+中，处理反射对模块化类的访问限制\",\"// module-info.java中允许反射访问 module com.example { // 导出包供正常使用 exports com.example.publicapi; // 开放包供反射访问 opens com.example.internal to com.example.reflector; }\",\"处理不同JDK版本差异：反射行为在不同JDK版本中可能存在差异，需进行充分测试\",\"避免依赖不稳定的API：不依赖未公开的内部API和私有方法，这些可能在未来版本中移除\",\"优雅降级：当反射操作失败时，提供合理的降级策略，避免整个应用崩溃\"]},\"3011\":{\"h\":\"深度思考题\",\"t\":[\"思考题1：为什么许多主流框架（如Spring、MyBatis）在使用反射的同时，还会结合缓存机制？如何设计一个高效的反射缓存策略？\",\"思考题1回答：框架使用反射缓存主要是为了解决反射性能问题。反射操作（如获取Class对象、Method对象、Field对象等）的创建成本较高，且每次反射调用都需要进行访问权限检查和参数验证，这些都会影响性能。通过缓存反射对象，可以显著减少重复创建和验证的开销。\",\"高效的反射缓存策略设计要点：\",\"缓存粒度：可以缓存Class对象、Method对象、Constructor对象、Field对象，甚至可以缓存MethodAccessor等底层调用器\",\"缓存键设计：对于方法缓存，可以使用类名+方法名+参数类型组合作为键；对于字段缓存，可以使用类名+字段名作为键\",\"缓存实现：使用ConcurrentHashMap等线程安全的容器，结合弱引用（WeakReference）避免内存泄漏\",\"缓存预热：在应用启动时预加载常用的反射对象\",\"缓存失效：当类被重新加载时，及时清理对应的缓存项\",\"思考题2：在Java安全编程中，如何防止反射机制被恶意利用来绕过访问控制？有哪些防御措施？\",\"思考题2回答：防止反射被恶意利用的防御措施包括：\",\"使用SecurityManager：配置安全策略文件，限制反射权限，特别是禁止setAccessible(true)操作\",\"模块化封装：在JDK 9+中使用模块系统，不导出或开放内部包，限制对内部API的反射访问\",\"敏感操作检查：在关键方法中添加调用者检查，验证是否是受信任的类进行反射调用\",\"字节码增强：使用AspectJ等工具在编译期或类加载期对敏感方法添加保护逻辑\",\"输入验证：对反射操作中使用的类名、方法名等外部输入进行严格验证\",\"审计日志：记录所有反射调用，特别是对私有成员的访问，便于安全审计\",\"最小权限原则：应用程序只授予完成其功能所必需的最小权限，减少反射被滥用的风险\"]},\"3012\":{\"h\":\"基础-泛型基础\"},\"3013\":{\"h\":\"概述\",\"t\":[\"泛型是Java SE 5引入的核心特性，它允许在定义类、接口和方法时使用类型参数，从而实现代码的参数化类型，提高代码复用性和类型安全性。本章节将从泛型的基本概念入手，系统讲解泛型类、泛型接口、泛型方法的定义与使用，以及泛型带来的优势与基本限制。\"]},\"3014\":{\"h\":\"知识要点\"},\"3015\":{\"h\":\"1. 泛型的基本概念\"},\"3016\":{\"h\":\"1.1 什么是泛型？\",\"t\":[\"泛型（Generics）是一种允许在定义类、接口和方法时使用类型参数（type parameter）的机制。这些类型参数在使用时被具体的类型所替代，从而实现代码的参数化类型，达到代码复用和类型安全的目的。\",\"泛型的核心思想：将类型确定的工作推迟到创建对象或调用方法时才去明确指定的特殊类型。\"]},\"3017\":{\"h\":\"1.2 为什么需要泛型？\",\"t\":[\"在没有泛型之前，Java集合只能存储Object类型的对象，这会导致以下问题：\",\"类型不安全：可以向集合中添加任意类型的对象\",\"强制类型转换：从集合中取出元素时需要手动强制转换，容易引发ClassCastException\",\"泛型的出现解决了这些问题，通过在编译时进行类型检查，确保集合中只存储指定类型的对象，避免了运行时异常。\",\"// 没有泛型的情况 List list = new ArrayList(); list.add(\\\"hello\\\"); list.add(123); // 可以添加任意类型 String str = (String) list.get(1); // 运行时抛出ClassCastException // 使用泛型的情况 List<String> strList = new ArrayList<>(); strList.add(\\\"hello\\\"); strList.add(123); // 编译时错误，不允许添加非String类型 String str2 = strList.get(0); // 无需强制类型转换\"]},\"3018\":{\"h\":\"2. 泛型类与泛型接口\"},\"3019\":{\"h\":\"2.1 泛型类的定义与使用\",\"t\":[\"泛型类是指在类定义时使用类型参数的类。类型参数通常使用大写字母表示，如T（Type）、E（Element）、K（Key）、V（Value）等。\",\"定义格式：\",\"class 类名<T> { // 成员变量可以使用类型参数 private T data; // 构造方法可以使用类型参数 public 类名(T data) { this.data = data; } // 成员方法可以使用类型参数 public T getData() { return data; } }\",\"使用示例：\",\"// 创建泛型类实例时指定具体类型 GenericClass<String> strObj = new GenericClass<>(\\\"Hello\\\"); String strData = strObj.getData(); GenericClass<Integer> intObj = new GenericClass<>(123); int intData = intObj.getData();\"]},\"3020\":{\"h\":\"2.2 多类型参数的泛型类\",\"t\":[\"泛型类可以定义多个类型参数，用逗号分隔：\",\"class Pair<K, V> { private K key; private V value; public Pair(K key, V value) { this.key = key; this.value = value; } // 省略getter和setter方法 } // 使用示例 Pair<String, Integer> pair = new Pair<>(\\\"age\\\", 25); String key = pair.getKey(); Integer value = pair.getValue();\"]},\"3021\":{\"h\":\"2.3 泛型接口的定义与实现\",\"t\":[\"泛型接口的定义方式与泛型类类似：\",\"interface Generator<T> { T generate(); }\",\"实现泛型接口时有两种方式：\",\"指定具体类型\",\"class StringGenerator implements Generator<String> { @Override public String generate() { return \\\"Generated string\\\"; } }\",\"继续保留类型参数（泛型类实现泛型接口）\",\"class NumberGenerator<T extends Number> implements Generator<T> { private T seed; public NumberGenerator(T seed) { this.seed = seed; } @Override public T generate() { // 生成基于seed的数字 return seed; } }\"]},\"3022\":{\"h\":\"3. 泛型方法\"},\"3023\":{\"h\":\"3.1 泛型方法的定义\",\"t\":[\"泛型方法是指在方法声明时定义类型参数的方法，它可以独立于类而存在，即使所在的类不是泛型类。\",\"定义格式：\",\"public <T> T 方法名(T 参数) { // 方法体 }\",\"示例：\",\"public class GenericMethodDemo { // 泛型方法 public <T> T getMiddleElement(T[] array) { if (array == null || array.length == 0) { return null; } return array[array.length / 2]; } public static void main(String[] args) { GenericMethodDemo demo = new GenericMethodDemo(); String[] strArray = {\\\"A\\\", \\\"B\\\", \\\"C\\\", \\\"D\\\", \\\"E\\\"}; String middleStr = demo.getMiddleElement(strArray); System.out.println(\\\"Middle string: \\\" + middleStr); // 输出: Middle string: C Integer[] intArray = {1, 2, 3, 4, 5, 6}; Integer middleInt = demo.getMiddleElement(intArray); System.out.println(\\\"Middle integer: \\\" + middleInt); // 输出: Middle integer: 4 } }\"]},\"3024\":{\"h\":\"3.2 静态泛型方法\",\"t\":[\"静态方法无法访问类的类型参数，因此如果静态方法需要使用泛型能力，必须将其定义为静态泛型方法。\",\"定义格式：\",\"public static <T> T 静态方法名(T 参数) { // 方法体 }\",\"示例：\",\"public class StaticGenericMethodDemo { // 静态泛型方法 public static <T> T getFirstElement(T[] array) { if (array == null || array.length == 0) { return null; } return array[0]; } public static void main(String[] args) { String[] strArray = {\\\"Hello\\\", \\\"World\\\"}; String firstStr = getFirstElement(strArray); System.out.println(firstStr); // 输出: Hello Double[] doubleArray = {1.5, 2.5, 3.5}; Double firstDouble = getFirstElement(doubleArray); System.out.println(firstDouble); // 输出: 1.5 } }\"]},\"3025\":{\"h\":\"3.3 限定类型参数\",\"t\":[\"泛型方法可以对类型参数进行限定，使用extends关键字指定类型参数必须是某个类的子类或实现某个接口。\",\"语法格式：\",\"public <T extends 限定类型> T 方法名(T 参数) { // 方法体 }\",\"示例：计算数组中元素的总和（限定类型为Number及其子类）\",\"public class BoundedTypeDemo { public static <T extends Number> double sum(T[] array) { double total = 0.0; for (T element : array) { total += element.doubleValue(); } return total; } public static void main(String[] args) { Integer[] intArray = {1, 2, 3, 4}; System.out.println(\\\"Sum: \\\" + sum(intArray)); // 输出: Sum: 10.0 Double[] doubleArray = {1.5, 2.5, 3.5}; System.out.println(\\\"Sum: \\\" + sum(doubleArray)); // 输出: Sum: 7.5 // String[] strArray = {\\\"1\\\", \\\"2\\\", \\\"3\\\"}; // System.out.println(sum(strArray)); // 编译错误，String不是Number的子类 } }\"]},\"3026\":{\"h\":\"知识扩展\"},\"3027\":{\"h\":\"1. 设计思想\",\"t\":[\"泛型体现了Java中的\\\"参数化类型\\\"设计思想，通过将类型抽象为参数，实现了代码的高度复用和类型安全。这种思想在集合框架、框架设计（如Spring、MyBatis）中被广泛应用，是面向抽象编程的重要体现。\"]},\"3028\":{\"h\":\"2. 避坑指南\",\"t\":[\"避免使用原始类型：原始类型（如List而非List< String>）会失去泛型的类型安全优势，应尽量避免\",\"泛型数组的限制：不能创建泛型数组（如new T[10]），可使用ArrayList替代\",\"泛型类型参数不能是基本类型：泛型类型参数只能是引用类型，如使用Integer而非int\",\"泛型信息在运行时被擦除：无法在运行时获取泛型的具体类型信息\"]},\"3029\":{\"h\":\"3. 深度思考题\",\"t\":[\"为什么Java泛型要使用类型擦除（Type Erasure）机制？它带来了哪些优势和局限？\",\"如何理解泛型中的通配符（?）、上界通配符（? extends T）和下界通配符（? super T）？它们各自的使用场景是什么？\",\"泛型方法与泛型类的类型参数有何区别？在什么情况下应该使用泛型方法而非泛型类？\"]},\"3030\":{\"h\":\"理解-深入理解泛型\"},\"3031\":{\"h\":\"概述\",\"t\":[\"泛型作为Java的核心特性之一，其底层实现机制和高级用法对编写高效、安全的代码至关重要。本章将深入探讨泛型的类型擦除机制、通配符的灵活应用、类型推断原理以及泛型在继承体系中的表现，帮助开发者从底层理解泛型的工作原理，避免常见误区，掌握复杂场景下的泛型使用技巧。\"]},\"3032\":{\"h\":\"知识要点\"},\"3033\":{\"h\":\"1. 泛型类型擦除机制\"},\"3034\":{\"h\":\"1.1 什么是类型擦除？\",\"t\":[\"类型擦除（Type Erasure）是Java泛型实现的核心机制，指编译器在编译时会移除泛型类型信息，将泛型类型替换为其原始类型（Raw Type）。这一机制确保了泛型代码与Java 5之前的非泛型代码的兼容性，但也带来了一些特性限制。\",\"擦除规则：\",\"无限制类型参数（如< T>）会被替换为Object\",\"有限制类型参数（如< T extends Number>）会被替换为其边界类型（Number）\",\"泛型方法的类型参数也会被相应的边界类型或Object替换\",\"示例：\",\"// 泛型类定义 class GenericClass<T> { private T value; public T getValue() { return value; } public void setValue(T value) { this.value = value; } } // 编译后类型擦除为 class GenericClass { private Object value; public Object getValue() { return value; } public void setValue(Object value) { this.value = value; } }\"]},\"3035\":{\"h\":\"1.2 类型擦除的影响\",\"t\":[\"1.2.1 运行时无法获取泛型类型信息 由于类型信息在编译时被擦除，运行时无法通过getClass()或instanceof判断泛型的具体类型：\",\"List<String> strList = new ArrayList<>(); List<Integer> intList = new ArrayList<>(); // 运行时泛型类型信息已擦除，均为ArrayList.class System.out.println(strList.getClass() == intList.getClass()); // 输出: true // 编译错误，无法使用instanceof判断泛型类型 // if (strList instanceof List<String>)\",\"1.2.2 泛型数组创建限制 不能直接创建泛型数组，因为数组在运行时需要知道其元素类型，而泛型类型信息已被擦除：\",\"// 编译错误 List<String>[] strLists = new List<String>[10]; // 可以使用通配符创建泛型数组，但存在类型安全隐患 List<?>[] wildcardLists = new List<?>[10]; wildcardLists[0] = new ArrayList<String>(); wildcardLists[1] = new ArrayList<Integer>();\",\"1.2.3 泛型方法重载限制 方法重载时，由于类型擦除可能导致方法签名冲突：\",\"class OverloadDemo { // 编译错误：类型擦除后方法签名相同 // public void method(List<String> list) {} // public void method(List<Integer> list) {} }\"]},\"3036\":{\"h\":\"1.3 桥接方法（Bridge Method）\",\"t\":[\"为了维持泛型类型的多态性，编译器会在泛型类的子类中自动生成桥接方法。当泛型类的方法被重写时，桥接方法确保了类型擦除后的方法调用正确性。\",\"示例：\",\"class Parent<T> { public T getValue() { return null; } } class Child extends Parent<String> { @Override public String getValue() { return \\\"Hello\\\"; } } // 编译后Child类会生成桥接方法 class Child extends Parent { // 实际重写的方法 public String getValue() { return \\\"Hello\\\"; } // 编译器生成的桥接方法 public Object getValue() { return getValue(); } }\"]},\"3037\":{\"h\":\"2. 泛型通配符详解\"},\"3038\":{\"h\":\"2.1 无界通配符（?）\",\"t\":[\"无界通配符?表示未知类型，可用于表示任意类型的泛型实例。主要用于读取操作，不允许添加元素（除null外）。\",\"使用场景：当方法需要处理多种泛型类型，但不依赖于具体类型时。\",\"public void printList(List<?> list) { for (Object element : list) { System.out.println(element); } // list.add(\\\"test\\\"); // 编译错误，无法添加具体类型元素 list.add(null); // 允许添加null } // 可以接收任意泛型类型的List printList(new ArrayList<String>()); printList(new ArrayList<Integer>());\"]},\"3039\":{\"h\":\"2.2 上界通配符（? extends T）\",\"t\":[\"上界通配符? extends T表示类型参数是T或T的子类。适用于读取操作，提供了类型安全的上限。\",\"使用场景：需要获取T类型对象，如集合元素的读取。\",\"// 计算数字列表的总和 public double sumOfList(List<? extends Number> list) { double sum = 0.0; for (Number num : list) { sum += num.doubleValue(); } return sum; } // 可以接收Number及其子类的List sumOfList(new ArrayList<Integer>()); sumOfList(new ArrayList<Double>()); // sumOfList(new ArrayList<String>()); // 编译错误，String不是Number子类\"]},\"3040\":{\"h\":\"2.3 下界通配符（? super T）\",\"t\":[\"下界通配符? super T表示类型参数是T或T的父类。适用于写入操作，提供了类型安全的下限。\",\"使用场景：需要添加T类型对象，如集合元素的写入。\",\"// 向列表添加整数 public void addIntegers(List<? super Integer> list) { list.add(1); list.add(2); list.add(3); } // 可以接收Integer及其父类的List addIntegers(new ArrayList<Integer>()); addIntegers(new ArrayList<Number>()); addIntegers(new ArrayList<Object>());\"]},\"3041\":{\"h\":\"2.4 PECS原则\",\"t\":[\"PECS（Producer Extends, Consumer Super）是使用通配符的指导原则：\",\"Producer（生产者）：如果只需要从集合中获取元素（生产数据），使用? extends T\",\"Consumer（消费者）：如果只需要向集合中添加元素（消费数据），使用? super T\",\"如果既需要生产又需要消费，不使用通配符\",\"示例：\",\"// 生产者：获取元素（extends） public List<String> getUpperCaseStrings(List<? extends String> producerList) { List<String> result = new ArrayList<>(); for (String s : producerList) { result.add(s.toUpperCase()); } return result; } // 消费者：添加元素（super） public void addLowercaseStrings(List<? super String> consumerList) { consumerList.add(\\\"hello\\\"); consumerList.add(\\\"world\\\"); }\"]},\"3042\":{\"h\":\"进阶-泛型在框架设计中的应用\"},\"3043\":{\"h\":\"概述\",\"t\":[\"泛型在现代Java框架设计中扮演着至关重要的角色，它不仅提升了代码的类型安全性和可读性，还为框架提供了强大的灵活性和可扩展性。本章将深入剖析泛型在核心类库（如集合框架）、主流框架（如Spring、MyBatis）以及设计模式中的应用实践，揭示泛型如何简化框架API设计、支持复杂业务场景，并通过实例展示泛型在框架开发中的最佳实践。\"]},\"3044\":{\"h\":\"知识要点\"},\"3045\":{\"h\":\"1. Java集合框架中的泛型应用\"},\"3046\":{\"h\":\"1.1 核心集合接口与泛型\",\"t\":[\"Java集合框架是泛型应用的典范，所有核心集合接口（List、Set、Map等）都通过泛型实现了类型安全的数据存储。\",\"示例：List与Map的泛型定义\",\"// List接口的泛型定义 public interface List<E> extends Collection<E> { E get(int index); boolean add(E e); // ... } // Map接口的泛型定义 public interface Map<K, V> { V get(Object key); V put(K key, V value); // ... }\",\"使用示例：\",\"// 类型安全的List List<String> stringList = new ArrayList<>(); stringList.add(\\\"泛型\\\"); String value = stringList.get(0); // 无需类型转换 // 类型安全的Map Map<String, Integer> scoreMap = new HashMap<>(); scoreMap.put(\\\"数学\\\", 90); Integer mathScore = scoreMap.get(\\\"数学\\\");\"]},\"3047\":{\"h\":\"1.2 Collections工具类的泛型方法\",\"t\":[\"Collections工具类提供了大量泛型方法，用于集合的排序、查找、同步控制等操作，实现了算法与数据结构的解耦。\",\"示例：排序与二分查找\",\"List<Integer> numbers = Arrays.asList(3, 1, 4, 1, 5, 9); // 泛型排序方法 Collections.sort(numbers); System.out.println(numbers); // 输出: [1, 1, 3, 4, 5, 9] // 泛型二分查找方法 int index = Collections.binarySearch(numbers, 4); System.out.println(\\\"元素4的索引: \\\" + index); // 输出: 元素4的索引: 3\"]},\"3048\":{\"h\":\"2. Spring框架中的泛型应用\"},\"3049\":{\"h\":\"2.1 依赖注入中的泛型自动装配\",\"t\":[\"Spring通过泛型类型信息实现了更精确的依赖注入，当Bean的属性为泛型类型时，Spring能根据泛型参数自动匹配对应的实现类。\",\"示例：泛型DAO与Service\",\"// 泛型DAO接口 public interface BaseDao<T> { void save(T entity); T findById(Long id); } // 泛型DAO实现 @Repository public class BaseDaoImpl<T> implements BaseDao<T> { @Autowired private JdbcTemplate jdbcTemplate; // 基于泛型的CRUD实现... } // 用户DAO接口 public interface UserDao extends BaseDao<User> {} // 订单DAO接口 public interface OrderDao extends BaseDao<Order> {} // 服务层使用 @Service public class UserService { // Spring自动注入UserDao的实现 @Autowired private UserDao userDao; public void createUser(User user) { userDao.save(user); } }\"]},\"3050\":{\"h\":\"2.2 Spring Data JPA的泛型Repository\",\"t\":[\"Spring Data JPA通过泛型Repository接口大幅简化了数据访问层代码，开发者只需定义接口即可自动获得CRUD功能。\",\"示例：Spring Data JPA泛型接口\",\"// Spring提供的泛型Repository public interface JpaRepository<T, ID> extends PagingAndSortingRepository<T, ID> { Optional<T> findById(ID id); <S extends T> S save(S entity); List<T> findAll(); // ... } // 自定义Repository接口（无需实现类） public interface UserRepository extends JpaRepository<User, Long> { // 自动实现根据用户名查询 Optional<User> findByUsername(String username); } // 使用示例 @Service public class UserService { @Autowired private UserRepository userRepository; public User getUserById(Long id) { return userRepository.findById(id) .orElseThrow(() -> new RuntimeException(\\\"用户不存在\\\")); } }\"]},\"3051\":{\"h\":\"3. MyBatis中的泛型应用\"},\"3052\":{\"h\":\"3.1 泛型Mapper接口\",\"t\":[\"MyBatis支持泛型Mapper接口，通过定义泛型基类Mapper，可以实现通用的CRUD操作，减少重复代码。\",\"示例：泛型BaseMapper\",\"// 泛型BaseMapper public interface BaseMapper<T> { @Insert(\\\"INSERT INTO ${tableName} VALUES(#{entity})\\\") int insert(@Param(\\\"entity\\\") T entity); @Select(\\\"SELECT * FROM ${tableName} WHERE id = #{id}\\\") T selectById(Long id); // ... } // 用户Mapper public interface UserMapper extends BaseMapper<User> { // 自定义查询 List<User> selectByRole(String role); } // 使用示例 @Service public class UserService { @Autowired private UserMapper userMapper; public User getUser(Long id) { return userMapper.selectById(id); } }\"]},\"3053\":{\"h\":\"3.2 泛型ResultMap\",\"t\":[\"MyBatis的ResultMap支持泛型类型，可以将查询结果自动映射到泛型实体类或包含泛型的复杂对象。\",\"示例：泛型ResultMap配置\",\"<!-- 泛型ResultMap定义 --> <resultMap id=\\\"BaseResultMap\\\" type=\\\"com.example.entity.BaseEntity<T>\\\"> <id column=\\\"id\\\" property=\\\"id\\\"/> <result column=\\\"create_time\\\" property=\\\"createTime\\\"/> <result column=\\\"update_time\\\" property=\\\"updateTime\\\"/> </resultMap> <!-- UserResultMap继承泛型ResultMap --> <resultMap id=\\\"UserResultMap\\\" type=\\\"com.example.entity.User\\\" extends=\\\"BaseResultMap\\\"> <result column=\\\"username\\\" property=\\\"username\\\"/> <result column=\\\"password\\\" property=\\\"password\\\"/> </resultMap>\"]},\"3054\":{\"h\":\"基础-网络编程基础概念\"},\"3055\":{\"h\":\"概述\",\"t\":[\"网络编程是Java开发中实现跨进程通信的核心技术，主要基于TCP/IP协议栈，通过Socket接口实现不同主机间的数据传输。本章节将从网络模型、通信协议到Java Socket编程逐步展开，建立完整的网络编程知识体系。\"]},\"3056\":{\"h\":\"知识要点\"},\"3057\":{\"h\":\"1. 网络模型\"},\"3058\":{\"h\":\"1.1 OSI七层模型\",\"t\":[\"OSI七层模型是国际标准化组织(ISO)提出的网络通信参考模型，从下到上分为：物理层、数据链路层、网络层、传输层、会话层、表示层和应用层。每一层负责不同的通信功能，通过分层设计实现网络通信的模块化。\"]},\"3059\":{\"h\":\"1.2 TCP/IP四层模型\",\"t\":[\"TCP/IP模型是实际应用中广泛采用的网络模型，将OSI七层模型简化为四层：网络接口层、网络层、传输层和应用层。Java网络编程主要涉及传输层(TCP/UDP)和应用层(HTTP等协议)。\"]},\"3060\":{\"h\":\"2. 核心传输协议\"},\"3061\":{\"h\":\"2.1 TCP协议\",\"t\":[\"TCP(传输控制协议)是一种面向连接的、可靠的、基于字节流的传输层协议。它通过三次握手建立连接，四次挥手释放连接，并采用确认重传、流量控制和拥塞控制等机制保证数据传输的可靠性。\"]},\"3062\":{\"h\":\"2.2 UDP协议\",\"t\":[\"UDP(用户数据报协议)是一种无连接的、不可靠的传输层协议。它不保证数据的可靠传输和顺序到达，但具有传输速度快、开销小的特点，适用于实时性要求高的场景如视频通话、在线游戏等。\"]},\"3063\":{\"h\":\"3. Java Socket编程基础\"},\"3064\":{\"h\":\"3.1 Socket概念\",\"t\":[\"Socket(套接字)是网络通信的端点，由IP地址和端口号唯一标识。Java中通过java.net.Socket类表示客户端套接字，java.net.ServerSocket类表示服务器端套接字。\"]},\"3065\":{\"h\":\"3.2 TCP通信流程\",\"t\":[\"TCP通信需要经历服务器端启动、客户端连接、数据传输和连接关闭四个阶段，以下是基于Java的TCP通信示例：\",\"服务器端代码：\",\"import java.io.IOException; import java.io.InputStream; import java.io.OutputStream; import java.net.ServerSocket; import java.net.Socket; /** * TCP服务器端示例 * 功能：监听指定端口，接收客户端连接并处理数据 */ public class TcpServer { public static void main(String[] args) { ServerSocket serverSocket = null; Socket clientSocket = null; try { // 1. 创建ServerSocket，绑定端口8888 serverSocket = new ServerSocket(8888); System.out.println(\\\"服务器已启动，等待客户端连接...\\\"); // 2. 监听客户端连接（阻塞方法） clientSocket = serverSocket.accept(); System.out.println(\\\"客户端已连接：\\\" + clientSocket.getInetAddress()); // 3. 获取输入流，读取客户端数据 try (InputStream in = clientSocket.getInputStream()) { byte[] buffer = new byte[1024]; int len = in.read(buffer); String message = new String(buffer, 0, len); System.out.println(\\\"收到客户端消息：\\\" + message); // 4. 获取输出流，向客户端发送响应 try (OutputStream out = clientSocket.getOutputStream()) { String response = \\\"服务器已收到消息：\\\" + message; out.write(response.getBytes()); out.flush(); } } } catch (IOException e) { e.printStackTrace(); } finally { // 5. 关闭资源 try { if (clientSocket != null) clientSocket.close(); if (serverSocket != null) serverSocket.close(); } catch (IOException e) { e.printStackTrace(); } } } }\",\"客户端代码：\",\"import java.io.IOException; import java.io.InputStream; import java.io.OutputStream; import java.net.Socket; /** * TCP客户端示例 * 功能：连接服务器，发送数据并接收响应 */ public class TcpClient { public static void main(String[] args) { Socket socket = null; try { // 1. 创建Socket，连接服务器（IP地址和端口） socket = new Socket(\\\"127.0.0.1\\\", 8888); // 2. 获取输出流，向服务器发送数据 try (OutputStream out = socket.getOutputStream()) { String message = \\\"Hello, TCP Server!\\\"; out.write(message.getBytes()); out.flush(); System.out.println(\\\"已向服务器发送消息：\\\" + message); // 3. 获取输入流，接收服务器响应 try (InputStream in = socket.getInputStream()) { byte[] buffer = new byte[1024]; int len = in.read(buffer); String response = new String(buffer, 0, len); System.out.println(\\\"收到服务器响应：\\\" + response); } } } catch (IOException e) { e.printStackTrace(); } finally { // 4. 关闭资源 try { if (socket != null) socket.close(); } catch (IOException e) { e.printStackTrace(); } } } }\"]},\"3066\":{\"h\":\"3.3 UDP通信示例\",\"t\":[\"UDP通信不需要建立连接，直接发送数据报，以下是UDP通信的简单实现：\",\"UDP发送端代码：\",\"import java.io.IOException; import java.net.DatagramPacket; import java.net.DatagramSocket; import java.net.InetAddress; /** * UDP发送端示例 * 功能：向指定地址和端口发送UDP数据报 */ public class UdpSender { public static void main(String[] args) { try (DatagramSocket socket = new DatagramSocket()) { // 1. 准备发送数据 String message = \\\"Hello, UDP Receiver!\\\"; byte[] data = message.getBytes(); // 2. 创建数据报包，指定目标地址和端口 InetAddress address = InetAddress.getByName(\\\"127.0.0.1\\\"); DatagramPacket packet = new DatagramPacket(data, data.length, address, 9999); // 3. 发送数据报 socket.send(packet); System.out.println(\\\"UDP数据发送成功：\\\" + message); } catch (IOException e) { e.printStackTrace(); } } }\",\"UDP接收端代码：\",\"import java.io.IOException; import java.net.DatagramPacket; import java.net.DatagramSocket; /** * UDP接收端示例 * 功能：监听指定端口，接收UDP数据报 */ public class UdpReceiver { public static void main(String[] args) { try (DatagramSocket socket = new DatagramSocket(9999)) { // 1. 创建缓冲区 byte[] buffer = new byte[1024]; DatagramPacket packet = new DatagramPacket(buffer, buffer.length); System.out.println(\\\"UDP接收端已启动，等待数据...\\\"); // 2. 接收数据（阻塞方法） socket.receive(packet); // 3. 处理数据 String message = new String(packet.getData(), 0, packet.getLength()); System.out.println(\\\"收到UDP数据：\\\" + message); System.out.println(\\\"发送方地址：\\\" + packet.getAddress() + \\\", 端口：\\\" + packet.getPort()); } catch (IOException e) { e.printStackTrace(); } } }\"]},\"3067\":{\"h\":\"知识扩展\"},\"3068\":{\"h\":\"设计思想\",\"t\":[\"网络编程的核心设计思想是\\\"分层抽象\\\"和\\\"接口标准化\\\"：\",\"分层抽象：通过OSI/TCP/IP模型将复杂的网络通信分解为多个独立的层次，每个层次专注于解决特定问题，降低系统复杂度\",\"接口标准化：Java提供统一的Socket API，屏蔽了底层操作系统的差异，使开发者可以用相同的方式编写跨平台的网络应用\",\"面向连接与无连接并存：TCP和UDP协议分别满足不同场景的需求，体现了\\\"按需选择\\\"的设计哲学\"]},\"3069\":{\"h\":\"避坑指南\",\"t\":[\"资源释放问题：Socket、ServerSocket等网络资源必须显式关闭，建议使用try-with-resources语法自动管理资源\",\"端口占用问题：绑定端口时可能出现AddressAlreadyInUseException，可通过设置SO_REUSEADDR参数允许端口复用\",\"serverSocket.setReuseAddress(true); // 服务器端设置 socket.setReuseAddress(true); // 客户端设置\",\"数据粘包问题：TCP是流式协议，可能出现数据粘包，解决方案包括： \",\"固定长度消息\",\"消息长度+数据格式\",\"特殊分隔符\",\"超时处理：网络操作应设置超时时间，避免程序无限阻塞\",\"socket.setSoTimeout(3000); // 设置读取超时时间为3秒\",\"异常处理：网络通信中可能出现各种IO异常，需要全面的异常处理机制\"]},\"3070\":{\"h\":\"深度思考题\",\"t\":[\"思考题1：TCP三次握手和四次挥手的具体过程是什么？为什么挥手需要四次而握手只需要三次？\",\"思考题回答： TCP三次握手过程：\",\"客户端发送SYN包（同步序列编号）请求建立连接\",\"服务器收到SYN包后，发送SYN+ACK包（同步+确认）响应\",\"客户端收到SYN+ACK包后，发送ACK包（确认）完成连接建立\",\"四次挥手过程：\",\"主动关闭方发送FIN包（结束）请求关闭连接\",\"被动关闭方收到FIN包后，发送ACK包确认\",\"被动关闭方准备好后，发送FIN包请求关闭连接\",\"主动关闭方发送ACK包确认\",\"挥手需要四次的原因：TCP连接是全双工的，双方需要分别关闭各自的发送通道。被动关闭方收到FIN包时，可能还有数据未发送完成，因此需要先发送ACK确认，待数据发送完毕后再发送FIN包。而握手时服务器可以将SYN和ACK合并发送，因此只需三次。\",\"思考题2：如何在Java中实现一个简单的HTTP服务器？\",\"思考题回答： 可以基于ServerSocket实现简单的HTTP服务器，核心步骤包括：\",\"创建ServerSocket监听80端口\",\"循环接收客户端连接\",\"读取HTTP请求报文\",\"解析请求行、请求头和请求体\",\"构造HTTP响应报文\",\"通过输出流发送响应\",\"关闭连接（HTTP/1.0）或保持连接（HTTP/1.1）\",\"核心代码框架：\",\"ServerSocket serverSocket = new ServerSocket(80); while (true) { Socket socket = serverSocket.accept(); try (InputStream in = socket.getInputStream(); OutputStream out = socket.getOutputStream()) { // 读取请求 BufferedReader reader = new BufferedReader(new InputStreamReader(in)); String requestLine = reader.readLine(); // 构造响应 String response = \\\"HTTP/1.1 200 OK\\\\r\\\\n\\\" + \\\"Content-Type: text/html\\\\r\\\\n\\\" + \\\"\\\\r\\\\n\\\" + \\\"<h1>Hello, HTTP Server!</h1>\\\"; out.write(response.getBytes()); } finally { socket.close(); } }\"]},\"3071\":{\"h\":\"理解-深入理解网络编程\"},\"3072\":{\"h\":\"概述\",\"t\":[\"深入理解网络编程需要掌握TCP/IP协议栈的底层机制、Java IO模型的演进以及分布式系统的通信设计原则。本章将从协议细节、IO模型、并发处理到分布式通信逐步深入，揭示网络编程的核心原理与实践技巧。\"]},\"3073\":{\"h\":\"知识要点\"},\"3074\":{\"h\":\"1. TCP协议深度解析\"},\"3075\":{\"h\":\"1.1 拥塞控制机制\",\"t\":[\"TCP拥塞控制是防止网络因过载而瘫痪的关键机制，主要通过四个算法实现：慢启动、拥塞避免、快速重传和快速恢复。\",\"慢启动：初始拥塞窗口较小（通常为1-2个MSS），每收到一个ACK，拥塞窗口大小翻倍，指数增长。 拥塞避免：当拥塞窗口达到慢启动阈值(ssthresh)后，进入线性增长阶段，每RTT拥塞窗口增加1个MSS。 快速重传：当收到3个重复ACK时，立即重传丢失的报文段，无需等待超时。 快速恢复：快速重传后，将ssthresh设为当前拥塞窗口的一半，拥塞窗口设为ssthresh+3*MSS，进入拥塞避免阶段。\"]},\"3076\":{\"h\":\"1.2 流量控制机制\",\"t\":[\"TCP通过滑动窗口机制实现流量控制，防止发送方发送速度过快导致接收方缓冲区溢出。\",\"接收方通过TCP头部的窗口字段告知发送方可接收的字节数（接收窗口）\",\"发送方的发送窗口不能超过接收窗口和拥塞窗口中的最小值\",\"零窗口探测机制处理接收窗口为0的情况\"]},\"3077\":{\"h\":\"2. Java IO模型演进\"},\"3078\":{\"h\":\"2.1 BIO（阻塞IO）模型\",\"t\":[\"BIO是Java最早的IO模型，特点是每个连接对应一个线程，线程在IO操作期间会被阻塞。\",\"缺点：资源消耗大，并发能力有限，不适用于高并发场景。\",\"代码示例：\",\"// BIO服务器端示例 ServerSocket serverSocket = new ServerSocket(8080); while (true) { Socket socket = serverSocket.accept(); // 阻塞 new Thread(() -> { try (InputStream in = socket.getInputStream(); OutputStream out = socket.getOutputStream()) { // 处理IO（阻塞） } catch (IOException e) { e.printStackTrace(); } }).start(); }\"]},\"3079\":{\"h\":\"2.2 NIO（非阻塞IO）模型\",\"t\":[\"JDK1.4引入NIO，基于Channel、Buffer和Selector实现非阻塞IO操作，一个线程可管理多个连接。\",\"核心组件：\",\"Channel：双向通道，支持非阻塞读写（如SocketChannel、ServerSocketChannel）\",\"Buffer：数据缓冲区，IO操作直接与Buffer交互\",\"Selector：多路复用器，监听Channel的就绪事件\",\"Reactor模式：NIO的典型应用模式，通过Selector轮询就绪事件，分发处理\",\"代码示例：\",\"// NIO服务器端示例 Selector selector = Selector.open(); ServerSocketChannel serverSocketChannel = ServerSocketChannel.open(); serverSocketChannel.bind(new InetSocketAddress(8080)); serverSocketChannel.configureBlocking(false); serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT); while (selector.select() > 0) { Iterator<SelectionKey> keyIterator = selector.selectedKeys().iterator(); while (keyIterator.hasNext()) { SelectionKey key = keyIterator.next(); if (key.isAcceptable()) { // 处理连接事件 ServerSocketChannel server = (ServerSocketChannel) key.channel(); SocketChannel client = server.accept(); client.configureBlocking(false); client.register(selector, SelectionKey.OP_READ); } else if (key.isReadable()) { // 处理读事件 SocketChannel client = (SocketChannel) key.channel(); ByteBuffer buffer = ByteBuffer.allocate(1024); int len = client.read(buffer); if (len > 0) { buffer.flip(); byte[] data = new byte[len]; buffer.get(data); System.out.println(new String(data)); } } keyIterator.remove(); } }\"]},\"3080\":{\"h\":\"2.3 AIO（异步IO）模型\",\"t\":[\"JDK1.7引入AIO，基于回调机制实现完全异步的IO操作，IO操作完成后通知应用程序。\",\"特点：真正的异步非阻塞，无需轮询，资源消耗更低，但编程复杂度高。\"]},\"3081\":{\"h\":\"3. 网络并发处理模型\"},\"3082\":{\"h\":\"3.1 线程池模型\",\"t\":[\"通过线程池管理线程资源，避免频繁创建销毁线程的开销，提高并发处理能力。\",\"核心参数：核心线程数、最大线程数、队列容量、拒绝策略\",\"代码示例：\",\"// 线程池处理网络请求 ExecutorService threadPool = new ThreadPoolExecutor( 5, // 核心线程数 10, // 最大线程数 60, TimeUnit.SECONDS, // 空闲线程存活时间 new ArrayBlockingQueue<>(20), // 任务队列 new ThreadPoolExecutor.AbortPolicy() // 拒绝策略 ); ServerSocket serverSocket = new ServerSocket(8080); while (true) { Socket socket = serverSocket.accept(); threadPool.submit(() -> handleRequest(socket)); }\"]},\"3083\":{\"h\":\"3.2 Reactor模式\",\"t\":[\"基于事件驱动的并发处理模式，将IO事件分发到相应的处理器处理，分为单Reactor单线程、单Reactor多线程和主从Reactor多线程三种实现。\",\"主从Reactor多线程模式：\",\"主Reactor：处理连接事件\",\"从Reactor：处理IO事件\",\"线程池：处理业务逻辑\"]},\"3084\":{\"h\":\"4. 分布式通信设计\"},\"3085\":{\"h\":\"4.1 序列化协议\",\"t\":[\"序列化是将对象转换为字节流以便网络传输的过程，常用的Java序列化协议包括：\",\"Java原生序列化：通过实现Serializable接口，使用ObjectInputStream和ObjectOutputStream进行序列化。 缺点：性能差、体积大、不跨语言。\",\"JSON：轻量级文本协议，可读性好，跨语言支持广泛（如Jackson、FastJSON）。 缺点：二进制数据处理差，类型信息丢失。\",\"Protobuf：Google开发的二进制协议，高效紧凑，支持版本兼容和跨语言。 优点：序列化速度快，数据体积小，生成代码优化。\",\"Protobuf使用示例：\",\"定义.proto文件：\",\"syntax = \\\"proto3\\\"; package com.example; message User { int32 id = 1; string name = 2; repeated string hobbies = 3; }\",\"Java序列化/反序列化代码：\",\"/** * Protobuf序列化示例 */ public class ProtobufDemo { public static void main(String[] args) throws Exception { // 创建对象 UserProto.User user = UserProto.User.newBuilder() .setId(1) .setName(\\\"Alice\\\") .addHobbies(\\\"reading\\\") .addHobbies(\\\"coding\\\") .build(); // 序列化 byte[] data = user.toByteArray(); System.out.println(\\\"序列化后长度：\\\" + data.length); // 反序列化 UserProto.User deserializedUser = UserProto.User.parseFrom(data); System.out.println(\\\"反序列化结果：\\\" + deserializedUser.getName()); } }\"]},\"3086\":{\"h\":\"4.2 负载均衡\",\"t\":[\"负载均衡用于将请求分发到多个服务器，提高系统可用性和吞吐量，常见策略：\",\"轮询(Round Robin)：按顺序依次分配请求到服务器。 加权轮询(Weighted Round Robin)：根据服务器性能设置权重，权重高的服务器接收更多请求。 一致性哈希(Consistent Hashing)：解决分布式缓存中的数据分布问题，减少节点变化时的缓存失效。\",\"一致性哈希实现示例：\",\"/** * 一致性哈希简单实现 */ public class ConsistentHash<T> { private final int numberOfReplicas; // 虚拟节点数量 private final SortedMap<Integer, T> circle = new TreeMap<>(); public ConsistentHash(int numberOfReplicas, Collection<T> nodes) { this.numberOfReplicas = numberOfReplicas; for (T node : nodes) { add(node); } } // 添加节点 public void add(T node) { for (int i = 0; i < numberOfReplicas; i++) { circle.put(hash(node.toString() + i), node); } } // 移除节点 public void remove(T node) { for (int i = 0; i < numberOfReplicas; i++) { circle.remove(hash(node.toString() + i)); } } // 获取目标节点 public T get(Object key) { if (circle.isEmpty()) return null; int hash = hash(key.toString()); if (!circle.containsKey(hash)) { // 顺时针查找下一个节点 SortedMap<Integer, T> tailMap = circle.tailMap(hash); hash = tailMap.isEmpty() ? circle.firstKey() : tailMap.firstKey(); } return circle.get(hash); } // FNV1哈希算法 private int hash(String key) { final int p = 16777619; int hash = (int) 2166136261L; for (int i = 0; i < key.length(); i++) { hash = (hash ^ key.charAt(i)) * p; } hash += hash << 13; hash ^= hash >> 7; hash += hash << 3; hash ^= hash >> 17; hash += hash << 5; return hash & 0x7FFFFFFF; // 确保非负 } }\"]},\"3087\":{\"h\":\"4.3 容错机制\",\"t\":[\"分布式系统中常用的容错机制包括：\",\"重试机制：请求失败后自动重试，适用于暂时性错误。 超时控制：设置请求超时时间，避免无限等待。 熔断机制：当服务故障比例超过阈值时，快速失败并降级，保护系统。 限流机制：限制并发请求数量，防止系统过载。\",\"熔断器模式示例：\",\"/** * 简单熔断器实现 */ public class CircuitBreaker { private enum State { CLOSED, OPEN, HALF_OPEN } private State state = State.CLOSED; private int failureCount = 0; private int successCount = 0; private final int failureThreshold; // 失败阈值 private final int successThreshold; // 半开状态成功阈值 private final long resetTimeout; // 重置超时时间 private long lastFailureTime; public CircuitBreaker(int failureThreshold, int successThreshold, long resetTimeout) { this.failureThreshold = failureThreshold; this.successThreshold = successThreshold; this.resetTimeout = resetTimeout; } public <T> T execute(Supplier<T> operation) throws Exception { if (state == State.OPEN) { if (System.currentTimeMillis() - lastFailureTime > resetTimeout) { state = State.HALF_OPEN; } else { throw new Exception(\\\"Circuit breaker is open\\\"); } } try { T result = operation.get(); onSuccess(); return result; } catch (Exception e) { onFailure(); throw e; } } private void onSuccess() { if (state == State.HALF_OPEN) { successCount++; if (successCount >= successThreshold) { state = State.CLOSED; successCount = 0; failureCount = 0; } } } private void onFailure() { if (state == State.HALF_OPEN) { state = State.OPEN; lastFailureTime = System.currentTimeMillis(); successCount = 0; return; } failureCount++; if (failureCount >= failureThreshold) { state = State.OPEN; lastFailureTime = System.currentTimeMillis(); } } }\"]},\"3088\":{\"h\":\"知识扩展\"},\"3089\":{\"h\":\"设计思想\",\"t\":[\"深入网络编程的核心设计思想包括：\",\"事件驱动架构：基于事件响应而非主动轮询，提高系统吞吐量（如NIO的Selector）\",\"分层与关注点分离：将网络通信分为协议层、IO层、业务层，降低耦合\",\"异步非阻塞：通过回调和事件通知机制，最大化CPU利用率\",\"资源池化：线程池、连接池等技术减少资源创建销毁开销\",\"弹性设计：通过限流、熔断、降级等机制提高系统容错能力\"]},\"3090\":{\"h\":\"避坑指南\",\"t\":[\"Selector线程瓶颈：单个Selector处理过多连接会成为瓶颈，建议使用主从Reactor模型分散负载\",\"Buffer管理不当： \",\"避免频繁创建Buffer，建议使用Buffer池\",\"注意flip()和clear()方法的正确使用，防止数据错乱\",\"NIO空轮询bug：JDK早期版本存在Selector.select()无限返回0的bug，需设置超时时间或升级JDK\",\"线程安全问题：Channel和Selector不是线程安全的，需注意同步\",\"TCP粘包/拆包： \",\"解决方案：固定长度、分隔符、长度前缀\",\"推荐使用Netty等成熟框架处理\",\"连接泄漏：确保Socket/Channel在finally块中关闭，或使用try-with-resources\"]},\"3091\":{\"h\":\"深度思考题\",\"t\":[\"思考题1：Reactor模式和Proactor模式的本质区别是什么？分别适用于什么场景？\",\"思考题回答： 本质区别在于IO操作的发起者不同：\",\"Reactor模式：应用程序主动发起IO操作（同步IO），内核通知IO就绪事件\",\"Proactor模式：内核主动完成IO操作并通知应用程序（异步IO）\",\"适用场景：\",\"Reactor：适用于IO密集型应用，如Web服务器、即时通讯系统\",\"Proactor：适用于需要处理大量并发连接且IO操作耗时较长的场景，如文件服务器\",\"Java NIO实现的是Reactor模式，而AIO尝试实现Proactor模式，但由于操作系统支持有限，实际应用较少。Netty等框架通过NIO模拟了Proactor模式的效果。\",\"思考题2：如何设计一个高性能的Java网络服务器？关键优化点有哪些？\",\"思考题回答： 高性能网络服务器设计要点：\",\"IO模型选择：使用NIO/Epoll而非BIO，减少线程开销\",\"线程模型优化： \",\"主从Reactor多线程模型\",\"业务逻辑与IO处理分离\",\"内存管理： \",\"使用直接内存（DirectByteBuffer）减少JVM堆外内存拷贝\",\"Buffer池化复用\",\"协议优化： \",\"使用二进制协议（如Protobuf）替代文本协议\",\"合理设计消息格式，减少序列化开销\",\"连接管理： \",\"TCP参数调优（SO_RCVBUF、SO_SNDBUF、TCP_NODELAY）\",\"连接池化与超时控制\",\"并发控制： \",\"无锁化设计\",\"减少共享状态\",\"监控与调优： \",\"关键指标监控（吞吐量、延迟、错误率）\",\"JVM参数调优（堆大小、GC策略）\",\"典型实现如Netty框架，通过上述优化可支持百万级并发连接。\"]},\"3092\":{\"h\":\"生态-网络监控与诊断工具\"},\"3093\":{\"h\":\"概述\",\"t\":[\"在分布式系统架构中，网络通信的稳定性和性能直接影响整体系统质量。网络监控与诊断工具是定位问题、优化性能的关键基础设施。本章节将系统介绍Java网络应用开发中常用的监控工具、诊断命令、日志分析方案及分布式追踪系统，帮助开发者构建全方位的网络问题发现与解决能力。\"]},\"3094\":{\"h\":\"知识要点\"},\"3095\":{\"h\":\"1. JVM网络监控工具\"},\"3096\":{\"h\":\"1.1 JDK自带监控工具\",\"t\":[\"JDK提供了一系列开箱即用的命令行和图形化工具，用于监控Java应用的网络活动和资源使用情况。\",\"JConsole：Java监控与管理控制台，提供可视化界面监控JVM网络连接、线程状态和内存使用。\",\"启动命令：jconsole <PID>\",\"网络监控功能：MBean标签页中的java.net相关指标\",\"VisualVM：功能强大的多合一故障诊断工具，支持插件扩展。\",\"启动命令：jvisualvm\",\"网络监控插件：VisualVM-Sampler插件可监控网络I/O活动\",\"jstack：生成Java线程快照，可用于分析网络相关线程阻塞问题。\",\"# 查找Java进程ID jps -l # 生成线程快照 jstack <PID> > thread_dump.txt # 查找网络相关阻塞线程（如SocketRead0） grep -A 20 'SocketRead0' thread_dump.txt\"]},\"3097\":{\"h\":\"1.2 第三方监控工具\",\"t\":[\"Netty-Tcnative：Netty的本地传输库，提供网络性能指标和监控能力。\",\"<!-- Maven依赖 --> <dependency> <groupId>io.netty</groupId> <artifactId>netty-tcnative-boringssl-static</artifactId> <version>2.0.56.Final</version> </dependency>\",\"Micrometer：应用指标收集工具，可集成多种监控系统。\",\"/** * 使用Micrometer监控网络连接数 */ public class ConnectionMetrics { private final MeterRegistry meterRegistry; private final Counter connectionCounter; private final Gauge activeConnections; public ConnectionMetrics(MeterRegistry meterRegistry) { this.meterRegistry = meterRegistry; this.connectionCounter = Counter.builder(\\\"network.connections.total\\\") .description(\\\"Total number of connections\\\") .register(meterRegistry); this.activeConnections = Gauge.builder(\\\"network.connections.active\\\", () -> ConnectionPool.getActiveCount()) .description(\\\"Number of active connections\\\") .register(meterRegistry); } public void onConnectionEstablished() { connectionCounter.increment(); } }\"]},\"3098\":{\"h\":\"2. 网络诊断命令工具\"},\"3099\":{\"h\":\"2.1 系统级网络诊断\",\"t\":[\"netstat：显示网络连接、路由表和网络接口信息。\",\"# 查看所有TCP连接 netstat -tuln # 查看特定端口占用情况 netstat -tuln | grep 8080 # 查看Java进程打开的文件描述符 lsof -p <PID> | grep TCP\",\"tcpdump：强大的网络数据包捕获工具。\",\"# 捕获特定端口的TCP数据包 tcpdump -i any port 8080 and tcp -w network_traffic.pcap # 读取捕获的数据包 tcpdump -r network_traffic.pcap\",\"iftop：实时网络带宽监控工具。\",\"# 监控网络接口流量 iftop -i eth0\"]},\"3100\":{\"h\":\"2.2 Java应用网络诊断\",\"t\":[\"jmap：生成堆转储快照，分析网络相关对象内存占用。\",\"# 生成堆转储 jmap -dump:format=b,file=heap_dump.hprof <PID> # 使用MAT分析堆转储中的Socket对象 # 查找可能的连接泄漏\",\"jstat：监控JVM统计信息，包括类加载、GC和编译情况。\",\"# 监控GC情况 jstat -gcutil <PID> 1000 10\",\"AsyncProfiler：低开销Java性能分析器，支持网络调用分析。\",\"# 下载并安装AsyncProfiler wget https://github.com/jvm-profiling-tools/async-profiler/releases/download/v2.9/async-profiler-2.9-linux-x64.tar.gz tar -zxvf async-profiler-2.9-linux-x64.tar.gz # 分析网络调用 ./profiler.sh -d 30 -e sun.nio.ch.SocketChannelImpl.write -f network_profile.html <PID>\"]},\"3101\":{\"h\":\"3. 日志分析与可视化\"},\"3102\":{\"h\":\"3.1 日志框架集成\",\"t\":[\"Logback + SLF4J：常用的Java日志框架组合，可配置网络相关日志。\",\"<!-- logback.xml配置网络日志 --> <configuration> <appender name=\\\"CONSOLE\\\" class=\\\"ch.qos.logback.core.ConsoleAppender\\\"> <encoder> <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern> </encoder> </appender> <!-- 网络相关包日志级别设为DEBUG --> <logger name=\\\"java.net\\\" level=\\\"DEBUG\\\" /> <logger name=\\\"sun.nio.ch\\\" level=\\\"DEBUG\\\" /> <logger name=\\\"io.netty\\\" level=\\\"INFO\\\" /> <root level=\\\"INFO\\\"> <appender-ref ref=\\\"CONSOLE\\\" /> </root> </configuration>\"]},\"3103\":{\"h\":\"3.2 日志聚合与分析工具\",\"t\":[\"ELK Stack：Elasticsearch、Logstash、Kibana组合，用于日志集中管理和可视化。\",\"Filebeat：轻量级日志收集器\",\"Logstash：日志处理管道\",\"Elasticsearch：日志存储和搜索\",\"Kibana：日志可视化和分析\",\"网络日志查询示例：\",\"# Kibana查询慢网络请求 logs | where message contains \\\"SocketTimeoutException\\\" | where @timestamp > now() - 1h | summarize count() by host, request_uri | sort by count_ desc\"]},\"3104\":{\"h\":\"3.3 分布式追踪系统\",\"t\":[\"Zipkin：开源分布式追踪系统，基于Google Dapper论文设计。\",\"核心概念：Trace、Span、Annotation\",\"传输方式：HTTP、Kafka\",\"采样策略：固定速率、自适应、边界采样\",\"Spring Cloud集成Zipkin示例：\",\"<!-- Maven依赖 --> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-zipkin</artifactId> </dependency>\",\"# application.yml配置 spring: zipkin: base-url: http://localhost:9411 sleuth: sampler: probability: 1.0 # 开发环境全采样\",\"SkyWalking：国产开源APM工具，支持分布式追踪、性能指标分析和服务依赖分析。\",\"Java探针：无侵入式埋点\",\"存储：Elasticsearch、MySQL\",\"UI：服务拓扑图、性能仪表盘\",\"SkyWalking接入示例：\",\"# 启动应用时添加Javaagent java -javaagent:/path/to/skywalking-agent.jar \\\\ -Dskywalking.agent.service_name=my-network-service \\\\ -Dskywalking.collector.backend_service=localhost:11800 \\\\ -jar app.jar\"]},\"3105\":{\"h\":\"4. 网络性能测试工具\"},\"3106\":{\"h\":\"4.1 基准测试工具\",\"t\":[\"JMeter：Apache JMeter是功能强大的负载测试工具，可模拟高并发网络请求。\",\"关键特性：支持HTTP、TCP、JDBC等多种协议\",\"测试计划：线程组、取样器、断言、监听器\",\"网络测试场景：并发用户数、响应时间、吞吐量\",\"JMeter TCP测试配置：\",\"创建线程组\",\"添加TCP取样器\",\"配置服务器地址和端口\",\"添加查看结果树和聚合报告监听器\",\"设置并发用户数和循环次数\"]},\"3107\":{\"h\":\"4.2 网络性能分析工具\",\"t\":[\"Wireshark：网络协议分析器，可详细解析网络数据包内容。\",\"过滤器：按协议、端口、IP地址过滤\",\"统计功能：流量分析、会话分析\",\"Java网络调试：可分析HTTP、WebSocket等协议交互\",\"常用Wireshark过滤器：\",\"# 过滤特定端口的TCP流量 tcp.port == 8080 # 过滤Java RMI流量 tcp.port == 1099 # 过滤HTTP请求 http.request.method == \\\"GET\\\"\",\"Netty自带性能测试工具：\",\"# Netty吞吐量测试工具 java -jar netty-example-4.1.77.Final.jar io.netty.example.http2.helloworld.server.Http2Server 8443\"]},\"3108\":{\"h\":\"知识扩展\"},\"3109\":{\"h\":\"设计思想\",\"t\":[\"网络监控与诊断工具的核心设计思想：\",\"可观测性三支柱：日志(Logs)、指标(Metrics)、追踪(Traces)\",\"黄金指标：延迟(Latency)、流量(Traffic)、错误(Errors)、饱和度(Saturation)\",\"RED方法：Rate(请求率)、Errors(错误率)、Duration(持续时间)\",\"监控金字塔：从基础监控到业务监控的层次化设计\",\"故障注入：主动测试系统容错能力\"]},\"3110\":{\"h\":\"避坑指南\",\"t\":[\"监控 overhead：避免监控工具本身成为系统瓶颈\",\"合理设置采样率\",\"避免在生产环境使用高开销的监控工具\",\"定期评估监控系统性能影响\",\"日志规范：\",\"统一日志格式，包含时间戳、线程名、日志级别\",\"网络相关日志需包含关键上下文：远程地址、端口、请求ID\",\"避免记录敏感信息\",\"分布式追踪实践：\",\"确保全链路追踪上下文传递\",\"关键网络调用必须添加追踪埋点\",\"关联日志与追踪ID\",\"工具选型：\",\"轻量级场景：选择内置工具(jconsole、jstack)而非重量级APM\",\"生产环境：优先考虑低侵入式方案\",\"容器环境：选择支持Docker/K8s的监控方案\"]},\"3111\":{\"h\":\"深度思考题\",\"t\":[\"思考题1：如何设计一个低侵入式的Java网络监控系统？关键技术点有哪些？\",\"思考题回答： 低侵入式网络监控系统设计要点：\",\"技术选型：\",\"字节码增强：ASM、Byte Buddy实现无侵入埋点\",\"Java Agent：通过-javaagent参数加载监控逻辑\",\"JMX：利用MBean暴露网络指标\",\"关键实现：\",\"基于责任链模式设计监控拦截器\",\"使用ThreadLocal传递追踪上下文\",\"采用异步方式处理监控数据\",\"实现采样机制控制开销\",\"核心指标：\",\"连接池指标：活跃连接数、等待队列长度、连接创建/关闭速率\",\"请求指标：吞吐量、响应时间分布、错误率\",\"网络指标：TCP重传率、带宽使用率、连接超时数\",\"架构设计：\",\"客户端-服务端模式，监控数据集中收集\",\"分级存储，热数据内存存储，冷数据持久化\",\"支持动态配置，实时调整监控策略\",\"思考题2：在微服务架构中，如何通过监控工具快速定位跨服务网络调用的性能瓶颈？\",\"思考题回答： 微服务网络性能瓶颈定位流程：\",\"服务拓扑可视化：\",\"使用SkyWalking或Zipkin的服务依赖图\",\"识别关键路径和瓶颈服务\",\"端到端追踪：\",\"通过分布式追踪ID串联跨服务调用\",\"分析每个服务节点的耗时分布\",\"重点关注跨服务调用的网络延迟\",\"指标关联分析：\",\"结合RED指标和系统指标(CUP、内存、网络)\",\"使用PromQL或KQL进行多维度聚合分析\",\"建立网络性能基线，识别异常波动\",\"工具组合策略：\",\"宏观：Grafana大盘监控整体网络健康度\",\"中观：分布式追踪定位异常调用链\",\"微观：Wireshark抓包分析具体网络交互\",\"日志：关联分析错误日志和慢请求日志\",\"自动化诊断：\",\"设置智能告警规则\",\"建立常见网络问题的自动诊断流程\",\"集成AIOps进行异常检测和根因分析\"]},\"3112\":{\"h\":\"进阶-NIO与异步编程\"},\"3113\":{\"h\":\"概述\",\"t\":[\"Java NIO（New IO）是JDK 1.4引入的异步非阻塞IO模型，通过Buffer、Channel和Selector三大核心组件实现高效的IO操作。相较于传统BIO（Blocking IO）的阻塞特性，NIO支持单线程处理多个连接，显著提升了高并发场景下的系统性能。本章节将深入剖析NIO的底层原理、异步编程模型及Netty框架的实战应用，帮助开发者构建高性能网络应用。\"]},\"3114\":{\"h\":\"知识要点\"},\"3115\":{\"h\":\"1. NIO核心组件\"},\"3116\":{\"h\":\"1.1 Buffer缓冲区\",\"t\":[\"Buffer是NIO中数据存储的基本单元，用于在通道（Channel）中读写数据。所有Buffer都继承自java.nio.Buffer类，常用实现包括ByteBuffer、CharBuffer、IntBuffer等。\",\"Buffer的核心属性：\",\"capacity：缓冲区容量，创建后不可改变\",\"position：当前读写位置，初始为0\",\"limit：读写限制位置，默认为capacity\",\"mark：标记位置，用于临时记录position\",\"Buffer操作流程：\",\"写入数据到Buffer\",\"调用flip()切换为读模式（limit=position，position=0）\",\"从Buffer读取数据\",\"调用clear()或compact()清空缓冲区\",\"ByteBuffer使用示例：\",\"/** * ByteBuffer基本操作示例 */ public class ByteBufferDemo { public static void main(String[] args) { // 创建容量为1024字节的缓冲区 ByteBuffer buffer = ByteBuffer.allocate(1024); System.out.println(\\\"初始化状态: \\\" + buffer); // 写入数据 String data = \\\"Hello NIO!\\\"; buffer.put(data.getBytes()); System.out.println(\\\"写入后状态: \\\" + buffer); // 切换为读模式 buffer.flip(); System.out.println(\\\"切换读模式后: \\\" + buffer); // 读取数据 byte[] readData = new byte[buffer.limit()]; buffer.get(readData); System.out.println(\\\"读取内容: \\\" + new String(readData)); System.out.println(\\\"读取后状态: \\\" + buffer); // 清空缓冲区（compact保留未读数据） buffer.compact(); System.out.println(\\\"compact后状态: \\\" + buffer); } }\"]},\"3117\":{\"h\":\"1.2 Channel通道\",\"t\":[\"Channel是NIO中数据传输的通道，类似于BIO中的流，但支持双向读写和非阻塞操作。常用Channel实现包括：\",\"FileChannel：文件IO操作\",\"SocketChannel：TCP客户端通道\",\"ServerSocketChannel：TCP服务端通道\",\"DatagramChannel：UDP通信通道\",\"Pipe.SinkChannel/Pipe.SourceChannel：线程间通信\",\"Channel的主要特点：\",\"双向性：既可读又可写\",\"非阻塞：支持非阻塞模式\",\"面向缓冲区：数据必须通过Buffer读写\",\"SocketChannel示例：\",\"/** * 非阻塞SocketChannel客户端示例 */ public class NonBlockingSocketClient { public static void main(String[] args) throws IOException { // 创建非阻塞SocketChannel SocketChannel socketChannel = SocketChannel.open(); socketChannel.configureBlocking(false); // 连接服务器（非阻塞，立即返回） socketChannel.connect(new InetSocketAddress(\\\"localhost\\\", 8080)); // 轮询等待连接完成 while (!socketChannel.finishConnect()) { System.out.println(\\\"等待连接中...\\\"); // 可以执行其他任务 } // 发送数据 String message = \\\"Hello from NIO client!\\\"; ByteBuffer buffer = ByteBuffer.wrap(message.getBytes()); while (buffer.hasRemaining()) { socketChannel.write(buffer); } // 读取响应 buffer.clear(); int bytesRead = socketChannel.read(buffer); if (bytesRead > 0) { buffer.flip(); byte[] response = new byte[bytesRead]; buffer.get(response); System.out.println(\\\"服务器响应: \\\" + new String(response)); } // 关闭通道 socketChannel.close(); } }\"]},\"3118\":{\"h\":\"1.3 Selector选择器\",\"t\":[\"Selector是NIO实现多路复用的核心组件，允许单个线程监控多个Channel的IO事件。通过Selector，一个线程可以高效地管理成百上千个网络连接。\",\"Selector的工作流程：\",\"创建Selector\",\"将Channel注册到Selector，并指定关注的事件\",\"调用select()方法等待事件就绪\",\"处理就绪事件\",\"关注的事件类型：\",\"SelectionKey.OP_READ：可读事件\",\"SelectionKey.OP_WRITE：可写事件\",\"SelectionKey.OP_CONNECT：连接完成事件\",\"SelectionKey.OP_ACCEPT：接受连接事件\",\"Selector服务端示例：\",\"/** * Selector多路复用服务端示例 */ public class SelectorServer { public static void main(String[] args) throws IOException { // 创建Selector Selector selector = Selector.open(); // 创建ServerSocketChannel ServerSocketChannel serverSocketChannel = ServerSocketChannel.open(); serverSocketChannel.bind(new InetSocketAddress(8080)); serverSocketChannel.configureBlocking(false); // 注册接受连接事件 serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT); System.out.println(\\\"服务器启动，监听端口8080...\\\"); while (true) { // 等待事件就绪（阻塞） int readyChannels = selector.select(); if (readyChannels == 0) continue; // 获取就绪事件集合 Set<SelectionKey> selectionKeys = selector.selectedKeys(); Iterator<SelectionKey> iterator = selectionKeys.iterator(); while (iterator.hasNext()) { SelectionKey key = iterator.next(); // 处理接受连接事件 if (key.isAcceptable()) { handleAccept(key); } // 处理可读事件 else if (key.isReadable()) { handleRead(key); } // 移除已处理的事件 iterator.remove(); } } } private static void handleAccept(SelectionKey key) throws IOException { ServerSocketChannel serverSocketChannel = (ServerSocketChannel) key.channel(); SocketChannel socketChannel = serverSocketChannel.accept(); socketChannel.configureBlocking(false); System.out.println(\\\"新客户端连接: \\\" + socketChannel.getRemoteAddress()); // 注册可读事件 socketChannel.register(key.selector(), SelectionKey.OP_READ); } private static void handleRead(SelectionKey key) throws IOException { SocketChannel socketChannel = (SocketChannel) key.channel(); ByteBuffer buffer = ByteBuffer.allocate(1024); int bytesRead = socketChannel.read(buffer); if (bytesRead == -1) { // 客户端关闭连接 socketChannel.close(); System.out.println(\\\"客户端断开连接\\\"); return; } if (bytesRead > 0) { buffer.flip(); byte[] data = new byte[bytesRead]; buffer.get(data); System.out.println(\\\"收到消息: \\\" + new String(data) + \\\" from \\\" + socketChannel.getRemoteAddress()); // 回写数据 buffer.clear(); buffer.put(\\\"已收到: \\\".getBytes()); buffer.put(data); buffer.flip(); socketChannel.write(buffer); } } }\"]},\"3119\":{\"h\":\"2. 异步编程模型\"},\"3120\":{\"h\":\"2.1 Java NIO.2 (AIO)\",\"t\":[\"JDK 7引入了NIO.2，提供了真正的异步IO（AIO）支持，也称为Asynchronous IO。AIO基于回调机制，当IO操作完成后通知应用程序。\",\"AIO的核心类：\",\"AsynchronousSocketChannel：异步Socket通道\",\"AsynchronousServerSocketChannel：异步ServerSocket通道\",\"CompletionHandler：异步操作完成处理器\",\"AIO服务端示例：\",\"/** * AIO异步服务器示例 */ public class AIOServer { public static void main(String[] args) throws IOException { // 创建异步服务器通道 AsynchronousServerSocketChannel serverSocketChannel = AsynchronousServerSocketChannel.open(); serverSocketChannel.bind(new InetSocketAddress(8080)); System.out.println(\\\"AIO服务器启动，监听端口8080...\\\"); // 接受连接（异步操作） serverSocketChannel.accept(null, new CompletionHandler<AsynchronousSocketChannel, Object>() { @Override public void completed(AsynchronousSocketChannel socketChannel, Object attachment) { // 继续接受下一个连接 serverSocketChannel.accept(null, this); try { System.out.println(\\\"新客户端连接: \\\" + socketChannel.getRemoteAddress()); ByteBuffer buffer = ByteBuffer.allocate(1024); // 读取数据（异步操作） socketChannel.read(buffer, buffer, new CompletionHandler<Integer, ByteBuffer>() { @Override public void completed(Integer bytesRead, ByteBuffer buffer) { if (bytesRead == -1) { try { socketChannel.close(); } catch (IOException e) {} return; } buffer.flip(); byte[] data = new byte[bytesRead]; buffer.get(data); System.out.println(\\\"收到消息: \\\" + new String(data)); // 回写数据 buffer.clear(); buffer.put(\\\"AIO服务器已收到: \\\".getBytes()); buffer.put(data); buffer.flip(); socketChannel.write(buffer, buffer, new CompletionHandler<Integer, ByteBuffer>() { @Override public void completed(Integer result, ByteBuffer buffer) { if (buffer.hasRemaining()) { socketChannel.write(buffer, buffer, this); } else { buffer.clear(); socketChannel.read(buffer, buffer, this); } } @Override public void failed(Throwable exc, ByteBuffer buffer) { exc.printStackTrace(); try { socketChannel.close(); } catch (IOException e) {} } }); } @Override public void failed(Throwable exc, ByteBuffer buffer) { exc.printStackTrace(); try { socketChannel.close(); } catch (IOException e) {} } }); } catch (IOException e) { e.printStackTrace(); } } @Override public void failed(Throwable exc, Object attachment) { exc.printStackTrace(); } }); // 防止主线程退出 try { Thread.sleep(Integer.MAX_VALUE); } catch (InterruptedException e) { e.printStackTrace(); } } }\"]},\"3121\":{\"h\":\"2.2 Reactor模式\",\"t\":[\"Reactor模式是NIO编程的经典设计模式，通过事件驱动实现高效的多路复用IO。主要分为三种变体：\",\"单Reactor单线程模型：\",\"一个Reactor线程处理所有事件（接受连接、读写数据）\",\"优点：简单，无多线程竞争\",\"缺点：无法充分利用多核CPU，业务处理耗时会阻塞IO\",\"单Reactor多线程模型：\",\"Reactor线程负责接受连接和IO事件分发\",\"业务处理交给线程池\",\"优点：IO处理与业务分离，充分利用多核\",\"缺点：Reactor线程仍是瓶颈\",\"主从Reactor多线程模型：\",\"主Reactor：负责接受连接\",\"从Reactor：负责IO事件处理\",\"业务处理交给线程池\",\"优点：高并发，高可用，充分利用多核\",\"缺点：实现复杂\",\"主从Reactor模型示意图：\"]},\"3122\":{\"h\":\"3. Netty框架实战\"},\"3123\":{\"h\":\"3.1 Netty简介\",\"t\":[\"Netty是一个高性能、异步事件驱动的NIO框架，简化了TCP、UDP和文件传输的编程。它基于主从Reactor模型，提供了丰富的功能和灵活的扩展机制。\",\"Netty的核心优势：\",\"高性能：基于NIO的多路复用\",\"可靠性：处理半包、粘包等问题\",\"易用性：简化NIO编程复杂度\",\"可扩展性：丰富的ChannelHandler机制\",\"安全性：支持SSL/TLS\"]},\"3124\":{\"h\":\"3.2 Netty核心组件\",\"t\":[\"Channel：通信通道\",\"EventLoop：事件循环，处理IO操作\",\"ChannelHandler：处理IO事件和数据\",\"ChannelPipeline：Handler链，责任链模式\",\"Bootstrap/ServerBootstrap：客户端/服务端启动器\"]},\"3125\":{\"h\":\"3.3 Netty服务端示例\",\"t\":[\"/** * Netty Echo服务器示例 */ public class NettyEchoServer { private final int port; public NettyEchoServer(int port) { this.port = port; } public void start() throws Exception { // 创建主从Reactor线程组 EventLoopGroup bossGroup = new NioEventLoopGroup(1); // 主Reactor线程组 EventLoopGroup workerGroup = new NioEventLoopGroup(); // 从Reactor线程组 try { // 服务器启动器 ServerBootstrap b = new ServerBootstrap(); b.group(bossGroup, workerGroup) .channel(NioServerSocketChannel.class) // 使用NIO通道 .childHandler(new ChannelInitializer<SocketChannel>() { @Override public void initChannel(SocketChannel ch) throws Exception { // 添加Handler到Pipeline ChannelPipeline p = ch.pipeline(); p.addLast(new StringDecoder()); // 字符串解码 p.addLast(new StringEncoder()); // 字符串编码 p.addLast(new EchoServerHandler()); // 自定义业务Handler } }) .option(ChannelOption.SO_BACKLOG, 128) // 连接队列大小 .childOption(ChannelOption.SO_KEEPALIVE, true); // 保持连接 // 绑定端口并启动服务器 ChannelFuture f = b.bind(port).sync(); System.out.println(\\\"Netty Echo服务器启动，监听端口\\\" + port); // 等待服务器关闭 f.channel().closeFuture().sync(); } finally { // 优雅关闭线程组 workerGroup.shutdownGracefully(); bossGroup.shutdownGracefully(); } } // 自定义业务Handler public static class EchoServerHandler extends ChannelInboundHandlerAdapter { @Override public void channelRead(ChannelHandlerContext ctx, Object msg) { String message = (String) msg; System.out.println(\\\"收到客户端消息: \\\" + message); // 回写消息 ctx.writeAndFlush(\\\"服务器已收到: \\\" + message); } @Override public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) { cause.printStackTrace(); ctx.close(); } } public static void main(String[] args) throws Exception { int port = 8080; new NettyEchoServer(port).start(); } }\"]},\"3126\":{\"h\":\"3.4 Netty粘包/拆包解决方案\",\"t\":[\"TCP粘包/拆包是网络编程中的常见问题，Netty提供了多种解码器解决：\",\"LineBasedFrameDecoder：基于换行符 DelimiterBasedFrameDecoder：基于自定义分隔符 FixedLengthFrameDecoder：固定长度 LengthFieldBasedFrameDecoder：基于长度字段\",\"使用LengthFieldBasedFrameDecoder示例：\",\"// 在ChannelPipeline中添加 p.addLast(new LengthFieldBasedFrameDecoder( 1024, // 最大帧长度 0, // 长度字段偏移量 4, // 长度字段长度 0, // 长度字段调整值 4)); // 跳过的字节数 p.addLast(new LengthFieldPrepender(4)); // 发送时添加长度字段\"]},\"3127\":{\"h\":\"知识扩展\"},\"3128\":{\"h\":\"设计思想\",\"t\":[\"NIO与异步编程体现的核心设计思想：\",\"事件驱动：基于事件而非轮询，减少资源浪费\",\"多路复用：单线程管理多连接，提高系统吞吐量\",\"零拷贝：Netty的FileRegion实现零拷贝传输\",\"责任链模式：ChannelPipeline中的Handler链\",\"池化思想：EventLoop线程池、对象池减少创建开销\",\"异步回调：非阻塞IO操作，提高CPU利用率\"]},\"3129\":{\"h\":\"避坑指南\",\"t\":[\"NIO空轮询问题：JDK NIO存在Selector.select()无限返回0的bug，Netty通过设置超时时间和自旋次数解决\",\"Buffer泄漏：确保在finally块中释放DirectByteBuffer\",\"EventLoop线程安全：不要在EventLoop线程中执行耗时操作\",\"Netty线程模型：理解IO线程和业务线程的分离\",\"内存管理：合理设置接收缓冲区大小，避免OOM\",\"半包处理：务必使用Netty提供的解码器处理粘包/拆包\",\"连接超时：设置合理的连接超时和读写超时\"]},\"3130\":{\"h\":\"深度思考题\",\"t\":[\"思考题1：Netty的零拷贝机制是如何实现的？有哪些应用场景？\",\"思考题回答： Netty的零拷贝主要通过以下方式实现：\",\"FileRegion：使用FileChannel.transferTo()实现文件传输，避免内核态到用户态的数据拷贝\",\"CompositeByteBuf：组合多个ByteBuf而不发生拷贝\",\"Unpooled.wrappedBuffer()：包装字节数组而不拷贝\",\"Slice：创建ByteBuf的视图，共享底层数据\",\"应用场景：\",\"文件服务器：高效传输大文件\",\"代理服务器：减少数据中转开销\",\"大数据传输：如日志收集、视频流传输\",\"思考题2：比较NIO和AIO的适用场景，为什么Netty选择基于NIO而非AIO实现？\",\"思考题回答： NIO与AIO适用场景对比：\",\"NIO：适用于连接数多但数据量小的场景（如聊天服务器），CPU密集型应用\",\"AIO：适用于连接数少但数据量大的场景（如文件传输），IO密集型应用\",\"Netty选择NIO的原因：\",\"跨平台一致性：Windows的IOCP和Linux的epoll实现差异大\",\"性能考量：在高并发场景下，NIO的Reactor模型性能优于AIO\",\"控制力：NIO给予开发者更多底层控制\",\"成熟度：NIO经过长期验证，稳定性更高\",\"编程模型：Netty的事件驱动模型与NIO更契合\"]},\"3131\":{\"h\":\"基础-注解基础\"},\"3132\":{\"h\":\"概述\",\"t\":[\"注解（Annotation）是JDK5引入的一种元数据机制，它可以在代码中添加标记，用于编译时检查、运行时处理或生成文档。注解不会直接影响代码的执行，但能被编译器或工具读取并处理，是框架开发和代码分析的重要技术。\"]},\"3133\":{\"h\":\"知识要点\"},\"3134\":{\"h\":\"1. 注解的定义与使用\",\"t\":[\"注解通过@interface关键字定义，本质是一种特殊的接口。使用时在目标元素前添加@注解名即可。\",\"// 定义一个简单的注解 public @interface MyAnnotation { // 注解元素（无参数方法形式） String value() default \\\"default value\\\"; int count() default 0; } // 使用注解 @MyAnnotation(value = \\\"test\\\", count = 1) public class AnnotationDemo { @MyAnnotation private String name; @MyAnnotation(count = 2) public void doSomething() { // 方法体 } }\"]},\"3135\":{\"h\":\"2. 元注解\",\"t\":[\"元注解是用于修饰注解的注解，JDK提供了4个标准元注解：\",\"元注解\",\"作用\",\"可选参数\",\"@Target\",\"指定注解可修饰的元素类型\",\"TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE, ANNOTATION_TYPE, PACKAGE, TYPE_PARAMETER, TYPE_USE\",\"@Retention\",\"指定注解的保留策略\",\"SOURCE(源码), CLASS(字节码), RUNTIME(运行时)\",\"@Documented\",\"指定注解是否包含在Javadoc中\",\"-\",\"@Inherited\",\"指定注解是否可被继承\",\"-\",\"import java.lang.annotation.*; @Target({ElementType.TYPE, ElementType.METHOD}) @Retention(RetentionPolicy.RUNTIME) @Documented @Inherited public @interface MyAnnotation { String value(); }\"]},\"3136\":{\"h\":\"3. 内置注解\",\"t\":[\"JDK提供的常用内置注解：\",\"@Override：标记方法重写父类方法，编译器会检查方法签名是否正确\",\"@Deprecated：标记已过时的元素，编译器会发出警告\",\"@SuppressWarnings：抑制编译器警告\",\"@SafeVarargs：标记构造函数或方法是类型安全的（JDK7+）\",\"@FunctionalInterface：标记函数式接口（JDK8+）\",\"public class BuiltInAnnotations { // 重写父类方法 @Override public String toString() { return super.toString(); } // 标记过时方法 @Deprecated public void oldMethod() { // 过时实现 } // 抑制未使用变量警告 @SuppressWarnings(\\\"unused\\\") public void suppressWarningDemo() { int unusedVariable = 0; } // 函数式接口 @FunctionalInterface public interface MyFunction { void apply(); } }\"]},\"3137\":{\"h\":\"4. 自定义注解与解析\",\"t\":[\"自定义注解通常需要结合反射在运行时解析：\",\"import java.lang.reflect.Method; // 自定义注解 @Target(ElementType.METHOD) @Retention(RetentionPolicy.RUNTIME) public @interface LogAnnotation { String action(); boolean logParameters() default true; } // 使用注解 public class Service { @LogAnnotation(action = \\\"addUser\\\", logParameters = true) public void addUser(String name, int age) { // 业务逻辑 } } // 解析注解 public class AnnotationParser { public static void parse(Object service) { Class<?> clazz = service.getClass(); for (Method method : clazz.getDeclaredMethods()) { if (method.isAnnotationPresent(LogAnnotation.class)) { LogAnnotation annotation = method.getAnnotation(LogAnnotation.class); System.out.println(\\\"Action: \\\" + annotation.action()); System.out.println(\\\"Log parameters: \\\" + annotation.logParameters()); // 可以在这里实现日志记录逻辑 } } } public static void main(String[] args) { parse(new Service()); } }\"]},\"3138\":{\"h\":\"知识扩展\"},\"3139\":{\"h\":\"设计思想\",\"t\":[\"注解体现了Java的元数据编程思想，通过将配置信息与代码分离，提高了代码的灵活性和可维护性。框架如Spring大量使用注解简化配置，实现了\\\"约定优于配置\\\"的开发模式。\"]},\"3140\":{\"h\":\"避坑指南\",\"t\":[\"保留策略选择：如果需要在运行时解析注解，必须使用@Retention(RetentionPolicy.RUNTIME)\",\"注解元素默认值：注解元素必须提供默认值，除非使用时必须显式指定\",\"数组类型处理：当注解元素是数组且只有一个值时，可以省略大括号\",\"注解继承：@Inherited仅对类注解有效，方法和字段注解不会被继承\"]},\"3141\":{\"h\":\"深度思考题\",\"t\":[\"思考题：如何实现一个简单的ORM框架，使用注解标记实体类与数据库表的映射关系？\",\"思考题回答：可以定义@Table注解标记表名，@Column注解标记字段名，然后通过反射读取注解信息，生成SQL语句。例如：\",\"@Target(ElementType.TYPE) @Retention(RetentionPolicy.RUNTIME) public @interface Table { String name(); } @Target(ElementType.FIELD) @Retention(RetentionPolicy.RUNTIME) public @interface Column { String name(); boolean primaryKey() default false; } @Table(name = \\\"user\\\") public class User { @Column(name = \\\"id\\\", primaryKey = true) private int id; @Column(name = \\\"username\\\") private String username; // 省略getter和setter }\",\"通过反射解析这些注解，就能动态生成CRUD操作的SQL语句，实现简单的ORM功能。\"]},\"3142\":{\"h\":\"理解-深入理解注解\"},\"3143\":{\"h\":\"概述\",\"t\":[\"注解本质是一种特殊的接口，它通过JVM的支持实现元数据的存储与访问。深入理解注解需要掌握其底层实现原理、编译期处理流程和运行时反射解析机制。注解在框架开发中扮演关键角色，如Spring的依赖注入、MyBatis的SQL映射等核心功能都基于注解实现。\"]},\"3144\":{\"h\":\"知识要点\"},\"3145\":{\"h\":\"1. 注解的底层实现原理\",\"t\":[\"注解在编译后会生成class文件，本质是继承java.lang.annotation.Annotation接口的特殊接口。JVM对注解提供特殊支持，允许通过反射API访问注解信息。\",\"// 反编译注解类会得到类似以下结构 public interface MyAnnotation extends Annotation { String value(); int count() default 0; }\",\"注解的属性在编译时会被转换为接口方法，默认值存储在AnnotationDefault属性中。JVM在加载类时会为注解创建动态代理实例，这就是为什么通过反射获取的注解是代理对象。\"]},\"3146\":{\"h\":\"2. 注解的编译期处理\",\"t\":[\"注解在编译期有两种处理方式：源码注解处理器和字节码修改。\"]},\"3147\":{\"h\":\"2.1 源码注解处理器（APT）\",\"t\":[\"JDK6引入的注解处理工具（APT）允许在编译期扫描和处理注解，生成新的Java文件。这是Lombok、Dagger等框架的核心实现方式。\",\"import javax.annotation.processing.*; import javax.lang.model.SourceVersion; import javax.lang.model.element.TypeElement; import java.util.Set; @SupportedAnnotationTypes(\\\"com.example.MyAnnotation\\\") @SupportedSourceVersion(SourceVersion.RELEASE_8) public class MyAnnotationProcessor extends AbstractProcessor { @Override public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) { // 处理注解逻辑 for (TypeElement annotation : annotations) { roundEnv.getElementsAnnotatedWith(annotation).forEach(element -> { // 生成代码或进行验证 System.out.println(\\\"Processing element: \\\" + element.getSimpleName()); }); } return true; } }\",\"要使用APT，需要在Maven中配置processor：\",\"<build> <plugins> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-compiler-plugin</artifactId> <version>3.8.1</version> <configuration> <annotationProcessors> <annotationProcessor>com.example.MyAnnotationProcessor</annotationProcessor> </annotationProcessors> </configuration> </plugin> </plugins> </build>\"]},\"3148\":{\"h\":\"2.2 字节码级别处理\",\"t\":[\"编译后注解信息存储在class文件的属性表中，可通过ASM等字节码操作库在编译后修改class文件。\"]},\"3149\":{\"h\":\"3. 注解的运行时解析机制\",\"t\":[\"运行时保留的注解（@Retention(RetentionPolicy.RUNTIME)）可通过反射API获取：\",\"import java.lang.reflect.AnnotatedElement; import java.lang.reflect.Method; public class AnnotationRuntimeParser { public static void parse(Object obj) { Class<?> clazz = obj.getClass(); // 获取类上的注解 if (clazz.isAnnotationPresent(MyAnnotation.class)) { MyAnnotation annotation = clazz.getAnnotation(MyAnnotation.class); System.out.println(\\\"Class annotation value: \\\" + annotation.value()); } // 获取方法上的注解 for (Method method : clazz.getDeclaredMethods()) { if (method.isAnnotationPresent(MyAnnotation.class)) { MyAnnotation annotation = method.getAnnotation(MyAnnotation.class); System.out.println(\\\"Method annotation value: \\\" + annotation.value() + \\\", count: \\\" + annotation.count()); } } } }\",\"JVM在运行时为注解创建动态代理对象，当调用注解的方法时，代理对象会从class文件的属性表中读取对应的值。\"]},\"3150\":{\"h\":\"4. 注解与反射的性能影响\",\"t\":[\"反射解析注解会带来性能开销，主要体现在：\",\"类加载时注解信息的解析\",\"反射调用的性能损耗\",\"大量注解处理导致的CPU占用\",\"优化方案：\",\"// 缓存注解解析结果 public class AnnotationCache { private static final Map<Class<?>, MyAnnotation> annotationCache = new ConcurrentHashMap<>(); public static MyAnnotation getAnnotation(Class<?> clazz) { return annotationCache.computeIfAbsent(clazz, c -> { // 反射解析注解的逻辑 return c.getAnnotation(MyAnnotation.class); }); } }\"]},\"3151\":{\"h\":\"知识扩展\"},\"3152\":{\"h\":\"设计思想\",\"t\":[\"注解设计体现了Java的\\\"元数据驱动开发\\\"思想，通过将配置信息编码为注解，实现了：\",\"关注点分离：业务逻辑与横切关注点（如日志、事务）分离\",\"声明式编程：通过注解声明意图而非实现细节\",\"代码生成：基于注解自动生成重复代码，减少样板代码\"]},\"3153\":{\"h\":\"避坑指南\",\"t\":[\"注解继承陷阱：@Inherited仅对类注解有效，方法和字段注解不会被子类继承\",\"保留策略错误：需要运行时解析的注解必须使用RetentionPolicy.RUNTIME\",\"APT处理器注册：自定义注解处理器需要正确配置，否则编译时不会执行\",\"重复注解处理：JDK8之前不支持重复注解，需使用容器注解包装\",\"性能问题：避免在高频调用的代码中使用反射解析注解\"]},\"3154\":{\"h\":\"深度思考题\",\"t\":[\"思考题：如何实现一个基于注解的权限验证框架？\",\"思考题回答：可以设计@RequiresPermission注解标记需要权限的方法，结合AOP在方法执行前检查权限：\",\"// 定义权限注解 @Target(ElementType.METHOD) @Retention(RetentionPolicy.RUNTIME) public @interface RequiresPermission { String[] value(); boolean allMatch() default true; } // AOP切面实现权限检查 @Aspect @Component public class PermissionAspect { @Autowired private PermissionService permissionService; @Around(\\\"@annotation(requiresPermission)\\\") public Object checkPermission(ProceedingJoinPoint joinPoint, RequiresPermission requiresPermission) throws Throwable { String[] permissions = requiresPermission.value(); boolean allMatch = requiresPermission.allMatch(); if (allMatch) { // 检查是否拥有所有权限 for (String permission : permissions) { if (!permissionService.hasPermission(permission)) { throw new AccessDeniedException(\\\"No permission: \\\" + permission); } } } else { // 检查是否拥有任一权限 boolean hasAnyPermission = false; for (String permission : permissions) { if (permissionService.hasPermission(permission)) { hasAnyPermission = true; break; } } if (!hasAnyPermission) { throw new AccessDeniedException(\\\"No required permission\\\"); } } return joinPoint.proceed(); } } // 使用示例 @Service public class UserService { @RequiresPermission(\\\"user:read\\\") public User getUser(Long id) { // 业务逻辑 } @RequiresPermission(value = {\\\"user:write\\\", \\\"admin\\\"}, allMatch = false) public void updateUser(User user) { // 业务逻辑 } }\",\"这种实现方式将权限检查逻辑与业务逻辑分离，通过注解声明权限需求，提高了代码的可读性和可维护性。\"]},\"3155\":{\"h\":\"进阶-注解在实践中的应用\"},\"3156\":{\"h\":\"概述\",\"t\":[\"注解在现代Java开发中应用广泛，从框架配置到代码生成，从性能优化到业务逻辑解耦，注解技术极大提升了开发效率和代码质量。本章将深入探讨注解在实际项目中的典型应用场景，包括Spring生态中的注解实践、自定义注解处理器开发、ORM框架中的注解映射以及注解驱动的代码生成技术。\"]},\"3157\":{\"h\":\"知识要点\"},\"3158\":{\"h\":\"1. Spring生态中的注解应用\",\"t\":[\"Spring框架广泛使用注解简化配置，实现依赖注入、事务管理、AOP等核心功能。\"]},\"3159\":{\"h\":\"1.1 依赖注入与组件扫描\",\"t\":[\"import org.springframework.stereotype.Component; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; // 组件注册 @Component public class UserService { // 属性注入 @Autowired private UserRepository userRepository; // 构造函数注入（推荐） private final OrderService orderService; @Autowired public UserService(OrderService orderService) { this.orderService = orderService; } // 方法注入 @Autowired public void setLogService(LogService logService) { this.logService = logService; } // 外部配置注入 @Value(\\\"${app.user.default-role}\\\") private String defaultRole; }\"]},\"3160\":{\"h\":\"1.2 事务管理与AOP\",\"t\":[\"import org.springframework.transaction.annotation.Transactional; import org.springframework.stereotype.Service; @Service public class OrderService { // 声明式事务 @Transactional(rollbackFor = Exception.class) public void createOrder(Order order) { // 业务逻辑 orderRepository.save(order); inventoryService.reduceStock(order.getItems()); } // AOP切面注解 @LogExecutionTime public List<Order> getUserOrders(Long userId) { return orderRepository.findByUserId(userId); } }\"]},\"3161\":{\"h\":\"2. 自定义注解处理器开发\",\"t\":[\"通过注解处理器在编译期生成代码，是Lombok、MapStruct等工具的核心技术。\"]},\"3162\":{\"h\":\"2.1 实现一个简单的Builder模式生成器\",\"t\":[\"// 自定义Builder注解 @Target(ElementType.TYPE) @Retention(RetentionPolicy.SOURCE) public @interface Builder { } // 注解处理器 @SupportedAnnotationTypes(\\\"com.example.Builder\\\") @SupportedSourceVersion(SourceVersion.RELEASE_8) public class BuilderProcessor extends AbstractProcessor { @Override public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) { for (TypeElement annotation : annotations) { for (Element element : roundEnv.getElementsAnnotatedWith(annotation)) { if (element.getKind() == ElementKind.CLASS) { generateBuilderCode((TypeElement) element); } } } return true; } private void generateBuilderCode(TypeElement classElement) { // 生成Builder类的代码 String className = classElement.getSimpleName().toString(); String packageName = processingEnv.getElementUtils().getPackageOf(classElement).getQualifiedName().toString(); String builderClassName = className + \\\"Builder\\\"; // 创建Java文件 JavaFileObject jfo = processingEnv.getFiler().createSourceFile(packageName + \\\".\\\" + builderClassName); try (Writer writer = jfo.openWriter()) { // 写入Builder类代码 writer.write(generateBuilderCodeContent(packageName, className, builderClassName, classElement)); } } // 生成Builder类内容的具体实现 private String generateBuilderCodeContent(String packageName, String className, String builderClassName, TypeElement classElement) { // 实现代码生成逻辑 // ... } }\",\"使用示例：\",\"@Builder public class User { private String name; private int age; private String email; } // 生成的Builder类可用于链式调用 User user = new UserBuilder() .name(\\\"Alice\\\") .age(30) .email(\\\"alice@example.com\\\") .build();\"]},\"3163\":{\"h\":\"3. ORM框架中的注解映射\",\"t\":[\"MyBatis、Hibernate等ORM框架使用注解实现Java对象与数据库表的映射。\"]},\"3164\":{\"h\":\"3.1 MyBatis注解配置\",\"t\":[\"import org.apache.ibatis.annotations.*; import java.util.List; @Mapper public interface UserMapper { @Select(\\\"SELECT * FROM user WHERE id = #{id}\\\") @Results({ @Result(property = \\\"id\\\", column = \\\"user_id\\\"), @Result(property = \\\"userName\\\", column = \\\"user_name\\\") }) User selectById(Long id); @Insert(\\\"INSERT INTO user(name, age) VALUES(#{name}, #{age})\\\") @Options(useGeneratedKeys = true, keyProperty = \\\"id\\\") int insert(User user); @Update(\\\"UPDATE user SET name = #{name}, age = #{age} WHERE id = #{id}\\\") int update(User user); @Delete(\\\"DELETE FROM user WHERE id = #{id}\\\") int delete(Long id); }\"]},\"3165\":{\"h\":\"3.2 JPA注解映射\",\"t\":[\"import javax.persistence.*; import java.util.Date; @Entity @Table(name = \\\"t_user\\\") public class User { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private Long id; @Column(name = \\\"user_name\\\", length = 50, nullable = false) private String userName; @Column(precision = 3, scale = 0) private Integer age; @Temporal(TemporalType.TIMESTAMP) @Column(name = \\\"create_time\\\") private Date createTime; @Transient private String tempData; // 不映射到数据库字段 // 省略getter和setter }\"]},\"3166\":{\"h\":\"4. 注解驱动的测试框架\",\"t\":[\"JUnit和Mockito等测试框架大量使用注解简化测试代码。\",\"import org.junit.jupiter.api.Test; import org.junit.jupiter.api.BeforeEach; import org.junit.jupiter.api.AfterEach; import org.junit.jupiter.api.extension.ExtendWith; import org.mockito.InjectMocks; import org.mockito.Mock; import org.mockito.junit.jupiter.MockitoExtension; import static org.junit.jupiter.api.Assertions.*; import static org.mockito.Mockito.*; @ExtendWith(MockitoExtension.class) public class UserServiceTest { @Mock private UserRepository userRepository; @InjectMocks private UserService userService; private User testUser; @BeforeEach void setUp() { testUser = new User(1L, \\\"Test User\\\", 25); } @AfterEach void tearDown() { // 清理资源 } @Test void getUserById_ShouldReturnUser() { // 模拟依赖行为 when(userRepository.findById(1L)).thenReturn(testUser); // 执行测试 User result = userService.getUserById(1L); // 验证结果 assertNotNull(result); assertEquals(\\\"Test User\\\", result.getName()); verify(userRepository).findById(1L); } }\"]},\"3167\":{\"h\":\"知识扩展\"},\"3168\":{\"h\":\"设计思想\",\"t\":[\"注解实践体现了多种设计模式和编程思想：\",\"策略模式：通过注解标记不同策略实现，动态选择执行逻辑\",\"模板方法：框架定义流程模板，通过注解标记扩展点\",\"元编程：通过注解实现代码自我描述和自我处理\",\"约定优于配置：框架注解默认值体现约定，减少显式配置\"]},\"3169\":{\"h\":\"避坑指南\",\"t\":[\"注解滥用：避免过度使用注解导致代码可读性下降，简单逻辑优先使用直接编码\",\"运行时性能：反射解析注解有性能开销，高频调用场景需缓存解析结果\",\"版本兼容性：注意不同JDK版本对注解特性的支持差异\",\"文档缺失：为自定义注解编写清晰文档，说明使用场景和注意事项\",\"测试覆盖：注解处理逻辑需要充分测试，特别是编译期注解处理器\"]},\"3170\":{\"h\":\"深度思考题\",\"t\":[\"思考题：如何设计一个基于注解的缓存框架，实现方法级别的缓存功能？\",\"思考题回答：可以设计@Cacheable、@CacheEvict等注解，结合AOP实现方法结果缓存：\",\"// 缓存注解定义 @Target(ElementType.METHOD) @Retention(RetentionPolicy.RUNTIME) public @interface Cacheable { String key(); long expire() default 3600; } @Target(ElementType.METHOD) @Retention(RetentionPolicy.RUNTIME) public @interface CacheEvict { String key(); boolean allEntries() default false; } // AOP实现缓存逻辑 @Aspect @Component public class CacheAspect { private final CacheManager cacheManager; public CacheAspect(CacheManager cacheManager) { this.cacheManager = cacheManager; } @Around(\\\"@annotation(cacheable)\\\") public Object handleCacheable(ProceedingJoinPoint joinPoint, Cacheable cacheable) throws Throwable { String key = generateKey(cacheable.key(), joinPoint.getArgs()); Cache cache = cacheManager.getCache(\\\"default\\\"); Object value = cache.get(key); if (value != null) { return value; } value = joinPoint.proceed(); cache.put(key, value, cacheable.expire()); return value; } @Around(\\\"@annotation(cacheEvict)\\\") public Object handleCacheEvict(ProceedingJoinPoint joinPoint, CacheEvict cacheEvict) throws Throwable { Object result = joinPoint.proceed(); String key = generateKey(cacheEvict.key(), joinPoint.getArgs()); Cache cache = cacheManager.getCache(\\\"default\\\"); if (cacheEvict.allEntries()) { cache.clear(); } else { cache.remove(key); } return result; } private String generateKey(String keyPattern, Object[] args) { // 实现缓存键生成逻辑 // ... } } // 使用示例 @Service public class ProductService { @Cacheable(key = \\\"#id\\\", expire = 1800) public Product getProduct(Long id) { // 从数据库获取商品信息 return productRepository.findById(id); } @CacheEvict(key = \\\"#product.id\\\") public void updateProduct(Product product) { productRepository.update(product); } @CacheEvict(allEntries = true) public void clearAllCache() { // 仅用于触发缓存清除 } }\",\"这种实现可以灵活地为方法添加缓存功能，减少数据库访问，提高系统性能。实际应用中还需要考虑缓存一致性、并发控制和异常处理等问题。\"]},\"3171\":{\"h\":\"基础-SIP基础\"},\"3172\":{\"h\":\"概述\",\"t\":[\"SIP（Session Initiation Protocol，会话初始协议）是一种用于建立、修改和终止多媒体会话的应用层协议，广泛应用于VoIP、视频会议、即时通讯等领域。它采用客户端-服务器模型，通过文本形式的消息进行通信，具有灵活、可扩展和与现有网络协议兼容的特点。本章将从SIP的基本概念、协议结构、核心组件和会话流程等方面，系统介绍SIP机制的基础知识。\"]},\"3173\":{\"h\":\"知识要点\"},\"3174\":{\"h\":\"1. SIP基本概念\"},\"3175\":{\"h\":\"1.1 SIP的定义与作用\",\"t\":[\"SIP是由IETF定义的一种信令协议，用于在IP网络中建立、修改和终止多媒体会话。它不负责传输媒体数据，而是通过信令控制会话的建立和管理，媒体数据通常通过RTP/RTCP协议传输。\",\"SIP的主要作用包括：\",\"用户定位：确定通信对方的位置\",\"会话建立：协商会话参数，如媒体类型、编码格式等\",\"会话修改：更改会话参数，如增加媒体流、调整带宽等\",\"会话终止：结束已建立的会话\"]},\"3176\":{\"h\":\"1.2 SIP与相关协议的关系\",\"t\":[\"SDP（Session Description Protocol）：SIP消息体中携带SDP信息，用于描述会话的媒体类型、格式、传输地址等\",\"RTP/RTCP：实时传输协议/实时传输控制协议，用于实际媒体数据的传输和质量控制\",\"HTTP：SIP的设计借鉴了HTTP的请求-响应模型和文本格式\",\"TCP/UDP：SIP消息通常通过UDP传输，也可使用TCP保证可靠性\"]},\"3177\":{\"h\":\"1.3 SIP URL格式\",\"t\":[\"SIP用户通过SIP URL标识，格式如下：\",\"sip:user@host[:port]\",\"user：用户名，可以是电话号码或邮箱地址\",\"host：域名或IP地址\",\"port：可选，SIP服务器端口，默认5060\",\"示例：\",\"sip:alice@example.com\",\"sip:10086@192.168.1.1:5061\"]},\"3178\":{\"h\":\"2. SIP协议结构\"},\"3179\":{\"h\":\"2.1 SIP消息类型\",\"t\":[\"SIP消息分为两类：请求消息（Request）和响应消息（Response）。\",\"请求消息：客户端向服务器发送的消息，常用方法包括：\",\"方法\",\"作用\",\"REGISTER\",\"用户注册，将用户地址与实际位置绑定\",\"INVITE\",\"发起会话请求，邀请对方加入会话\",\"ACK\",\"确认收到对方的最终响应\",\"BYE\",\"终止会话\",\"CANCEL\",\"取消未完成的请求\",\"OPTIONS\",\"查询服务器能力\",\"响应消息：服务器对请求的回复，包含状态码：\",\"1xx：临时响应，表示请求正在处理\",\"2xx：成功响应，表示请求已被接受\",\"3xx：重定向响应，指示客户端需要进一步操作\",\"4xx：客户端错误\",\"5xx：服务器错误\",\"6xx：全局错误\"]},\"3180\":{\"h\":\"2.2 SIP消息格式\",\"t\":[\"SIP消息由起始行、头域、空行和消息体组成：\",\"起始行 头域1: 值1 头域2: 值2 ... 消息体（可选）\",\"示例：INVITE请求消息\",\"INVITE sip:bob@example.com SIP/2.0 Via: SIP/2.0/UDP alicepc:5060;branch=z9hG4bK776asdhds Max-Forwards: 70 To: Bob <sip:bob@example.com> From: Alice <sip:alice@example.com>;tag=1928301774 Call-ID: a84b4c76e66710 CSeq: 314159 INVITE Contact: <sip:alice@alicepc:5060> Content-Type: application/sdp Content-Length: 142 v=0 o=alice 2890844526 2890844526 IN IP4 alicepc s=- c=IN IP4 alicepc t=0 0 m=audio 49172 RTP/AVP 0 a=rtpmap:0 PCMU/8000\",\"关键头域说明：\",\"Via：记录消息传输路径，用于响应消息的返回\",\"To：请求的接收者\",\"From：请求的发送者，包含一个唯一标签\",\"Call-ID：标识一个会话，全局唯一\",\"CSeq：命令序列，包含序列号和方法，用于排序请求\",\"Contact：提供发送者的实际联系地址\"]},\"3181\":{\"h\":\"3. SIP核心组件\"},\"3182\":{\"h\":\"3.1 用户代理（UA）\",\"t\":[\"用户代理是SIP通信的端点，分为用户代理客户端（UAC）和用户代理服务器（UAS）：\",\"UAC：发起SIP请求的客户端（如Alice的软电话）\",\"UAS：接收并处理SIP请求的服务器（如Bob的软电话）\",\"一个UA可以同时扮演UAC和UAS的角色，例如在通话过程中，发起方的UA既是INVITE请求的UAC，也是BYE请求的UAS。\"]},\"3183\":{\"h\":\"3.2 代理服务器（Proxy Server）\",\"t\":[\"代理服务器接收SIP请求并转发给其他服务器，相当于中间路由器，主要功能包括：\",\"请求路由：根据目标地址查找下一跳服务器\",\"认证授权：验证用户身份，控制访问权限\",\"负载均衡：将请求分发到不同的服务器\",\"代理服务器分为有状态和无状态两种：\",\"有状态代理：保存请求和响应的状态信息，支持事务处理\",\"无状态代理：仅转发消息，不保存状态，处理效率高\"]},\"3184\":{\"h\":\"3.3 注册服务器（Registrar）\",\"t\":[\"注册服务器接收并处理REGISTER请求，维护用户地址与实际位置的映射关系（位置服务数据库）。当用户移动到新的位置时，通过REGISTER消息更新注册信息。\"]},\"3185\":{\"h\":\"3.4 重定向服务器（Redirect Server）\",\"t\":[\"重定向服务器接收请求后，返回3xx响应，指示客户端直接联系其他服务器。它不转发请求，仅提供路由信息，减轻网络负担。\"]},\"3186\":{\"h\":\"4. SIP会话流程\"},\"3187\":{\"h\":\"4.1 注册流程\",\"t\":[\"用户需要先向注册服务器注册，将其SIP URL与实际网络位置绑定：\",\"UA发送REGISTER请求到注册服务器\",\"注册服务器验证用户身份\",\"注册服务器更新位置服务数据库\",\"返回200 OK响应\"]},\"3188\":{\"h\":\"4.2 会话建立流程（INVITE流程）\",\"t\":[\"以Alice呼叫Bob为例，SIP会话建立流程如下：\",\"Alice的UA（UAC）发送INVITE请求\",\"代理服务器转发请求\",\"Bob的UA（UAS）返回180 Ringing（振铃）\",\"Bob接听后，返回200 OK\",\"Alice发送ACK确认\",\"开始媒体传输（RTP）\"]},\"3189\":{\"h\":\"4.3 会话终止流程\",\"t\":[\"通话结束时，一方发送BYE请求终止会话：\",\"Alice发送BYE请求\",\"Bob返回200 OK响应\",\"会话终止，媒体流停止\"]},\"3190\":{\"h\":\"5. Java中的SIP编程基础\",\"t\":[\"Java中可以通过JAIN-SIP（Java API for Integrated Networks - SIP）规范实现SIP协议通信。以下是一个简单的SIP客户端示例，用于发送INVITE请求：\",\"import javax.sip.*; import javax.sip.address.*; import javax.sip.header.*; import javax.sip.message.*; import java.util.*; public class SipClient implements SipListener { private SipFactory sipFactory; private SipStack sipStack; private SipProvider sipProvider; private AddressFactory addressFactory; private MessageFactory messageFactory; private HeaderFactory headerFactory; private ListeningPoint listeningPoint; public SipClient() throws Exception { // 初始化SIP工厂 sipFactory = SipFactory.getInstance(); sipFactory.setPathName(\\\"gov.nist\\\"); // 配置SIP栈 Properties properties = new Properties(); properties.setProperty(\\\"javax.sip.STACK_NAME\\\", \\\"SipClientStack\\\"); sipStack = sipFactory.createSipStack(properties); // 创建地址、消息和头工厂 addressFactory = sipFactory.createAddressFactory(); messageFactory = sipFactory.createMessageFactory(); headerFactory = sipFactory.createHeaderFactory(); // 创建监听点（UDP，端口5060） listeningPoint = sipStack.createListeningPoint(\\\"127.0.0.1\\\", 5060, \\\"udp\\\"); // 创建SIP提供者并注册监听器 sipProvider = sipStack.createSipProvider(listeningPoint); sipProvider.addSipListener(this); } /** * 发送INVITE请求 * @param toUri 目标SIP URI * @param fromUri 源SIP URI * @param contactUri 本地联系地址 */ public void sendInvite(String toUri, String fromUri, String contactUri) throws Exception { // 创建请求行 URI requestUri = addressFactory.createURI(toUri); SipURI sipRequestUri = (SipURI) requestUri; // 创建From头 Address fromAddress = addressFactory.createAddress(fromUri); FromHeader fromHeader = headerFactory.createFromHeader(fromAddress, \\\"client-tag-12345\\\"); // 创建To头 Address toAddress = addressFactory.createAddress(toUri); ToHeader toHeader = headerFactory.createToHeader(toAddress, null); // 创建Call-ID头 CallIdHeader callIdHeader = sipProvider.getNewCallId(); // 创建CSeq头 CSeqHeader cSeqHeader = headerFactory.createCSeqHeader(1L, Request.INVITE); // 创建Via头 ViaHeader viaHeader = headerFactory.createViaHeader( \\\"127.0.0.1\\\", 5060, \\\"udp\\\", \\\"branch-z9hG4bK-12345\\\"); List<ViaHeader> viaHeaders = new ArrayList<>(); viaHeaders.add(viaHeader); // 创建Max-Forwards头 MaxForwardsHeader maxForwardsHeader = headerFactory.createMaxForwardsHeader(70); // 创建请求消息 Request inviteRequest = messageFactory.createRequest( sipRequestUri, Request.INVITE, callIdHeader, cSeqHeader, fromHeader, toHeader, viaHeaders, maxForwardsHeader); // 添加Contact头 Address contactAddress = addressFactory.createAddress(contactUri); ContactHeader contactHeader = headerFactory.createContactHeader(contactAddress); inviteRequest.addHeader(contactHeader); // 添加Content-Type头（SDP） ContentTypeHeader contentTypeHeader = headerFactory.createContentTypeHeader( \\\"application\\\", \\\"sdp\\\"); inviteRequest.setContent( createSdpContent(), contentTypeHeader); // 发送请求 ClientTransaction clientTransaction = sipProvider.getNewClientTransaction(inviteRequest); clientTransaction.sendRequest(); System.out.println(\\\"INVITE请求已发送\\\"); } /** * 创建SDP内容 */ private String createSdpContent() { StringBuilder sdp = new StringBuilder(); sdp.append(\\\"v=0\\\\n\\\"); sdp.append(\\\"o=client 12345 67890 IN IP4 127.0.0.1\\\\n\\\"); sdp.append(\\\"s=SIP Call\\\\n\\\"); sdp.append(\\\"c=IN IP4 127.0.0.1\\\\n\\\"); sdp.append(\\\"t=0 0\\\\n\\\"); sdp.append(\\\"m=audio 49172 RTP/AVP 0\\\\n\\\"); sdp.append(\\\"a=rtpmap:0 PCMU/8000\\\\n\\\"); return sdp.toString(); } // SIP事件处理方法（省略实现） @Override public void processRequest(RequestEvent requestEvent) {} @Override public void processResponse(ResponseEvent responseEvent) { Response response = responseEvent.getResponse(); System.out.println(\\\"收到响应: \\\" + response.getStatusCode()); } @Override public void processTimeout(TimeoutEvent timeoutEvent) {} @Override public void processIOException(IOExceptionEvent exceptionEvent) {} @Override public void processTransactionTerminated(TransactionTerminatedEvent transactionTerminatedEvent) {} @Override public void processDialogTerminated(DialogTerminatedEvent dialogTerminatedEvent) {} public static void main(String[] args) throws Exception { SipClient client = new SipClient(); client.sendInvite( \\\"sip:bob@127.0.0.1:5060\\\", \\\"sip:alice@127.0.0.1:5060\\\", \\\"sip:alice@127.0.0.1:5060\\\"); } }\",\"代码说明：\",\"使用JAIN-SIP API创建SIP栈、监听点和消息工厂\",\"构建INVITE请求，包含必要的头域和SDP媒体描述\",\"通过ClientTransaction发送请求\",\"实现SipListener接口处理响应和事件\"]},\"3191\":{\"h\":\"知识扩展\"},\"3192\":{\"h\":\"设计思想\",\"t\":[\"SIP的设计遵循以下核心思想：\",\"简洁性：仅关注会话信令控制，媒体传输由其他协议处理\",\"模块化：通过不同组件（UA、代理服务器、注册服务器等）实现不同功能\",\"灵活性：支持多种网络环境和传输协议，易于扩展\",\"用户中心：以用户为中心而非设备，支持移动性\"]},\"3193\":{\"h\":\"避坑指南\"},\"3194\":{\"h\":\"1. 网络地址转换（NAT）问题\",\"t\":[\"SIP消息中的Contact头域通常包含内网IP地址，导致外部网络无法访问。解决方案：\",\"使用STUN/TURN服务器获取公网地址\",\"配置NAT端口映射\",\"采用SIP ALG（应用层网关）设备\"]},\"3195\":{\"h\":\"2. 消息重传与超时\",\"t\":[\"UDP传输不可靠，SIP依赖重传机制保证可靠性：\",\"临时响应（1xx）不重传\",\"请求消息在未收到响应时会重传，重传间隔指数增长\",\"实现时需正确处理重传消息，避免重复处理\"]},\"3196\":{\"h\":\"3. 状态码处理\",\"t\":[\"正确理解和处理不同状态码：\",\"180 Ringing表示被叫振铃，而非通话建立\",\"486 Busy Here表示被叫忙\",\"401 Unauthorized需要重新发送带认证信息的请求\"]},\"3197\":{\"h\":\"深度思考题\"},\"3198\":{\"h\":\"思考题1：SIP协议与HTTP协议有哪些异同点？\",\"t\":[\"参考答案：\",\"相同点：\",\"均为应用层协议，基于请求-响应模型\",\"均使用文本格式的消息\",\"均支持URI标识资源\",\"均使用头域传递附加信息\",\"不同点：\",\"用途：SIP用于会话控制，HTTP用于数据传输\",\"状态性：HTTP通常是无状态的，SIP支持有状态会话\",\"连接性：HTTP基于TCP，SIP可使用UDP或TCP\",\"方法：HTTP方法（GET、POST等）与SIP方法（INVITE、BYE等）语义不同\",\"响应处理：SIP支持临时响应（1xx），HTTP无类似机制\"]},\"3199\":{\"h\":\"思考题2：如何在Java中实现一个简单的SIP注册客户端？\",\"t\":[\"参考答案： 实现SIP注册客户端需要以下步骤：\",\"初始化SIP栈和必要的工厂类\",\"创建REGISTER请求，包含To、From、Call-ID、CSeq等头域\",\"添加认证信息（如果服务器要求）\",\"发送请求并处理响应\",\"定期刷新注册（注册有有效期）\",\"关键代码示例：\",\"public void sendRegister(String registrarUri, String fromUri, String contactUri) throws Exception { // 创建请求行 URI requestUri = addressFactory.createURI(registrarUri); SipURI sipRequestUri = (SipURI) requestUri; // 创建From头 Address fromAddress = addressFactory.createAddress(fromUri); FromHeader fromHeader = headerFactory.createFromHeader(fromAddress, \\\"reg-tag-54321\\\"); // 创建To头 Address toAddress = addressFactory.createAddress(fromUri); // To与From相同 ToHeader toHeader = headerFactory.createToHeader(toAddress, null); // 创建Call-ID、CSeq、Via等头（与INVITE类似） // ... // 创建Expires头（注册有效期，单位秒） ExpiresHeader expiresHeader = headerFactory.createExpiresHeader(3600); // 创建REGISTER请求 Request registerRequest = messageFactory.createRequest( sipRequestUri, Request.REGISTER, callIdHeader, cSeqHeader, fromHeader, toHeader, viaHeaders, maxForwardsHeader); registerRequest.addHeader(contactHeader); registerRequest.addHeader(expiresHeader); // 发送注册请求 ClientTransaction clientTransaction = sipProvider.getNewClientTransaction(registerRequest); clientTransaction.sendRequest(); System.out.println(\\\"REGISTER请求已发送\\\"); }\",\"定期刷新注册可通过定时器实现，在注册即将过期前重新发送REGISTER请求。\"]},\"3200\":{\"h\":\"理解-深入理解SIP\"},\"3201\":{\"h\":\"概述\",\"t\":[\"SIP（Session Initiation Protocol）作为多媒体会话控制的核心协议，其内部机制远比表面看起来更为复杂。本章将深入剖析SIP的底层实现原理，包括协议栈架构、事务处理机制、消息路由策略、安全机制以及Java SIP编程的高级特性。通过理解这些深层次的技术细节，开发者能够更好地应对复杂网络环境下的SIP应用开发挑战，优化会话性能，并解决实际应用中遇到的各种问题。\"]},\"3202\":{\"h\":\"知识要点\"},\"3203\":{\"h\":\"1. SIP协议底层实现\"},\"3204\":{\"h\":\"1.1 SIP协议栈架构\",\"t\":[\"SIP协议栈是实现SIP通信的基础框架，通常包含以下核心层次：\",\"应用层：处理SIP消息的创建、解析和业务逻辑\",\"事务层：管理SIP事务的状态和超时重传机制\",\"传输层：处理UDP/TCP/TLS等传输协议的适配\",\"在Java中，JAIN-SIP规范定义了SIP协议栈的实现标准，典型的实现包括NIST SIP和Mobicents SIP等。\"]},\"3205\":{\"h\":\"1.2 SIP消息解析机制\",\"t\":[\"SIP消息采用文本格式，解析过程包括：\",\"起始行解析：区分请求/响应消息，提取方法/状态码\",\"头域解析：提取标准头域和扩展头域\",\"消息体解析：处理SDP等负载内容\",\"以下是一个SIP消息解析的核心代码示例：\",\"import javax.sip.message.Request; import javax.sip.message.Response; import javax.sip.header.*; import java.text.ParseException; public class SipMessageParser { /** * 解析SIP请求消息 * @param request SIP请求对象 * @return 解析后的消息信息 */ public SipRequestInfo parseRequest(Request request) throws ParseException { SipRequestInfo info = new SipRequestInfo(); // 解析请求行 info.setMethod(request.getMethod()); info.setRequestUri(request.getRequestURI().toString()); info.setSipVersion(request.getSipVersion()); // 解析核心头域 FromHeader fromHeader = (FromHeader) request.getHeader(FromHeader.NAME); info.setFromAddress(fromHeader.getAddress().toString()); info.setFromTag(fromHeader.getTag()); ToHeader toHeader = (ToHeader) request.getHeader(ToHeader.NAME); info.setToAddress(toHeader.getAddress().toString()); info.setToTag(toHeader.getTag()); CallIdHeader callIdHeader = (CallIdHeader) request.getHeader(CallIdHeader.NAME); info.setCallId(callIdHeader.getCallId()); CSeqHeader cSeqHeader = (CSeqHeader) request.getHeader(CSeqHeader.NAME); info.setCSeqNumber(cSeqHeader.getSeqNumber()); info.setCSeqMethod(cSeqHeader.getMethod()); // 解析消息体(SDP) if (request.getContentLength().getContentLength() > 0) { String content = request.getContent().toString(); info.setSdpContent(content); info.setSdpInfo(parseSdpContent(content)); } return info; } /** * 解析SDP内容 * @param sdpContent SDP字符串 * @return 解析后的SDP信息 */ private SdpInfo parseSdpContent(String sdpContent) { // SDP解析逻辑实现 SdpInfo sdpInfo = new SdpInfo(); String[] lines = sdpContent.split(\\\"\\\\r?\\\\n\\\"); for (String line : lines) { if (line.startsWith(\\\"v=\\\")) { sdpInfo.setVersion(line.substring(2).trim()); } else if (line.startsWith(\\\"o=\\\")) { sdpInfo.setOrigin(line.substring(2).trim()); } else if (line.startsWith(\\\"s=\\\")) { sdpInfo.setSessionName(line.substring(2).trim()); } else if (line.startsWith(\\\"c=\\\")) { sdpInfo.setConnectionInfo(line.substring(2).trim()); } else if (line.startsWith(\\\"t=\\\")) { sdpInfo.setTiming(line.substring(2).trim()); } else if (line.startsWith(\\\"m=\\\")) { sdpInfo.addMedia(line.substring(2).trim()); } } return sdpInfo; } // 内部辅助类 public static class SipRequestInfo { private String method; private String requestUri; private String sipVersion; private String fromAddress; private String fromTag; private String toAddress; private String toTag; private String callId; private long cSeqNumber; private String cSeqMethod; private String sdpContent; private SdpInfo sdpInfo; // 省略getter和setter方法 } public static class SdpInfo { private String version; private String origin; private String sessionName; private String connectionInfo; private String timing; private List<String> media = new ArrayList<>(); // 省略getter和setter方法 } }\"]},\"3206\":{\"h\":\"1.3 传输层适配\",\"t\":[\"SIP支持多种传输协议，各有其适用场景：\",\"传输协议\",\"特点\",\"适用场景\",\"UDP\",\"无连接、低延迟、不可靠\",\"实时性要求高的场景，如VoIP通话\",\"TCP\",\"面向连接、可靠传输、开销较大\",\"消息较大或需要可靠传输的场景\",\"TLS\",\"基于TCP的加密传输\",\"需要安全性保障的场景\",\"Java SIP实现中，传输层适配代码示例：\",\"import javax.sip.SipStack; import javax.sip.ListeningPoint; import javax.sip.SipProvider; import java.util.Properties; public class SipTransportAdapter { private SipStack sipStack; public SipTransportAdapter() throws Exception { // 初始化SIP栈 Properties properties = new Properties(); properties.setProperty(\\\"javax.sip.STACK_NAME\\\", \\\"SipTransportStack\\\"); // 设置支持的传输协议 properties.setProperty(\\\"javax.sip.IP_ADDRESS\\\", \\\"0.0.0.0\\\"); sipStack = SipFactory.getInstance().createSipStack(properties); } /** * 创建UDP监听点 * @param port 端口号 * @return SipProvider实例 */ public SipProvider createUdpProvider(int port) throws Exception { ListeningPoint listeningPoint = sipStack.createListeningPoint(port, \\\"udp\\\"); return sipStack.createSipProvider(listeningPoint); } /** * 创建TCP监听点 * @param port 端口号 * @return SipProvider实例 */ public SipProvider createTcpProvider(int port) throws Exception { ListeningPoint listeningPoint = sipStack.createListeningPoint(port, \\\"tcp\\\"); return sipStack.createSipProvider(listeningPoint); } /** * 创建TLS监听点 * @param port 端口号 * @param tlsConfig TLS配置 * @return SipProvider实例 */ public SipProvider createTlsProvider(int port, TlsConfig tlsConfig) throws Exception { ListeningPoint listeningPoint = sipStack.createListeningPoint(port, \\\"tls\\\"); // 配置TLS参数 listeningPoint.setAttribute(\\\"javax.net.ssl.keyStore\\\", tlsConfig.getKeyStorePath()); listeningPoint.setAttribute(\\\"javax.net.ssl.keyStorePassword\\\", tlsConfig.getKeyStorePassword()); listeningPoint.setAttribute(\\\"javax.net.ssl.trustStore\\\", tlsConfig.getTrustStorePath()); return sipStack.createSipProvider(listeningPoint); } // TLS配置类 public static class TlsConfig { private String keyStorePath; private String keyStorePassword; private String trustStorePath; // 省略getter和setter方法 } }\"]},\"3207\":{\"h\":\"2. 事务与对话管理\"},\"3208\":{\"h\":\"2.1 SIP事务状态机\",\"t\":[\"SIP事务是SIP协议的核心概念，定义了请求和响应的交互模式。SIP事务分为两类：\",\"非INVITE事务：用于除INVITE之外的所有请求方法\",\"INVITE事务：专门用于INVITE请求，包含确认过程\",\"非INVITE事务状态机：\",\"INVITE事务状态机（客户端）：\",\"Java中实现事务状态管理的示例代码：\",\"import javax.sip.ClientTransaction; import javax.sip.Dialog; import javax.sip.RequestEvent; import javax.sip.ResponseEvent; import javax.sip.TimeoutEvent; import javax.sip.listener.SipListener; public class SipTransactionManager implements SipListener { private Map<String, ClientTransaction> transactions = new ConcurrentHashMap<>(); private Map<String, Dialog> dialogs = new ConcurrentHashMap<>(); /** * 处理请求事件 */ @Override public void processRequest(RequestEvent requestEvent) { // 服务器端事务处理 Request request = requestEvent.getRequest(); ServerTransaction serverTransaction = requestEvent.getServerTransaction(); try { if (serverTransaction == null) { // 创建新的服务器事务 serverTransaction = requestEvent.getSipProvider().getNewServerTransaction(request); } // 根据请求方法和当前状态进行处理 String method = request.getMethod(); if (Request.INVITE.equals(method)) { handleInviteRequest(serverTransaction, request); } else if (Request.BYE.equals(method)) { handleByeRequest(serverTransaction, request); } else if (Request.ACK.equals(method)) { handleAckRequest(request); } else { // 处理其他请求方法 serverTransaction.sendResponse( messageFactory.createResponse(200, request)); } } catch (Exception e) { e.printStackTrace(); } } /** * 处理响应事件 */ @Override public void processResponse(ResponseEvent responseEvent) { Response response = responseEvent.getResponse(); ClientTransaction clientTransaction = responseEvent.getClientTransaction(); int statusCode = response.getStatusCode(); // 更新事务状态 if (clientTransaction != null) { String transactionId = clientTransaction.getBranchId(); if (statusCode >= 100 && statusCode < 200) { // 1xx临时响应 updateTransactionState(transactionId, \\\"Proceeding\\\"); } else if (statusCode >= 200 && statusCode < 700) { // 最终响应 updateTransactionState(transactionId, \\\"Completed\\\"); // 如果是INVITE的2xx响应，需要发送ACK if (Request.INVITE.equals(clientTransaction.getRequest().getMethod()) && statusCode >= 200 && statusCode < 300) { sendAckForInvite(clientTransaction, response); } } } } /** * 处理超时事件 */ @Override public void processTimeout(TimeoutEvent timeoutEvent) { ClientTransaction transaction = timeoutEvent.getClientTransaction(); if (transaction != null) { String transactionId = transaction.getBranchId(); updateTransactionState(transactionId, \\\"Timeout\\\"); transactions.remove(transactionId); } } // 其他事件处理方法省略... /** * 处理INVITE请求 */ private void handleInviteRequest(ServerTransaction serverTransaction, Request request) throws Exception { // 1. 发送180 Ringing响应 Response ringingResponse = messageFactory.createResponse(180, request); serverTransaction.sendResponse(ringingResponse); // 2. 创建对话 Dialog dialog = serverTransaction.getDialog(); dialogs.put(dialog.getDialogId(), dialog); // 3. 模拟处理时间后发送200 OK响应 new Thread(() -> { try { Thread.sleep(2000); // 模拟振铃2秒 Response okResponse = messageFactory.createResponse(200, request); // 添加SDP响应 okResponse.setContent(createSdpContent(), headerFactory.createContentTypeHeader(\\\"application\\\", \\\"sdp\\\")); serverTransaction.sendResponse(okResponse); } catch (Exception e) { e.printStackTrace(); } }).start(); } /** * 发送INVITE的ACK确认 */ private void sendAckForInvite(ClientTransaction clientTransaction, Response response) throws Exception { Dialog dialog = clientTransaction.getDialog(); if (dialog != null) { Request ackRequest = dialog.createAck(((CSeqHeader)response.getHeader(CSeqHeader.NAME)).getSeqNumber()); dialog.sendAck(ackRequest); // 更新对话状态 dialogs.put(dialog.getDialogId(), dialog); } } /** * 更新事务状态 */ private void updateTransactionState(String transactionId, String state) { // 记录事务状态变更 System.out.println(\\\"Transaction \\\" + transactionId + \\\" state changed to: \\\" + state); // 可以添加状态变更监听器等逻辑 } }\"]},\"3209\":{\"h\":\"2.2 对话生命周期管理\",\"t\":[\"对话(Dialog)是SIP中两个UA之间的持久会话上下文，由Call-ID、本地标签和远程标签唯一标识。对话生命周期包括：\",\"创建：由INVITE请求的2xx响应确认后创建\",\"活跃：媒体流传输阶段\",\"终止：收到BYE请求并响应2xx后终止\",\"对话管理代码示例：\",\"import javax.sip.Dialog; import javax.sip.RequestEvent; import javax.sip.message.Request; import javax.sip.message.Response; public class DialogManager { private Map<String, DialogInfo> activeDialogs = new ConcurrentHashMap<>(); /** * 创建新对话 */ public DialogInfo createDialog(Dialog dialog, Request request, Response response) { DialogInfo dialogInfo = new DialogInfo(); dialogInfo.setDialogId(dialog.getDialogId()); dialogInfo.setCallId(dialog.getCallId().getCallId()); dialogInfo.setLocalTag(dialog.getLocalTag()); dialogInfo.setRemoteTag(dialog.getRemoteTag()); dialogInfo.setStartTime(new Date()); dialogInfo.setState(DialogState.ESTABLISHED); // 解析SDP获取媒体信息 if (response.getContent() != null) { dialogInfo.setSdpContent(response.getContent().toString()); dialogInfo.setMediaInfo(parseMediaInfo(response.getContent().toString())); } activeDialogs.put(dialog.getDialogId(), dialogInfo); return dialogInfo; } /** * 终止对话 */ public void terminateDialog(String dialogId) { DialogInfo dialogInfo = activeDialogs.get(dialogId); if (dialogInfo != null) { dialogInfo.setState(DialogState.TERMINATED); dialogInfo.setEndTime(new Date()); // 可以添加对话统计信息收集等逻辑 System.out.println(\\\"Dialog \\\" + dialogId + \\\" terminated after \\\" + (dialogInfo.getEndTime().getTime() - dialogInfo.getStartTime().getTime()) + \\\"ms\\\"); } } /** * 更新对话状态 */ public void updateDialogState(String dialogId, DialogState state) { DialogInfo dialogInfo = activeDialogs.get(dialogId); if (dialogInfo != null) { dialogInfo.setState(state); } } /** * 获取活跃对话列表 */ public List<DialogInfo> getActiveDialogs() { return activeDialogs.values().stream() .filter(d -> d.getState() == DialogState.ESTABLISHED) .collect(Collectors.toList()); } /** * 解析媒体信息 */ private MediaInfo parseMediaInfo(String sdpContent) { // 解析SDP内容，提取媒体信息 MediaInfo mediaInfo = new MediaInfo(); // 实现SDP解析逻辑 return mediaInfo; } // 对话状态枚举 public enum DialogState { INITIATED, ESTABLISHED, TERMINATED, FAILED } // 对话信息类 public static class DialogInfo { private String dialogId; private String callId; private String localTag; private String remoteTag; private Date startTime; private Date endTime; private DialogState state; private String sdpContent; private MediaInfo mediaInfo; // 省略getter和setter方法 } // 媒体信息类 public static class MediaInfo { private List<String> mediaTypes = new ArrayList<>(); private Map<String, Integer> mediaPorts = new HashMap<>(); private String codecInfo; // 省略getter和setter方法 } }\"]},\"3210\":{\"h\":\"3. SIP消息路由机制\"},\"3211\":{\"h\":\"3.1 路由规则与处理流程\",\"t\":[\"SIP消息路由是SIP网络的核心功能，决定了消息如何从发送方传递到接收方。路由过程主要基于以下信息：\",\"Request-URI：请求的目标地址\",\"Route头域：显式路由路径\",\"Record-Route头域：记录路由路径，用于后续请求\",\"Contact头域：实际联系地址\",\"SIP路由流程：\"]},\"3212\":{\"h\":\"3.2 代理服务器路由逻辑\",\"t\":[\"代理服务器是SIP路由的关键组件，负责根据路由规则转发请求。代理服务器可分为：\",\"有状态代理：维护事务和对话状态\",\"无状态代理：仅转发消息，不维护状态\",\"代理服务器路由实现示例：\",\"import javax.sip.address.Address; import javax.sip.address.URI; import javax.sip.header.RouteHeader; import javax.sip.message.Request; import java.util.List; public class ProxyRouter { private RoutingTable routingTable; private DnsResolver dnsResolver; public ProxyRouter(RoutingTable routingTable, DnsResolver dnsResolver) { this.routingTable = routingTable; this.dnsResolver = dnsResolver; } /** * 确定下一跳服务器地址 * @param request SIP请求 * @return 下一跳地址 */ public String determineNextHop(Request request) throws Exception { // 1. 检查是否有Route头域 List<RouteHeader> routeHeaders = request.getHeaders(RouteHeader.NAME); if (routeHeaders != null && !routeHeaders.isEmpty()) { // 取第一个Route头域作为下一跳 RouteHeader routeHeader = routeHeaders.get(0); URI nextHopUri = routeHeader.getAddress().getURI(); // 移除已处理的Route头域 request.removeHeader(RouteHeader.NAME); return nextHopUri.toString(); } // 2. 检查本地路由表 URI requestUri = request.getRequestURI(); String domain = extractDomain(requestUri.toString()); String nextHop = routingTable.lookup(domain); if (nextHop != null) { return nextHop; } // 3. DNS查询(SRV记录) return dnsResolver.resolveSipSrv(domain); } /** * 提取URI中的域名 */ private String extractDomain(String uri) { // 简单实现：提取@后的部分 int atIndex = uri.indexOf('@'); if (atIndex != -1) { String domainPart = uri.substring(atIndex + 1); // 移除端口号 int colonIndex = domainPart.indexOf(':'); if (colonIndex != -1) { domainPart = domainPart.substring(0, colonIndex); } return domainPart; } return uri; } /** * 路由表接口 */ public interface RoutingTable { String lookup(String domain); } /** * DNS解析器接口 */ public interface DnsResolver { String resolveSipSrv(String domain) throws Exception; } }\"]},\"3213\":{\"h\":\"4. SIP安全机制\"},\"3214\":{\"h\":\"4.1 SIP-TLS加密\",\"t\":[\"SIP-TLS通过TLS协议对SIP消息进行加密传输，防止窃听和篡改。实现SIP-TLS需要：\",\"配置TLS证书\",\"设置TLS监听端口\",\"实现证书验证\",\"Java中配置SIP-TLS的示例代码：\",\"import javax.net.ssl.SSLContext; import javax.net.ssl.KeyManagerFactory; import javax.net.ssl.TrustManagerFactory; import java.io.FileInputStream; import java.security.KeyStore; import java.security.SecureRandom; public class SipTlsConfig { private String keyStorePath; private String keyStorePassword; private String trustStorePath; private String trustStorePassword; /** * 创建SSL上下文 */ public SSLContext createSSLContext() throws Exception { // 加载密钥库 KeyStore keyStore = KeyStore.getInstance(\\\"JKS\\\"); try (FileInputStream fis = new FileInputStream(keyStorePath)) { keyStore.load(fis, keyStorePassword.toCharArray()); } // 加载信任库 KeyStore trustStore = KeyStore.getInstance(\\\"JKS\\\"); try (FileInputStream fis = new FileInputStream(trustStorePath)) { trustStore.load(fis, trustStorePassword.toCharArray()); } // 初始化密钥管理器 KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance( KeyManagerFactory.getDefaultAlgorithm()); keyManagerFactory.init(keyStore, keyStorePassword.toCharArray()); // 初始化信任管理器 TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance( TrustManagerFactory.getDefaultAlgorithm()); trustManagerFactory.init(trustStore); // 创建SSL上下文 SSLContext sslContext = SSLContext.getInstance(\\\"TLS\\\"); sslContext.init( keyManagerFactory.getKeyManagers(), trustManagerFactory.getTrustManagers(), new SecureRandom() ); return sslContext; } /** * 配置SIP监听点使用TLS */ public void configureTlsListeningPoint(ListeningPoint listeningPoint) throws Exception { SSLContext sslContext = createSSLContext(); // 设置SSL上下文到监听点 listeningPoint.setAttribute(\\\"javax.net.ssl.SSLContext\\\", sslContext); // 可选：配置主机名验证器 listeningPoint.setAttribute(\\\"javax.net.ssl.HostnameVerifier\\\", (hostname, session) -> { // 实现自定义主机名验证逻辑 return true; // 生产环境中需要严格验证 }); } // 省略getter和setter方法 }\"]},\"3215\":{\"h\":\"4.2 SIP身份认证\",\"t\":[\"SIP支持多种身份认证机制，最常用的是Digest认证：\",\"服务器返回401 Unauthorized响应，包含WWW-Authenticate头域\",\"客户端使用凭据计算响应值，重新发送请求\",\"服务器验证响应值，通过则处理请求\",\"Digest认证实现示例：\",\"import javax.sip.header.AuthorizationHeader; import javax.sip.header.WwwAuthenticateHeader; import javax.sip.message.Request; import javax.sip.message.Response; import java.security.MessageDigest; import java.security.NoSuchAlgorithmException; import java.util.Random; public class DigestAuthenticator { private UserCredentialStore credentialStore; private NonceManager nonceManager; public DigestAuthenticator(UserCredentialStore credentialStore) { this.credentialStore = credentialStore; this.nonceManager = new NonceManager(); } /** * 创建401响应，包含认证挑战 */ public Response createUnauthorizedResponse(Request request) throws Exception { Response response = messageFactory.createResponse(401, request); // 生成nonce String nonce = nonceManager.generateNonce(); String realm = \\\"sip.example.com\\\"; // 创建WWW-Authenticate头域 WwwAuthenticateHeader wwwAuthHeader = headerFactory.createWwwAuthenticateHeader(\\\"Digest\\\"); wwwAuthHeader.setParameter(\\\"realm\\\", realm); wwwAuthHeader.setParameter(\\\"nonce\\\", nonce); wwwAuthHeader.setParameter(\\\"qop\\\", \\\"auth\\\"); wwwAuthHeader.setParameter(\\\"algorithm\\\", \\\"MD5\\\"); wwwAuthHeader.setParameter(\\\"opaque\\\", generateOpaque()); response.addHeader(wwwAuthHeader); return response; } /** * 验证请求中的认证信息 */ public boolean validateRequest(Request request) throws Exception { AuthorizationHeader authHeader = (AuthorizationHeader) request.getHeader(AuthorizationHeader.NAME); if (authHeader == null) { return false; } // 提取认证参数 String username = authHeader.getUsername(); String realm = authHeader.getRealm(); String nonce = authHeader.getNonce(); String uri = authHeader.getURI(); String response = authHeader.getResponse(); String qop = authHeader.getQop(); String cnonce = authHeader.getCNonce(); String nc = authHeader.getNonceCount(); // 验证nonce if (!nonceManager.validateNonce(nonce)) { return false; } // 获取用户密码 String password = credentialStore.getPassword(username, realm); if (password == null) { return false; } // 计算期望的响应值 String expectedResponse = calculateResponse( request.getMethod(), username, realm, password, nonce, uri, qop, cnonce, nc); // 比较响应值 return expectedResponse.equals(response); } /** * 计算Digest响应值 */ private String calculateResponse(String method, String username, String realm, String password, String nonce, String uri, String qop, String cnonce, String nc) throws NoSuchAlgorithmException { // A1 = username:realm:password String a1 = username + \\\":\\\" + realm + \\\":\\\" + password; String ha1 = md5Hash(a1); // A2 = method:uri String a2 = method + \\\":\\\" + uri; String ha2 = md5Hash(a2); // 计算响应值 String response; if (qop != null && qop.equalsIgnoreCase(\\\"auth\\\")) { // response = MD5(HA1:nonce:nc:cnonce:qop:HA2) response = ha1 + \\\":\\\" + nonce + \\\":\\\" + nc + \\\":\\\" + cnonce + \\\":\\\" + qop + \\\":\\\" + ha2; } else { // response = MD5(HA1:nonce:HA2) response = ha1 + \\\":\\\" + nonce + \\\":\\\" + ha2; } return md5Hash(response); } /** * MD5哈希计算 */ private String md5Hash(String input) throws NoSuchAlgorithmException { MessageDigest md = MessageDigest.getInstance(\\\"MD5\\\"); byte[] digest = md.digest(input.getBytes()); // 转换为十六进制字符串 StringBuilder sb = new StringBuilder(); for (byte b : digest) { sb.append(String.format(\\\"%02x\\\", b)); } return sb.toString(); } /** * 生成opaque值 */ private String generateOpaque() { Random random = new Random(); return Integer.toHexString(random.nextInt()); } /** * 用户凭据存储接口 */ public interface UserCredentialStore { String getPassword(String username, String realm); } /** * Nonce管理器 */ public static class NonceManager { private Set<String> validNonces = Collections.synchronizedSet(new HashSet<>()); private long nonceValidityPeriod = 300000; // 5分钟 public String generateNonce() { String nonce = System.currentTimeMillis() + \\\":\\\" + UUID.randomUUID().toString(); validNonces.add(nonce); // 清理过期nonce cleanupExpiredNonces(); return nonce; } public boolean validateNonce(String nonce) { cleanupExpiredNonces(); return validNonces.contains(nonce); } private void cleanupExpiredNonces() { long currentTime = System.currentTimeMillis(); validNonces.removeIf(nonce -> { try { String[] parts = nonce.split(\\\":\\\"); long timestamp = Long.parseLong(parts[0]); return currentTime - timestamp > nonceValidityPeriod; } catch (Exception e) { return true; } }); } } }\"]},\"3216\":{\"h\":\"5. Java SIP高级编程特性\"},\"3217\":{\"h\":\"5.1 异步事件处理模型\",\"t\":[\"JAIN-SIP采用异步事件驱动模型，所有SIP消息和事件通过SipListener接口回调处理：\",\"import javax.sip.*; import javax.sip.message.Request; import javax.sip.message.Response; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; public class AsyncSipHandler implements SipListener { private ExecutorService executorService = Executors.newFixedThreadPool(10); private SipMessageProcessor messageProcessor; public AsyncSipHandler(SipMessageProcessor messageProcessor) { this.messageProcessor = messageProcessor; } /** * 异步处理请求事件 */ @Override public void processRequest(RequestEvent requestEvent) { executorService.submit(() -> { try { // 异步处理请求 messageProcessor.processRequest(requestEvent); } catch (Exception e) { e.printStackTrace(); } }); } /** * 异步处理响应事件 */ @Override public void processResponse(ResponseEvent responseEvent) { executorService.submit(() -> { try { // 异步处理响应 messageProcessor.processResponse(responseEvent); } catch (Exception e) { e.printStackTrace(); } }); } /** * 处理超时事件 */ @Override public void processTimeout(TimeoutEvent timeoutEvent) { executorService.submit(() -> { // 处理超时 messageProcessor.processTimeout(timeoutEvent); }); } // 其他事件处理方法省略... /** * 关闭执行器服务 */ public void shutdown() { executorService.shutdown(); } /** * 消息处理器接口 */ public interface SipMessageProcessor { void processRequest(RequestEvent requestEvent) throws Exception; void processResponse(ResponseEvent responseEvent) throws Exception; void processTimeout(TimeoutEvent timeoutEvent); } }\"]},\"3218\":{\"h\":\"5.2 高并发SIP服务器设计\",\"t\":[\"构建高并发SIP服务器需要考虑：\",\"线程池管理\",\"连接复用\",\"内存优化\",\"负载均衡\",\"高并发SIP服务器架构示例：\",\"public class HighPerformanceSipServer { private SipStack sipStack; private List<SipProvider> sipProviders = new ArrayList<>(); private AsyncSipHandler sipHandler; private ExecutorService processingPool; private ExecutorService ioPool; /** * 初始化高并发SIP服务器 */ public void initialize() throws Exception { // 1. 配置SIP栈 Properties properties = new Properties(); properties.setProperty(\\\"javax.sip.STACK_NAME\\\", \\\"HighPerfSipServer\\\"); properties.setProperty(\\\"javax.sip.IP_ADDRESS\\\", \\\"0.0.0.0\\\"); // 性能优化参数 properties.setProperty(\\\"gov.nist.javax.sip.THREAD_POOL_SIZE\\\", \\\"20\\\"); properties.setProperty(\\\"gov.nist.javax.sip.RECEIVE_UDP_BUFFER_SIZE\\\", \\\"65536\\\"); properties.setProperty(\\\"gov.nist.javax.sip.MAX_MESSAGE_SIZE\\\", \\\"65536\\\"); properties.setProperty(\\\"gov.nist.javax.sip.CACHE_CLIENT_CONNECTIONS\\\", \\\"true\\\"); sipStack = SipFactory.getInstance().createSipStack(properties); // 2. 创建线程池 processingPool = Executors.newFixedThreadPool(50); ioPool = Executors.newCachedThreadPool(); // 3. 创建消息处理器 SipMessageProcessor messageProcessor = new DefaultSipMessageProcessor(); sipHandler = new AsyncSipHandler(messageProcessor); // 4. 创建监听点 createListeningPoints(); } /** * 创建监听点 */ private void createListeningPoints() throws Exception { // 创建UDP监听点 ListeningPoint udpListeningPoint = sipStack.createListeningPoint(5060, \\\"udp\\\"); SipProvider udpProvider = sipStack.createSipProvider(udpListeningPoint); udpProvider.addSipListener(sipHandler); sipProviders.add(udpProvider); // 创建TCP监听点 ListeningPoint tcpListeningPoint = sipStack.createListeningPoint(5060, \\\"tcp\\\"); SipProvider tcpProvider = sipStack.createSipProvider(tcpListeningPoint); tcpProvider.addSipListener(sipHandler); sipProviders.add(tcpProvider); // 可以添加TLS监听点 } /** * 关闭服务器 */ public void shutdown() { processingPool.shutdown(); ioPool.shutdown(); sipHandler.shutdown(); } /** * 默认SIP消息处理器 */ private static class DefaultSipMessageProcessor implements AsyncSipHandler.SipMessageProcessor { private DialogManager dialogManager = new DialogManager(); private TransactionManager transactionManager = new TransactionManager(); private ProxyRouter proxyRouter = new ProxyRouter(new DefaultRoutingTable(), new DefaultDnsResolver()); @Override public void processRequest(RequestEvent requestEvent) throws Exception { // 实现请求处理逻辑 Request request = requestEvent.getRequest(); ServerTransaction serverTransaction = requestEvent.getServerTransaction(); // 处理注册请求 if (Request.REGISTER.equals(request.getMethod())) { handleRegisterRequest(requestEvent, serverTransaction); } // 处理INVITE请求 else if (Request.INVITE.equals(request.getMethod())) { handleInviteRequest(requestEvent, serverTransaction); } // 处理其他请求... } // 具体请求处理方法省略... } }\"]},\"3219\":{\"h\":\"知识扩展\"},\"3220\":{\"h\":\"设计思想\",\"t\":[\"SIP协议的设计体现了以下关键思想：\",\"模块化与分层设计 SIP采用清晰的分层结构，将协议栈分为应用层、事务层和传输层，各层职责明确，便于实现和扩展。这种设计使得SIP能够灵活适配不同的传输协议和应用场景。\",\"无状态与有状态结合 SIP在协议设计上巧妙地结合了无状态和有状态的特点：无状态代理服务器提高了处理效率，而有状态事务管理确保了消息可靠传输。这种混合设计平衡了性能和可靠性需求。\",\"端到端原则 SIP遵循互联网的端到端原则，将复杂的会话控制逻辑放在通信端点（UA），而网络中间节点（代理服务器）主要负责路由功能。这种设计简化了网络架构，提高了系统的可扩展性。\",\"文本格式与可扩展性 采用文本格式的消息使得SIP易于调试和扩展。通过定义新的头域和方法，可以在不修改核心协议的情况下添加新功能，如SIP扩展协议（SIP-I、SIMPLE等）。\",\"与其他协议的协同工作 SIP并不试图解决所有问题，而是专注于会话控制，通过与其他协议（SDP、RTP/RTCP、DNS等）协同工作，提供完整的多媒体通信解决方案。这种松耦合设计提高了协议的灵活性和适应性。\"]},\"3221\":{\"h\":\"避坑指南\"},\"3222\":{\"h\":\"1. 事务超时与重传处理\",\"t\":[\"SIP依赖超时重传机制保证消息可靠传输，但在实际应用中容易出现问题：\",\"问题：网络延迟导致重传消息到达，引起重复处理。 解决方案：\",\"正确实现事务状态机，跟踪事务状态\",\"使用branch参数识别重传消息\",\"对最终响应后的重传请求直接丢弃\",\"// 处理重传请求的示例代码 public void handleRequest(Request request, ServerTransaction serverTransaction) throws Exception { if (serverTransaction != null) { // 已存在事务，说明是重传 TransactionState state = serverTransaction.getState(); if (state == TransactionState.COMPLETED) { // 对已完成事务的重传，直接重发响应 Response response = serverTransaction.getLastResponse(); if (response != null) { serverTransaction.sendResponse(response); } return; } } // 处理新请求... }\"]},\"3223\":{\"h\":\"2. 对话状态维护\",\"t\":[\"在多线程环境下，对话状态维护容易出现并发问题：\",\"问题：多个线程同时修改对话状态，导致数据不一致。 解决方案：\",\"使用线程安全的数据结构存储对话\",\"对对话操作进行同步\",\"实现对话状态变更的原子操作\",\"// 线程安全的对话操作示例 public void updateDialogState(String dialogId, DialogState newState) { synchronized (dialogs) { DialogInfo dialogInfo = dialogs.get(dialogId); if (dialogInfo != null) { // 检查状态转换是否合法 if (isValidStateTransition(dialogInfo.getState(), newState)) { dialogInfo.setState(newState); // 触发状态变更事件 fireDialogStateChanged(dialogInfo); } else { log.warn(\\\"Invalid state transition from {} to {} for dialog {}\\\", dialogInfo.getState(), newState, dialogId); } } } }\"]},\"3224\":{\"h\":\"3. NAT穿透问题\",\"t\":[\"SIP在NAT环境下通信是常见挑战：\",\"问题：私有网络中的UA无法被外部网络直接访问，导致呼叫失败。 解决方案：\",\"使用STUN服务器获取公网地址\",\"采用TURN服务器中继媒体流\",\"配置SIP ALG功能\",\"在Contact头域中使用公网地址\",\"// 使用STUN获取公网地址示例 public String getPublicAddress() throws Exception { StunClient stunClient = new StunClient(\\\"stun.example.com\\\", 3478); StunResponse response = stunClient.testConnection(); if (response.isSuccess()) { return response.getPublicAddress() + \\\":\\\" + response.getPublicPort(); } else { throw new Exception(\\\"Failed to get public address via STUN\\\"); } } // 在Contact头域中使用公网地址 Address contactAddress = addressFactory.createAddress( \\\"sip:\\\" + username + \\\"@\\\" + getPublicAddress()); ContactHeader contactHeader = headerFactory.createContactHeader(contactAddress); request.addHeader(contactHeader);\"]},\"3225\":{\"h\":\"4. 性能优化策略\",\"t\":[\"高并发场景下SIP服务器容易出现性能瓶颈：\",\"问题：大量并发请求导致服务器响应延迟或丢包。 解决方案：\",\"合理配置线程池大小\",\"使用NIO提高I/O处理能力\",\"优化内存使用，减少对象创建\",\"实现请求优先级机制\",\"采用分布式架构横向扩展\",\"// 线程池配置示例 public ExecutorService createOptimizedThreadPool() { int corePoolSize = Runtime.getRuntime().availableProcessors() * 2; int maxPoolSize = corePoolSize * 2; long keepAliveTime = 60; return new ThreadPoolExecutor( corePoolSize, maxPoolSize, keepAliveTime, TimeUnit.SECONDS, new SynchronousQueue<>(), new ThreadFactoryBuilder() .setNameFormat(\\\"sip-worker-%d\\\") .setDaemon(true) .build(), new ThreadPoolExecutor.CallerRunsPolicy() // 饱和策略：调用者运行 ); }\"]},\"3226\":{\"h\":\"深度思考题\"},\"3227\":{\"h\":\"思考题1：SIP事务与TCP连接的关系是什么？它们如何协同工作保证消息可靠传输？\",\"t\":[\"参考答案： SIP事务和TCP连接是两个不同层次的概念，分别工作在应用层和传输层，但它们协同工作以保证SIP消息的可靠传输：\",\"层次关系：\",\"TCP是传输层协议，提供面向连接的可靠字节流传输\",\"SIP事务是应用层概念，定义了SIP请求和响应的交互模式\",\"SIP事务可以运行在TCP之上，也可以运行在UDP之上\",\"协同工作机制：\",\"当SIP使用TCP传输时，TCP提供的可靠传输特性（确认、重传、排序）减轻了SIP事务层的负担\",\"SIP事务层仍然需要管理事务状态和超时，但可以减少UDP环境下的重传次数\",\"TCP保证消息按顺序到达，避免了SIP事务处理乱序问题\",\"对于大型SIP消息（如包含大量SDP属性），TCP的流传输更适合，避免了UDP的分片问题\",\"优缺点比较：\",\"UDP+事务重传：适合实时性要求高的场景，但可能有重复消息\",\"TCP+事务：提供更强的可靠性，但连接建立和关闭有额外开销\",\"实际应用选择：\",\"对可靠性要求高的场景（如注册、消息传递）使用TCP\",\"对实时性要求高的场景（如语音通话建立）可使用UDP\",\"现代SIP实现通常同时支持TCP和UDP，根据消息类型自动选择\"]},\"3228\":{\"h\":\"思考题2：如何设计一个支持百万级并发会话的SIP服务器架构？\",\"t\":[\"参考答案： 设计支持百万级并发会话的SIP服务器需要从多个层面进行优化：\",\"网络层优化：\",\"使用多网卡和负载均衡分散流量\",\"优化TCP参数（如增大缓冲区、调整超时时间）\",\"采用DPDK等技术绕过内核直接操作网络接口\",\"协议栈优化：\",\"使用高性能SIP协议栈（如OpenSIPS、Kamailio）\",\"合理配置线程池和内存使用\",\"禁用不必要的协议特性和扩展\",\"应用架构设计：\",\"采用分布式架构，将功能拆分为注册、代理、路由等独立服务\",\"使用无状态设计便于水平扩展\",\"引入消息队列解耦组件间通信\",\"采用异步非阻塞I/O模型提高吞吐量\",\"数据存储优化：\",\"使用分布式缓存（如Redis）存储会话状态\",\"采用时序数据库存储通话记录和统计信息\",\"实现数据分片和分区策略\",\"高可用设计：\",\"实现服务冗余和自动故障转移\",\"采用主从复制或集群技术保证数据可靠性\",\"设计优雅降级机制应对流量峰值\",\"监控与调优：\",\"实时监控系统指标（CPU、内存、网络、会话数）\",\"实现自动扩缩容机制\",\"定期进行性能测试和瓶颈分析\",\"典型架构示例：\",\"客户端 → 负载均衡器 → SIP前端代理集群 → 业务逻辑服务集群 → 数据存储集群 ↓ ↓ → 媒体服务器集群 → 监控与管理系统\",\"实现百万级并发会话不仅需要技术选型正确，还需要细致的性能调优和架构设计，同时考虑成本与收益的平衡。\"]},\"3229\":{\"h\":\"进阶-SIP在实践中的应用\"},\"3230\":{\"h\":\"概述\",\"t\":[\"SIP协议在实际应用中涉及复杂场景和架构设计，包括企业通信系统、VoIP服务、实时协作平台等。本章将深入探讨SIP在实践中的高级应用，涵盖协议集成、大规模部署、安全实现和性能优化等关键技术点。\"]},\"3231\":{\"h\":\"知识要点\"},\"3232\":{\"h\":\"1. SIP与WebRTC集成\",\"t\":[\"WebRTC提供浏览器端实时音视频能力，与SIP结合可构建跨平台通信系统：\",\"/** * SIP与WebRTC网关示例 * 将SIP信令转换为WebRTC兼容格式 */ public class SipWebrtcGateway { private SipStack sipStack; private WebRtcPeerConnectionFactory webRtcFactory; /** * 初始化SIP和WebRTC组件 */ public void init() throws Exception { // 初始化SIP栈 initSipStack(); // 初始化WebRTC工厂 initWebRtcFactory(); } /** * 处理SIP INVITE请求，创建WebRTC连接 */ public void handleSipInvite(Request inviteRequest) { // 1. 解析SIP消息中的SDP信息 SdpDescription sdp = parseSipSdp(inviteRequest); // 2. 创建WebRTC对等连接 WebRtcPeerConnection peerConnection = createWebRtcPeerConnection(); // 3. 设置ICE候选者和媒体流 setupMediaStream(peerConnection, sdp); // 4. 生成WebRTC SDP应答 SdpDescription webRtcSdp = generateWebRtcSdp(peerConnection); // 5. 转换为SIP应答消息 Response okResponse = createSipOkResponse(inviteRequest, webRtcSdp); // 6. 发送SIP响应 sendSipResponse(okResponse); } // 省略其他实现方法... }\"]},\"3233\":{\"h\":\"2. 企业级SIP服务器集群部署\",\"t\":[\"大规模SIP服务需要集群架构支持高可用和负载均衡：\"]},\"3234\":{\"h\":\"（1）集群架构设计\"},\"3235\":{\"h\":\"（2）会话状态同步\",\"t\":[\"使用分布式缓存实现会话状态共享：\",\"/** * SIP会话状态管理器 * 使用Redis实现集群节点间状态同步 */ public class ClusterSessionManager { private RedisTemplate<String, Object> redisTemplate; private String nodeId; private static final String SESSION_PREFIX = \\\"sip:session:\\\"; private static final String USER_PREFIX = \\\"sip:user:\\\"; /** * 保存会话状态到分布式缓存 */ public void saveSession(SipSession session) { String sessionKey = SESSION_PREFIX + session.getCallId(); // 设置会话数据并添加节点ID session.setNodeId(nodeId); redisTemplate.opsForValue().set(sessionKey, session, 3600, TimeUnit.SECONDS); // 维护用户与会话的映射 String userKey = USER_PREFIX + session.getUserId(); redisTemplate.opsForSet().add(userKey, session.getCallId()); } /** * 获取会话状态，支持跨节点查找 */ public SipSession getSession(String callId) { String sessionKey = SESSION_PREFIX + callId; return (SipSession) redisTemplate.opsForValue().get(sessionKey); } // 省略其他方法... }\"]},\"3236\":{\"h\":\"3. SIP安全机制实现\",\"t\":[\"SIP协议在开放网络中面临安全威胁，需从传输加密、身份认证和消息完整性三个层面构建防护体系：\"]},\"3237\":{\"h\":\"（1）TLS加密传输\",\"t\":[\"通过TLS协议保护SIP信令传输，防止窃听和篡改：\",\"/** * 配置SIP TLS传输层 */ public class SipTlsConfig { private static final int TLS_PORT = 5061; private SSLContext sslContext; /** * 初始化TLS上下文 */ public void initTlsContext() throws Exception { // 加载密钥库 KeyStore keyStore = KeyStore.getInstance(\\\"JKS\\\"); keyStore.load(new FileInputStream(\\\"sip-server-keystore.jks\\\"), \\\"password\\\".toCharArray()); // 创建密钥管理器 KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance( KeyManagerFactory.getDefaultAlgorithm()); keyManagerFactory.init(keyStore, \\\"password\\\".toCharArray()); // 创建信任管理器 TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance( TrustManagerFactory.getDefaultAlgorithm()); trustManagerFactory.init(keyStore); // 初始化SSL上下文 sslContext = SSLContext.getInstance(\\\"TLSv1.2\\\"); sslContext.init( keyManagerFactory.getKeyManagers(), trustManagerFactory.getTrustManagers(), new SecureRandom() ); } /** * 创建TLS监听点 */ public ListeningPoint createTlsListeningPoint(SipStack sipStack) throws Exception { ListeningPoint tlsListeningPoint = sipStack.createListeningPoint( \\\"0.0.0.0\\\", TLS_PORT, \\\"tls\\\"); // 配置TLS参数 ((TlsListeningPoint) tlsListeningPoint).setSSLContext(sslContext); ((TlsListeningPoint) tlsListeningPoint).setEnabledProtocols(new String[] {\\\"TLSv1.2\\\"}); ((TlsListeningPoint) tlsListeningPoint).setEnabledCipherSuites(new String[] { \\\"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\\\" }); return tlsListeningPoint; } }\"]},\"3238\":{\"h\":\"（2）身份认证机制\",\"t\":[\"实现SIP Digest认证，防止未授权访问：\",\"/** * SIP Digest认证处理器 */ public class DigestAuthenticationHandler { private UserCredentialStore credentialStore; /** * 验证SIP请求中的认证信息 */ public boolean validateRequest(Request request) throws Exception { // 获取Authorization头 AuthorizationHeader authHeader = (AuthorizationHeader) request.getHeader(AuthorizationHeader.NAME); if (authHeader == null) { throw new SecurityException(\\\"Missing authentication header\\\"); } // 提取认证参数 String username = authHeader.getUsername(); String realm = authHeader.getRealm(); String nonce = authHeader.getNonce(); String uri = authHeader.getURI(); String response = authHeader.getResponse(); String method = request.getMethod(); // 获取用户凭证 UserCredential credential = credentialStore.getCredential(username, realm); if (credential == null) { throw new SecurityException(\\\"User not found: \\\" + username); } // 计算期望的响应值 String expectedResponse = calculateResponse( credential.getPassword(), username, realm, method, uri, nonce); // 验证响应 return expectedResponse.equals(response); } // 省略Digest算法实现... }\"]},\"3239\":{\"h\":\"4. SIP性能优化实践\",\"t\":[\"针对高并发场景，需从协议处理、资源管理和架构设计三方面优化：\"]},\"3240\":{\"h\":\"（1）异步消息处理\",\"t\":[\"采用事件驱动模型处理SIP消息，提高吞吐量：\",\"/** * 高性能SIP消息处理器 * 使用Disruptor实现无锁并发处理 */ public class HighPerformanceMessageHandler { private final RingBuffer<SipMessageEvent> ringBuffer; private final ExecutorService executor; public HighPerformanceMessageHandler(int bufferSize) { // 初始化Disruptor环形缓冲区 Disruptor<SipMessageEvent> disruptor = new Disruptor<>( SipMessageEvent::new, bufferSize, Executors.defaultThreadFactory()); // 设置事件处理器链 disruptor.handleEventsWith(this::processMessage) .then(this::routeMessage) .then(this::sendResponse); // 启动Disruptor ringBuffer = disruptor.start(); executor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors()); } /** * 提交消息到处理队列 */ public void submitMessage(SipMessage message, SipSession session) { long sequence = ringBuffer.next(); try { SipMessageEvent event = ringBuffer.get(sequence); event.setMessage(message); event.setSession(session); } finally { ringBuffer.publish(sequence); } } // 消息处理实现... }\"]},\"3241\":{\"h\":\"（2）连接复用与池化\",\"t\":[\"管理SIP连接资源，减少创建销毁开销：\",\"/** * SIP连接池 * 复用TCP连接提高性能 */ public class SipConnectionPool { private final GenericObjectPool<SipConnection> connectionPool; private final SipConnectionFactory connectionFactory; public SipConnectionPool(SipConnectionFactory factory, PoolConfig config) { this.connectionFactory = factory; this.connectionPool = new GenericObjectPool<>(factory, config); } /** * 获取连接 */ public SipConnection borrowConnection() throws Exception { return connectionPool.borrowObject(); } /** * 归还连接 */ public void returnConnection(SipConnection connection) { if (connection.isValid()) { connectionPool.returnObject(connection); } else { connectionPool.invalidateObject(connection); } } // 连接工厂实现... }\"]},\"3242\":{\"h\":\"5. 实际应用案例分析\"},\"3243\":{\"h\":\"（1）企业IP PBX系统\",\"t\":[\"基于SIP构建的企业电话系统架构：\"]},\"3244\":{\"h\":\"（2）云通信平台集成\",\"t\":[\"SIP与云服务结合实现弹性扩展：\",\"/** * 云原生SIP服务示例 * 基于Kubernetes实现自动扩缩容 */ public class CloudNativeSipService { private final KubernetesClient k8sClient; private final String deploymentName = \\\"sip-server\\\"; private final String namespace = \\\"communication\\\"; /** * 根据负载自动调整副本数 */ public void scaleBasedOnLoad(double currentCpuUsage, int currentConnections) { // 获取当前部署 Deployment deployment = k8sClient.apps().deployments() .inNamespace(namespace) .withName(deploymentName) .get(); // 计算目标副本数 int targetReplicas = calculateTargetReplicas(currentCpuUsage, currentConnections); int currentReplicas = deployment.getSpec().getReplicas(); // 调整副本数 if (targetReplicas != currentReplicas) { deployment.getSpec().setReplicas(targetReplicas); k8sClient.apps().deployments() .inNamespace(namespace) .withName(deploymentName) .replace(deployment); System.out.println(\\\"Scaling SIP server from \\\" + currentReplicas + \\\" to \\\" + targetReplicas); } } // 副本数计算逻辑... }\",\"// ... existing code ...\"]},\"3245\":{\"h\":\"Docker介绍\",\"t\":[\"更新中....\",\"1、yum 包更新到最新\",\"yum update\",\"2、安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的\",\"yum install -y yum-utils device-mapper-persistent-data lvm2\",\"3、 设置yum源\",\"yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\",\"4、 安装docker，出现输入的界面都按 y\",\"yum install -y docker-ce\",\"5、 查看docker版本，验证是否验证成功\",\"docker -v\",\"虚拟机，镜像，容器\",\"虚拟机：以操作系统为内核创建的一个虚拟的操作系统\",\"镜像：类似于安装包。\",\"容器：类似于进程，运行在虚拟机里的一个个app。\",\"查询所有容器 docker ps -a 查看运行中的容器 docker ps 停止容器 docker stop 容器id 删除容器 docker rm -f id 启动容器(前台运行) docker run -p 80:80 nginx 后台运行 docker run -d -p 80:80 nginx 启动容器并进入交互式模式(默认加sh) docker run -it 镜像id sh 进入容器内部 docker exec -it 容器id sh 删除镜像 docker rmi 镜像id(id一致时用名称:标签删docker rmi ubuntu13:v2) 查看镜像版本 docker search 镜像名 批量停止所有容器 docker stop $(docker ps -qa) 删除容器 docker rm -f id 查看所有容器id docker pa -aq 后台容器在线运行 docker attach id 打印后台运行容器日志 （动态打印跟踪 -f） docker logs id 查看容器进程 docker top id 快速清理所有退出的容器 docker system prune -f 快速清理所有没有使用的镜像 docker image prune -f 容器自动重启 docker run --restart=always 已经启动了则可以使用 docker update --restart=always <CONTAINER ID> 关闭自动重启 docker update --restart=no <CONTAINER ID>\",\"docker run -d -p 80:80 --name 容器名 镜像名\",\"背后发生了什么：\",\"1、在本地查找是否有该镜像\",\"2、没有则去远程仓库找该镜像，默认docker hub仓库\",\"3、下载最新镜像\",\"4、基于该镜像创建一个容器，并且准备运行\",\"5、docker engine分配给这个容器一个虚拟的ip地址\",\"6、在宿主机上打开80端口并把端口转发到宿主机上\",\"7、启动容器，运行指令（这里是一个shell脚本去启动命令）\"]},\"3246\":{\"h\":\"1）镜像导入导出\",\"t\":[\"·导出成镜像文件\",\"docker image save 镜像名 -o 导出镜像文件名\",\"docker image save nginx:v1 -o nginx.image\",\"·导入镜像文件\",\"docker image load -i 当前文件夹下的镜像文件名\",\"docker image load -i ./nginx.image\",\"一、镜像获取\",\"1、registry拉取（公有、私有）\",\"2、dockfile在线构建\",\"3、file文件离线导入\",\"二、构建dockerfile的基本结构\",\"From 以什么为基础（基础镜像）\",\"Run 运行一些linux命令安装软件（运行环境）\",\"Add 添加一些文件\",\"Cmd 执行一些文件命令\",\"env 引用变量\",\"copy 复制文件到进行中\",\"entrypoint 与cmd作用相同，但该指令必定执行，多个cmd执行做后一个\",\"关键字\",\"作用\",\"备注\",\"FROM\",\"指定父镜像\",\"指定dockerfile基于那个image构建\",\"MAINTAINER\",\"作者信息\",\"用来标明这个dockerfile谁写的\",\"LABEL\",\"标签\",\"用来标明dockerfile的标签 可以使用Label代替Maintainer 最终都是在docker image基本信息中可以查看\",\"RUN\",\"执行命令\",\"执行一段命令 默认是/bin/sh 格式: RUN command 或者 RUN [\\\"command\\\" , \\\"param1\\\",\\\"param2\\\"]\",\"CMD\",\"容器启动命令\",\"提供启动容器时候的默认命令 和ENTRYPOINT配合使用.格式 CMD command param1 param2 或者 CMD [\\\"command\\\" , \\\"param1\\\",\\\"param2\\\"]\",\"ENTRYPOINT\",\"入口\",\"一般在制作一些执行就关闭的容器中会使用\",\"COPY\",\"复制文件\",\"build的时候复制文件到image中\",\"ADD\",\"添加文件\",\"build的时候添加文件到image中 不仅仅局限于当前build上下文 可以来源于远程服务\",\"ENV\",\"环境变量\",\"指定build时候的环境变量 可以在启动的容器的时候 通过-e覆盖 格式ENV name=value\",\"ARG\",\"构建参数\",\"构建参数 只在构建的时候使用的参数 如果有ENV 那么ENV的相同名字的值始终覆盖arg的参数\",\"VOLUME\",\"定义外部可以挂载的数据卷\",\"指定build的image那些目录可以启动的时候挂载到文件系统中 启动容器的时候使用 -v 绑定 格式 VOLUME [\\\"目录\\\"]\",\"EXPOSE\",\"暴露端口\",\"定义容器运行的时候监听的端口 启动容器的使用-p来绑定暴露端口 格式: EXPOSE 8080 或者 EXPOSE 8080/udp\",\"WORKDIR\",\"工作目录\",\"指定容器内部的工作目录 如果没有创建则自动创建 如果指定/ 使用的是绝对地址 如果不是/开头那么是在上一条workdir的路径的相对路径\",\"USER\",\"指定执行用户\",\"指定build或者启动的时候 用户 在RUN CMD ENTRYPONT执行的时候的用户\",\"HEALTHCHECK\",\"健康检查\",\"指定监测当前容器的健康监测的命令 基本上没用 因为很多时候 应用本身有健康监测机制\",\"ONBUILD\",\"触发器\",\"当存在ONBUILD关键字的镜像作为基础镜像的时候 当执行FROM完成之后 会执行 ONBUILD的命令 但是不影响当前镜像 用处也不怎么大\",\"STOPSIGNAL\",\"发送信号量到宿主机\",\"该STOPSIGNAL指令设置将发送到容器的系统调用信号以退出。\",\"SHELL\",\"指定执行脚本的shell\",\"指定RUN CMD ENTRYPOINT 执行命令的时候 使用的shell\",\"三、构建命令：\",\"Hello名称名 .当前文件位置 Docker image build -t hello .\",\"四、构建示例\",\"示例1:构建一个ubuntu镜像，启动时打印出hello dockerName 1、创建Dockerfile目录 2、编辑文件 vim docker-ubuntu FROM ubuntu:21.04 RUN apt-get update && \\\\ apt-get install -y wget && \\\\ wget https://github.com/ipinfo/cli/releases/download/ipinfo-2.0.1/ipinfo_2.0.1_linux_amd64.tar.gz && \\\\ tar zxf ipinfo_2.0.1_linux_amd64.tar.gz && \\\\ mv ipinfo_2.0.1_linux_amd64 /usr/bin/ipinfo && \\\\ rm -rf ipinfo_2.0.1_linux_amd64.tar.gz env NAME=dockerName cmd echo \\\"hello $NAME\\\" 3、构建镜像文件 docker build -f 文件名 -t 镜像名:版本 .当前目录路径 docker build -f docker-ubuntu -t ubuntu:v1 . 打包容器成镜像 docker commit 容器ID 镜像名称 4、执行容器 Docker run -it ubuntu:v1 启动一个交互式容器 Docker run —rm -it ubuntu:v1 执行后容器停止删除容器 Docker run —rm -it ubuntu:v1 echo “打印语句” 5、上传镜像 登录远程仓库（用户名密码） docker login/logout 容器命名（跟镜像仓库名保持一致） docker image tag 原镜像名 新镜像名 docker image tag ubuntu:v1 1305366530/ubuntu:v1 docker push 路径/镜像名 docker push 1305366530/ubuntu:v1 修改文件 Echo “修改内容” 文件名 查看文件 more 文件名 多阶段构建 as 别名 —from 引入 ￼\",\"示例2:构建一个nginx镜像 构建dockerfile 1、在一个空目录下，新建一个名为 Dockerfile 文件，并在文件内添加以下内容： FROM nginx RUN echo '这是一个本地构建的nginx镜像' > /usr/share/nginx/html/index.html 2、在 Dockerfile 文件的存放目录下，执行构建动作。. 代表本次执行的上下文路径 docker build -t nginx:v3 .\",\"Windows中使用弊端：volume路径是保存在虚拟机里面的，在windos中是无法查看到这个虚拟路径的\",\"-v参数：指定数据卷存储位置\",\"dockera安装mysql 1、docker pull mysql:5.7 2、docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=123456 -d -v mysql-data:/var/lib/mysql mysql:5.7 3、查看volume docker volume ls 4、查看volume路径 docker volume inspect mysql-data 5、查看volume文件 Docker volume ls (查看所有持久化文件) docker volume inspect volumename（查看持久化路径） docker volume prune (删除没有使用的volume) More 路径/文件名（查看文件内容） 6、强制删除容器，查看volume是否存在 docker rm -f id docker volume ls\",\"使用 Docker Compose 可以轻松、高效的管理容器，它是一个用于定义和运行多容器 Docker 的应用程序工具\",\"1\",\"示例：docker-compose.yml version: \\\"3.8\\\" service: flask-demo: image: flask-demo:latest environment: - REDIS_HOST=redis-server network: - demo-network ports: - 8080:5000 redis-server: image: redis:latest networks: - demo-network networks: demo-network:\",\"安装 Docker Compose 可以通过下面命令自动下载适应版本的 Compose，并为安装脚本添加执行权限 sudo curl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose 查看安装是否成功 docker-compose -v\",\"快速入门 1、打包项目，获得 jar 包 docker-demo-0.0.1-SNAPSHOT.jar mvn clean package 2、在 jar 包所在路径创建 Dockerfile 文件，添加以下内容 FROM java:8 VOLUME /tmp ADD docker-demo-0.0.1-SNAPSHOT.jar app.jar RUN bash -c 'touch /app.jar' EXPOSE 9000 ENTRYPOINT [\\\"java\\\",\\\"-Djava.security.egd=file:/dev/./urandom\\\",\\\"-jar\\\",\\\"app.jar\\\"] 3、在 jar 包所在路径创建文件 docker-compose.yml，添加以下内容 version: '2' # 表示该 Docker-Compose 文件使用的是 Version 2 file services: docker-demo: # 指定服务名称 build: . # 指定 Dockerfile 所在路径 ports: # 指定端口映射 - \\\"9000:8761\\\" 4、在 docker-compose.yml 所在路径下执行该命令 Compose 就会自动构建镜像并使用镜像启动容器 docker-compose up docker-compose up -d // 后台启动并运行容器 5、访问 http://localhost:9000/hello 即可访问微服务接口\",\"Docker Compose 常用命令与配置 常见命令 1、ps：列出所有运行容器 docker-compose ps 2、logs：查看服务日志输出 docker-compose logs 3、port：打印绑定的公共端口，下面命令可以输出 eureka 服务 8761 端口所绑定的公共端口 docker-compose port eureka 8761 4、build：构建或者重新构建服务 docker-compose build 5、start：启动指定服务已存在的容器 docker-compose start eureka 6、stop：停止已运行的服务的容器 docker-compose stop eureka 7、rm：删除指定服务的容器 docker-compose rm eureka 8、up：构建、启动容器 docker-compose up 9、kill：通过发送 SIGKILL 信号来停止指定服务的容器 docker-compose kill eureka 10、pull：下载服务镜像 11、scale：设置指定服务运气容器的个数，以 service=num 形式指定 docker-compose scale user=3 movie=3 12、run：在一个服务上执行一个命令 docker-compose run web bash\"]},\"3247\":{\"h\":\"Docker Compose示例：\"},\"3248\":{\"h\":\"一、安装Docker Compose\",\"t\":[\"# Compose目前已经完全支持Linux、Mac OS和Windows，在我们安装Compose之前，需要先安装Docker。下面我 们以编译好的二进制包方式安装在Linux系统中。 curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose # 设置文件可执行权限 chmod +x /usr/local/bin/docker-compose # 查看版本信息 docker-compose -version\"]},\"3249\":{\"h\":\"二、卸载Docker Compose\",\"t\":[\"# 二进制包方式安装的，删除二进制文件即可 rm /usr/local/bin/docker-compose\"]},\"3250\":{\"h\":\"三、 使用docker compose编排nginx+springboot项目\",\"t\":[\"创建docker-compose目录\",\"mkdir ~/docker-compose cd ~/docker-compose\",\"编写 docker-compose.yml 文件\",\"version: '3' services: nginx: image: nginx ports: - 80:80 links: - app volumes: - ./nginx/conf.d:/etc/nginx/conf.d app: image: app expose: - \\\"8080\\\"\",\"创建./nginx/conf.d目录\",\"mkdir -p ./nginx/conf.d\",\"在./nginx/conf.d目录下 编写itheima.conf文件\",\"server { listen 80; access_log off; location / { proxy_pass http://app:8080; } }\",\"在~/docker-compose 目录下 使用docker-compose 启动容器\",\"docker-compose up\",\"测试访问\",\"http://192.168.149.135/hello\",\"docker compose不建议在生产环境使用，因为是它是运行在单机环境下\",\"多机的环境下则需要用到docker swarm。\",\"Docker Swarm 是 Docker 的集群管理工具。它将 Docker 主机池转变为单个虚拟 Docker 主机。 Docker Swarm 提供了标准的 Docker API，所有任何已经与 Docker 守护程序通信的工具都可以使用 Swarm 轻松地扩展到多个主机。\",\"k8s在容器编排领域处于绝对领先的地位\",\"查看是否激活swarm模式（默认没有） docker info Swarm: inactive表示没有激活 激活swarm，两个方法 1、初始化一个swarm集群 docker swarm init docker node ls（查看集群节点） 2、加入一个已存在的swarm集群\",\"docker swarm init(初始化集群) docker node ls（查看集群节点） docker swarm leave --force（强制离开集群）\",\"创建一个nginx服务 docker service create nginx:latest 查看nginx服务 docker service ls docker service ps 服务id 复制三个service docker service update 服务id --replicas 3 当我们删除一个容器后，swarm会帮我们创建一个容器运行起来（即创建容器又帮我们维护容器） docker rm -f 容器id 要想删除则需要对service进行操作 docker service rm 服务ID\"]},\"3251\":{\"c\":[\"Docker指南\"]},\"3252\":{\"c\":[\"Docker\"]},\"3253\":{\"h\":\"Docker容器间相互访问\"},\"3254\":{\"h\":\"三种通讯方式\"},\"3255\":{\"h\":\"一、通过容器ip访问（不推荐）\",\"t\":[\"每次重启容器ip会变化\",\"#查看容器ip docker inspect 容器 | grep IPAddress\"]},\"3256\":{\"h\":\"二、通过主机ip访问（不推荐）\",\"t\":[\"端口映射 直接暴露IP端口，直接写死我们本机的ip加上映射端口\",\"当连的无线网，网络变化时，主机ip也会变化\",\"扩展：\",\"1、Mac环境下，容器访问主机ip host.docker.internal 我想要从容器连接主机的一个服务 当主机需要变化IP地址（或者它根本就没有网络）。在18.03 之后的版本中我们建议使用一个专门的DNS名称host.docker.internal，这个DNS名称将被解析到主机的内部IP。 这只是为了开发目的，不要用于非Mac版Docker的生产环境。\",\"2、host.docker.internal宿主机访问无效的解决方法\",\"在 Docker 20.10 及以上版本中，Docker 访问宿主机的方式有所变化：\",\"host.docker.internal:host-gateway\"]},\"3257\":{\"h\":\"三、建立容器链接（推荐）\",\"t\":[\"启动容器的时候，给要通信的目标容器使用link指定一个“链接名”,在容器中就可以使用“链接名”和目标容器通信。格式： --link 目标容器:别名\",\"#启动一个mysql容器名称叫mysql5，别名叫mysql docker run -it --restart=always --name=mysql5 --link mysql5:mysql hub.c.163.com/library/mysql:latest #通过访问别名即可访问到容器ip ping mysql\"]},\"3258\":{\"h\":\"harbor版本升级方案\"},\"3259\":{\"h\":\"harbor升级方案\"},\"3260\":{\"h\":\"环境检查\",\"t\":[\"harbor安装位置以及镜像存储位置\",\"find / -name harbor\",\"img\",\"版本查看\",\"1）界面查看\",\"界面版本更为准确！！！\",\"D32702B0FD38EF3A2C66575A381989AB\",\"B8E0E1036A32364285C732F71EF18665\",\"2）配置查看\",\"/_version\",\"3459425649BBD5C5E379085EC8A009EA\"]},\"3261\":{\"h\":\"获取最新镜像\",\"t\":[\"查看版本\",\"官网：https://goharbor.io/\",\"image-20230129100035153\",\"下载最新版本\",\"github项目：https://github.com/goharbor/harbor\",\"image-20230129100318918\",\"image-20230129100419274\"]},\"3262\":{\"h\":\"删除原harbor\",\"t\":[\"温馨提示：\",\"​ 2.7.0为版本好，具体位置根据磁盘大小而定！！！\",\"备份数据\",\"mkdir /2.7.0\",\"mkdir /data/2.7\",\"mv harbor /2.7.0/\",\"cp -r /data/* /data/2.7/\",\"删除镜像\",\"#在原harbor安装目录下执行(即与docker-compose.yml同级目录) docker-compose down\"]},\"3263\":{\"h\":\"安装新harbor\",\"t\":[\"上传\",\"将tar包上传到指定位置\",\"解压\",\"tar -zxvf harbor-offline-installer-v2.7.0.tgz\",\"编辑yml文件\",\"cp harbor.yml.tmpl harbor.yml\",\"修改配置\",\"注释掉htps的配置内容，配置htp相关的参数，主要是hostname，port，其他都可以不用动。\",\"温馨提示：密码和数据存储位置必须修改\",\"data_volume: /data/2.7（仅供参考！！！）\",\"image-20220410115849673\",\"启动\",\"./install.sh\",\"1FFBEB6B89353FFB72B329BCCB56F3B9\",\"检查\",\"B1AC620EC7189F47265243BC1A28E91E\"]},\"3264\":{\"h\":\"Rancher容器云管理平台\",\"t\":[\"文中所有ip均为内网ip，外部互联网无法访问\",\"序号\",\"硬件\",\"操作及内核\",\"1\",\"CPU 4 Memory 4G Disk 100G\",\"CentOS7\",\"2\",\"CPU 4 Memory 4G Disk 100G\",\"CentOS7\",\"3\",\"CPU 4 Memory 4G Disk 100G\",\"CentOS7\",\"4\",\"CPU 4 Memory 4G Disk 100G\",\"CentOS7\"]},\"3265\":{\"h\":\"2.1 主机名\",\"t\":[\"# hostnamectl set-hostname rancherserver\",\"# hostnamectl set-hostname k8s-master01\",\"# hostnamectl set-hostname k8s-worker01\",\"# hostnamectl set-hostname k8s-worker02\"]},\"3266\":{\"h\":\"2.2 IP地址\",\"t\":[\"[root@rancherserver ~]# vim /etc/sysconfig/network-scripts/ifcfg-ens33 # cat /etc/sysconfig/network-scripts/ifcfg-ens33 TYPE=\\\"Ethernet\\\" PROXY_METHOD=\\\"none\\\" BROWSER_ONLY=\\\"no\\\" BOOTPROTO=\\\"none\\\" DEFROUTE=\\\"yes\\\" IPV4_FAILURE_FATAL=\\\"no\\\" IPV6INIT=\\\"yes\\\" IPV6_AUTOCONF=\\\"yes\\\" IPV6_DEFROUTE=\\\"yes\\\" IPV6_FAILURE_FATAL=\\\"no\\\" IPV6_ADDR_GEN_MODE=\\\"stable-privacy\\\" NAME=\\\"ens33\\\" UUID=\\\"ec87533a-8151-4aa0-9d0f-1e970affcdc6\\\" DEVICE=\\\"ens33\\\" ONBOOT=\\\"yes\\\" IPADDR=\\\"192.168.10.130\\\" PREFIX=\\\"24\\\" GATEWAY=\\\"192.168.10.2\\\" DNS1=\\\"119.29.29.29\\\"\",\"[root@k8s-master01 ~]# vim /etc/sysconfig/network-scripts/ifcfg-ens33 [root@k8s-master01 ~]# cat /etc/sysconfig/network-scripts/ifcfg-ens33 TYPE=\\\"Ethernet\\\" PROXY_METHOD=\\\"none\\\" BROWSER_ONLY=\\\"no\\\" BOOTPROTO=\\\"none\\\" DEFROUTE=\\\"yes\\\" IPV4_FAILURE_FATAL=\\\"no\\\" IPV6INIT=\\\"yes\\\" IPV6_AUTOCONF=\\\"yes\\\" IPV6_DEFROUTE=\\\"yes\\\" IPV6_FAILURE_FATAL=\\\"no\\\" IPV6_ADDR_GEN_MODE=\\\"stable-privacy\\\" NAME=\\\"ens33\\\" UUID=\\\"ec87533a-8151-4aa0-9d0f-1e970affcdc6\\\" DEVICE=\\\"ens33\\\" ONBOOT=\\\"yes\\\" IPADDR=\\\"192.168.10.131\\\" PREFIX=\\\"24\\\" GATEWAY=\\\"192.168.10.2\\\" DNS1=\\\"119.29.29.29\\\"\",\"[root@k8s-worker01 ~]# vim /etc/sysconfig/network-scripts/ifcfg-ens33 [root@k8s-worker01 ~]# cat /etc/sysconfig/network-scripts/ifcfg-ens33 TYPE=\\\"Ethernet\\\" PROXY_METHOD=\\\"none\\\" BROWSER_ONLY=\\\"no\\\" BOOTPROTO=\\\"none\\\" DEFROUTE=\\\"yes\\\" IPV4_FAILURE_FATAL=\\\"no\\\" IPV6INIT=\\\"yes\\\" IPV6_AUTOCONF=\\\"yes\\\" IPV6_DEFROUTE=\\\"yes\\\" IPV6_FAILURE_FATAL=\\\"no\\\" IPV6_ADDR_GEN_MODE=\\\"stable-privacy\\\" NAME=\\\"ens33\\\" UUID=\\\"ec87533a-8151-4aa0-9d0f-1e970affcdc6\\\" DEVICE=\\\"ens33\\\" ONBOOT=\\\"yes\\\" IPADDR=\\\"192.168.10.132\\\" PREFIX=\\\"24\\\" GATEWAY=\\\"192.168.10.2\\\" DNS1=\\\"119.29.29.29\\\"\",\"[root@k8s-worker02 ~]# vim /etc/sysconfig/network-scripts/ifcfg-ens33 [root@k8s-worker02 ~]# cat /etc/sysconfig/network-scripts/ifcfg-ens33 TYPE=\\\"Ethernet\\\" PROXY_METHOD=\\\"none\\\" BROWSER_ONLY=\\\"no\\\" BOOTPROTO=\\\"none\\\" DEFROUTE=\\\"yes\\\" IPV4_FAILURE_FATAL=\\\"no\\\" IPV6INIT=\\\"yes\\\" IPV6_AUTOCONF=\\\"yes\\\" IPV6_DEFROUTE=\\\"yes\\\" IPV6_FAILURE_FATAL=\\\"no\\\" IPV6_ADDR_GEN_MODE=\\\"stable-privacy\\\" NAME=\\\"ens33\\\" UUID=\\\"ec87533a-8151-4aa0-9d0f-1e970affcdc6\\\" DEVICE=\\\"ens33\\\" ONBOOT=\\\"yes\\\" IPADDR=\\\"192.168.10.133\\\" PREFIX=\\\"24\\\" GATEWAY=\\\"192.168.10.2\\\" DNS1=\\\"119.29.29.29\\\"\"]},\"3267\":{\"h\":\"2.3 主机名与IP地址解析\",\"t\":[\"# cat /etc/hosts 127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4 ::1 localhost localhost.localdomain localhost6 localhost6.localdomain6 192.168.10.130 rancherserver 192.168.10.131 k8s-master01 192.168.10.132 k8s-worker01 192.168.10.133 k8s-worker02\"]},\"3268\":{\"h\":\"2.4 主机安全设置\",\"t\":[\"# systemctl stop firewalld;systemctl disable firewalld # firewall-cmd --state not running\",\"# sed -ri 's/SELINUX=enforcing/SELINUX=disabled/' /etc/selinux/config\"]},\"3269\":{\"h\":\"2.5 主机时钟同步\",\"t\":[\"# crontab -l 0 */1 * * * ntpdate time1.aliyun.com\"]},\"3270\":{\"h\":\"2.6 关闭swap\",\"t\":[\"关闭k8s集群节点swap\",\"# cat /etc/fstab 默认开启，修改后关闭 #/dev/mapper/centos-swap swap swap defaults 0 0\",\"临时关闭所有 # swapoff -a\"]},\"3271\":{\"h\":\"2.7 配置内核路由转发\",\"t\":[\"# vim /etc/sysctl.conf # cat /etc/sysctl.conf ... net.ipv4.ip_forward=1\",\"# sysctl -p net.ipv4.ip_forward = 1\",\"所有主机安装docker-ce\",\"# wget -O /etc/yum.repos.d/docker-ce.repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\",\"# yum -y install docker-ce\",\"# systemctl enable --now docker\",\"image-20220816144830488\",\"image-20220816144953656\",\"[root@rancherserver ~]# docker pull rancher/rancher:v2.5.15\",\"[root@rancherserver ~]# mkdir -p /opt/data/rancher_data\",\"[root@rancherserver ~]# docker run -d --privileged -p 80:80 -p 443:443 -v /opt/data/rancher_data:/var/lib/rancher --restart=always --name rancher-2.5.15 rancher/rancher:v2.5.15\",\"[root@rancherserver ~]# docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 99e367eb35a3 rancher/rancher:v2.5.15 \\\"entrypoint.sh\\\" 26 seconds ago Up 26 seconds 0.0.0.0:80->80/tcp, :::80->80/tcp, 0.0.0.0:443->443/tcp, :::443->443/tcp rancher-2.5.15\"]},\"3272\":{\"h\":\"5.1 Rancher访问\",\"t\":[\"image-20220816150151634\",\"image-20220816150209913\",\"本次密码为Kubemsb123\",\"image-20220816150450409\"]},\"3273\":{\"h\":\"5.2 通过Rancher创建Kubernetes集群\",\"t\":[\"image-20220816150706088\",\"image-20220816150736103\",\"image-20220816151001001\",\"image-20220816151039880\",\"image-20220816151157176\",\"添加master节点主机\",\"image-20220816151352377\",\"[root@k8s-master01 ~]# docker run -d --privileged --restart=unless-stopped --net=host -v /etc/kubernetes:/etc/kubernetes -v /var/run:/var/run rancher/rancher-agent:v2.5.15 --server https://192.168.10.130 --token 7985nkpc48854kwmgh6pnfb7hcrkwhlcmx6wxq8tb4vszxn2qv9xdd --ca-checksum f6d5f24fcd41aa057a205d4f6922dfd309001126d040431222bfba7aa93517b7 --etcd --controlplane --worker\",\"[root@k8s-master01 ~]# docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 8e7e73b477dc rancher/rancher-agent:v2.5.15 \\\"run.sh --server htt…\\\" 20 seconds ago Up 18 seconds brave_ishizaka\",\"添加 worker节点\",\"image-20220816151709536\",\"image-20220816151746413\",\"[root@k8s-worker01 ~]# docker run -d --privileged --restart=unless-stopped --net=host -v /etc/kubernetes:/etc/kubernetes -v /var/run:/var/run rancher/rancher-agent:v2.5.15 --server https://192.168.10.130 --token 7985nkpc48854kwmgh6pnfb7hcrkwhlcmx6wxq8tb4vszxn2qv9xdd --ca-checksum f6d5f24fcd41aa057a205d4f6922dfd309001126d040431222bfba7aa93517b7 --worker\",\"[root@k8s-worker02 ~]# docker run -d --privileged --restart=unless-stopped --net=host -v /etc/kubernetes:/etc/kubernetes -v /var/run:/var/run rancher/rancher-agent:v2.5.15 --server https://192.168.10.130 --token 7985nkpc48854kwmgh6pnfb7hcrkwhlcmx6wxq8tb4vszxn2qv9xdd --ca-checksum f6d5f24fcd41aa057a205d4f6922dfd309001126d040431222bfba7aa93517b7 --worker\",\"所有节点激活后状态\",\"image-20220816152917840\",\"[root@k8s-master01 ~]# cat <<EOF > /etc/yum.repos.d/kubernetes.repo [kubernetes] name=Kubernetes baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/ enabled=1 gpgcheck=1 repo_gpgcheck=1 gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg EOF\",\"修改gpgcheck=0及修改repo_gpgcheck=0\",\"[root@k8s-master01 ~]# vim /etc/yum.repos.d/kubernetes.repo [root@k8s-master01 ~]# cat /etc/yum.repos.d/kubernetes.repo [kubernetes] name=Kubernetes baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/ enabled=1 gpgcheck=0 repo_gpgcheck=0 gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg\",\"[root@k8s-master01 ~]# yum -y install kubectl\",\"[root@k8s-master01 ~]# mkdir ~/.kube\",\"image-20220816155110578\",\"image-20220816155140075\",\"[root@k8s-master01 ~]# vim ~/.kube/config [root@k8s-master01 ~]# cat ~/.kube/config apiVersion: v1 kind: Config clusters: - name: \\\"kubemsb-smart-1\\\" cluster: server: \\\"https://192.168.10.130/k8s/clusters/c-5jtsf\\\" certificate-authority-data: \\\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJwekNDQ\\\\ VUyZ0F3SUJBZ0lCQURBS0JnZ3Foa2pPUFFRREFqQTdNUnd3R2dZRFZRUUtFeE5rZVc1aGJXbGoKY\\\\ kdsemRHVnVaWEl0YjNKbk1Sc3dHUVlEVlFRREV4SmtlVzVoYldsamJHbHpkR1Z1WlhJdFkyRXdIa\\\\ GNOTWpJdwpPREUyTURZMU9UVTBXaGNOTXpJd09ERXpNRFkxT1RVMFdqQTdNUnd3R2dZRFZRUUtFe\\\\ E5rZVc1aGJXbGpiR2x6CmRHVnVaWEl0YjNKbk1Sc3dHUVlEVlFRREV4SmtlVzVoYldsamJHbHpkR\\\\ 1Z1WlhJdFkyRXdXVEFUQmdjcWhrak8KUFFJQkJnZ3Foa2pPUFFNQkJ3TkNBQVJMbDZKOWcxMlJQT\\\\ G93dnVHZkM0YnR3ZmhHUDBpR295N1U2cjBJK0JZeAozZCtuVDBEc3ZWOVJWV1BDOGZCdGhPZmJQN\\\\ GNYckx5YzJsR081RHkrSXRlM28wSXdRREFPQmdOVkhROEJBZjhFCkJBTUNBcVF3RHdZRFZSMFRBU\\\\ UgvQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVNnZYWXBRYm9IdXF0UlBuS1FrS3gKMjBSZzJqMHdDZ\\\\ 1lJS29aSXpqMEVBd0lEU0FBd1JRSWdMTUJ6YXNDREU4T2tCUk40TWRuZWNRU0xjMFVXQmNseApGO\\\\ UFCem1MQWQwb0NJUUNlRWFnRkdBa1ZsUnV1czllSE1VRUx6ODl6VlY5L096b3hvY1ROYnA5amlBP\\\\ T0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==\\\" - name: \\\"kubemsb-smart-1-k8s-master01\\\" cluster: server: \\\"https://192.168.10.131:6443\\\" certificate-authority-data: \\\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM0VENDQ\\\\ WNtZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFTTVJBd0RnWURWUVFERXdkcmRXSmwKT\\\\ FdOaE1CNFhEVEl5TURneE5qQTNNVFV3TmxvWERUTXlNRGd4TXpBM01UVXdObG93RWpFUU1BNEdBM\\\\ VVFQXhNSAphM1ZpWlMxallUQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ\\\\ 0VCQUt4Qkh3S0RFZE5WCm1tU2JFZDZXaTZzRFNXcklPZEZ5dFN5Z1puVmk2cXFkYmxXODZRQ1Y1U\\\\ WdEckI5QU43aDJ1RHRZMlFiNGZOTmEKQWZkSVVhS2tjZ0taNnplS1Z3eEdRYkptcEovSk5yYWw2N\\\\ ENldng5QTU1UUFBL29FSzBVbkdackliSjQ5dEl4awp1TnMwNFVIRWxVVUZpWjlmckdBQU9sK3lVa\\\\ GxXQUlLQzhmMUZSeVhpaVZEN2FTcTVodHNWeC9qczBBUUo3R2dFCjMxQUdRcmF4S2s0STVCN1hBY\\\\ 1pybHdrS1ljaGFPZnBlNkV6Ly9HZXVFekR5VnN3a09uK2h0ZGNIMlJVSHozUlcKWWVTMGw2ZzZpO\\\\ HcyUXRUakNwTUtId1FRTmQwSjdFM0k1aS9CRVA0azhXSHZIYjBkQk8ydVkyTml1cmNMWWw4dgpHO\\\\ DUyZ2ZibWt2OENBd0VBQWFOQ01FQXdEZ1lEVlIwUEFRSC9CQVFEQWdLa01BOEdBMVVkRXdFQi93U\\\\ UZNQU1CCkFmOHdIUVlEVlIwT0JCWUVGQkg4VzVBbmxKYVNrVXowSzNobms1Vm55MVNnTUEwR0NTc\\\\ UdTSWIzRFFFQkN3VUEKQTRJQkFRQmE0WmtsWmRINUFCOTNWaXhYOUhnMEYwYXdVZWduNkVSRGtRQ\\\\ VBlcHZNaG5ON1lyVGlFN3lUSGxvWApLNS9ROTJ5Y2FnRGVlNjlEbHpvWEppTlNzdEZWYmtaSVN0O\\\\ HVRZFhCYjFoSUtzbXBVYWlSeXFoRmVjbnRaSi85CmhCWmZMRjZnNitBNUlvVGxYOThqMERVU21IV\\\\ is2Q29raXhPV3ZESmJ6dkI2S3VXdnhQbTF5WFgveVpBTDd1U1gKcUNnTC84UjJjSm53dUZhTnFvS\\\\ 3I3STE5bDBRNi9VWWQ0bWhralpmUTdqdGlraEpmQXpWRUFtWlVza0hZSkRtdwp6bzJKMUJLL0Jxb\\\\ m8rSFplbThFTExpK1ZhRXVlR280blF4ZmpaSlF2MWFXZHhCMnRrUWovdWNUa1QxRU1kUFBsCm0rd\\\\ kh2MWtYNW5BaHl5eWR0dG12UGRlOWFHOUwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\\\" users: - name: \\\"kubemsb-smart-1\\\" user: token: \\\"kubeconfig-user-9cn9x.c-5jtsf:x57644qvmbfqpmh78fb4cbdnm8zbbxk9hmjb2bjggl5j2hvwnvj4c9\\\" contexts: - name: \\\"kubemsb-smart-1\\\" context: user: \\\"kubemsb-smart-1\\\" cluster: \\\"kubemsb-smart-1\\\" - name: \\\"kubemsb-smart-1-k8s-master01\\\" context: user: \\\"kubemsb-smart-1\\\" cluster: \\\"kubemsb-smart-1-k8s-master01\\\" current-context: \\\"kubemsb-smart-1\\\"\",\"[root@k8s-master01 ~]# kubectl get nodes NAME STATUS ROLES AGE VERSION k8s-master01 Ready controlplane,etcd,worker 35m v1.20.15 k8s-worker01 Ready worker 31m v1.20.15 k8s-worker02 Ready worker 27m v1.20.15\",\"image-20220816155537732\",\"image-20220816155741848\",\"image-20220816155932470\",\"image-20220816160056177\",\"image-20220816160200746\",\"image-20220816160254842\",\"image-20220816160733605\",\"[root@k8s-master01 ~]# kubectl get svc -n kubemsbf-1 NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE myapp-1 ClusterIP 10.43.15.240 <none> 80/TCP 4m35s myapp-1-nodeport NodePort 10.43.214.118 <none> 80:32406/TCP 4m35s\",\"image-20220816162243693\"]},\"3274\":{\"h\":\"8.1 持久化存储类准备\"},\"3275\":{\"h\":\"8.1.1 NFS服务\",\"t\":[\"[root@nfsserver ~]# lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT sda 8:0 0 100G 0 disk ├─sda1 8:1 0 1G 0 part /boot └─sda2 8:2 0 99G 0 part ├─centos-root 253:0 0 50G 0 lvm / ├─centos-swap 253:1 0 2G 0 lvm └─centos-home 253:2 0 47G 0 lvm /home sdb 8:16 0 100G 0 disk /sdb\",\"[root@nfsserver ~]# mkdir /sdb\",\"[root@nfsserver ~]# mkfs.xfs /dev/sdb\",\"[root@nfsserver ~]#vim /etc/fstab [root@nfsserver ~]# cat /etc/fstab ...... /dev/sdb /sdb xfs defaults 0 0\",\"[root@nfsserver ~]# mount -a\",\"[root@nfsserver ~]# vim /etc/exports [root@nfsserver ~]# cat /etc/exports /sdb *(rw,sync,no_root_squash)\",\"[root@nfsserver ~]# systemctl enable --now nfs-server\",\"[root@nfsserver ~]# showmount -e Export list for nfs-server: /sdb *\"]},\"3276\":{\"h\":\"8.1.2 存储卷\",\"t\":[\"[root@k8s-master01 ~]# for file in class.yaml deployment.yaml rbac.yaml ; do wget https://raw.githubusercontent.com/kubernetes-incubator/external-storage/master/nfs-client/deploy/$file ; done\",\"需要修改class.yaml中资源对象名称为nfs-client\",\"需要修改deployment.yaml中nfs server及其共享的目录、容器对应的镜像。\",\" [root@k8s-master01 ~]# kubectl apply -f class.yaml\",\"[root@k8s-master01 ~]# kubectl apply -f rbac.yaml\",\"[root@k8s-master01 nfsdir]# vim deployment.yaml [root@k8s-master01 nfsdir]# cat deployment.yaml apiVersion: apps/v1 kind: Deployment metadata: name: nfs-client-provisioner labels: app: nfs-client-provisioner # replace with namespace where provisioner is deployed namespace: default spec: replicas: 1 strategy: type: Recreate selector: matchLabels: app: nfs-client-provisioner template: metadata: labels: app: nfs-client-provisioner spec: serviceAccountName: nfs-client-provisioner containers: - name: nfs-client-provisioner image: registry.cn-beijing.aliyuncs.com/pylixm/nfs-subdir-external-provisioner:v4.0.0 volumeMounts: - name: nfs-client-root mountPath: /persistentvolumes env: - name: PROVISIONER_NAME value: fuseim.pri/ifs - name: NFS_SERVER value: 192.168.10.133 - name: NFS_PATH value: /sdb volumes: - name: nfs-client-root nfs: server: 192.168.10.133 path: /sdb\",\"[root@k8s-master01 ~]# kubectl apply -f deployment.yaml\",\"[root@k8s-master01 ~]# kubectl get sc NAME PROVISIONER RECLAIMPOLICY VOLUMEBINDINGMODE ALLOWVOLUMEEXPANSION AGE nfs-client fuseim.pri/ifs Delete Immediate false 109m\",\"image-20220816185710948\"]},\"3277\":{\"h\":\"8.2 MySQL数据库部署\"},\"3278\":{\"h\":\"8.2.1 PVC准备\",\"t\":[\"image-20220816202814643\",\"image-20220816202953810\",\"image-20220816203153592\",\"[root@k8s-master01 ~]# kubectl get pvc -n kubemsbdata NAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGE myvolume Bound pvc-52460d7f-db89-40ab-b09e-ab9d0cfcaa17 5Gi RWO nfs-client 80s\",\"[root@k8s-master01 ~]# kubectl get pv NAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGE pvc-52460d7f-db89-40ab-b09e-ab9d0cfcaa17 5Gi RWO Delete Bound kubemsbdata/myvolume nfs-client 84s\",\"[root@nfsserver ~]# ls /sdb kubemsbdata-myvolume-pvc-52460d7f-db89-40ab-b09e-ab9d0cfcaa17\"]},\"3279\":{\"h\":\"8.2.2 MySQL部署\",\"t\":[\"image-20220816205034201\",\"image-20220816204138975\",\"image-20220816204242066\",\"image-20220816204356332\",\"image-20220816204448683\",\"image-20220816205248456\"]},\"3280\":{\"h\":\"8.2.2 MySQL访问\"},\"3281\":{\"h\":\"8.2.2.1 方案一 通过Rancher web界面访问\",\"t\":[\"image-20220816201739371\",\"image-20220816201826018\"]},\"3282\":{\"h\":\"8.2.2.2 方案二 通过主机访问\",\"t\":[\"[root@k8s-master01 ~]# ss -anput | grep \\\":32666\\\" tcp LISTEN 0 128 *:32666 *:* users:((\\\"kube-proxy\\\",pid=7654,fd=3))\",\"[root@k8s-master01 nfsdir]# mysql -h 192.168.10.131 -uroot -p123456 -P 32666 ...... MySQL [(none)]> show databases; +--------------------+ | Database | +--------------------+ | information_schema | | kubemsb | | mysql | | performance_schema | | sys | +--------------------+ 5 rows in set (0.01 sec)\",\"image-20220816210220210\",\"image-20220816210440574\",\"image-20220816211312775\",\"[root@k8s-master01 ~]# dig -t a mysqldata1-0.mysqldata1.kubemsbdata.svc.cluster.local @10.43.0.10 ; <<>> DiG 9.11.4-P2-RedHat-9.11.4-26.P2.el7_9.8 <<>> -t a mysqldata1-0.mysqldata1.kubemsbdata.svc.cluster.local @10.43.0.10 ;; global options: +cmd ;; Got answer: ;; WARNING: .local is reserved for Multicast DNS ;; You are currently testing what happens when an mDNS query is leaked to DNS ;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 63314 ;; flags: qr aa rd; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1 ;; WARNING: recursion requested but not available ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 4096 ;; QUESTION SECTION: ;mysqldata1-0.mysqldata1.kubemsbdata.svc.cluster.local. IN A ;; ANSWER SECTION: mysqldata1-0.mysqldata1.kubemsbdata.svc.cluster.local. 5 IN A 10.42.1.4 ;; Query time: 0 msec ;; SERVER: 10.43.0.10#53(10.43.0.10) ;; WHEN: 二 8月 16 21:20:18 CST 2022 ;; MSG SIZE rcvd: 151\",\"image-20220816212308034\",\"image-20220816212543225\",\"image-20220816212701687\",\"image-20220816212928917\",\"image-20220816213120382\"]},\"3283\":{\"h\":\"\",\"t\":[\"404 Not Found\"]},\"3284\":{\"h\":\"Mongo数据库\"},\"3285\":{\"h\":\"Database\"},\"3286\":{\"h\":\"Mysql数据库\"},\"3287\":{\"h\":\"Redis数据库\"},\"3288\":{\"h\":\"IOS部署文档\"},\"3289\":{\"h\":\"Deploy\"},\"3290\":{\"h\":\"代码片段\"},\"3291\":{\"h\":\"Extra\"},\"3292\":{\"h\":\"插件\"},\"3293\":{\"h\":\"Jwt\"},\"3294\":{\"h\":\"Frame\"},\"3295\":{\"h\":\"Spring\"},\"3296\":{\"h\":\"Springboot\"},\"3297\":{\"h\":\"3、 Java新特性\"},\"3298\":{\"h\":\"Java\"},\"3299\":{\"h\":\"4、并发编程艺术\"},\"3300\":{\"h\":\"6、 JVM原理\"},\"3301\":{\"h\":\"7、 Maven仓库管理\"},\"3302\":{\"h\":\"面试专题\"},\"3303\":{\"h\":\"ELK日志收集技术\"},\"3304\":{\"h\":\"Middleware\"},\"3305\":{\"h\":\"Nginx技术\"},\"3306\":{\"h\":\"Js\"},\"3307\":{\"h\":\"Web\"},\"3308\":{\"h\":\"操作系统\"},\"3309\":{\"h\":\"Linux部署文档\"},\"3310\":{\"h\":\"软件安装\"},\"3311\":{\"h\":\"Docker命令\"},\"3312\":{\"h\":\"常用命令\"},\"3313\":{\"h\":\"Mongo命令\"},\"3314\":{\"h\":\"Mysql命令\"},\"3315\":{\"h\":\"Oracle命令\"},\"3316\":{\"h\":\"Rocketmq命令\"},\"3317\":{\"h\":\"操作系统命令\"},\"3318\":{\"h\":\"网络命令\"},\"3319\":{\"h\":\"防火墙命令\"},\"3320\":{\"h\":\"文档规范\"},\"3321\":{\"h\":\"1、开发规范\"},\"3322\":{\"h\":\"编码规范\"},\"3323\":{\"h\":\"1.1 语法基础\"},\"3324\":{\"h\":\"2、 Java基础\"},\"3325\":{\"h\":\"1.2 数组 字符串\"},\"3326\":{\"h\":\"1.3 集合框架\"},\"3327\":{\"h\":\"1.4 面向对象\"},\"3328\":{\"h\":\"1.5 IO流\"},\"3329\":{\"h\":\"1.6 异常处理\"},\"3330\":{\"h\":\"1.7 反射\"},\"3331\":{\"h\":\"1.8 泛型\"},\"3332\":{\"h\":\"1.9 网络编程\"},\"3333\":{\"h\":\"2.0 注解\"},\"3334\":{\"h\":\"2.1 SIP机制\"},\"3335\":{\"h\":\"Docker技术\"},\"3336\":{\"h\":\"容器化技术\"},\"3337\":{\"h\":\"Harbor镜像仓库\"},\"3338\":{\"h\":\"Rancher\"}},\"dirtCount\":0,\"index\":[[\"└─centos\",{\"1\":{\"3275\":1}}],[\"└─sda2\",{\"1\":{\"3275\":1}}],[\"└──\",{\"1\":{\"393\":13,\"1384\":5,\"2763\":2}}],[\"├─centos\",{\"1\":{\"3275\":2}}],[\"├─sda1\",{\"1\":{\"3275\":1}}],[\"├──\",{\"1\":{\"393\":5,\"1384\":25,\"2763\":8}}],[\"序号\",{\"1\":{\"3264\":1}}],[\"序列流比多次单独读取更高效\",{\"1\":{\"2896\":1}}],[\"序列流本身不提供缓冲功能\",{\"1\":{\"2896\":1}}],[\"序列流仍会尝试关闭其他流\",{\"1\":{\"2896\":1}}],[\"序列流关闭时会自动关闭所有被组合的输入流\",{\"1\":{\"2896\":1}}],[\"序列流专注于流的组合\",{\"1\":{\"2895\":1}}],[\"序列流体现了以下设计思想和模式\",{\"1\":{\"2895\":1}}],[\"序列流在以下场景中特别有用\",{\"1\":{\"2893\":1}}],[\"序列流的read\",{\"1\":{\"2896\":1}}],[\"序列流的实际应用\",{\"1\":{\"2893\":1}}],[\"序列流的实际应用场景\",{\"0\":{\"2893\":1}}],[\"序列流的核心功能是将多个输入流组合成一个逻辑流\",{\"1\":{\"2889\":1}}],[\"序列流的工作原理\",{\"0\":{\"2889\":1}}],[\"序列流\",{\"0\":{\"2886\":1},\"1\":{\"2887\":1}}],[\"序列化后长度\",{\"1\":{\"3085\":1}}],[\"序列化\",{\"1\":{\"3085\":1}}],[\"序列化速度快\",{\"1\":{\"3085\":1}}],[\"序列化是将对象转换为字节流以便网络传输的过程\",{\"1\":{\"3085\":1}}],[\"序列化协议\",{\"0\":{\"3085\":1}}],[\"序列化与反序列化等场景中的具体应用\",{\"1\":{\"2996\":1}}],[\"序列化安全\",{\"1\":{\"2825\":1}}],[\"序列化问题\",{\"0\":{\"2641\":1},\"1\":{\"2941\":1}}],[\"序列化版本号\",{\"1\":{\"1225\":1,\"2288\":1,\"2490\":1}}],[\"序列化版本号serialversionuid\",{\"1\":{\"1225\":1}}],[\"序列化对象\",{\"1\":{\"1225\":1}}],[\"序列化前\",{\"1\":{\"1225\":1}}],[\"备份数据\",{\"1\":{\"3262\":1}}],[\"备注\",{\"1\":{\"1876\":1,\"3246\":1}}],[\"们以编译好的二进制包方式安装在linux系统中\",{\"1\":{\"3248\":1}}],[\"￼\",{\"1\":{\"3246\":1}}],[\"背后发生了什么\",{\"1\":{\"3245\":1}}],[\"背景色\",{\"1\":{\"1452\":2}}],[\"副本数计算逻辑\",{\"1\":{\"3244\":1}}],[\"副本集名称\",{\"1\":{\"1734\":1,\"1764\":1}}],[\"云原生sip服务示例\",{\"1\":{\"3244\":1}}],[\"云通信平台集成\",{\"0\":{\"3244\":1}}],[\"↓\",{\"1\":{\"3228\":2}}],[\"→\",{\"1\":{\"3228\":6}}],[\"→读取→clear\",{\"1\":{\"2920\":1}}],[\"饱和策略\",{\"1\":{\"3225\":1}}],[\"饱和度\",{\"1\":{\"3109\":1}}],[\"决定了消息如何从发送方传递到接收方\",{\"1\":{\"3211\":1}}],[\"决定了事务之间的隔离程度\",{\"1\":{\"355\":1}}],[\"振铃\",{\"1\":{\"3188\":1}}],[\"起始行解析\",{\"1\":{\"3205\":1}}],[\"起始行\",{\"1\":{\"3180\":1}}],[\"起始位置\",{\"1\":{\"2575\":1}}],[\"终止对话\",{\"1\":{\"3209\":1}}],[\"终止\",{\"1\":{\"3209\":1}}],[\"终止会话\",{\"1\":{\"3179\":1}}],[\"终端目录\",{\"1\":{\"1798\":1}}],[\"终端操作\",{\"1\":{\"543\":2}}],[\"邀请对方加入会话\",{\"1\":{\"3179\":1}}],[\"域名或ip地址\",{\"1\":{\"3177\":1}}],[\"抑制未使用变量警告\",{\"1\":{\"3136\":1}}],[\"抑制编译器警告\",{\"1\":{\"3136\":1}}],[\"务必使用netty提供的解码器处理粘包\",{\"1\":{\"3129\":1}}],[\"务必牢记\",{\"1\":{\"997\":1}}],[\"半包处理\",{\"1\":{\"3129\":1}}],[\"半开状态成功阈值\",{\"1\":{\"3087\":1}}],[\"粘包等问题\",{\"1\":{\"3123\":1}}],[\"粘贴下面内容\",{\"1\":{\"1595\":1}}],[\"宏观\",{\"1\":{\"3111\":1}}],[\"端到端原则\",{\"1\":{\"3220\":1}}],[\"端到端追踪\",{\"1\":{\"3111\":1}}],[\"端口所绑定的公共端口\",{\"1\":{\"3246\":1}}],[\"端口5060\",{\"1\":{\"3190\":1}}],[\"端口占用问题\",{\"1\":{\"3069\":1}}],[\"端口tcp\",{\"1\":{\"1698\":1}}],[\"端口改成自己的\",{\"1\":{\"1637\":1}}],[\"端口号的处理等\",{\"1\":{\"2119\":1}}],[\"端口号\",{\"1\":{\"1390\":1,\"1502\":1,\"1630\":1,\"1734\":1,\"1892\":1,\"3206\":3}}],[\"端口映射到宿主机的\",{\"1\":{\"1578\":1}}],[\"端口映射\",{\"1\":{\"242\":1,\"3256\":1}}],[\"端口不同\",{\"1\":{\"178\":1}}],[\"端口\",{\"1\":{\"125\":2,\"1314\":1,\"1315\":1,\"1324\":1,\"1332\":1,\"1417\":1,\"1578\":1,\"1595\":1,\"1637\":2,\"1764\":2,\"3066\":1,\"3107\":1,\"3110\":1}}],[\"冷数据持久化\",{\"1\":{\"3111\":1}}],[\"黄金指标\",{\"1\":{\"3109\":1}}],[\"黄金比例\",{\"1\":{\"818\":2,\"852\":2,\"886\":2,\"920\":2}}],[\"国产开源apm工具\",{\"1\":{\"3104\":1}}],[\"诊断命令\",{\"1\":{\"3093\":1}}],[\"弹性设计\",{\"1\":{\"3089\":1}}],[\"弹出元素\",{\"1\":{\"2468\":1}}],[\"弹出对话框输入生成gpg时填写的密码\",{\"1\":{\"1000\":1}}],[\"熔断\",{\"1\":{\"3089\":1}}],[\"熔断器模式示例\",{\"1\":{\"3087\":1}}],[\"熔断机制\",{\"1\":{\"3087\":1}}],[\"熔断降级\",{\"1\":{\"2960\":1}}],[\"体积大\",{\"1\":{\"3085\":1}}],[\"体现了\",{\"1\":{\"3068\":1}}],[\"体现了面向接口编程的思想\",{\"1\":{\"2559\":1}}],[\"体现了时间与空间的权衡\",{\"1\":{\"2333\":1}}],[\"体现了迭代器模式的多态性\",{\"1\":{\"1185\":1}}],[\"体现了java的资源管理哲学\",{\"1\":{\"2847\":1}}],[\"体现了java对现代web开发需求的响应\",{\"1\":{\"488\":1}}],[\"体现了java在追求极致性能的同时\",{\"1\":{\"487\":1}}],[\"揭示网络编程的核心原理与实践技巧\",{\"1\":{\"3072\":1}}],[\"揭示泛型如何简化框架api设计\",{\"1\":{\"3043\":1}}],[\"挥手需要四次的原因\",{\"1\":{\"3070\":1}}],[\"屏蔽了底层操作系统的差异\",{\"1\":{\"3068\":1}}],[\"物理层\",{\"1\":{\"3058\":1}}],[\"物理模拟等\",{\"1\":{\"2119\":1}}],[\"桥接方法确保了类型擦除后的方法调用正确性\",{\"1\":{\"3036\":1}}],[\"桥接方法\",{\"0\":{\"3036\":1}}],[\"桥接模式\",{\"1\":{\"2883\":1}}],[\"敏感操作检查\",{\"1\":{\"3011\":1}}],[\"敏感信息保护\",{\"0\":{\"2068\":1}}],[\"拷贝字段值\",{\"1\":{\"3007\":1}}],[\"拷入u盘\",{\"1\":{\"1507\":1}}],[\"滥用反射确实会降低代码的可维护性和安全性\",{\"1\":{\"2975\":1}}],[\"暴力访问私有属性\",{\"1\":{\"2971\":1}}],[\"暴力访问私有方法\",{\"1\":{\"2970\":1}}],[\"暴力访问私有构造\",{\"1\":{\"2969\":1}}],[\"暴露端口\",{\"1\":{\"3246\":1}}],[\"暴露行为而非状态\",{\"1\":{\"2750\":1}}],[\"暴露高层业务语义\",{\"1\":{\"1252\":1}}],[\"个订单处理异常\",{\"1\":{\"2953\":1}}],[\"个数\",{\"1\":{\"2752\":1}}],[\"个数或顺序\",{\"1\":{\"2741\":1,\"2786\":1}}],[\"账户\",{\"1\":{\"2947\":1}}],[\"账号\",{\"1\":{\"1687\":1}}],[\"账号密码都在控制台上\",{\"1\":{\"1632\":1}}],[\"严重影响性能\",{\"1\":{\"2942\":1}}],[\"严格遵循\",{\"1\":{\"2920\":1}}],[\"严格遵循缓冲区操作顺序\",{\"1\":{\"1235\":1}}],[\"严格控制时间复杂度上限\",{\"1\":{\"2717\":1}}],[\"严格验证消息格式\",{\"1\":{\"1107\":1}}],[\"探讨异常链的构建与使用\",{\"1\":{\"2933\":1}}],[\"探针skywalking\",{\"1\":{\"1561\":1}}],[\"探针\",{\"1\":{\"1537\":1,\"1561\":1}}],[\"层次关系\",{\"1\":{\"3227\":1}}],[\"层次化\",{\"1\":{\"2929\":1}}],[\"层级选择器\",{\"0\":{\"1456\":1},\"1\":{\"1460\":1}}],[\"翻转后\",{\"1\":{\"2914\":1}}],[\"翻转缓冲区\",{\"1\":{\"2914\":2}}],[\"详解\",{\"0\":{\"2914\":1,\"2915\":1,\"2916\":1}}],[\"详细描述arraylist的扩容机制\",{\"1\":{\"2355\":1}}],[\"详细对比arraylist和linkedlist在不同操作\",{\"1\":{\"2354\":1}}],[\"详细跟踪信息\",{\"1\":{\"2070\":1}}],[\"详细的文档自动化机制\",{\"1\":{\"1990\":1}}],[\"详细的文档生态机制\",{\"1\":{\"1977\":1}}],[\"详细的文档管理机制\",{\"1\":{\"1964\":1}}],[\"详细的api描述和接口定义\",{\"1\":{\"1953\":1}}],[\"详细的api信息\",{\"1\":{\"1951\":1}}],[\"详细的api文档可以提升用户的使用体验\",{\"1\":{\"1944\":1}}],[\"详细的迁移指南\",{\"1\":{\"570\":1}}],[\"故意产生一个错误\",{\"1\":{\"2909\":1}}],[\"故障注入\",{\"1\":{\"3109\":1}}],[\"故障转移阶段\",{\"1\":{\"182\":1}}],[\"故障转移\",{\"0\":{\"182\":1},\"1\":{\"179\":1}}],[\"故障恢复\",{\"1\":{\"162\":1}}],[\"责任分离\",{\"1\":{\"2940\":1,\"2958\":1}}],[\"责任分离原则\",{\"1\":{\"2907\":1}}],[\"责任链模式\",{\"0\":{\"293\":1,\"1332\":1},\"1\":{\"1252\":1,\"3124\":1,\"3128\":1}}],[\"科学计数法\",{\"1\":{\"2905\":1}}],[\"科学计算\",{\"1\":{\"2177\":1}}],[\"透明操作\",{\"1\":{\"2889\":1}}],[\"透明增强\",{\"1\":{\"2337\":1}}],[\"便利性设计\",{\"1\":{\"2907\":1}}],[\"便捷性\",{\"1\":{\"2901\":1}}],[\"便捷的文件字符读取\",{\"1\":{\"2885\":1}}],[\"便于实现和扩展\",{\"1\":{\"3220\":1}}],[\"便于安全审计\",{\"1\":{\"3011\":1}}],[\"便于安全审计和问题排查\",{\"1\":{\"3010\":1}}],[\"便于跨服务问题定位\",{\"1\":{\"2960\":1}}],[\"便于问题诊断和修复\",{\"1\":{\"2958\":1}}],[\"便于问题定位\",{\"1\":{\"2940\":1,\"2947\":1}}],[\"便于调试\",{\"1\":{\"2930\":1}}],[\"便于分类和处理\",{\"1\":{\"2929\":1}}],[\"便于使用位运算计算索引\",{\"1\":{\"2616\":1}}],[\"便于使用和管理\",{\"1\":{\"1959\":1,\"1972\":1,\"1985\":1}}],[\"便于记忆和使用\",{\"1\":{\"2117\":1,\"2136\":1}}],[\"便于其他开发者理解和维护\",{\"1\":{\"2093\":1}}],[\"便于学习和记忆\",{\"1\":{\"2083\":1,\"2103\":1,\"2117\":1}}],[\"便于查找和管理\",{\"1\":{\"1958\":1}}],[\"便于查询\",{\"1\":{\"135\":1}}],[\"便于后续维护\",{\"1\":{\"1957\":1,\"1970\":1,\"1983\":1}}],[\"便于后续的维护和升级\",{\"1\":{\"1944\":1,\"1953\":1,\"1957\":1,\"1970\":1,\"1983\":1}}],[\"便于后续重构变量类型\",{\"1\":{\"468\":1}}],[\"便于管理和数据持久化\",{\"1\":{\"1530\":1}}],[\"便于进行单元测试\",{\"1\":{\"1216\":1}}],[\"便于代码的维护和复用\",{\"1\":{\"1216\":1}}],[\"便于hotspot与jrockit合并\",{\"1\":{\"715\":1}}],[\"便于并行处理和事件驱动编程\",{\"1\":{\"548\":1}}],[\"便于维护\",{\"1\":{\"292\":1,\"1086\":1,\"1944\":1}}],[\"供上层应用操作\",{\"1\":{\"2877\":1}}],[\"供给型接口\",{\"1\":{\"538\":1}}],[\"破坏封装性\",{\"1\":{\"2974\":1}}],[\"破坏缓冲机制\",{\"1\":{\"2873\":1}}],[\"破坏了栈的封装性\",{\"1\":{\"2557\":1,\"2564\":1}}],[\"懒加载策略\",{\"1\":{\"2871\":1}}],[\"懒加载初始化\",{\"1\":{\"2527\":1}}],[\"世界\",{\"1\":{\"2855\":1,\"2879\":1,\"2903\":2}}],[\"季节\",{\"1\":{\"2824\":1}}],[\"冬雪皑皑\",{\"1\":{\"2822\":1}}],[\"冬季\",{\"1\":{\"2821\":1}}],[\"秋高气爽\",{\"1\":{\"2822\":1}}],[\"秋季\",{\"1\":{\"2821\":1}}],[\"夏日炎炎\",{\"1\":{\"2822\":1}}],[\"夏季\",{\"1\":{\"2821\":1}}],[\"春暖花开\",{\"1\":{\"2822\":1}}],[\"春季\",{\"1\":{\"2821\":1}}],[\"末尾可省略分号\",{\"1\":{\"2818\":1}}],[\"末端标签\",{\"1\":{\"125\":1}}],[\"忘记添加break导致case穿透执行\",{\"1\":{\"2813\":1}}],[\"忘记调用flip\",{\"1\":{\"1235\":2,\"2920\":1}}],[\"违背java简洁的设计哲学\",{\"1\":{\"2802\":1}}],[\"违反依赖倒置原则\",{\"1\":{\"1212\":1}}],[\"违反接口隔离原则\",{\"1\":{\"1211\":1}}],[\"违反了里氏替换原则\",{\"1\":{\"1210\":1}}],[\"违反里氏替换原则的正方形类\",{\"1\":{\"2745\":1}}],[\"违反里氏替换原则\",{\"1\":{\"1210\":1,\"1215\":1}}],[\"违反开闭原则\",{\"1\":{\"1209\":1}}],[\"违反单一职责原则\",{\"1\":{\"1208\":1,\"2770\":1}}],[\"❌\",{\"1\":{\"2794\":6}}],[\"✅\",{\"1\":{\"2794\":10}}],[\"激活swarm\",{\"1\":{\"3250\":1}}],[\"激活用户账号\",{\"1\":{\"2759\":1}}],[\"激活profiles的方式\",{\"1\":{\"406\":1}}],[\"钻石问题\",{\"1\":{\"2753\":1}}],[\"耦合度高\",{\"1\":{\"2748\":1}}],[\"银联支付\",{\"1\":{\"2746\":1}}],[\"周长\",{\"1\":{\"2742\":1}}],[\"周期\",{\"1\":{\"169\":2}}],[\"周期性抽查存储空间\",{\"1\":{\"153\":1}}],[\"矩形实现\",{\"1\":{\"2742\":1}}],[\"矩阵乘法\",{\"1\":{\"2702\":1}}],[\"矩阵乘法实现\",{\"1\":{\"2183\":1}}],[\"矩阵a的列数必须等于矩阵b的行数\",{\"1\":{\"2183\":1}}],[\"矩阵运算\",{\"1\":{\"2177\":1}}],[\"矩阵相加\",{\"0\":{\"2174\":1},\"1\":{\"2174\":1}}],[\"矩阵转置\",{\"0\":{\"2173\":1},\"1\":{\"2173\":1}}],[\"圆形实现\",{\"1\":{\"2742\":1}}],[\"圆括号中的错误值和符号与include\",{\"1\":{\"125\":1}}],[\"汪汪叫\",{\"1\":{\"2736\":1}}],[\"捆绑在一起\",{\"1\":{\"2732\":1}}],[\"倒排索引+缓存+异步更新\",{\"1\":{\"2728\":1}}],[\"倒入依赖\",{\"1\":{\"307\":1}}],[\"电商系统商品搜索优化可采用\",{\"1\":{\"2728\":1}}],[\"步长为2的倍数通常意味着对数复杂度\",{\"1\":{\"2726\":1}}],[\"步骤不多说\",{\"1\":{\"991\":1}}],[\"步骤5\",{\"1\":{\"165\":1,\"166\":1}}],[\"步骤4\",{\"1\":{\"165\":1,\"166\":1}}],[\"步骤3\",{\"1\":{\"165\":1,\"166\":1}}],[\"步骤2\",{\"1\":{\"165\":1,\"166\":1}}],[\"步骤1\",{\"1\":{\"165\":1,\"166\":1}}],[\"步骤有问题\",{\"0\":{\"105\":1}}],[\"斐波那契数列迭代实现\",{\"1\":{\"2716\":1}}],[\"斐波那契数列递归实现\",{\"1\":{\"2711\":1}}],[\"摊还时间复杂度用于分析在一系列操作中\",{\"1\":{\"2704\":1}}],[\"摊还时间复杂度\",{\"0\":{\"2704\":1}}],[\"辅助空间和输出空间三部分\",{\"1\":{\"2703\":1}}],[\"极速增长\",{\"1\":{\"2702\":1}}],[\"极大改变了java编程方式\",{\"1\":{\"575\":1}}],[\"阶乘时间\",{\"1\":{\"2702\":1}}],[\"阶段等对文档进行分类\",{\"1\":{\"1958\":1}}],[\"阶段三\",{\"0\":{\"167\":1}}],[\"阶段二\",{\"0\":{\"166\":1}}],[\"阶段一\",{\"0\":{\"165\":1}}],[\"阶段\",{\"1\":{\"142\":1}}],[\"汉诺塔\",{\"1\":{\"2702\":1}}],[\"爆炸增长\",{\"1\":{\"2702\":1}}],[\"立方时间\",{\"1\":{\"2702\":1}}],[\"立即返回\",{\"1\":{\"3117\":1}}],[\"立即返回结果或错误\",{\"1\":{\"1318\":1}}],[\"立即重传丢失的报文段\",{\"1\":{\"3075\":1}}],[\"立即抛出异常\",{\"1\":{\"2949\":1}}],[\"立即关闭\",{\"1\":{\"633\":1}}],[\"归还连接\",{\"1\":{\"3241\":1}}],[\"归还连接到池\",{\"1\":{\"1326\":1}}],[\"归并排序\",{\"1\":{\"2702\":1}}],[\"温和增长\",{\"1\":{\"2702\":1}}],[\"温馨提示\",{\"1\":{\"1632\":1,\"1647\":1,\"3262\":1,\"3263\":1}}],[\"恒定\",{\"1\":{\"2702\":1}}],[\"条目数量一般不会太大\",{\"1\":{\"2696\":1}}],[\"条件分支\",{\"1\":{\"2809\":1}}],[\"条件运算符是java中唯一的三目运算符\",{\"1\":{\"2114\":1}}],[\"条件运算符\",{\"0\":{\"2114\":1},\"1\":{\"2114\":1}}],[\"条件表达式中避免否定判断\",{\"1\":{\"2061\":1}}],[\"条件体\",{\"1\":{\"2033\":1}}],[\"条件类\",{\"1\":{\"459\":1}}],[\"条件装配\",{\"1\":{\"421\":1}}],[\"条件判断的实现过程\",{\"1\":{\"415\":1}}],[\"条件判断\",{\"1\":{\"413\":1,\"459\":1,\"2078\":1}}],[\"条件查询\",{\"1\":{\"48\":2,\"85\":1}}],[\"永远不会被回收\",{\"1\":{\"2691\":1}}],[\"永久代最大大小\",{\"1\":{\"793\":1,\"827\":1,\"861\":1,\"895\":1}}],[\"永久代初始大小\",{\"1\":{\"793\":1,\"827\":1,\"861\":1,\"895\":1}}],[\"永久代\",{\"1\":{\"767\":1,\"2246\":1}}],[\"永久代大小难以确定\",{\"1\":{\"715\":1}}],[\"永久有效的数据\",{\"1\":{\"147\":1}}],[\"永久\",{\"1\":{\"113\":1}}],[\"略低于hashmap\",{\"1\":{\"2689\":1}}],[\"软件安装\",{\"0\":{\"3310\":1}}],[\"软件实体\",{\"1\":{\"2746\":1}}],[\"软件名\",{\"1\":{\"1840\":1}}],[\"软引用\",{\"1\":{\"2676\":1,\"2698\":1}}],[\"劣势\",{\"1\":{\"2672\":1}}],[\"旋转操作\",{\"0\":{\"2657\":1}}],[\"叔叔节点为黑色\",{\"1\":{\"2656\":4}}],[\"叔叔节点为红色\",{\"1\":{\"2656\":2}}],[\"树为空\",{\"1\":{\"2655\":1}}],[\"换取了迭代顺序的保证\",{\"1\":{\"2636\":1}}],[\"换行符等\",{\"1\":{\"472\":1}}],[\"浪费内存空间\",{\"1\":{\"2614\":1}}],[\"浪费系统资源\",{\"1\":{\"782\":1,\"813\":1,\"847\":1,\"881\":1,\"915\":1}}],[\"扰动函数\",{\"1\":{\"2596\":1,\"2599\":1}}],[\"扰动函数进行4次位运算\",{\"1\":{\"1196\":1}}],[\"学生类\",{\"1\":{\"2577\":1}}],[\"学习曲线\",{\"1\":{\"494\":1}}],[\"销毁会话\",{\"1\":{\"2525\":1}}],[\"真正的异步非阻塞\",{\"1\":{\"3080\":1}}],[\"真正的并发集合\",{\"1\":{\"2513\":1}}],[\"真实访问的服务器\",{\"1\":{\"1409\":3}}],[\"真实访问服务器\",{\"1\":{\"1409\":1}}],[\"仍需额外同步\",{\"1\":{\"2513\":1}}],[\"仍需注意迭代操作的线程安全\",{\"1\":{\"2513\":1}}],[\"仍需要使用synchronized或原子类\",{\"1\":{\"600\":1}}],[\"逆序\",{\"1\":{\"2498\":2}}],[\"逆序迭代器实现\",{\"1\":{\"2498\":1}}],[\"逆序迭代器\",{\"1\":{\"2498\":1}}],[\"唯一适合使用linkedlist的场景是需要在队列中间进行插入\",{\"1\":{\"2484\":1}}],[\"唯一不会oom的区域\",{\"1\":{\"707\":1}}],[\"出栈的元素\",{\"1\":{\"2551\":1}}],[\"出栈\",{\"1\":{\"2506\":1}}],[\"出队\",{\"1\":{\"2506\":1}}],[\"出队操作\",{\"0\":{\"2574\":1},\"1\":{\"2485\":1}}],[\"出队时通过cas原子更新头节点\",{\"1\":{\"2485\":1}}],[\"出队元素\",{\"1\":{\"2468\":1}}],[\"出现输入的界面都按\",{\"1\":{\"3245\":1}}],[\"出现的次数\",{\"1\":{\"1872\":1}}],[\"出现访问地址和用户名密码及安装成功\",{\"1\":{\"1677\":1}}],[\"出现每个节点镜像下载不到错误是镜像没推送上去\",{\"1\":{\"1637\":1}}],[\"出现对应的http状态码时\",{\"1\":{\"1385\":1}}],[\"出现在本连接中\",{\"1\":{\"1311\":1}}],[\"出现黑客攻击服务器\",{\"1\":{\"192\":1}}],[\"出现非正常url访问\",{\"1\":{\"192\":1}}],[\"出现\",{\"1\":{\"190\":1,\"1528\":1}}],[\"出现网络中断\",{\"1\":{\"171\":1}}],[\"出现长期占用内存的数据\",{\"1\":{\"152\":1}}],[\"队首元素\",{\"1\":{\"2468\":1}}],[\"队列头部元素\",{\"1\":{\"2574\":1}}],[\"队列操作\",{\"1\":{\"2542\":1}}],[\"队列为空\",{\"1\":{\"2485\":2}}],[\"队列为空时返回null\",{\"1\":{\"2476\":1}}],[\"队列为空时调用element\",{\"1\":{\"2476\":1}}],[\"队列已满\",{\"1\":{\"2477\":1}}],[\"队列已满时调用add\",{\"1\":{\"2477\":1}}],[\"队列满时返回false\",{\"1\":{\"2477\":1}}],[\"队列满时等待\",{\"1\":{\"642\":1}}],[\"队列大小\",{\"1\":{\"2468\":1}}],[\"队列实现\",{\"1\":{\"2461\":1}}],[\"队列等数据结构\",{\"1\":{\"2335\":1}}],[\"队列空时等待\",{\"1\":{\"642\":1}}],[\"队列选择\",{\"1\":{\"629\":1}}],[\"队列任务数\",{\"1\":{\"626\":1}}],[\"队列容量设置不合理\",{\"0\":{\"2539\":1}}],[\"队列容量\",{\"1\":{\"602\":1,\"622\":1,\"625\":1,\"3082\":1}}],[\"产品不存在\",{\"1\":{\"2949\":1}}],[\"产品id不能为空\",{\"1\":{\"2949\":1}}],[\"产品数量\",{\"1\":{\"2466\":1}}],[\"产生不可预测的迭代行为\",{\"1\":{\"2694\":1}}],[\"产生原因\",{\"1\":{\"2340\":1,\"2341\":1,\"2342\":1}}],[\"产生内存碎片\",{\"1\":{\"764\":1}}],[\"几乎所有方法都使用synchronized修饰\",{\"1\":{\"2454\":1}}],[\"几分钟就推完了可能是网络中断\",{\"1\":{\"1637\":1}}],[\"越界的索引\",{\"1\":{\"2439\":1}}],[\"留出头部信息空间\",{\"1\":{\"2433\":1}}],[\"留下30\",{\"1\":{\"166\":1}}],[\"古老实现\",{\"1\":{\"2410\":1}}],[\"古老的线程安全实现\",{\"1\":{\"2328\":1}}],[\"追踪\",{\"1\":{\"3109\":1}}],[\"追求插入和查找效率的场景\",{\"1\":{\"2391\":1}}],[\"追加的数据\",{\"1\":{\"2914\":1}}],[\"追加指定字符到此writer\",{\"1\":{\"2854\":1}}],[\"追加超出当前容量的内容\",{\"1\":{\"2271\":1}}],[\"追加操作\",{\"1\":{\"2265\":1}}],[\"追加日志输出\",{\"1\":{\"1734\":1}}],[\"追加字符串\",{\"1\":{\"200\":1}}],[\"综上所述\",{\"1\":{\"2358\":1}}],[\"综合代码质量平台\",{\"1\":{\"2017\":1}}],[\"综合比对\",{\"1\":{\"142\":1}}],[\"额外的包装对象\",{\"1\":{\"2358\":1}}],[\"额外参数\",{\"1\":{\"1621\":1,\"1753\":1}}],[\"间接访问\",{\"1\":{\"2358\":1}}],[\"间出现问题\",{\"1\":{\"125\":1}}],[\"紧凑存储\",{\"1\":{\"2358\":1}}],[\"连续内存空间\",{\"1\":{\"2503\":1,\"2511\":1}}],[\"连续的升序或降序序列\",{\"1\":{\"2357\":1}}],[\"连接工厂实现\",{\"1\":{\"3241\":1}}],[\"连接复用与池化\",{\"0\":{\"3241\":1}}],[\"连接复用\",{\"1\":{\"3218\":1}}],[\"连接性\",{\"1\":{\"3198\":1}}],[\"连接队列大小\",{\"1\":{\"3125\":1}}],[\"连接完成事件\",{\"1\":{\"3118\":1}}],[\"连接创建\",{\"1\":{\"3111\":1}}],[\"连接管理\",{\"1\":{\"3091\":1}}],[\"连接服务器\",{\"1\":{\"3065\":2,\"3117\":1}}],[\"连接关闭\",{\"1\":{\"2916\":1,\"2921\":1}}],[\"连接方式\",{\"1\":{\"2897\":1}}],[\"连接不上可能是防火墙拒绝了本地连接请求\",{\"1\":{\"1788\":1}}],[\"连接mongo\",{\"1\":{\"1736\":1}}],[\"连接nacos通过该dns连接\",{\"1\":{\"1685\":1}}],[\"连接超过重试次数\",{\"0\":{\"1669\":1}}],[\"连接超时数\",{\"1\":{\"3111\":1}}],[\"连接超时\",{\"1\":{\"1385\":1,\"3129\":1}}],[\"连接私服报\",{\"0\":{\"1666\":1}}],[\"连接skywalking\",{\"1\":{\"1548\":1}}],[\"连接oap\",{\"0\":{\"1546\":1}}],[\"连接\",{\"1\":{\"1501\":1}}],[\"连接失败\",{\"1\":{\"1337\":1}}],[\"连接泄漏\",{\"0\":{\"1336\":1},\"1\":{\"3090\":1}}],[\"连接数少且固定\",{\"1\":{\"2913\":1}}],[\"连接数少且固定的架构\",{\"1\":{\"1314\":1}}],[\"连接数据库\",{\"1\":{\"1607\":1}}],[\"连接数多且连接时间短的应用\",{\"1\":{\"1316\":1}}],[\"连接数较少但数据量大的场景\",{\"1\":{\"1238\":1}}],[\"连接数较多但数据量不大的场景\",{\"1\":{\"1238\":1}}],[\"连接目标java进程\",{\"1\":{\"807\":1,\"841\":1,\"875\":1,\"909\":1}}],[\"连接java程序与本地库\",{\"1\":{\"690\":1}}],[\"连接池指标\",{\"1\":{\"3111\":1}}],[\"连接池化与超时控制\",{\"1\":{\"3091\":1}}],[\"连接池等技术减少资源创建销毁开销\",{\"1\":{\"3089\":1}}],[\"连接池已关闭\",{\"1\":{\"1326\":1}}],[\"连接池用于管理网络连接\",{\"1\":{\"1326\":1}}],[\"连接池管理\",{\"1\":{\"1111\":1}}],[\"连接池的优点包括\",{\"1\":{\"373\":1}}],[\"连接池是一种优化数据库连接使用的技术\",{\"1\":{\"373\":1}}],[\"连接池\",{\"1\":{\"369\":1}}],[\"连接点\",{\"1\":{\"335\":1}}],[\"连接命令\",{\"0\":{\"198\":1}}],[\"连接时可以指定任意现有节点地址与端口\",{\"1\":{\"186\":1}}],[\"连接等\",{\"1\":{\"172\":1,\"1328\":1}}],[\"连接在一起\",{\"1\":{\"161\":1}}],[\"连接至主服务器\",{\"1\":{\"125\":1}}],[\"连接就绪\",{\"1\":{\"125\":2}}],[\"连接过多\",{\"1\":{\"125\":1}}],[\"连接到mongo\",{\"1\":{\"1734\":1}}],[\"连接到redis服务器\",{\"1\":{\"198\":1}}],[\"连接到主服务器时出错\",{\"1\":{\"125\":1}}],[\"连接到从服务器时出错\",{\"1\":{\"125\":1}}],[\"连接到本地mysql服务器\",{\"1\":{\"125\":1}}],[\"连接到该mysql服务器\",{\"1\":{\"125\":1}}],[\"连接到分片集群\",{\"1\":{\"70\":1}}],[\"连接到复制集\",{\"1\":{\"69\":1}}],[\"钱七\",{\"1\":{\"2329\":1}}],[\"赵六\",{\"1\":{\"2329\":1}}],[\"广泛应用于voip\",{\"1\":{\"3172\":1}}],[\"广泛用于aop编程\",{\"1\":{\"3004\":1}}],[\"广州\",{\"1\":{\"2329\":1}}],[\"广度等的规范\",{\"1\":{\"1946\":1}}],[\"女\",{\"1\":{\"2329\":2}}],[\"王五\",{\"1\":{\"2329\":1,\"2969\":1}}],[\"升序\",{\"1\":{\"2326\":2,\"2408\":1}}],[\"升级版本\",{\"1\":{\"1536\":1}}],[\"升级内核\",{\"0\":{\"1471\":1}}],[\"升级jdk版本\",{\"1\":{\"1237\":1,\"1557\":1}}],[\"升级策略\",{\"1\":{\"566\":1}}],[\"升级到tls\",{\"1\":{\"495\":1}}],[\"旧列表可被gc回收\",{\"1\":{\"2451\":1}}],[\"旧容量\",{\"1\":{\"2318\":2,\"2355\":2}}],[\"旧的表格式\",{\"1\":{\"125\":1}}],[\"旧的键文件\",{\"1\":{\"125\":1}}],[\"细粒度\",{\"1\":{\"2308\":1}}],[\"差距在大数据量时尤为明显\",{\"1\":{\"2511\":1}}],[\"差异\",{\"1\":{\"2297\":1}}],[\"差集\",{\"0\":{\"281\":1},\"1\":{\"2372\":1}}],[\"造成内存泄漏\",{\"1\":{\"2296\":1}}],[\"造成了短期内对redis的高强度操作从而导致问题\",{\"1\":{\"189\":1}}],[\"早期java实现选择后一直沿用\",{\"1\":{\"2295\":1}}],[\"早于4\",{\"1\":{\"125\":1}}],[\"历史原因\",{\"1\":{\"2295\":1}}],[\"历史版\",{\"1\":{\"1480\":1}}],[\"剖析string类的内部结构\",{\"1\":{\"2284\":1}}],[\"剖析其核心组件的发展脉络\",{\"1\":{\"559\":1}}],[\"较低\",{\"1\":{\"2861\":1}}],[\"较快增长\",{\"1\":{\"2702\":1}}],[\"较少随机访问的场景\",{\"1\":{\"2354\":1}}],[\"较少插入删除的场景\",{\"1\":{\"2354\":1}}],[\"较小的初始容量可减少内存浪费\",{\"1\":{\"2282\":1}}],[\"较大\",{\"1\":{\"166\":1}}],[\"少量\",{\"1\":{\"2310\":1}}],[\"少量固定字符串\",{\"1\":{\"2275\":1}}],[\"少量字符串操作\",{\"1\":{\"2201\":1}}],[\"盲目使用intern\",{\"1\":{\"2256\":1}}],[\"盲目调整大量参数\",{\"1\":{\"815\":1,\"849\":1,\"883\":1,\"917\":1}}],[\"尤其当集合达到较大规模后\",{\"1\":{\"2455\":1}}],[\"尤其适合需要自定义格式的场景\",{\"1\":{\"2211\":1}}],[\"尤其是希望将pod调度至某特定节点时\",{\"1\":{\"1660\":1}}],[\"尤其是在哈希表稀疏时\",{\"1\":{\"2639\":1}}],[\"尤其是在大型项目中\",{\"1\":{\"1007\":1}}],[\"尤其是在复杂的链式调用中\",{\"1\":{\"499\":1}}],[\"尤其是遗留系统维护\",{\"1\":{\"521\":1}}],[\"尤其是yaml文件\",{\"1\":{\"410\":1}}],[\"稀疏矩阵\",{\"1\":{\"2178\":1}}],[\"稀释集中到期的key的数量\",{\"1\":{\"190\":1}}],[\"像素点矩阵表示\",{\"1\":{\"2177\":1}}],[\"像sso一样\",{\"1\":{\"304\":1}}],[\"象棋\",{\"1\":{\"2177\":1}}],[\"棋盘游戏\",{\"1\":{\"2177\":1}}],[\"图像处理\",{\"1\":{\"2177\":1}}],[\"图形处理中的矩阵操作\",{\"1\":{\"2177\":1}}],[\"图片\",{\"1\":{\"1627\":1,\"1628\":1,\"1629\":1,\"1716\":1,\"1717\":1,\"1718\":1,\"2830\":1,\"2839\":1}}],[\"图片引入\",{\"1\":{\"30\":1}}],[\"图片增强\",{\"0\":{\"22\":1}}],[\"始终显式指定编码\",{\"1\":{\"2884\":1}}],[\"始终显式指定字符编码\",{\"1\":{\"2860\":1}}],[\"始终使用inputstreamreader并显式指定编码\",{\"1\":{\"2885\":1}}],[\"始终使用缓冲字符流\",{\"1\":{\"2860\":1}}],[\"始终使用带缓冲区的read\",{\"1\":{\"2848\":1}}],[\"始终返回true\",{\"1\":{\"2437\":1,\"2494\":1,\"2552\":1,\"2573\":1}}],[\"始终检查数组边界\",{\"1\":{\"2158\":1}}],[\"始终在循环中检查等待条件\",{\"1\":{\"667\":1}}],[\"死循环是指循环条件始终为true\",{\"1\":{\"2138\":1}}],[\"死锁是指两个或多个线程互相持有对方需要的锁\",{\"1\":{\"1128\":1}}],[\"死锁四要素\",{\"1\":{\"648\":1}}],[\"死锁的产生与避免\",{\"0\":{\"648\":1}}],[\"死锁\",{\"1\":{\"590\":1}}],[\"良好\",{\"1\":{\"2125\":1}}],[\"良好的文档自动化工具可以帮助维护人员快速理解项目的设计和实现\",{\"1\":{\"1983\":1}}],[\"良好的文档自动化工具可以帮助开发者自动创建\",{\"1\":{\"1983\":1}}],[\"良好的文档自动化工具可以确保项目的所有文档都得到妥善的创建\",{\"1\":{\"1983\":1}}],[\"良好的文档自动化工具可以提高开发效率\",{\"1\":{\"1981\":1}}],[\"良好的文档生态系统可以帮助维护人员快速理解项目的设计和实现\",{\"1\":{\"1970\":1}}],[\"良好的文档生态系统可以帮助开发者快速创建\",{\"1\":{\"1970\":1}}],[\"良好的文档生态系统可以确保项目的所有文档都得到妥善的创建\",{\"1\":{\"1970\":1}}],[\"良好的文档生态系统可以提高开发效率\",{\"1\":{\"1968\":1}}],[\"良好的文档管理体系可以帮助维护人员快速理解项目的设计和实现\",{\"1\":{\"1957\":1}}],[\"良好的文档管理体系可以帮助开发者快速找到所需的文档\",{\"1\":{\"1957\":1}}],[\"良好的文档管理体系可以确保项目的所有文档都得到妥善的组织\",{\"1\":{\"1957\":1}}],[\"良好的文档管理体系可以提高开发效率\",{\"1\":{\"1955\":1}}],[\"良好的api文档可以帮助维护人员快速理解api的设计和实现\",{\"1\":{\"1944\":1}}],[\"良好的api文档可以帮助开发者快速理解和使用api\",{\"1\":{\"1944\":1}}],[\"良好的api文档可以提高开发效率\",{\"1\":{\"1942\":1,\"1953\":1}}],[\"顺时针查找下一个节点\",{\"1\":{\"3086\":1}}],[\"顺时针螺旋遍历二维数组\",{\"1\":{\"1162\":1}}],[\"顺序读取\",{\"1\":{\"2889\":1,\"2897\":1}}],[\"顺序\",{\"1\":{\"2752\":1}}],[\"顺序查找算法\",{\"1\":{\"2721\":1}}],[\"顺序访问\",{\"1\":{\"2354\":1}}],[\"顺序执行\",{\"1\":{\"2123\":1}}],[\"顺序结构是程序中最基本的流程控制结构\",{\"1\":{\"2123\":1}}],[\"顺序结构\",{\"0\":{\"2123\":1}}],[\"游戏开发\",{\"1\":{\"2119\":1,\"2177\":1}}],[\"驱动行为\",{\"1\":{\"2992\":1}}],[\"驱动程序等\",{\"1\":{\"2119\":1}}],[\"驱逐\",{\"1\":{\"157\":1}}],[\"括号运算符\",{\"1\":{\"2115\":1}}],[\"括号标色\",{\"0\":{\"299\":1}}],[\"嵌套流关闭时\",{\"1\":{\"2860\":1}}],[\"嵌套循环的时间复杂度分析需考虑各层循环变量之间的关系\",{\"1\":{\"2726\":1}}],[\"嵌套循环打印二维数组\",{\"0\":{\"2214\":1}}],[\"嵌套for循环\",{\"1\":{\"2170\":1}}],[\"嵌套条件运算符\",{\"1\":{\"2114\":1}}],[\"嵌入式服务器等特性\",{\"1\":{\"398\":1}}],[\"嵌入式服务器\",{\"1\":{\"125\":1,\"391\":1}}],[\"乘法的优先级高于加法\",{\"1\":{\"2119\":1}}],[\"乘法赋值\",{\"1\":{\"2113\":1}}],[\"乘法\",{\"1\":{\"2109\":1}}],[\"丢失了小数部分\",{\"1\":{\"2101\":1}}],[\"丢弃\",{\"1\":{\"1940\":1}}],[\"丢弃队列中最旧的任务\",{\"1\":{\"634\":1}}],[\"精度丢失\",{\"1\":{\"2104\":1}}],[\"精度\",{\"1\":{\"2099\":2}}],[\"精确匹配\",{\"1\":{\"1392\":1,\"1393\":1}}],[\"精确控制构件的版本\",{\"1\":{\"987\":1}}],[\"范围验证注解\",{\"1\":{\"3003\":1}}],[\"范围查询效率\",{\"1\":{\"2671\":1}}],[\"范围\",{\"1\":{\"2099\":5}}],[\"范例2\",{\"1\":{\"193\":1}}],[\"范例1\",{\"1\":{\"193\":1}}],[\"冗余注释\",{\"1\":{\"2094\":1}}],[\"算术运算符用于执行基本的数学运算\",{\"1\":{\"2109\":1}}],[\"算术运算符\",{\"0\":{\"2109\":1}}],[\"算术异常\",{\"1\":{\"2079\":1}}],[\"算法设计题\",{\"1\":{\"1175\":1}}],[\"算法实现和性能优化等多个方面\",{\"1\":{\"1157\":1}}],[\"深拷贝对象\",{\"1\":{\"3007\":2}}],[\"深入网络编程的核心设计思想包括\",{\"1\":{\"3089\":1}}],[\"深入探讨反射机制在框架开发\",{\"1\":{\"2996\":1}}],[\"深入理解sip\",{\"0\":{\"3200\":1}}],[\"深入理解注解需要掌握其底层实现原理\",{\"1\":{\"3143\":1}}],[\"深入理解注解\",{\"0\":{\"3142\":1}}],[\"深入理解网络编程需要掌握tcp\",{\"1\":{\"3072\":1}}],[\"深入理解网络编程\",{\"0\":{\"3071\":1}}],[\"深入理解泛型\",{\"0\":{\"3030\":1}}],[\"深入理解反射的执行流程\",{\"1\":{\"2977\":1}}],[\"深入理解异常处理需要掌握异常的底层实现机制\",{\"1\":{\"2933\":1}}],[\"深入理解异常\",{\"0\":{\"2932\":1}}],[\"深化\",{\"0\":{\"2932\":1}}],[\"深圳\",{\"1\":{\"2329\":1}}],[\"深层嵌套\",{\"1\":{\"2061\":1}}],[\"深度\",{\"1\":{\"1946\":1}}],[\"深度思考题回答\",{\"1\":{\"43\":1,\"54\":1,\"64\":1,\"75\":1}}],[\"深度思考题\",{\"0\":{\"43\":1,\"54\":1,\"64\":1,\"75\":1,\"95\":1,\"212\":1,\"317\":1,\"331\":1,\"344\":1,\"359\":1,\"373\":1,\"387\":1,\"398\":1,\"411\":1,\"423\":1,\"434\":1,\"445\":1,\"456\":1,\"493\":1,\"520\":1,\"533\":1,\"555\":1,\"569\":1,\"602\":1,\"618\":1,\"634\":1,\"651\":1,\"668\":1,\"686\":1,\"703\":1,\"720\":1,\"738\":1,\"756\":1,\"784\":1,\"818\":1,\"852\":1,\"886\":1,\"920\":1,\"932\":1,\"945\":1,\"967\":1,\"989\":1,\"1030\":1,\"1057\":1,\"1085\":1,\"1109\":1,\"1139\":1,\"1155\":1,\"1170\":1,\"1195\":1,\"1216\":1,\"1238\":1,\"1254\":1,\"1278\":1,\"1304\":1,\"1347\":1,\"1953\":1,\"1966\":1,\"1979\":1,\"1992\":1,\"2014\":1,\"2029\":1,\"2041\":1,\"2085\":1,\"2095\":1,\"2105\":1,\"2119\":1,\"2138\":1,\"2160\":1,\"2182\":1,\"2206\":1,\"2233\":1,\"2281\":1,\"2353\":1,\"2390\":1,\"2425\":1,\"2453\":1,\"2482\":1,\"2510\":1,\"2540\":1,\"2564\":1,\"2588\":1,\"2616\":1,\"2643\":1,\"2672\":1,\"2695\":1,\"2725\":1,\"2751\":1,\"2778\":1,\"2790\":1,\"2802\":1,\"2814\":1,\"2826\":1,\"2837\":1,\"2849\":1,\"2861\":1,\"2873\":1,\"2885\":1,\"2897\":1,\"2909\":1,\"2921\":1,\"2931\":1,\"2942\":1,\"2960\":1,\"2975\":1,\"2994\":1,\"3011\":1,\"3029\":1,\"3070\":1,\"3091\":1,\"3111\":1,\"3130\":1,\"3141\":1,\"3154\":1,\"3170\":1,\"3197\":1,\"3226\":1},\"1\":{\"317\":2,\"331\":2,\"344\":2,\"359\":2,\"373\":2,\"387\":2,\"1953\":2,\"1966\":2,\"1979\":2,\"1992\":2}}],[\"卫语句优化多层嵌套\",{\"1\":{\"2061\":1}}],[\"尽可能使用小范围的权限修饰符\",{\"1\":{\"2800\":1}}],[\"尽早返回\",{\"1\":{\"2061\":1}}],[\"尽量批量处理\",{\"1\":{\"2872\":1,\"2993\":1}}],[\"尽量保证新版本的库兼容旧版本的api\",{\"1\":{\"1028\":1}}],[\"尽量减小同步代码块的范围\",{\"1\":{\"599\":1}}],[\"尽量使用接口而非具体实现类\",{\"1\":{\"2974\":1}}],[\"尽量使用直接调用而非反射调用\",{\"1\":{\"1276\":1}}],[\"尽量使用细粒度的锁\",{\"1\":{\"1138\":1}}],[\"尽量使用官方的\",{\"1\":{\"1026\":1}}],[\"尽量使用spring\",{\"1\":{\"386\":1}}],[\"尽量使用spring提供的模板类\",{\"1\":{\"372\":1}}],[\"尽量使用声明式事务管理\",{\"1\":{\"358\":1}}],[\"尽量使用构造函数注入\",{\"1\":{\"330\":1}}],[\"尽量使用聚合管道\",{\"1\":{\"63\":1}}],[\"尽量使用$set操作符而不是替换整个文档\",{\"1\":{\"53\":1}}],[\"尽量将$match放在前面\",{\"1\":{\"63\":1}}],[\"尽量避免全表扫描\",{\"1\":{\"53\":1}}],[\"边界采样\",{\"1\":{\"3104\":1}}],[\"边界检查\",{\"1\":{\"2291\":1,\"2296\":1}}],[\"边界条件\",{\"1\":{\"2137\":1}}],[\"边界值测试\",{\"1\":{\"2047\":1}}],[\"边缘计算\",{\"1\":{\"1117\":1}}],[\"至少应记录异常信息\",{\"1\":{\"2959\":1}}],[\"至少会执行一次循环体\",{\"1\":{\"2138\":1}}],[\"至少记录日志\",{\"1\":{\"2037\":1}}],[\"至此文件定期执行脚本拉取源文件同步到新文件夹中就实现了\",{\"1\":{\"1504\":1}}],[\"至此\",{\"1\":{\"165\":1,\"166\":1,\"169\":1,\"1764\":1}}],[\"右侧\",{\"1\":{\"2905\":1}}],[\"右对齐\",{\"1\":{\"2905\":1}}],[\"右旋操作\",{\"1\":{\"2657\":1}}],[\"右孩子索引\",{\"1\":{\"2580\":1}}],[\"右子节点索引\",{\"1\":{\"2472\":1}}],[\"右移赋值\",{\"1\":{\"2113\":1}}],[\"右移\",{\"1\":{\"2112\":1}}],[\"右大括号单独成行\",{\"1\":{\"2033\":1}}],[\"右边三个点\",{\"1\":{\"1712\":1}}],[\"逗号后保留一个空格\",{\"1\":{\"2032\":1}}],[\"缩进与空格\",{\"0\":{\"2032\":1}}],[\"培养团队规范意识更重要\",{\"1\":{\"2028\":1}}],[\"培训新规范和工具使用\",{\"1\":{\"2027\":1}}],[\"质量门禁设置\",{\"0\":{\"2021\":1}}],[\"团队结构匹配度\",{\"1\":{\"2014\":1}}],[\"领域行为\",{\"1\":{\"2007\":1}}],[\"领域模型层\",{\"1\":{\"2007\":2}}],[\"经典四层架构\",{\"0\":{\"2007\":1}}],[\"经验值是如果超过60\",{\"1\":{\"1884\":1}}],[\"人员实体类\",{\"1\":{\"2329\":1}}],[\"人员年龄\",{\"1\":{\"2091\":1}}],[\"人员姓名\",{\"1\":{\"2091\":1}}],[\"人员\",{\"1\":{\"1971\":1}}],[\"人工审核及确认\",{\"1\":{\"990\":1}}],[\"审核结果\",{\"1\":{\"1975\":1}}],[\"审核人员列表\",{\"1\":{\"1975\":1}}],[\"审核者\",{\"1\":{\"1971\":1}}],[\"审核流程\",{\"1\":{\"1971\":1}}],[\"审计日志\",{\"1\":{\"2993\":1,\"3011\":1}}],[\"审计日志设置\",{\"1\":{\"1738\":1}}],[\"审计展示类型\",{\"1\":{\"1738\":1}}],[\"审计功能可以用来记录用户对数据库的所有相关操作\",{\"1\":{\"1738\":1}}],[\"颜色\",{\"1\":{\"1946\":1}}],[\"家庭\",{\"1\":{\"1940\":1}}],[\"路由等独立服务\",{\"1\":{\"3228\":1}}],[\"路由表接口\",{\"1\":{\"3212\":1}}],[\"路由表和网络接口信息\",{\"1\":{\"3099\":1}}],[\"路由过程主要基于以下信息\",{\"1\":{\"3211\":1}}],[\"路由规则与处理流程\",{\"0\":{\"3211\":1}}],[\"路由器等存在的故障减小了问题的范围\",{\"1\":{\"1917\":1}}],[\"路径存在\",{\"1\":{\"1764\":1}}],[\"路径和上面一致为\",{\"1\":{\"1694\":1}}],[\"路径为文件且不为空则进行删除\",{\"1\":{\"286\":1}}],[\"路径\",{\"1\":{\"125\":1,\"1393\":1,\"1823\":2,\"3246\":2}}],[\"路径导航\",{\"1\":{\"5\":1,\"8\":1}}],[\"鉴于上述几点都无法解决\",{\"1\":{\"1910\":1}}],[\"杀进程\",{\"1\":{\"1892\":1}}],[\"压测\",{\"1\":{\"1887\":1}}],[\"压缩后\",{\"1\":{\"2914\":1}}],[\"压缩后的nginx路径\",{\"1\":{\"1416\":1}}],[\"压缩缓冲区\",{\"1\":{\"2914\":2}}],[\"压缩目录\",{\"1\":{\"1862\":2}}],[\"压缩命令\",{\"0\":{\"1862\":1},\"1\":{\"1835\":1}}],[\"压缩包\",{\"1\":{\"1730\":1}}],[\"压缩到指定的输出流\",{\"1\":{\"286\":1}}],[\"压缩下载工具类\",{\"1\":{\"286\":1}}],[\"压缩\",{\"1\":{\"141\":1,\"1898\":1}}],[\"太大了\",{\"1\":{\"1887\":1}}],[\"太大则浪费内存\",{\"1\":{\"1342\":1}}],[\"剩余3415m\",{\"1\":{\"1887\":1}}],[\"剩余可扩展的百分比\",{\"1\":{\"1833\":1}}],[\"剩余可扩展的空间\",{\"1\":{\"1833\":1}}],[\"没报连接不上就是通的\",{\"1\":{\"1916\":1}}],[\"没什么程序在跑\",{\"1\":{\"1887\":1}}],[\"没有则去远程仓库找该镜像\",{\"1\":{\"3245\":1}}],[\"没有泛型的情况\",{\"1\":{\"3017\":1}}],[\"没有具体实现\",{\"1\":{\"2753\":1}}],[\"没有其他强引用时可以被回收\",{\"1\":{\"2691\":1}}],[\"没有其他用户的请求我就处理你的\",{\"1\":{\"1396\":1}}],[\"没有同步机制\",{\"1\":{\"2454\":1}}],[\"没有提供修改方法\",{\"1\":{\"2336\":1}}],[\"没有初始化和更新表达式\",{\"1\":{\"2138\":1}}],[\"没有任何回复\",{\"1\":{\"1940\":1}}],[\"没有任何信息就表示删除成功了\",{\"1\":{\"1725\":1}}],[\"没有放开redis端口\",{\"1\":{\"1788\":1}}],[\"没有装net\",{\"1\":{\"1735\":1}}],[\"没有装libcrypto\",{\"1\":{\"1735\":1}}],[\"没有的话\",{\"1\":{\"1654\":1,\"1704\":1}}],[\"没有的话重启服务\",{\"1\":{\"1504\":1}}],[\"没有unzip命令需要下载离线插件\",{\"1\":{\"1636\":1}}],[\"没有足够的内存\",{\"1\":{\"1558\":1}}],[\"没有找到就用这个命令搜索\",{\"1\":{\"1531\":1}}],[\"没有安装则手动安装\",{\"1\":{\"1501\":1}}],[\"没有安装ssl模块的情况\",{\"1\":{\"1416\":1}}],[\"没有实现add\",{\"1\":{\"2358\":1}}],[\"没有实现\",{\"1\":{\"1206\":1}}],[\"没有编译期检查\",{\"1\":{\"1086\":1}}],[\"没有引用传递\",{\"1\":{\"1058\":1}}],[\"没有统一标准\",{\"1\":{\"818\":1,\"852\":1,\"886\":1,\"920\":1}}],[\"没有空值检查\",{\"1\":{\"517\":1}}],[\"没有过期\",{\"1\":{\"306\":2}}],[\"没有为预处理语句中的参数提供数据\",{\"1\":{\"125\":1}}],[\"没有为主机\",{\"1\":{\"125\":1}}],[\"没有注册的\",{\"1\":{\"125\":1}}],[\"没有打开的光标\",{\"1\":{\"125\":1}}],[\"没有默认值\",{\"1\":{\"125\":2,\"1079\":2}}],[\"没有抓到该语句\",{\"1\":{\"114\":1}}],[\"没有服务在做写入操作\",{\"1\":{\"97\":1}}],[\"既可读又可写\",{\"1\":{\"3117\":1}}],[\"既保证线程安全又提供良好性能\",{\"1\":{\"2041\":1}}],[\"既通过connect调用创建的tcp连接\",{\"1\":{\"1886\":1}}],[\"既然\",{\"1\":{\"306\":1}}],[\"千字节\",{\"1\":{\"1884\":1}}],[\"串\",{\"1\":{\"1872\":1}}],[\"往日志里面输出\",{\"1\":{\"1867\":1}}],[\"级联创建目录\",{\"1\":{\"1865\":1}}],[\"跳表\",{\"1\":{\"2363\":1,\"2518\":1}}],[\"跳转结构用于改变程序的执行流程\",{\"1\":{\"2131\":1}}],[\"跳转结构\",{\"0\":{\"2131\":1}}],[\"跳出循环\",{\"1\":{\"2078\":1,\"2132\":1}}],[\"跳到文件头\",{\"1\":{\"1857\":1}}],[\"跳到文件最后\",{\"1\":{\"1857\":1}}],[\"跳过的字节数\",{\"1\":{\"3126\":1}}],[\"跳过静态字段\",{\"1\":{\"3007\":1}}],[\"跳过并丢弃n个字符的数据\",{\"1\":{\"2853\":1}}],[\"跳过并丢弃n个字节的数据\",{\"1\":{\"2841\":1}}],[\"跳过已下载的字节\",{\"1\":{\"2849\":1}}],[\"跳过当前循环\",{\"1\":{\"2078\":1,\"2133\":1}}],[\"跳过非字母数字字符\",{\"1\":{\"1165\":1}}],[\"跳过测试执行\",{\"1\":{\"950\":1}}],[\"跳过测试\",{\"0\":{\"950\":1}}],[\"跳过了合法数据的redis数据缓存阶段\",{\"1\":{\"192\":1}}],[\"跳过未知参数\",{\"1\":{\"125\":1}}],[\"百分比\",{\"1\":{\"1809\":1}}],[\"磁盘写入速度差不多140m每秒\",{\"1\":{\"1887\":1}}],[\"磁盘io情况监控\",{\"0\":{\"1884\":1},\"1\":{\"1835\":1}}],[\"磁盘镜像满了\",{\"0\":{\"1801\":1}}],[\"磁盘满\",{\"1\":{\"125\":1}}],[\"守护程序通信的工具都可以使用\",{\"1\":{\"3250\":1}}],[\"守护程序\",{\"1\":{\"1796\":1}}],[\"守护进程设置no\",{\"1\":{\"1788\":1}}],[\"守护进程的表格的程序\",{\"1\":{\"1504\":1}}],[\"究其原因是因为强制把redis快照关闭了导致不能持久化的问题\",{\"1\":{\"1788\":1}}],[\"采样策略\",{\"1\":{\"3104\":1}}],[\"采取端口监听查看方式\",{\"1\":{\"1786\":1}}],[\"采取查看进程方式\",{\"1\":{\"1786\":1}}],[\"采用事件驱动模型处理sip消息\",{\"1\":{\"3240\":1}}],[\"采用主从复制或集群技术保证数据可靠性\",{\"1\":{\"3228\":1}}],[\"采用主从reactor多线程模型\",{\"1\":{\"1347\":1}}],[\"采用时序数据库存储通话记录和统计信息\",{\"1\":{\"3228\":1}}],[\"采用异步非阻塞i\",{\"1\":{\"3228\":1}}],[\"采用异步方式处理监控数据\",{\"1\":{\"3111\":1}}],[\"采用dpdk等技术绕过内核直接操作网络接口\",{\"1\":{\"3228\":1}}],[\"采用turn服务器中继媒体流\",{\"1\":{\"3224\":1}}],[\"采用文本格式的消息使得sip易于调试和扩展\",{\"1\":{\"3220\":1}}],[\"采用sip\",{\"1\":{\"3194\":1}}],[\"采用ssl加密后\",{\"1\":{\"114\":1}}],[\"采用小驼峰式命名\",{\"1\":{\"2784\":1}}],[\"采用michael\",{\"1\":{\"2473\":1}}],[\"采用了不可变设计模式\",{\"1\":{\"2378\":1}}],[\"采用5位字符串格式\",{\"1\":{\"2050\":1}}],[\"采用延迟初始化减少启动开销\",{\"1\":{\"2041\":1}}],[\"采用延迟计算策略生成异常消息\",{\"1\":{\"506\":1}}],[\"采用k\",{\"1\":{\"2033\":1}}],[\"采用反转域名形式\",{\"1\":{\"2000\":1}}],[\"采用名词\",{\"1\":{\"1998\":1}}],[\"采用名词或名词短语\",{\"1\":{\"1996\":1}}],[\"采用动词或动词短语\",{\"1\":{\"1997\":1}}],[\"采用完全独立于编程语言的文本格式来存储和表示数据\",{\"1\":{\"1437\":1}}],[\"采用分布式架构横向扩展\",{\"1\":{\"3225\":1}}],[\"采用分布式架构\",{\"1\":{\"1347\":1,\"3228\":1}}],[\"采用fec\",{\"1\":{\"1116\":1}}],[\"采用无状态设计\",{\"1\":{\"1112\":1}}],[\"采用netty等nio框架\",{\"1\":{\"1111\":1}}],[\"采用端口范围规划\",{\"1\":{\"1105\":1}}],[\"采用ice\",{\"1\":{\"1104\":1}}],[\"采用并发设计\",{\"1\":{\"777\":1}}],[\"采用高效的标记\",{\"1\":{\"776\":1}}],[\"采用一种类似c语言结构体的伪结构来存储数据\",{\"1\":{\"723\":1}}],[\"采用标记\",{\"1\":{\"713\":2,\"767\":2,\"776\":1}}],[\"采用渐进式升级\",{\"1\":{\"566\":1}}],[\"采用内置的函数接口\",{\"1\":{\"287\":2}}],[\"采用随机获取数据的方式作为待检测删除数据\",{\"1\":{\"157\":1}}],[\"采用随机抽取的策略\",{\"1\":{\"153\":1}}],[\"退出循环\",{\"1\":{\"2600\":1}}],[\"退出后\",{\"1\":{\"1787\":1}}],[\"退出\",{\"1\":{\"1780\":1}}],[\"退出工作\",{\"1\":{\"610\":1}}],[\"项\",{\"1\":{\"1775\":1}}],[\"项目级补充规范\",{\"1\":{\"2029\":1}}],[\"项目内保持统一的命名风格\",{\"1\":{\"1994\":1}}],[\"项目中流水线构建deployment容器所需的配置文件\",{\"0\":{\"1698\":1}}],[\"项目中用workflow有点问题\",{\"1\":{\"1551\":1}}],[\"项目采用的是nacos\",{\"1\":{\"1696\":1}}],[\"项目代码配置\",{\"0\":{\"1695\":1}}],[\"项目管理中配置镜像仓库密钥\",{\"0\":{\"1681\":1}}],[\"项目所需中间件\",{\"1\":{\"1678\":1}}],[\"项目文件打包\",{\"0\":{\"1645\":1}}],[\"项目打包\",{\"1\":{\"1610\":1}}],[\"项目yml文件中配置oap环境变量\",{\"1\":{\"1548\":1}}],[\"项目配置\",{\"0\":{\"1548\":1}}],[\"项目的依赖关系可能会变得非常复杂\",{\"1\":{\"1030\":1}}],[\"项目的体积会越来越大\",{\"1\":{\"291\":1}}],[\"项目可能会依赖一些它并不需要的库\",{\"1\":{\"1030\":1}}],[\"项目在github或其它托管平台的地址\",{\"1\":{\"999\":1}}],[\"项目信息\",{\"1\":{\"999\":1}}],[\"项目信息管理等强大功能\",{\"1\":{\"934\":1}}],[\"项目git地址\",{\"1\":{\"992\":1}}],[\"项目地址\",{\"1\":{\"992\":1}}],[\"项目a依赖b\",{\"1\":{\"926\":1}}],[\"项目会执行main方法构建项目并加载ioc容器\",{\"1\":{\"463\":1}}],[\"项目结构\",{\"0\":{\"393\":1}}],[\"项目主页\",{\"0\":{\"0\":1}}],[\"授予远程连接权限\",{\"0\":{\"1775\":1}}],[\"授权\",{\"0\":{\"228\":1,\"452\":1},\"1\":{\"1775\":1}}],[\"授权访问\",{\"1\":{\"165\":1}}],[\"敲回车\",{\"1\":{\"1773\":1}}],[\"⾸先查询已安装的\",{\"1\":{\"1765\":1}}],[\"希望本文的内容对大家的学习或者工作具有一定的参考学习价值\",{\"1\":{\"1739\":1}}],[\"希望节省内存资源\",{\"1\":{\"818\":1,\"852\":1,\"886\":1,\"920\":1}}],[\"欢迎来到知道的越多\",{\"1\":{\"1733\":1}}],[\"名称=\",{\"1\":{\"2903\":1}}],[\"名称应准确描述其功能或含义\",{\"1\":{\"1994\":1}}],[\"名称\",{\"1\":{\"1892\":1,\"2702\":1}}],[\"名称name\",{\"1\":{\"1698\":1}}],[\"名字\",{\"1\":{\"997\":1}}],[\"处于哪台服务器\",{\"1\":{\"1696\":1}}],[\"处理新请求\",{\"1\":{\"3222\":1}}],[\"处理重传请求的示例代码\",{\"1\":{\"3222\":1}}],[\"处理其他请求\",{\"1\":{\"3218\":1}}],[\"处理其他请求方法\",{\"1\":{\"3208\":1}}],[\"处理注册请求\",{\"1\":{\"3218\":1}}],[\"处理注解逻辑\",{\"1\":{\"3147\":1}}],[\"处理invite请求\",{\"1\":{\"3208\":1,\"3218\":1}}],[\"处理io操作\",{\"1\":{\"3124\":1}}],[\"处理io事件和数据\",{\"1\":{\"3124\":1}}],[\"处理io事件\",{\"1\":{\"3083\":1}}],[\"处理io\",{\"1\":{\"3078\":1}}],[\"处理请求事件\",{\"1\":{\"3208\":1}}],[\"处理sip\",{\"1\":{\"3232\":1}}],[\"处理sip消息的创建\",{\"1\":{\"3204\":1}}],[\"处理sdp等负载内容\",{\"1\":{\"3205\":1}}],[\"处理udp\",{\"1\":{\"3204\":1}}],[\"处理utf\",{\"1\":{\"2884\":1}}],[\"处理效率高\",{\"1\":{\"3183\":1}}],[\"处理半包\",{\"1\":{\"3123\":1}}],[\"处理可读事件\",{\"1\":{\"3118\":1}}],[\"处理可能为空的流时\",{\"1\":{\"2896\":1}}],[\"处理就绪事件\",{\"1\":{\"3118\":1}}],[\"处理连接事件\",{\"1\":{\"3079\":1,\"3083\":1}}],[\"处理不同jdk版本差异\",{\"1\":{\"3010\":1}}],[\"处理不支持的编码时会抛出unsupportedencodingexception\",{\"1\":{\"2884\":1}}],[\"处理反射对模块化类的访问限制\",{\"1\":{\"3010\":1}}],[\"处理普通对象\",{\"1\":{\"3007\":1}}],[\"处理map\",{\"1\":{\"3007\":1}}],[\"处理集合\",{\"1\":{\"3007\":1}}],[\"处理数组\",{\"1\":{\"3007\":1}}],[\"处理数据时发生空指针异常\",{\"1\":{\"518\":1}}],[\"处理数据\",{\"1\":{\"95\":1,\"1338\":1,\"2921\":1,\"3066\":1}}],[\"处理已经拷贝过的对象\",{\"1\":{\"3007\":1}}],[\"处理枚举\",{\"1\":{\"3007\":1}}],[\"处理基本类型和包装类\",{\"1\":{\"3007\":1}}],[\"处理循环引用\",{\"1\":{\"3007\":1}}],[\"处理类结构变化\",{\"1\":{\"2993\":1}}],[\"处理\",{\"1\":{\"2959\":1}}],[\"处理和日志记录等方面\",{\"1\":{\"2944\":1}}],[\"处理结果\",{\"1\":{\"2921\":1}}],[\"处理模式\",{\"1\":{\"2913\":1}}],[\"处理字符数据时优先使用printwriter并显式指定编码\",{\"1\":{\"2908\":1}}],[\"处理特殊字符时选择合适的编码\",{\"1\":{\"2884\":1}}],[\"处理包含特殊unicode字符的文本时\",{\"1\":{\"2860\":1}}],[\"处理文本文件时\",{\"1\":{\"2860\":1}}],[\"处理元素\",{\"1\":{\"2513\":2}}],[\"处理value\",{\"1\":{\"2505\":3}}],[\"处理超时\",{\"1\":{\"3217\":1}}],[\"处理超时事件\",{\"1\":{\"3208\":1,\"3217\":1}}],[\"处理超时重传机制\",{\"1\":{\"1108\":1}}],[\"处理超过一定时间未支付的订单\",{\"1\":{\"2486\":1}}],[\"处理并发情况下的节点引用更新冲突\",{\"1\":{\"2485\":1}}],[\"处理索引无效情况\",{\"1\":{\"2450\":1}}],[\"处理大文件时\",{\"1\":{\"2861\":1}}],[\"处理大文件传输\",{\"1\":{\"1238\":1}}],[\"处理大容量情况\",{\"1\":{\"2438\":1}}],[\"处理失败\",{\"1\":{\"2071\":1}}],[\"处理中\",{\"1\":{\"2062\":1}}],[\"处理意外情况\",{\"1\":{\"2062\":1}}],[\"处理逻辑\",{\"1\":{\"2059\":1,\"2959\":1}}],[\"处理用户相关业务逻辑\",{\"1\":{\"2035\":1}}],[\"处理http请求和响应\",{\"1\":{\"2007\":1}}],[\"处理因系统原因引起的文件中特殊字符的问题\",{\"0\":{\"1869\":1},\"1\":{\"1835\":1}}],[\"处理2\",{\"1\":{\"1377\":1}}],[\"处理完成\",{\"1\":{\"1332\":1}}],[\"处理器等对象\",{\"1\":{\"1331\":1}}],[\"处理器映射\",{\"1\":{\"377\":1}}],[\"处理接收到的数据\",{\"1\":{\"1325\":1}}],[\"处理接受连接事件\",{\"1\":{\"1228\":1,\"2916\":1,\"3118\":1}}],[\"处理get请求并返回响应\",{\"1\":{\"1324\":1}}],[\"处理客户端读事件\",{\"1\":{\"1315\":1}}],[\"处理客户端连接请求\",{\"1\":{\"2921\":1}}],[\"处理客户端连接\",{\"1\":{\"1315\":1}}],[\"处理read事件\",{\"1\":{\"1315\":1}}],[\"处理accept事件\",{\"1\":{\"1315\":1}}],[\"处理机制\",{\"1\":{\"1240\":1}}],[\"处理长连接和大文件上传\",{\"1\":{\"1238\":1}}],[\"处理读取的数据\",{\"1\":{\"1228\":1,\"2916\":1}}],[\"处理读事件\",{\"1\":{\"1228\":1,\"2916\":1,\"3079\":1}}],[\"处理读操作\",{\"1\":{\"69\":1}}],[\"处理事件\",{\"1\":{\"1228\":1,\"1237\":1}}],[\"处理流包装节点流或其他处理流\",{\"1\":{\"1231\":1}}],[\"处理流组合使用示例\",{\"1\":{\"1222\":1}}],[\"处理流的组合使用\",{\"1\":{\"1222\":1}}],[\"处理流可以叠加使用\",{\"1\":{\"1222\":1}}],[\"处理流使用装饰器模式\",{\"1\":{\"1222\":1}}],[\"处理流\",{\"1\":{\"1222\":1}}],[\"处理对象\",{\"1\":{\"1221\":1}}],[\"处理单位\",{\"1\":{\"1221\":1}}],[\"处理订单失败\",{\"1\":{\"2953\":1}}],[\"处理订单逻辑\",{\"1\":{\"2948\":2}}],[\"处理订单\",{\"1\":{\"1044\":1}}],[\"处理业务逻辑\",{\"1\":{\"660\":1,\"3083\":1}}],[\"处理值\",{\"1\":{\"554\":2}}],[\"处理异常情况\",{\"1\":{\"1107\":1}}],[\"处理异常\",{\"1\":{\"491\":1,\"1243\":1,\"2450\":1,\"2959\":1}}],[\"处理响应事件\",{\"1\":{\"3208\":1}}],[\"处理响应快\",{\"1\":{\"1382\":1}}],[\"处理响应\",{\"1\":{\"471\":1,\"1431\":1,\"1432\":1}}],[\"处理作用在外部数据源上的查询时出现问题\",{\"1\":{\"125\":1}}],[\"处理后输出结果文档\",{\"1\":{\"58\":1}}],[\"意思是说redis配置了rdb存储快照\",{\"1\":{\"1788\":1}}],[\"意思就是上面启动命令是启动\",{\"1\":{\"1694\":1}}],[\"意味着将其从您的机器上移除\",{\"1\":{\"1675\":1}}],[\"报警邮件\",{\"1\":{\"1687\":1}}],[\"报错挂载目录没权限\",{\"1\":{\"1510\":1}}],[\"报错\",{\"1\":{\"1507\":1}}],[\"报错file\",{\"1\":{\"1005\":1}}],[\"遇到相关容器阻塞导致devops迟迟无法安装\",{\"1\":{\"1677\":1}}],[\"情况4\",{\"1\":{\"2904\":1}}],[\"情况\",{\"1\":{\"2873\":5}}],[\"情况3\",{\"1\":{\"2656\":2,\"2904\":1}}],[\"情况2\",{\"1\":{\"2656\":2,\"2904\":1}}],[\"情况1\",{\"1\":{\"2656\":2,\"2904\":1}}],[\"情况三\",{\"1\":{\"1669\":1}}],[\"情况二\",{\"1\":{\"1669\":1}}],[\"情况一\",{\"1\":{\"1669\":1}}],[\"搞一个外部存储\",{\"1\":{\"1667\":1}}],[\"顾名思义\",{\"1\":{\"1664\":1}}],[\"顾此失彼都会造成整体redis性能的下降\",{\"1\":{\"150\":1}}],[\"挂在配置文件\",{\"1\":{\"1694\":1}}],[\"挂在到的容器的\",{\"1\":{\"1661\":1}}],[\"挂载配置文件\",{\"0\":{\"1694\":1}}],[\"挂载到容器的\",{\"1\":{\"1578\":1,\"1595\":1}}],[\"挂载\",{\"1\":{\"1569\":1}}],[\"挂载方式\",{\"1\":{\"219\":1}}],[\"十六进制\",{\"1\":{\"2905\":1}}],[\"十进制\",{\"1\":{\"2905\":1}}],[\"十一\",{\"0\":{\"1663\":1}}],[\"十\",{\"0\":{\"1657\":1}}],[\"凭证需要调整\",{\"1\":{\"1656\":1}}],[\"凭证是项目代码仓库地址\",{\"1\":{\"1655\":1,\"1706\":1}}],[\"九\",{\"0\":{\"1651\":1}}],[\"推送\",{\"1\":{\"1641\":2,\"1799\":2}}],[\"推送镜像文件到仓库\",{\"1\":{\"1637\":1}}],[\"推荐做法\",{\"1\":{\"2948\":1}}],[\"推荐优先使用\",{\"1\":{\"2358\":1}}],[\"推荐用容器名而不用id\",{\"1\":{\"1641\":1}}],[\"推荐使用netty等成熟框架处理\",{\"1\":{\"3090\":1}}],[\"推荐使用standardcharsets类中的常量\",{\"1\":{\"2884\":1}}],[\"推荐使用try\",{\"1\":{\"2860\":1}}],[\"推荐使用file\",{\"1\":{\"2836\":1}}],[\"推荐使用inputstreamreader和outputstreamwriter指定字符编码\",{\"1\":{\"2833\":1}}],[\"推荐使用java并发包提供的线程安全集合\",{\"1\":{\"2356\":1}}],[\"推荐使用offer\",{\"1\":{\"2349\":1}}],[\"推荐使用\",{\"1\":{\"1569\":1,\"2885\":1}}],[\"推荐使用绝对路径\",{\"1\":{\"1548\":1,\"1697\":1}}],[\"推荐在java\",{\"1\":{\"545\":1}}],[\"推荐\",{\"0\":{\"3257\":1},\"1\":{\"517\":1,\"554\":1,\"1056\":1,\"1253\":1,\"2039\":1,\"2054\":1,\"2057\":1,\"2058\":1,\"2059\":1,\"2061\":1,\"2062\":1,\"2066\":1,\"2071\":1,\"2256\":1,\"2278\":1,\"2280\":1,\"2351\":1,\"2407\":1,\"2613\":1,\"2615\":1,\"2959\":2,\"3159\":1}}],[\"您稍后创建集群时\",{\"1\":{\"1635\":1}}],[\"您可以根据自己的需求变更下载的\",{\"1\":{\"1635\":1}}],[\"绝大多数下本机硬盘不可能有这么大\",{\"1\":{\"1632\":1}}],[\"六月\",{\"1\":{\"2126\":1}}],[\"六\",{\"0\":{\"1631\":1,\"1786\":1}}],[\"补充命令\",{\"1\":{\"1585\":1}}],[\"补集\",{\"0\":{\"281\":1}}],[\"裸机\",{\"0\":{\"1579\":1}}],[\"停掉服务\",{\"1\":{\"1736\":1}}],[\"停监听\",{\"1\":{\"1574\":1}}],[\"停止已运行的服务的容器\",{\"1\":{\"3246\":1}}],[\"停止容器\",{\"1\":{\"3245\":1}}],[\"停止防火墙\",{\"1\":{\"1923\":1}}],[\"停止和重启防火墙\",{\"0\":{\"1923\":1}}],[\"停止docker服务\",{\"1\":{\"1667\":1}}],[\"停止docker状态\",{\"1\":{\"1610\":1,\"1741\":1}}],[\"停止harbor\",{\"1\":{\"1630\":2,\"1719\":1}}],[\"停止mysql服务开机自启动\",{\"1\":{\"1585\":1}}],[\"停止mysql服务\",{\"1\":{\"1585\":1}}],[\"停止oracle\",{\"1\":{\"1574\":1}}],[\"停止\",{\"1\":{\"1417\":1,\"1469\":1,\"1687\":1,\"1834\":1,\"1882\":1}}],[\"停止nginx服务\",{\"1\":{\"1416\":1}}],[\"停止数据同步\",{\"1\":{\"169\":1}}],[\"拓扑图\",{\"1\":{\"1562\":1}}],[\"仪表盘\",{\"1\":{\"1562\":1}}],[\"抛弃官方提供的镜像\",{\"1\":{\"1549\":1}}],[\"抛出过于宽泛的exception\",{\"1\":{\"2948\":1}}],[\"抛出classcastexception\",{\"1\":{\"2509\":1,\"2668\":1}}],[\"抛出concurrentmodificationexception\",{\"1\":{\"2382\":1,\"2420\":1,\"2444\":1,\"2448\":1,\"2507\":1}}],[\"抛出illegalstateexception\",{\"1\":{\"2477\":1}}],[\"抛出indexoutofboundsexception\",{\"1\":{\"2450\":1}}],[\"抛出nosuchelementexception\",{\"1\":{\"2476\":1}}],[\"抛出nullpointerexception\",{\"1\":{\"2159\":1,\"2180\":1,\"2205\":1,\"2419\":1,\"2481\":1}}],[\"抛出unsupportedoperationexception\",{\"1\":{\"1194\":1,\"2342\":1}}],[\"抛出具体业务异常\",{\"1\":{\"1044\":1}}],[\"抛出异常\",{\"1\":{\"553\":1,\"2079\":1,\"2341\":1,\"2358\":2,\"2462\":1}}],[\"抛出异常消息\",{\"1\":{\"287\":2}}],[\"及以上版本中\",{\"1\":{\"3256\":1}}],[\"及以上复杂度的算法\",{\"1\":{\"2717\":1}}],[\"及格\",{\"1\":{\"2125\":1}}],[\"及时性原则示例\",{\"1\":{\"2949\":1}}],[\"及时性原则\",{\"0\":{\"2949\":1}}],[\"及时关闭不再使用的流资源\",{\"1\":{\"2836\":1}}],[\"及时检测并发修改\",{\"1\":{\"2428\":1}}],[\"及时更新或删除过时的注释\",{\"1\":{\"2094\":1}}],[\"及时更新文档\",{\"1\":{\"1953\":1}}],[\"及时清理对应的缓存项\",{\"1\":{\"3011\":1}}],[\"及时清理\",{\"1\":{\"532\":1,\"1138\":1}}],[\"及配置\",{\"1\":{\"1764\":1}}],[\"及\",{\"1\":{\"1536\":1}}],[\"搭建\",{\"1\":{\"1536\":1}}],[\"搭建主从\",{\"1\":{\"186\":1}}],[\"赋值运算符用于给变量赋值\",{\"1\":{\"2113\":1}}],[\"赋值运算符\",{\"0\":{\"2113\":1}}],[\"赋值给新对象\",{\"1\":{\"289\":1}}],[\"赋予所有权限\",{\"0\":{\"1901\":1}}],[\"赋予任何主机访问权限\",{\"0\":{\"1821\":1}}],[\"赋予执行权限\",{\"1\":{\"1747\":1}}],[\"赋予用户所有数据库的dbadmin权限\",{\"1\":{\"1736\":1}}],[\"赋予用户所有数据库的useradmin权限\",{\"1\":{\"1736\":1}}],[\"赋予用户所有数据库的读写权限\",{\"1\":{\"1736\":1}}],[\"赋予用户所有数据库的读权限\",{\"1\":{\"1736\":1}}],[\"赋予用户所有分片和复制集相关函数的管理权限\",{\"1\":{\"1736\":1}}],[\"赋予权限\",{\"0\":{\"1510\":1},\"1\":{\"1569\":1}}],[\"丰富的channelhandler机制\",{\"1\":{\"3123\":1}}],[\"丰富\",{\"1\":{\"1507\":1}}],[\"星期\",{\"1\":{\"1504\":1}}],[\"卸装\",{\"1\":{\"1504\":1}}],[\"卸载后\",{\"1\":{\"1778\":1}}],[\"卸载docker\",{\"0\":{\"3249\":1},\"1\":{\"1610\":1,\"1741\":1}}],[\"卸载docker安装较早版本即可\",{\"1\":{\"1507\":1}}],[\"卸载之前的docker\",{\"1\":{\"1610\":1,\"1741\":1}}],[\"卸载mariadb与依赖关系的软件包\",{\"1\":{\"1580\":1}}],[\"卸载完后不一定需要重启\",{\"1\":{\"1499\":1}}],[\"卸载最新版的内核\",{\"1\":{\"1496\":1}}],[\"卸载\",{\"0\":{\"1496\":1,\"1580\":1,\"1778\":1},\"1\":{\"1675\":1}}],[\"独立循环变量\",{\"1\":{\"2726\":1}}],[\"独立性\",{\"1\":{\"2044\":1}}],[\"独立启动\",{\"1\":{\"1503\":1}}],[\"独占锁仅允许一个线程访问\",{\"1\":{\"638\":1}}],[\"独占锁\",{\"1\":{\"638\":1}}],[\"嗯哼\",{\"1\":{\"1501\":1}}],[\"亮点是免费\",{\"1\":{\"1501\":1}}],[\"界面版本更为准确\",{\"1\":{\"3260\":1}}],[\"界面查看\",{\"1\":{\"3260\":1}}],[\"界面\",{\"1\":{\"1491\":2}}],[\"共\",{\"1\":{\"2953\":1}}],[\"共处理\",{\"1\":{\"2867\":1}}],[\"共复制\",{\"1\":{\"2856\":1}}],[\"共同构成了java程序的基本结构\",{\"1\":{\"2756\":1}}],[\"共需要下载三个类型\",{\"0\":{\"1481\":1}}],[\"共享底层数据\",{\"1\":{\"3130\":1}}],[\"共享\",{\"1\":{\"2308\":1}}],[\"共享可变状态必须进行同步\",{\"1\":{\"2039\":1}}],[\"共享锁允许多个线程同时访问\",{\"1\":{\"638\":1}}],[\"共享锁\",{\"1\":{\"638\":1}}],[\"共享内存大小\",{\"1\":{\"1882\":1}}],[\"共享内存模型\",{\"1\":{\"595\":1}}],[\"共享内存\",{\"1\":{\"125\":1}}],[\"难以跟踪\",{\"1\":{\"2138\":1}}],[\"难免需要升级内核\",{\"1\":{\"1471\":1}}],[\"难道所有的bean都创建\",{\"1\":{\"459\":1}}],[\"奇数选择器\",{\"1\":{\"1458\":1}}],[\"偶数选择器\",{\"1\":{\"1458\":1}}],[\"尾递归\",{\"1\":{\"2711\":1}}],[\"尾节点的元素\",{\"1\":{\"2497\":1}}],[\"尾节点\",{\"1\":{\"2497\":1}}],[\"尾节点也置为null\",{\"1\":{\"2497\":1}}],[\"尾节点也指向新节点\",{\"1\":{\"2497\":1}}],[\"尾节点已被其他线程修改\",{\"1\":{\"2485\":1}}],[\"尾部为最少访问\",{\"1\":{\"2512\":1}}],[\"尾部操作\",{\"1\":{\"2511\":1}}],[\"尾部插入\",{\"1\":{\"2503\":1}}],[\"尾部元素\",{\"1\":{\"2497\":2,\"2512\":1}}],[\"尾部删除\",{\"1\":{\"2327\":3}}],[\"尾部添加\",{\"1\":{\"2327\":3}}],[\"尾元素选择器\",{\"1\":{\"1458\":1}}],[\"尾插法\",{\"1\":{\"1196\":1}}],[\"兄弟选择器\",{\"1\":{\"1456\":2}}],[\"蓝色\",{\"1\":{\"1452\":1}}],[\"红色\",{\"1\":{\"1452\":1}}],[\"红黑树数据结构\",{\"0\":{\"2663\":1}}],[\"红黑树插入后修复\",{\"0\":{\"2656\":1}}],[\"红黑树是一种自平衡的二叉查找树\",{\"1\":{\"2650\":1}}],[\"红黑树特性\",{\"0\":{\"2650\":1}}],[\"红黑树的维护成本可能超过其带来的性能收益\",{\"1\":{\"2696\":1}}],[\"红黑树的旋转和变色操作开销较大\",{\"1\":{\"2671\":1}}],[\"红黑树的根节点\",{\"1\":{\"2648\":1}}],[\"红黑树的结构\",{\"1\":{\"2376\":1}}],[\"红黑树节点结构\",{\"0\":{\"2654\":1}}],[\"红黑树节点同样继承自linkedhashmap\",{\"1\":{\"2643\":1}}],[\"红黑树节点\",{\"1\":{\"2600\":1,\"2654\":1}}],[\"红黑树转换\",{\"1\":{\"2527\":1}}],[\"红黑树需要维护平衡\",{\"1\":{\"2394\":1}}],[\"红黑树通过一系列的旋转和变色操作来维持树的平衡\",{\"1\":{\"2377\":1}}],[\"红黑树应用\",{\"0\":{\"2377\":1,\"2414\":1}}],[\"红黑树\",{\"1\":{\"1196\":1,\"2363\":1,\"2400\":1,\"2541\":1,\"2607\":1,\"2666\":1}}],[\"失去焦点事件\",{\"1\":{\"1450\":1}}],[\"失败阈值\",{\"1\":{\"3087\":1}}],[\"失败重试机制保证操作最终成功\",{\"1\":{\"2529\":1}}],[\"失败重试次数\",{\"1\":{\"1687\":2}}],[\"失败操作的定时重试队列\",{\"1\":{\"2486\":1}}],[\"失败时返回特殊值\",{\"1\":{\"2349\":1}}],[\"失败时抛出异常\",{\"1\":{\"2349\":1}}],[\"失败必须处理\",{\"1\":{\"1254\":1}}],[\"失败后只需重传失败的块\",{\"1\":{\"1238\":1}}],[\"失败\",{\"1\":{\"125\":1,\"1655\":1,\"1710\":1,\"2959\":1}}],[\"说明使用场景和注意事项\",{\"1\":{\"3169\":1}}],[\"说明数组已排序完成\",{\"1\":{\"2709\":1}}],[\"说明数组已经有序\",{\"1\":{\"1161\":1}}],[\"说明链表为空\",{\"1\":{\"2497\":2}}],[\"说明是重传\",{\"1\":{\"3222\":1}}],[\"说明是尾节点\",{\"1\":{\"2496\":1}}],[\"说明是头节点\",{\"1\":{\"2496\":1}}],[\"说明succ是头节点\",{\"1\":{\"2494\":1}}],[\"说明集合被并发修改\",{\"1\":{\"2444\":1}}],[\"说明发生哈希冲突\",{\"1\":{\"2393\":1}}],[\"说明硬件设备已经饱和\",{\"1\":{\"1884\":1}}],[\"说明支持64bit计算\",{\"1\":{\"1838\":1}}],[\"说白了就是定义好的一个\",{\"1\":{\"1448\":1}}],[\"库文件会存放在\",{\"1\":{\"1785\":1}}],[\"库名\",{\"1\":{\"1640\":2,\"1825\":2,\"1831\":1}}],[\"库\",{\"1\":{\"1446\":1,\"1448\":1}}],[\"得到了报错的日志信息\",{\"1\":{\"1586\":1}}],[\"得到分页page对象\",{\"1\":{\"1443\":1,\"1444\":1}}],[\"得到分页\",{\"1\":{\"1443\":1,\"1444\":1}}],[\"得用适配m1芯片的seata镜像\",{\"1\":{\"237\":1}}],[\"滚动条从上到下滚动距离\",{\"1\":{\"1443\":1}}],[\"滚动条上下滚动的距离\",{\"1\":{\"1442\":2,\"1443\":1}}],[\"滚动条距底部的距离\",{\"1\":{\"1442\":2,\"1443\":1}}],[\"瀑布流无限加载数据分页\",{\"1\":{\"1440\":1}}],[\"搜索实现的接口方法\",{\"1\":{\"2983\":1}}],[\"搜索公纵号\",{\"1\":{\"1851\":1}}],[\"搜索ks\",{\"1\":{\"1712\":1}}],[\"搜索postgres镜像\",{\"0\":{\"1603\":1}}],[\"搜索redis镜像\",{\"0\":{\"1598\":1}}],[\"搜索requirepass\",{\"1\":{\"219\":1}}],[\"搜索nginx镜像\",{\"0\":{\"1593\":1}}],[\"搜索tomcat镜像\",{\"0\":{\"1588\":1}}],[\"搜索oracle相关的镜像\",{\"1\":{\"1568\":1}}],[\"搜索一下\",{\"1\":{\"1440\":1}}],[\"黑马二班=user\",{\"1\":{\"1439\":1}}],[\"黑马二班\",{\"1\":{\"1439\":2}}],[\"黑马一班=user\",{\"1\":{\"1439\":1}}],[\"黑马一班\",{\"1\":{\"1439\":2}}],[\"男\",{\"1\":{\"1439\":2,\"2329\":3}}],[\"性别=男\",{\"1\":{\"1439\":1}}],[\"性别\",{\"1\":{\"1439\":2}}],[\"性能仪表盘\",{\"1\":{\"3104\":1}}],[\"性能考量\",{\"1\":{\"2896\":1,\"3130\":1}}],[\"性能考虑等\",{\"1\":{\"1945\":1}}],[\"性能剖析\",{\"1\":{\"2728\":1}}],[\"性能基准测试\",{\"1\":{\"2728\":1}}],[\"性能陷阱\",{\"0\":{\"2639\":1,\"2671\":1}}],[\"性能权衡\",{\"0\":{\"2636\":1,\"2689\":1}}],[\"性能要求\",{\"1\":{\"2542\":1}}],[\"性能高\",{\"1\":{\"2528\":1,\"2543\":1}}],[\"性能极低\",{\"1\":{\"2848\":1}}],[\"性能极高\",{\"1\":{\"2513\":1}}],[\"性能极差\",{\"1\":{\"2348\":1}}],[\"性能分析\",{\"1\":{\"2512\":1}}],[\"性能分析题\",{\"1\":{\"1175\":1}}],[\"性能可优化\",{\"1\":{\"2456\":1}}],[\"性能可能不如锁机制\",{\"1\":{\"686\":1}}],[\"性能更优\",{\"1\":{\"2454\":1,\"2506\":1}}],[\"性能更好\",{\"1\":{\"2358\":1,\"2861\":1}}],[\"性能最优\",{\"1\":{\"2429\":1}}],[\"性能方面\",{\"1\":{\"2426\":1}}],[\"性能退化\",{\"1\":{\"2422\":1}}],[\"性能测试示例\",{\"1\":{\"2311\":1}}],[\"性能测试和基准测试\",{\"1\":{\"477\":1}}],[\"性能优异\",{\"1\":{\"2542\":1}}],[\"性能优于jdk6\",{\"1\":{\"2311\":1}}],[\"性能优化参数\",{\"1\":{\"3218\":1}}],[\"性能优化高级策略\",{\"1\":{\"3010\":1}}],[\"性能优化等关键技能\",{\"1\":{\"1308\":1}}],[\"性能优化等核心知识点\",{\"1\":{\"1141\":1}}],[\"性能优化建议\",{\"0\":{\"1192\":1,\"1340\":1}}],[\"性能优化策略以及实际应用场景分析\",{\"1\":{\"1218\":1}}],[\"性能优化策略\",{\"0\":{\"1113\":1,\"3225\":1},\"1\":{\"1175\":1,\"2355\":1,\"2993\":1}}],[\"性能优化技巧\",{\"0\":{\"1080\":1}}],[\"性能优化\",{\"0\":{\"475\":1,\"1151\":1,\"2309\":1},\"1\":{\"495\":1,\"1153\":1,\"1347\":1,\"2119\":1,\"2336\":1,\"2836\":1,\"2860\":1,\"2872\":1,\"2884\":1}}],[\"性能特性以及在不同场景下的最佳实践\",{\"1\":{\"2259\":1}}],[\"性能特点\",{\"1\":{\"1238\":1,\"2294\":1}}],[\"性能提升\",{\"1\":{\"2252\":1}}],[\"性能略低\",{\"1\":{\"2227\":1}}],[\"性能和安全性考虑\",{\"1\":{\"2023\":1}}],[\"性能与可用性\",{\"1\":{\"2014\":1}}],[\"性能与可用性的平衡\",{\"0\":{\"487\":1}}],[\"性能表现不佳\",{\"1\":{\"1887\":1}}],[\"性能敏感场景\",{\"1\":{\"1244\":1}}],[\"性能持续优化\",{\"1\":{\"1198\":1}}],[\"性能对比测试\",{\"0\":{\"2276\":1}}],[\"性能对比代码示例\",{\"1\":{\"1224\":1}}],[\"性能对比\",{\"1\":{\"1197\":1,\"2511\":1,\"2643\":1}}],[\"性能影响\",{\"1\":{\"1196\":1}}],[\"性能影响与优化\",{\"0\":{\"506\":1}}],[\"性能比较\",{\"1\":{\"1164\":1}}],[\"性能比较低下\",{\"1\":{\"304\":1}}],[\"性能好\",{\"1\":{\"1041\":1,\"2202\":1}}],[\"性能差异原因\",{\"1\":{\"2986\":1}}],[\"性能差\",{\"1\":{\"1041\":1,\"1197\":1,\"2071\":1,\"2202\":1,\"2257\":1,\"2351\":1,\"3085\":1}}],[\"性能差距\",{\"1\":{\"494\":1}}],[\"性能问题\",{\"0\":{\"1276\":1},\"1\":{\"590\":1,\"2974\":1,\"3153\":1}}],[\"性能\",{\"1\":{\"556\":1,\"2201\":1,\"2275\":1,\"2310\":1,\"2358\":1,\"2454\":1,\"2861\":1}}],[\"性能监控集成\",{\"1\":{\"522\":1}}],[\"性能指标分析和服务依赖分析\",{\"1\":{\"3104\":1}}],[\"性能指标\",{\"1\":{\"193\":1}}],[\"性能指标监控\",{\"0\":{\"193\":1}}],[\"性能带给我们最直观的感受就是\",{\"1\":{\"160\":1}}],[\"性能较差\",{\"1\":{\"2429\":1,\"2456\":1,\"2513\":1,\"2557\":1,\"2564\":1}}],[\"性能较高\",{\"1\":{\"140\":1}}],[\"性能较低\",{\"1\":{\"140\":1}}],[\"性能非常高\",{\"1\":{\"128\":1}}],[\"性能会下降\",{\"1\":{\"54\":1}}],[\"否\",{\"1\":{\"1435\":1,\"1436\":1,\"2201\":1,\"2316\":2,\"2363\":7,\"2400\":8,\"2461\":3}}],[\"否则编译时不会执行\",{\"1\":{\"3153\":1}}],[\"否则特定异常会被父类异常捕获\",{\"1\":{\"2941\":1}}],[\"否则可能导致缓冲区数据未写入\",{\"1\":{\"2908\":1}}],[\"否则可能抛出concurrentmodificationexception\",{\"1\":{\"2513\":1}}],[\"否则数据可能残留在缓冲区\",{\"1\":{\"2872\":1}}],[\"否则修改键可能导致排序混乱\",{\"1\":{\"2669\":1}}],[\"否则建议优先使用arraylist\",{\"1\":{\"2511\":1}}],[\"否则前驱的后继置为null\",{\"1\":{\"2497\":1}}],[\"否则前驱的后继指向后继\",{\"1\":{\"2496\":1}}],[\"否则后继的前驱置为null\",{\"1\":{\"2497\":1}}],[\"否则后继的前驱指向前驱\",{\"1\":{\"2496\":1}}],[\"否则原头节点的前驱指向新节点\",{\"1\":{\"2497\":1}}],[\"否则原尾节点的后继指向新节点\",{\"1\":{\"2494\":1}}],[\"否则pred的后继指向新节点\",{\"1\":{\"2494\":1}}],[\"否则添加到指定节点之前\",{\"1\":{\"2494\":1}}],[\"否则返回false\",{\"1\":{\"2554\":1}}],[\"否则返回max\",{\"1\":{\"2438\":1}}],[\"否则返回默认值\",{\"1\":{\"544\":1}}],[\"否则新容量\",{\"1\":{\"2272\":1}}],[\"否则为服务器名称\",{\"1\":{\"1412\":1}}],[\"否则不做操作\",{\"1\":{\"673\":1}}],[\"否则抛出异常\",{\"1\":{\"544\":1}}],[\"否则通过supplier获取\",{\"1\":{\"544\":1}}],[\"否则提示用户重新登录\",{\"1\":{\"306\":1}}],[\"否则slave很容易判定超时\",{\"1\":{\"172\":1}}],[\"否则\",{\"1\":{\"125\":1}}],[\"否则会产生乱码\",{\"1\":{\"2884\":1}}],[\"否则会抛出classcastexception\",{\"1\":{\"2668\":1}}],[\"否则会抛出nullpointerexception\",{\"1\":{\"2563\":1,\"2584\":1}}],[\"否则会导致无法正确获取值\",{\"1\":{\"2612\":1}}],[\"否则会导致代码难以维护和测试\",{\"1\":{\"1215\":1}}],[\"否则会导致代码难以理解和调试\",{\"1\":{\"343\":1}}],[\"否则会导致代码出现意外的错误\",{\"1\":{\"1215\":1}}],[\"否则会有线程安全问题\",{\"1\":{\"2454\":1}}],[\"否则会失败\",{\"1\":{\"1494\":1}}],[\"否则会重新安装nginx\",{\"1\":{\"1416\":1}}],[\"否则会报\",{\"1\":{\"121\":1}}],[\"否则会让自己陷入一种自我麻痹且极度自信的状态\",{\"1\":{\"0\":1}}],[\"否则无法正常配置双主架构\",{\"1\":{\"113\":1}}],[\"否则查询性能会下降\",{\"1\":{\"53\":1}}],[\"格式env\",{\"1\":{\"3246\":1}}],[\"格式固定\",{\"1\":{\"2227\":1}}],[\"格式化百分比\",{\"1\":{\"2905\":1}}],[\"格式化宽度和对齐\",{\"1\":{\"2905\":1}}],[\"格式化日期时间\",{\"1\":{\"2905\":1}}],[\"格式化字符串\",{\"1\":{\"2905\":1}}],[\"格式化浮点数\",{\"1\":{\"2905\":1}}],[\"格式化整数\",{\"1\":{\"2905\":1}}],[\"格式化输出详解\",{\"0\":{\"2905\":1}}],[\"格式化输出\",{\"1\":{\"2901\":1,\"2902\":2,\"2903\":1,\"2909\":1}}],[\"格式化的用户全名\",{\"1\":{\"2759\":1}}],[\"格式化\",{\"1\":{\"2221\":1}}],[\"格式化打印\",{\"0\":{\"2221\":1}}],[\"格式规范\",{\"1\":{\"1946\":1}}],[\"格式\",{\"1\":{\"1869\":1,\"2046\":1,\"3176\":1,\"3246\":4,\"3257\":1}}],[\"格式如下\",{\"1\":{\"3177\":1}}],[\"格式如\",{\"1\":{\"1687\":1}}],[\"格式的字符串转成\",{\"1\":{\"1438\":1,\"1440\":1}}],[\"格式的字符串\",{\"1\":{\"1438\":1,\"1440\":1}}],[\"格式可以是key=value\",{\"1\":{\"1433\":1,\"1434\":1,\"1436\":1}}],[\"格式不正确\",{\"1\":{\"125\":2}}],[\"专一性异常示例\",{\"1\":{\"2948\":2}}],[\"专一性原则\",{\"0\":{\"2948\":1}}],[\"专为字符流设计\",{\"1\":{\"2861\":1}}],[\"专门用于invite请求\",{\"1\":{\"3208\":1}}],[\"专门用于处理文本数据\",{\"1\":{\"2851\":1}}],[\"专门的不可变实现类\",{\"1\":{\"2358\":1}}],[\"专注于动态数组的实现\",{\"1\":{\"2446\":1}}],[\"专注sql映射的轻量级框架\",{\"1\":{\"581\":1}}],[\"专业代码评审工具\",{\"1\":{\"2024\":1}}],[\"专用\",{\"1\":{\"1432\":1}}],[\"姓名=\",{\"1\":{\"2902\":1}}],[\"姓名=张三\",{\"1\":{\"1439\":1}}],[\"姓名\",{\"1\":{\"1431\":1,\"1433\":1,\"1434\":1,\"1435\":1,\"1439\":2,\"2091\":3,\"2905\":1}}],[\"必需重新加载个页面\",{\"1\":{\"1430\":1}}],[\"必须将其定义为静态泛型方法\",{\"1\":{\"3024\":1}}],[\"必须将某些列更改为text或blob\",{\"1\":{\"125\":1}}],[\"必须进行严格验证\",{\"1\":{\"3010\":1}}],[\"必须进行第二次全量复制\",{\"1\":{\"166\":1}}],[\"必须正确实现序列化\",{\"1\":{\"2941\":1}}],[\"必须显式捕获或声明抛出\",{\"1\":{\"2926\":1}}],[\"必须主动调用checkerror\",{\"1\":{\"2908\":1}}],[\"必须使用\",{\"1\":{\"3140\":1}}],[\"必须使用管道流\",{\"1\":{\"2897\":1}}],[\"必须使用inputstreamreader\",{\"1\":{\"2885\":1}}],[\"必须使用参数化查询\",{\"1\":{\"2066\":1}}],[\"必须与缓冲流结合使用以提高性能\",{\"1\":{\"2884\":1}}],[\"必须重写hashcode\",{\"1\":{\"2605\":1}}],[\"必须先排序\",{\"1\":{\"2326\":1}}],[\"必须包含default分支\",{\"1\":{\"2062\":1}}],[\"必须遵守\",{\"1\":{\"2029\":1}}],[\"必须放在同一个目录下\",{\"1\":{\"1635\":1}}],[\"必须要将docker容器的存储挂载到外置存储上去\",{\"1\":{\"1632\":1}}],[\"必须要引入该文件\",{\"1\":{\"1448\":1}}],[\"必须安装nginx的hash软件包\",{\"1\":{\"1408\":1}}],[\"必须安装upstream\",{\"1\":{\"1407\":1}}],[\"必须初始化final实例变量\",{\"1\":{\"1038\":1}}],[\"必须初始化\",{\"1\":{\"1038\":1}}],[\"必须保障其中没有槽slot\",{\"1\":{\"186\":1}}],[\"必须每次操作携带对应的运行id\",{\"1\":{\"167\":1}}],[\"必须至少合并1个分区\",{\"1\":{\"125\":1}}],[\"必须至少添加1个分区\",{\"1\":{\"125\":1}}],[\"必须定义每个分区\",{\"1\":{\"125\":1}}],[\"必须用\",{\"1\":{\"125\":1}}],[\"必须在finally块中关闭流资源\",{\"1\":{\"2831\":1}}],[\"必须在子类中实现\",{\"1\":{\"2761\":1}}],[\"必须在循环中检查条件\",{\"1\":{\"660\":1}}],[\"必须在同步块中调用\",{\"1\":{\"618\":1,\"667\":1}}],[\"必须在不使用该开关的情况下重启它\",{\"1\":{\"125\":1}}],[\"必须在数据库目录下\",{\"1\":{\"125\":1}}],[\"必须有更新mysql数据库中表的权限才能更改密码\",{\"1\":{\"125\":1}}],[\"离线环境没有这些镜像需要自己去下\",{\"1\":{\"1641\":1}}],[\"离线下载好安装k8s的插件包\",{\"1\":{\"1636\":1}}],[\"离线思路\",{\"1\":{\"1507\":1}}],[\"离线需要自行打包好镜像\",{\"1\":{\"1507\":1}}],[\"离线安装中间件与项目\",{\"0\":{\"1639\":1}}],[\"离线安装包下载\",{\"1\":{\"1626\":1,\"1715\":1}}],[\"离线安装docker\",{\"0\":{\"1616\":1,\"1622\":1,\"1748\":1,\"1754\":1}}],[\"离线安装官方文档\",{\"1\":{\"1609\":1}}],[\"离线安装与在线基本相同\",{\"1\":{\"1507\":1}}],[\"离线安装\",{\"0\":{\"1635\":1},\"1\":{\"1420\":1,\"1715\":1}}],[\"离线构建\",{\"0\":{\"960\":1},\"1\":{\"960\":1}}],[\"证书一般是pem和key文件\",{\"1\":{\"1417\":1}}],[\"证明有安装\",{\"1\":{\"1416\":1}}],[\"阿里云服务器配置实例安全组\",{\"1\":{\"1788\":1}}],[\"阿里云盘\",{\"1\":{\"1418\":1}}],[\"阿里云可申请免费的ssl证书\",{\"1\":{\"1417\":1}}],[\"阿里云maven镜像\",{\"1\":{\"982\":1}}],[\"认证授权\",{\"1\":{\"3183\":1}}],[\"认证与授权\",{\"0\":{\"2012\":1}}],[\"认证进入\",{\"1\":{\"1787\":1}}],[\"认证文件\",{\"1\":{\"1764\":1}}],[\"认证文件的路径\",{\"1\":{\"1734\":1,\"1764\":1}}],[\"认证成功\",{\"1\":{\"1736\":1}}],[\"认证\",{\"1\":{\"1560\":1,\"1736\":1}}],[\"认证用户\",{\"1\":{\"1503\":1}}],[\"认证后\",{\"1\":{\"1414\":1}}],[\"认证过滤器\",{\"1\":{\"456\":1}}],[\"身份认证机制\",{\"0\":{\"3238\":1}}],[\"身份认证和消息完整性三个层面构建防护体系\",{\"1\":{\"3236\":1}}],[\"身份认证的网络协议\",{\"1\":{\"1414\":1}}],[\"身份证号等敏感信息\",{\"1\":{\"2068\":1}}],[\"身份验证\",{\"1\":{\"165\":1}}],[\"身份验证机制\",{\"1\":{\"114\":1}}],[\"身份验证和消息完整性验证机制\",{\"1\":{\"114\":1}}],[\"另外两个是devicemapper驱动依赖的\",{\"1\":{\"3245\":1}}],[\"另外一个过程是一个子进程在完成后台的保存操作\",{\"1\":{\"138\":1}}],[\"另一边已同意释放\",{\"1\":{\"1881\":1}}],[\"另一种是直接修改redis\",{\"1\":{\"1788\":1}}],[\"另一种就是确认网站的真实性\",{\"1\":{\"1414\":1}}],[\"含义\",{\"1\":{\"1412\":1,\"1882\":1}}],[\"哪个服务器的响应速度快\",{\"1\":{\"1407\":1}}],[\"权限检查和方法调用的底层实现\",{\"1\":{\"2977\":1}}],[\"权限修饰符作用范围\",{\"0\":{\"2794\":1}}],[\"权限修饰符是java实现封装特性的核心机制\",{\"1\":{\"2792\":1}}],[\"权限修饰符\",{\"0\":{\"2791\":1}}],[\"权限相关命令\",{\"0\":{\"1900\":1}}],[\"权限等的缓存\",{\"1\":{\"1887\":1}}],[\"权限\",{\"1\":{\"1687\":1}}],[\"权限执行命令\",{\"1\":{\"1494\":1}}],[\"权限不足可执行给nginx权限\",{\"1\":{\"1416\":1}}],[\"权限控制\",{\"1\":{\"1072\":1}}],[\"权重低的为从节点\",{\"1\":{\"1764\":1}}],[\"权重高的服务器接收更多请求\",{\"1\":{\"3086\":1}}],[\"权重高的为主节点\",{\"1\":{\"1764\":1}}],[\"权重高\",{\"1\":{\"1764\":1}}],[\"权重越高\",{\"1\":{\"1405\":1}}],[\"权重\",{\"0\":{\"1405\":1},\"1\":{\"1764\":2}}],[\"轮询等待连接完成\",{\"1\":{\"3117\":1}}],[\"轮询\",{\"0\":{\"1404\":1},\"1\":{\"3086\":1}}],[\"若未找到\",{\"1\":{\"2983\":2}}],[\"若到达流末尾返回\",{\"1\":{\"2841\":1,\"2853\":1}}],[\"若要追加内容\",{\"1\":{\"2832\":1}}],[\"若编译器支持尾递归优化\",{\"1\":{\"2711\":1}}],[\"若需有序遍历\",{\"1\":{\"2585\":1}}],[\"若缓冲区空则阻塞\",{\"1\":{\"2466\":1}}],[\"若缓冲区满则阻塞\",{\"1\":{\"2466\":1}}],[\"若原容量2\",{\"1\":{\"2272\":1}}],[\"若该进程在睡眠\",{\"1\":{\"1882\":1}}],[\"若该命令成功则会让其输入两遍密码\",{\"1\":{\"1421\":1}}],[\"若日志中出现以下报错\",{\"1\":{\"1569\":1}}],[\"若想使用对方的\",{\"1\":{\"1449\":1}}],[\"若用户请求的动态文件\",{\"1\":{\"1401\":1}}],[\"若鉴权通过则执行业务逻辑\",{\"1\":{\"306\":1}}],[\"令牌就会一直产生直至装满整个令牌桶\",{\"1\":{\"1400\":1}}],[\"令牌桶算法的机制如下\",{\"1\":{\"1400\":1}}],[\"令牌桶算法用来控制发送到网络上的数据的数目\",{\"1\":{\"1400\":1}}],[\"令牌桶算法是网络流量整形和速率限制中最常使用的一种算法\",{\"1\":{\"1400\":1}}],[\"令牌桶算法\",{\"0\":{\"1400\":1}}],[\"漏桶会按照我们定义的速率依次处理请求\",{\"1\":{\"1399\":1}}],[\"漏桶算法提供的机制实际上就是刚才的案例\",{\"1\":{\"1399\":1}}],[\"漏桶算法提供了一种机制\",{\"1\":{\"1399\":1}}],[\"漏桶算法是网络世界中流量整形或速率限制时经常使用的一种算法\",{\"1\":{\"1399\":1}}],[\"漏桶算法\",{\"0\":{\"1399\":1}}],[\"漏桶流算法和令牌桶算法知道\",{\"0\":{\"1398\":1}}],[\"刚才有提到过nginx是基于漏桶算法原理实现的\",{\"1\":{\"1397\":1}}],[\"呢\",{\"1\":{\"1396\":1}}],[\"绑定\",{\"1\":{\"3246\":1}}],[\"绑定端口时可能出现addressalreadyinuseexception\",{\"1\":{\"3069\":1}}],[\"绑定端口8888\",{\"1\":{\"3065\":1}}],[\"绑定端口并启动服务器\",{\"1\":{\"3125\":1}}],[\"绑定端口并启动服务\",{\"1\":{\"1111\":1}}],[\"绑定集群间通信端口\",{\"1\":{\"1560\":1}}],[\"绑定客户端访问端口\",{\"1\":{\"1560\":1}}],[\"绑定事件\",{\"1\":{\"1451\":1,\"1454\":1}}],[\"绑定限流维度\",{\"1\":{\"1395\":1,\"1396\":1}}],[\"底下会说道什么是桶铜流\",{\"1\":{\"1394\":1}}],[\"底层技术异常应转换为高层业务异常\",{\"1\":{\"2940\":1}}],[\"底层基于priorityqueue实现\",{\"1\":{\"2486\":1}}],[\"底层结构\",{\"1\":{\"2461\":1,\"2518\":1}}],[\"底层数据结构详解\",{\"0\":{\"2317\":1,\"2364\":1,\"2401\":1}}],[\"底层数据结构\",{\"1\":{\"2316\":1,\"2363\":1,\"2400\":1}}],[\"底层编程\",{\"1\":{\"2119\":1}}],[\"底层实现可选用logback\",{\"1\":{\"2072\":1}}],[\"底层实现原理是什么\",{\"1\":{\"668\":1}}],[\"底层自动处理线程管理和同步\",{\"1\":{\"550\":1}}],[\"底层使用数组存储元素\",{\"1\":{\"2548\":1}}],[\"底层使用双向链表存储结构实现\",{\"1\":{\"134\":1}}],[\"底层使用哈希表结构实现数据存储\",{\"1\":{\"133\":1}}],[\"突发流量会进入到一个漏桶\",{\"1\":{\"1399\":1}}],[\"突发流量可以被整形以便为网络提供一个稳定的流量\",{\"1\":{\"1399\":1}}],[\"突发流量\",{\"0\":{\"1396\":1},\"1\":{\"1394\":1}}],[\"突发限制访问频率\",{\"0\":{\"1396\":1},\"1\":{\"1394\":1}}],[\"根节点是黑色\",{\"1\":{\"2650\":1}}],[\"根路径\",{\"1\":{\"1393\":1}}],[\"根据负载自动调整副本数\",{\"1\":{\"3244\":1}}],[\"根据消息类型自动选择\",{\"1\":{\"3227\":1}}],[\"根据请求方法和当前状态进行处理\",{\"1\":{\"3208\":1}}],[\"根据目标地址查找下一跳服务器\",{\"1\":{\"3183\":1}}],[\"根据服务器性能设置权重\",{\"1\":{\"3086\":1}}],[\"根据具体类型创建新map\",{\"1\":{\"3007\":1}}],[\"根据具体类型创建新集合\",{\"1\":{\"3007\":1}}],[\"根据类名反射加载class对象\",{\"1\":{\"2999\":1}}],[\"根据数据类型选择\",{\"1\":{\"2909\":1}}],[\"根据名称获取枚举常量\",{\"1\":{\"2820\":1}}],[\"根据作用域和生命周期可分为不同类型\",{\"1\":{\"2764\":1}}],[\"根据键获取值\",{\"1\":{\"2682\":1}}],[\"根据哈希值和数组长度计算索引\",{\"1\":{\"2599\":1}}],[\"根据并发需求选择同步机制\",{\"1\":{\"2544\":1}}],[\"根据是否阻塞\",{\"1\":{\"2542\":1}}],[\"根据场景选择合适的集合\",{\"1\":{\"2536\":1}}],[\"根据预期元素数量计算初始容量\",{\"1\":{\"2614\":1}}],[\"根据预期元素数量设置初始容量\",{\"1\":{\"2386\":1}}],[\"根据预期长度设置初始容量\",{\"1\":{\"2278\":1}}],[\"根据元素数量使用不同的存储方式\",{\"1\":{\"2358\":1}}],[\"根据id获取文档\",{\"1\":{\"1962\":1}}],[\"根据id获取用户信息\",{\"1\":{\"2035\":1}}],[\"根据id获取用户\",{\"1\":{\"1948\":1}}],[\"根据文档的类型\",{\"1\":{\"1958\":1}}],[\"根据上面的操作已经将redis安装完成了\",{\"1\":{\"1786\":1}}],[\"根据配置文件启动服务\",{\"1\":{\"1736\":1}}],[\"根据日志信息知道了是\",{\"1\":{\"1586\":1}}],[\"根据实际吞吐量设置合理容量\",{\"1\":{\"2539\":1}}],[\"根据实际情况修改\",{\"1\":{\"1490\":1}}],[\"根据实际需求选择合适的线程池类型和大小\",{\"1\":{\"1138\":1}}],[\"根据当前页和每页显示的条数来\",{\"1\":{\"1443\":1}}],[\"根据当前页和每页显示的条数来请求查询分页数据\",{\"1\":{\"1443\":1}}],[\"根据当前页码和每页显示的条数来调用业务层的查询方法\",{\"1\":{\"1443\":1,\"1444\":1}}],[\"根据当前页码和每页显示的条数\",{\"1\":{\"1443\":1,\"1444\":1}}],[\"根据网络类型\",{\"1\":{\"1117\":1}}],[\"根据用途可分为\",{\"1\":{\"1063\":1}}],[\"根据cpu核心数配置线程池\",{\"1\":{\"1111\":1}}],[\"根据cpu核心数\",{\"1\":{\"818\":1,\"852\":1,\"886\":1,\"920\":1}}],[\"根据应用特点选择合适的垃圾回收器\",{\"1\":{\"1151\":1,\"1154\":1}}],[\"根据应用内存需求合理设置\",{\"1\":{\"813\":1,\"847\":1,\"881\":1,\"915\":1}}],[\"根据应用实际需求和服务器配置设置\",{\"1\":{\"782\":1}}],[\"根据对象存活周期将内存划分为不同区域\",{\"1\":{\"767\":1}}],[\"根据系统负载实时调整线程池参数\",{\"1\":{\"634\":1}}],[\"根据需求创建线程\",{\"1\":{\"623\":1}}],[\"根据返回值判断是否要执行创建bean的方法\",{\"1\":{\"459\":1}}],[\"根据条件动态装配bean\",{\"1\":{\"421\":1}}],[\"根据全路径类名加载多个bean到ioc容器中\",{\"1\":{\"418\":1,\"462\":1}}],[\"根据引入的依赖自动配置spring应用\",{\"1\":{\"391\":1}}],[\"根据发送类型创建指定对象\",{\"1\":{\"289\":1}}],[\"根据指定符号替换变量内容\",{\"1\":{\"289\":1}}],[\"根据前缀键移除缓存映射中的条目\",{\"1\":{\"283\":1}}],[\"根据给定的键从缓存映射中移除对应的键值对\",{\"1\":{\"283\":1}}],[\"根据倍数不同\",{\"1\":{\"192\":1}}],[\"根据运行记录做快速调整\",{\"1\":{\"190\":1}}],[\"根据业务场景选择合适的数据类型\",{\"1\":{\"212\":1}}],[\"根据业务数据有效期进行分类错峰\",{\"1\":{\"190\":1}}],[\"根据业务需求调优redis配置\",{\"1\":{\"157\":1}}],[\"根据级别\",{\"1\":{\"189\":1}}],[\"根据master中的slave信息\",{\"1\":{\"180\":1}}],[\"匹配\",{\"1\":{\"1393\":1}}],[\"匹配规则\",{\"1\":{\"1392\":1}}],[\"匹配符\",{\"1\":{\"1392\":1}}],[\"匹配成功即进行相关的操作\",{\"1\":{\"1391\":1}}],[\"占用的物理内存大小\",{\"1\":{\"1882\":1}}],[\"占用存储空间\",{\"1\":{\"141\":1}}],[\"占内存小\",{\"1\":{\"1382\":1}}],[\"站点的根目录\",{\"1\":{\"1379\":1,\"1385\":1}}],[\"耗费内存少\",{\"1\":{\"1377\":1,\"1382\":1}}],[\"耗时过长\",{\"1\":{\"1739\":1}}],[\"耗时业务逻辑交给专门的线程池处理\",{\"1\":{\"1346\":1}}],[\"耗时\",{\"1\":{\"777\":2,\"1068\":2,\"2327\":2,\"2524\":1,\"2866\":1,\"2986\":4}}],[\"耗时较高事务等\",{\"1\":{\"190\":1}}],[\"腾讯等\",{\"1\":{\"1376\":1}}],[\"角色\",{\"1\":{\"1365\":2,\"1687\":1}}],[\"里氏替换\",{\"1\":{\"2446\":1}}],[\"里氏替换原则\",{\"0\":{\"1210\":1,\"2745\":1},\"1\":{\"2005\":1,\"2637\":1}}],[\"里面非常重要的一个功能\",{\"1\":{\"1739\":1}}],[\"里面封装了很多预定义的函数\",{\"1\":{\"1446\":1}}],[\"里面可以看见多了个\",{\"1\":{\"1365\":1}}],[\"浏览器上输入\",{\"1\":{\"1519\":1}}],[\"浏览器使用域名或ip地址\",{\"1\":{\"1390\":1}}],[\"浏览器中输入kibana的地址\",{\"1\":{\"1360\":1}}],[\"浏览器访问nexus\",{\"1\":{\"1000\":1}}],[\"很多数据都有部分有序的特性\",{\"1\":{\"2357\":1}}],[\"很多人采用的是nginx代理来做登录验证功能\",{\"1\":{\"1349\":1}}],[\"很可能对业务造成灾难性打击\",{\"1\":{\"161\":1}}],[\"聊天服务器\",{\"1\":{\"1347\":1}}],[\"支付服务暂时不可用\",{\"1\":{\"2955\":1}}],[\"支付服务不可用\",{\"1\":{\"2955\":1}}],[\"支付失败\",{\"1\":{\"2955\":1}}],[\"支付宝支付\",{\"1\":{\"2746\":1}}],[\"支撑百万级并发连接的服务器架构设计要点\",{\"1\":{\"1347\":1}}],[\"支持跨节点查找\",{\"1\":{\"3235\":1}}],[\"支持移动性\",{\"1\":{\"3192\":1}}],[\"支持事务处理\",{\"1\":{\"3183\":1}}],[\"支持动态配置\",{\"1\":{\"3111\":1}}],[\"支持动态的从各种数据源搜集数据\",{\"1\":{\"1507\":1}}],[\"支持分布式追踪\",{\"1\":{\"3104\":1}}],[\"支持网络调用分析\",{\"1\":{\"3100\":1}}],[\"支持插件扩展\",{\"1\":{\"3096\":1}}],[\"支持版本兼容和跨语言\",{\"1\":{\"3085\":1}}],[\"支持非阻塞模式\",{\"1\":{\"3117\":1}}],[\"支持非阻塞读写\",{\"1\":{\"3079\":1}}],[\"支持非阻塞io\",{\"1\":{\"2911\":1}}],[\"支持复杂业务场景\",{\"1\":{\"3043\":1}}],[\"支持异常包装\",{\"1\":{\"2929\":1}}],[\"支持异步处理\",{\"1\":{\"578\":1}}],[\"支持异步非阻塞操作\",{\"1\":{\"471\":1}}],[\"支持基本的http\",{\"1\":{\"2921\":1}}],[\"支持printf\",{\"1\":{\"2909\":2}}],[\"支持显式指定字符编码\",{\"1\":{\"2909\":1}}],[\"支持指定字符编码\",{\"1\":{\"2903\":1}}],[\"支持使用printf\",{\"1\":{\"2901\":1}}],[\"支持输出基本数据类型\",{\"1\":{\"2901\":1}}],[\"支持创建不可变weakhashmap实例\",{\"1\":{\"2677\":1}}],[\"支持创建不可变linkedlist\",{\"1\":{\"2491\":1}}],[\"支持高效的范围查询操作\",{\"1\":{\"2664\":1}}],[\"支持高并发场景\",{\"1\":{\"2513\":1}}],[\"支持高并发操作\",{\"1\":{\"2426\":1}}],[\"支持高并发读写\",{\"1\":{\"2416\":1}}],[\"支持一系列导航方法\",{\"1\":{\"2646\":1}}],[\"支持按插入顺序或访问顺序迭代\",{\"1\":{\"2634\":1}}],[\"支持按照插入顺序或访问顺序遍历\",{\"1\":{\"2616\":1}}],[\"支持stream\",{\"1\":{\"2541\":1}}],[\"支持ssl\",{\"1\":{\"1347\":1,\"3123\":1}}],[\"支持尝试锁定\",{\"1\":{\"2456\":1,\"2513\":1}}],[\"支持更高并发\",{\"1\":{\"2672\":1}}],[\"支持更灵活的锁定策略\",{\"1\":{\"2456\":1,\"2513\":1}}],[\"支持更多并行处理功能\",{\"1\":{\"2367\":1}}],[\"支持快速失败\",{\"1\":{\"2454\":1}}],[\"支持快速随机访问\",{\"1\":{\"2432\":1}}],[\"支持删除操作\",{\"1\":{\"2407\":1}}],[\"支持并发\",{\"1\":{\"2897\":1}}],[\"支持并发修改检测\",{\"1\":{\"2332\":1}}],[\"支持并行处理\",{\"1\":{\"543\":1}}],[\"支持单向遍历和删除操作\",{\"1\":{\"2332\":1}}],[\"支持单元测试和集成测试\",{\"1\":{\"454\":1}}],[\"支持迭代器模式\",{\"1\":{\"2332\":1}}],[\"支持泛型\",{\"1\":{\"2320\":1,\"2434\":1,\"2491\":1}}],[\"支持泛型编程\",{\"1\":{\"2314\":1}}],[\"支持双向遍历\",{\"1\":{\"2320\":1,\"2332\":1}}],[\"支持通过索引访问\",{\"1\":{\"2314\":1}}],[\"支持序列化\",{\"1\":{\"2287\":1}}],[\"支持链式调用\",{\"1\":{\"2264\":1}}],[\"支持修改\",{\"1\":{\"2263\":1}}],[\"支持任意类型\",{\"1\":{\"2233\":1}}],[\"支持函数式编程风格\",{\"1\":{\"2219\":1}}],[\"支持多线程并发扩容\",{\"1\":{\"2541\":1}}],[\"支持多线程同时参与扩容\",{\"1\":{\"2527\":1}}],[\"支持多语言\",{\"1\":{\"2017\":1}}],[\"支持多种网络环境和传输协议\",{\"1\":{\"3192\":1}}],[\"支持多种协议\",{\"1\":{\"1347\":1}}],[\"支持多种数据访问技术\",{\"1\":{\"443\":1}}],[\"支持多种配置方式\",{\"1\":{\"409\":1}}],[\"支持多种类型的索引\",{\"1\":{\"39\":1}}],[\"支持lm则是64bit\",{\"1\":{\"1838\":1}}],[\"支持lambda\",{\"1\":{\"494\":1}}],[\"支持gzip压缩\",{\"1\":{\"1377\":1}}],[\"支持读写操作\",{\"1\":{\"1315\":1}}],[\"支持断点续传\",{\"1\":{\"1238\":1}}],[\"支持编码转换\",{\"1\":{\"1221\":1}}],[\"支持部分并发操作\",{\"1\":{\"1197\":1}}],[\"支持定时和周期性任务的线程池\",{\"1\":{\"1135\":1}}],[\"支持定时任务的线程池\",{\"1\":{\"623\":1}}],[\"支持线程间的协作\",{\"1\":{\"1132\":1}}],[\"支持终端在不同接入点间切换时保持会话\",{\"1\":{\"1116\":1}}],[\"支持集群扩展\",{\"1\":{\"1112\":1}}],[\"支持集合的函数式操作\",{\"1\":{\"1059\":1,\"1198\":1}}],[\"支持点对点和多方通信\",{\"1\":{\"1091\":1}}],[\"支持返回值\",{\"1\":{\"1059\":1}}],[\"支持final变量\",{\"1\":{\"1059\":1}}],[\"支持中断\",{\"1\":{\"668\":1}}],[\"支持中文等特殊字符\",{\"1\":{\"275\":1}}],[\"支持延迟执行的无界阻塞队列\",{\"1\":{\"634\":1}}],[\"支持优先级排序的无界阻塞队列\",{\"1\":{\"634\":1}}],[\"支持tb级堆大小\",{\"1\":{\"476\":1}}],[\"支持http\",{\"1\":{\"471\":1,\"3106\":1}}],[\"支持自动刷新\",{\"1\":{\"2899\":1}}],[\"支持自动化测试和构建\",{\"1\":{\"396\":1}}],[\"支持自然排序\",{\"1\":{\"2287\":1}}],[\"支持自适应调节策略\",{\"1\":{\"769\":1}}],[\"支持自定义安全配置\",{\"1\":{\"454\":1}}],[\"支持xml\",{\"1\":{\"299\":1}}],[\"支持请求方式\",{\"1\":{\"292\":1}}],[\"支持\",{\"1\":{\"277\":1,\"1288\":1,\"2666\":1,\"2903\":1,\"2909\":2,\"2992\":1,\"3120\":1}}],[\"支持流式处理大数据集\",{\"1\":{\"271\":1}}],[\"支持消息持久化以及\",{\"1\":{\"130\":1}}],[\"支持持久化\",{\"1\":{\"127\":1}}],[\"支持丰富的查询操作\",{\"1\":{\"39\":1}}],[\"支持的数据类型\",{\"0\":{\"38\":1}}],[\"支持为图片设置颜色模式和大小\",{\"1\":{\"22\":1}}],[\"次\",{\"1\":{\"1337\":1}}],[\"池化思想\",{\"1\":{\"3128\":1}}],[\"池已满\",{\"1\":{\"1326\":1}}],[\"池中无可用连接\",{\"1\":{\"1326\":1}}],[\"达到代码复用和类型安全的目的\",{\"1\":{\"3016\":1}}],[\"达到该值时触发扩容\",{\"1\":{\"2609\":1}}],[\"达到当前容量时触发扩容\",{\"1\":{\"2355\":1}}],[\"达到合理有效的地利用主机资源\",{\"1\":{\"1405\":1}}],[\"达到最大连接数\",{\"1\":{\"1326\":1}}],[\"达到恢复数据的目的\",{\"1\":{\"139\":1}}],[\"期望迭代器反映最新数据\",{\"1\":{\"2537\":1}}],[\"期望精确计数\",{\"1\":{\"2533\":1}}],[\"期望的修改次数\",{\"1\":{\"2441\":1,\"2498\":1}}],[\"期望接收的下一个字节序号\",{\"1\":{\"1312\":1}}],[\"期监控难度较高\",{\"1\":{\"191\":1}}],[\"窗口内的数据可以连续发送无需等待确认\",{\"1\":{\"1312\":1}}],[\"滑动窗口原理\",{\"1\":{\"1312\":1}}],[\"拥有独立的锁\",{\"1\":{\"2541\":1}}],[\"拥有基于\",{\"1\":{\"304\":1}}],[\"拥塞窗口设为ssthresh+3\",{\"1\":{\"3075\":1}}],[\"拥塞窗口大小翻倍\",{\"1\":{\"3075\":1}}],[\"拥塞避免\",{\"1\":{\"1312\":1,\"3075\":2}}],[\"拥塞控制机制\",{\"0\":{\"3075\":1}}],[\"拥塞控制\",{\"1\":{\"1312\":1}}],[\"丧失类型安全\",{\"1\":{\"1302\":1}}],[\"维护用户与会话的映射\",{\"1\":{\"3235\":1}}],[\"维护用户地址与实际位置的映射关系\",{\"1\":{\"3184\":1}}],[\"维护事务和对话状态\",{\"1\":{\"3212\":1}}],[\"维护元素的顺序\",{\"1\":{\"2634\":1}}],[\"维护first和last指针\",{\"1\":{\"2548\":1}}],[\"维护head和tail指针\",{\"1\":{\"2548\":1}}],[\"维护头节点和尾节点的volatile引用\",{\"1\":{\"2529\":1}}],[\"维护访问顺序\",{\"1\":{\"2512\":1}}],[\"维护者等\",{\"1\":{\"1971\":1}}],[\"维护流程等\",{\"1\":{\"1971\":1}}],[\"维护文档等\",{\"1\":{\"1971\":1}}],[\"维护文档\",{\"1\":{\"1961\":1}}],[\"维护和权限等方面\",{\"1\":{\"1959\":1}}],[\"维护人员信息\",{\"1\":{\"1548\":1,\"1697\":1}}],[\"维护排行榜\",{\"1\":{\"130\":1}}],[\"维持泛型多态性\",{\"1\":{\"1290\":1}}],[\"擦除规则\",{\"1\":{\"3034\":1}}],[\"擦除后等价于\",{\"1\":{\"1290\":1}}],[\"擦除方法参数\",{\"1\":{\"1290\":1}}],[\"擦除类型参数\",{\"1\":{\"1290\":1}}],[\"协同工作机制\",{\"1\":{\"3227\":1}}],[\"协同工作\",{\"1\":{\"3220\":1}}],[\"协商会话参数\",{\"1\":{\"3175\":1}}],[\"协商初始序列号\",{\"1\":{\"1311\":1}}],[\"协变性\",{\"1\":{\"1288\":1}}],[\"协议栈优化\",{\"1\":{\"3228\":1}}],[\"协议结构\",{\"1\":{\"3172\":1}}],[\"协议优化\",{\"1\":{\"3091\":1}}],[\"协议处理层优化\",{\"0\":{\"1111\":1}}],[\"协议实现问题\",{\"0\":{\"1106\":1}}],[\"协议\",{\"1\":{\"1104\":1}}],[\"协议类型\",{\"1\":{\"1101\":1}}],[\"协议传输\",{\"1\":{\"305\":1}}],[\"协议明码传输\",{\"1\":{\"305\":1}}],[\"协议不匹配\",{\"1\":{\"125\":1}}],[\"泛型resultmap定义\",{\"1\":{\"3053\":1}}],[\"泛型resultmap配置\",{\"1\":{\"3053\":1}}],[\"泛型resultmap\",{\"0\":{\"3053\":1}}],[\"泛型basemapper\",{\"1\":{\"3052\":2}}],[\"泛型mapper接口\",{\"0\":{\"3052\":1}}],[\"泛型dao实现\",{\"1\":{\"3049\":1}}],[\"泛型dao接口\",{\"1\":{\"3049\":1}}],[\"泛型dao与service\",{\"1\":{\"3049\":1}}],[\"泛型二分查找方法\",{\"1\":{\"3047\":1}}],[\"泛型排序方法\",{\"1\":{\"3047\":1}}],[\"泛型在现代java框架设计中扮演着至关重要的角色\",{\"1\":{\"3043\":1}}],[\"泛型在框架设计中的应用\",{\"0\":{\"3042\":1}}],[\"泛型通配符详解\",{\"0\":{\"3037\":1}}],[\"泛型通过参数化类型实现了\",{\"1\":{\"1298\":1}}],[\"泛型数组创建限制\",{\"1\":{\"3035\":1}}],[\"泛型数组的限制\",{\"1\":{\"3028\":1}}],[\"泛型作为java的核心特性之一\",{\"1\":{\"3031\":1}}],[\"泛型信息在运行时被擦除\",{\"1\":{\"3028\":1}}],[\"泛型体现了java中的\",{\"1\":{\"3027\":1}}],[\"泛型类定义\",{\"1\":{\"3034\":1}}],[\"泛型类型擦除机制\",{\"0\":{\"3033\":1}}],[\"泛型类型参数只能是引用类型\",{\"1\":{\"3028\":1}}],[\"泛型类型参数不能是基本类型\",{\"1\":{\"3028\":1}}],[\"泛型类实现泛型接口\",{\"1\":{\"3021\":1}}],[\"泛型类可以定义多个类型参数\",{\"1\":{\"3020\":1}}],[\"泛型类是指在类定义时使用类型参数的类\",{\"1\":{\"3019\":1}}],[\"泛型类的定义与使用\",{\"0\":{\"3019\":1}}],[\"泛型类与泛型接口\",{\"0\":{\"3018\":1}}],[\"泛型的出现解决了这些问题\",{\"1\":{\"3017\":1}}],[\"泛型的核心思想\",{\"1\":{\"3016\":1}}],[\"泛型的基本概念\",{\"0\":{\"3015\":1}}],[\"泛型的本质是参数化类型\",{\"1\":{\"1286\":1}}],[\"泛型的本质与作用\",{\"0\":{\"1286\":1}}],[\"泛型接口的定义方式与泛型类类似\",{\"1\":{\"3021\":1}}],[\"泛型接口的定义与实现\",{\"0\":{\"3021\":1}}],[\"泛型接口\",{\"1\":{\"3013\":1}}],[\"泛型是java\",{\"1\":{\"3013\":1}}],[\"泛型是java面试中的高频考点\",{\"1\":{\"1283\":1}}],[\"泛型基础\",{\"0\":{\"3012\":1}}],[\"泛型基础概念辨析\",{\"0\":{\"1285\":1}}],[\"泛型e类型的元素\",{\"1\":{\"2439\":1}}],[\"泛型支持\",{\"1\":{\"2314\":1}}],[\"泛型方法重载限制\",{\"1\":{\"3035\":1}}],[\"泛型方法的类型参数也会被相应的边界类型或object替换\",{\"1\":{\"3034\":1}}],[\"泛型方法的定义\",{\"0\":{\"3023\":1}}],[\"泛型方法的定义与使用\",{\"1\":{\"3013\":1}}],[\"泛型方法与泛型类的类型参数有何区别\",{\"1\":{\"3029\":1}}],[\"泛型方法可以对类型参数进行限定\",{\"1\":{\"3025\":1}}],[\"泛型方法是指在方法声明时定义类型参数的方法\",{\"1\":{\"3023\":1}}],[\"泛型方法\",{\"0\":{\"3022\":1},\"1\":{\"3023\":1}}],[\"泛型方法返回值的类型推断陷阱\",{\"0\":{\"1303\":1}}],[\"泛型方法实现两数交换\",{\"0\":{\"1295\":1}}],[\"泛型设计的开闭原则体现\",{\"0\":{\"1298\":1}}],[\"泛型面试高频编程题\",{\"0\":{\"1293\":1}}],[\"泛型静态变量共享\",{\"1\":{\"1291\":1}}],[\"泛型实现多类型支持\",{\"1\":{\"1287\":1}}],[\"泛型与依赖注入的协同\",{\"0\":{\"1299\":1}}],[\"泛型与数组的对比\",{\"0\":{\"1288\":1}}],[\"泛型与重载都能实现多类型支持\",{\"1\":{\"1287\":1}}],[\"泛型与重载的区别\",{\"0\":{\"1287\":1}}],[\"泛型与继承的关系等\",{\"1\":{\"1283\":1}}],[\"泛型\",{\"0\":{\"1282\":1,\"3331\":1},\"1\":{\"1287\":1,\"1288\":1,\"3016\":1,\"3046\":1}}],[\"泛型擦除机制对java虚拟机的影响是什么\",{\"1\":{\"1304\":1}}],[\"泛型擦除\",{\"1\":{\"1034\":1}}],[\"闭原则\",{\"1\":{\"1273\":1,\"2973\":1}}],[\"然而\",{\"1\":{\"1271\":1}}],[\"然后通过反射读取注解信息\",{\"1\":{\"3141\":1}}],[\"然后通过反射调用其构造函数创建实例\",{\"1\":{\"1266\":1}}],[\"然后替换旧数组引用\",{\"1\":{\"2456\":1,\"2513\":1}}],[\"然后size自增\",{\"1\":{\"2437\":1}}],[\"然后检查循环条件\",{\"1\":{\"2138\":1}}],[\"然后回车\",{\"1\":{\"1882\":1}}],[\"然后按\",{\"1\":{\"1882\":1}}],[\"然后\",{\"1\":{\"1869\":1,\"1918\":1,\"2513\":1}}],[\"然后粘贴内容\",{\"1\":{\"1869\":1}}],[\"然后才能进行nginx的安装\",{\"1\":{\"1779\":1}}],[\"然后从服务器的sql线程会根据中继日志中的内容执行sql语句\",{\"1\":{\"1760\":1}}],[\"然后对自己的数据副本执行这些操作\",{\"1\":{\"1760\":1}}],[\"然后保存退出\",{\"1\":{\"1624\":1}}],[\"然后查看\",{\"1\":{\"1586\":1}}],[\"然后重新启动服务\",{\"1\":{\"1586\":1}}],[\"然后重新执行`\",{\"1\":{\"264\":1}}],[\"然后重启kibana即可\",{\"1\":{\"1520\":1}}],[\"然后存储以供后续使用\",{\"1\":{\"1507\":1}}],[\"然后添加相应的任务\",{\"1\":{\"1504\":1}}],[\"然后使用快捷匹配模式\",{\"1\":{\"1788\":1}}],[\"然后使用命令mount\",{\"1\":{\"1500\":1}}],[\"然后使用黑名单进行防控\",{\"1\":{\"192\":1}}],[\"然后遍历数组\",{\"1\":{\"1170\":1}}],[\"然后清除\",{\"1\":{\"1150\":1}}],[\"然后清除使用过的内存块\",{\"1\":{\"765\":1}}],[\"然后又从b修改回a\",{\"1\":{\"1139\":1}}],[\"然后将这些接口转发到真正的请求地址\",{\"1\":{\"1387\":1}}],[\"然后将存活对象向一端移动\",{\"1\":{\"766\":1,\"1150\":1}}],[\"然后将新版本解压命名为mysql将原来的my\",{\"1\":{\"120\":1}}],[\"然后统一回收被标记的对象\",{\"1\":{\"764\":1}}],[\"然后from和to区角色互换\",{\"1\":{\"720\":1}}],[\"然后运行mvn\",{\"1\":{\"456\":1}}],[\"然后可以通过\",{\"1\":{\"445\":1}}],[\"然后根据\",{\"1\":{\"423\":1}}],[\"然后输入你想要查询的依赖名\",{\"1\":{\"302\":1}}],[\"然后再加上a\",{\"1\":{\"2119\":1}}],[\"然后再安装docker\",{\"1\":{\"1714\":1}}],[\"然后再注入依赖对象\",{\"1\":{\"331\":1}}],[\"然后再将数据缓存的问题\",{\"1\":{\"189\":1}}],[\"然后再在master2上创建表写数据\",{\"1\":{\"104\":1}}],[\"然后在数据库上重新启用分析器\",{\"1\":{\"1739\":1}}],[\"然后在application\",{\"1\":{\"434\":1,\"445\":1}}],[\"然后在配置类中定义需要加载的bean\",{\"1\":{\"423\":1}}],[\"然后在各个sentinel之间进行共享\",{\"1\":{\"181\":1}}],[\"然后在启动类上添加\",{\"1\":{\"423\":1}}],[\"然后在启动\",{\"1\":{\"121\":1}}],[\"然后我们可以得到应用服务全年可用的时间\",{\"1\":{\"160\":1}}],[\"然后进行相关操作\",{\"1\":{\"148\":1}}],[\"然后ctrl+y还能恢复\",{\"1\":{\"137\":1}}],[\"然后传递给下一个操作\",{\"1\":{\"58\":1,\"64\":1}}],[\"拼接方式\",{\"1\":{\"2310\":1}}],[\"拼接结果\",{\"1\":{\"1270\":1}}],[\"拼接成一个\",{\"1\":{\"303\":1}}],[\"绕过访问检查\",{\"1\":{\"1263\":1,\"1269\":1}}],[\"鼓励使用异常处理正常流程\",{\"1\":{\"1254\":1}}],[\"吞噬异常\",{\"1\":{\"1253\":1}}],[\"吞吐量\",{\"1\":{\"1347\":1,\"2728\":1,\"3091\":1,\"3106\":1,\"3111\":1}}],[\"吞吐量要求\",{\"1\":{\"818\":1,\"852\":1,\"886\":1,\"920\":1}}],[\"吞吐量与延迟\",{\"1\":{\"809\":1,\"843\":1,\"877\":1,\"911\":1}}],[\"隐藏错误\",{\"1\":{\"2959\":1}}],[\"隐藏实现细节\",{\"1\":{\"2940\":1,\"2952\":1}}],[\"隐藏底层复杂的转换细节\",{\"1\":{\"2907\":1}}],[\"隐藏底层实现细节\",{\"1\":{\"1252\":1}}],[\"隐藏内部实现细节\",{\"1\":{\"2800\":1}}],[\"隐藏的复杂度\",{\"0\":{\"2723\":1}}],[\"隐藏创建细节\",{\"1\":{\"1331\":1}}],[\"隐藏了内部实现细节\",{\"1\":{\"1216\":1}}],[\"信号来停止指定服务的容器\",{\"1\":{\"3246\":1}}],[\"信任\",{\"1\":{\"1940\":1}}],[\"信息完整\",{\"1\":{\"2940\":1,\"2958\":1}}],[\"信息不完整\",{\"1\":{\"2071\":1}}],[\"信息\",{\"1\":{\"1806\":1}}],[\"信息是明文传输\",{\"1\":{\"1414\":1}}],[\"信息隐藏\",{\"1\":{\"1252\":1}}],[\"信令优化\",{\"0\":{\"1115\":1}}],[\"倍\",{\"1\":{\"1250\":1}}],[\"近似\",{\"1\":{\"1247\":1}}],[\"受检或非受检\",{\"1\":{\"2938\":1}}],[\"受检异常用于表示可预见且应该处理的错误\",{\"1\":{\"2931\":1}}],[\"受检异常确保程序员处理可预见的错误\",{\"1\":{\"2929\":1}}],[\"受检异常\",{\"1\":{\"2925\":1,\"2926\":1}}],[\"受检异常适用场景\",{\"1\":{\"1244\":1}}],[\"受检异常与非受检异常的选择\",{\"0\":{\"1244\":1}}],[\"受保护修饰符\",{\"1\":{\"2797\":1}}],[\"受保护访问级别\",{\"1\":{\"2076\":1}}],[\"受密码保护的方式\",{\"1\":{\"1503\":1}}],[\"受系统内存限制\",{\"1\":{\"715\":1}}],[\"继续接受下一个连接\",{\"1\":{\"3120\":1}}],[\"继续接受其他连接\",{\"1\":{\"1238\":1}}],[\"继续保留类型参数\",{\"1\":{\"3021\":1}}],[\"继续安装\",{\"1\":{\"1496\":1}}],[\"继承实现了代码复用和类层次结构\",{\"1\":{\"2754\":1}}],[\"继承方式\",{\"1\":{\"2748\":1}}],[\"继承是\",{\"1\":{\"2748\":1}}],[\"继承滥用\",{\"0\":{\"2748\":1}}],[\"继承的基本语法\",{\"0\":{\"2736\":1}}],[\"继承的类称为子类\",{\"1\":{\"1204\":1}}],[\"继承另一个类\",{\"1\":{\"2735\":1}}],[\"继承允许一个类\",{\"1\":{\"2735\":1}}],[\"继承允许一个类获取另一个类的属性和方法\",{\"1\":{\"1204\":1}}],[\"继承vector暴露了过多的公共方法\",{\"1\":{\"2557\":1}}],[\"继承vector\",{\"1\":{\"2548\":1}}],[\"继承体系\",{\"0\":{\"2362\":1,\"2399\":1,\"2460\":1}}],[\"继承自writer\",{\"1\":{\"2903\":1,\"2909\":1}}],[\"继承自filteroutputstream\",{\"1\":{\"2902\":1,\"2909\":1}}],[\"继承自inputstreamreader\",{\"1\":{\"2885\":1}}],[\"继承自reader\",{\"1\":{\"2885\":1}}],[\"继承自abstractlist抽象类\",{\"1\":{\"2432\":1}}],[\"继承自collection接口\",{\"1\":{\"2314\":1}}],[\"继承自父类\",{\"1\":{\"2263\":2}}],[\"继承abstractstringbuilder\",{\"1\":{\"2275\":2}}],[\"继承关系\",{\"1\":{\"2275\":1,\"2885\":1,\"2909\":1}}],[\"继承类\",{\"1\":{\"2077\":1}}],[\"继承\",{\"0\":{\"1204\":1,\"2735\":1},\"1\":{\"1214\":1,\"1216\":1,\"2730\":1}}],[\"继承thread类\",{\"1\":{\"592\":1}}],[\"填写环境变量\",{\"0\":{\"1542\":1,\"1546\":1}}],[\"填写镜像路径\",{\"0\":{\"1540\":1,\"1544\":1}}],[\"填充等\",{\"1\":{\"2148\":1}}],[\"填充测试数据\",{\"1\":{\"1238\":1}}],[\"填充缓冲区数据\",{\"1\":{\"1238\":1}}],[\"填域名\",{\"1\":{\"992\":1}}],[\"块变量\",{\"1\":{\"2767\":1}}],[\"块设备每秒发送的块数量\",{\"1\":{\"1887\":1}}],[\"块设备每秒接收的块数量\",{\"1\":{\"1887\":1}}],[\"块\",{\"1\":{\"1238\":2}}],[\"跨语言支持广泛\",{\"1\":{\"3085\":1}}],[\"跨语言配置优先使用xml\",{\"1\":{\"1086\":1}}],[\"跨服务异常处理需要考虑以下几点\",{\"1\":{\"2960\":1}}],[\"跨包子类只能通过继承关系访问protected成员\",{\"1\":{\"2801\":1}}],[\"跨团队规范委员会\",{\"1\":{\"2029\":1}}],[\"跨平台一致性\",{\"1\":{\"3130\":1}}],[\"跨平台应用必须使用printwriter并显式指定编码\",{\"1\":{\"2909\":1}}],[\"跨平台\",{\"1\":{\"1377\":1}}],[\"跨平台可能出现乱码\",{\"1\":{\"1236\":1}}],[\"零窗口探测机制处理接收窗口为0的情况\",{\"1\":{\"3076\":1}}],[\"零拷贝机制\",{\"1\":{\"1347\":1}}],[\"零拷贝技术文件复制示例\",{\"1\":{\"1232\":1}}],[\"零拷贝技术\",{\"1\":{\"1232\":1,\"1238\":1}}],[\"零拷贝技术原理\",{\"0\":{\"1232\":1}}],[\"零拷贝\",{\"0\":{\"1321\":1},\"1\":{\"1232\":1,\"2919\":1,\"3128\":1}}],[\"零散化地去学习\",{\"1\":{\"0\":1}}],[\"理论上并发度为数组长度\",{\"1\":{\"2541\":1}}],[\"理论基础\",{\"0\":{\"586\":1}}],[\"理解io线程和业务线程的分离\",{\"1\":{\"3129\":1}}],[\"理解\",{\"0\":{\"2976\":1,\"3030\":1,\"3071\":1,\"3142\":1,\"3200\":1}}],[\"理解两者差异对避免常见错误至关重要\",{\"1\":{\"2247\":1}}],[\"理解字符串常量的实现机制对于编写高效java代码至关重要\",{\"1\":{\"2236\":1}}],[\"理解了主次\",{\"1\":{\"1501\":1}}],[\"理解各种模型的优缺点和适用场景是面试必备知识\",{\"1\":{\"1313\":1}}],[\"理解这些模式有助于深入掌握io流的设计思想\",{\"1\":{\"1231\":1}}],[\"收到bye请求并响应2xx后终止\",{\"1\":{\"3209\":1}}],[\"收到响应\",{\"1\":{\"3190\":1}}],[\"收到udp数据\",{\"1\":{\"3066\":1}}],[\"收到服务器响应\",{\"1\":{\"3065\":1}}],[\"收到数据\",{\"1\":{\"2916\":1,\"2921\":1}}],[\"收到数据后发送ack确认\",{\"1\":{\"1312\":1}}],[\"收到请求\",{\"1\":{\"1324\":1,\"2921\":1}}],[\"收到客户端消息\",{\"1\":{\"1314\":1,\"1315\":1,\"3065\":1,\"3125\":1}}],[\"收到接收方的ack\",{\"1\":{\"1312\":1}}],[\"收到消息\",{\"1\":{\"1228\":1,\"1238\":1,\"1332\":1,\"3118\":1,\"3120\":1}}],[\"收集异常而非立即抛出\",{\"1\":{\"2953\":1}}],[\"收集多个异常并聚合为一个复合异常\",{\"1\":{\"2953\":1}}],[\"收集团队反馈优化规范\",{\"1\":{\"2027\":1}}],[\"收集生产环境gc日志\",{\"1\":{\"818\":1,\"852\":1,\"886\":1,\"920\":1}}],[\"收集器\",{\"1\":{\"770\":2}}],[\"收集结果到list\",{\"1\":{\"543\":1}}],[\"缓慢增长\",{\"1\":{\"2702\":1}}],[\"缓冲命中率低\",{\"1\":{\"2873\":1}}],[\"缓冲\",{\"1\":{\"2859\":1}}],[\"缓冲字符流示例\",{\"1\":{\"2856\":1}}],[\"缓冲字符流\",{\"0\":{\"2856\":1}}],[\"缓冲流在什么情况下性能提升不明显甚至可能降低性能\",{\"1\":{\"2873\":1}}],[\"缓冲流性能可能下降的情况及避免方法\",{\"1\":{\"2873\":1}}],[\"缓冲流性能优势明显\",{\"1\":{\"2872\":1}}],[\"缓冲流性能对比示例\",{\"1\":{\"1224\":1}}],[\"缓冲流专注于提供缓冲功能\",{\"1\":{\"2871\":1}}],[\"缓冲流不改变原有流的功能\",{\"1\":{\"2871\":1}}],[\"缓冲流体现了以下设计模式和思想\",{\"1\":{\"2871\":1}}],[\"缓冲流与非缓冲流性能对比\",{\"1\":{\"2868\":1}}],[\"缓冲流的close\",{\"1\":{\"2872\":1}}],[\"缓冲流的特殊方法\",{\"0\":{\"2869\":1}}],[\"缓冲流的性能优势\",{\"0\":{\"2868\":1}}],[\"缓冲流的核心原理是在内存中创建一个缓冲区\",{\"1\":{\"2865\":1}}],[\"缓冲流的工作原理\",{\"0\":{\"2865\":1}}],[\"缓冲流的实现原理与性能优势\",{\"0\":{\"1224\":1}}],[\"缓冲流本身并不直接与数据源或目标交互\",{\"1\":{\"2863\":1}}],[\"缓冲流\",{\"0\":{\"2862\":1},\"1\":{\"1224\":1,\"2863\":1}}],[\"缓冲处理流\",{\"1\":{\"1222\":1}}],[\"缓冲区容量\",{\"1\":{\"2914\":1,\"3116\":1}}],[\"缓冲区批量处理\",{\"1\":{\"2913\":1}}],[\"缓冲区内容长度\",{\"1\":{\"2904\":4}}],[\"缓冲区优势无法发挥\",{\"1\":{\"2873\":1}}],[\"缓冲区优化\",{\"1\":{\"1238\":1}}],[\"缓冲区超过内存页大小或系统缓存\",{\"1\":{\"2873\":1}}],[\"缓冲区过大\",{\"1\":{\"2873\":1}}],[\"缓冲区并非越大越好\",{\"1\":{\"2872\":1}}],[\"缓冲区使用\",{\"1\":{\"2848\":1}}],[\"缓冲区使用不当\",{\"0\":{\"1235\":1,\"1338\":1},\"1\":{\"1338\":1}}],[\"缓冲区大小选择\",{\"1\":{\"2872\":1}}],[\"缓冲区大小\",{\"1\":{\"2466\":1,\"2865\":1}}],[\"缓冲区太小会导致频繁io\",{\"1\":{\"1342\":1}}],[\"缓冲区满后再一次性写入底层流\",{\"1\":{\"1224\":1}}],[\"缓冲区\",{\"0\":{\"2914\":1},\"1\":{\"1221\":1,\"1315\":1}}],[\"缓存注解定义\",{\"1\":{\"3170\":1}}],[\"缓存注解解析结果\",{\"0\":{\"1081\":1},\"1\":{\"3150\":1}}],[\"缓存失效\",{\"1\":{\"3011\":1}}],[\"缓存实现\",{\"1\":{\"3011\":1}}],[\"缓存键设计\",{\"1\":{\"3011\":1}}],[\"缓存粒度\",{\"1\":{\"3011\":1}}],[\"缓存已创建的拷贝对象\",{\"1\":{\"3007\":1}}],[\"缓存已拷贝的对象\",{\"1\":{\"3007\":1}}],[\"缓存method对象\",{\"1\":{\"2993\":1}}],[\"缓存的entry集合视图\",{\"1\":{\"2621\":1}}],[\"缓存的哈希码\",{\"1\":{\"2240\":1}}],[\"缓存大小\",{\"1\":{\"2512\":1}}],[\"缓存容量\",{\"1\":{\"2512\":1,\"2632\":1}}],[\"缓存是一种常见的缓存淘汰策略\",{\"1\":{\"2512\":1}}],[\"缓存命中率低\",{\"1\":{\"2511\":1}}],[\"缓存命中率高\",{\"1\":{\"2511\":1}}],[\"缓存友好\",{\"1\":{\"2503\":1}}],[\"缓存过期清理\",{\"1\":{\"2486\":1}}],[\"缓存\",{\"1\":{\"2427\":1,\"2632\":1,\"2643\":1}}],[\"缓存字符串的哈希码\",{\"1\":{\"2288\":1}}],[\"缓存利用率高\",{\"1\":{\"2155\":1,\"2484\":1}}],[\"缓存操作失败\",{\"1\":{\"2051\":1}}],[\"缓存内存数\",{\"1\":{\"1885\":2}}],[\"缓存反射对象的示例\",{\"1\":{\"2993\":1}}],[\"缓存反射对象\",{\"1\":{\"1276\":1,\"2974\":1,\"2993\":1}}],[\"缓存class对象\",{\"1\":{\"1264\":1}}],[\"缓存控制\",{\"1\":{\"1072\":1}}],[\"缓存优化\",{\"1\":{\"1048\":1}}],[\"缓存size\",{\"1\":{\"1043\":1}}],[\"缓存范围内\",{\"1\":{\"1040\":1}}],[\"缓存机制\",{\"1\":{\"965\":1,\"967\":1,\"987\":1}}],[\"缓存中的条目已被自动移除\",{\"1\":{\"2685\":1}}],[\"缓存中的键\",{\"1\":{\"283\":1}}],[\"缓存中获取值\",{\"1\":{\"2685\":1}}],[\"缓存中指定键对应的值\",{\"1\":{\"283\":1}}],[\"缓存中值的类型\",{\"1\":{\"283\":1}}],[\"缓存中较多的key集中过期\",{\"1\":{\"190\":1}}],[\"缓存工具类\",{\"1\":{\"283\":2}}],[\"缓存查询命中率\",{\"1\":{\"193\":1}}],[\"缓存null\",{\"1\":{\"192\":1}}],[\"缓存穿透\",{\"0\":{\"192\":1}}],[\"缓存击穿是指访问了不存在的数据\",{\"1\":{\"192\":1}}],[\"缓存击穿就是单个高热数据过期的瞬间\",{\"1\":{\"191\":1}}],[\"缓存击穿\",{\"0\":{\"191\":1}}],[\"缓存雪崩就是瞬间过期数据量太大\",{\"1\":{\"190\":1}}],[\"缓存雪崩\",{\"0\":{\"190\":1}}],[\"缓存预热就是系统启动前\",{\"1\":{\"189\":1}}],[\"缓存预热\",{\"0\":{\"189\":1},\"1\":{\"3011\":1}}],[\"缓存之后很容易达到\",{\"1\":{\"129\":1}}],[\"视为重复元素\",{\"1\":{\"2365\":1,\"2393\":1}}],[\"视频会议\",{\"1\":{\"3172\":1}}],[\"视频流传输\",{\"1\":{\"3130\":1}}],[\"视频等\",{\"1\":{\"2839\":1}}],[\"视频等的压缩\",{\"1\":{\"2119\":1}}],[\"视频\",{\"1\":{\"1221\":1}}],[\"视图对象\",{\"1\":{\"2763\":1}}],[\"视图机制\",{\"0\":{\"2665\":1}}],[\"视图出现\",{\"1\":{\"1563\":1}}],[\"视图负责显示界面\",{\"1\":{\"387\":1}}],[\"视图解析器\",{\"1\":{\"377\":1}}],[\"视图定义人不完全合格\",{\"1\":{\"125\":1}}],[\"视图文本校验和失败\",{\"1\":{\"125\":1}}],[\"视图的select和视图的字段列表有不同的列计数\",{\"1\":{\"125\":1}}],[\"视图的select引用了临时表\",{\"1\":{\"125\":1}}],[\"视图的select包含1个变量或参数\",{\"1\":{\"125\":1}}],[\"视图的select包含\",{\"1\":{\"125\":1}}],[\"视图的select在from子句中包含子查询\",{\"1\":{\"125\":1}}],[\"视图\",{\"1\":{\"125\":4,\"377\":1,\"387\":1}}],[\"音频等\",{\"1\":{\"2830\":1}}],[\"音频\",{\"1\":{\"1221\":1,\"2119\":1,\"2839\":1}}],[\"掌握复杂场景下的泛型使用技巧\",{\"1\":{\"3031\":1}}],[\"掌握字符串操作的性能特性\",{\"1\":{\"2284\":1}}],[\"掌握字符串的特性和常用方法对编写高效代码至关重要\",{\"1\":{\"2185\":1}}],[\"掌握正确的数组打印方法对开发效率至关重要\",{\"1\":{\"2209\":1}}],[\"掌握流程控制是学习java编程的基础\",{\"1\":{\"2121\":1}}],[\"掌握java运算符是学习java语法的基础\",{\"1\":{\"2107\":1}}],[\"掌握java关键字是学习java语法的基础\",{\"1\":{\"2074\":1}}],[\"掌握常见问题的解决思路和最佳实践\",{\"1\":{\"1218\":1}}],[\"掌握注解技术不仅能应对面试中的理论问题\",{\"1\":{\"1061\":1}}],[\"灯关闭了\",{\"1\":{\"1212\":2}}],[\"灯打开了\",{\"1\":{\"1212\":2}}],[\"鸵鸟会跑\",{\"1\":{\"1210\":1}}],[\"鸵鸟不会飞\",{\"1\":{\"1210\":2}}],[\"鸟会移动\",{\"1\":{\"1210\":1}}],[\"鸟会飞\",{\"1\":{\"1205\":1,\"1210\":1}}],[\"抽象与实现分离\",{\"1\":{\"2847\":1}}],[\"抽象成员\",{\"1\":{\"2808\":1}}],[\"抽象类\",{\"1\":{\"1206\":1,\"1216\":1,\"2761\":1}}],[\"抽象通过抽象类和接口实现\",{\"1\":{\"1206\":1}}],[\"抽象是指忽略细节\",{\"1\":{\"1206\":1}}],[\"抽象\",{\"0\":{\"1206\":1}}],[\"抽象方法不需要检查\",{\"1\":{\"2027\":1}}],[\"抽象方法\",{\"1\":{\"541\":1,\"1206\":1,\"2761\":1,\"2808\":1}}],[\"狗会游泳\",{\"1\":{\"1211\":2}}],[\"狗会汪汪叫\",{\"1\":{\"1204\":1}}],[\"狗不会飞\",{\"1\":{\"1211\":1}}],[\"狗吃骨头\",{\"1\":{\"1204\":1,\"1211\":2}}],[\"动物进食\",{\"1\":{\"2797\":1}}],[\"动物会移动\",{\"1\":{\"1205\":1}}],[\"动物会进食\",{\"1\":{\"1204\":1}}],[\"动词开头\",{\"1\":{\"2784\":1}}],[\"动静资源做好了拆分以后\",{\"1\":{\"1401\":1}}],[\"动静分离是让动态网站里的动态网页根据一定规则把不变的资源和经常变的资源区分开来\",{\"1\":{\"1401\":1}}],[\"动态打印跟踪\",{\"1\":{\"3245\":1}}],[\"动态选择执行逻辑\",{\"1\":{\"3168\":1}}],[\"动态编程和元编程提供了强大的支持\",{\"1\":{\"2996\":1}}],[\"动态性与静态性平衡\",{\"1\":{\"2992\":1}}],[\"动态生成字节码实现\",{\"1\":{\"2987\":1}}],[\"动态分派方法\",{\"1\":{\"2986\":1}}],[\"动态扩展程序功能\",{\"1\":{\"2973\":1}}],[\"动态扩容机制\",{\"0\":{\"2581\":1,\"2609\":1}}],[\"动态扩容\",{\"1\":{\"2461\":2}}],[\"动态加载类\",{\"1\":{\"2965\":1}}],[\"动态连接两个线程\",{\"1\":{\"2897\":1}}],[\"动态地给一个对象添加一些额外的职责\",{\"1\":{\"2895\":1}}],[\"动态数组扩容的摊还复杂度分析\",{\"1\":{\"2704\":1}}],[\"动态数组设计\",{\"0\":{\"2443\":1}}],[\"动态数组与链表的设计权衡\",{\"0\":{\"2333\":1}}],[\"动态数组\",{\"1\":{\"2316\":3,\"2331\":1,\"2503\":1}}],[\"动态数组实现思路\",{\"1\":{\"2161\":1}}],[\"动态容量\",{\"1\":{\"2314\":1}}],[\"动态切换小图的分析和实现\",{\"0\":{\"1469\":1}}],[\"动态的走动态的服务器\",{\"1\":{\"1401\":1}}],[\"动态处理差\",{\"1\":{\"1382\":1}}],[\"动态代理是反射机制的重要应用之一\",{\"1\":{\"3004\":1}}],[\"动态代理是反射的重要应用之一\",{\"1\":{\"1267\":1}}],[\"动态代理实现日志切面\",{\"1\":{\"3002\":1}}],[\"动态代理\",{\"1\":{\"2992\":1,\"2996\":1}}],[\"动态代理处理器\",{\"1\":{\"1267\":1}}],[\"动态添加功能\",{\"1\":{\"1222\":1,\"1231\":1,\"2337\":1}}],[\"动态初始化不规则数组时\",{\"1\":{\"2180\":1}}],[\"动态初始化\",{\"1\":{\"1160\":1,\"2144\":1,\"2167\":2}}],[\"动态调整协议参数\",{\"1\":{\"1117\":1}}],[\"动态\",{\"1\":{\"1046\":1}}],[\"动态对象年龄判定\",{\"1\":{\"708\":1}}],[\"动态链接和方法返回地址\",{\"1\":{\"1145\":1}}],[\"动态链接\",{\"1\":{\"707\":1,\"714\":1}}],[\"演进策略\",{\"1\":{\"2014\":1}}],[\"演进趋势\",{\"1\":{\"1198\":1}}],[\"演示反射访问控制机制\",{\"1\":{\"2989\":1}}],[\"演示反射字段查找机制\",{\"1\":{\"2984\":1}}],[\"演示反射方法查找机制\",{\"1\":{\"2983\":1}}],[\"演示类加载过程与class对象生成\",{\"1\":{\"2980\":1}}],[\"演示堆栈跟踪\",{\"1\":{\"2936\":1}}],[\"演示异常表机制\",{\"1\":{\"2935\":1}}],[\"演示运行时异常\",{\"1\":{\"2927\":1}}],[\"演示非阻塞io多路复用\",{\"1\":{\"2916\":1}}],[\"演示使用通道进行文件复制操作\",{\"1\":{\"2915\":1}}],[\"演示使用缓冲流对大文件复制性能的提升\",{\"1\":{\"2868\":1}}],[\"演示使用缓冲流复制大文件以提高性能\",{\"1\":{\"2866\":1}}],[\"演示使用缓冲流与不使用缓冲流的性能差异\",{\"1\":{\"1224\":1}}],[\"演示缓冲区的创建\",{\"1\":{\"2914\":1}}],[\"演示缓冲流的基本工作原理\",{\"1\":{\"2873\":1}}],[\"演示缓冲流+转换流+数据流的组合使用\",{\"1\":{\"1222\":1}}],[\"演示字符打印流的基本用法\",{\"1\":{\"2903\":1}}],[\"演示字节打印流的基本用法\",{\"1\":{\"2902\":1}}],[\"演示java支持的字符集\",{\"1\":{\"2881\":1}}],[\"演示高效的大文件读写\",{\"1\":{\"2917\":1}}],[\"演示高效的编码转换文件复制\",{\"1\":{\"2880\":1}}],[\"演示高效读写文本文件\",{\"1\":{\"2856\":1,\"2867\":1}}],[\"演示在内存中操作字符数据\",{\"1\":{\"2857\":1}}],[\"演示在内存中使用字节流进行数据操作\",{\"1\":{\"2844\":1}}],[\"演示文本文件的读写操作\",{\"1\":{\"2833\":1}}],[\"演示如何使用指定编码写入文本文件\",{\"1\":{\"2879\":1}}],[\"演示如何使用指定编码读取文本文件\",{\"1\":{\"2878\":1}}],[\"演示如何使用fileinputstream和fileoutputstream复制文件\",{\"1\":{\"2843\":1}}],[\"演示如何指定字符编码读写文本文件\",{\"1\":{\"2855\":1}}],[\"演示如何读写基本数据类型\",{\"1\":{\"2845\":1}}],[\"演示如何读取文件内容\",{\"1\":{\"2831\":1}}],[\"演示如何写入数据到文件\",{\"1\":{\"2832\":1}}],[\"演示如何发送invite请求\",{\"1\":{\"1094\":1}}],[\"演示concurrenthashmap的原子操作\",{\"1\":{\"2410\":1}}],[\"演示线程安全list的使用\",{\"1\":{\"2328\":1}}],[\"演示对象头mark\",{\"1\":{\"711\":1}}],[\"演示递归调用导致栈溢出\",{\"1\":{\"693\":1}}],[\"演示\",{\"1\":{\"12\":1}}],[\"迭代前获取快照\",{\"1\":{\"2694\":1}}],[\"迭代行为不可预测\",{\"0\":{\"2694\":1}}],[\"迭代时抛出concurrentmodificationexception\",{\"1\":{\"2640\":1}}],[\"迭代时不需要像hashmap那样遍历整个哈希表\",{\"1\":{\"2636\":1}}],[\"迭代顺序为最近访问的元素在后\",{\"1\":{\"2635\":1}}],[\"迭代顺序保证\",{\"0\":{\"2635\":1}}],[\"迭代特性\",{\"1\":{\"2518\":1}}],[\"迭代操作不会抛出concurrentmodificationexception\",{\"1\":{\"2513\":1}}],[\"迭代操作需要手动同步\",{\"1\":{\"2513\":1}}],[\"迭代操作\",{\"1\":{\"2513\":2}}],[\"迭代操作仍需手动加锁\",{\"1\":{\"1194\":1}}],[\"迭代速度慢\",{\"1\":{\"2511\":1}}],[\"迭代速度快\",{\"1\":{\"2511\":1}}],[\"迭代效率\",{\"1\":{\"2503\":1}}],[\"迭代性能\",{\"1\":{\"2484\":1,\"2511\":1,\"2639\":1}}],[\"迭代过程中不需要加锁\",{\"1\":{\"2543\":1}}],[\"迭代过程中不加锁\",{\"1\":{\"2543\":1}}],[\"迭代过程中检查modcount是否等于expectedmodcount\",{\"1\":{\"2444\":1,\"2610\":1}}],[\"迭代过程中修改map结构\",{\"1\":{\"2420\":1}}],[\"迭代器基于创建时的数组快照\",{\"1\":{\"2543\":1}}],[\"迭代器保存了初始节点引用\",{\"1\":{\"2543\":1}}],[\"迭代器可以看到迭代开始时集合的状态\",{\"1\":{\"2543\":1}}],[\"迭代器可以看到迭代开始时的元素\",{\"1\":{\"2530\":1}}],[\"迭代器不会看到添加的\",{\"1\":{\"2537\":1}}],[\"迭代器数据一致性\",{\"0\":{\"2537\":1}}],[\"迭代器弱一致性\",{\"1\":{\"2513\":1}}],[\"迭代器创建时记录expectedmodcount\",{\"1\":{\"2444\":1,\"2610\":1}}],[\"迭代器实现\",{\"0\":{\"2441\":1,\"2498\":1}}],[\"迭代器\",{\"1\":{\"2370\":1,\"2454\":1}}],[\"迭代器的弱一致性\",{\"0\":{\"2352\":1}}],[\"迭代器删除后\",{\"1\":{\"1190\":1}}],[\"迭代器模式的优势\",{\"1\":{\"2332\":1}}],[\"迭代器模式在集合框架中的应用\",{\"1\":{\"1185\":1}}],[\"迭代器模式提供了一种顺序访问集合元素的方法\",{\"1\":{\"1185\":1}}],[\"迭代器模式\",{\"0\":{\"1185\":1,\"2332\":1}}],[\"迭代器遍历的是数组的快照\",{\"1\":{\"2543\":1}}],[\"迭代器遍历性能最优\",{\"1\":{\"1179\":1}}],[\"迭代器遍历\",{\"1\":{\"1179\":1,\"2407\":2}}],[\"捕获特定端口的tcp数据包\",{\"1\":{\"3099\":1}}],[\"捕获特定异常\",{\"1\":{\"2079\":1}}],[\"捕获\",{\"1\":{\"2944\":1}}],[\"捕获的异常类型\",{\"1\":{\"2935\":1}}],[\"捕获所有异常\",{\"1\":{\"2079\":1}}],[\"捕获通用异常\",{\"1\":{\"1337\":1}}],[\"捕获并处理特定异常而非通用exception\",{\"1\":{\"1337\":1}}],[\"捕获到算术异常\",{\"1\":{\"1243\":1}}],[\"捕获ioexception后重建selector\",{\"1\":{\"1237\":1}}],[\"捕获异常\",{\"1\":{\"1190\":1}}],[\"捕获具体异常而非通用exception\",{\"1\":{\"1044\":1}}],[\"装饰流添加功能\",{\"1\":{\"2859\":1}}],[\"装饰器专注于同步控制\",{\"1\":{\"2337\":1}}],[\"装饰器模式比生成子类更为灵活\",{\"1\":{\"2895\":1}}],[\"装饰器模式在集合框架中的应用\",{\"1\":{\"1186\":1}}],[\"装饰器模式允许向一个现有对象添加新的功能\",{\"1\":{\"1186\":1}}],[\"装饰器模式\",{\"0\":{\"1186\":1,\"1333\":1,\"2337\":1,\"2379\":1},\"1\":{\"1231\":1,\"2358\":1,\"2410\":1,\"2429\":1,\"2835\":1,\"2847\":1,\"2871\":1,\"2895\":1,\"2907\":1}}],[\"装载的类\",{\"1\":{\"419\":1,\"463\":1}}],[\"扩容操作\",{\"1\":{\"2609\":1,\"2704\":1}}],[\"扩容\",{\"1\":{\"2573\":1}}],[\"扩容粒度大\",{\"1\":{\"2541\":1}}],[\"扩容性能问题\",{\"0\":{\"2449\":1}}],[\"扩容后的数组\",{\"1\":{\"2438\":1}}],[\"扩容后容量\",{\"1\":{\"2271\":1}}],[\"扩容数组以支持至少mincapacity的容量\",{\"1\":{\"2438\":1}}],[\"扩容时可以通过hash\",{\"1\":{\"2616\":1}}],[\"扩容时的死循环\",{\"1\":{\"2613\":1}}],[\"扩容时预留1\",{\"1\":{\"2445\":1}}],[\"扩容时不需要重新计算哈希值\",{\"1\":{\"2428\":1}}],[\"扩容时支持并发操作\",{\"1\":{\"2416\":1}}],[\"扩容优化\",{\"1\":{\"2428\":1}}],[\"扩容因子为k\",{\"1\":{\"2455\":1}}],[\"扩容因子\",{\"1\":{\"2400\":1}}],[\"扩容公式\",{\"1\":{\"2355\":1}}],[\"扩容核心方法\",{\"1\":{\"2318\":1}}],[\"扩容阈值\",{\"1\":{\"2318\":1,\"2355\":1,\"2593\":1,\"2609\":1,\"2679\":1}}],[\"扩容逻辑\",{\"1\":{\"2282\":1}}],[\"扩容为原来的1\",{\"1\":{\"2161\":1}}],[\"扩容需要创建新数组\",{\"1\":{\"2155\":1}}],[\"扩容指定表空间\",{\"1\":{\"1833\":1}}],[\"扩容机制实现\",{\"0\":{\"2438\":1}}],[\"扩容机制\",{\"0\":{\"2272\":1,\"2601\":1,\"2684\":1},\"1\":{\"1196\":1,\"2316\":1,\"2318\":1,\"2454\":1,\"2503\":1,\"2541\":1,\"2616\":1}}],[\"扩容方法\",{\"1\":{\"1181\":1}}],[\"扩展指令\",{\"0\":{\"1374\":1}}],[\"扩展框架的功能\",{\"1\":{\"1273\":1}}],[\"扩展类加载器\",{\"1\":{\"742\":1,\"745\":1,\"1147\":1}}],[\"扩展性\",{\"1\":{\"421\":1,\"1101\":1,\"2051\":1,\"2083\":1,\"2103\":1,\"2331\":1}}],[\"扩展性好\",{\"1\":{\"292\":1}}],[\"扩展命令\",{\"0\":{\"265\":1}}],[\"扩展方式等\",{\"1\":{\"43\":1}}],[\"扩展\",{\"0\":{\"14\":1,\"15\":1,\"1657\":1,\"1939\":1},\"1\":{\"15\":1,\"130\":1,\"1501\":1,\"1503\":1,\"1630\":1,\"1634\":1,\"1660\":1,\"3256\":1}}],[\"头域解析\",{\"1\":{\"3205\":1}}],[\"头域2\",{\"1\":{\"3180\":1}}],[\"头域1\",{\"1\":{\"3180\":1}}],[\"头域\",{\"1\":{\"3180\":1}}],[\"头节点也置为null\",{\"1\":{\"2497\":1}}],[\"头节点也指向新节点\",{\"1\":{\"2494\":1}}],[\"头节点的元素\",{\"1\":{\"2497\":1}}],[\"头节点\",{\"1\":{\"2497\":1}}],[\"头节点和尾节点\",{\"1\":{\"2485\":1}}],[\"头插法\",{\"1\":{\"1181\":1,\"1196\":1}}],[\"头部为最近访问\",{\"1\":{\"2512\":1}}],[\"头部操作\",{\"1\":{\"2511\":1}}],[\"头部插入\",{\"1\":{\"2503\":1}}],[\"头部元素\",{\"1\":{\"2497\":2,\"2552\":1}}],[\"头部删除\",{\"1\":{\"2327\":3,\"2354\":2}}],[\"头部添加\",{\"1\":{\"2327\":3,\"2354\":2}}],[\"头部和消息体组成\",{\"1\":{\"1098\":1}}],[\"头部和负载以\",{\"1\":{\"303\":1}}],[\"头部\",{\"1\":{\"303\":1}}],[\"桶\",{\"1\":{\"1181\":1}}],[\"拉通流水线\",{\"0\":{\"1651\":1,\"1699\":1}}],[\"拉链法解决哈希冲突\",{\"1\":{\"1181\":1}}],[\"拉取\",{\"1\":{\"1799\":1}}],[\"拉取postgres镜像\",{\"0\":{\"1604\":1}}],[\"拉取redis镜像\",{\"0\":{\"1599\":1}}],[\"拉取nginx镜像\",{\"0\":{\"1594\":1}}],[\"拉取tomcat镜像\",{\"0\":{\"1589\":1}}],[\"拉取源文件\",{\"1\":{\"1503\":1}}],[\"拉取模块下绑定的文件夹到目标文件夹下\",{\"1\":{\"1503\":1}}],[\"拉取支持m1芯片的镜像\",{\"0\":{\"233\":1}}],[\"拉取镜像\",{\"0\":{\"225\":1,\"238\":1,\"254\":1,\"1508\":1},\"1\":{\"1568\":1}}],[\"螺旋遍历结果\",{\"1\":{\"1162\":1}}],[\"冒泡排序\",{\"1\":{\"2702\":1}}],[\"冒泡排序时间复杂度o\",{\"1\":{\"1161\":1}}],[\"冒泡排序算法\",{\"1\":{\"1161\":1,\"2709\":1}}],[\"待数据发送完毕后再发送fin包\",{\"1\":{\"3070\":1}}],[\"待处理\",{\"1\":{\"2062\":1}}],[\"待排序数组\",{\"1\":{\"1161\":1,\"2709\":1}}],[\"待业务低速运转后再逐步放开访问\",{\"1\":{\"190\":1}}],[\"遍历所有列\",{\"1\":{\"3000\":1}}],[\"遍历集合视图时\",{\"1\":{\"2688\":1}}],[\"遍历顺序不保证有序\",{\"1\":{\"2585\":1}}],[\"遍历链表查找\",{\"1\":{\"2682\":1}}],[\"遍历链表查找是否存在相同key\",{\"1\":{\"1181\":1}}],[\"遍历链表\",{\"1\":{\"2496\":1}}],[\"遍历链表寻找指定元素\",{\"1\":{\"2496\":1}}],[\"遍历链表寻找null元素\",{\"1\":{\"2496\":1}}],[\"遍历values\",{\"1\":{\"2407\":2}}],[\"遍历value数组加载字节码对象\",{\"1\":{\"415\":1,\"459\":1}}],[\"遍历keyset\",{\"1\":{\"2407\":2}}],[\"遍历entryset\",{\"1\":{\"2407\":2}}],[\"遍历linkedlist使用迭代器或增强for循环\",{\"1\":{\"2348\":1}}],[\"遍历逻辑与集合实现分离\",{\"1\":{\"2332\":1}}],[\"遍历每一行\",{\"1\":{\"2170\":1}}],[\"遍历列\",{\"1\":{\"2170\":1}}],[\"遍历行中的每个元素\",{\"1\":{\"2170\":1}}],[\"遍历行\",{\"1\":{\"2170\":1}}],[\"遍历数组常用for循环和增强for循环两种方式\",{\"1\":{\"2145\":1}}],[\"遍历键值对\",{\"1\":{\"2059\":1}}],[\"遍历map时根据场景选择合适的方式\",{\"1\":{\"2059\":1}}],[\"遍历\",{\"1\":{\"1454\":1}}],[\"遍历操作频繁\",{\"1\":{\"2511\":1}}],[\"遍历操作\",{\"0\":{\"1453\":1}}],[\"遍历结果列表\",{\"1\":{\"1162\":1}}],[\"遍历方式选择\",{\"0\":{\"2615\":1}}],[\"遍历方式\",{\"0\":{\"2370\":1,\"2407\":1}}],[\"遍历方式包括嵌套for循环和增强for循环\",{\"1\":{\"2168\":1}}],[\"遍历方式包括for循环\",{\"1\":{\"1160\":1}}],[\"遍历方式3\",{\"1\":{\"1160\":1}}],[\"遍历方式2\",{\"1\":{\"1160\":1}}],[\"遍历方式1\",{\"1\":{\"1160\":1}}],[\"涉及更多的运行时检查和动态分派\",{\"1\":{\"2985\":1}}],[\"涉及更多内存操作\",{\"1\":{\"2484\":1}}],[\"涉及底层通信原理\",{\"1\":{\"1308\":1}}],[\"涉及底层实现机制\",{\"1\":{\"1283\":1}}],[\"涉及底层实现\",{\"1\":{\"1061\":1}}],[\"涉及异常体系\",{\"1\":{\"1240\":1}}],[\"涉及内存管理\",{\"1\":{\"1157\":1}}],[\"虚引用\",{\"1\":{\"2698\":1}}],[\"虚假唤醒可能是由于操作系统的调度原因或者其他线程的中断导致的\",{\"1\":{\"1139\":1}}],[\"虚假唤醒是指线程在没有被其他线程显式通知的情况下\",{\"1\":{\"1139\":1}}],[\"虚拟节点数量\",{\"1\":{\"3086\":1}}],[\"虚拟内存已使用的大小\",{\"1\":{\"1887\":1}}],[\"虚拟内存交互\",{\"0\":{\"1887\":1},\"1\":{\"1835\":1}}],[\"虚拟服务器的连接数才会计数\",{\"1\":{\"1397\":1}}],[\"虚拟主机\",{\"1\":{\"1382\":1,\"1383\":1}}],[\"虚拟机\",{\"1\":{\"3245\":2}}],[\"虚拟机中防火墙的原因\",{\"1\":{\"1788\":1}}],[\"虚拟机启动时\",{\"1\":{\"743\":1}}],[\"虚拟机栈中引用的对象\",{\"1\":{\"762\":1}}],[\"虚拟机栈溢出\",{\"1\":{\"710\":1}}],[\"虚拟机栈局部变量示例\",{\"1\":{\"693\":1}}],[\"虚拟机栈\",{\"1\":{\"690\":1,\"691\":1,\"706\":1,\"707\":1}}],[\"虚拟线程能显著提高吞吐量\",{\"1\":{\"533\":1}}],[\"虚拟线程基于jvm实现\",{\"1\":{\"533\":1}}],[\"虚拟线程和goroutine都旨在提供轻量级的并发模型\",{\"1\":{\"533\":1}}],[\"虚拟线程与go语言的goroutine有何异同\",{\"1\":{\"533\":1}}],[\"虚拟线程与平台线程的区别\",{\"0\":{\"526\":1}}],[\"虚拟线程会继承父线程的threadlocal\",{\"1\":{\"532\":1}}],[\"虚拟线程适合i\",{\"1\":{\"532\":1}}],[\"虚拟线程数量众多\",{\"1\":{\"532\":1}}],[\"虚拟线程保留了thread\",{\"1\":{\"531\":1}}],[\"虚拟线程特别适合i\",{\"1\":{\"529\":1}}],[\"虚拟线程采用m\",{\"1\":{\"528\":1}}],[\"虚拟线程的id生成策略与平台线程不同\",{\"1\":{\"532\":1}}],[\"虚拟线程的设计目标是简化高并发编程\",{\"1\":{\"531\":1}}],[\"虚拟线程的优势不明显\",{\"1\":{\"529\":1}}],[\"虚拟线程的适用场景\",{\"0\":{\"529\":1}}],[\"虚拟线程的实现原理\",{\"0\":{\"528\":1}}],[\"虚拟线程的创建方式\",{\"0\":{\"527\":1}}],[\"虚拟线程执行任务\",{\"1\":{\"527\":1}}],[\"虚拟线程依附于平台线程运行\",{\"1\":{\"526\":1}}],[\"虚拟线程是更好的选择\",{\"1\":{\"533\":1}}],[\"虚拟线程是轻量级的线程实现\",{\"1\":{\"524\":1}}],[\"虚拟线程是java\",{\"1\":{\"524\":1}}],[\"虚拟线程\",{\"0\":{\"523\":1},\"1\":{\"526\":1}}],[\"媒体服务器集群\",{\"1\":{\"3228\":1}}],[\"媒体信息类\",{\"1\":{\"3209\":1}}],[\"媒体传输由其他协议处理\",{\"1\":{\"3192\":1}}],[\"媒体流传输阶段\",{\"1\":{\"3209\":1}}],[\"媒体流停止\",{\"1\":{\"3189\":1}}],[\"媒体流冗余\",{\"1\":{\"1116\":1}}],[\"媒体数据通常通过rtp\",{\"1\":{\"3175\":1}}],[\"媒体类型\",{\"1\":{\"1384\":1}}],[\"媒体控制和业务逻辑\",{\"1\":{\"1112\":1}}],[\"水平扩展\",{\"1\":{\"1112\":1,\"1347\":1}}],[\"区分请求\",{\"1\":{\"3205\":1}}],[\"区分错误类型\",{\"1\":{\"2929\":1}}],[\"区分大小写\",{\"1\":{\"1393\":1,\"2194\":1}}],[\"区分大小写不匹配的正则\",{\"1\":{\"1392\":1}}],[\"区分大小写的正则匹配\",{\"1\":{\"1392\":1,\"1393\":1}}],[\"区分事务状态和对话状态\",{\"1\":{\"1108\":1}}],[\"区别\",{\"0\":{\"2562\":1},\"1\":{\"651\":1,\"1122\":1,\"1155\":1}}],[\"防御性编程\",{\"1\":{\"2358\":1}}],[\"防御性拷贝\",{\"1\":{\"2299\":1,\"2779\":1}}],[\"防御式编程\",{\"1\":{\"1252\":1,\"2788\":1,\"2958\":1}}],[\"防火墙命令\",{\"0\":{\"3319\":1}}],[\"防火墙其他常用命令\",{\"0\":{\"1933\":1}}],[\"防火墙规则查询\",{\"0\":{\"1929\":1}}],[\"防火墙规则配置\",{\"0\":{\"1924\":1}}],[\"防火墙常用命令\",{\"0\":{\"1921\":1}}],[\"防火墙开启\",{\"1\":{\"1876\":1}}],[\"防火墙可能阻止sip信令\",{\"1\":{\"1105\":1}}],[\"防火墙限制\",{\"0\":{\"1105\":1}}],[\"防止未授权访问\",{\"1\":{\"3238\":1}}],[\"防止窃听和篡改\",{\"1\":{\"3214\":1,\"3237\":1}}],[\"防止数据错乱\",{\"1\":{\"3090\":1}}],[\"防止系统过载\",{\"1\":{\"3087\":1}}],[\"防止发送方发送速度过快导致接收方缓冲区溢出\",{\"1\":{\"3076\":1}}],[\"防止反射被恶意利用的防御措施包括\",{\"1\":{\"3011\":1}}],[\"防止反射攻击\",{\"1\":{\"2826\":1}}],[\"防止类加载漏洞\",{\"1\":{\"3010\":1}}],[\"防止恶意输入\",{\"1\":{\"2993\":1}}],[\"防止被继承\",{\"1\":{\"2779\":1}}],[\"防止被击穿\",{\"1\":{\"191\":1}}],[\"防止意外修改等优点\",{\"1\":{\"2395\":1}}],[\"防止引用被修改\",{\"1\":{\"2395\":1}}],[\"防止外部修改内部集合\",{\"1\":{\"2358\":1,\"2395\":1}}],[\"防止实例化\",{\"1\":{\"2228\":1}}],[\"防止架构腐化\",{\"1\":{\"2013\":1}}],[\"防止文档的丢失和泄露\",{\"1\":{\"1959\":1,\"1972\":1,\"1985\":1}}],[\"防止服务器受不了\",{\"1\":{\"1394\":1}}],[\"防止\",{\"1\":{\"1311\":1}}],[\"防止已失效的连接请求报文段突然又传送到服务器\",{\"1\":{\"1311\":1}}],[\"防止主线程退出\",{\"1\":{\"1238\":1,\"3120\":1}}],[\"防止内存泄漏\",{\"1\":{\"719\":1,\"2040\":1}}],[\"防止超出但又不足一批的数量\",{\"1\":{\"288\":1}}],[\"防止中文乱码\",{\"1\":{\"286\":1}}],[\"防止currentpage越界\",{\"1\":{\"284\":1}}],[\"防止空指针异常\",{\"1\":{\"283\":1}}],[\"好的设计\",{\"1\":{\"2750\":1}}],[\"好\",{\"1\":{\"1101\":1}}],[\"弱引用\",{\"1\":{\"2676\":1,\"2698\":1}}],[\"弱引用机制\",{\"0\":{\"2676\":1}}],[\"弱一致性是并发性能和数据一致性之间的权衡\",{\"1\":{\"2543\":1}}],[\"弱一致性\",{\"1\":{\"2518\":6,\"2530\":1,\"2542\":1}}],[\"弱\",{\"1\":{\"1101\":1}}],[\"省略digest算法实现\",{\"1\":{\"3238\":1}}],[\"省略其他实现方法\",{\"1\":{\"3232\":1}}],[\"省略其他方法\",{\"1\":{\"1948\":1,\"1949\":1,\"1962\":1,\"1974\":1,\"1975\":1,\"1987\":1,\"1988\":1,\"3235\":1}}],[\"省略实现\",{\"1\":{\"3190\":1}}],[\"省略模拟实现\",{\"1\":{\"3000\":1}}],[\"省略构造函数和getter\",{\"1\":{\"2999\":1,\"3000\":1}}],[\"省略构造方法和getter\",{\"1\":{\"2612\":1,\"2668\":1,\"2669\":1}}],[\"省略age的getter和setter\",{\"1\":{\"2733\":1}}],[\"省略\",{\"1\":{\"1094\":1}}],[\"省略getter和setter\",{\"1\":{\"501\":2,\"578\":1,\"1069\":1,\"2525\":1,\"3141\":1,\"3165\":1}}],[\"省略getter和setter方法\",{\"1\":{\"407\":1,\"428\":1,\"429\":1,\"440\":1,\"2100\":1,\"2759\":1,\"2965\":1,\"2968\":1,\"2980\":1,\"3020\":1,\"3205\":2,\"3206\":1,\"3209\":2,\"3214\":1}}],[\"固定速率\",{\"1\":{\"3104\":1}}],[\"固定长度\",{\"1\":{\"3090\":1,\"3126\":1}}],[\"固定长度消息\",{\"1\":{\"1325\":1,\"3069\":1}}],[\"固定容量并发场景\",{\"1\":{\"2461\":1}}],[\"固定不变的字符串\",{\"1\":{\"2253\":1}}],[\"固定在节点上\",{\"1\":{\"1660\":1}}],[\"固定大小的线程池\",{\"1\":{\"1135\":1}}],[\"固定配置\",{\"1\":{\"1086\":1}}],[\"固定核心线程数的线程池\",{\"1\":{\"623\":1}}],[\"技术选型\",{\"1\":{\"3111\":1}}],[\"技术分享会中的规范实践案例\",{\"1\":{\"2029\":1}}],[\"技术提高媒体传输可靠性\",{\"1\":{\"1116\":1}}],[\"技术减少网络往返次数\",{\"1\":{\"212\":1}}],[\"技巧3\",{\"0\":{\"1083\":1}}],[\"技巧2\",{\"0\":{\"1082\":1}}],[\"技巧1\",{\"0\":{\"1081\":1}}],[\"误用linkedlist作为栈或队列\",{\"0\":{\"2506\":1}}],[\"误解\",{\"0\":{\"1078\":1}}],[\"误区4\",{\"1\":{\"1052\":1}}],[\"误区3\",{\"1\":{\"1052\":1}}],[\"误区2\",{\"1\":{\"1052\":1}}],[\"误区1\",{\"1\":{\"1052\":1}}],[\"需从协议处理\",{\"1\":{\"3239\":1}}],[\"需从传输加密\",{\"1\":{\"3236\":1}}],[\"需使用容器注解包装\",{\"1\":{\"3153\":1}}],[\"需注意同步\",{\"1\":{\"3090\":1}}],[\"需设置超时时间或升级jdk\",{\"1\":{\"3090\":1}}],[\"需进行充分测试\",{\"1\":{\"3010\":1}}],[\"需测试验证\",{\"1\":{\"2993\":1}}],[\"需遍历整个数组\",{\"1\":{\"2708\":1}}],[\"需先转成数组排序或不断调用poll\",{\"1\":{\"2585\":1}}],[\"需额外同步或使用copyonwritearraylist\",{\"1\":{\"2511\":1}}],[\"需配置redis端口6379在linux防火墙中开放\",{\"1\":{\"1788\":1}}],[\"需手动创建缓冲区\",{\"1\":{\"1221\":1}}],[\"需手动处理异常和锁释放\",{\"1\":{\"1197\":1}}],[\"需考虑以下因素\",{\"1\":{\"1187\":1}}],[\"需重写person类的equals和hashcode方法\",{\"1\":{\"1182\":1}}],[\"需引入第三方依赖\",{\"1\":{\"1178\":1}}],[\"需求文档\",{\"1\":{\"1961\":1}}],[\"需求就来了\",{\"1\":{\"1501\":1}}],[\"需求\",{\"1\":{\"1068\":1,\"1069\":1,\"1504\":1}}],[\"需用\",{\"1\":{\"1066\":1}}],[\"需要修改deployment\",{\"1\":{\"3276\":1}}],[\"需要修改class\",{\"1\":{\"3276\":1}}],[\"需要发送ack\",{\"1\":{\"3208\":1}}],[\"需要安全性保障的场景\",{\"1\":{\"3206\":1}}],[\"需要安装插件master\",{\"1\":{\"1677\":1}}],[\"需要运行时解析的注解必须使用retentionpolicy\",{\"1\":{\"3153\":1}}],[\"需要运行时解析却使用class保留策略\",{\"1\":{\"1077\":1}}],[\"需要全面的异常处理机制\",{\"1\":{\"3069\":1}}],[\"需要添加t类型对象\",{\"1\":{\"3040\":1}}],[\"需要获取t类型对象\",{\"1\":{\"3039\":1}}],[\"需要类有无参构造\",{\"1\":{\"2969\":1}}],[\"需要处理线程同步\",{\"1\":{\"2897\":1}}],[\"需要控制编码时\",{\"1\":{\"2885\":1}}],[\"需要适当处理\",{\"1\":{\"2872\":1}}],[\"需要适应新的api风格\",{\"1\":{\"494\":1}}],[\"需要显式关闭\",{\"1\":{\"2861\":2}}],[\"需要显式处理ioexception\",{\"1\":{\"2861\":1}}],[\"需要显式声明模块依赖\",{\"1\":{\"490\":1}}],[\"需要遍历整个数组\",{\"1\":{\"2588\":1}}],[\"需要遍历找到元素后删除并调整堆\",{\"1\":{\"2588\":1}}],[\"需要遍历找到目标节点\",{\"1\":{\"2511\":1}}],[\"需要遍历找到位置\",{\"1\":{\"2354\":2}}],[\"需要向下调整堆\",{\"1\":{\"2588\":1}}],[\"需要向上调整堆\",{\"1\":{\"2588\":1}}],[\"需要精确计数时使用\",{\"1\":{\"2533\":1}}],[\"需要精细化控制扩容策略\",{\"1\":{\"2454\":1}}],[\"需要细粒度控制\",{\"1\":{\"2513\":1}}],[\"需要复制整个数组\",{\"1\":{\"2513\":1}}],[\"需要删除尾部元素并添加新元素\",{\"1\":{\"2512\":1}}],[\"需要频繁在头部或尾部进行插入删除操作\",{\"1\":{\"2511\":1}}],[\"需要频繁随机访问元素\",{\"1\":{\"2511\":1}}],[\"需要从头或尾遍历节点\",{\"1\":{\"2511\":1}}],[\"需要从数据处理单位\",{\"1\":{\"1221\":1}}],[\"需要扩容\",{\"1\":{\"2503\":1}}],[\"需要扩容时\",{\"1\":{\"2354\":1}}],[\"需要确保所有访问路径都经过同步\",{\"1\":{\"2456\":1}}],[\"需要确保这些系统能够正确处理\",{\"1\":{\"518\":1}}],[\"需要同时重写元素类的hashcode\",{\"1\":{\"2393\":1}}],[\"需要移动元素\",{\"1\":{\"2354\":2,\"2511\":1}}],[\"需要随机访问时使用arraylist\",{\"1\":{\"2348\":1}}],[\"需要动态修改的字符串\",{\"1\":{\"2253\":1}}],[\"需要动态修改的配置\",{\"1\":{\"1086\":1}}],[\"需要高度自定义格式\",{\"1\":{\"2227\":1}}],[\"需要高级功能用reentrantlock\",{\"1\":{\"651\":1}}],[\"需要直接操作硬件\",{\"1\":{\"2119\":1}}],[\"需要立即处理\",{\"1\":{\"2070\":1}}],[\"需要配置\",{\"1\":{\"1907\":1}}],[\"需要调整\",{\"1\":{\"1887\":1}}],[\"需要调用setaccessible\",{\"1\":{\"1263\":1}}],[\"需要调用者显式处理的情况\",{\"1\":{\"1244\":1}}],[\"需要消耗的时间\",{\"1\":{\"1884\":1}}],[\"需要这样输入\",{\"1\":{\"1868\":1}}],[\"需要切换到该目录下才能启动\",{\"1\":{\"1786\":1}}],[\"需要先安装docker\",{\"1\":{\"1714\":1,\"3248\":1}}],[\"需要先初始化mysql才可以启动服务mysqld\",{\"1\":{\"121\":1}}],[\"需要开启devops流水线\",{\"1\":{\"1677\":1}}],[\"需要自己创建仓库\",{\"1\":{\"1654\":1,\"1704\":1}}],[\"需要再次推送｜镜像版本找不到看推送的是哪一版的config\",{\"1\":{\"1637\":1}}],[\"需要再次推送\",{\"1\":{\"1637\":1}}],[\"需要把optional\",{\"1\":{\"1559\":1}}],[\"需要访问服务接口后\",{\"1\":{\"1547\":1}}],[\"需要是root账户\",{\"1\":{\"1513\":1}}],[\"需要给同一个对象绑定多个事件\",{\"1\":{\"1452\":1}}],[\"需要进行手工删除\",{\"1\":{\"1778\":1}}],[\"需要进行对象的转换\",{\"1\":{\"1449\":1}}],[\"需要进入mysql修改mysql访问权限\",{\"1\":{\"227\":1}}],[\"需要对server限制访问也可加在server模块\",{\"1\":{\"1423\":1,\"1427\":1}}],[\"需要让用户输入用户名密码才能访问\",{\"1\":{\"1418\":1}}],[\"需要建立\",{\"1\":{\"1389\":1}}],[\"需要在maven中配置processor\",{\"1\":{\"3147\":1}}],[\"需要在对象回收前执行清理操作\",{\"1\":{\"2698\":1}}],[\"需要在防火墙开通相应端口\",{\"1\":{\"1576\":1}}],[\"需要在应用层进行拆包处理\",{\"1\":{\"1325\":1}}],[\"需要在模块声明中添加\",{\"1\":{\"1281\":1}}],[\"需要操作系统支持\",{\"1\":{\"1321\":1}}],[\"需要理解每个阶段的状态变化和设计原因\",{\"1\":{\"1311\":1}}],[\"需要考虑哪些泛型相关的设计要点\",{\"1\":{\"1304\":1}}],[\"需要考虑哪些io相关的优化策略\",{\"1\":{\"1238\":1}}],[\"需要使用method类的setaccessible\",{\"1\":{\"1270\":1}}],[\"需要使用field类的setaccessible\",{\"1\":{\"1269\":1}}],[\"需要使用分片\",{\"1\":{\"74\":1}}],[\"需要根据具体场景和性能测试结果综合考虑\",{\"1\":{\"1238\":1}}],[\"需要主动轮询selector获取就绪事件\",{\"1\":{\"1238\":1}}],[\"需要掌握其内部实现机制\",{\"1\":{\"1224\":1}}],[\"需要检查是否还有列\",{\"1\":{\"1162\":1}}],[\"需要检查是否还有行\",{\"1\":{\"1162\":1}}],[\"需要额外的同步措施\",{\"1\":{\"1131\":1}}],[\"需要指定javadoc路径\",{\"1\":{\"1005\":1}}],[\"需要特别注意以下问题\",{\"1\":{\"3010\":1}}],[\"需要特别注意\",{\"1\":{\"999\":1}}],[\"需要多个应用共享内存\",{\"1\":{\"818\":1,\"852\":1,\"886\":1,\"920\":1}}],[\"需要加载应用程序提供的驱动类\",{\"1\":{\"756\":1}}],[\"需要引入jol\",{\"1\":{\"711\":1}}],[\"需要灵活功能\",{\"1\":{\"649\":1}}],[\"需要通过get\",{\"1\":{\"632\":1}}],[\"需要notify\",{\"1\":{\"618\":1}}],[\"需要手动管理锁的获取和释放\",{\"1\":{\"2513\":1}}],[\"需要手动同步\",{\"1\":{\"2513\":1}}],[\"需要手动切换\",{\"1\":{\"1763\":1}}],[\"需要手动指定是es6还是7\",{\"1\":{\"1555\":1}}],[\"需要手动释放\",{\"1\":{\"668\":1}}],[\"需要手动释放锁\",{\"1\":{\"651\":1}}],[\"需要手动定义所有构建步骤\",{\"1\":{\"583\":1}}],[\"需要手动下载并运行脚本\",{\"1\":{\"264\":1}}],[\"需要解析基本数据类型或使用自定义分隔符时\",{\"1\":{\"2861\":1}}],[\"需要解锁才能使用\",{\"1\":{\"492\":1}}],[\"需要解决的问题\",{\"1\":{\"161\":1}}],[\"需要导入redis依赖才将user对象注入bean中\",{\"1\":{\"459\":1}}],[\"需要包含的标准内容和\",{\"1\":{\"303\":1}}],[\"需要下载压塑包文件不存在\",{\"1\":{\"286\":1}}],[\"需要下载文件的路径\",{\"1\":{\"286\":1}}],[\"需要压缩的文件列表\",{\"1\":{\"286\":1}}],[\"需要等好一会\",{\"1\":{\"248\":1}}],[\"需要注意正确处理\",{\"1\":{\"607\":1}}],[\"需要注意在使用完threadlocal后调用remove\",{\"1\":{\"601\":1}}],[\"需要注意在这个过程中有可能会存在失败的现象\",{\"1\":{\"182\":1}}],[\"需要注意以下常见陷阱\",{\"1\":{\"565\":1}}],[\"需要注意的是\",{\"1\":{\"54\":1,\"303\":1,\"1263\":1,\"1507\":1}}],[\"需要的存储结构\",{\"1\":{\"133\":1,\"134\":1,\"135\":1}}],[\"需要super权限才能创建具有\",{\"1\":{\"125\":1}}],[\"需要用到的容器\",{\"1\":{\"1682\":1}}],[\"需要用多台服务器集群可以使用nginx做反向代理\",{\"1\":{\"1383\":1}}],[\"需要用\",{\"1\":{\"125\":1}}],[\"需要\",{\"1\":{\"125\":2,\"1494\":1,\"1793\":1,\"2947\":1}}],[\"需要重新设置密码\",{\"1\":{\"121\":1}}],[\"需要快速迭代的业务需求和大规模的数据存储\",{\"1\":{\"43\":1}}],[\"源sip\",{\"1\":{\"3190\":1}}],[\"源代码路径\",{\"1\":{\"1987\":1}}],[\"源代码兼容性\",{\"1\":{\"562\":1}}],[\"源文档格式\",{\"1\":{\"1974\":1}}],[\"源文档路径\",{\"1\":{\"1974\":1}}],[\"源文件和目标文件路径\",{\"1\":{\"2843\":1}}],[\"源文件路径\",{\"1\":{\"1503\":2}}],[\"源文件夹\",{\"1\":{\"1501\":1,\"1502\":1,\"1865\":1}}],[\"源服务器ip\",{\"1\":{\"1503\":1}}],[\"源服务器和目标服务器了\",{\"1\":{\"1501\":1}}],[\"源路径\",{\"1\":{\"1501\":1}}],[\"源都是最新版本\",{\"1\":{\"1480\":1}}],[\"源码注解处理器\",{\"0\":{\"3147\":1}}],[\"源码注解处理器和字节码修改\",{\"1\":{\"3146\":1}}],[\"源码核心区别在于deeptostring\",{\"1\":{\"2234\":1}}],[\"源码编译agent\",{\"1\":{\"1536\":1}}],[\"源码安装\",{\"0\":{\"1485\":1}}],[\"源码分析题\",{\"1\":{\"1175\":1}}],[\"源码\",{\"0\":{\"2565\":1,\"2589\":1,\"2617\":1},\"1\":{\"1064\":1,\"3135\":1}}],[\"元编程\",{\"1\":{\"3168\":1}}],[\"元数据解析\",{\"1\":{\"2977\":1}}],[\"元数据驱动设计\",{\"1\":{\"2992\":1}}],[\"元数据驱动\",{\"1\":{\"2973\":1}}],[\"元数据驱动开发\",{\"0\":{\"1071\":1},\"1\":{\"3009\":1,\"3152\":1}}],[\"元\",{\"1\":{\"2746\":3}}],[\"元素的迭代顺序与插入顺序一致\",{\"1\":{\"2635\":1}}],[\"元素的名称\",{\"1\":{\"1455\":1,\"1460\":1}}],[\"元素必须实现comparable接口\",{\"1\":{\"2582\":1}}],[\"元素必须实现delayed接口\",{\"1\":{\"2486\":1}}],[\"元素4的索引\",{\"1\":{\"3047\":2}}],[\"元素4\",{\"1\":{\"2523\":1}}],[\"元素3\",{\"1\":{\"2523\":1}}],[\"元素2\",{\"1\":{\"2523\":1}}],[\"元素1\",{\"1\":{\"2523\":1}}],[\"元素被清空\",{\"1\":{\"2451\":1}}],[\"元素索引\",{\"1\":{\"2439\":1}}],[\"元素数据访问\",{\"1\":{\"2439\":1}}],[\"元素数量不确定\",{\"1\":{\"2511\":1}}],[\"元素数量相对稳定\",{\"1\":{\"2511\":1}}],[\"元素数量减1\",{\"1\":{\"2496\":1,\"2497\":2}}],[\"元素数量加1\",{\"1\":{\"2437\":1,\"2494\":2,\"2497\":1}}],[\"元素数量\",{\"1\":{\"1181\":1,\"2318\":1}}],[\"元素分散存储\",{\"1\":{\"2335\":1}}],[\"元素5的索引\",{\"1\":{\"2326\":1}}],[\"元素按插入顺序排列\",{\"1\":{\"2314\":1}}],[\"元素访问\",{\"0\":{\"2169\":1}}],[\"元素选择器\",{\"1\":{\"1455\":2}}],[\"元素\",{\"1\":{\"1452\":3,\"1457\":2,\"1462\":1,\"1465\":1,\"2537\":1}}],[\"元注解是用于修饰注解的注解\",{\"1\":{\"3135\":1}}],[\"元注解详解\",{\"0\":{\"1064\":1}}],[\"元注解\",{\"0\":{\"3135\":1},\"1\":{\"1063\":1,\"1064\":1,\"3135\":1}}],[\"元空间大小未限制\",{\"1\":{\"814\":1,\"848\":1,\"882\":1,\"916\":1}}],[\"元空间溢出\",{\"0\":{\"814\":1,\"848\":1,\"882\":1,\"916\":1}}],[\"元空间最大大小\",{\"1\":{\"792\":1,\"826\":1,\"860\":1,\"894\":1}}],[\"元空间初始大小\",{\"1\":{\"792\":1,\"826\":1,\"860\":1,\"894\":1}}],[\"元空间优化\",{\"0\":{\"719\":1}}],[\"元空间替代永久代的设计考量\",{\"0\":{\"715\":1}}],[\"元空间\",{\"1\":{\"710\":1,\"767\":1}}],[\"元空间使用本地内存\",{\"1\":{\"707\":1,\"715\":1}}],[\"浮点数\",{\"1\":{\"2902\":1}}],[\"浮点数相加\",{\"1\":{\"2786\":1}}],[\"浮点数等\",{\"1\":{\"725\":1}}],[\"浮点类型\",{\"1\":{\"2099\":1,\"2766\":1}}],[\"浮点精度丢失\",{\"1\":{\"1055\":1}}],[\"陷阱4\",{\"1\":{\"1053\":1}}],[\"陷阱3\",{\"1\":{\"1053\":1}}],[\"陷阱2\",{\"1\":{\"1053\":1}}],[\"陷阱1\",{\"1\":{\"1053\":1}}],[\"强大的网络数据包捕获工具\",{\"1\":{\"3099\":1}}],[\"强引用\",{\"1\":{\"2676\":1,\"2680\":1}}],[\"强一致性\",{\"1\":{\"2542\":1}}],[\"强制离开集群\",{\"1\":{\"3250\":1}}],[\"强制删除容器\",{\"1\":{\"3246\":1}}],[\"强制处理可预见错误\",{\"1\":{\"2931\":1}}],[\"强制程序员处理这些情况\",{\"1\":{\"2931\":1}}],[\"强制程序员处理可预见的错误\",{\"1\":{\"1254\":1}}],[\"强制刷新到磁盘\",{\"1\":{\"2917\":1}}],[\"强制使用常量池\",{\"1\":{\"2303\":1}}],[\"强制类型转换时注意范围和精度问题\",{\"1\":{\"2104\":1}}],[\"强制类型转换可能会导致精度丢失\",{\"1\":{\"2101\":1}}],[\"强制类型转换\",{\"1\":{\"2101\":1,\"3017\":1}}],[\"强制代码风格规范\",{\"1\":{\"2017\":1}}],[\"强制活动用户退出\",{\"0\":{\"1845\":1},\"1\":{\"1835\":1}}],[\"强制安装\",{\"1\":{\"1769\":1}}],[\"强制关闭进程名包含xxx的所有进程\",{\"0\":{\"1856\":1},\"1\":{\"1835\":1}}],[\"强制关闭redis快照导致不能持久化\",{\"1\":{\"1788\":1}}],[\"强制关闭master写功能\",{\"1\":{\"169\":1}}],[\"强制关闭线程\",{\"1\":{\"125\":1}}],[\"强\",{\"1\":{\"1101\":1}}],[\"强类型检查可以避免很多类型错误\",{\"1\":{\"2103\":1}}],[\"强类型检查\",{\"1\":{\"1046\":1}}],[\"释放资源\",{\"1\":{\"2959\":1}}],[\"释放资源或记录日志等收尾工作\",{\"1\":{\"1044\":1}}],[\"释放多余容量\",{\"1\":{\"2451\":1}}],[\"释放多余空间\",{\"1\":{\"2445\":1}}],[\"释放slave\",{\"1\":{\"172\":1}}],[\"订单dao接口\",{\"1\":{\"3049\":1}}],[\"订单类\",{\"1\":{\"3002\":1}}],[\"订单id\",{\"1\":{\"2938\":1}}],[\"订单id必须为正数\",{\"1\":{\"1044\":1}}],[\"订单状态等\",{\"1\":{\"2824\":1}}],[\"订单服务\",{\"1\":{\"2770\":1}}],[\"订单超时处理\",{\"1\":{\"2486\":1}}],[\"订单\",{\"1\":{\"2071\":1}}],[\"订单为空\",{\"1\":{\"2061\":1}}],[\"订单无效\",{\"1\":{\"2061\":2}}],[\"订单对象为空\",{\"1\":{\"2061\":1}}],[\"订单对象不能为空\",{\"1\":{\"2054\":1}}],[\"订单处理结束\",{\"1\":{\"1044\":1}}],[\"订单数据为空\",{\"1\":{\"1044\":1}}],[\"普通print\",{\"1\":{\"2908\":1}}],[\"普通类\",{\"1\":{\"2761\":1}}],[\"普通添加操作\",{\"1\":{\"2704\":1}}],[\"普通用户\",{\"1\":{\"1687\":1}}],[\"普通应用开发中应避免过度使用\",{\"1\":{\"1271\":1}}],[\"普通for循环可以获取索引\",{\"1\":{\"1160\":1}}],[\"普通for循环遍历\",{\"1\":{\"1160\":1}}],[\"普通for循环\",{\"1\":{\"1160\":1,\"2147\":1,\"2325\":2}}],[\"普通for循环耗时\",{\"1\":{\"1043\":1}}],[\"普通容器不是线程安全的\",{\"1\":{\"1131\":1}}],[\"普通拼接耗时\",{\"1\":{\"1041\":1}}],[\"普通写\",{\"1\":{\"658\":1}}],[\"★★★★☆\",{\"1\":{\"1034\":1}}],[\"★★★★★\",{\"1\":{\"1034\":3}}],[\"★★★☆☆\",{\"1\":{\"1034\":1}}],[\"拆包是网络编程中的常见问题\",{\"1\":{\"3126\":1}}],[\"拆包解决方案\",{\"0\":{\"3126\":1}}],[\"拆包\",{\"1\":{\"3090\":1,\"3129\":1}}],[\"拆箱带来的性能问题或npe\",{\"1\":{\"2776\":1}}],[\"拆箱可能带来的性能问题\",{\"1\":{\"2104\":1}}],[\"拆箱是java\",{\"1\":{\"1049\":1}}],[\"拆箱和缓存机制\",{\"1\":{\"1040\":1}}],[\"拆箱\",{\"1\":{\"1034\":1,\"2104\":1}}],[\"拆分大类\",{\"1\":{\"736\":1}}],[\"拆分后分别处理或按io密集型配置\",{\"1\":{\"629\":1}}],[\"面积\",{\"1\":{\"2742\":1}}],[\"面的情况下\",{\"1\":{\"1430\":1}}],[\"面试中的复杂度陷阱\",{\"0\":{\"2722\":1}}],[\"面试中常被问及的异常处理陷阱\",{\"1\":{\"1253\":1}}],[\"面试高频考点\",{\"1\":{\"1246\":1}}],[\"面试高频考点分类\",{\"0\":{\"1175\":1}}],[\"面试常考为何选择受检或非受检异常\",{\"1\":{\"1244\":1}}],[\"面试题2\",{\"0\":{\"1069\":1}}],[\"面试题1\",{\"0\":{\"1068\":1}}],[\"面试专题\",{\"0\":{\"1031\":1,\"1060\":1,\"1088\":1,\"1118\":1,\"1140\":1,\"1156\":1,\"1171\":1,\"1199\":1,\"1217\":1,\"1239\":1,\"1255\":1,\"1282\":1,\"1307\":1,\"3302\":1}}],[\"面向连接\",{\"1\":{\"3206\":1}}],[\"面向连接与无连接并存\",{\"1\":{\"3068\":1}}],[\"面向缓冲区\",{\"1\":{\"1227\":1,\"2913\":1,\"2919\":1,\"3117\":1}}],[\"面向流\",{\"1\":{\"1227\":1,\"2913\":1}}],[\"面向对象编程的代码更加接近自然语言\",{\"1\":{\"1216\":1}}],[\"面向对象编程的核心设计思想是将现实世界中的事物抽象成对象\",{\"1\":{\"1214\":1}}],[\"面向对象编程是一种编程范式\",{\"1\":{\"1216\":1}}],[\"面向对象编程\",{\"1\":{\"1200\":1,\"2730\":1}}],[\"面向对象\",{\"0\":{\"1199\":1,\"3327\":1},\"1\":{\"1034\":1,\"1046\":2}}],[\"面向对象语法和高级特性三个层次\",{\"1\":{\"1033\":1}}],[\"面向服务端应用\",{\"1\":{\"770\":1}}],[\"面向切面编程\",{\"1\":{\"311\":1,\"333\":1,\"3009\":1}}],[\"照着问题修复即可\",{\"1\":{\"1004\":1}}],[\"登入mysql后\",{\"1\":{\"1775\":1}}],[\"登上jira账号之后就能看到我们刚刚发布的内容\",{\"1\":{\"1004\":1}}],[\"登陆nexus\",{\"1\":{\"1004\":1}}],[\"登录远程仓库\",{\"1\":{\"3246\":1}}],[\"登录成功\",{\"1\":{\"2071\":1}}],[\"登录mysql\",{\"0\":{\"1773\":1}}],[\"登录mysql用户\",{\"1\":{\"101\":1,\"109\":1}}],[\"登录nacos添加项目配置文件\",{\"1\":{\"1696\":1}}],[\"登录查看你的maven项目\",{\"1\":{\"1000\":1}}],[\"登录用户名\",{\"1\":{\"992\":1}}],[\"登录失败\",{\"1\":{\"456\":1,\"2071\":1}}],[\"登录控制器\",{\"1\":{\"456\":1}}],[\"登录控制台\",{\"0\":{\"236\":1}}],[\"登录时\",{\"1\":{\"306\":1}}],[\"把空闲的物理内存的一部分拿来做文件和目录的缓存\",{\"1\":{\"1887\":1}}],[\"把某一次请求的内容存储到received\",{\"1\":{\"1877\":1}}],[\"把它删除掉\",{\"1\":{\"1873\":1}}],[\"把前面的\",{\"1\":{\"1787\":1}}],[\"把压缩包拷贝到\",{\"0\":{\"1729\":1}}],[\"把jdk上传至centos中\",{\"0\":{\"1727\":1}}],[\"把值改成自己通用的maven\",{\"1\":{\"1712\":1}}],[\"把跨域的接口写成调本域的接口\",{\"1\":{\"1387\":1}}],[\"把snapshot后缀去掉\",{\"1\":{\"1003\":1}}],[\"把客户端打回登录界面\",{\"1\":{\"306\":1}}],[\"稳定排序\",{\"1\":{\"2357\":2}}],[\"稳定的依赖\",{\"1\":{\"1026\":1,\"1030\":1}}],[\"稳定版本\",{\"0\":{\"1001\":1}}],[\"稳定性更高\",{\"1\":{\"3130\":1}}],[\"稳定性高\",{\"1\":{\"1377\":1}}],[\"稳定性差\",{\"1\":{\"790\":1,\"824\":1,\"858\":1,\"892\":1}}],[\"稳定性\",{\"1\":{\"373\":1,\"2357\":1}}],[\"成熟度\",{\"1\":{\"3130\":1}}],[\"成绩=\",{\"1\":{\"2902\":1}}],[\"成员查找\",{\"1\":{\"2977\":1}}],[\"成员方法可以使用类型参数\",{\"1\":{\"3019\":1}}],[\"成员方法\",{\"1\":{\"2759\":1}}],[\"成员函数\",{\"1\":{\"2758\":1}}],[\"成员变量可以使用类型参数\",{\"1\":{\"3019\":1}}],[\"成员变量私有化\",{\"1\":{\"2771\":1}}],[\"成员变量\",{\"1\":{\"2758\":1,\"2759\":1}}],[\"成员变量应使用final修饰\",{\"1\":{\"1087\":1}}],[\"成功响应\",{\"1\":{\"3179\":1}}],[\"成功率\",{\"1\":{\"2905\":1}}],[\"成功插入\",{\"1\":{\"2485\":1}}],[\"成功登录系统\",{\"1\":{\"2071\":1}}],[\"成功\",{\"1\":{\"1655\":1,\"1710\":1,\"1764\":1}}],[\"成功之后\",{\"1\":{\"1416\":1}}],[\"成功的话会有如下结果\",{\"1\":{\"997\":1}}],[\"成为理想的数据交换语言\",{\"1\":{\"1437\":1}}],[\"成为jpa参考实现\",{\"1\":{\"581\":1}}],[\"成为orm标准\",{\"1\":{\"578\":1}}],[\"邮箱\",{\"1\":{\"997\":1}}],[\"邮件回复内容一般为\",{\"1\":{\"993\":1}}],[\"英文\",{\"1\":{\"997\":1,\"1940\":1}}],[\"初次访问时\",{\"1\":{\"1547\":1}}],[\"初次创建填\",{\"1\":{\"992\":1}}],[\"初始为0\",{\"1\":{\"3116\":1}}],[\"初始拥塞窗口较小\",{\"1\":{\"3075\":1}}],[\"初始调用使用\",{\"1\":{\"2987\":1}}],[\"初始状态\",{\"1\":{\"2980\":3}}],[\"初始长度\",{\"1\":{\"2271\":1}}],[\"初始容量在构造函数中设置\",{\"1\":{\"2601\":1}}],[\"初始容量选择\",{\"0\":{\"2587\":1,\"2614\":1},\"1\":{\"2639\":1}}],[\"初始容量过小或负载因子过高会导致频繁扩容和rehash操作\",{\"1\":{\"2386\":1}}],[\"初始容量和负载因子\",{\"0\":{\"2386\":1}}],[\"初始容量\",{\"1\":{\"2271\":1,\"2316\":1,\"2318\":1,\"2355\":1,\"2400\":1,\"2423\":1,\"2436\":1,\"2571\":1,\"2609\":1,\"2627\":1}}],[\"初始容量设置不当会导致频繁扩容\",{\"1\":{\"2614\":1}}],[\"初始容量设置不当导致频繁扩容\",{\"1\":{\"2423\":1}}],[\"初始容量设置不当\",{\"0\":{\"2278\":1}}],[\"初始容量设置为预期元素数量\",{\"1\":{\"2604\":1}}],[\"初始容量设置为\",{\"1\":{\"1193\":1}}],[\"初始容量设置为expectedsize\",{\"1\":{\"1193\":1}}],[\"初始容量设置\",{\"0\":{\"1193\":1}}],[\"初始密码查看\",{\"1\":{\"1773\":1}}],[\"初始堆大小\",{\"1\":{\"792\":1,\"826\":1,\"860\":1,\"894\":1}}],[\"初始标记\",{\"1\":{\"777\":1}}],[\"初始化集群\",{\"1\":{\"3250\":1}}],[\"初始化一个swarm集群\",{\"1\":{\"3250\":1}}],[\"初始化disruptor环形缓冲区\",{\"1\":{\"3240\":1}}],[\"初始化ssl上下文\",{\"1\":{\"3237\":1}}],[\"初始化sip和webrtc组件\",{\"1\":{\"3232\":1}}],[\"初始化sip栈\",{\"1\":{\"3206\":1,\"3232\":1}}],[\"初始化sip栈和必要的工厂类\",{\"1\":{\"3199\":1}}],[\"初始化sip工厂\",{\"1\":{\"1094\":1,\"3190\":1}}],[\"初始化tls上下文\",{\"1\":{\"3237\":1}}],[\"初始化webrtc工厂\",{\"1\":{\"3232\":1}}],[\"初始化高并发sip服务器\",{\"1\":{\"3218\":1}}],[\"初始化信任管理器\",{\"1\":{\"3214\":1}}],[\"初始化密钥管理器\",{\"1\":{\"3214\":1}}],[\"初始化状态\",{\"1\":{\"2914\":1,\"3116\":1}}],[\"初始化方法\",{\"0\":{\"2627\":1}}],[\"初始化方式\",{\"1\":{\"2369\":1}}],[\"初始化方式对比\",{\"0\":{\"2323\":1}}],[\"初始化方式包括静态初始化和动态初始化\",{\"1\":{\"2142\":1}}],[\"初始化哈希表\",{\"1\":{\"2600\":1}}],[\"初始化列表\",{\"1\":{\"2523\":1}}],[\"初始化计数器\",{\"1\":{\"2522\":1}}],[\"初始化与基本操作\",{\"0\":{\"2369\":1,\"2406\":1}}],[\"初始化时指定合适大小\",{\"1\":{\"2344\":1}}],[\"初始化时将顺序定义好\",{\"1\":{\"293\":1}}],[\"初始化时将子类实现添加到集合中\",{\"1\":{\"293\":1}}],[\"初始化数据\",{\"1\":{\"2327\":2}}],[\"初始化数组后再使用\",{\"1\":{\"2159\":1}}],[\"初始化后赋值\",{\"1\":{\"2167\":1}}],[\"初始化后不可修改\",{\"1\":{\"1038\":1}}],[\"初始化副本集\",{\"1\":{\"1764\":2}}],[\"初始化阶段a的值才被设置为1\",{\"1\":{\"756\":1}}],[\"初始化子类时\",{\"1\":{\"743\":1}}],[\"初始化\",{\"0\":{\"1584\":1},\"1\":{\"741\":1,\"1578\":1}}],[\"初始化建值对\",{\"1\":{\"283\":1}}],[\"初始化中继日志位置失败\",{\"1\":{\"125\":1}}],[\"初始账密nacos\",{\"1\":{\"236\":1}}],[\"叫它做事\",{\"1\":{\"990\":1}}],[\"去掉\",{\"1\":{\"1787\":1}}],[\"去掉了\",{\"1\":{\"1450\":1,\"1454\":1}}],[\"去解压\",{\"0\":{\"1730\":1}}],[\"去重并排序结果\",{\"1\":{\"1182\":1}}],[\"去重\",{\"1\":{\"1182\":2,\"2369\":1}}],[\"去除文件的特殊字符\",{\"1\":{\"1868\":1}}],[\"去除行号\",{\"1\":{\"1857\":1}}],[\"去除特殊字符\",{\"0\":{\"1868\":1},\"1\":{\"1835\":1,\"1868\":1}}],[\"去除首尾空格\",{\"1\":{\"1041\":1}}],[\"去除字符串首尾空白\",{\"1\":{\"472\":1}}],[\"去它平台\",{\"1\":{\"990\":1}}],[\"网卡\",{\"1\":{\"1917\":1}}],[\"网站静态化的关键点则是是动静分离\",{\"1\":{\"1401\":1}}],[\"网站优化的重要点在于静态化网站\",{\"1\":{\"1401\":1}}],[\"网易\",{\"1\":{\"1376\":1}}],[\"网易maven镜像\",{\"1\":{\"982\":1}}],[\"网关\",{\"1\":{\"1347\":1}}],[\"网络命令\",{\"0\":{\"3318\":1}}],[\"网络变化时\",{\"1\":{\"3256\":1}}],[\"网络延迟导致重传消息到达\",{\"1\":{\"3222\":1}}],[\"网络地址转换\",{\"0\":{\"3194\":1}}],[\"网络指标\",{\"1\":{\"3111\":1}}],[\"网络相关日志需包含关键上下文\",{\"1\":{\"3110\":1}}],[\"网络相关包日志级别设为debug\",{\"1\":{\"3102\":1}}],[\"网络协议分析器\",{\"1\":{\"3107\":1}}],[\"网络性能分析工具\",{\"0\":{\"3107\":1}}],[\"网络性能测试工具\",{\"0\":{\"3105\":1}}],[\"网络测试场景\",{\"1\":{\"3106\":1}}],[\"网络日志查询示例\",{\"1\":{\"3103\":1}}],[\"网络诊断命令工具\",{\"0\":{\"3098\":1}}],[\"网络监控插件\",{\"1\":{\"3096\":1}}],[\"网络监控功能\",{\"1\":{\"3096\":1}}],[\"网络监控与诊断工具的核心设计思想\",{\"1\":{\"3109\":1}}],[\"网络监控与诊断工具是定位问题\",{\"1\":{\"3093\":1}}],[\"网络监控与诊断工具\",{\"0\":{\"3092\":1}}],[\"网络通信的稳定性和性能直接影响整体系统质量\",{\"1\":{\"3093\":1}}],[\"网络通信中可能出现各种io异常\",{\"1\":{\"3069\":1}}],[\"网络并发处理模型\",{\"0\":{\"3081\":1}}],[\"网络接口层\",{\"1\":{\"3059\":1}}],[\"网络层优化\",{\"1\":{\"3228\":1}}],[\"网络层\",{\"1\":{\"3058\":1,\"3059\":1}}],[\"网络模型\",{\"0\":{\"3057\":1}}],[\"网络瓶颈\",{\"1\":{\"2728\":1}}],[\"网络传输\",{\"0\":{\"1920\":1}}],[\"网络传输优化\",{\"1\":{\"1238\":1}}],[\"网络常用命令\",{\"0\":{\"1913\":1}}],[\"网络配置\",{\"1\":{\"1560\":1}}],[\"网络参数调优\",{\"1\":{\"1347\":1}}],[\"网络io线程只处理io操作\",{\"1\":{\"1346\":1}}],[\"网络操作应设置超时时间\",{\"1\":{\"3069\":1}}],[\"网络操作失败\",{\"1\":{\"1337\":1}}],[\"网络操作\",{\"1\":{\"1337\":2}}],[\"网络编程的核心设计思想是\",{\"1\":{\"3068\":1}}],[\"网络编程是java开发中实现跨进程通信的核心技术\",{\"1\":{\"3055\":1}}],[\"网络编程是java面试中的核心考察领域\",{\"1\":{\"1308\":1}}],[\"网络编程基础概念\",{\"0\":{\"3054\":1}}],[\"网络编程中\",{\"1\":{\"2909\":1}}],[\"网络编程中的设计模式\",{\"0\":{\"1329\":1}}],[\"网络编程常见面试题\",{\"0\":{\"1323\":1}}],[\"网络编程核心概念\",{\"0\":{\"1317\":1}}],[\"网络编程\",{\"0\":{\"1307\":1,\"3332\":1},\"1\":{\"2119\":1}}],[\"网络\",{\"1\":{\"1244\":1,\"3111\":1,\"3228\":1}}],[\"网络适配\",{\"0\":{\"1117\":1}}],[\"网络环境问题\",{\"0\":{\"1103\":1}}],[\"网络环境不佳\",{\"1\":{\"171\":1}}],[\"网络信息不同步\",{\"1\":{\"173\":1}}],[\"网络闪断闪连\",{\"1\":{\"167\":1}}],[\"华为云maven镜像\",{\"1\":{\"982\":1}}],[\"私仓ip改成自己的\",{\"1\":{\"1621\":1,\"1753\":1}}],[\"私有\",{\"1\":{\"3246\":1}}],[\"私有网络中的ua无法被外部网络直接访问\",{\"1\":{\"3224\":1}}],[\"私有api可能在未来版本中移除\",{\"1\":{\"2993\":1}}],[\"私有方法\",{\"1\":{\"2970\":1}}],[\"私有方法和静态方法\",{\"1\":{\"2970\":1}}],[\"私有构造\",{\"1\":{\"2969\":1}}],[\"私有构造创建\",{\"1\":{\"2969\":1}}],[\"私有构造函数\",{\"1\":{\"2415\":1,\"2821\":1}}],[\"私有修饰符\",{\"1\":{\"2795\":1}}],[\"私有字段值\",{\"1\":{\"2989\":1}}],[\"私有字段不会被继承\",{\"1\":{\"2984\":1}}],[\"私有字段\",{\"1\":{\"2299\":1,\"2984\":1}}],[\"私有化构造方法\",{\"1\":{\"2228\":1}}],[\"私有访问级别\",{\"1\":{\"2076\":1}}],[\"私有镜像仓库\",{\"1\":{\"1714\":1}}],[\"私有仓库依赖下不下来\",{\"1\":{\"1712\":1}}],[\"私有仓库\",{\"1\":{\"1629\":1,\"1718\":1}}],[\"私有成员仍然不能被反射访问\",{\"1\":{\"1281\":1}}],[\"私有属性age值\",{\"1\":{\"2971\":1}}],[\"私有属性name值\",{\"1\":{\"2971\":1}}],[\"私有属性\",{\"1\":{\"1203\":1,\"2733\":1,\"2795\":1}}],[\"私服ip\",{\"1\":{\"1621\":1,\"1637\":4,\"1753\":1}}],[\"私服机制\",{\"1\":{\"987\":1}}],[\"私服仓库的优点\",{\"0\":{\"978\":1}}],[\"私服仓库是企业或组织内部的远程仓库\",{\"1\":{\"977\":1}}],[\"私服仓库\",{\"0\":{\"977\":1}}],[\"私钥\",{\"1\":{\"115\":2}}],[\"~a\",{\"1\":{\"2112\":1}}],[\"~\",{\"1\":{\"972\":1,\"1384\":1,\"1392\":5,\"1393\":2,\"1411\":1,\"1456\":2,\"1478\":2,\"1483\":1,\"1484\":3,\"1487\":1,\"1495\":3,\"1497\":1,\"1498\":1,\"1499\":1,\"1590\":2,\"1595\":2,\"1634\":1,\"1638\":1,\"1675\":1,\"1872\":1,\"2099\":5,\"3250\":2,\"3266\":7,\"3271\":4,\"3273\":16,\"3275\":10,\"3276\":5,\"3278\":3,\"3282\":2}}],[\"父节点是祖父节点的右孩子\",{\"1\":{\"2656\":1}}],[\"父节点为红色时需要修复\",{\"1\":{\"2656\":1}}],[\"父节点索引\",{\"1\":{\"2472\":1,\"2575\":1,\"2580\":1}}],[\"父进程id\",{\"1\":{\"1882\":1}}],[\"父pom\",{\"1\":{\"962\":1,\"963\":1}}],[\"父类私有字段\",{\"1\":{\"2984\":1}}],[\"父类引用\",{\"1\":{\"2981\":1}}],[\"父类引用指向子类对象\",{\"1\":{\"289\":1}}],[\"父类\",{\"1\":{\"1204\":1,\"2735\":1,\"2736\":1,\"2797\":1,\"2968\":2}}],[\"父类加载器无法访问子类加载器加载的类\",{\"1\":{\"754\":1,\"1155\":1}}],[\"父类未初始化则先初始化父类\",{\"1\":{\"743\":1}}],[\"父类索引和接口索引集合\",{\"1\":{\"724\":1}}],[\"父类控制行为\",{\"1\":{\"291\":1}}],[\"架构师团队\",{\"1\":{\"2035\":1}}],[\"架构安全性设计\",{\"0\":{\"2011\":1}}],[\"架构层面\",{\"1\":{\"1347\":1}}],[\"架构设计\",{\"1\":{\"3111\":1}}],[\"架构设计基本原则\",{\"0\":{\"2004\":1}}],[\"架构设计规范\",{\"0\":{\"2003\":1}}],[\"架构设计要点\",{\"0\":{\"1112\":1}}],[\"架构设计和性能优化三个维度综合考虑\",{\"1\":{\"1110\":1}}],[\"架构\",{\"0\":{\"946\":1,\"1954\":1,\"2003\":1}}],[\"仓库地址\",{\"1\":{\"1621\":1,\"1753\":1}}],[\"仓库配置是控制maven如何访问仓库的重要手段\",{\"1\":{\"983\":1}}],[\"仓库配置\",{\"0\":{\"983\":1}}],[\"仓库配置错误\",{\"1\":{\"944\":1,\"988\":1}}],[\"仓库机制\",{\"0\":{\"939\":1}}],[\"远程地址\",{\"1\":{\"3110\":1}}],[\"远程方法调用等场景\",{\"1\":{\"3004\":1}}],[\"远程复制\",{\"1\":{\"1865\":1}}],[\"远程连接问题java程序连接redis时报错\",{\"1\":{\"1788\":1}}],[\"远程拉取本机文件两种方式\",{\"1\":{\"1501\":1}}],[\"远程仓库\",{\"1\":{\"939\":1}}],[\"远程调用返回null\",{\"1\":{\"2053\":1}}],[\"远程调用\",{\"1\":{\"285\":1,\"1503\":1}}],[\"坐标系统来唯一标识一个构件\",{\"1\":{\"937\":1}}],[\"坐标系统\",{\"0\":{\"937\":1}}],[\"谨慎使用setaccessible\",{\"1\":{\"2974\":1}}],[\"谨慎使用异常链\",{\"1\":{\"2941\":1}}],[\"谨慎使用ordinal\",{\"1\":{\"2825\":1}}],[\"谨慎使用快照版本\",{\"1\":{\"931\":1,\"988\":1}}],[\"谨慎使用exclusions排除不需要的依赖\",{\"1\":{\"567\":1}}],[\"冲突分析\",{\"0\":{\"1019\":1}}],[\"冲突原因\",{\"0\":{\"1009\":1}}],[\"冲突解决\",{\"1\":{\"930\":1}}],[\"冲突声明\",{\"1\":{\"125\":1}}],[\"观察者模式\",{\"0\":{\"1330\":1}}],[\"观察影响\",{\"1\":{\"818\":1,\"852\":1,\"886\":1,\"920\":1}}],[\"观察是否有内存持续增长\",{\"1\":{\"784\":1}}],[\"桌面应用可容忍较长停顿\",{\"1\":{\"818\":1,\"852\":1,\"886\":1,\"920\":1}}],[\"遵循javabean规范\",{\"1\":{\"2759\":1}}],[\"遵循fifo\",{\"1\":{\"2459\":1}}],[\"遵循以下原则\",{\"1\":{\"2307\":1}}],[\"遵循团队的注释规范\",{\"1\":{\"2094\":1}}],[\"遵循康威定律\",{\"1\":{\"2014\":1}}],[\"遵循相关的规范和标准\",{\"1\":{\"1953\":1,\"1966\":1,\"1979\":1,\"1992\":1}}],[\"遵循pecs原则选择通配符方向\",{\"1\":{\"1302\":1}}],[\"遵循依赖倒置原则\",{\"1\":{\"1212\":1}}],[\"遵循接口隔离原则\",{\"1\":{\"1211\":1}}],[\"遵循里氏替换原则\",{\"1\":{\"1210\":1}}],[\"遵循开闭原则\",{\"1\":{\"1209\":1}}],[\"遵循单一职责原则\",{\"1\":{\"1208\":1}}],[\"遵循语义化版本规范\",{\"1\":{\"937\":1}}],[\"遵循\",{\"1\":{\"815\":1,\"849\":1,\"883\":1,\"917\":1}}],[\"遵循restful\",{\"1\":{\"432\":1}}],[\"朝生夕死\",{\"1\":{\"776\":1}}],[\"朝阳区\",{\"1\":{\"37\":1,\"47\":1,\"84\":1}}],[\"判定效率高\",{\"1\":{\"761\":1}}],[\"判断此流是否已准备好读取\",{\"1\":{\"2853\":1}}],[\"判断集合是否包含指定元素\",{\"1\":{\"2631\":1}}],[\"判断集合是否为空\",{\"1\":{\"2058\":1}}],[\"判断元素索引是否合法\",{\"1\":{\"2495\":1}}],[\"判断元素是否存在\",{\"1\":{\"2369\":1}}],[\"判断位置索引是否合法\",{\"1\":{\"2494\":1}}],[\"判断是否移除最老的元素\",{\"1\":{\"2632\":1}}],[\"判断是否还有前一个元素\",{\"1\":{\"2498\":1}}],[\"判断是否还有下一个元素\",{\"1\":{\"2441\":1,\"2498\":2}}],[\"判断是否包含元素\",{\"1\":{\"2324\":1}}],[\"判断是否有值\",{\"1\":{\"544\":1}}],[\"判断网络设备是否已经饱和\",{\"1\":{\"1886\":1}}],[\"判断请求标记是否为true\",{\"1\":{\"1443\":1}}],[\"判断请求标记是否为\",{\"1\":{\"1443\":1}}],[\"判断请求和响应是否成功\",{\"1\":{\"1431\":1}}],[\"判断用户名是否为空\",{\"1\":{\"1440\":2}}],[\"判断姓名是否已注册\",{\"1\":{\"1431\":1}}],[\"判断一个数组中是否存在重复元素\",{\"1\":{\"1170\":1}}],[\"判断一个字符串是否为回文\",{\"1\":{\"1165\":1}}],[\"判断字符串是否为回文\",{\"0\":{\"1165\":1},\"1\":{\"1165\":1}}],[\"判断字符串是否为空白\",{\"1\":{\"472\":1}}],[\"判断对象是否可达\",{\"1\":{\"1149\":1}}],[\"判断逻辑\",{\"1\":{\"292\":1}}],[\"判断\",{\"1\":{\"173\":1}}],[\"判断master是否在线\",{\"1\":{\"169\":1}}],[\"判断slave是否在线\",{\"1\":{\"169\":1}}],[\"识别异常波动\",{\"1\":{\"3111\":1}}],[\"识别关键路径和瓶颈服务\",{\"1\":{\"3111\":1}}],[\"识别限界上下文\",{\"1\":{\"2014\":1}}],[\"识别内存中不再使用的对象\",{\"1\":{\"759\":1}}],[\"识别身份\",{\"1\":{\"167\":1}}],[\"热数据内存存储\",{\"1\":{\"3111\":1}}],[\"热部署类加载器的实现原理\",{\"1\":{\"756\":1}}],[\"热点数据主从同时预热\",{\"1\":{\"189\":1}}],[\"打乱后\",{\"1\":{\"2326\":1}}],[\"打乱列表顺序\",{\"1\":{\"2326\":1}}],[\"打标签\",{\"1\":{\"1660\":1}}],[\"打包项目\",{\"1\":{\"3246\":1}}],[\"打包容器成镜像\",{\"1\":{\"3246\":1}}],[\"打包下载\",{\"0\":{\"1898\":1}}],[\"打包\",{\"1\":{\"1897\":1}}],[\"打包上传\",{\"0\":{\"1646\":1,\"1897\":1}}],[\"打包镜像文件\",{\"1\":{\"1552\":1}}],[\"打包好镜像\",{\"1\":{\"1507\":1}}],[\"打包消息\",{\"1\":{\"1325\":1}}],[\"打开一个连接\",{\"1\":{\"1881\":1}}],[\"打开只读文件\",{\"0\":{\"1858\":1},\"1\":{\"1835\":1}}],[\"打开redis\",{\"1\":{\"1787\":1}}],[\"打开链接\",{\"1\":{\"1431\":1,\"1432\":1}}],[\"打开\",{\"1\":{\"1418\":1,\"1624\":1}}],[\"打开浏览器\",{\"1\":{\"1402\":1}}],[\"打破双亲委派\",{\"1\":{\"747\":1}}],[\"打破双亲委派模型\",{\"0\":{\"747\":1}}],[\"打印绑定的公共端口\",{\"1\":{\"3246\":1}}],[\"打印语句\",{\"1\":{\"3246\":1}}],[\"打印后台运行容器日志\",{\"1\":{\"3245\":1}}],[\"打印结果\",{\"1\":{\"3007\":1}}],[\"打印结果将变为有意义的内容\",{\"1\":{\"2232\":1}}],[\"打印流不会抛出ioexception\",{\"1\":{\"2908\":1}}],[\"打印流体现了以下设计思想和模式\",{\"1\":{\"2907\":1}}],[\"打印流格式化输出示例\",{\"1\":{\"2905\":1}}],[\"打印流提供了强大的格式化输出功能\",{\"1\":{\"2905\":1}}],[\"打印流自动刷新示例\",{\"1\":{\"2904\":1}}],[\"打印流具有以下核心特点\",{\"1\":{\"2901\":1}}],[\"打印流的自动刷新功能可以通过构造方法启用\",{\"1\":{\"2904\":1}}],[\"打印流的核心特点\",{\"0\":{\"2901\":1}}],[\"打印流的特点是操作简便\",{\"1\":{\"2899\":1}}],[\"打印流\",{\"0\":{\"2898\":1},\"1\":{\"2899\":1}}],[\"打印常用字符集\",{\"1\":{\"2881\":1}}],[\"打印基本类型int数组\",{\"1\":{\"2228\":1}}],[\"打印string数组\",{\"1\":{\"2220\":1}}],[\"打印int数组\",{\"1\":{\"2220\":1}}],[\"打印\",{\"0\":{\"2220\":1}}],[\"打印多维数组无法正确显示嵌套内容\",{\"1\":{\"2231\":1}}],[\"打印多维数组\",{\"0\":{\"2217\":1},\"1\":{\"2228\":1}}],[\"打印一维数组\",{\"0\":{\"2216\":1},\"1\":{\"2228\":1}}],[\"打印二维数组\",{\"1\":{\"2170\":1}}],[\"打印数组\",{\"0\":{\"2208\":1},\"1\":{\"2147\":1}}],[\"打印jvm启动时的参数\",{\"1\":{\"798\":1,\"832\":1,\"866\":1,\"900\":1}}],[\"打印gc发生的时间戳\",{\"1\":{\"796\":1,\"830\":1,\"864\":1,\"898\":1}}],[\"打印详细gc日志\",{\"1\":{\"796\":1,\"830\":1,\"864\":1,\"898\":1}}],[\"打印简单gc日志\",{\"1\":{\"796\":1,\"830\":1,\"864\":1,\"898\":1}}],[\"打印日志信息\",{\"1\":{\"267\":1}}],[\"打印按钮\",{\"1\":{\"8\":1}}],[\"克隆\",{\"1\":{\"743\":1}}],[\"校验和\",{\"1\":{\"1312\":1}}],[\"校验失败\",{\"1\":{\"1069\":2}}],[\"校验\",{\"1\":{\"1069\":2}}],[\"校验字段\",{\"1\":{\"1069\":1}}],[\"校验对象不能为空\",{\"1\":{\"1069\":1}}],[\"校验文件的数字签名\",{\"1\":{\"738\":1}}],[\"校验token是否过期\",{\"1\":{\"307\":2}}],[\"灵感来自于他喜欢的咖啡\",{\"1\":{\"738\":1}}],[\"灵活组合\",{\"1\":{\"2337\":1}}],[\"灵活组合不同处理方式\",{\"1\":{\"1231\":1}}],[\"灵活组合各种功能\",{\"1\":{\"1222\":1}}],[\"灵活扩展\",{\"1\":{\"409\":1,\"2029\":1}}],[\"灵活性高\",{\"1\":{\"2356\":1}}],[\"灵活性原则\",{\"1\":{\"1959\":1,\"1972\":1,\"1985\":1}}],[\"灵活性不足\",{\"1\":{\"945\":1,\"1155\":1}}],[\"灵活性\",{\"1\":{\"39\":1,\"93\":1,\"95\":1,\"210\":1,\"1028\":1,\"2093\":1,\"2136\":1,\"2331\":1,\"2885\":1,\"3192\":1}}],[\"何时进行转换\",{\"1\":{\"738\":1}}],[\"符合collection接口规范\",{\"1\":{\"2437\":1,\"2494\":1}}],[\"符合面试标准的自定义异常实现\",{\"1\":{\"1249\":1}}],[\"符合开闭原则的设计\",{\"1\":{\"2746\":1}}],[\"符合开闭原则\",{\"1\":{\"292\":1}}],[\"符号引用是用一组符号描述所引用的目标\",{\"1\":{\"738\":1}}],[\"符号引用\",{\"1\":{\"725\":1}}],[\"属性注入\",{\"1\":{\"3159\":1}}],[\"属性私有化\",{\"1\":{\"2734\":1}}],[\"属性值false\",{\"1\":{\"1467\":1}}],[\"属性值true\",{\"1\":{\"1467\":1}}],[\"属性值是目前相反的状态\",{\"1\":{\"1467\":2}}],[\"属性值为\",{\"1\":{\"1467\":2}}],[\"属性值选择器\",{\"1\":{\"1457\":1}}],[\"属性\",{\"1\":{\"1467\":3,\"2732\":1,\"2759\":1}}],[\"属性名=属性值\",{\"1\":{\"1457\":1,\"1460\":1}}],[\"属性名\",{\"1\":{\"1457\":1,\"1460\":1}}],[\"属性名选择器\",{\"1\":{\"1457\":1}}],[\"属性选择器\",{\"0\":{\"1457\":1},\"1\":{\"1460\":1}}],[\"属性选择器等等\",{\"1\":{\"1455\":1}}],[\"属性表机制使得类文件格式具有良好的可扩展性\",{\"1\":{\"733\":1}}],[\"属性表的可扩展性设计\",{\"0\":{\"733\":1}}],[\"属性表集合\",{\"1\":{\"724\":1}}],[\"属于对象\",{\"1\":{\"1037\":1,\"2767\":1}}],[\"属于类而不是实例\",{\"1\":{\"2077\":1}}],[\"属于类\",{\"1\":{\"1037\":1,\"2767\":1}}],[\"属于project\",{\"1\":{\"524\":1}}],[\"描述\",{\"1\":{\"2841\":1,\"2842\":1,\"2853\":1,\"2854\":1}}],[\"描述信息\",{\"1\":{\"1794\":1}}],[\"描述信息和上下文数据\",{\"1\":{\"1249\":1}}],[\"描述类的方法信息\",{\"1\":{\"724\":1}}],[\"描述类的字段信息\",{\"1\":{\"724\":1}}],[\"描述复制缓冲区中的指令字节位置\",{\"1\":{\"167\":1}}],[\"魔数的作用是快速识别文件类型\",{\"1\":{\"738\":1}}],[\"魔数0xcafebabe是java创始人james\",{\"1\":{\"738\":1}}],[\"魔数\",{\"1\":{\"724\":1}}],[\"老的\",{\"1\":{\"1491\":1}}],[\"老年代区域大\",{\"1\":{\"776\":1}}],[\"老年代收集器\",{\"0\":{\"770\":1},\"1\":{\"772\":1}}],[\"老年代垃圾回收\",{\"1\":{\"766\":1}}],[\"老年代\",{\"1\":{\"713\":1,\"767\":2,\"792\":1,\"826\":1,\"860\":1,\"894\":1}}],[\"老token自动失效\",{\"1\":{\"306\":1}}],[\"溢出\",{\"1\":{\"710\":1,\"2118\":1}}],[\"栈的出栈操作\",{\"1\":{\"2551\":1}}],[\"栈的入栈操作\",{\"1\":{\"2551\":1}}],[\"栈大小\",{\"1\":{\"2468\":1}}],[\"栈顶元素\",{\"1\":{\"2468\":1}}],[\"栈用于存储方法执行时的局部变量\",{\"1\":{\"1145\":1}}],[\"栈用于方法执行\",{\"1\":{\"697\":1}}],[\"栈\",{\"0\":{\"1145\":1},\"1\":{\"2461\":1}}],[\"栈帧的设计实现了方法的独立执行环境和高效调用\",{\"1\":{\"714\":1}}],[\"栈帧包含\",{\"1\":{\"714\":1}}],[\"栈帧结构设计\",{\"0\":{\"714\":1}}],[\"栈帧等\",{\"1\":{\"703\":1}}],[\"栈深度\",{\"1\":{\"710\":1}}],[\"栈等数据结构\",{\"1\":{\"2354\":1}}],[\"栈等\",{\"1\":{\"703\":1}}],[\"栈溢出会抛出stackoverflowerror异常\",{\"1\":{\"1155\":1}}],[\"栈溢出通常是由于递归调用过深或方法内部创建过大的局部变量导致的\",{\"1\":{\"1155\":1}}],[\"栈溢出发生在栈中\",{\"1\":{\"1155\":1}}],[\"栈溢出是指栈空间不足\",{\"1\":{\"1155\":1}}],[\"栈溢出\",{\"0\":{\"701\":1}}],[\"栈溢出异常\",{\"1\":{\"693\":1}}],[\"栈与堆的分离设计\",{\"0\":{\"697\":1}}],[\"栈局部变量\",{\"1\":{\"693\":1}}],[\"静态泛型方法\",{\"0\":{\"3024\":1},\"1\":{\"3024\":1}}],[\"静态属性\",{\"1\":{\"2971\":1}}],[\"静态属性获取时\",{\"1\":{\"2971\":1}}],[\"静态属性值\",{\"1\":{\"2971\":1}}],[\"静态组合多个流\",{\"1\":{\"2897\":1}}],[\"静态导入\",{\"1\":{\"2768\":1}}],[\"静态常量\",{\"1\":{\"2594\":1,\"2622\":1,\"2649\":1}}],[\"静态常量不需要检查\",{\"1\":{\"1087\":1}}],[\"静态工厂方法创建不可变sortedmap\",{\"1\":{\"2651\":1}}],[\"静态工厂方法创建不可变linkedhashmap\",{\"1\":{\"2624\":1}}],[\"静态工厂方法创建不可变map\",{\"1\":{\"2596\":1}}],[\"静态工厂方法创建不可变priorityqueue\",{\"1\":{\"2569\":1}}],[\"静态工厂方法\",{\"1\":{\"2491\":1}}],[\"静态成员\",{\"1\":{\"2077\":1,\"2808\":1}}],[\"静态代码分析工具\",{\"0\":{\"2017\":1}}],[\"静态代码块执行\",{\"1\":{\"1037\":1}}],[\"静态代码块\",{\"1\":{\"1037\":1,\"2980\":1}}],[\"静态代码块和静态内部类\",{\"1\":{\"1037\":1}}],[\"静态资源处理等功能\",{\"1\":{\"2921\":1}}],[\"静态资源文件\",{\"1\":{\"1779\":1}}],[\"静态资源访问\",{\"1\":{\"1386\":1}}],[\"静态初始化\",{\"1\":{\"1160\":1,\"2144\":1,\"2167\":1}}],[\"静态内部类访问外部类实例成员\",{\"1\":{\"1052\":1}}],[\"静态内部类访问静态变量\",{\"1\":{\"1037\":1}}],[\"静态内部类使用\",{\"1\":{\"1037\":1}}],[\"静态内部类\",{\"1\":{\"1037\":1}}],[\"静态变量只用于存储不变的常量\",{\"1\":{\"2775\":1}}],[\"静态变量滥用\",{\"0\":{\"2775\":1}}],[\"静态变量属于类而非泛型实例\",{\"1\":{\"1291\":1}}],[\"静态变量共享\",{\"1\":{\"1037\":1}}],[\"静态变量值\",{\"1\":{\"1037\":2}}],[\"静态变量\",{\"1\":{\"1037\":1,\"2767\":1}}],[\"静态变量等\",{\"1\":{\"691\":1,\"707\":1}}],[\"静态集合持有对象引用\",{\"1\":{\"781\":1}}],[\"静态集合类泄漏\",{\"1\":{\"781\":1}}],[\"静态方法名\",{\"1\":{\"3024\":1}}],[\"静态方法无法访问类的类型参数\",{\"1\":{\"3024\":1}}],[\"静态方法调用时\",{\"1\":{\"2970\":1}}],[\"静态方法不能直接访问非静态成员\",{\"1\":{\"2813\":1}}],[\"静态方法访问非静态成员\",{\"1\":{\"1052\":1}}],[\"静态方法锁\",{\"1\":{\"641\":1}}],[\"静态方法\",{\"0\":{\"542\":1},\"1\":{\"542\":1,\"1037\":2,\"2970\":1}}],[\"静态方法引用\",{\"1\":{\"539\":1}}],[\"垃圾判断算法\",{\"0\":{\"1149\":1}}],[\"垃圾\",{\"1\":{\"759\":1}}],[\"垃圾回收器选择\",{\"1\":{\"1151\":1}}],[\"垃圾回收器通过可达性分析算法判断对象是否存活\",{\"1\":{\"698\":1}}],[\"垃圾回收是jvm的重要功能\",{\"1\":{\"1148\":1}}],[\"垃圾回收算法\",{\"0\":{\"763\":1,\"1150\":1}}],[\"垃圾回收的目标是实现内存自动管理\",{\"1\":{\"759\":1}}],[\"垃圾回收的主要区域\",{\"1\":{\"691\":1}}],[\"垃圾回收\",{\"0\":{\"1148\":1},\"1\":{\"759\":1,\"1141\":1}}],[\"垃圾回收基本概念\",{\"0\":{\"759\":1}}],[\"垃圾回收机制设计\",{\"0\":{\"698\":1}}],[\"垃圾收集器选择\",{\"0\":{\"795\":1,\"829\":1,\"863\":1,\"897\":1}}],[\"垃圾收集器\",{\"0\":{\"768\":1},\"1\":{\"477\":1}}],[\"堆大小\",{\"1\":{\"3091\":1}}],[\"堆栈跟踪开销\",{\"1\":{\"2941\":1}}],[\"堆栈跟踪使用示例\",{\"1\":{\"2936\":1}}],[\"堆栈跟踪记录了异常发生时的方法调用链\",{\"1\":{\"2936\":1}}],[\"堆栈跟踪\",{\"0\":{\"2936\":1}}],[\"堆排序\",{\"1\":{\"2727\":1}}],[\"堆使用数组存储\",{\"1\":{\"2580\":1}}],[\"堆中每个节点的值小于等于其子节点的值\",{\"1\":{\"2580\":1}}],[\"堆调整核心算法\",{\"0\":{\"2575\":1}}],[\"堆可以分为新生代和老年代\",{\"1\":{\"1144\":1}}],[\"堆是jvm中最大的内存区域\",{\"1\":{\"1144\":1}}],[\"堆和常量池\",{\"1\":{\"1056\":1}}],[\"堆转储文件路径\",{\"1\":{\"796\":1,\"830\":1,\"864\":1,\"898\":1}}],[\"堆总容量\",{\"1\":{\"774\":1}}],[\"堆内存\",{\"1\":{\"2246\":1,\"2253\":1}}],[\"堆内存大小\",{\"1\":{\"818\":1,\"852\":1,\"886\":1,\"920\":1}}],[\"堆内存一般不超过物理内存的70\",{\"1\":{\"813\":1,\"847\":1,\"881\":1,\"915\":1}}],[\"堆内存设置不当\",{\"0\":{\"813\":1,\"847\":1,\"881\":1,\"915\":1}}],[\"堆内存参数\",{\"0\":{\"792\":1,\"826\":1,\"860\":1,\"894\":1}}],[\"堆内存参数设置\",{\"0\":{\"717\":1}}],[\"堆内存较大\",{\"1\":{\"784\":1}}],[\"堆内存过大\",{\"1\":{\"782\":1}}],[\"堆内存过小\",{\"1\":{\"782\":1}}],[\"堆内存溢出\",{\"0\":{\"700\":1},\"1\":{\"710\":1}}],[\"堆内存使用示例\",{\"1\":{\"693\":1}}],[\"堆用于对象存储\",{\"1\":{\"697\":1}}],[\"堆对象与常量池对象\",{\"1\":{\"2245\":1}}],[\"堆对象\",{\"1\":{\"693\":1}}],[\"堆\",{\"0\":{\"1144\":1},\"1\":{\"690\":1,\"691\":1,\"703\":1,\"706\":1,\"707\":1,\"2461\":1}}],[\"累加结果\",{\"1\":{\"677\":1}}],[\"累加器原子类\",{\"1\":{\"672\":1}}],[\"程序员可能会用空catch块简单规避\",{\"1\":{\"2931\":1}}],[\"程序将数据写入缓冲区\",{\"1\":{\"2865\":1}}],[\"程序从缓冲区读取数据\",{\"1\":{\"2865\":1}}],[\"程序继续执行\",{\"1\":{\"2079\":1}}],[\"程序执行的性能\",{\"1\":{\"1887\":1}}],[\"程序执行过程中的一个点\",{\"1\":{\"335\":1}}],[\"程序通常无法恢复\",{\"1\":{\"1243\":1,\"2925\":1}}],[\"程序计数器\",{\"1\":{\"691\":1,\"703\":1,\"706\":1,\"707\":1}}],[\"程序顺序规则\",{\"1\":{\"656\":1}}],[\"按协议\",{\"1\":{\"3107\":1}}],[\"按行读取文件内容\",{\"1\":{\"2856\":1,\"2867\":1}}],[\"按功能分类讲解其用法\",{\"1\":{\"2804\":1}}],[\"按字符串长度排序\",{\"1\":{\"2660\":1}}],[\"按字典顺序比较\",{\"1\":{\"2194\":1}}],[\"按升序排列的元素迭代器\",{\"1\":{\"2658\":1}}],[\"按分数升序排序\",{\"1\":{\"2577\":1}}],[\"按值降序排序\",{\"1\":{\"2408\":1}}],[\"按值排序\",{\"1\":{\"2408\":1}}],[\"按值排序及高效查找的实现\",{\"1\":{\"2408\":1}}],[\"按键有序\",{\"1\":{\"2666\":1}}],[\"按键升序排序\",{\"1\":{\"2408\":1}}],[\"按键排序\",{\"1\":{\"2408\":1}}],[\"按城市分组\",{\"1\":{\"2329\":2}}],[\"按年龄排序\",{\"1\":{\"2329\":1}}],[\"按年龄升序\",{\"1\":{\"1182\":1,\"2329\":1}}],[\"按元素删除后\",{\"1\":{\"2324\":1}}],[\"按元素删除\",{\"1\":{\"2324\":1}}],[\"按索引删除后\",{\"1\":{\"2324\":1}}],[\"按索引删除\",{\"1\":{\"2324\":1}}],[\"按逗号分割\",{\"1\":{\"2197\":1}}],[\"按位非\",{\"1\":{\"2112\":1}}],[\"按位异或\",{\"1\":{\"2112\":1}}],[\"按位或\",{\"1\":{\"2112\":1}}],[\"按位与\",{\"1\":{\"2112\":1}}],[\"按业务领域边界拆分\",{\"1\":{\"2009\":1}}],[\"按大写的\",{\"1\":{\"1882\":1}}],[\"按n查找下一个\",{\"1\":{\"1857\":1}}],[\"按需选择\",{\"1\":{\"3068\":1}}],[\"按需定制\",{\"1\":{\"2029\":1}}],[\"按需修改\",{\"1\":{\"1675\":1}}],[\"按需构建\",{\"1\":{\"967\":1}}],[\"按时间范围查询接口\",{\"1\":{\"1563\":1}}],[\"按钮七\",{\"1\":{\"1462\":1}}],[\"按钮六\",{\"1\":{\"1462\":1}}],[\"按钮五\",{\"1\":{\"1462\":1}}],[\"按钮四\",{\"1\":{\"1462\":1,\"1464\":1}}],[\"按钮三\",{\"1\":{\"1462\":1,\"1464\":1}}],[\"按钮二\",{\"1\":{\"1462\":1,\"1464\":1}}],[\"按钮一\",{\"1\":{\"1462\":1,\"1464\":1}}],[\"按钮效果\",{\"1\":{\"1444\":1}}],[\"按访问url的hash结果来分配请求\",{\"1\":{\"1408\":1}}],[\"按照控制台提示去登录即可\",{\"1\":{\"1632\":1}}],[\"按照以下顺序安装需要的包\",{\"0\":{\"1583\":1}}],[\"按照一定的规\",{\"1\":{\"1380\":1}}],[\"按照这样的一种形式\",{\"1\":{\"182\":1}}],[\"按写入顺序读取数据\",{\"1\":{\"1222\":1}}],[\"按顺序依次分配请求到服务器\",{\"1\":{\"3086\":1}}],[\"按顺序获取锁\",{\"1\":{\"1128\":1}}],[\"按顺序排列\",{\"1\":{\"724\":1}}],[\"按固定顺序获取锁\",{\"1\":{\"648\":1}}],[\"偏向线程id等信息\",{\"1\":{\"720\":1}}],[\"偏向锁\",{\"1\":{\"645\":1,\"651\":1}}],[\"偏移量或句柄\",{\"1\":{\"738\":1}}],[\"偏移量\",{\"1\":{\"167\":1}}],[\"临界区代码\",{\"1\":{\"641\":3,\"1129\":1}}],[\"临时关闭所有\",{\"1\":{\"3270\":1}}],[\"临时响应\",{\"1\":{\"3179\":1,\"3195\":1}}],[\"临时开放访问\",{\"1\":{\"2994\":1}}],[\"临时配置可使用命令\",{\"1\":{\"1586\":1}}],[\"临时目录\",{\"1\":{\"1384\":3}}],[\"临时启动防灾业务key\",{\"1\":{\"192\":1}}],[\"临时\",{\"1\":{\"113\":1}}],[\"锁\",{\"1\":{\"2544\":1}}],[\"锁名称\",{\"1\":{\"1687\":1}}],[\"锁粒度细化到链表头节点或红黑树的根节点\",{\"1\":{\"1197\":1}}],[\"锁状态标志\",{\"1\":{\"720\":1}}],[\"锁降级是指从写锁降级为读锁\",{\"1\":{\"651\":1}}],[\"锁粗化\",{\"1\":{\"645\":1}}],[\"锁消除和锁粗化\",{\"1\":{\"651\":1}}],[\"锁消除\",{\"1\":{\"645\":1}}],[\"锁优化技术\",{\"0\":{\"645\":1}}],[\"锁的过度使用\",{\"0\":{\"650\":1}}],[\"锁的分类\",{\"0\":{\"638\":1}}],[\"锁的基本概念\",{\"0\":{\"637\":1}}],[\"锁是并发编程中用于保证线程安全的核心机制\",{\"1\":{\"637\":1}}],[\"锁机制\",{\"0\":{\"635\":1,\"1127\":1},\"1\":{\"1119\":1,\"2541\":1}}],[\"尝试获取父类私有字段\",{\"1\":{\"2984\":1}}],[\"尝试下一种编码\",{\"1\":{\"2885\":1}}],[\"尝试常用编码检测\",{\"1\":{\"2885\":1}}],[\"尝试修改会抛出异常\",{\"1\":{\"2358\":1}}],[\"尝试添加null会抛出nullpointerexception\",{\"1\":{\"2358\":1}}],[\"尝试从池中获取连接\",{\"1\":{\"1326\":1}}],[\"尝试更新头节点\",{\"1\":{\"2485\":1}}],[\"尝试更新\",{\"1\":{\"1139\":1}}],[\"尝试maven打包\",{\"1\":{\"999\":1}}],[\"尝试中断正在执行的任务\",{\"1\":{\"633\":1}}],[\"尝试使用zgc\",{\"1\":{\"495\":1}}],[\"尝试使用上面创建的用户信息进行连接\",{\"1\":{\"223\":1}}],[\"混淆最好\",{\"0\":{\"2721\":1}}],[\"混淆add和push\",{\"1\":{\"2506\":1}}],[\"混淆到页面数据id中\",{\"1\":{\"192\":1}}],[\"混合责任\",{\"1\":{\"1215\":1}}],[\"混合型任务\",{\"1\":{\"629\":1}}],[\"享元模式在常量池中的应用\",{\"0\":{\"2308\":1}}],[\"享元模式\",{\"1\":{\"628\":1}}],[\"交互默认使用的是\",{\"1\":{\"1666\":1}}],[\"交换数组中两个元素\",{\"1\":{\"2707\":1}}],[\"交换字符\",{\"1\":{\"1164\":1,\"2207\":1}}],[\"交换元素\",{\"1\":{\"1161\":1,\"2709\":1}}],[\"交替获取锁并打印数字\",{\"1\":{\"618\":1}}],[\"交集\",{\"0\":{\"281\":1},\"1\":{\"281\":2,\"2372\":1}}],[\"唤醒阻塞的select\",{\"1\":{\"2916\":1}}],[\"唤醒所有等待线程\",{\"1\":{\"660\":1}}],[\"唤醒生产者\",{\"1\":{\"642\":1}}],[\"唤醒消费者\",{\"1\":{\"642\":1}}],[\"唤醒\",{\"1\":{\"618\":1}}],[\"阻塞方法\",{\"1\":{\"3065\":1,\"3066\":1}}],[\"阻塞直到有任务到期\",{\"1\":{\"2467\":1}}],[\"阻塞特性\",{\"1\":{\"2461\":1,\"2913\":1}}],[\"阻塞处理策略\",{\"1\":{\"1687\":1}}],[\"阻塞与非阻塞\",{\"0\":{\"1318\":1}}],[\"阻塞读取客户端数据\",{\"1\":{\"1314\":1}}],[\"阻塞等待事件就绪\",{\"1\":{\"1315\":1}}],[\"阻塞等待客户端连接\",{\"1\":{\"1314\":1}}],[\"阻塞等待就绪事件\",{\"1\":{\"1228\":2,\"2916\":2}}],[\"阻塞io\",{\"0\":{\"3078\":1},\"1\":{\"1227\":1,\"2913\":1}}],[\"阻塞队列如arrayblockingqueue\",{\"1\":{\"2542\":1}}],[\"阻塞队列如何实现线程间通信\",{\"0\":{\"2483\":1}}],[\"阻塞队列使用不当\",{\"0\":{\"2538\":1}}],[\"阻塞队列通过内置锁和条件变量实现线程间通信\",{\"1\":{\"2483\":1}}],[\"阻塞队列通过reentrantlock和condition实现线程间的协调\",{\"1\":{\"2471\":1}}],[\"阻塞队列实现原理\",{\"0\":{\"2471\":1}}],[\"阻塞队列\",{\"1\":{\"1132\":1,\"2465\":1}}],[\"阻塞\",{\"1\":{\"605\":1,\"1227\":1,\"1318\":1,\"2461\":4,\"2462\":1,\"3078\":2,\"3118\":1}}],[\"悲观锁假设冲突必然发生\",{\"1\":{\"638\":1}}],[\"悲观锁\",{\"1\":{\"638\":1}}],[\"悲观锁适用于写多读少的场景\",{\"1\":{\"602\":1}}],[\"悲观锁则假设并发操作会发生冲突\",{\"1\":{\"602\":1}}],[\"乐观锁假设冲突很少发生\",{\"1\":{\"638\":1}}],[\"乐观锁假设并发操作不会发生冲突\",{\"1\":{\"602\":1}}],[\"乐观锁\",{\"1\":{\"638\":1}}],[\"乐观锁适用于读多写少的场景\",{\"1\":{\"602\":1}}],[\"乐观锁和悲观锁的区别是什么\",{\"1\":{\"602\":1}}],[\"乐观并发控制是一种并发控制机制\",{\"1\":{\"54\":1}}],[\"活跃\",{\"1\":{\"3209\":1}}],[\"活跃连接数\",{\"1\":{\"3111\":1}}],[\"活动线程数\",{\"1\":{\"626\":1}}],[\"活动时段波动\",{\"1\":{\"192\":1}}],[\"活锁\",{\"1\":{\"590\":1}}],[\"框架注解默认值体现约定\",{\"1\":{\"3168\":1}}],[\"框架定义流程模板\",{\"1\":{\"3168\":1}}],[\"框架如spring大量使用注解简化配置\",{\"1\":{\"3139\":1}}],[\"框架设计\",{\"1\":{\"3027\":1}}],[\"框架使用反射缓存主要是为了解决反射性能问题\",{\"1\":{\"3011\":1}}],[\"框架可以在不修改自身代码的情况下支持新的用户类\",{\"1\":{\"2992\":1}}],[\"框架通过反射实现对应用程序的控制\",{\"1\":{\"2973\":1}}],[\"框架应用和性能优化等多个方面\",{\"1\":{\"1061\":1}}],[\"框架生态的崛起\",{\"0\":{\"579\":1}}],[\"框架选择策略\",{\"0\":{\"568\":1}}],[\"替代文本协议\",{\"1\":{\"3091\":1}}],[\"替代反射获取更好性能\",{\"1\":{\"2974\":1}}],[\"替代常量模式\",{\"1\":{\"2824\":1}}],[\"替代了传统的常量定义模式\",{\"1\":{\"2816\":1}}],[\"替代手动数组复制\",{\"1\":{\"2434\":1}}],[\"替代手动同步\",{\"1\":{\"2039\":1}}],[\"替代ejb实体bean\",{\"1\":{\"578\":1}}],[\"替换值\",{\"1\":{\"2655\":2}}],[\"替换旧值\",{\"1\":{\"2600\":1}}],[\"替换索引6\",{\"1\":{\"2265\":1}}],[\"替换子串\",{\"1\":{\"2196\":1}}],[\"替换字符\",{\"1\":{\"2196\":1}}],[\"替换操作\",{\"1\":{\"2196\":1,\"2265\":1}}],[\"替换成\",{\"1\":{\"1558\":1}}],[\"替换掉sbin下的nginx\",{\"1\":{\"1416\":1}}],[\"替换泛型参数为原始类型\",{\"1\":{\"1290\":1}}],[\"替换\",{\"1\":{\"1041\":1}}],[\"替换为新的空列表\",{\"1\":{\"2451\":1}}],[\"替换为\",{\"1\":{\"1003\":1}}],[\"替换老旧api\",{\"1\":{\"495\":1}}],[\"替换变量后的内容\",{\"1\":{\"289\":1}}],[\"替换mysql\",{\"0\":{\"120\":1}}],[\"替换文档\",{\"1\":{\"49\":1,\"86\":1}}],[\"移动redis目录\",{\"0\":{\"1783\":1}}],[\"移动\",{\"1\":{\"1734\":1}}],[\"移动网络\",{\"1\":{\"1662\":1}}],[\"移动网络的高延迟\",{\"1\":{\"1114\":1}}],[\"移动文件\",{\"0\":{\"1619\":1,\"1751\":1}}],[\"移动等\",{\"1\":{\"1446\":1}}],[\"移动发送窗口基址到第一个未确认的序号\",{\"1\":{\"1312\":1}}],[\"移交eclipse基金会管理\",{\"1\":{\"577\":1}}],[\"移除已处理的route头域\",{\"1\":{\"3212\":1}}],[\"移除已处理的事件\",{\"1\":{\"1228\":1,\"2916\":1,\"3118\":1}}],[\"移除节点\",{\"1\":{\"3086\":1}}],[\"移除强引用\",{\"1\":{\"2685\":1}}],[\"移除集合中的元素\",{\"1\":{\"2631\":1}}],[\"移除缓存中的键值对\",{\"1\":{\"2512\":1}}],[\"移除最老的1\",{\"1\":{\"2632\":1}}],[\"移除最后一个\",{\"1\":{\"2468\":1}}],[\"移除最近最少使用的1\",{\"1\":{\"2427\":1}}],[\"移除第一个\",{\"1\":{\"2468\":1}}],[\"移除\",{\"1\":{\"2349\":1}}],[\"移除服务\",{\"0\":{\"1928\":1}}],[\"移除端口号\",{\"1\":{\"3212\":1}}],[\"移除端口\",{\"0\":{\"1926\":1}}],[\"移除掉这些安装包rpm\",{\"1\":{\"1778\":1}}],[\"移除单个节点\",{\"1\":{\"1764\":1}}],[\"移除所有节点\",{\"1\":{\"1764\":1}}],[\"移除所有键\",{\"1\":{\"283\":1}}],[\"移除k8s命令\",{\"1\":{\"1675\":1}}],[\"移除以前docker相关包\",{\"0\":{\"1671\":1}}],[\"移除发布到中央snapshot仓库插件\",{\"1\":{\"1003\":1}}],[\"移除不必要的依赖\",{\"1\":{\"931\":1}}],[\"移除不安全的加密算法\",{\"0\":{\"483\":1}}],[\"移除对不安全加密算法的依赖\",{\"1\":{\"495\":1}}],[\"移除列表中指定值的元素\",{\"1\":{\"202\":1}}],[\"移除键的过期时间\",{\"1\":{\"199\":1}}],[\"移除mysql服务\",{\"1\":{\"119\":1}}],[\"枚举单例具有以下优势\",{\"1\":{\"2826\":1}}],[\"枚举实现的单例模式相比其他方式有哪些优势\",{\"1\":{\"2826\":1}}],[\"枚举实现单例\",{\"1\":{\"2824\":1}}],[\"枚举与反射\",{\"1\":{\"2825\":1}}],[\"枚举与switch结合\",{\"0\":{\"2822\":1}}],[\"枚举序列化机制特殊\",{\"1\":{\"2825\":1}}],[\"枚举类默认继承enum\",{\"1\":{\"2825\":1}}],[\"枚举是实现单例模式的最佳方式\",{\"1\":{\"2824\":1}}],[\"枚举是switch语句的理想选择\",{\"1\":{\"2822\":1}}],[\"枚举提供更强的类型安全\",{\"1\":{\"2824\":1}}],[\"枚举已覆盖所有可能值\",{\"1\":{\"2822\":1}}],[\"枚举可以包含字段\",{\"1\":{\"2821\":1}}],[\"枚举转换\",{\"1\":{\"2820\":1}}],[\"枚举遍历\",{\"1\":{\"2820\":1}}],[\"枚举常量的索引\",{\"1\":{\"2819\":1}}],[\"枚举常量的初始化是线程安全的\",{\"1\":{\"2819\":1}}],[\"枚举常量在类加载时创建\",{\"1\":{\"2819\":1}}],[\"枚举的常用方法\",{\"0\":{\"2820\":1}}],[\"枚举的核心特性\",{\"0\":{\"2819\":1}}],[\"枚举的基本定义\",{\"0\":{\"2818\":1}}],[\"枚举在编译后会生成一个继承java\",{\"1\":{\"2818\":1}}],[\"枚举使用enum关键字定义\",{\"1\":{\"2818\":1}}],[\"枚举顺序\",{\"1\":{\"2363\":1}}],[\"枚举值等\",{\"1\":{\"2358\":1,\"2395\":1}}],[\"枚举\",{\"0\":{\"2815\":1},\"1\":{\"574\":1,\"2816\":1}}],[\"又不会过度浪费内存\",{\"1\":{\"2455\":1}}],[\"又可以灵活地处理复杂对象\",{\"1\":{\"2105\":1}}],[\"又能不断引入现代编程语言特性\",{\"1\":{\"570\":1}}],[\"又名复制积压缓冲区\",{\"1\":{\"167\":1}}],[\"渐进式api演进\",{\"1\":{\"570\":1}}],[\"渐进式改进策略\",{\"0\":{\"514\":1}}],[\"评审\",{\"0\":{\"2023\":1}}],[\"评估长期维护\",{\"1\":{\"568\":1}}],[\"评论\",{\"1\":{\"5\":1,\"8\":1}}],[\"企业ip\",{\"0\":{\"3243\":1}}],[\"企业的内部构件可以保存在私服仓库中\",{\"1\":{\"989\":1}}],[\"企业可以控制哪些构件可以被使用\",{\"1\":{\"989\":1}}],[\"企业内部的构件可以被多个项目共享和复用\",{\"1\":{\"989\":1}}],[\"企业级sip服务器集群部署\",{\"0\":{\"3233\":1}}],[\"企业级用户实体类\",{\"1\":{\"2759\":1}}],[\"企业级项目包结构示例\",{\"1\":{\"2763\":1}}],[\"企业级项目\",{\"1\":{\"2227\":1}}],[\"企业级应用开发是java生态的重要组成部分\",{\"1\":{\"576\":1}}],[\"企业级java平台的演进\",{\"0\":{\"576\":1}}],[\"企业级解决方案\",{\"0\":{\"188\":1}}],[\"企业应用建议选择lts版本\",{\"1\":{\"566\":1}}],[\"社区协作开发模式\",{\"1\":{\"564\":1}}],[\"制定标准\",{\"1\":{\"563\":1}}],[\"制表符\",{\"1\":{\"472\":1}}],[\"部署文档\",{\"1\":{\"1961\":1,\"1971\":1}}],[\"部署skywalking时\",{\"1\":{\"1554\":1}}],[\"部署环境等多维度的技术生态\",{\"1\":{\"559\":1}}],[\"部分读取后\",{\"1\":{\"2914\":1}}],[\"部分\",{\"1\":{\"2895\":1}}],[\"部分前端硬件设备支持并行写入\",{\"1\":{\"1884\":1}}],[\"部分用来验证\",{\"1\":{\"303\":1}}],[\"部分复制的三个核心要素\",{\"1\":{\"167\":1}}],[\"部分复制\",{\"0\":{\"168\":1},\"1\":{\"167\":1}}],[\"部分复制时服务器响应阻塞或数据不同步\",{\"1\":{\"166\":1}}],[\"匿名内部类\",{\"1\":{\"1178\":1}}],[\"匿名内部类中的this引用指向匿名类本身\",{\"1\":{\"556\":1}}],[\"匿名内部类有自己的作用域\",{\"1\":{\"556\":1}}],[\"匿名内部类会生成单独的类文件\",{\"1\":{\"556\":1}}],[\"怎么加入到文件系统呢\",{\"1\":{\"1500\":1}}],[\"怎么限制浏览器访问\",{\"0\":{\"1411\":1}}],[\"怎么做\",{\"1\":{\"550\":1}}],[\"怎么配置\",{\"1\":{\"157\":1}}],[\"纯函数的编写\",{\"1\":{\"548\":1}}],[\"促进开发者之间的沟通和协作\",{\"1\":{\"1951\":1,\"1964\":1,\"1977\":1}}],[\"促进内部构件的复用\",{\"1\":{\"987\":1}}],[\"促进无状态\",{\"1\":{\"548\":1}}],[\"促进良好的编程实践\",{\"1\":{\"315\":1}}],[\"纳秒\",{\"1\":{\"545\":1}}],[\"轻松地扩展到多个主机\",{\"1\":{\"3250\":1}}],[\"轻松实现并行处理\",{\"1\":{\"543\":1}}],[\"轻微问题不修复也可以release\",{\"1\":{\"1004\":1}}],[\"轻量级场景\",{\"1\":{\"3110\":1}}],[\"轻量级日志收集器\",{\"1\":{\"3103\":1}}],[\"轻量级文本协议\",{\"1\":{\"3085\":1}}],[\"轻量级锁和重量级锁\",{\"1\":{\"662\":1}}],[\"轻量级锁\",{\"1\":{\"645\":1,\"651\":1}}],[\"轻量级框架兴起\",{\"1\":{\"571\":1}}],[\"轻量级\",{\"1\":{\"141\":1,\"311\":1,\"1376\":1}}],[\"惰性求值\",{\"1\":{\"543\":1,\"550\":1}}],[\"惰性删除\",{\"0\":{\"152\":1},\"1\":{\"150\":1,\"154\":1}}],[\"找寻文件名是\",{\"1\":{\"1873\":1}}],[\"找jacky\",{\"1\":{\"1873\":1}}],[\"找最近5天之内修改过的文件\",{\"1\":{\"1873\":1}}],[\"找最近3天之内存取过的文件\",{\"1\":{\"1873\":1}}],[\"找一个大的磁盘\",{\"1\":{\"1667\":1}}],[\"找一个合适的目录\",{\"1\":{\"1633\":1,\"1677\":1}}],[\"找到后进行参数类型匹配\",{\"1\":{\"2983\":2}}],[\"找到要删除的节点\",{\"1\":{\"2681\":1}}],[\"找到相同的键\",{\"1\":{\"2600\":1}}],[\"找到其中的onboot=no\",{\"1\":{\"1918\":1}}],[\"找到凡是文件名结尾为\",{\"1\":{\"1873\":1}}],[\"找到private节点的ip\",{\"1\":{\"1764\":2}}],[\"找到nginx配置文件所在位置文件中server中location添加\",{\"1\":{\"1423\":1,\"1427\":1}}],[\"找到第一个出现次数为1的字符\",{\"1\":{\"1166\":1}}],[\"找到字符串中第一个不重复的字符\",{\"1\":{\"1166\":2}}],[\"找到右侧第一个字母或数字\",{\"1\":{\"1165\":1}}],[\"找到左侧第一个字母或数字\",{\"1\":{\"1165\":1}}],[\"找到注释密码行\",{\"1\":{\"219\":1}}],[\"找出所有连接x服务器的进程\",{\"1\":{\"1880\":1}}],[\"找出冲突的依赖\",{\"1\":{\"1020\":1}}],[\"找出冲突的版本\",{\"1\":{\"931\":1,\"944\":1,\"945\":1}}],[\"找出泄漏对象\",{\"1\":{\"784\":1}}],[\"找出大于5的数并排序\",{\"1\":{\"543\":1}}],[\"映射结果集\",{\"1\":{\"3000\":1}}],[\"映射大小\",{\"1\":{\"2917\":1}}],[\"映射起始位置\",{\"1\":{\"2917\":1}}],[\"映射关系\",{\"1\":{\"2398\":1}}],[\"映射值\",{\"1\":{\"544\":1}}],[\"映射\",{\"1\":{\"543\":1,\"2329\":1}}],[\"彻底改变了java程序员的编码方式\",{\"1\":{\"535\":1}}],[\"彻底改变了这一状况\",{\"1\":{\"499\":1}}],[\"于2014年3月发布\",{\"1\":{\"535\":1}}],[\"于是每个人都会发出一个指令\",{\"1\":{\"182\":1}}],[\"平方时间复杂度o\",{\"0\":{\"2709\":1}}],[\"平方时间\",{\"1\":{\"2702\":1}}],[\"平衡了静态类型检查的安全性和动态编程的灵活性\",{\"1\":{\"2992\":1}}],[\"平衡了性能和一致性\",{\"1\":{\"2356\":1}}],[\"平衡树\",{\"1\":{\"2717\":1}}],[\"平衡树操作\",{\"1\":{\"2702\":1}}],[\"平衡空间和时间效率\",{\"1\":{\"2609\":1}}],[\"平衡内存占用和扩容频率\",{\"1\":{\"2282\":1}}],[\"平衡严格性和开发效率\",{\"1\":{\"2028\":1}}],[\"平滑网络上的突发流量\",{\"1\":{\"1399\":1}}],[\"平台信息\",{\"1\":{\"1579\":1}}],[\"平台后端skywalking\",{\"1\":{\"1561\":1}}],[\"平台后端\",{\"1\":{\"1561\":1}}],[\"平台无关\",{\"1\":{\"1046\":2}}],[\"平台无关性\",{\"1\":{\"731\":1,\"1153\":1}}],[\"平台线程创建方式\",{\"1\":{\"526\":1}}],[\"平均情况\",{\"1\":{\"2721\":2}}],[\"平均每次add操作的摊还复杂度为o\",{\"1\":{\"2704\":1}}],[\"平均每秒处理请求总数\",{\"1\":{\"193\":1}}],[\"平均o\",{\"1\":{\"2357\":1,\"2666\":1}}],[\"平均年龄\",{\"1\":{\"2329\":1}}],[\"平均值等\",{\"1\":{\"60\":1}}],[\"旨在简化高并发应用的开发\",{\"1\":{\"524\":1}}],[\"旨在实现以下目标\",{\"1\":{\"476\":1}}],[\"跟镜像仓库名保持一致\",{\"1\":{\"3246\":1}}],[\"跟踪事务状态\",{\"1\":{\"3222\":1}}],[\"跟踪路由\",{\"0\":{\"1917\":1}}],[\"跟踪网络路由路径\",{\"0\":{\"1879\":1},\"1\":{\"1835\":1}}],[\"跟踪npe发生频率和影响范围\",{\"1\":{\"522\":1}}],[\"跟项目中pom所写保持一致\",{\"1\":{\"1696\":1}}],[\"跟之前的一样吗\",{\"1\":{\"192\":1}}],[\"明确异常示例\",{\"1\":{\"2947\":1}}],[\"明确性原则\",{\"0\":{\"2947\":1}}],[\"明确表示不希望被修改\",{\"1\":{\"2358\":1}}],[\"明确文档自动化的需求和目标\",{\"1\":{\"1992\":1}}],[\"明确文档的类型和用途\",{\"1\":{\"1979\":1}}],[\"明确文档的分类标准和方法\",{\"1\":{\"1966\":1}}],[\"明确指定所需类以提高代码可读性\",{\"1\":{\"2768\":1}}],[\"明确指定集合初始容量\",{\"1\":{\"2057\":1}}],[\"明确指定编码\",{\"1\":{\"1236\":1}}],[\"明确指定字符编码\",{\"1\":{\"1236\":1}}],[\"明确核心参数\",{\"1\":{\"631\":1}}],[\"明确告知调用者需要处理空值\",{\"1\":{\"521\":1}}],[\"明确声明\",{\"1\":{\"274\":1}}],[\"考虑分块处理而非一次性读取到内存\",{\"1\":{\"2848\":1}}],[\"考虑迭代器的一致性保证\",{\"1\":{\"2544\":1}}],[\"考虑concurrenthashmap或阻塞队列\",{\"1\":{\"2542\":1}}],[\"考虑数据自治和团队结构\",{\"1\":{\"2009\":1}}],[\"考虑硬件\",{\"1\":{\"818\":1,\"852\":1,\"886\":1,\"920\":1}}],[\"考虑团队熟悉度\",{\"1\":{\"568\":1}}],[\"考虑在日志中捕获并处理长消息\",{\"1\":{\"518\":1}}],[\"考虑使用bom\",{\"1\":{\"2884\":1}}],[\"考虑使用依赖注入代替静态变量\",{\"1\":{\"2775\":1}}],[\"考虑使用弱引用包装值\",{\"1\":{\"2693\":1}}],[\"考虑使用arraylist\",{\"1\":{\"2505\":1}}],[\"考虑使用linkedlist或arraydeque\",{\"1\":{\"2355\":1}}],[\"考虑使用copyonwritearraylist\",{\"1\":{\"2345\":1}}],[\"考虑使用\",{\"1\":{\"2178\":1}}],[\"考虑使用卫语句\",{\"1\":{\"2061\":1}}],[\"考虑使用dto封装\",{\"1\":{\"2027\":1}}],[\"考虑使用methodhandle等替代方案\",{\"1\":{\"1276\":1}}],[\"考虑使用java配置\",{\"1\":{\"316\":1}}],[\"考虑使用索引来提高聚合操作的性能\",{\"1\":{\"63\":1}}],[\"考虑使用批量操作来提高性能\",{\"1\":{\"42\":1}}],[\"某些编码不支持所有unicode字符\",{\"1\":{\"2884\":1}}],[\"某些看似简单的操作可能隐藏着较高的复杂度\",{\"1\":{\"2723\":1}}],[\"某些操作的实现复杂\",{\"1\":{\"2513\":1}}],[\"某些关键字具有特殊含义\",{\"1\":{\"2084\":1}}],[\"某些业务场景下会报错\",{\"1\":{\"1536\":1}}],[\"某些日志系统或监控工具可能对异常消息长度有限制\",{\"1\":{\"518\":1}}],[\"某些工作是在全局事务外完成的\",{\"1\":{\"125\":1}}],[\"能用\",{\"1\":{\"1501\":1}}],[\"能更新整个文件数\",{\"1\":{\"1501\":1}}],[\"能自动剔除故障系统\",{\"1\":{\"1404\":1}}],[\"能在调试时直接定位到空值变量\",{\"1\":{\"510\":1}}],[\"能够正确处理各种语言的字符\",{\"1\":{\"2851\":1}}],[\"能够自动释放不再使用的对象\",{\"1\":{\"2675\":1}}],[\"能够显著提高性能\",{\"1\":{\"2394\":1}}],[\"能够保证插入\",{\"1\":{\"2377\":1}}],[\"能够保证元素按照自然顺序或定制顺序进行排序\",{\"1\":{\"2366\":1}}],[\"能够保存大量的数据\",{\"1\":{\"135\":1}}],[\"能够适应项目的增长和发展\",{\"1\":{\"1959\":1,\"1972\":1,\"1985\":1}}],[\"能够适应项目的变化和发展\",{\"1\":{\"1959\":1,\"1972\":1,\"1985\":1}}],[\"能够处理get请求并返回响应\",{\"1\":{\"1324\":1}}],[\"能够在有限的操作系统线程上支持数百万的并发任务\",{\"1\":{\"524\":1}}],[\"能够清理出足够的可使用的内存空间\",{\"1\":{\"156\":1}}],[\"虽然大o表示法忽略常数因子\",{\"1\":{\"2720\":1}}],[\"虽然键是弱引用\",{\"1\":{\"2693\":1}}],[\"虽然stack是线程安全的\",{\"1\":{\"2561\":1}}],[\"虽然不是linkedlist\",{\"1\":{\"2513\":1}}],[\"虽然快速排序平均性能好\",{\"1\":{\"2357\":1}}],[\"虽然这些关键字在当前版本中没有使用\",{\"1\":{\"2085\":1}}],[\"虽然只是一句命令的事\",{\"1\":{\"1632\":1}}],[\"虽然掉电后无法启动集群是小概率事件\",{\"1\":{\"1632\":1}}],[\"虽然跳过测试可以加快构建\",{\"1\":{\"966\":1}}],[\"虽然增强的npe消息非常有用\",{\"1\":{\"517\":1}}],[\"虽然增加了空值检查和信息记录\",{\"1\":{\"506\":1}}],[\"虽然zgc具有低延迟特性\",{\"1\":{\"492\":1}}],[\"链路追踪\",{\"1\":{\"1562\":1}}],[\"链路数据归集器\",{\"1\":{\"1537\":1}}],[\"链式定义\",{\"1\":{\"1452\":2}}],[\"链式调用示例\",{\"1\":{\"2266\":1}}],[\"链式调用特性\",{\"0\":{\"2266\":1}}],[\"链式调用中空值位置难以定位\",{\"1\":{\"515\":1}}],[\"链式调用空值定位\",{\"0\":{\"501\":1}}],[\"链表长度超过8\",{\"1\":{\"2600\":1}}],[\"链表长度超过阈值\",{\"1\":{\"2527\":1}}],[\"链表节点\",{\"1\":{\"2600\":1}}],[\"链表头\",{\"1\":{\"2416\":1}}],[\"链表会转换为红黑树\",{\"1\":{\"2414\":1}}],[\"链表的性能反而优于红黑树\",{\"1\":{\"2394\":1}}],[\"链表的查找性能会退化为o\",{\"1\":{\"2394\":1}}],[\"链表等\",{\"1\":{\"2331\":1}}],[\"链表较长\",{\"1\":{\"1196\":1}}],[\"链表转为红黑树\",{\"1\":{\"1196\":1}}],[\"链表\",{\"1\":{\"1196\":2,\"2461\":2,\"2518\":2,\"2541\":2,\"2607\":1}}],[\"链接名\",{\"1\":{\"3257\":2}}],[\"链接\",{\"1\":{\"5\":1,\"1146\":1,\"2760\":1}}],[\"显式路由路径\",{\"1\":{\"3211\":1}}],[\"显式锁\",{\"1\":{\"2518\":2}}],[\"显式声明优先\",{\"1\":{\"927\":1}}],[\"显式处理null\",{\"1\":{\"554\":1}}],[\"显式空值检查并提供有意义的错误消息\",{\"1\":{\"517\":1}}],[\"显著提升了高并发场景下的系统性能\",{\"1\":{\"3113\":1}}],[\"显著提升了空指针异常的调试体验\",{\"1\":{\"497\":1}}],[\"显著提高字符流的读写性能\",{\"1\":{\"2856\":1}}],[\"显著提高构建速度\",{\"1\":{\"989\":1}}],[\"显著提高了并发性能\",{\"1\":{\"680\":1}}],[\"显著降低了调试难度和时间成本\",{\"1\":{\"513\":1}}],[\"显示网络连接\",{\"1\":{\"3099\":1}}],[\"显示所有已建立的http连接\",{\"1\":{\"1880\":1}}],[\"显示所有已建立的smtp连接\",{\"1\":{\"1880\":1}}],[\"显示所有的udp\",{\"1\":{\"1880\":1}}],[\"显示所有tcp\",{\"1\":{\"1880\":1}}],[\"显示每个进程具体打开的socket\",{\"1\":{\"1880\":1}}],[\"显示本地打开的所有端口\",{\"1\":{\"1880\":1}}],[\"显示行号\",{\"1\":{\"1857\":1}}],[\"显示docker容器和物理主机挂载目录信息\",{\"0\":{\"1811\":1}}],[\"显示大图的分析和实现\",{\"0\":{\"1470\":1}}],[\"显示到页面\",{\"1\":{\"1443\":1}}],[\"显示hbhs\",{\"1\":{\"1422\":1}}],[\"显示时\",{\"1\":{\"125\":1}}],[\"显示宽度超出范围\",{\"1\":{\"125\":1}}],[\"充分利用多核\",{\"1\":{\"3121\":2}}],[\"充分利用多核cpu\",{\"1\":{\"965\":1,\"1328\":1}}],[\"充分利用多核cpu提高导出速度\",{\"1\":{\"272\":1}}],[\"充分利用cpu缓存\",{\"1\":{\"2334\":1}}],[\"充分利用不可变集合和stream\",{\"1\":{\"1198\":1}}],[\"充分利用java\",{\"1\":{\"495\":1}}],[\"减小锁粒度\",{\"1\":{\"2416\":1}}],[\"减小部署包体积\",{\"1\":{\"495\":1}}],[\"减法赋值\",{\"1\":{\"2113\":1}}],[\"减法\",{\"1\":{\"2109\":1}}],[\"减轻了sip事务层的负担\",{\"1\":{\"3227\":1}}],[\"减轻网络负担\",{\"1\":{\"3185\":1}}],[\"减轻主库压力\",{\"1\":{\"1763\":1}}],[\"减轻原仓库的负担\",{\"1\":{\"989\":1}}],[\"减少创建销毁开销\",{\"1\":{\"3241\":1}}],[\"减少显式配置\",{\"1\":{\"3168\":1}}],[\"减少资源浪费\",{\"1\":{\"3128\":1}}],[\"减少共享状态\",{\"1\":{\"3091\":1}}],[\"减少序列化开销\",{\"1\":{\"3091\":1}}],[\"减少jvm堆外内存拷贝\",{\"1\":{\"3091\":1}}],[\"减少节点变化时的缓存失效\",{\"1\":{\"3086\":1}}],[\"减少重复代码\",{\"1\":{\"3052\":1}}],[\"减少反射被滥用的风险\",{\"1\":{\"3011\":1}}],[\"减少反射调用次数\",{\"1\":{\"2993\":1}}],[\"减少刷新次数\",{\"1\":{\"2873\":1}}],[\"减少io操作\",{\"1\":{\"2728\":1}}],[\"减少io操作次数\",{\"1\":{\"1224\":1,\"2919\":1}}],[\"减少计算量\",{\"1\":{\"2728\":1}}],[\"减少哈希冲突\",{\"1\":{\"2599\":1}}],[\"减少哈希碰撞\",{\"1\":{\"2295\":1}}],[\"减少频繁扩容次数\",{\"1\":{\"2445\":1}}],[\"减少碰撞\",{\"1\":{\"2428\":1}}],[\"减少比较次数\",{\"1\":{\"2357\":1,\"2569\":1}}],[\"减少锁竞争\",{\"1\":{\"2356\":1}}],[\"减少锁的持有时间\",{\"1\":{\"1128\":1,\"1138\":1}}],[\"减少扩容次数\",{\"1\":{\"2355\":1}}],[\"减少手动操作\",{\"1\":{\"1981\":1,\"1983\":1,\"1990\":1}}],[\"减少开发成本\",{\"1\":{\"1970\":1,\"1979\":1}}],[\"减少查找成本\",{\"1\":{\"1957\":1,\"1966\":1}}],[\"减少用户的疑惑和错误\",{\"1\":{\"1944\":1}}],[\"减少不必要的沟通\",{\"1\":{\"1944\":1,\"1957\":1,\"1970\":1,\"1983\":1}}],[\"减少不必要的依赖\",{\"1\":{\"965\":1}}],[\"减少沟通成本\",{\"1\":{\"1942\":1,\"1944\":1,\"1953\":1,\"1955\":1,\"1957\":1,\"1968\":1,\"1970\":1,\"1981\":1,\"1983\":1}}],[\"减少记录无效日志\",{\"1\":{\"1738\":1}}],[\"减少带宽占用\",{\"1\":{\"1501\":1}}],[\"减少gc开销\",{\"1\":{\"1347\":1}}],[\"减少gc频率\",{\"1\":{\"1113\":1}}],[\"减少一次cpu拷贝\",{\"1\":{\"1321\":1}}],[\"减少一次用户空间到内核空间的拷贝\",{\"1\":{\"1232\":1}}],[\"减少未处理异常导致的运行时错误\",{\"1\":{\"1254\":1}}],[\"减少数据库访问\",{\"1\":{\"3170\":1}}],[\"减少数据中转开销\",{\"1\":{\"3130\":1}}],[\"减少数据拷贝次数\",{\"1\":{\"1345\":1}}],[\"减少数据拷贝\",{\"1\":{\"1238\":1}}],[\"减少数据在用户空间和内核空间之间的拷贝次数\",{\"1\":{\"1232\":1}}],[\"减少线程开销\",{\"1\":{\"1227\":1,\"3091\":1}}],[\"减少线程的创建和销毁成本\",{\"1\":{\"1134\":1}}],[\"减少对象创建\",{\"1\":{\"2445\":1,\"3225\":1}}],[\"减少对象创建开销\",{\"1\":{\"1238\":1}}],[\"减少对象的存活时间\",{\"1\":{\"1151\":1}}],[\"减少对外部仓库的依赖\",{\"1\":{\"978\":1,\"989\":1}}],[\"减少传输延迟\",{\"1\":{\"1117\":1}}],[\"减少传输带宽\",{\"1\":{\"1115\":1}}],[\"减少系统调用\",{\"1\":{\"1113\":1}}],[\"减少tcp握手开销\",{\"1\":{\"1111\":1}}],[\"减少端口阻塞风险\",{\"1\":{\"1105\":1}}],[\"减少运行时错误\",{\"1\":{\"1086\":1}}],[\"减少高频代码中的注解解析\",{\"0\":{\"1083\":1}}],[\"减少跨网络访问的次数和数据量\",{\"1\":{\"989\":1}}],[\"减少模块间的依赖\",{\"1\":{\"967\":1}}],[\"减少人工调优负担\",{\"1\":{\"811\":1,\"845\":1,\"879\":1,\"913\":1}}],[\"减少内存浪费\",{\"1\":{\"2455\":1}}],[\"减少内存泄漏的风险\",{\"1\":{\"1153\":1}}],[\"减少内存泄漏和内存溢出问题\",{\"1\":{\"759\":1}}],[\"减少内存调整带来的性能开销\",{\"1\":{\"818\":1,\"852\":1,\"886\":1,\"920\":1}}],[\"减少内存占用\",{\"1\":{\"495\":1,\"703\":1,\"2358\":1,\"2728\":1}}],[\"减少常量数量\",{\"1\":{\"736\":1}}],[\"减少类加载数量\",{\"1\":{\"702\":1}}],[\"减少竞争\",{\"1\":{\"686\":1}}],[\"减少了类层次结构的复杂性\",{\"1\":{\"3009\":1}}],[\"减少了哈希冲突\",{\"1\":{\"2616\":1}}],[\"减少了显式类型转换\",{\"1\":{\"1299\":1}}],[\"减少了位运算次数\",{\"1\":{\"1196\":1}}],[\"减少了手动配置的需求\",{\"1\":{\"1028\":1}}],[\"减少了开发人员的工作量\",{\"1\":{\"945\":1}}],[\"减少了重复声明依赖的工作量\",{\"1\":{\"932\":1,\"967\":1}}],[\"减少了冗余\",{\"1\":{\"732\":1}}],[\"减少了cas竞争\",{\"1\":{\"680\":1}}],[\"减少了中间结果的存储\",{\"1\":{\"95\":1}}],[\"减少无竞争情况下的锁开销\",{\"1\":{\"645\":1}}],[\"减少副作用\",{\"1\":{\"548\":1}}],[\"减少往返次数\",{\"1\":{\"482\":1}}],[\"减少样板代码\",{\"1\":{\"468\":1,\"548\":1,\"3152\":1}}],[\"减少学习成本\",{\"1\":{\"443\":1,\"1944\":1}}],[\"减少指定数值\",{\"1\":{\"200\":1}}],[\"减少网络延迟\",{\"1\":{\"1344\":1}}],[\"减少网络开销\",{\"1\":{\"94\":1,\"211\":1}}],[\"减少网络传输和内存使用\",{\"1\":{\"93\":1,\"210\":1}}],[\"声明流对象\",{\"1\":{\"2831\":1,\"2843\":1}}],[\"声明接口\",{\"1\":{\"2808\":1}}],[\"声明类\",{\"1\":{\"2808\":1}}],[\"声明的同时赋值\",{\"1\":{\"2144\":1}}],[\"声明数组变量和创建数组对象\",{\"1\":{\"2142\":1}}],[\"声明方法可能抛出的异常\",{\"1\":{\"2079\":1}}],[\"声明图片路径变量\",{\"1\":{\"1469\":1}}],[\"声明定时器对象\",{\"1\":{\"1469\":1}}],[\"声明式编程\",{\"1\":{\"1071\":1,\"3152\":1}}],[\"声明式事务\",{\"1\":{\"443\":1,\"3160\":1}}],[\"声明式事务管理的优点是代码更加简洁\",{\"1\":{\"359\":1}}],[\"声明式事务管理和编程式事务管理各有什么优缺点\",{\"1\":{\"359\":1}}],[\"声明式事务管理\",{\"0\":{\"350\":1},\"1\":{\"352\":1}}],[\"声明顺序优先\",{\"0\":{\"1015\":1},\"1\":{\"927\":1,\"1028\":1}}],[\"声明依赖\",{\"1\":{\"490\":1}}],[\"迁移\",{\"1\":{\"1667\":1}}],[\"迁移到模块路径\",{\"1\":{\"490\":1}}],[\"迁移槽位\",{\"1\":{\"208\":1}}],[\"暂停所有用户线程\",{\"1\":{\"777\":2}}],[\"暂停时间不超过10ms\",{\"1\":{\"487\":1}}],[\"暂时屏蔽程序对该slave的数据访问\",{\"1\":{\"173\":1}}],[\"飞行记录器\",{\"0\":{\"480\":1}}],[\"短暂等待gc完成\",{\"1\":{\"2685\":1}}],[\"短路比较\",{\"1\":{\"2294\":1}}],[\"短路运算的优势是可以提高代码的执行效率\",{\"1\":{\"2119\":1}}],[\"短路运算是指在逻辑运算中\",{\"1\":{\"2119\":1}}],[\"短路运算\",{\"1\":{\"2111\":1,\"2118\":1}}],[\"短会话设计\",{\"1\":{\"1116\":1}}],[\"短期任务\",{\"1\":{\"477\":1}}],[\"短时间范围内牺牲一些客户体验\",{\"1\":{\"190\":1}}],[\"短时间范围内\",{\"1\":{\"190\":1}}],[\"短时间网络中断\",{\"1\":{\"167\":1}}],[\"亚毫秒级暂停时间\",{\"1\":{\"476\":1}}],[\"带返回值的方法\",{\"1\":{\"2970\":1}}],[\"带分隔符的文件合并完成\",{\"1\":{\"2897\":1}}],[\"带分隔符的文件合并示例\",{\"1\":{\"2897\":1}}],[\"带成员的枚举\",{\"0\":{\"2821\":1}}],[\"带同步锁\",{\"1\":{\"2268\":1}}],[\"带空值判断的比较\",{\"1\":{\"2255\":1}}],[\"带密码输入\",{\"1\":{\"1780\":1}}],[\"带来泛型\",{\"1\":{\"574\":1}}],[\"带时区的日期时间\",{\"1\":{\"545\":1}}],[\"带多个注解的lambda参数\",{\"1\":{\"469\":1}}],[\"带注解的lambda参数\",{\"1\":{\"468\":1}}],[\"带宽使用率\",{\"1\":{\"3111\":1}}],[\"带宽\",{\"1\":{\"172\":1}}],[\"局部变量在使用前定义\",{\"1\":{\"2774\":1,\"2777\":1}}],[\"局部变量\",{\"1\":{\"1145\":1,\"2767\":1}}],[\"局部变量类型推断\",{\"1\":{\"1059\":1}}],[\"局部变量类型推断增强\",{\"0\":{\"468\":1}}],[\"局部变量表\",{\"1\":{\"714\":1}}],[\"局部处理方式\",{\"1\":{\"282\":1}}],[\"修正sql\",{\"1\":{\"1831\":1}}],[\"修正并发标记期间因用户线程操作导致标记变动的对象\",{\"1\":{\"777\":1}}],[\"修复和功能改进\",{\"1\":{\"945\":1}}],[\"修复递归逻辑\",{\"1\":{\"701\":1}}],[\"修饰符\",{\"1\":{\"2794\":1,\"2968\":1}}],[\"修饰的字段不会被序列化\",{\"1\":{\"1225\":1}}],[\"修饰\",{\"1\":{\"463\":1}}],[\"修改gpgcheck=0及修改repo\",{\"1\":{\"3273\":1}}],[\"修改gav中的版本号\",{\"1\":{\"1003\":1}}],[\"修改内容\",{\"1\":{\"3246\":1}}],[\"修改文件\",{\"1\":{\"3246\":1}}],[\"修改文件里面的\",{\"1\":{\"1855\":1}}],[\"修改原始对象的属性\",{\"1\":{\"3007\":1}}],[\"修改原数组\",{\"1\":{\"2292\":1}}],[\"修改的是副本\",{\"1\":{\"2785\":1}}],[\"修改了父类的行为\",{\"1\":{\"2745\":2}}],[\"修改计数器\",{\"1\":{\"2679\":1}}],[\"修改视图会对原map产生什么影响\",{\"1\":{\"2672\":1}}],[\"修改键的值\",{\"1\":{\"2669\":1}}],[\"修改键的哈希值\",{\"1\":{\"2612\":1}}],[\"修改次数\",{\"1\":{\"2444\":1}}],[\"修改次数加1\",{\"1\":{\"2440\":3,\"2494\":2,\"2496\":2,\"2497\":3}}],[\"修改指定位置的元素\",{\"1\":{\"2439\":1,\"2495\":1}}],[\"修改操作会创建新数组并复制元素\",{\"1\":{\"2456\":1,\"2513\":1}}],[\"修改操作\",{\"1\":{\"2332\":1,\"2358\":1}}],[\"修改元素后\",{\"1\":{\"2324\":1}}],[\"修改元素\",{\"1\":{\"2324\":1}}],[\"修改第三行第二列元素\",{\"1\":{\"2169\":1}}],[\"修改第二个元素的值\",{\"1\":{\"2146\":1}}],[\"修改关闭\",{\"1\":{\"2005\":1}}],[\"修改后关闭\",{\"1\":{\"3270\":1}}],[\"修改后静态属性值\",{\"1\":{\"2971\":1}}],[\"修改后age值\",{\"1\":{\"2971\":1}}],[\"修改后name值\",{\"1\":{\"2971\":1}}],[\"修改后公有属性值\",{\"1\":{\"2971\":1}}],[\"修改后需要保存时\",{\"0\":{\"1858\":1},\"1\":{\"1835\":1}}],[\"修改后的静态属性\",{\"1\":{\"2971\":1}}],[\"修改后的公有属性\",{\"1\":{\"2971\":1}}],[\"修改后的配置如下\",{\"1\":{\"1520\":1}}],[\"修改后的age值\",{\"1\":{\"1269\":1}}],[\"修改后的name值\",{\"1\":{\"1269\":1}}],[\"修改完后需要重启redis服务\",{\"1\":{\"1788\":1}}],[\"修改完之后重新启动docker\",{\"1\":{\"1535\":1}}],[\"修改redis\",{\"1\":{\"1788\":1}}],[\"修改root用户密码\",{\"0\":{\"229\":1}}],[\"修改方式\",{\"1\":{\"1786\":1}}],[\"修改读写权限为\",{\"1\":{\"1764\":1}}],[\"修改标签\",{\"1\":{\"1660\":1}}],[\"修改脚本文件java8的仓库地址\",{\"1\":{\"1646\":1}}],[\"修改pom连接配置\",{\"1\":{\"1696\":1}}],[\"修改pom\",{\"1\":{\"1645\":1}}],[\"修改密码过期时间\",{\"0\":{\"1822\":1}}],[\"修改密码\",{\"0\":{\"1607\":1,\"1819\":1},\"1\":{\"1578\":1}}],[\"修改自己的zookeeper主机地址\",{\"1\":{\"1530\":1}}],[\"修改自定义好的broker\",{\"1\":{\"250\":1}}],[\"修改权限\",{\"1\":{\"1504\":1,\"1624\":1}}],[\"修改默认启动项\",{\"0\":{\"1478\":1}}],[\"修改nginx配置文件\",{\"0\":{\"1427\":1}}],[\"修改logstash配置文件\",{\"0\":{\"1362\":1}}],[\"修改子列表会影响原列表\",{\"1\":{\"1194\":1}}],[\"修改和终止\",{\"1\":{\"1099\":1}}],[\"修改和终止多媒体会话的应用层协议\",{\"1\":{\"3172\":1}}],[\"修改和终止多媒体会话\",{\"1\":{\"1091\":1,\"3175\":1}}],[\"修改配置\",{\"1\":{\"3263\":1}}],[\"修改配置文件harbor\",{\"1\":{\"1630\":1}}],[\"修改配置文件\",{\"0\":{\"1627\":1,\"1716\":1},\"1\":{\"1503\":1}}],[\"修改配置文件拦截站点或请求\",{\"0\":{\"1423\":1}}],[\"修改配置文件数据存放路径datadir即可\",{\"1\":{\"121\":1}}],[\"修改配置需要重新编译代码\",{\"1\":{\"1086\":1}}],[\"修改对象内容\",{\"1\":{\"1058\":1}}],[\"修改引用副本\",{\"1\":{\"1058\":1}}],[\"修改引用\",{\"1\":{\"1053\":2}}],[\"修改域名为申请maven\",{\"1\":{\"1005\":1}}],[\"修改\",{\"0\":{\"1002\":1,\"1003\":1},\"1\":{\"1739\":1,\"2299\":1}}],[\"修改如下内容即可\",{\"1\":{\"1001\":1}}],[\"修改代码\",{\"1\":{\"784\":1}}],[\"修改数据源配置\",{\"1\":{\"235\":1}}],[\"修改时间\",{\"1\":{\"232\":7,\"1684\":7}}],[\"修改mysql登录密码\",{\"0\":{\"1774\":1}}],[\"修改mysql默认字符集\",{\"0\":{\"1771\":1}}],[\"修改mysql访问权限\",{\"0\":{\"227\":1}}],[\"修改mongo\",{\"1\":{\"1736\":1}}],[\"修改master1\",{\"1\":{\"106\":1}}],[\"修改复制缓冲区大小\",{\"1\":{\"171\":1}}],[\"修改用户密码\",{\"0\":{\"1365\":1}}],[\"修改用户\",{\"1\":{\"81\":1}}],[\"扫描包以及子包\",{\"1\":{\"463\":2}}],[\"扫描当前包和其子包\",{\"1\":{\"461\":1}}],[\"案例的实现\",{\"0\":{\"1443\":1},\"1\":{\"1444\":1}}],[\"案例的分析\",{\"0\":{\"1442\":1},\"1\":{\"1444\":1}}],[\"案例二的sql语句\",{\"1\":{\"1441\":1}}],[\"案例效果\",{\"0\":{\"1466\":1,\"1468\":1},\"1\":{\"1441\":1}}],[\"案例效果和环境准备\",{\"0\":{\"1441\":1},\"1\":{\"1444\":1}}],[\"案例效果和环境介绍\",{\"1\":{\"1440\":1}}],[\"案例分析\",{\"1\":{\"1440\":1}}],[\"案例\",{\"1\":{\"459\":1}}],[\"健康检查\",{\"1\":{\"3246\":1}}],[\"健康检查和外部配置等特性\",{\"1\":{\"391\":1}}],[\"健壮\",{\"1\":{\"1046\":1}}],[\"健壮性\",{\"1\":{\"432\":1}}],[\"满足各种编程需求\",{\"1\":{\"2117\":1,\"2136\":1}}],[\"满足各自配置类中符合\",{\"1\":{\"463\":1}}],[\"满足不同的注释需求\",{\"1\":{\"2093\":1}}],[\"满足不同场景的需求\",{\"1\":{\"409\":1,\"443\":1,\"454\":1}}],[\"满足条件\",{\"1\":{\"463\":1}}],[\"满足条件则后续进行创建bean\",{\"1\":{\"459\":1}}],[\"满足\",{\"1\":{\"419\":1,\"463\":1}}],[\"再写入目标文件\",{\"1\":{\"2866\":1}}],[\"再根据读写比例和一致性需求选择具体实现\",{\"1\":{\"2542\":1}}],[\"再比较类型\",{\"1\":{\"2294\":1}}],[\"再乘以c\",{\"1\":{\"2115\":1}}],[\"再主节点启动后\",{\"1\":{\"1763\":1}}],[\"再次读取的10个字节\",{\"1\":{\"2849\":1}}],[\"再次读取这10个字节\",{\"1\":{\"2849\":1}}],[\"再次查看当前redis就提示需要密码\",{\"1\":{\"1787\":1}}],[\"再次查看java版本\",{\"1\":{\"1725\":1}}],[\"再次查找机器是否安装mysql\",{\"1\":{\"1778\":1}}],[\"再次使用会抛出illegalstateexception\",{\"1\":{\"553\":1}}],[\"再次使用需要重新创建\",{\"1\":{\"543\":1}}],[\"再由转发服务器将访问分发到压力更小的服务器\",{\"1\":{\"1403\":1}}],[\"再匹配server模块里的location\",{\"1\":{\"1379\":1}}],[\"再发送的请求就不会发送到宕机的服务器了\",{\"1\":{\"1377\":1}}],[\"再各配置类中加入了\",{\"1\":{\"463\":1}}],[\"再获取被\",{\"1\":{\"415\":1,\"459\":1}}],[\"再服务窗口关闭mysql服务\",{\"1\":{\"119\":1}}],[\"统一日志格式\",{\"1\":{\"3110\":1}}],[\"统一异常响应格式\",{\"1\":{\"2960\":1}}],[\"统一的遍历接口\",{\"1\":{\"2332\":1}}],[\"统一的规范配置库\",{\"1\":{\"2029\":1}}],[\"统一使用slf4j作为日志门面\",{\"1\":{\"2072\":1}}],[\"统一格式等操作\",{\"1\":{\"1507\":1}}],[\"统一转换为小写\",{\"1\":{\"1165\":1}}],[\"统一版本管理\",{\"0\":{\"1023\":1}}],[\"统一管理依赖版本\",{\"0\":{\"954\":1},\"1\":{\"967\":1}}],[\"统一内存管理\",{\"1\":{\"715\":1}}],[\"统一配置管理\",{\"1\":{\"409\":1}}],[\"统计功能\",{\"1\":{\"3107\":1}}],[\"统计所有连接状态\",{\"1\":{\"1881\":1}}],[\"统计单个文件中某个字符\",{\"1\":{\"1872\":1}}],[\"统计字节数\",{\"1\":{\"1860\":1}}],[\"统计每个字符出现的次数\",{\"1\":{\"1166\":1}}],[\"统计访问频度较高的热点数据\",{\"1\":{\"189\":1}}],[\"统计活跃用户\",{\"1\":{\"130\":1}}],[\"环境检查\",{\"0\":{\"3260\":1}}],[\"环境准备\",{\"1\":{\"1441\":1,\"1444\":1}}],[\"环境隔离\",{\"1\":{\"409\":1}}],[\"环境变量\",{\"1\":{\"405\":1,\"406\":1,\"3246\":1}}],[\"环绕通知包围连接点\",{\"1\":{\"344\":1}}],[\"环绕通知和其他通知有什么区别\",{\"1\":{\"344\":1}}],[\"环绕通知\",{\"1\":{\"335\":1,\"336\":1,\"338\":1}}],[\"持续时间\",{\"1\":{\"3109\":1}}],[\"持续监控\",{\"1\":{\"2728\":1}}],[\"持续改进流程\",{\"0\":{\"2027\":1}}],[\"持续集成友好\",{\"1\":{\"396\":1}}],[\"持久性指标\",{\"1\":{\"193\":1}}],[\"持久化存储类准备\",{\"0\":{\"3274\":1}}],[\"持久化问题java程序连接redis时报错\",{\"1\":{\"1788\":1}}],[\"持久化命令\",{\"0\":{\"207\":1}}],[\"持久化方式\",{\"1\":{\"141\":1}}],[\"持久化\",{\"1\":{\"139\":1}}],[\"持久化2\",{\"1\":{\"137\":1}}],[\"持久化过程保存什么\",{\"1\":{\"137\":1}}],[\"持久化用于防止数据的意外丢失\",{\"1\":{\"137\":1}}],[\"微观\",{\"1\":{\"3111\":1}}],[\"微信支付\",{\"1\":{\"2746\":1}}],[\"微服务网络性能瓶颈定位流程\",{\"1\":{\"3111\":1}}],[\"微服务架构设计\",{\"0\":{\"2008\":1}}],[\"微服务架构推动java生态发生了显著变化\",{\"1\":{\"571\":1}}],[\"微服务架构对java生态系统产生了哪些影响\",{\"0\":{\"571\":1}}],[\"微服务友好\",{\"1\":{\"396\":1}}],[\"微妙\",{\"1\":{\"193\":1}}],[\"│\",{\"1\":{\"393\":17,\"1384\":21,\"2763\":4}}],[\"完成连接建立\",{\"1\":{\"3070\":1}}],[\"完成上一页下一页查询功能\",{\"1\":{\"1444\":2}}],[\"完善阻塞队列实现\",{\"1\":{\"2463\":1}}],[\"完善的异常处理机制\",{\"1\":{\"1347\":1}}],[\"完备性\",{\"1\":{\"2117\":1}}],[\"完整的类加载流程包括以下阶段\",{\"1\":{\"2979\":1}}],[\"完整\",{\"1\":{\"2071\":1}}],[\"完美maven坐标引用\",{\"1\":{\"990\":1}}],[\"完全基于反射实现\",{\"1\":{\"2992\":1}}],[\"完全基于java代码和注解\",{\"1\":{\"391\":1}}],[\"完全自定义\",{\"1\":{\"2227\":1}}],[\"完全无外网的情况\",{\"1\":{\"1608\":1}}],[\"完全零拷贝\",{\"1\":{\"1321\":1}}],[\"完全异步\",{\"1\":{\"1316\":1}}],[\"完全在内核空间操作\",{\"1\":{\"1232\":1}}],[\"完全线程安全\",{\"1\":{\"1197\":1}}],[\"完全跳过测试编译和执行\",{\"1\":{\"950\":1}}],[\"完毕\",{\"1\":{\"123\":1}}],[\"拦截器只能处理spring\",{\"1\":{\"387\":1}}],[\"拦截器可以访问spring的上下文和bean\",{\"1\":{\"387\":1}}],[\"拦截器可以在请求处理之前和之后执行\",{\"1\":{\"387\":1}}],[\"拦截器是spring\",{\"1\":{\"387\":1}}],[\"拦截器\",{\"0\":{\"430\":1},\"1\":{\"383\":1}}],[\"拦截器和过滤器的区别包括\",{\"1\":{\"387\":1}}],[\"拦截器和过滤器有什么区别\",{\"1\":{\"387\":1}}],[\"拦截器和过滤器\",{\"0\":{\"383\":1}}],[\"控制力\",{\"1\":{\"3130\":1}}],[\"控制流清晰\",{\"1\":{\"2921\":1}}],[\"控制流程和数据类型\",{\"1\":{\"2804\":1}}],[\"控制流程与异常处理\",{\"0\":{\"1042\":1}}],[\"控制流程\",{\"1\":{\"1034\":1}}],[\"控制访问权限\",{\"1\":{\"3183\":1}}],[\"控制访问\",{\"1\":{\"2771\":1}}],[\"控制属性修改\",{\"1\":{\"2733\":1}}],[\"控制属性访问\",{\"1\":{\"2733\":1}}],[\"控制是否共享\",{\"1\":{\"2308\":1}}],[\"控制语句规范\",{\"0\":{\"2060\":1}}],[\"控制台内输入\",{\"1\":{\"1764\":1}}],[\"控制台日志\",{\"1\":{\"1564\":1}}],[\"控制层\",{\"1\":{\"1440\":2}}],[\"控制线程的数量\",{\"1\":{\"1134\":1}}],[\"控制构件的版本和质量\",{\"1\":{\"978\":1,\"989\":1}}],[\"控制器层异常统一处理\",{\"0\":{\"2956\":1}}],[\"控制器层\",{\"1\":{\"2763\":1}}],[\"控制器方法\",{\"1\":{\"434\":1}}],[\"控制器负责处理用户输入和更新模型及视图\",{\"1\":{\"387\":1}}],[\"控制器的定义\",{\"0\":{\"380\":1}}],[\"控制器\",{\"1\":{\"377\":1,\"392\":1,\"428\":1}}],[\"控制数据库连接的数量\",{\"1\":{\"373\":1}}],[\"控制反转是一种设计原则\",{\"1\":{\"317\":1}}],[\"控制反转\",{\"1\":{\"311\":1,\"319\":1,\"2973\":1,\"3009\":1}}],[\"都通过泛型实现了类型安全的数据存储\",{\"1\":{\"3046\":1}}],[\"都要确保资源正确关闭\",{\"1\":{\"2861\":1}}],[\"都可以用子类替换\",{\"1\":{\"2745\":1}}],[\"都使用数组+链表的结构来存储键值对\",{\"1\":{\"2687\":1}}],[\"都实现了自平衡二叉查找树特性\",{\"1\":{\"2672\":1}}],[\"都实现了可重入锁机制\",{\"1\":{\"668\":1}}],[\"都会使modcount自增\",{\"1\":{\"2444\":1}}],[\"都会记录到oplog中\",{\"1\":{\"1739\":1}}],[\"都直接抛出unsupportedoperationexception\",{\"1\":{\"2395\":1}}],[\"都走这里\",{\"1\":{\"1393\":1}}],[\"都能从本专题中获得对io流知识体系的全面认识和面试应对技巧\",{\"1\":{\"1218\":1}}],[\"都需要修改这个方法\",{\"1\":{\"1209\":1}}],[\"都创建一个新的事务\",{\"1\":{\"359\":1}}],[\"都是对整体系统的压力\",{\"1\":{\"192\":1}}],[\"传输协议\",{\"1\":{\"3206\":1}}],[\"传输地址等\",{\"1\":{\"3176\":1}}],[\"传输方式\",{\"1\":{\"3104\":1}}],[\"传输控制协议\",{\"1\":{\"3061\":1}}],[\"传输层适配代码示例\",{\"1\":{\"3206\":1}}],[\"传输层适配\",{\"0\":{\"3206\":1}}],[\"传输层和应用层\",{\"1\":{\"3059\":1}}],[\"传输层\",{\"1\":{\"3058\":1,\"3204\":1}}],[\"传输敏感信息必须使用https\",{\"1\":{\"2068\":1}}],[\"传输到远程文件夹\",{\"1\":{\"1920\":1}}],[\"传输过程中以压缩解压形式\",{\"1\":{\"1501\":1}}],[\"传递业务异常\",{\"1\":{\"2937\":1}}],[\"传递底层错误信息\",{\"1\":{\"2937\":1}}],[\"传递引用地址的副本\",{\"1\":{\"2785\":1}}],[\"传递值的副本\",{\"1\":{\"2785\":1}}],[\"传递的是对象地址的副本\",{\"1\":{\"2790\":1}}],[\"传递的是对象引用的副本\",{\"1\":{\"1058\":1}}],[\"传递的是引用的值\",{\"1\":{\"1058\":1}}],[\"传递的是值的副本\",{\"1\":{\"1058\":1}}],[\"传递性\",{\"1\":{\"930\":1}}],[\"传递依赖冲突\",{\"1\":{\"1029\":1}}],[\"传递依赖\",{\"0\":{\"1010\":1},\"1\":{\"567\":1}}],[\"传播行为\",{\"1\":{\"355\":1}}],[\"传统集合的迭代器在检测到并发修改时抛出concurrentmodificationexception\",{\"1\":{\"2530\":1}}],[\"传统switch语句\",{\"1\":{\"2062\":1}}],[\"传统io\",{\"1\":{\"2913\":1}}],[\"传统io拷贝耗时\",{\"1\":{\"1321\":1}}],[\"传统io拷贝\",{\"1\":{\"1321\":2}}],[\"传统io数据传输过程\",{\"1\":{\"1232\":1}}],[\"传统初始化方式\",{\"1\":{\"1178\":1}}],[\"传统npe消息\",{\"1\":{\"500\":1}}],[\"传统方式\",{\"1\":{\"473\":1,\"474\":1,\"1453\":2,\"1454\":1}}],[\"传统的java应用程序中\",{\"1\":{\"311\":1}}],[\"传统的认证方式是通过cookie和session的方式进行认证\",{\"1\":{\"304\":1}}],[\"传统数据库数据保存在磁盘\",{\"1\":{\"129\":1}}],[\"隔离区\",{\"1\":{\"1940\":1}}],[\"隔离级别\",{\"1\":{\"355\":1}}],[\"隔离性\",{\"1\":{\"348\":1}}],[\"后的部分\",{\"1\":{\"3212\":1}}],[\"后的值\",{\"1\":{\"2989\":1}}],[\"后\",{\"1\":{\"3075\":1}}],[\"后切换\",{\"1\":{\"2987\":1}}],[\"后继为当前头节点\",{\"1\":{\"2497\":1}}],[\"后继为succ\",{\"1\":{\"2494\":1}}],[\"后继为null\",{\"1\":{\"2494\":1}}],[\"后继节点和数据\",{\"1\":{\"2319\":1}}],[\"后添加的元素会覆盖前一个元素\",{\"1\":{\"2365\":1}}],[\"后确定列\",{\"1\":{\"2167\":1}}],[\"后续修改操作会创建新数组\",{\"1\":{\"2543\":1}}],[\"后续修改不会影响已创建的迭代器\",{\"1\":{\"2543\":1}}],[\"后续直接rm\",{\"1\":{\"1785\":1}}],[\"后续要用到\",{\"1\":{\"997\":1}}],[\"后面跟的是规则\",{\"1\":{\"1876\":1}}],[\"后面的内容\",{\"1\":{\"1780\":1}}],[\"后面的就是初始密码\",{\"1\":{\"1773\":1}}],[\"后面出现\",{\"1\":{\"1507\":1}}],[\"后在cmd窗口中执行docker\",{\"1\":{\"1568\":1}}],[\"后代选择器\",{\"1\":{\"1456\":1}}],[\"后者是443\",{\"1\":{\"1414\":1}}],[\"后端服务器连接的超时时间\",{\"1\":{\"1409\":1}}],[\"后置增强\",{\"1\":{\"1267\":1}}],[\"后置通知\",{\"1\":{\"335\":1,\"336\":1,\"338\":1}}],[\"后期需求增长\",{\"1\":{\"818\":1,\"852\":1,\"886\":1,\"920\":1}}],[\"后调优\",{\"1\":{\"815\":1,\"849\":1,\"883\":1,\"917\":1}}],[\"后台容器在线运行\",{\"1\":{\"3245\":1}}],[\"后台线程处理数据并传递给主线程等\",{\"1\":{\"2897\":1}}],[\"后台运行\",{\"1\":{\"1844\":3,\"3245\":1}}],[\"后台运行命令\",{\"0\":{\"1844\":1},\"1\":{\"1835\":1}}],[\"后台启动并运行容器\",{\"1\":{\"3246\":1}}],[\"后台启动\",{\"1\":{\"1372\":1,\"1530\":1,\"1734\":1}}],[\"后台刷新数据\",{\"1\":{\"191\":1}}],[\"后台执行的意思\",{\"1\":{\"138\":1}}],[\"横切关注点的模块化\",{\"1\":{\"335\":1}}],[\"切断对原数组的引用\",{\"1\":{\"2296\":1}}],[\"切记不要执行make\",{\"1\":{\"1416\":1}}],[\"切点表达式\",{\"0\":{\"340\":1}}],[\"切点\",{\"1\":{\"335\":1}}],[\"切面类的定义\",{\"0\":{\"338\":1}}],[\"切面在特定连接点上执行的动作\",{\"1\":{\"335\":1}}],[\"切面\",{\"1\":{\"335\":1}}],[\"切换读模式后\",{\"1\":{\"3116\":1}}],[\"切换读写模式\",{\"1\":{\"1235\":1,\"2914\":1}}],[\"切换为写模式\",{\"1\":{\"2914\":1}}],[\"切换为读模式\",{\"1\":{\"1235\":1,\"2914\":1,\"2915\":1,\"3116\":2}}],[\"切换权限为root\",{\"0\":{\"1721\":1}}],[\"切换至\",{\"1\":{\"1626\":2,\"1715\":2}}],[\"切换成oracle用户\",{\"1\":{\"1570\":1}}],[\"切换服务器只需要排除原有的\",{\"1\":{\"460\":1}}],[\"切换到指定库\",{\"1\":{\"1737\":1}}],[\"切换到指定数据库\",{\"1\":{\"80\":1}}],[\"切换到admin数据库\",{\"1\":{\"1736\":1}}],[\"切换到读模式\",{\"1\":{\"1338\":3,\"2917\":1}}],[\"切换到node\",{\"1\":{\"266\":2}}],[\"切换版本的命令如下\",{\"1\":{\"266\":2}}],[\"切换node版本\",{\"0\":{\"266\":1}}],[\"切换node\",{\"1\":{\"263\":1}}],[\"切换数据库\",{\"1\":{\"198\":1}}],[\"切换master\",{\"1\":{\"110\":1}}],[\"整体\",{\"1\":{\"2895\":1}}],[\"整体o\",{\"1\":{\"2512\":1}}],[\"整体过程不可控\",{\"1\":{\"140\":1}}],[\"整个表达式的结果都是false\",{\"1\":{\"2119\":1}}],[\"整个堆gc前使用容量\",{\"1\":{\"774\":1}}],[\"整个应用程序中只有一个bean实例\",{\"1\":{\"327\":1}}],[\"整数相加\",{\"1\":{\"2786\":1}}],[\"整数除法\",{\"1\":{\"2118\":1}}],[\"整数类型\",{\"1\":{\"2099\":1,\"2766\":1}}],[\"整数\",{\"1\":{\"725\":1,\"1222\":1,\"2845\":1,\"2902\":1}}],[\"整理过程成本高\",{\"1\":{\"766\":1}}],[\"整理内存碎片\",{\"1\":{\"759\":1}}],[\"整理等\",{\"1\":{\"698\":1}}],[\"整理算法\",{\"0\":{\"766\":1},\"1\":{\"476\":1,\"713\":1,\"767\":1,\"770\":2,\"776\":1,\"1150\":1}}],[\"构件存储在多个仓库中\",{\"1\":{\"987\":1}}],[\"构造响应\",{\"1\":{\"3070\":1}}],[\"构造http响应报文\",{\"1\":{\"3070\":1}}],[\"构造连接池\",{\"1\":{\"1326\":1}}],[\"构造方法可以使用类型参数\",{\"1\":{\"3019\":1}}],[\"构造方法确保编码一致\",{\"1\":{\"2908\":1}}],[\"构造方法2\",{\"1\":{\"2890\":1}}],[\"构造方法1\",{\"1\":{\"2890\":1}}],[\"构造方法初始化所有属性\",{\"1\":{\"2779\":1}}],[\"构造方法和其他方法\",{\"1\":{\"2654\":1}}],[\"构造方法接收外部数组时进行深拷贝\",{\"1\":{\"2299\":1}}],[\"构造方法的深拷贝特性\",{\"0\":{\"2292\":1}}],[\"构造方法实现\",{\"0\":{\"2290\":1,\"2436\":1,\"2493\":1,\"2571\":1}}],[\"构造方法省略\",{\"1\":{\"2232\":1}}],[\"构造方法不需要检查\",{\"1\":{\"1087\":1}}],[\"构造方法误用static\",{\"1\":{\"1052\":1}}],[\"构造方法\",{\"1\":{\"1034\":1,\"1037\":1,\"1038\":1,\"2091\":1,\"2240\":1,\"2263\":3,\"2512\":1,\"2627\":1,\"2631\":1,\"2632\":1,\"2759\":1,\"2909\":1}}],[\"构造方法引用\",{\"1\":{\"539\":1}}],[\"构造方法或数组构造方法\",{\"1\":{\"539\":1}}],[\"构造函数和getter\",{\"1\":{\"3003\":1}}],[\"构造函数和tostring\",{\"1\":{\"3002\":1}}],[\"构造函数信息\",{\"1\":{\"2981\":1}}],[\"构造函数\",{\"1\":{\"1962\":1,\"2318\":1,\"2982\":1,\"3007\":2}}],[\"构造函数会变得很长\",{\"1\":{\"331\":1}}],[\"构造函数注入的优点是可以确保依赖对象在实例化时就被注入\",{\"1\":{\"331\":1}}],[\"构造函数注入和setter方法注入各有什么优缺点\",{\"1\":{\"331\":1}}],[\"构造函数注入\",{\"0\":{\"324\":1},\"1\":{\"322\":1,\"324\":1,\"580\":1,\"2007\":1,\"3159\":1}}],[\"构建\",{\"1\":{\"3246\":1}}],[\"构建或者重新构建服务\",{\"1\":{\"3246\":1}}],[\"构建dockerfile\",{\"1\":{\"3246\":1}}],[\"构建dockerfile的基本结构\",{\"1\":{\"3246\":1}}],[\"构建一个nginx镜像\",{\"1\":{\"3246\":1}}],[\"构建一个ubuntu镜像\",{\"1\":{\"3246\":1}}],[\"构建镜像文件\",{\"1\":{\"3246\":1}}],[\"构建示例\",{\"1\":{\"3246\":1}}],[\"构建命令\",{\"1\":{\"3246\":1}}],[\"构建参数\",{\"1\":{\"3246\":2}}],[\"构建高并发sip服务器需要考虑\",{\"1\":{\"3218\":1}}],[\"构建invite请求\",{\"1\":{\"3190\":1}}],[\"构建http响应\",{\"1\":{\"1324\":1,\"2921\":1}}],[\"构建性能优化可以显著减少构建时间\",{\"1\":{\"958\":1}}],[\"构建性能优化\",{\"0\":{\"958\":1}}],[\"构建失败\",{\"1\":{\"944\":1}}],[\"构建项目\",{\"1\":{\"940\":1}}],[\"构建配置\",{\"1\":{\"936\":1}}],[\"构建空值测试用例库\",{\"1\":{\"522\":1}}],[\"构建工具集成\",{\"1\":{\"2002\":1}}],[\"构建工具的演变\",{\"0\":{\"582\":1}}],[\"构建工具\",{\"1\":{\"510\":1}}],[\"构建多级缓存架构\",{\"1\":{\"190\":1}}],[\"构建数据留存队列例如\",{\"1\":{\"189\":1}}],[\"构建哨兵模式与集群\",{\"1\":{\"162\":1}}],[\"常数因子可能显著影响性能\",{\"1\":{\"2720\":1}}],[\"常数空间\",{\"1\":{\"2711\":1}}],[\"常数时间复杂度o\",{\"0\":{\"2707\":1}}],[\"常数时间\",{\"1\":{\"2702\":1}}],[\"常量之间用逗号分隔\",{\"1\":{\"2818\":1}}],[\"常量集合\",{\"1\":{\"2358\":1}}],[\"常量值\",{\"1\":{\"2307\":1}}],[\"常量比较可直接使用==\",{\"1\":{\"2252\":1}}],[\"常量折叠现象\",{\"0\":{\"2249\":1}}],[\"常量在前\",{\"1\":{\"2204\":1}}],[\"常量名\",{\"0\":{\"1999\":1}}],[\"常量除外\",{\"1\":{\"1087\":1}}],[\"常量池存储位置变迁\",{\"0\":{\"2302\":1}}],[\"常量池在堆中\",{\"1\":{\"2297\":1}}],[\"常量池在永久代\",{\"1\":{\"2297\":1}}],[\"常量池位置\",{\"1\":{\"2246\":1}}],[\"常量池的内存结构\",{\"0\":{\"2242\":1}}],[\"常量池的共享设计\",{\"0\":{\"732\":1}}],[\"常量池工作原理\",{\"1\":{\"2236\":1}}],[\"常量池优化等特性\",{\"1\":{\"2185\":1}}],[\"常量池优化\",{\"1\":{\"1048\":1,\"2192\":1,\"2300\":1}}],[\"常量池中的字符串字面量\",{\"1\":{\"2245\":1}}],[\"常量池中的符号引用和直接引用有什么区别\",{\"1\":{\"738\":1}}],[\"常量池中的常量被类的字段\",{\"1\":{\"732\":1}}],[\"常量池容量有限制\",{\"1\":{\"736\":1}}],[\"常量池溢出\",{\"0\":{\"736\":1}}],[\"常量池集中存储类中所有的字面量和符号引用\",{\"1\":{\"732\":1}}],[\"常量池是类加载过程中解析阶段的主要依据\",{\"1\":{\"725\":1}}],[\"常量池包含17种常量类型\",{\"1\":{\"725\":1}}],[\"常量池类型\",{\"0\":{\"725\":1}}],[\"常量池\",{\"1\":{\"707\":1,\"724\":1,\"1041\":1,\"2981\":1}}],[\"常量\",{\"1\":{\"691\":1,\"1038\":1}}],[\"常见命令\",{\"1\":{\"3246\":1}}],[\"常见策略\",{\"1\":{\"3086\":1}}],[\"常见复杂度分析错误\",{\"0\":{\"2719\":1}}],[\"常见时间复杂度类型\",{\"0\":{\"2702\":1}}],[\"常见异常及解决方案\",{\"0\":{\"2339\":1,\"2381\":1,\"2418\":1,\"2475\":1}}],[\"常见数组类型打印对比\",{\"0\":{\"2222\":1}}],[\"常见npe场景\",{\"0\":{\"2053\":1}}],[\"常见错误\",{\"0\":{\"1586\":1}}],[\"常见错误案例\",{\"0\":{\"1076\":1}}],[\"常见网络编程错误\",{\"0\":{\"1335\":1}}],[\"常见解决方案\",{\"1\":{\"1325\":1}}],[\"常见集合初始化\",{\"0\":{\"1178\":1}}],[\"常见问题\",{\"0\":{\"1663\":1,\"1788\":1},\"1\":{\"1040\":1}}],[\"常见报错问题\",{\"0\":{\"1005\":1}}],[\"常见场景\",{\"1\":{\"753\":1}}],[\"常见原因\",{\"1\":{\"737\":1}}],[\"常见的工作队列类型\",{\"1\":{\"634\":1}}],[\"常见的applicationcontext实现\",{\"1\":{\"321\":1}}],[\"常见线程池类型\",{\"0\":{\"623\":1}}],[\"常用命令\",{\"0\":{\"3312\":1}}],[\"常用命令与配置\",{\"1\":{\"3246\":1}}],[\"常用channel实现包括\",{\"1\":{\"3117\":1}}],[\"常用channel类型\",{\"1\":{\"2915\":1}}],[\"常用实现包括bytebuffer\",{\"1\":{\"3116\":1}}],[\"常用wireshark过滤器\",{\"1\":{\"3107\":1}}],[\"常用字符集\",{\"1\":{\"2881\":1}}],[\"常用字符串操作\",{\"1\":{\"1041\":1}}],[\"常用操作示例\",{\"0\":{\"2324\":1}}],[\"常用构造方法和核心方法如下\",{\"1\":{\"2831\":1,\"2832\":1}}],[\"常用构造方法\",{\"0\":{\"2291\":1}}],[\"常用压缩\",{\"0\":{\"1861\":1},\"1\":{\"1835\":1}}],[\"常用类\",{\"1\":{\"1438\":1,\"1440\":1}}],[\"常用方法包括\",{\"1\":{\"3179\":1}}],[\"常用方法\",{\"1\":{\"1437\":1,\"1461\":1,\"1462\":1,\"1463\":1,\"1464\":1}}],[\"常用的java日志框架组合\",{\"1\":{\"3102\":1}}],[\"常用的java序列化协议包括\",{\"1\":{\"3085\":1}}],[\"常用的事件\",{\"1\":{\"1450\":1}}],[\"常用的镜像仓库\",{\"0\":{\"982\":1}}],[\"常用的私服仓库\",{\"0\":{\"979\":1}}],[\"常用的有\",{\"1\":{\"538\":1}}],[\"常用于清空指定master中的槽\",{\"1\":{\"186\":1}}],[\"常用管道阶段\",{\"1\":{\"58\":1}}],[\"事先安装好软件包\",{\"1\":{\"1779\":1}}],[\"事件循环\",{\"1\":{\"3124\":1}}],[\"事件驱动架构\",{\"1\":{\"3089\":1}}],[\"事件驱动\",{\"1\":{\"2919\":1,\"3128\":1}}],[\"事件\",{\"1\":{\"1454\":1}}],[\"事件方法名2\",{\"1\":{\"1452\":2}}],[\"事件方法名1\",{\"1\":{\"1452\":2}}],[\"事件的切换\",{\"1\":{\"1452\":1}}],[\"事件的基本使用\",{\"0\":{\"1450\":1}}],[\"事件名称\",{\"1\":{\"1451\":2,\"1454\":2}}],[\"事件区块结束\",{\"1\":{\"1385\":1}}],[\"事件区块开始\",{\"1\":{\"1385\":1}}],[\"事件监听\",{\"1\":{\"537\":1}}],[\"事件传播等\",{\"1\":{\"321\":1}}],[\"事务超时与重传处理\",{\"0\":{\"3222\":1}}],[\"事务与对话管理\",{\"0\":{\"3207\":1}}],[\"事务层和传输层\",{\"1\":{\"3220\":1}}],[\"事务层\",{\"1\":{\"3204\":1}}],[\"事务处理机制\",{\"1\":{\"3201\":1}}],[\"事务代理\",{\"1\":{\"3005\":1}}],[\"事务注解\",{\"1\":{\"3005\":1}}],[\"事务注意事项\",{\"1\":{\"211\":1}}],[\"事务测试应使用\",{\"1\":{\"2048\":1,\"2055\":1,\"2063\":1}}],[\"事务状态管理\",{\"0\":{\"1108\":1}}],[\"事务如何传播\",{\"1\":{\"348\":1,\"355\":1,\"359\":1}}],[\"事务的传播行为定义了当一个事务方法调用另一个事务方法时\",{\"1\":{\"359\":1}}],[\"事务的传播行为\",{\"1\":{\"348\":1}}],[\"事务的隔离级别和传播行为\",{\"0\":{\"355\":1}}],[\"事务的隔离级别\",{\"1\":{\"348\":1}}],[\"事务的基本概念\",{\"0\":{\"348\":1}}],[\"事务模块\",{\"1\":{\"313\":1}}],[\"事务管理与aop\",{\"0\":{\"3160\":1}}],[\"事务管理是企业级应用程序开发中不可或缺的一部分\",{\"1\":{\"346\":1}}],[\"事务管理\",{\"0\":{\"441\":1},\"1\":{\"309\":1,\"1072\":1,\"3158\":1}}],[\"事务命令\",{\"0\":{\"91\":1,\"206\":1}}],[\"事务虽然可以保证数据的一致性\",{\"1\":{\"74\":1}}],[\"事务\",{\"0\":{\"71\":1},\"1\":{\"311\":1,\"333\":1,\"342\":1,\"348\":1,\"3009\":1,\"3152\":1}}],[\"事务等\",{\"1\":{\"66\":1}}],[\"消除基本类型与包装类之间的转换代码\",{\"1\":{\"1049\":1}}],[\"消除样板代码\",{\"1\":{\"315\":1}}],[\"消费数据\",{\"1\":{\"3041\":1}}],[\"消费者消费\",{\"1\":{\"2555\":1}}],[\"消费者消费产品\",{\"1\":{\"2466\":1}}],[\"消费者完成消费任务\",{\"1\":{\"2466\":1}}],[\"消费者线程调用take\",{\"1\":{\"2483\":1}}],[\"消费者线程\",{\"1\":{\"2466\":1,\"2555\":1}}],[\"消费者\",{\"1\":{\"2461\":1,\"2524\":1,\"3041\":2}}],[\"消费者使用super\",{\"1\":{\"1296\":1}}],[\"消费者模型示例\",{\"1\":{\"2555\":1}}],[\"消费者模型实现\",{\"0\":{\"2466\":1}}],[\"消费者模型\",{\"0\":{\"642\":1,\"2555\":1},\"1\":{\"2466\":1,\"2897\":1}}],[\"消费者模式\",{\"1\":{\"612\":1,\"628\":1}}],[\"消费\",{\"1\":{\"642\":1}}],[\"消费型接口\",{\"1\":{\"538\":1}}],[\"消息处理实现\",{\"1\":{\"3240\":1}}],[\"消息处理器接口\",{\"1\":{\"3217\":1}}],[\"消息较大或需要可靠传输的场景\",{\"1\":{\"3206\":1}}],[\"消息路由策略\",{\"1\":{\"3201\":1}}],[\"消息重传与超时\",{\"0\":{\"3195\":1}}],[\"消息体解析\",{\"1\":{\"3205\":1}}],[\"消息体\",{\"1\":{\"3180\":1}}],[\"消息长度+数据格式\",{\"1\":{\"3069\":1}}],[\"消息长度+消息内容格式\",{\"1\":{\"1325\":1}}],[\"消息中间件\",{\"1\":{\"1347\":1}}],[\"消息内容\",{\"1\":{\"1325\":1}}],[\"消息内容对象\",{\"1\":{\"289\":1}}],[\"消息格式\",{\"1\":{\"1325\":1}}],[\"消息压缩\",{\"1\":{\"1115\":1}}],[\"消息吞吐量和响应时间\",{\"1\":{\"1113\":1}}],[\"消息解析优化\",{\"1\":{\"1111\":1}}],[\"消息解析异常\",{\"0\":{\"1107\":1}}],[\"消息结构清晰\",{\"1\":{\"1098\":1}}],[\"消息和头工厂\",{\"1\":{\"1094\":1,\"3190\":1}}],[\"消息传递\",{\"1\":{\"3227\":1}}],[\"消息传递模型\",{\"1\":{\"595\":1}}],[\"消息传输过程中使用mac算法来检验消息的完整性\",{\"1\":{\"114\":1}}],[\"消息可能不精确\",{\"1\":{\"519\":1}}],[\"消息模版信息\",{\"1\":{\"289\":1}}],[\"消息队列\",{\"1\":{\"129\":1,\"130\":1,\"1238\":1,\"2010\":1}}],[\"消息值与libmysql\",{\"1\":{\"125\":1}}],[\"消息\",{\"1\":{\"125\":550,\"2960\":1}}],[\"消息完整性验证\",{\"1\":{\"114\":1}}],[\"放到新数组的原索引+oldcap位置\",{\"1\":{\"2601\":1}}],[\"放到新数组的原索引位置\",{\"1\":{\"2601\":1}}],[\"放置在根目录下\",{\"1\":{\"1548\":1,\"1697\":1}}],[\"放一张照片上去\",{\"1\":{\"1402\":1}}],[\"放在cookie中自然也可以的\",{\"1\":{\"306\":1}}],[\"放弃使用redis\",{\"1\":{\"161\":1}}],[\"放弃数据驱逐\",{\"1\":{\"157\":1}}],[\"放弃\",{\"1\":{\"125\":1}}],[\"入口\",{\"1\":{\"3246\":1}}],[\"入栈的元素\",{\"1\":{\"2551\":1}}],[\"入栈\",{\"1\":{\"2506\":1}}],[\"入队\",{\"1\":{\"2506\":1}}],[\"入队操作\",{\"0\":{\"2573\":1},\"1\":{\"2485\":1}}],[\"入队时通过cas原子更新尾节点\",{\"1\":{\"2485\":1}}],[\"入库后下发给客户端\",{\"1\":{\"306\":1}}],[\"入参\",{\"1\":{\"267\":1}}],[\"携带\",{\"1\":{\"306\":1}}],[\"天然线程安全\",{\"1\":{\"2826\":1}}],[\"天\",{\"1\":{\"306\":1,\"1504\":1}}],[\"依次执行一下命令\",{\"1\":{\"1624\":1}}],[\"依次执行以下脚本\",{\"1\":{\"1620\":1,\"1752\":1}}],[\"依次与其他字符串比较对应位置的字符\",{\"1\":{\"1170\":1}}],[\"依赖注入与组件扫描\",{\"0\":{\"3159\":1}}],[\"依赖注入中的泛型自动装配\",{\"0\":{\"3049\":1}}],[\"依赖注入\",{\"1\":{\"2999\":1}}],[\"依赖注入的方式\",{\"0\":{\"322\":1}}],[\"依赖操作系统支持\",{\"1\":{\"2921\":1}}],[\"依赖索引位置可能因枚举常量顺序变化导致错误\",{\"1\":{\"2825\":1}}],[\"依赖hashcode\",{\"1\":{\"2666\":1}}],[\"依赖抽象而非具体实现\",{\"1\":{\"2005\":1}}],[\"依赖于封装来隐藏具体实现细节\",{\"1\":{\"2754\":1}}],[\"依赖于\",{\"1\":{\"1420\":1}}],[\"依赖于操作系统实现\",{\"1\":{\"606\":1}}],[\"依赖倒置原则\",{\"0\":{\"1212\":1},\"1\":{\"2005\":1}}],[\"依赖不兼容\",{\"1\":{\"1029\":1}}],[\"依赖不可用\",{\"1\":{\"988\":1}}],[\"依赖未更新\",{\"1\":{\"1029\":1}}],[\"依赖过多\",{\"1\":{\"1029\":1}}],[\"依赖版本不一致\",{\"1\":{\"1029\":1}}],[\"依赖优化\",{\"1\":{\"965\":1}}],[\"依赖继承\",{\"0\":{\"963\":1}}],[\"依赖排除\",{\"0\":{\"928\":1}}],[\"依赖传递是指当项目依赖另一个项目时\",{\"1\":{\"932\":1,\"967\":1}}],[\"依赖传递\",{\"0\":{\"926\":1}}],[\"依赖范围包括\",{\"1\":{\"938\":1}}],[\"依赖范围\",{\"0\":{\"925\":1},\"1\":{\"938\":1}}],[\"依赖声明是通过pom文件中的<dependencies>元素来实现的\",{\"1\":{\"924\":1}}],[\"依赖声明\",{\"0\":{\"924\":1}}],[\"依赖冲突通常是由以下原因引起的\",{\"1\":{\"1009\":1}}],[\"依赖冲突是maven使用过程中常见的问题\",{\"1\":{\"1007\":1}}],[\"依赖冲突解决\",{\"0\":{\"1006\":1}}],[\"依赖冲突\",{\"0\":{\"927\":1},\"1\":{\"567\":1,\"931\":1,\"966\":1}}],[\"依赖npe来提示问题\",{\"1\":{\"517\":1}}],[\"依赖npe来发现空值问题\",{\"1\":{\"517\":1}}],[\"依赖\",{\"1\":{\"396\":1,\"711\":1}}],[\"依赖管理优化可以减少构建时间和避免依赖冲突\",{\"1\":{\"952\":1}}],[\"依赖管理优化\",{\"0\":{\"952\":1}}],[\"依赖管理是maven的核心功能之一\",{\"1\":{\"922\":1}}],[\"依赖管理陷阱\",{\"0\":{\"567\":1}}],[\"依赖管理\",{\"0\":{\"394\":1,\"921\":1,\"938\":1},\"1\":{\"490\":1,\"936\":1,\"943\":1,\"967\":1}}],[\"依然存在诸多问题\",{\"1\":{\"306\":1}}],[\"依据策略决定\",{\"1\":{\"141\":1}}],[\"状态性\",{\"1\":{\"3198\":1}}],[\"状态=\",{\"1\":{\"2903\":1}}],[\"状态码处理\",{\"0\":{\"3196\":1}}],[\"状态码模式\",{\"1\":{\"2942\":1}}],[\"状态码\",{\"1\":{\"471\":1,\"3205\":1}}],[\"状态\",{\"1\":{\"305\":1,\"1687\":1}}],[\"攻击\",{\"1\":{\"304\":1}}],[\"互联网适应性\",{\"1\":{\"1101\":1}}],[\"互联网服务离不开用户认证\",{\"1\":{\"304\":1}}],[\"互斥条件\",{\"1\":{\"648\":1}}],[\"互相连通\",{\"1\":{\"161\":1}}],[\"逻辑处理\",{\"1\":{\"2255\":3}}],[\"逻辑非\",{\"1\":{\"2111\":1}}],[\"逻辑或\",{\"1\":{\"2111\":1}}],[\"逻辑与\",{\"1\":{\"2111\":1}}],[\"逻辑运算符用于连接布尔表达式\",{\"1\":{\"2111\":1}}],[\"逻辑运算符\",{\"0\":{\"2111\":1}}],[\"逻辑上分为四部分\",{\"1\":{\"1561\":1}}],[\"逻辑如下\",{\"1\":{\"303\":1}}],[\"逻辑类\",{\"1\":{\"293\":1}}],[\"规避潜在风险\",{\"1\":{\"2977\":1}}],[\"规范实现sip协议通信\",{\"1\":{\"3190\":1}}],[\"规范执行优秀团队表彰\",{\"1\":{\"2029\":1}}],[\"规范执行耗时\",{\"1\":{\"2026\":1}}],[\"规范大使制度\",{\"1\":{\"2029\":1}}],[\"规范培训与认证机制\",{\"1\":{\"2029\":1}}],[\"规范自动同步机制\",{\"1\":{\"2029\":1}}],[\"规范自动化工具链\",{\"0\":{\"2016\":1}}],[\"规范不是一成不变的\",{\"1\":{\"2028\":1}}],[\"规范改进示例\",{\"1\":{\"2027\":1}}],[\"规范违规数量趋势\",{\"1\":{\"2026\":1}}],[\"规范合规度量与改进\",{\"0\":{\"2025\":1}}],[\"规范落地与工具链\",{\"0\":{\"2015\":1}}],[\"规范的一个子集\",{\"1\":{\"1437\":1}}],[\"规范规定了一些字段\",{\"1\":{\"303\":1}}],[\"规定所有变量存储在主内存中\",{\"1\":{\"602\":1}}],[\"规则数组和不规则数组在内存结构上有所不同\",{\"1\":{\"2171\":1}}],[\"规则\",{\"1\":{\"125\":1}}],[\"签发了\",{\"1\":{\"305\":1}}],[\"签发时间\",{\"1\":{\"279\":1}}],[\"签名\",{\"1\":{\"303\":2}}],[\"仔细辨别会发现它由\",{\"1\":{\"303\":1}}],[\"俺们先来看看一个\",{\"1\":{\"303\":1}}],[\"涵盖协议集成\",{\"1\":{\"3230\":1}}],[\"涵盖内存结构\",{\"1\":{\"1141\":1}}],[\"涵盖了并发基础\",{\"1\":{\"1119\":1}}],[\"涵盖\",{\"1\":{\"303\":1}}],[\"了解并接受这种特性\",{\"1\":{\"2352\":1}}],[\"了解运算符的优先级可以帮助我们正确地理解和编写表达式\",{\"1\":{\"2119\":1}}],[\"了解依赖关系\",{\"1\":{\"301\":1}}],[\"了解详情\",{\"1\":{\"13\":1}}],[\"让linux从time\",{\"1\":{\"1907\":1}}],[\"让当前环境变量生效\",{\"0\":{\"1732\":1}}],[\"让其生效\",{\"1\":{\"1624\":1}}],[\"让rsync\",{\"1\":{\"1504\":1}}],[\"让后保存到文件中\",{\"1\":{\"1418\":1}}],[\"让静态的资源只走静态资源服务器\",{\"1\":{\"1401\":1}}],[\"让开发者能够使用熟悉的线程模型编写高性能的并发应用\",{\"1\":{\"531\":1}}],[\"让开发者可以灵活地配置应用\",{\"1\":{\"400\":1}}],[\"让开发者可以更专注于业务逻辑\",{\"1\":{\"398\":1}}],[\"让开发者可以专注于业务逻辑而不是配置文件\",{\"1\":{\"389\":1}}],[\"让你的括号成对标色\",{\"1\":{\"299\":1}}],[\"让这个子进程去执行save相关的操作\",{\"1\":{\"138\":1}}],[\"彩虹括号插件\",{\"1\":{\"299\":1}}],[\"治好代码审查员的强迫症\",{\"1\":{\"298\":1}}],[\"首次使用时才初始化数组\",{\"1\":{\"2527\":1}}],[\"首次使用字符串常量时\",{\"1\":{\"2243\":1}}],[\"首次引入linkedlist\",{\"1\":{\"2491\":1}}],[\"首次引入arraylist\",{\"1\":{\"2434\":1}}],[\"首次添加元素时才扩容至10\",{\"1\":{\"2445\":1}}],[\"首次添加元素时会扩容至默认容量10\",{\"1\":{\"2436\":1}}],[\"首次出现的\",{\"1\":{\"2440\":1}}],[\"首元素选择器\",{\"1\":{\"1458\":1}}],[\"首字母必须小写\",{\"1\":{\"1087\":1}}],[\"首字母必须大写\",{\"1\":{\"1087\":1}}],[\"首字母小写\",{\"1\":{\"1087\":1,\"1997\":1}}],[\"首字母大写\",{\"1\":{\"1087\":1,\"1996\":1}}],[\"首当其冲的必定是阿里的代码规范插件alibaba\",{\"1\":{\"297\":1}}],[\"首先搜索当前类声明的公有方法\",{\"1\":{\"2983\":1}}],[\"首先检查了\",{\"1\":{\"1586\":1}}],[\"首先由listen和server\",{\"1\":{\"1379\":1}}],[\"首先将请求委派给父类加载器完成\",{\"1\":{\"742\":1}}],[\"首先\",{\"1\":{\"283\":1,\"303\":1}}],[\"首先会判断map中是否有对应的key\",{\"1\":{\"283\":1}}],[\"首先要明确的几个要点\",{\"1\":{\"186\":1}}],[\"首先它有一个在服务器列表中挑选备选master的原则\",{\"1\":{\"182\":1}}],[\"首先我们来看一个业务场景\",{\"1\":{\"176\":1}}],[\"首先我们要理解互联网应用因为其独有的特性我们演化出的三高架构\",{\"1\":{\"160\":1}}],[\"循环接收客户端连接\",{\"1\":{\"3070\":1}}],[\"循环引用\",{\"1\":{\"3007\":1}}],[\"循环内反射调用性能开销大\",{\"1\":{\"2993\":1}}],[\"循环读取文件内容\",{\"1\":{\"2831\":1}}],[\"循环控制\",{\"1\":{\"2809\":1}}],[\"循环变量相关\",{\"1\":{\"2726\":1}}],[\"循环从引用队列中获取被回收的键对应的entry\",{\"1\":{\"2681\":1}}],[\"循环结束后调用一次\",{\"1\":{\"2280\":1}}],[\"循环结束后一次性调用\",{\"1\":{\"2280\":1}}],[\"循环结构用于重复执行一段代码\",{\"1\":{\"2127\":1}}],[\"循环结构\",{\"0\":{\"2127\":1}}],[\"循环结构效率对比\",{\"0\":{\"1043\":1}}],[\"循环中频繁调用tostring\",{\"1\":{\"2280\":1}}],[\"循环中字符串拼接\",{\"1\":{\"1056\":1}}],[\"循环打印是最原始但最灵活的数组打印方式\",{\"1\":{\"2211\":1}}],[\"循环条件和更新表达式\",{\"1\":{\"2138\":1}}],[\"循环\",{\"1\":{\"2078\":3}}],[\"循环获取图片路径\",{\"1\":{\"1469\":2}}],[\"循环显示图片\",{\"1\":{\"1469\":2}}],[\"循环拼接耗时\",{\"1\":{\"1056\":1}}],[\"循环效率对比\",{\"1\":{\"1034\":1}}],[\"循环重试会消耗大量cpu资源\",{\"1\":{\"686\":1}}],[\"循环时间长开销大\",{\"1\":{\"686\":1}}],[\"循环等待条件\",{\"1\":{\"648\":1}}],[\"循环依赖是指两个或多个对象相互依赖\",{\"1\":{\"331\":1}}],[\"循环执行责任链\",{\"1\":{\"293\":1}}],[\"循环执行集合则按顺序执行\",{\"1\":{\"293\":1}}],[\"循环该过程\",{\"1\":{\"153\":1}}],[\"干掉繁琐的\",{\"1\":{\"292\":1}}],[\"策略\",{\"1\":{\"2728\":1}}],[\"策略有哪些\",{\"0\":{\"1403\":1}}],[\"策略如果很多的话\",{\"1\":{\"292\":1}}],[\"策略模式等优化\",{\"1\":{\"2061\":1}}],[\"策略模式的缺点\",{\"1\":{\"292\":1}}],[\"策略模式的优点\",{\"1\":{\"292\":1}}],[\"策略模式\",{\"0\":{\"292\":1},\"1\":{\"628\":1,\"1231\":1,\"3168\":1}}],[\"策略配置\",{\"0\":{\"157\":1}}],[\"肯德基油炸的油半天换一次\",{\"1\":{\"291\":1}}],[\"肯德基用机器屠宰\",{\"1\":{\"291\":1}}],[\"肯德基养殖鸡每天喂食2次\",{\"1\":{\"291\":1}}],[\"肯德基厂家油炸\",{\"1\":{\"291\":1}}],[\"肯德基厂家屠宰\",{\"1\":{\"291\":1}}],[\"肯德基厂家养殖\",{\"1\":{\"291\":1}}],[\"肯德基厂家制作炸鸡\",{\"1\":{\"291\":1}}],[\"肯定不会丢\",{\"1\":{\"137\":1}}],[\"炸鸡的各个子类继承父类\",{\"1\":{\"291\":1}}],[\"炸鸡的父类\",{\"1\":{\"291\":1}}],[\"油炸方法\",{\"1\":{\"291\":1}}],[\"屠宰方法\",{\"1\":{\"291\":1}}],[\"养殖方法\",{\"1\":{\"291\":1}}],[\"易出错\",{\"1\":{\"2227\":1}}],[\"易混淆\",{\"1\":{\"2143\":1}}],[\"易管理等特点\",{\"1\":{\"1507\":1}}],[\"易用性\",{\"1\":{\"1347\":1,\"3123\":1}}],[\"易于扩展\",{\"1\":{\"3192\":1}}],[\"易于人阅读和编写\",{\"1\":{\"1437\":1}}],[\"易于理解\",{\"1\":{\"1216\":1}}],[\"易于记忆和使用\",{\"1\":{\"93\":1,\"210\":1}}],[\"易扩展\",{\"1\":{\"291\":1}}],[\"公有\",{\"1\":{\"3246\":1}}],[\"公有字段\",{\"1\":{\"2984\":1}}],[\"公有属性\",{\"1\":{\"2971\":1}}],[\"公有属性值\",{\"1\":{\"2971\":1}}],[\"公共修饰符\",{\"1\":{\"2798\":1}}],[\"公共类\",{\"1\":{\"2761\":1}}],[\"公共setter方法\",{\"1\":{\"2733\":1}}],[\"公共getter方法\",{\"1\":{\"2733\":1}}],[\"公共访问级别\",{\"1\":{\"2076\":1}}],[\"公共方法\",{\"1\":{\"2035\":1}}],[\"公共\",{\"1\":{\"1940\":1}}],[\"公共的逻辑代码抽取\",{\"1\":{\"291\":1}}],[\"公网访问\",{\"1\":{\"1940\":1}}],[\"公网下\",{\"1\":{\"1641\":1}}],[\"公网地址\",{\"1\":{\"1417\":1}}],[\"公司级基础规范\",{\"1\":{\"2029\":1}}],[\"公司私仓下载镜像\",{\"1\":{\"1641\":1}}],[\"公司内部网站\",{\"1\":{\"1388\":1}}],[\"公式\",{\"1\":{\"1442\":1}}],[\"公平锁和条件变量\",{\"1\":{\"651\":1}}],[\"公平锁按请求顺序获取锁\",{\"1\":{\"638\":1}}],[\"公平锁\",{\"1\":{\"638\":1,\"649\":1}}],[\"公钥对的共有成员\",{\"1\":{\"115\":1}}],[\"公钥对的私有成员\",{\"1\":{\"115\":1}}],[\"模板方法\",{\"1\":{\"3168\":1}}],[\"模板模式\",{\"0\":{\"291\":1}}],[\"模块\",{\"1\":{\"2746\":1}}],[\"模块名\",{\"1\":{\"1503\":3}}],[\"模块需要显式导出包才能被其他模块反射访问\",{\"1\":{\"1281\":1}}],[\"模块拆分\",{\"0\":{\"962\":1},\"1\":{\"967\":1}}],[\"模块标识\",{\"1\":{\"937\":1}}],[\"模块化与分层设计\",{\"1\":{\"3220\":1}}],[\"模块化与标准化\",{\"0\":{\"563\":1}}],[\"模块化封装\",{\"1\":{\"3011\":1}}],[\"模块化设计\",{\"1\":{\"563\":1}}],[\"模块化改造\",{\"1\":{\"495\":1}}],[\"模块化迁移问题\",{\"0\":{\"490\":1}}],[\"模块化系统适配\",{\"1\":{\"3010\":1}}],[\"模块化系统限制了对私有成员的反射访问\",{\"1\":{\"490\":1}}],[\"模块化系统带来了以下好处\",{\"1\":{\"486\":1}}],[\"模块化系统的成熟\",{\"0\":{\"486\":1}}],[\"模块化\",{\"0\":{\"1099\":1},\"1\":{\"311\":1,\"421\":1,\"1216\":1,\"3192\":1}}],[\"模拟振铃2秒\",{\"1\":{\"3208\":1}}],[\"模拟处理时间后发送200\",{\"1\":{\"3208\":1}}],[\"模拟依赖行为\",{\"1\":{\"3166\":1}}],[\"模拟可能的异常\",{\"1\":{\"3005\":1}}],[\"模拟数据库结果集\",{\"1\":{\"3000\":1}}],[\"模拟resultset\",{\"1\":{\"3000\":1}}],[\"模拟读取耗时\",{\"1\":{\"2523\":1}}],[\"模拟消费耗时\",{\"1\":{\"2466\":1}}],[\"模拟生产耗时\",{\"1\":{\"2466\":1}}],[\"模拟启动一个监听端口\",{\"0\":{\"1912\":1}}],[\"模拟服务器处理请求需要5秒钟\",{\"1\":{\"1431\":1}}],[\"模拟网络请求\",{\"1\":{\"529\":1}}],[\"模拟异常\",{\"1\":{\"441\":2}}],[\"模型简单\",{\"1\":{\"1314\":1}}],[\"模型负责数据和业务逻辑\",{\"1\":{\"387\":1}}],[\"模型\",{\"0\":{\"3078\":1,\"3079\":1,\"3080\":1},\"1\":{\"387\":1,\"1227\":1}}],[\"模型和视图\",{\"1\":{\"377\":1}}],[\"模式设计开发了一套高效的事件处理模型\",{\"1\":{\"128\":1}}],[\"模式下启动的\",{\"1\":{\"125\":1}}],[\"模式下\",{\"1\":{\"125\":1}}],[\"形成一个单一的输入流进行顺序读取\",{\"1\":{\"2887\":1}}],[\"形成流水线\",{\"1\":{\"550\":1}}],[\"形成主从结构\",{\"1\":{\"186\":1}}],[\"形式指定\",{\"1\":{\"3246\":1}}],[\"形式的响应数据\",{\"1\":{\"1432\":1}}],[\"形式存在\",{\"1\":{\"303\":1}}],[\"形式\",{\"1\":{\"289\":1}}],[\"批量停止所有容器\",{\"1\":{\"3245\":1}}],[\"批量处理失败\",{\"1\":{\"2953\":1}}],[\"批量添加\",{\"1\":{\"2355\":1}}],[\"批量添加使用addall\",{\"1\":{\"2345\":1}}],[\"批量删除\",{\"1\":{\"2329\":1}}],[\"批量创建文件夹\",{\"1\":{\"1865\":1}}],[\"批量操作\",{\"1\":{\"94\":1,\"211\":1,\"2993\":1}}],[\"批量操作是指一次性执行多个操作\",{\"1\":{\"54\":1}}],[\"批处理机制\",{\"1\":{\"1113\":1}}],[\"批处理应用选择parallel\",{\"1\":{\"818\":1,\"852\":1,\"886\":1,\"920\":1}}],[\"批次\",{\"1\":{\"288\":1}}],[\"转账金额必须为正数\",{\"1\":{\"2947\":1}}],[\"转为红黑树\",{\"1\":{\"2600\":1}}],[\"转移条目到新表\",{\"1\":{\"2684\":1}}],[\"转移机制\",{\"1\":{\"2518\":1}}],[\"转移数据修改docker默认存储位置\",{\"1\":{\"1667\":2}}],[\"转对象\",{\"1\":{\"1439\":1}}],[\"转小写\",{\"1\":{\"1041\":1}}],[\"转换为sip应答消息\",{\"1\":{\"3232\":1}}],[\"转换为十六进制字符串\",{\"1\":{\"3215\":1}}],[\"转换为大写\",{\"1\":{\"543\":1}}],[\"转换流本身不提供缓冲功能\",{\"1\":{\"2884\":1}}],[\"转换流专注于字节与字符的转换\",{\"1\":{\"2883\":1}}],[\"转换流体现了以下设计思想和模式\",{\"1\":{\"2883\":1}}],[\"转换流与缓冲流结合示例\",{\"1\":{\"2880\":1}}],[\"转换流与缓冲流的结合使用\",{\"0\":{\"2880\":1}}],[\"转换流通常与缓冲流结合使用\",{\"1\":{\"2880\":1}}],[\"转换流的关键功能是处理字符编码\",{\"1\":{\"2881\":1}}],[\"转换流的工作原理\",{\"1\":{\"2877\":1}}],[\"转换流的核心作用是在字节流和字符流之间架起桥梁\",{\"1\":{\"2877\":1}}],[\"转换流的作用与原理\",{\"0\":{\"2877\":1}}],[\"转换流在处理文本数据时尤为重要\",{\"1\":{\"2875\":1}}],[\"转换流是java\",{\"1\":{\"2875\":1}}],[\"转换流\",{\"0\":{\"2874\":1}}],[\"转换和测试等方面\",{\"1\":{\"1985\":1}}],[\"转换文档格式\",{\"1\":{\"1974\":2}}],[\"转换默认使用\",{\"1\":{\"1438\":1,\"1440\":1}}],[\"转换工具\",{\"1\":{\"1438\":1,\"1440\":1}}],[\"转换发生在类加载的解析阶段\",{\"1\":{\"738\":1}}],[\"转义关键代码\",{\"1\":{\"294\":1}}],[\"转义请求url路径带有中文字符\",{\"0\":{\"294\":1}}],[\"转\",{\"1\":{\"286\":1,\"1439\":4}}],[\"营业执照\",{\"1\":{\"286\":1}}],[\"竞得人\",{\"1\":{\"286\":1}}],[\"竞选负责人\",{\"1\":{\"182\":1}}],[\"封装原则\",{\"0\":{\"2771\":1}}],[\"封装隐藏了对象的内部实现\",{\"1\":{\"2754\":1}}],[\"封装过度\",{\"0\":{\"2750\":1}}],[\"封装是面向对象的核心特性之一\",{\"1\":{\"2771\":1}}],[\"封装是指将对象的状态\",{\"1\":{\"2732\":1}}],[\"封装是将数据和方法组合在一个单元中的机制\",{\"1\":{\"1203\":1}}],[\"封装性主要是编译期的概念\",{\"1\":{\"2975\":1}}],[\"封装性\",{\"1\":{\"2446\":1}}],[\"封装性是面向对象的三大特性之一\",{\"1\":{\"1271\":1}}],[\"封装了数据和行为\",{\"1\":{\"2756\":1}}],[\"封装了常用的数组操作方法\",{\"1\":{\"2215\":1}}],[\"封装了复杂的nio操作\",{\"1\":{\"1347\":1}}],[\"封装pageinfo对象\",{\"1\":{\"1444\":1}}],[\"封装好的一些\",{\"1\":{\"1438\":1}}],[\"封装\",{\"0\":{\"1203\":1,\"2732\":1},\"1\":{\"1444\":1}}],[\"封装不变的部分\",{\"1\":{\"291\":1}}],[\"封装消息内容\",{\"1\":{\"289\":1}}],[\"封装请求参数\",{\"1\":{\"285\":1}}],[\"封装请求体\",{\"1\":{\"285\":1}}],[\"封装请求体信息\",{\"1\":{\"285\":1}}],[\"封装请求头\",{\"1\":{\"285\":1}}],[\"封装请求头信息new\",{\"1\":{\"285\":1}}],[\"封装entity对象\",{\"1\":{\"285\":1}}],[\"给要通信的目标容器使用link指定一个\",{\"1\":{\"3257\":1}}],[\"给文件做缓冲\",{\"1\":{\"1887\":1}}],[\"给某一个endpoint发送tcp请求\",{\"1\":{\"1877\":1}}],[\"给spec\",{\"1\":{\"1677\":4}}],[\"给k8s\",{\"1\":{\"1660\":1}}],[\"给用户ling授权\",{\"1\":{\"1573\":1}}],[\"给对应目录添加权限即可\",{\"1\":{\"1528\":1}}],[\"给权限\",{\"1\":{\"1503\":2}}],[\"给输入框设置value属性\",{\"1\":{\"1464\":2}}],[\"给指定的对象删除样式类名\",{\"1\":{\"1463\":1,\"1465\":1}}],[\"给指定的对象添加样式类名\",{\"1\":{\"1463\":1,\"1465\":1}}],[\"给div设置或删除cls1样式\",{\"1\":{\"1463\":1}}],[\"给div设置cls1样式\",{\"1\":{\"1463\":1}}],[\"给div删除cls1样式\",{\"1\":{\"1463\":1}}],[\"给btn1按钮绑定单击事件\",{\"1\":{\"1451\":1}}],[\"给es加上用户名和密码\",{\"1\":{\"1350\":1}}],[\"给定时间监控cpu使用率\",{\"0\":{\"1887\":1},\"1\":{\"1835\":1}}],[\"给定权限\",{\"1\":{\"1677\":1,\"1737\":1}}],[\"给定请求头请求体参数\",{\"1\":{\"285\":1}}],[\"给定参数\",{\"1\":{\"285\":1}}],[\"给其他的slave\",{\"1\":{\"182\":1}}],[\"求出最大页数\",{\"1\":{\"284\":1}}],[\"求和\",{\"1\":{\"60\":1}}],[\"则它的两个子节点都是黑色\",{\"1\":{\"2650\":1}}],[\"则使用integer\",{\"1\":{\"2438\":1}}],[\"则需要扩容\",{\"1\":{\"2437\":1}}],[\"则需要认证\",{\"1\":{\"1764\":1}}],[\"则新容量\",{\"1\":{\"2272\":1}}],[\"则显示睡眠中的系统函数名\",{\"1\":{\"1882\":1}}],[\"则说明第二行是空行\",{\"1\":{\"1871\":1}}],[\"则说明有重复元素\",{\"1\":{\"1170\":1}}],[\"则es已能获取来自logstash的数据\",{\"1\":{\"1527\":1}}],[\"则直接使用所需容量\",{\"1\":{\"2438\":1}}],[\"则直接输入\",{\"1\":{\"1478\":1}}],[\"则直接返回\",{\"1\":{\"283\":1}}],[\"则直接返回value值\",{\"1\":{\"283\":1}}],[\"则删除\",{\"1\":{\"1463\":1}}],[\"则添加\",{\"1\":{\"1463\":1}}],[\"则发送\",{\"1\":{\"1440\":1}}],[\"则将联想提示框隐藏\",{\"1\":{\"1440\":1}}],[\"则多余的请求会被拒绝\",{\"1\":{\"1399\":1}}],[\"则分发给了后端的业务处理服务器进行处理了\",{\"1\":{\"1380\":1}}],[\"则返回integer\",{\"1\":{\"2438\":1}}],[\"则返回403\",{\"1\":{\"1410\":1}}],[\"则返回\",{\"1\":{\"1166\":1}}],[\"则a会间接依赖c\",{\"1\":{\"926\":1}}],[\"则进行full\",{\"1\":{\"784\":1}}],[\"则进行minor\",{\"1\":{\"784\":1}}],[\"则尝试minor\",{\"1\":{\"784\":1}}],[\"则查看handlepromotionfailure参数是否允许担保失败\",{\"1\":{\"784\":1}}],[\"则更新为update\",{\"1\":{\"675\":1}}],[\"则满足条件\",{\"1\":{\"459\":1}}],[\"则只需要客户端删除存储的token即可\",{\"1\":{\"306\":1}}],[\"则重新使用用户名密码进行认证\",{\"1\":{\"306\":1}}],[\"则客户端使用\",{\"1\":{\"306\":1}}],[\"则调用supplier来获取值\",{\"1\":{\"283\":1}}],[\"则抛出runtimeexception\",{\"1\":{\"283\":1}}],[\"则通过supplier生成新值并返回\",{\"1\":{\"283\":1}}],[\"则通过给定的supplier获取值\",{\"1\":{\"283\":1}}],[\"则执行value对应的值进行操作\",{\"1\":{\"283\":1}}],[\"则不执行\",{\"1\":{\"283\":1}}],[\"则会把该对象绑定的所有事件都解绑\",{\"1\":{\"1451\":1}}],[\"则会直接返回值\",{\"1\":{\"283\":1}}],[\"则会创建一个满足value类型的数据结构放入到key对应的value中\",{\"1\":{\"283\":1}}],[\"覆盖传递依赖的版本\",{\"1\":{\"1018\":1,\"1030\":1}}],[\"覆盖重复的部分\",{\"1\":{\"281\":1}}],[\"覆盖索引可以显著提高性能\",{\"1\":{\"64\":1}}],[\"覆盖索引是一种特殊的索引\",{\"1\":{\"64\":1}}],[\"两数之和问题\",{\"1\":{\"2715\":1}}],[\"两边同时尝试关闭\",{\"1\":{\"1881\":1}}],[\"两种启动方式\",{\"1\":{\"1503\":1}}],[\"两台主机的文件同步这就涉及到了\",{\"1\":{\"1501\":1}}],[\"两者各有优缺点\",{\"1\":{\"2861\":1}}],[\"两者都实现了navigable接口\",{\"1\":{\"2646\":1}}],[\"两者都允许null值\",{\"1\":{\"2591\":1}}],[\"两者都采用m\",{\"1\":{\"533\":1}}],[\"两者均非线程安全\",{\"1\":{\"2511\":1}}],[\"两者均为o\",{\"1\":{\"2511\":2}}],[\"两者之间是兄弟关系\",{\"1\":{\"1462\":2,\"1465\":2}}],[\"两次遍历\",{\"1\":{\"1166\":1}}],[\"两个方法\",{\"1\":{\"3250\":1}}],[\"两个浮点数相加\",{\"1\":{\"2741\":1}}],[\"两个整数相加\",{\"1\":{\"2741\":1}}],[\"两个数的索引\",{\"1\":{\"2715\":1}}],[\"两个数据库数据一致\",{\"1\":{\"97\":1}}],[\"两个线程交替执行\",{\"1\":{\"1123\":1}}],[\"两个或多个线程互相等待对方释放资源\",{\"1\":{\"590\":1}}],[\"两集和各不相同的部分\",{\"1\":{\"281\":1}}],[\"两集合相同的部分\",{\"1\":{\"281\":1}}],[\"两集合加在一起\",{\"1\":{\"281\":1}}],[\"生命周期优化\",{\"0\":{\"949\":1}}],[\"生命周期\",{\"0\":{\"940\":1},\"1\":{\"943\":1}}],[\"生态\",{\"0\":{\"558\":1,\"968\":1,\"1967\":1,\"2015\":1,\"3092\":1}}],[\"生态不够丰富\",{\"1\":{\"494\":1}}],[\"生产数据\",{\"1\":{\"3041\":1}}],[\"生产环境\",{\"1\":{\"3110\":1}}],[\"生产环境可通过安全管理器限制反射权限\",{\"1\":{\"2993\":1}}],[\"生产环境中需要严格验证\",{\"1\":{\"3214\":1}}],[\"生产环境中对反射调用进行审计和监控\",{\"1\":{\"2974\":1}}],[\"生产环境中根据需求设定\",{\"1\":{\"157\":1}}],[\"生产环境日志应滚动输出\",{\"1\":{\"2072\":1}}],[\"生产环境默认关闭\",{\"1\":{\"2070\":1}}],[\"生产环境务必开启gc日志记录\",{\"1\":{\"816\":1,\"850\":1,\"884\":1,\"918\":1}}],[\"生产环境建议将xms和xmx设置为相同值\",{\"1\":{\"813\":1,\"847\":1,\"881\":1,\"915\":1}}],[\"生产环境常用配置\",{\"0\":{\"806\":1,\"840\":1,\"874\":1,\"908\":1}}],[\"生产环境应禁用显式gc\",{\"1\":{\"780\":1}}],[\"生产环境不推荐\",{\"1\":{\"773\":1}}],[\"生产\",{\"1\":{\"642\":1}}],[\"生产者生产\",{\"1\":{\"2555\":1}}],[\"生产者生产产品\",{\"1\":{\"2466\":1}}],[\"生产者完成生产任务\",{\"1\":{\"2466\":1}}],[\"生产者线程调用put\",{\"1\":{\"2483\":1}}],[\"生产者线程\",{\"1\":{\"2466\":1,\"2555\":1}}],[\"生产者使用extends\",{\"1\":{\"1296\":1}}],[\"生产者\",{\"0\":{\"2466\":1},\"1\":{\"612\":1,\"628\":1,\"2524\":1,\"2555\":1,\"3041\":2}}],[\"生产就绪特性\",{\"1\":{\"391\":1}}],[\"生成webrtc\",{\"1\":{\"3232\":1}}],[\"生成opaque值\",{\"1\":{\"3215\":1}}],[\"生成nonce\",{\"1\":{\"3215\":1}}],[\"生成的builder类可用于链式调用\",{\"1\":{\"3162\":1}}],[\"生成builder类内容的具体实现\",{\"1\":{\"3162\":1}}],[\"生成builder类的代码\",{\"1\":{\"3162\":1}}],[\"生成代码或进行验证\",{\"1\":{\"3147\":1}}],[\"生成代码优化\",{\"1\":{\"3085\":1}}],[\"生成新的java文件\",{\"1\":{\"3147\":1}}],[\"生成sql语句\",{\"1\":{\"3141\":1}}],[\"生成堆转储\",{\"1\":{\"3100\":1}}],[\"生成堆转储快照\",{\"1\":{\"3100\":1}}],[\"生成线程快照\",{\"1\":{\"3096\":1}}],[\"生成java线程快照\",{\"1\":{\"3096\":1}}],[\"生成基于seed的数字\",{\"1\":{\"3021\":1}}],[\"生成索引越界异常消息\",{\"1\":{\"2439\":1}}],[\"生成api文档\",{\"1\":{\"1987\":2}}],[\"生成api文档插件\",{\"1\":{\"999\":1,\"1005\":1}}],[\"生成文档id\",{\"1\":{\"1962\":1}}],[\"生成密码文件\",{\"0\":{\"1421\":1}}],[\"生成桥接方法\",{\"1\":{\"1290\":1}}],[\"生成一个class对象\",{\"1\":{\"1279\":1}}],[\"生成源码插件\",{\"1\":{\"999\":1}}],[\"生成\",{\"1\":{\"997\":1,\"1764\":1,\"1831\":1}}],[\"生成项目站点\",{\"1\":{\"940\":1}}],[\"生成token\",{\"1\":{\"307\":1}}],[\"生成原始\",{\"1\":{\"305\":1}}],[\"生效时间\",{\"1\":{\"279\":1}}],[\"密钥等\",{\"1\":{\"410\":1}}],[\"密钥\",{\"1\":{\"279\":1}}],[\"密码和数据存储位置必须修改\",{\"1\":{\"3263\":1}}],[\"密码加密存储\",{\"1\":{\"2068\":1}}],[\"密码必须使用加密存储\",{\"1\":{\"2068\":1}}],[\"密码长度必须为8\",{\"1\":{\"2065\":1}}],[\"密码不能为空\",{\"1\":{\"2065\":1}}],[\"密码都是oracle\",{\"1\":{\"1570\":1}}],[\"密码提示语｜密码文件路径\",{\"1\":{\"1423\":1,\"1427\":1}}],[\"密码已经加过密\",{\"1\":{\"1422\":1}}],[\"密码文件保存路径\",{\"1\":{\"1421\":1}}],[\"密码记住\",{\"1\":{\"991\":1}}],[\"密码为\",{\"1\":{\"223\":1,\"1426\":1}}],[\"密码混编应是\",{\"1\":{\"125\":1}}],[\"密码\",{\"1\":{\"118\":1,\"122\":1,\"123\":1,\"1418\":1,\"1431\":1,\"1433\":1,\"1434\":1,\"1435\":1,\"1503\":1,\"1687\":1,\"1821\":1}}],[\"兼顾问题排查和磁盘空间\",{\"1\":{\"2072\":1}}],[\"兼顾吞吐量和延迟\",{\"1\":{\"770\":1,\"784\":1}}],[\"兼顾了性能和内存安全\",{\"1\":{\"278\":1}}],[\"兼容性处理策略\",{\"1\":{\"3010\":1}}],[\"兼容性处理\",{\"1\":{\"2993\":1}}],[\"兼容性\",{\"1\":{\"2885\":1}}],[\"兼容性问题\",{\"0\":{\"1277\":1},\"1\":{\"2974\":1}}],[\"兼容性标记\",{\"1\":{\"570\":1}}],[\"兼容性更好\",{\"1\":{\"277\":1}}],[\"典型架构示例\",{\"1\":{\"3228\":1}}],[\"典型的实现包括nist\",{\"1\":{\"3204\":1}}],[\"典型实现如netty框架\",{\"1\":{\"3091\":1}}],[\"典型输出\",{\"1\":{\"2986\":1}}],[\"典型例子包括动态数组的扩容和栈的多\",{\"1\":{\"2704\":1}}],[\"典型算法\",{\"1\":{\"2702\":1}}],[\"典型情况下\",{\"1\":{\"1400\":1}}],[\"典型使用场景示例\",{\"1\":{\"278\":1}}],[\"典型应用存储对象信息\",{\"1\":{\"133\":1}}],[\"反编译注解类会得到类似以下结构\",{\"1\":{\"3145\":1}}],[\"反面教材\",{\"1\":{\"2948\":1}}],[\"反映了设计思想的演变\",{\"1\":{\"2931\":1}}],[\"反映了原始集合的变化\",{\"1\":{\"2358\":1}}],[\"反应器模式\",{\"1\":{\"2921\":1}}],[\"反而增加内存复制开销\",{\"1\":{\"2873\":1}}],[\"反而降低代码质量\",{\"1\":{\"1254\":1,\"2931\":1}}],[\"反而降低代码能力\",{\"1\":{\"298\":1}}],[\"反例\",{\"1\":{\"2745\":1,\"2770\":1}}],[\"反之亦然\",{\"1\":{\"2665\":1}}],[\"反之则是网络不通\",{\"1\":{\"1788\":1}}],[\"反转操作\",{\"1\":{\"2265\":1}}],[\"反转后的字符串\",{\"1\":{\"1164\":3}}],[\"反向匹配\",{\"1\":{\"1871\":1}}],[\"反向代理到你的项目\",{\"1\":{\"1417\":1}}],[\"反向代理服务器可以隐藏源服务器的存在和特征\",{\"1\":{\"1381\":1}}],[\"反向代理服务器的优点是什么\",{\"0\":{\"1381\":1}}],[\"反向代理\",{\"1\":{\"1347\":1,\"1383\":1}}],[\"反选\",{\"1\":{\"1467\":3}}],[\"反方代理就是请求统一被nginx接收\",{\"1\":{\"1380\":1}}],[\"反序列化结果\",{\"1\":{\"3085\":1}}],[\"反序列化代码\",{\"1\":{\"3085\":1}}],[\"反序列化后为null\",{\"1\":{\"1225\":1}}],[\"反序列化后\",{\"1\":{\"1225\":1}}],[\"反序列化对象\",{\"1\":{\"1225\":1}}],[\"反序列化则是将字节序列恢复为对象的过程\",{\"1\":{\"1225\":1}}],[\"反序列化\",{\"1\":{\"743\":1,\"1225\":1,\"1266\":1,\"3085\":1}}],[\"反射解析注解有性能开销\",{\"1\":{\"3169\":1}}],[\"反射解析注解的逻辑\",{\"1\":{\"3150\":1}}],[\"反射解析注解会带来性能开销\",{\"1\":{\"3150\":1}}],[\"反射行为在不同jdk版本中可能存在差异\",{\"1\":{\"3010\":1}}],[\"反射缓存优化\",{\"1\":{\"3010\":1}}],[\"反射提供了在运行时动态组合对象功能的能力\",{\"1\":{\"3009\":1}}],[\"反射使得框架可以在不修改自身代码的情况下支持新的用户类\",{\"1\":{\"3009\":1}}],[\"反射与动态代理\",{\"0\":{\"3004\":1}}],[\"反射与动态代理的关系是什么\",{\"0\":{\"1267\":1}}],[\"反射与注解结合\",{\"1\":{\"3009\":1}}],[\"反射与注解结合使用可以实现强大的元数据驱动编程\",{\"1\":{\"3001\":1}}],[\"反射与注解处理\",{\"0\":{\"3001\":1}}],[\"反射设置字段值或调用方法完成依赖注入\",{\"1\":{\"2999\":1}}],[\"反射实现依赖注入\",{\"1\":{\"2999\":1}}],[\"反射创建bean实例\",{\"1\":{\"2999\":2}}],[\"反射依赖类结构\",{\"1\":{\"2993\":1}}],[\"反射依赖于类结构\",{\"1\":{\"2974\":1}}],[\"反射依赖于类的结构\",{\"1\":{\"1277\":1}}],[\"反射允许框架控制对象的创建和依赖注入\",{\"1\":{\"3009\":1}}],[\"反射允许程序通过元数据\",{\"1\":{\"2992\":1}}],[\"反射允许基于接口而非具体实现进行编程\",{\"1\":{\"2973\":1}}],[\"反射操作\",{\"1\":{\"3011\":1}}],[\"反射操作审计\",{\"1\":{\"3010\":1}}],[\"反射操作预热\",{\"1\":{\"3010\":1}}],[\"反射操作的类名\",{\"1\":{\"2993\":1}}],[\"反射操作失败\",{\"1\":{\"2990\":1}}],[\"反射操作会绕过编译器的类型检查\",{\"1\":{\"1263\":1}}],[\"反射访问被拒绝\",{\"1\":{\"2990\":1}}],[\"反射访问私有成员可能会被阻止\",{\"1\":{\"2990\":1}}],[\"反射访问受限\",{\"1\":{\"490\":1}}],[\"反射中的访问控制\",{\"0\":{\"2988\":1}}],[\"反射获取类成员\",{\"1\":{\"2982\":1}}],[\"反射成员查找机制\",{\"0\":{\"2982\":1}}],[\"反射核心api\",{\"0\":{\"2966\":1}}],[\"反射机制常用于实现通用的序列化和反序列化功能\",{\"1\":{\"3006\":1}}],[\"反射机制作为java语言的重要特性\",{\"1\":{\"2996\":1}}],[\"反射机制的实践应用体现了以下重要设计思想\",{\"1\":{\"3009\":1}}],[\"反射机制的设计体现了以下重要思想\",{\"1\":{\"2992\":1}}],[\"反射机制的执行流程是java动态性的核心体现\",{\"1\":{\"2977\":1}}],[\"反射机制执行的流程\",{\"0\":{\"2976\":1}}],[\"反射机制体现了java的动态性和灵活性\",{\"1\":{\"2973\":1}}],[\"反射机制原理\",{\"0\":{\"2961\":1}}],[\"反射机制实现原理\",{\"0\":{\"1262\":1}}],[\"反射无法创建枚举实例\",{\"1\":{\"2825\":1}}],[\"反射在序列化与反序列化中的应用\",{\"0\":{\"3006\":1}}],[\"反射在框架设计中的应用\",{\"0\":{\"2998\":1}}],[\"反射在框架开发中有哪些应用\",{\"0\":{\"1266\":1}}],[\"反射在实践中的应用\",{\"0\":{\"2995\":1}}],[\"反射在动态代理中扮演关键角色\",{\"1\":{\"2994\":1}}],[\"反射在java模块化系统\",{\"0\":{\"1281\":1}}],[\"反射代码应做好异常处理\",{\"1\":{\"1277\":1}}],[\"反射代码可能会抛出异常\",{\"1\":{\"1277\":1,\"2974\":1}}],[\"反射可以访问私有成员\",{\"1\":{\"2974\":1}}],[\"反射可以访问和修改私有成员\",{\"1\":{\"1275\":1}}],[\"反射可以获取和修改类的属性值\",{\"1\":{\"2971\":1}}],[\"反射可以调用类的方法\",{\"1\":{\"2970\":1}}],[\"反射可能会受到限制\",{\"1\":{\"1275\":1}}],[\"反射体现了java语言的动态性和灵活性\",{\"1\":{\"1273\":1}}],[\"反射主要用于框架开发\",{\"1\":{\"1271\":1}}],[\"反射需要显式调用setaccessible\",{\"1\":{\"1271\":1}}],[\"反射需要在运行时解析类型信息\",{\"1\":{\"1264\":1}}],[\"反射并没有完全破坏封装性\",{\"1\":{\"1271\":1}}],[\"反射确实在一定程度上破坏了java的封装性\",{\"1\":{\"1271\":1}}],[\"反射常见面试题\",{\"0\":{\"1268\":1}}],[\"反射是否破坏了java的封装性\",{\"0\":{\"1271\":1}}],[\"反射是许多java框架的基础\",{\"1\":{\"1266\":1}}],[\"反射是java语言的一种强大特性\",{\"1\":{\"2962\":1}}],[\"反射是java语言的重要特性之一\",{\"1\":{\"1256\":1}}],[\"反射是java语言提供的一种能力\",{\"1\":{\"1259\":1}}],[\"反射的起点是class对象\",{\"1\":{\"2979\":1}}],[\"反射的基本操作\",{\"0\":{\"2967\":1}}],[\"反射的核心类与获取方式\",{\"0\":{\"2964\":1}}],[\"反射的设计也体现了\",{\"1\":{\"1273\":1}}],[\"反射的应用场景\",{\"0\":{\"1265\":1}}],[\"反射的底层实现机制是什么\",{\"0\":{\"1263\":1}}],[\"反射api主要包含以下几个核心类\",{\"1\":{\"1261\":1}}],[\"反射api主要包含哪些类\",{\"0\":{\"1261\":1}}],[\"反射基础概念辨析\",{\"0\":{\"1258\":1}}],[\"反射调用失败\",{\"1\":{\"2993\":1}}],[\"反射调用最终通过method\",{\"1\":{\"2987\":1}}],[\"反射调用需要\",{\"1\":{\"2986\":1}}],[\"反射调用需要进行安全检查和权限验证\",{\"1\":{\"1264\":1}}],[\"反射调用测试\",{\"1\":{\"2986\":1}}],[\"反射调用与直接调用的区别\",{\"0\":{\"2986\":1}}],[\"反射调用的字节码实现\",{\"0\":{\"2987\":1}}],[\"反射调用的底层实现\",{\"0\":{\"2985\":1}}],[\"反射调用的性能损耗\",{\"1\":{\"3150\":1}}],[\"反射调用的性能比直接调用差\",{\"1\":{\"1264\":1,\"1276\":1}}],[\"反射调用的性能为什么比直接调用差\",{\"0\":{\"1264\":1}}],[\"反射调用时捕获并处理nosuchmethodexception等异常\",{\"1\":{\"2974\":1}}],[\"反射调用比直接调用慢约10\",{\"1\":{\"2974\":1}}],[\"反射调用\",{\"1\":{\"1264\":2,\"2986\":6}}],[\"反射调用无法被jvm内联优化\",{\"1\":{\"1264\":1}}],[\"反射调用方法的底层实现与直接方法调用有显著差异\",{\"1\":{\"2985\":1}}],[\"反射调用方法\",{\"1\":{\"746\":1}}],[\"反射调用可能无法提供准确的npe消息\",{\"1\":{\"519\":1}}],[\"反射\",{\"0\":{\"1255\":1,\"3330\":1},\"1\":{\"743\":1}}],[\"反射等场景\",{\"1\":{\"719\":1}}],[\"反馈结果\",{\"1\":{\"270\":2}}],[\"反复同步\",{\"1\":{\"163\":1}}],[\"流量\",{\"1\":{\"3109\":1}}],[\"流量分析\",{\"1\":{\"3107\":1}}],[\"流量控制机制\",{\"0\":{\"3076\":1}}],[\"流量控制和拥塞控制等机制保证数据传输的可靠性\",{\"1\":{\"3061\":1}}],[\"流量控制和背压支持\",{\"1\":{\"1347\":1}}],[\"流量控制\",{\"1\":{\"1312\":1}}],[\"流类型\",{\"1\":{\"2909\":1}}],[\"流的组合\",{\"1\":{\"2889\":1}}],[\"流的关闭顺序\",{\"1\":{\"2896\":1}}],[\"流的关闭\",{\"1\":{\"2848\":1}}],[\"流结束\",{\"1\":{\"2873\":2}}],[\"流关闭\",{\"1\":{\"2861\":1}}],[\"流不支持mark和reset操作\",{\"1\":{\"2849\":1}}],[\"流支持mark和reset操作\",{\"1\":{\"2849\":1}}],[\"流资源需要显式释放\",{\"1\":{\"2847\":1}}],[\"流资源需要显式关闭\",{\"1\":{\"2835\":1}}],[\"流操作\",{\"1\":{\"2370\":1}}],[\"流处理\",{\"1\":{\"2358\":1}}],[\"流打印等方法\",{\"1\":{\"2209\":1}}],[\"流式处理\",{\"1\":{\"2913\":1}}],[\"流式数据源\",{\"1\":{\"278\":1}}],[\"流式输出\",{\"1\":{\"269\":1}}],[\"流程控制语句的使用使得代码更加清晰和可读\",{\"1\":{\"2136\":1}}],[\"流程控制语句简洁明了\",{\"1\":{\"2136\":1}}],[\"流程控制是java语言中用于控制程序执行流程的机制\",{\"1\":{\"2121\":1}}],[\"流程控制\",{\"0\":{\"2120\":1}}],[\"流程控制关键字\",{\"0\":{\"2078\":1,\"2809\":1}}],[\"流程与文化\",{\"1\":{\"2029\":1}}],[\"流程保障\",{\"1\":{\"2029\":1}}],[\"流程设计和文化建设\",{\"1\":{\"2029\":1}}],[\"流程和人员等方面\",{\"1\":{\"1972\":1}}],[\"流程和人员组成\",{\"1\":{\"1968\":1}}],[\"流程和上传snapshot步骤一致\",{\"1\":{\"1001\":1}}],[\"流程\",{\"1\":{\"995\":1,\"1971\":1}}],[\"流程更新\",{\"0\":{\"168\":1}}],[\"流程如下\",{\"1\":{\"165\":1}}],[\"工业验证\",{\"1\":{\"2357\":1}}],[\"工厂模式\",{\"0\":{\"1331\":1},\"1\":{\"1231\":1}}],[\"工单创建完成\",{\"1\":{\"992\":1}}],[\"工具组合策略\",{\"1\":{\"3111\":1}}],[\"工具选型\",{\"1\":{\"3110\":1}}],[\"工具链策略\",{\"1\":{\"2029\":1}}],[\"工具只是辅助\",{\"1\":{\"2028\":1}}],[\"工具集成配置\",{\"0\":{\"2018\":1}}],[\"工具\",{\"1\":{\"1968\":1,\"1971\":1,\"1972\":1}}],[\"工具包\",{\"1\":{\"1438\":1}}],[\"工具改进\",{\"0\":{\"478\":1}}],[\"工具类打印\",{\"1\":{\"2209\":1}}],[\"工具类springutil\",{\"0\":{\"290\":1}}],[\"工具类\",{\"1\":{\"286\":1,\"2763\":1}}],[\"工具类具有以下几个显著的优点\",{\"1\":{\"270\":1}}],[\"工具类模板\",{\"0\":{\"269\":1}}],[\"工作目录\",{\"1\":{\"3246\":1}}],[\"工作\",{\"1\":{\"1940\":1}}],[\"工作空间namespace\",{\"1\":{\"1685\":1}}],[\"工作中\",{\"1\":{\"610\":1}}],[\"工作流程\",{\"1\":{\"377\":1,\"1228\":1}}],[\"工作原理和最佳实践\",{\"1\":{\"969\":1}}],[\"工作原理\",{\"1\":{\"167\":1}}],[\"异步处理响应\",{\"1\":{\"3217\":1}}],[\"异步处理响应事件\",{\"1\":{\"3217\":1}}],[\"异步处理请求\",{\"1\":{\"3217\":1}}],[\"异步处理请求事件\",{\"1\":{\"3217\":1}}],[\"异步处理业务逻辑\",{\"0\":{\"1346\":1}}],[\"异步事件处理模型\",{\"0\":{\"3217\":1}}],[\"异步事件驱动的nio框架\",{\"1\":{\"3123\":1}}],[\"异步回调\",{\"1\":{\"3128\":1}}],[\"异步操作\",{\"1\":{\"3120\":2}}],[\"异步操作完成处理器\",{\"1\":{\"3120\":1}}],[\"异步serversocket通道\",{\"1\":{\"3120\":1}}],[\"异步socket通道\",{\"1\":{\"3120\":1}}],[\"异步编程模型\",{\"0\":{\"3119\":1}}],[\"异步编程模型及netty框架的实战应用\",{\"1\":{\"3113\":1}}],[\"异步通信\",{\"1\":{\"2010\":1}}],[\"异步复制主节点的数据\",{\"1\":{\"1764\":1}}],[\"异步请求\",{\"1\":{\"1444\":1}}],[\"异步请求示例\",{\"1\":{\"471\":1}}],[\"异步的\",{\"1\":{\"1430\":1,\"1436\":1}}],[\"异步\",{\"1\":{\"1319\":1,\"1432\":1,\"1436\":1}}],[\"异步消息处理\",{\"0\":{\"3240\":1},\"1\":{\"1238\":1}}],[\"异步数据库操作\",{\"1\":{\"1238\":1}}],[\"异步非阻塞事件处理机制\",{\"1\":{\"1378\":1}}],[\"异步非阻塞io\",{\"1\":{\"1316\":1}}],[\"异步非阻塞\",{\"1\":{\"1238\":1,\"3089\":1}}],[\"异步写入文件\",{\"1\":{\"1238\":1}}],[\"异步文件io示例\",{\"1\":{\"1238\":1}}],[\"异步io\",{\"0\":{\"3080\":1},\"1\":{\"1238\":1,\"3091\":1}}],[\"异步io模型\",{\"1\":{\"1111\":1}}],[\"异步保存数据到磁盘\",{\"1\":{\"207\":1}}],[\"异常传递机制\",{\"1\":{\"2960\":1}}],[\"异常应在错误发生时立即抛出\",{\"1\":{\"2949\":1}}],[\"异常应该准确反映问题本质\",{\"1\":{\"2947\":1}}],[\"异常应包含足够的上下文信息\",{\"1\":{\"2940\":1,\"2958\":1}}],[\"异常抑制\",{\"1\":{\"2942\":1}}],[\"异常缓存\",{\"1\":{\"2942\":1}}],[\"异常对象创建时\",{\"1\":{\"2942\":1}}],[\"异常匹配规则\",{\"1\":{\"2941\":1}}],[\"异常创建时的堆栈填充是昂贵操作\",{\"1\":{\"2941\":1}}],[\"异常创建的性能开销主要来自堆栈跟踪的生成\",{\"1\":{\"1250\":1}}],[\"异常聚合示例\",{\"1\":{\"2953\":1}}],[\"异常聚合模式\",{\"0\":{\"2953\":1}}],[\"异常聚合\",{\"1\":{\"2940\":1,\"2960\":1}}],[\"异常转换示例\",{\"1\":{\"2952\":1}}],[\"异常转换模式\",{\"0\":{\"2952\":1}}],[\"异常转换\",{\"1\":{\"2940\":1}}],[\"异常表包含以下信息\",{\"1\":{\"2935\":1}}],[\"异常信息不应包含敏感数据\",{\"1\":{\"2960\":1}}],[\"异常信息\",{\"1\":{\"2930\":1,\"2936\":1}}],[\"异常链示例\",{\"1\":{\"2937\":1}}],[\"异常链用于包装原始异常\",{\"1\":{\"2937\":1}}],[\"异常链传递\",{\"1\":{\"2933\":1}}],[\"异常链\",{\"0\":{\"2937\":1},\"1\":{\"2929\":1}}],[\"异常的产生者负责抛出准确的异常\",{\"1\":{\"2958\":1}}],[\"异常的产生者负责抛出异常\",{\"1\":{\"2940\":1}}],[\"异常的底层实现机制\",{\"0\":{\"2935\":1}}],[\"异常的基本使用\",{\"0\":{\"2927\":1}}],[\"异常的分类\",{\"0\":{\"2926\":1}}],[\"异常的抛出等\",{\"1\":{\"335\":1}}],[\"异常体系结构\",{\"0\":{\"2925\":1}}],[\"异常体系设计遵循了以下原则\",{\"1\":{\"2929\":1}}],[\"异常体系设计\",{\"0\":{\"2922\":1}}],[\"异常是程序运行过程中出现的意外情况\",{\"1\":{\"2923\":1}}],[\"异常消息包含具体金额信息\",{\"1\":{\"2947\":1}}],[\"异常消息应包含具体上下文信息\",{\"1\":{\"2947\":1}}],[\"异常消息\",{\"1\":{\"2439\":1}}],[\"异常日志必须包含完整堆栈信息\",{\"1\":{\"2071\":1}}],[\"异常日志分析\",{\"1\":{\"522\":1}}],[\"异常使用原则\",{\"0\":{\"2037\":1}}],[\"异常等\",{\"1\":{\"1945\":1}}],[\"异常类不能使用泛型参数\",{\"1\":{\"1291\":1}}],[\"异常类型和基本行为保持不变\",{\"1\":{\"509\":1}}],[\"异常不能是泛型\",{\"1\":{\"1291\":1}}],[\"异常吞噬\",{\"1\":{\"1253\":1}}],[\"异常沿调用链向上传递\",{\"1\":{\"1252\":1}}],[\"异常流程是正常流程的\",{\"1\":{\"1250\":1}}],[\"异常流程耗时\",{\"1\":{\"1250\":1}}],[\"异常\",{\"1\":{\"1243\":1,\"2737\":1}}],[\"异常与错误的区别\",{\"0\":{\"1243\":1}}],[\"异常基础概念辨析\",{\"0\":{\"1242\":1}}],[\"异常处理实用模式\",{\"0\":{\"2950\":1}}],[\"异常处理的设计思想主要基于以下几个核心概念\",{\"1\":{\"2958\":1}}],[\"异常处理的设计体现了以下重要思想\",{\"1\":{\"1252\":1}}],[\"异常处理的核心原则\",{\"0\":{\"2946\":1}}],[\"异常处理的核心设计思想包括\",{\"1\":{\"2940\":1}}],[\"异常处理代码的起始字节码索引\",{\"1\":{\"2935\":1}}],[\"异常处理基本示例\",{\"1\":{\"2927\":1}}],[\"异常处理问题\",{\"1\":{\"2908\":1}}],[\"异常处理机制\",{\"1\":{\"2901\":1}}],[\"异常处理机制深度解析\",{\"0\":{\"1245\":1}}],[\"异常处理关键字\",{\"0\":{\"2079\":1}}],[\"异常处理规范\",{\"0\":{\"2036\":1}}],[\"异常处理对性能的影响\",{\"0\":{\"1250\":1}}],[\"异常处理是java面试中的高频考点\",{\"1\":{\"1240\":1}}],[\"异常处理最佳实践是构建健壮java应用的关键环节\",{\"1\":{\"2944\":1}}],[\"异常处理最佳实践面试题\",{\"0\":{\"1248\":1}}],[\"异常处理最佳实践示例\",{\"1\":{\"1044\":1}}],[\"异常处理最佳实践\",{\"0\":{\"1044\":1,\"2943\":1},\"1\":{\"1044\":1}}],[\"异常处理需要特别注意\",{\"1\":{\"491\":1}}],[\"异常处理\",{\"0\":{\"429\":1,\"1239\":1,\"3329\":1},\"1\":{\"1046\":1,\"2809\":1,\"2836\":1,\"2848\":1,\"2861\":1,\"2872\":1,\"2884\":1,\"2896\":1,\"2935\":1,\"3069\":1}}],[\"异常处理等特性\",{\"1\":{\"425\":1}}],[\"异常通知\",{\"1\":{\"336\":1}}],[\"异常通知和最终通知\",{\"1\":{\"335\":1}}],[\"异常替换最后一步即可\",{\"1\":{\"267\":1}}],[\"⚠️在执行到这里的时候\",{\"1\":{\"264\":1}}],[\"管理sip连接资源\",{\"1\":{\"3241\":1}}],[\"管理sip事务的状态和超时重传机制\",{\"1\":{\"3204\":1}}],[\"管理手段\",{\"1\":{\"2029\":1}}],[\"管理用户会话的过期时间\",{\"1\":{\"2486\":1}}],[\"管理用户权限\",{\"1\":{\"1736\":1}}],[\"管理用户登录状态成本越来越高\",{\"1\":{\"304\":1}}],[\"管理员账户认证\",{\"1\":{\"1737\":1}}],[\"管理员\",{\"1\":{\"1687\":1,\"2903\":1}}],[\"管理员的权限\",{\"1\":{\"1573\":1}}],[\"管理\",{\"1\":{\"1365\":1,\"1968\":1,\"1970\":2,\"1979\":3,\"1981\":1,\"1983\":2,\"1985\":1,\"1992\":3}}],[\"管理线程的生命周期\",{\"1\":{\"621\":1}}],[\"管理线程生命周期\",{\"1\":{\"612\":1}}],[\"管理node版本可以使用n或nvm这两种工具\",{\"1\":{\"262\":1}}],[\"管道流\",{\"1\":{\"2897\":2}}],[\"管道技术特别适合于需要执行大量命令的场景\",{\"1\":{\"212\":1}}],[\"管道\",{\"1\":{\"125\":3}}],[\"全排列生成\",{\"1\":{\"2702\":1}}],[\"全部小写\",{\"1\":{\"2000\":1,\"2763\":1}}],[\"全部大写\",{\"1\":{\"1999\":1}}],[\"全不选\",{\"1\":{\"1467\":3}}],[\"全选\",{\"1\":{\"1467\":3}}],[\"全面测试\",{\"1\":{\"454\":1}}],[\"全局错误\",{\"1\":{\"3179\":1}}],[\"全局异常处理器\",{\"1\":{\"2956\":1}}],[\"全局可见\",{\"1\":{\"2733\":1,\"2798\":1,\"2807\":1}}],[\"全局唯一\",{\"1\":{\"2253\":1,\"3180\":1}}],[\"全局处理方式\",{\"1\":{\"282\":1}}],[\"全局处理\",{\"0\":{\"282\":1}}],[\"全局安装基于淘宝源的cnpm\",{\"1\":{\"261\":1}}],[\"全量复制\",{\"0\":{\"168\":1},\"1\":{\"167\":1}}],[\"全量复制等场景\",{\"1\":{\"138\":1}}],[\"​\",{\"1\":{\"245\":1,\"287\":1,\"304\":2,\"306\":2,\"993\":1,\"1000\":2,\"1004\":1,\"1432\":9,\"1440\":1,\"1501\":6,\"1504\":13,\"1581\":1,\"1582\":1,\"1584\":1,\"1734\":4,\"1771\":1,\"3262\":1}}],[\"宿主机\",{\"1\":{\"242\":1}}],[\"地址\",{\"1\":{\"2194\":1}}],[\"地址如下\",{\"1\":{\"237\":1}}],[\"地图展示和分析数据\",{\"1\":{\"1507\":1}}],[\"地震应急预案\",{\"1\":{\"294\":1}}],[\"地理位置\",{\"1\":{\"131\":1}}],[\"地理空间索引\",{\"1\":{\"68\":1}}],[\"官网\",{\"1\":{\"1446\":1,\"1448\":1,\"3261\":1}}],[\"官网下载链接\",{\"1\":{\"118\":1}}],[\"官方对此的定义\",{\"1\":{\"1558\":1}}],[\"官方监测能支持5万并发\",{\"1\":{\"1376\":1,\"1377\":1}}],[\"官方验证完后会邮件回复你\",{\"1\":{\"994\":1}}],[\"官方的版本同样也是不支持m1芯片的\",{\"1\":{\"233\":1}}],[\"租户容量信息表\",{\"1\":{\"232\":1,\"1684\":1}}],[\"租户字段\",{\"1\":{\"232\":4,\"1684\":4}}],[\"空行和消息体组成\",{\"1\":{\"3180\":1}}],[\"空行处理\",{\"1\":{\"2861\":1}}],[\"空的catch块会隐藏错误\",{\"1\":{\"2959\":1}}],[\"空的catch块会导致错误被掩盖\",{\"1\":{\"2930\":1}}],[\"空流处理\",{\"1\":{\"2896\":1}}],[\"空引用\",{\"1\":{\"2810\":1}}],[\"空元素异常\",{\"0\":{\"2584\":1}}],[\"空数组实例\",{\"1\":{\"2318\":1,\"2433\":1}}],[\"空数组但已初始化\",{\"1\":{\"2159\":1}}],[\"空语句块\",{\"1\":{\"2137\":1}}],[\"空catch块\",{\"1\":{\"1253\":1,\"2959\":1}}],[\"空处理\",{\"1\":{\"1250\":1}}],[\"空间换时间优化\",{\"1\":{\"2715\":1}}],[\"空间换时间\",{\"0\":{\"2715\":1},\"1\":{\"2871\":1}}],[\"空间开销更大\",{\"1\":{\"2484\":1}}],[\"空间开销\",{\"1\":{\"2484\":1}}],[\"空间预分配\",{\"1\":{\"2445\":1}}],[\"空间局部性\",{\"1\":{\"2334\":1}}],[\"空间浪费\",{\"1\":{\"2318\":1}}],[\"空间复杂度的数组反转\",{\"1\":{\"2727\":1}}],[\"空间复杂度用于衡量算法在执行过程中所需存储空间的增长趋势\",{\"1\":{\"2703\":1}}],[\"空间复杂度基础\",{\"0\":{\"2703\":1}}],[\"空间复杂度\",{\"1\":{\"2357\":2,\"2512\":1,\"2711\":2,\"2715\":1,\"2716\":1,\"2728\":1}}],[\"空间复杂度分析\",{\"1\":{\"1175\":1,\"2455\":1}}],[\"空间复杂度o\",{\"1\":{\"1161\":1,\"1164\":1,\"1166\":1}}],[\"空间分配担保\",{\"1\":{\"708\":1}}],[\"空包装类拆箱抛出npe\",{\"1\":{\"1040\":1}}],[\"空闲\",{\"1\":{\"1887\":1}}],[\"空闲的物理内存的大小\",{\"1\":{\"1887\":1}}],[\"空闲的内存数\",{\"1\":{\"1885\":1}}],[\"空闲内存\",{\"1\":{\"694\":2}}],[\"空闲线程存活时间\",{\"1\":{\"622\":1,\"625\":1,\"3082\":1}}],[\"空指针\",{\"1\":{\"1244\":1}}],[\"空指针异常\",{\"0\":{\"2159\":1},\"1\":{\"1169\":1,\"2104\":1}}],[\"空指针异常是java开发中最常见的错误之一\",{\"1\":{\"513\":1}}],[\"空指针的无效使用\",{\"1\":{\"125\":1}}],[\"空白包括空格\",{\"1\":{\"472\":1}}],[\"空字符表示整个集群\",{\"1\":{\"232\":1,\"1684\":1}}],[\"`filling`\",{\"1\":{\"1825\":1}}],[\"`fail\",{\"1\":{\"1687\":1}}],[\"`wangzy\",{\"1\":{\"1825\":1}}],[\"`1=slow\",{\"1\":{\"1739\":1}}],[\"``level``\",{\"1\":{\"1739\":1}}],[\"`lock\",{\"1\":{\"1687\":3}}],[\"`i\",{\"1\":{\"1687\":5}}],[\"`idx\",{\"1\":{\"232\":6,\"1684\":5}}],[\"`id`\",{\"1\":{\"232\":17,\"1684\":17,\"1687\":17}}],[\"`handle\",{\"1\":{\"1687\":4}}],[\"`his\",{\"1\":{\"232\":1,\"1684\":1}}],[\"`suc\",{\"1\":{\"1687\":1}}],[\"`schedule\",{\"1\":{\"1687\":4}}],[\"`src\",{\"1\":{\"232\":8,\"1684\":8}}],[\"`job\",{\"1\":{\"1687\":7}}],[\"`xxl\",{\"1\":{\"1687\":12}}],[\"`\",{\"1\":{\"1580\":1,\"1831\":4}}],[\"`并且可以有效解决动态网页存在的session共享问题`\",{\"1\":{\"1406\":1}}],[\"`alarm\",{\"1\":{\"1687\":3}}],[\"`author`\",{\"1\":{\"1687\":2}}],[\"`address\",{\"1\":{\"1687\":4}}],[\"`add\",{\"1\":{\"1687\":3}}],[\"`action`\",{\"1\":{\"232\":2}}],[\"`app\",{\"1\":{\"232\":5,\"1684\":5,\"1687\":2}}],[\"`registry\",{\"1\":{\"1687\":6}}],[\"`resource`\",{\"1\":{\"232\":2}}],[\"`running\",{\"1\":{\"1687\":1}}],[\"`rpm\",{\"1\":{\"1580\":1}}],[\"`role`\",{\"1\":{\"232\":4,\"1687\":2}}],[\"`roles`\",{\"1\":{\"232\":1}}],[\"`permission`\",{\"1\":{\"1687\":2}}],[\"`permissions`\",{\"1\":{\"232\":1}}],[\"`password`\",{\"1\":{\"232\":1,\"1687\":2}}],[\"`executor\",{\"1\":{\"1687\":17}}],[\"`enabled`\",{\"1\":{\"232\":1}}],[\"`effect`\",{\"1\":{\"232\":1,\"1684\":1}}],[\"`kp`\",{\"1\":{\"232\":2,\"1684\":2}}],[\"`op\",{\"1\":{\"232\":1,\"1684\":1}}],[\"`misfire\",{\"1\":{\"1687\":2}}],[\"`max\",{\"1\":{\"232\":8,\"1684\":8}}],[\"`md5`\",{\"1\":{\"232\":4,\"1684\":4}}],[\"`uname\",{\"1\":{\"3248\":2}}],[\"`update\",{\"1\":{\"1687\":7}}],[\"`username`\",{\"1\":{\"232\":3,\"1687\":3}}],[\"`users`\",{\"1\":{\"232\":1}}],[\"`usage`\",{\"1\":{\"232\":2,\"1684\":2}}],[\"`uk\",{\"1\":{\"232\":9,\"1684\":8}}],[\"`quota`\",{\"1\":{\"232\":2,\"1684\":2}}],[\"`nid`\",{\"1\":{\"232\":4,\"1684\":4}}],[\"`beta\",{\"1\":{\"232\":1,\"1684\":1}}],[\"`datum\",{\"1\":{\"232\":2,\"1684\":2}}],[\"`data\",{\"1\":{\"232\":11,\"1684\":11}}],[\"`title`\",{\"1\":{\"1687\":2}}],[\"`trigger\",{\"1\":{\"1687\":9}}],[\"`tag\",{\"1\":{\"232\":6,\"1684\":6}}],[\"`type`\",{\"1\":{\"232\":1,\"1684\":1}}],[\"`tenant\",{\"1\":{\"232\":20,\"1684\":20}}],[\"`columns`\",{\"1\":{\"1831\":1}}],[\"`content`\",{\"1\":{\"232\":5,\"1684\":5}}],[\"`config\",{\"1\":{\"232\":5,\"1684\":5}}],[\"`child\",{\"1\":{\"1687\":2}}],[\"`create\",{\"1\":{\"232\":1,\"1684\":1}}],[\"`c\",{\"1\":{\"232\":3,\"1684\":3}}],[\"`glue\",{\"1\":{\"1687\":11}}],[\"`gmt\",{\"1\":{\"232\":17,\"1684\":17}}],[\"`group\",{\"1\":{\"232\":13,\"1684\":13}}],[\"镜像获取\",{\"1\":{\"3246\":1}}],[\"镜像导入导出\",{\"0\":{\"3246\":1}}],[\"镜像名称\",{\"1\":{\"3246\":1}}],[\"镜像名\",{\"1\":{\"3245\":2,\"3246\":3}}],[\"镜像情况\",{\"1\":{\"2656\":1}}],[\"镜像重命名\",{\"0\":{\"1795\":1}}],[\"镜像源地址images\",{\"1\":{\"1688\":1,\"1698\":1,\"1713\":1}}],[\"镜像源地址image\",{\"1\":{\"1685\":1}}],[\"镜像不存在\",{\"0\":{\"1668\":1}}],[\"镜像id\",{\"1\":{\"1646\":1,\"1795\":2,\"1800\":1,\"3245\":2}}],[\"镜像推送至harbor时需要创建仓库名\",{\"1\":{\"1642\":1}}],[\"镜像加速\",{\"1\":{\"1621\":1,\"1753\":1}}],[\"镜像机制\",{\"1\":{\"987\":1}}],[\"镜像仓库名\",{\"1\":{\"1795\":1}}],[\"镜像仓库密码\",{\"1\":{\"1711\":1}}],[\"镜像仓库地址\",{\"1\":{\"1675\":1}}],[\"镜像仓库以及数据库即可\",{\"1\":{\"1647\":1}}],[\"镜像仓库ip和端口\",{\"1\":{\"1637\":1}}],[\"镜像仓库可以作为备份\",{\"1\":{\"989\":1}}],[\"镜像仓库可以分担原仓库的访问压力\",{\"1\":{\"989\":1}}],[\"镜像仓库通常位于本地或附近的网络中\",{\"1\":{\"989\":1}}],[\"镜像仓库是中央仓库的镜像\",{\"1\":{\"980\":1}}],[\"镜像仓库\",{\"0\":{\"980\":1}}],[\"镜像\",{\"0\":{\"218\":1,\"221\":1},\"1\":{\"3245\":2}}],[\"汇总\",{\"0\":{\"213\":1,\"1565\":1,\"1566\":1}}],[\"汇报slave自己的复制偏移量\",{\"1\":{\"169\":1}}],[\"监听点和消息工厂\",{\"1\":{\"3190\":1}}],[\"监听器\",{\"1\":{\"3106\":1}}],[\"监听器和回调泄漏\",{\"1\":{\"781\":1}}],[\"监听channel的就绪事件\",{\"1\":{\"3079\":1}}],[\"监听客户端连接\",{\"1\":{\"3065\":1}}],[\"监听指定端口\",{\"1\":{\"3065\":1,\"3066\":1}}],[\"监听某个端口号\",{\"1\":{\"1877\":1}}],[\"监听80端口\",{\"1\":{\"1417\":1}}],[\"监听443端口\",{\"1\":{\"1417\":1}}],[\"监听端口\",{\"1\":{\"3125\":1}}],[\"监听端口8080\",{\"1\":{\"2916\":1,\"2921\":1,\"3118\":1,\"3120\":1}}],[\"监听端口8888\",{\"1\":{\"1228\":1,\"1238\":1}}],[\"监听端口号为80直接跳转到真实ip服务器地址\",{\"1\":{\"1390\":1}}],[\"监听端口号为8080\",{\"1\":{\"1390\":1}}],[\"监听端口号为80\",{\"1\":{\"1389\":2}}],[\"监视\",{\"1\":{\"807\":1,\"841\":1,\"875\":1,\"909\":1}}],[\"监视器锁规则\",{\"1\":{\"656\":1}}],[\"监视键\",{\"1\":{\"206\":1}}],[\"监控数据集中收集\",{\"1\":{\"3111\":1}}],[\"监控金字塔\",{\"1\":{\"3109\":1}}],[\"监控gc情况\",{\"1\":{\"3100\":1}}],[\"监控jvm统计信息\",{\"1\":{\"3100\":1}}],[\"监控jvm内存使用情况\",{\"1\":{\"784\":1}}],[\"监控网络接口流量\",{\"1\":{\"3099\":1}}],[\"监控与管理系统\",{\"1\":{\"3228\":1}}],[\"监控与运维\",{\"1\":{\"1347\":1}}],[\"监控与调优\",{\"1\":{\"1113\":1,\"3091\":1,\"3228\":1}}],[\"监控多个channel的事件\",{\"1\":{\"1315\":1}}],[\"监控分析\",{\"1\":{\"818\":1,\"852\":1,\"886\":1,\"920\":1}}],[\"监控元空间使用\",{\"1\":{\"719\":1}}],[\"监控访问量\",{\"1\":{\"191\":1}}],[\"监控redis服务器性能指标\",{\"1\":{\"190\":1}}],[\"监控master和slave\",{\"1\":{\"177\":1}}],[\"监控mongodb的内存使用情况\",{\"1\":{\"94\":1}}],[\"监控\",{\"0\":{\"180\":1},\"1\":{\"177\":1,\"179\":1,\"3110\":1}}],[\"监控主从节点延迟\",{\"1\":{\"173\":1}}],[\"取第一个route头域作为下一跳\",{\"1\":{\"3212\":1}}],[\"取样器\",{\"1\":{\"3106\":1}}],[\"取模赋值\",{\"1\":{\"2113\":1}}],[\"取模\",{\"1\":{\"2109\":1}}],[\"取代\",{\"1\":{\"1491\":1}}],[\"取值可以是\",{\"1\":{\"1433\":1,\"1434\":1,\"1435\":1,\"1436\":2}}],[\"取决于原始集合\",{\"1\":{\"2358\":1}}],[\"取决于具体业务场景和实现约定\",{\"1\":{\"306\":1}}],[\"取决于\",{\"1\":{\"306\":1}}],[\"取消未完成的请求\",{\"1\":{\"3179\":1}}],[\"取消分段锁\",{\"1\":{\"2527\":1,\"2541\":1}}],[\"取消segment分段锁\",{\"1\":{\"2416\":1}}],[\"取消定时器\",{\"1\":{\"1470\":2}}],[\"取消监视\",{\"1\":{\"206\":1}}],[\"取消事务\",{\"1\":{\"206\":1}}],[\"取而代之\",{\"1\":{\"125\":1}}],[\"哈希依赖\",{\"1\":{\"2666\":1}}],[\"哈希值\",{\"1\":{\"2599\":1}}],[\"哈希冲突解决策略\",{\"0\":{\"2608\":1}}],[\"哈希冲突\",{\"0\":{\"2385\":1,\"2422\":1}}],[\"哈希表查找\",{\"1\":{\"2702\":1}}],[\"哈希表负责快速查找\",{\"1\":{\"2637\":1}}],[\"哈希表数据结构\",{\"0\":{\"2607\":1}}],[\"哈希表会退化为链表\",{\"1\":{\"2385\":1}}],[\"哈希表设计\",{\"0\":{\"2376\":1,\"2413\":1}}],[\"哈希表+双向链表\",{\"1\":{\"2363\":1,\"2400\":1}}],[\"哈希表\",{\"1\":{\"2363\":1,\"2607\":1,\"2634\":1,\"2717\":1}}],[\"哈希表的键\",{\"1\":{\"2307\":1}}],[\"哈希码可缓存\",{\"1\":{\"2207\":1}}],[\"哈希码缓存\",{\"1\":{\"2192\":1,\"2289\":1,\"2300\":1}}],[\"哈希稳定\",{\"1\":{\"2207\":1}}],[\"哈希计算与索引定位\",{\"0\":{\"2599\":1}}],[\"哈希计算公式\",{\"1\":{\"2295\":1}}],[\"哈希计算\",{\"1\":{\"1196\":1,\"2616\":1}}],[\"哈希函数\",{\"1\":{\"1181\":1}}],[\"哈希字段值递增\",{\"1\":{\"201\":1}}],[\"哈希命令\",{\"0\":{\"201\":1}}],[\"哈希索引\",{\"1\":{\"68\":1}}],[\"递归搜索父类的公有方法\",{\"1\":{\"2983\":1}}],[\"递归过深会导致stackoverflowerror\",{\"1\":{\"2724\":1}}],[\"递归算法虽然简洁\",{\"1\":{\"2724\":1}}],[\"递归算法复杂度分析\",{\"0\":{\"2711\":1}}],[\"递归调用风险\",{\"1\":{\"2789\":1}}],[\"递归调用栈溢出风险\",{\"0\":{\"2724\":1}}],[\"递归调用栈深度\",{\"1\":{\"2711\":1}}],[\"递归调用次数\",{\"1\":{\"693\":1}}],[\"递归处理\",{\"1\":{\"2234\":1}}],[\"递归获取依赖的bean\",{\"1\":{\"2999\":1}}],[\"递归获取\",{\"1\":{\"1326\":1}}],[\"递归方式\",{\"1\":{\"1164\":1}}],[\"递归反转\",{\"1\":{\"1164\":1}}],[\"递减数值\",{\"1\":{\"200\":1}}],[\"递增数值\",{\"1\":{\"200\":1}}],[\"毫秒\",{\"1\":{\"199\":2,\"2327\":2,\"2866\":1}}],[\"<k>\",{\"1\":{\"2632\":1}}],[\"<v>\",{\"1\":{\"2632\":1}}],[\"<violationseverity>error<\",{\"1\":{\"2018\":1}}],[\"<version>8\",{\"1\":{\"1564\":2}}],[\"<version>5\",{\"1\":{\"924\":1,\"936\":1,\"938\":1,\"953\":1,\"954\":1,\"963\":1}}],[\"<version>1\",{\"1\":{\"584\":1,\"926\":1,\"928\":1,\"936\":1,\"957\":1,\"999\":3,\"1003\":2,\"1016\":1}}],[\"<version>0\",{\"1\":{\"456\":1,\"711\":1}}],[\"<version>28\",{\"1\":{\"567\":1}}],[\"<version>2\",{\"1\":{\"394\":1,\"999\":2,\"1003\":1,\"1005\":1,\"1017\":1,\"1018\":1,\"3097\":1}}],[\"<version>3\",{\"1\":{\"307\":1,\"936\":1,\"941\":1,\"956\":1,\"2018\":1,\"3147\":1}}],[\"<version>4\",{\"1\":{\"281\":1,\"584\":1}}],[\"<命令>\",{\"1\":{\"1846\":1}}],[\"<<>>\",{\"1\":{\"3282\":2}}],[\"<<=\",{\"1\":{\"2113\":1}}],[\"<<\",{\"1\":{\"1615\":1,\"1675\":1,\"1746\":1,\"2112\":1,\"2272\":1,\"2295\":1,\"2601\":2,\"3086\":3}}],[\"<<eof\",{\"1\":{\"1610\":2,\"3273\":1}}],[\"<jmxconfigurator\",{\"1\":{\"1564\":1}}],[\"<javadocexecutable>\",{\"1\":{\"999\":1,\"1005\":1}}],[\"<javac\",{\"1\":{\"583\":1}}],[\"<option\",{\"1\":{\"1459\":1,\"1464\":2}}],[\"<option>专科<\",{\"1\":{\"1459\":1}}],[\"<option>=<value>\",{\"1\":{\"790\":1,\"824\":1,\"858\":1,\"892\":1}}],[\"<option>\",{\"1\":{\"790\":1,\"824\":1,\"858\":1,\"892\":1,\"1459\":1,\"1464\":1}}],[\"<hr>\",{\"1\":{\"1443\":1,\"1444\":1}}],[\"<head>\",{\"1\":{\"1431\":1,\"1433\":1,\"1434\":1,\"1435\":1,\"1440\":1,\"1447\":1,\"1450\":1,\"1455\":1,\"1456\":1,\"1457\":1,\"1458\":1,\"1459\":1,\"1461\":1,\"1462\":1,\"1463\":1,\"1464\":1,\"1467\":1,\"1469\":1}}],[\"<html><body><h1>hello\",{\"1\":{\"2921\":1}}],[\"<html\",{\"1\":{\"1431\":1,\"1433\":1,\"1434\":1,\"1435\":1,\"1440\":1,\"1447\":1,\"1450\":1,\"1455\":1,\"1456\":1,\"1457\":1,\"1458\":1,\"1459\":1,\"1461\":1,\"1462\":1,\"1463\":1,\"1464\":1,\"1467\":1,\"1469\":1}}],[\"<h1>hello\",{\"1\":{\"1324\":1,\"3070\":1}}],[\"<failonviolation>true<\",{\"1\":{\"2018\":1}}],[\"<filenamepattern>logs\",{\"1\":{\"2072\":1}}],[\"<filenamepattern>\",{\"1\":{\"1564\":1}}],[\"<file>logs\",{\"1\":{\"2072\":1}}],[\"<file>\",{\"1\":{\"796\":1,\"830\":1,\"864\":1,\"898\":1}}],[\"<form\",{\"1\":{\"1431\":1,\"1433\":1,\"1434\":1,\"1435\":1,\"1440\":1}}],[\"<font\",{\"1\":{\"1431\":2}}],[\"<b>我真的是div<\",{\"1\":{\"1461\":1}}],[\"<br\",{\"1\":{\"1440\":1}}],[\"<br><br>\",{\"1\":{\"1464\":2}}],[\"<br><br><br>\",{\"1\":{\"1462\":2,\"1463\":1}}],[\"<br>\",{\"1\":{\"1431\":2,\"1433\":2,\"1434\":2,\"1435\":2,\"1450\":1,\"1464\":3}}],[\"<body>\",{\"1\":{\"1431\":1,\"1433\":1,\"1434\":1,\"1435\":1,\"1440\":1,\"1447\":1,\"1450\":1,\"1455\":1,\"1456\":1,\"1457\":1,\"1458\":1,\"1459\":1,\"1461\":1,\"1462\":1,\"1463\":1,\"1464\":1,\"1467\":1,\"1469\":1}}],[\"<bean\",{\"1\":{\"1266\":1}}],[\"<build>\",{\"1\":{\"936\":1,\"941\":1,\"999\":1,\"3147\":1}}],[\"<=\",{\"1\":{\"1044\":1,\"1161\":2,\"1162\":6,\"1164\":1,\"1203\":1,\"1253\":1,\"1949\":1,\"2110\":1,\"2158\":2,\"2272\":1,\"2291\":2,\"2466\":1,\"2494\":1,\"2512\":1,\"2709\":1,\"2710\":1,\"2711\":1,\"2716\":2,\"2724\":1,\"2727\":1,\"2733\":1,\"2750\":1,\"2947\":1,\"3000\":1}}],[\"<dbname>\",{\"1\":{\"1813\":1}}],[\"<dbport>\",{\"1\":{\"1813\":1}}],[\"<dbhost>\",{\"1\":{\"1813\":1}}],[\"<div>div4<\",{\"1\":{\"1458\":1}}],[\"<div>div3<\",{\"1\":{\"1458\":1}}],[\"<div>div1<\",{\"1\":{\"1458\":1}}],[\"<div><\",{\"1\":{\"1456\":1}}],[\"<div>\",{\"1\":{\"1440\":1,\"1456\":1}}],[\"<div\",{\"1\":{\"1440\":2,\"1443\":1,\"1444\":1,\"1447\":1,\"1455\":3,\"1458\":1,\"1461\":1,\"1462\":1,\"1463\":1,\"1469\":2}}],[\"<distributionmanagement>\",{\"1\":{\"999\":1}}],[\"<developerconnection>scm\",{\"1\":{\"999\":1}}],[\"<developer>\",{\"1\":{\"999\":1}}],[\"<developers>\",{\"1\":{\"999\":1}}],[\"<description>data\",{\"1\":{\"999\":1}}],[\"<delete\",{\"1\":{\"439\":1}}],[\"<dependencymanagement>\",{\"1\":{\"567\":1,\"954\":1,\"963\":1,\"1017\":1}}],[\"<dependency>\",{\"1\":{\"281\":1,\"307\":1,\"394\":2,\"416\":2,\"428\":1,\"438\":2,\"439\":2,\"440\":2,\"449\":1,\"451\":1,\"456\":1,\"567\":1,\"584\":1,\"711\":1,\"924\":1,\"926\":1,\"928\":1,\"936\":1,\"938\":1,\"953\":1,\"954\":1,\"963\":2,\"1016\":1,\"1017\":1,\"1018\":1,\"1564\":2,\"3097\":1,\"3104\":1}}],[\"<dependencies>\",{\"1\":{\"394\":1,\"567\":1,\"584\":1,\"936\":1,\"938\":1,\"954\":1,\"963\":2,\"999\":1,\"1017\":1}}],[\"<root\",{\"1\":{\"1564\":1,\"3102\":1}}],[\"<rollingpolicy\",{\"1\":{\"1564\":1,\"2072\":1}}],[\"<role>architect<\",{\"1\":{\"999\":1}}],[\"<role>project\",{\"1\":{\"999\":1}}],[\"<roles>\",{\"1\":{\"999\":1}}],[\"<result\",{\"1\":{\"3053\":4}}],[\"<resultmap\",{\"1\":{\"3053\":2}}],[\"<releaseprofiles>release<\",{\"1\":{\"1003\":1}}],[\"<releases>\",{\"1\":{\"984\":1,\"985\":1}}],[\"<repository>\",{\"1\":{\"984\":1,\"985\":1,\"999\":1}}],[\"<repositories>\",{\"1\":{\"984\":1,\"985\":1}}],[\"<requests\",{\"1\":{\"193\":1}}],[\"<level\",{\"1\":{\"1564\":1}}],[\"<logger\",{\"1\":{\"1564\":1,\"3102\":3}}],[\"<localrepository>\",{\"1\":{\"973\":1}}],[\"<layout\",{\"1\":{\"1564\":3}}],[\"<li\",{\"1\":{\"1462\":6}}],[\"<li>\",{\"1\":{\"1443\":1,\"1444\":1}}],[\"<license>\",{\"1\":{\"999\":1}}],[\"<licenses>\",{\"1\":{\"999\":1}}],[\"<goal>check<\",{\"1\":{\"2018\":1}}],[\"<goal>sign<\",{\"1\":{\"999\":1}}],[\"<goal>jar<\",{\"1\":{\"999\":1,\"1005\":1}}],[\"<goal>jar\",{\"1\":{\"999\":1}}],[\"<goals>deploy<\",{\"1\":{\"1003\":1}}],[\"<goals>\",{\"1\":{\"999\":3,\"1005\":1,\"2018\":1}}],[\"<github\",{\"1\":{\"999\":1}}],[\"<gpg\",{\"1\":{\"998\":3}}],[\"<groupid>conflicting\",{\"1\":{\"1016\":1,\"1017\":1,\"1018\":1}}],[\"<groupid>commons\",{\"1\":{\"953\":1}}],[\"<groupid>com\",{\"1\":{\"307\":1,\"567\":1,\"584\":1,\"926\":1,\"928\":2,\"936\":1,\"1016\":1}}],[\"<groupid>junit<\",{\"1\":{\"584\":1}}],[\"<groupid>io\",{\"1\":{\"456\":1,\"999\":1,\"3097\":1}}],[\"<groupid>mysql<\",{\"1\":{\"438\":1,\"439\":1,\"440\":1}}],[\"<groupid>org\",{\"1\":{\"281\":1,\"394\":3,\"416\":3,\"428\":1,\"438\":1,\"439\":1,\"440\":1,\"449\":1,\"451\":1,\"711\":1,\"924\":1,\"936\":2,\"938\":1,\"941\":1,\"953\":1,\"954\":1,\"956\":1,\"957\":1,\"963\":2,\"999\":4,\"1003\":2,\"1005\":1,\"1564\":2,\"2018\":1,\"3104\":1,\"3147\":1}}],[\"<annotationprocessor>com\",{\"1\":{\"3147\":1}}],[\"<annotationprocessors>\",{\"1\":{\"3147\":1}}],[\"<appender\",{\"1\":{\"1564\":8,\"2072\":1,\"3102\":2}}],[\"<a\",{\"1\":{\"1443\":1,\"1444\":1}}],[\"<autoversionsubmodules>true<\",{\"1\":{\"1003\":1}}],[\"<autoreleaseafterclose>true<\",{\"1\":{\"999\":1,\"1003\":1}}],[\"<additionalparam>\",{\"1\":{\"999\":1,\"1005\":1}}],[\"<activebydefault>true<\",{\"1\":{\"998\":1,\"999\":1}}],[\"<activation>\",{\"1\":{\"998\":1,\"999\":1}}],[\"<artifactid>netty\",{\"1\":{\"3097\":1}}],[\"<artifactid>nexus\",{\"1\":{\"999\":1,\"1003\":1}}],[\"<artifactid>apm\",{\"1\":{\"1564\":2}}],[\"<artifactid>auto\",{\"1\":{\"999\":1}}],[\"<artifactid>example<\",{\"1\":{\"1016\":1}}],[\"<artifactid>maven\",{\"1\":{\"936\":1,\"941\":1,\"956\":1,\"957\":1,\"999\":3,\"1003\":1,\"1005\":1,\"2018\":1,\"3147\":1}}],[\"<artifactid>mysql\",{\"1\":{\"438\":1,\"439\":1,\"440\":1}}],[\"<artifactid>conflicting\",{\"1\":{\"1016\":1,\"1017\":1,\"1018\":1}}],[\"<artifactid>commons\",{\"1\":{\"281\":1,\"953\":1}}],[\"<artifactid>c<\",{\"1\":{\"928\":1}}],[\"<artifactid>b<\",{\"1\":{\"926\":1,\"928\":1}}],[\"<artifactid>demo<\",{\"1\":{\"584\":1,\"936\":1}}],[\"<artifactid>guava<\",{\"1\":{\"567\":1}}],[\"<artifactid>jol\",{\"1\":{\"711\":1}}],[\"<artifactid>junit<\",{\"1\":{\"584\":1}}],[\"<artifactid>jjwt<\",{\"1\":{\"456\":1}}],[\"<artifactid>java\",{\"1\":{\"307\":1}}],[\"<artifactid>spring\",{\"1\":{\"394\":3,\"416\":3,\"428\":1,\"438\":1,\"439\":1,\"440\":1,\"449\":1,\"451\":1,\"924\":1,\"936\":1,\"938\":1,\"953\":1,\"954\":1,\"963\":2,\"3104\":1}}],[\"<xxxxx\",{\"1\":{\"997\":2}}],[\"<none>\",{\"1\":{\"1660\":9,\"3273\":2}}],[\"<nodename>\",{\"1\":{\"1659\":1}}],[\"<node版本号>\",{\"1\":{\"264\":1}}],[\"<nexusurl>https\",{\"1\":{\"999\":1,\"1003\":1}}],[\"<name>qingfeng<\",{\"1\":{\"999\":1}}],[\"<name>the\",{\"1\":{\"999\":1}}],[\"<name>auto\",{\"1\":{\"999\":1}}],[\"<name>aliyun\",{\"1\":{\"981\":1}}],[\"<name>snapshots\",{\"1\":{\"985\":1}}],[\"<name>central\",{\"1\":{\"984\":1}}],[\"<id\",{\"1\":{\"3053\":1}}],[\"<id>release<\",{\"1\":{\"1002\":1,\"1003\":1}}],[\"<id>sign\",{\"1\":{\"999\":1}}],[\"<id>snapshots<\",{\"1\":{\"985\":1}}],[\"<id>attach\",{\"1\":{\"999\":2,\"1005\":1}}],[\"<id>aliyun<\",{\"1\":{\"981\":1}}],[\"<id>qingfeng<\",{\"1\":{\"999\":1}}],[\"<id>ossrh<\",{\"1\":{\"998\":2,\"999\":3}}],[\"<id>central<\",{\"1\":{\"984\":1}}],[\"<img\",{\"1\":{\"1440\":1,\"1469\":2}}],[\"<input\",{\"1\":{\"1431\":3,\"1433\":3,\"1434\":3,\"1435\":3,\"1440\":2,\"1450\":2,\"1457\":3,\"1459\":6,\"1461\":2,\"1462\":7,\"1463\":5,\"1464\":7,\"1467\":3,\"1469\":2}}],[\"<init>\",{\"1\":{\"728\":3}}],[\"<insert\",{\"1\":{\"439\":1}}],[\"<container\",{\"1\":{\"3245\":2}}],[\"<configlocation>checkstyle\",{\"1\":{\"2018\":1}}],[\"<configuration>\",{\"1\":{\"941\":1,\"956\":1,\"957\":1,\"999\":2,\"1003\":2,\"1005\":2,\"1564\":1,\"2018\":1,\"3102\":1,\"3147\":1}}],[\"<connection>https\",{\"1\":{\"999\":1}}],[\"<cachedirectory>$\",{\"1\":{\"957\":1}}],[\"<ul\",{\"1\":{\"1462\":2}}],[\"<url>http\",{\"1\":{\"999\":1}}],[\"<url>https\",{\"1\":{\"981\":1,\"984\":1,\"985\":1,\"999\":4}}],[\"<usereleaseprofile>false<\",{\"1\":{\"1003\":1}}],[\"<username>xxxx\",{\"1\":{\"998\":1}}],[\"<useincrementalcompilation>true<\",{\"1\":{\"956\":1}}],[\"<update\",{\"1\":{\"439\":1}}],[\"<execution>\",{\"1\":{\"999\":3,\"1005\":1,\"2018\":1}}],[\"<executions>\",{\"1\":{\"999\":3,\"1005\":1,\"2018\":1}}],[\"<extensions>true<\",{\"1\":{\"999\":1,\"1003\":1}}],[\"<exclusion>\",{\"1\":{\"416\":1,\"928\":1,\"953\":1,\"1016\":1}}],[\"<exclusions>\",{\"1\":{\"416\":1,\"928\":1,\"953\":1,\"1016\":1}}],[\"<email>xxxx\",{\"1\":{\"999\":1}}],[\"<encoder>\",{\"1\":{\"2072\":1,\"3102\":1}}],[\"<encoder\",{\"1\":{\"1564\":3}}],[\"<encoding>utf\",{\"1\":{\"956\":1}}],[\"<enabled>false<\",{\"1\":{\"984\":1,\"985\":1}}],[\"<enabled>true<\",{\"1\":{\"984\":1,\"985\":1}}],[\"<maxhistory>30<\",{\"1\":{\"2072\":1}}],[\"<maxhistory>15<\",{\"1\":{\"1564\":1}}],[\"<maxfilesize>100mb<\",{\"1\":{\"1564\":1}}],[\"<mapper\",{\"1\":{\"439\":1}}],[\"<meta\",{\"1\":{\"1431\":1,\"1433\":1,\"1434\":1,\"1435\":1,\"1440\":1,\"1447\":2,\"1450\":2,\"1455\":2,\"1456\":2,\"1457\":2,\"1458\":2,\"1459\":2,\"1461\":2,\"1462\":2,\"1463\":2,\"1464\":2,\"1467\":2,\"1469\":2}}],[\"<mirrorof>central<\",{\"1\":{\"981\":1}}],[\"<mirror>\",{\"1\":{\"981\":1}}],[\"<mirrors>\",{\"1\":{\"981\":1}}],[\"<module\",{\"1\":{\"2042\":2}}],[\"<module>module3<\",{\"1\":{\"962\":1}}],[\"<module>module2<\",{\"1\":{\"962\":1}}],[\"<module>module1<\",{\"1\":{\"962\":1}}],[\"<modules>\",{\"1\":{\"962\":1}}],[\"<modelversion>4\",{\"1\":{\"584\":1,\"936\":1}}],[\"<mkdir\",{\"1\":{\"583\":1}}],[\"<t\",{\"1\":{\"3025\":2}}],[\"<totalsizecap>5gb<\",{\"1\":{\"1564\":1}}],[\"<td>家居饰品类商品<\",{\"1\":{\"1467\":1}}],[\"<td>家居饰品<\",{\"1\":{\"1467\":1}}],[\"<td>4<\",{\"1\":{\"1467\":1}}],[\"<td>鞋靴箱包类商品<\",{\"1\":{\"1467\":1}}],[\"<td>鞋靴箱包<\",{\"1\":{\"1467\":1}}],[\"<td>3<\",{\"1\":{\"1467\":1}}],[\"<td>电脑办公类商品<\",{\"1\":{\"1467\":1}}],[\"<td>电脑办公<\",{\"1\":{\"1467\":1}}],[\"<td>2<\",{\"1\":{\"1467\":1}}],[\"<td><a\",{\"1\":{\"1467\":4}}],[\"<td><input\",{\"1\":{\"1467\":4}}],[\"<td>手机数码类商品<\",{\"1\":{\"1467\":1}}],[\"<td>手机数码<\",{\"1\":{\"1467\":1}}],[\"<td>1<\",{\"1\":{\"1467\":1}}],[\"<th>操作<\",{\"1\":{\"1467\":1}}],[\"<th>分类描述<\",{\"1\":{\"1467\":1}}],[\"<th>分类名称<\",{\"1\":{\"1467\":1}}],[\"<th>分类id<\",{\"1\":{\"1467\":1}}],[\"<th\",{\"1\":{\"1467\":1}}],[\"<tr>\",{\"1\":{\"1467\":5}}],[\"<table\",{\"1\":{\"1467\":1}}],[\"<target>1\",{\"1\":{\"941\":1,\"956\":1}}],[\"<target\",{\"1\":{\"583\":1}}],[\"<title>随机图片<\",{\"1\":{\"1469\":1}}],[\"<title>复选框<\",{\"1\":{\"1467\":1}}],[\"<title>操作属性<\",{\"1\":{\"1464\":1}}],[\"<title>操作样式<\",{\"1\":{\"1463\":1}}],[\"<title>操作对象<\",{\"1\":{\"1462\":1}}],[\"<title>操作文本<\",{\"1\":{\"1461\":1}}],[\"<title>表单属性选择器<\",{\"1\":{\"1459\":1}}],[\"<title>过滤器选择器<\",{\"1\":{\"1458\":1}}],[\"<title>属性选择器<\",{\"1\":{\"1457\":1}}],[\"<title>层级选择器<\",{\"1\":{\"1456\":1}}],[\"<title>基本选择器<\",{\"1\":{\"1455\":1}}],[\"<title>事件的使用<\",{\"1\":{\"1450\":1}}],[\"<title>快速入门<\",{\"1\":{\"1447\":1}}],[\"<title>用户搜索<\",{\"1\":{\"1440\":1}}],[\"<title>用户注册<\",{\"1\":{\"1431\":1,\"1433\":1,\"1434\":1,\"1435\":1}}],[\"<timezone>+8<\",{\"1\":{\"999\":1}}],[\"<t>clazz\",{\"1\":{\"279\":1}}],[\"<t>\",{\"1\":{\"269\":2,\"276\":1,\"279\":1,\"283\":2,\"290\":2,\"1287\":1,\"1294\":1,\"1295\":1,\"1296\":1,\"1303\":1,\"2228\":2,\"2314\":1,\"3000\":1,\"3002\":1,\"3003\":1,\"3005\":1,\"3007\":1,\"3023\":2,\"3024\":2,\"3087\":1}}],[\"<s\",{\"1\":{\"3050\":1}}],[\"<string\",{\"1\":{\"2408\":1}}],[\"<style>\",{\"1\":{\"1463\":1}}],[\"<style\",{\"1\":{\"1440\":1}}],[\"<slowms>\",{\"1\":{\"1739\":1}}],[\"<span>span<\",{\"1\":{\"1462\":1}}],[\"<span>s2<\",{\"1\":{\"1456\":1}}],[\"<span>s1\",{\"1\":{\"1456\":3}}],[\"<span\",{\"1\":{\"1431\":1,\"1433\":1,\"1434\":1,\"1435\":1}}],[\"<sip\",{\"1\":{\"1092\":3,\"3180\":3}}],[\"<snapshotrepository>\",{\"1\":{\"999\":1}}],[\"<snapshots>\",{\"1\":{\"984\":1,\"985\":1}}],[\"<script\",{\"1\":{\"1433\":1,\"1434\":1,\"1435\":1,\"1440\":1,\"1447\":1,\"1450\":1,\"1455\":1,\"1456\":1,\"1457\":1,\"1458\":1,\"1459\":1,\"1461\":1,\"1462\":1,\"1463\":1,\"1464\":1,\"1467\":1,\"1469\":1}}],[\"<script>\",{\"1\":{\"1431\":1,\"1433\":1,\"1434\":1,\"1435\":1,\"1440\":1,\"1443\":1,\"1444\":1,\"1447\":1,\"1450\":1,\"1455\":1,\"1456\":1,\"1457\":1,\"1458\":1,\"1459\":1,\"1461\":1,\"1462\":1,\"1463\":1,\"1464\":1,\"1467\":1,\"1469\":1}}],[\"<scm>\",{\"1\":{\"999\":1}}],[\"<scope>compile<\",{\"1\":{\"938\":1}}],[\"<scope>test<\",{\"1\":{\"394\":1,\"449\":1,\"584\":1}}],[\"<serverid>ossrh<\",{\"1\":{\"999\":1,\"1003\":1}}],[\"<server>\",{\"1\":{\"998\":1}}],[\"<servers>\",{\"1\":{\"998\":1}}],[\"<settings>\",{\"1\":{\"973\":1,\"981\":1}}],[\"<select>\",{\"1\":{\"1459\":1,\"1464\":1}}],[\"<select\",{\"1\":{\"439\":2}}],[\"<source>1\",{\"1\":{\"941\":1,\"956\":1}}],[\"<phase>validate<\",{\"1\":{\"2018\":1}}],[\"<phase>verify<\",{\"1\":{\"999\":1}}],[\"<property\",{\"1\":{\"1564\":1,\"2042\":3}}],[\"<properties>\",{\"1\":{\"998\":1,\"999\":1,\"1005\":1}}],[\"<profile>\",{\"1\":{\"998\":1,\"999\":1}}],[\"<profiles>\",{\"1\":{\"998\":1,\"999\":1}}],[\"<project>\",{\"1\":{\"936\":1}}],[\"<project\",{\"1\":{\"583\":1,\"584\":1,\"999\":1,\"1005\":1}}],[\"<path>\",{\"1\":{\"1813\":1}}],[\"<pattern>\",{\"1\":{\"1564\":1,\"2072\":1,\"3102\":1}}],[\"<pattern>$\",{\"1\":{\"1564\":2}}],[\"<password>填你注册sonatype时填写的密码<\",{\"1\":{\"998\":1}}],[\"<parent>\",{\"1\":{\"394\":1}}],[\"<plugin>\",{\"1\":{\"936\":1,\"941\":1,\"956\":1,\"957\":1,\"999\":4,\"1003\":2,\"1005\":1,\"2018\":1,\"3147\":1}}],[\"<plugins>\",{\"1\":{\"936\":1,\"941\":1,\"999\":1,\"3147\":1}}],[\"<pid>\",{\"1\":{\"480\":1,\"802\":1,\"836\":1,\"870\":1,\"904\":1,\"3096\":2,\"3099\":1,\"3100\":3}}],[\"<p>p2<\",{\"1\":{\"1456\":1}}],[\"<p>p1<\",{\"1\":{\"1456\":1}}],[\"<p>request\",{\"1\":{\"1324\":1,\"2921\":1}}],[\"<p>\",{\"1\":{\"289\":1}}],[\"<\",{\"1\":{\"281\":1,\"284\":2,\"286\":2,\"307\":1,\"394\":4,\"416\":6,\"428\":1,\"438\":3,\"439\":11,\"440\":3,\"449\":2,\"451\":2,\"456\":2,\"567\":4,\"583\":3,\"584\":4,\"625\":1,\"626\":1,\"675\":1,\"677\":2,\"711\":1,\"773\":1,\"924\":1,\"926\":3,\"928\":3,\"936\":9,\"938\":3,\"941\":4,\"949\":1,\"953\":3,\"954\":3,\"956\":3,\"957\":2,\"962\":2,\"963\":7,\"973\":1,\"981\":3,\"984\":5,\"985\":5,\"998\":9,\"999\":49,\"1002\":1,\"1003\":9,\"1005\":9,\"1016\":3,\"1017\":3,\"1018\":1,\"1041\":2,\"1043\":4,\"1056\":3,\"1095\":1,\"1123\":2,\"1150\":1,\"1151\":1,\"1160\":2,\"1161\":3,\"1164\":1,\"1165\":3,\"1166\":2,\"1170\":3,\"1179\":2,\"1181\":1,\"1186\":1,\"1224\":1,\"1232\":1,\"1238\":2,\"1250\":2,\"1264\":3,\"1280\":2,\"1295\":2,\"1312\":4,\"1324\":1,\"1326\":1,\"1337\":1,\"1431\":6,\"1433\":6,\"1434\":6,\"1435\":6,\"1440\":11,\"1443\":5,\"1444\":5,\"1447\":6,\"1450\":5,\"1453\":2,\"1455\":5,\"1456\":7,\"1457\":5,\"1458\":5,\"1459\":7,\"1461\":5,\"1462\":7,\"1463\":6,\"1464\":7,\"1467\":12,\"1469\":10,\"1564\":23,\"1641\":1,\"1656\":13,\"1711\":13,\"1798\":2,\"1877\":1,\"2018\":6,\"2042\":2,\"2072\":5,\"2078\":6,\"2110\":1,\"2114\":1,\"2128\":1,\"2129\":1,\"2130\":1,\"2132\":1,\"2133\":1,\"2134\":1,\"2147\":1,\"2158\":1,\"2161\":1,\"2170\":2,\"2173\":2,\"2174\":2,\"2181\":4,\"2183\":3,\"2202\":2,\"2207\":1,\"2212\":2,\"2214\":3,\"2228\":2,\"2234\":1,\"2269\":1,\"2272\":3,\"2276\":3,\"2280\":2,\"2291\":2,\"2295\":1,\"2296\":2,\"2311\":2,\"2318\":1,\"2325\":1,\"2327\":8,\"2328\":2,\"2329\":1,\"2341\":1,\"2348\":1,\"2409\":3,\"2438\":2,\"2439\":1,\"2440\":3,\"2441\":1,\"2449\":3,\"2450\":1,\"2452\":2,\"2466\":2,\"2495\":3,\"2498\":1,\"2505\":1,\"2522\":2,\"2524\":2,\"2536\":1,\"2571\":1,\"2601\":4,\"2604\":1,\"2655\":3,\"2684\":1,\"2707\":2,\"2708\":1,\"2709\":2,\"2710\":1,\"2715\":1,\"2721\":1,\"2727\":1,\"2868\":1,\"2873\":2,\"2897\":1,\"2921\":1,\"2942\":1,\"2947\":1,\"2986\":2,\"3002\":1,\"3003\":2,\"3005\":1,\"3007\":1,\"3053\":4,\"3070\":1,\"3086\":3,\"3097\":2,\"3102\":6,\"3104\":2,\"3147\":5,\"3208\":3}}],[\"<版本号>\",{\"1\":{\"265\":1}}],[\"<2>设置只保留30天的binlog\",{\"1\":{\"113\":1}}],[\"响应处理\",{\"1\":{\"3198\":1}}],[\"响应模型\",{\"1\":{\"3198\":1}}],[\"响应模型和文本格式\",{\"1\":{\"3176\":1}}],[\"响应消息\",{\"1\":{\"3179\":1,\"3205\":1}}],[\"响应消息包含状态码\",{\"1\":{\"1092\":1}}],[\"响应时间分布\",{\"1\":{\"3111\":1}}],[\"响应时间\",{\"1\":{\"3106\":1}}],[\"响应时间短的优先分配\",{\"1\":{\"1407\":1}}],[\"响应及补救\",{\"1\":{\"1738\":1}}],[\"响应到客户端\",{\"1\":{\"1440\":1}}],[\"响应数据形式\",{\"1\":{\"1433\":1,\"1434\":1,\"1440\":1,\"1443\":1,\"1444\":1}}],[\"响应已全部\",{\"1\":{\"1432\":1}}],[\"响应客户端\",{\"1\":{\"1228\":1,\"1238\":1}}],[\"响应式编程\",{\"1\":{\"571\":1}}],[\"响应体\",{\"1\":{\"471\":1}}],[\"响应结果\",{\"1\":{\"292\":1}}],[\"响应头\",{\"1\":{\"275\":1}}],[\"响应\",{\"1\":{\"267\":1,\"377\":1,\"3070\":1}}],[\"响应请求的平均时间\",{\"1\":{\"193\":1}}],[\"响应慢的out\",{\"1\":{\"182\":1}}],[\"警惕分布式事务陷阱\",{\"1\":{\"2013\":1}}],[\"警惕反射和动态代理场景\",{\"0\":{\"519\":1}}],[\"警报解除后尽快移除\",{\"1\":{\"192\":1}}],[\"警告\",{\"1\":{\"125\":2}}],[\"驳回数据访问\",{\"1\":{\"192\":1}}],[\"运算符的优先级是指在表达式中\",{\"1\":{\"2119\":1}}],[\"运算符的使用使得代码更加简洁和可读\",{\"1\":{\"2117\":1}}],[\"运算符的含义和用法保持一致\",{\"1\":{\"2117\":1}}],[\"运算符符号简洁明了\",{\"1\":{\"2117\":1}}],[\"运算符是java语言中用于执行操作的特殊符号\",{\"1\":{\"2107\":1}}],[\"运算符\",{\"0\":{\"2106\":1},\"1\":{\"2310\":1}}],[\"运算符两侧各保留一个空格\",{\"1\":{\"2032\":1}}],[\"运用了epoll模型\",{\"1\":{\"1378\":1}}],[\"运营\",{\"1\":{\"192\":1}}],[\"运行环境\",{\"1\":{\"3246\":1}}],[\"运行一些linux命令安装软件\",{\"1\":{\"3246\":1}}],[\"运行指令\",{\"1\":{\"3245\":1}}],[\"运行在虚拟机里的一个个app\",{\"1\":{\"3245\":1}}],[\"运行jar包\",{\"0\":{\"1895\":1}}],[\"运行中\",{\"1\":{\"1687\":1}}],[\"运行部署\",{\"0\":{\"1710\":1},\"1\":{\"1655\":1}}],[\"运行流水线会报错\",{\"1\":{\"1654\":1,\"1704\":1}}],[\"运行脚本后\",{\"1\":{\"1635\":1}}],[\"运行访问ui控制台\",{\"1\":{\"1563\":1}}],[\"运行logstash\",{\"0\":{\"1526\":1}}],[\"运行kibana\",{\"0\":{\"1518\":1}}],[\"运行elasticsearch\",{\"0\":{\"1512\":1}}],[\"运行以下命令以创建kibana密钥库并添加配置\",{\"1\":{\"1358\":1}}],[\"运行期确定\",{\"1\":{\"2965\":1}}],[\"运行期拼接\",{\"1\":{\"2249\":1,\"2304\":1}}],[\"运行期再次使用\",{\"1\":{\"2243\":1}}],[\"运行期首次使用\",{\"1\":{\"2243\":1}}],[\"运行期\",{\"1\":{\"1288\":1,\"2243\":1}}],[\"运行用户代码时间+垃圾收集时间\",{\"1\":{\"769\":1}}],[\"运行用户代码时间\",{\"1\":{\"769\":1}}],[\"运行时性能\",{\"1\":{\"3169\":1}}],[\"运行时保留的注解\",{\"1\":{\"3149\":1}}],[\"运行时处理或生成文档\",{\"1\":{\"3132\":1}}],[\"运行时泛型类型信息已擦除\",{\"1\":{\"3035\":1}}],[\"运行时无法通过getclass\",{\"1\":{\"3035\":1}}],[\"运行时无法获取泛型类型信息\",{\"1\":{\"3035\":1}}],[\"运行时验证方法参数类型\",{\"1\":{\"2986\":1}}],[\"运行时抛出classcastexception\",{\"1\":{\"1301\":1,\"1303\":1,\"3017\":1}}],[\"运行时不会报错\",{\"1\":{\"1301\":1}}],[\"运行时类型判断失效\",{\"1\":{\"1291\":1}}],[\"运行时解析需使用runtime保留策略\",{\"1\":{\"1077\":1}}],[\"运行时\",{\"1\":{\"1064\":1,\"3135\":1}}],[\"运行时异常\",{\"1\":{\"1055\":1,\"2926\":1}}],[\"运行时需要\",{\"1\":{\"925\":1,\"938\":1}}],[\"运行时由容器提供\",{\"1\":{\"925\":1,\"938\":1}}],[\"运行时常量池\",{\"1\":{\"707\":1}}],[\"运行时数据区\",{\"1\":{\"690\":1}}],[\"运行命令\",{\"1\":{\"694\":1}}],[\"运行文件\",{\"1\":{\"250\":1}}],[\"运行\",{\"0\":{\"222\":1,\"239\":1},\"1\":{\"605\":1,\"1687\":1}}],[\"运行容器\",{\"0\":{\"219\":1},\"1\":{\"1576\":1,\"1577\":1,\"1578\":1}}],[\"运行id在每台服务器启动时自动生成的\",{\"1\":{\"167\":1}}],[\"运行id被用于在服务器间进行传输\",{\"1\":{\"167\":1}}],[\"运行id由40位字符组成\",{\"1\":{\"167\":1}}],[\"运行从实例时不能执行该操作\",{\"1\":{\"125\":1}}],[\"运行mysql\",{\"1\":{\"116\":1}}],[\"白名单策略\",{\"1\":{\"192\":1}}],[\"毕竟单个key的过\",{\"1\":{\"191\":1}}],[\"据库服务器造成压力\",{\"1\":{\"191\":1}}],[\"购物节不仅仅指当天\",{\"1\":{\"191\":1}}],[\"均使用头域传递附加信息\",{\"1\":{\"3198\":1}}],[\"均使用文本格式的消息\",{\"1\":{\"3198\":1}}],[\"均支持uri标识资源\",{\"1\":{\"3198\":1}}],[\"均为应用层协议\",{\"1\":{\"3198\":1}}],[\"均为arraylist\",{\"1\":{\"3035\":1}}],[\"均能保证分摊时间复杂度为o\",{\"1\":{\"2455\":1}}],[\"均继承自abstractstringbuilder抽象类\",{\"1\":{\"2261\":1}}],[\"均衡数据库负载\",{\"1\":{\"1760\":1}}],[\"均否\",{\"1\":{\"1174\":2}}],[\"均未命中\",{\"1\":{\"191\":1}}],[\"均占用cpu\",{\"1\":{\"151\":1}}],[\"约0\",{\"1\":{\"2455\":1}}],[\"约15\",{\"1\":{\"2099\":1}}],[\"约6\",{\"1\":{\"2099\":1}}],[\"约定\",{\"1\":{\"2671\":1}}],[\"约定优于配置\",{\"0\":{\"1074\":1},\"1\":{\"943\":1,\"1028\":1,\"1074\":1,\"3139\":1,\"3168\":1}}],[\"约定大于配置\",{\"1\":{\"389\":1,\"396\":1,\"421\":1}}],[\"约40\",{\"1\":{\"190\":1}}],[\"约5\",{\"1\":{\"160\":1}}],[\"加权轮询\",{\"1\":{\"3086\":1}}],[\"加强了封装性\",{\"1\":{\"2994\":1}}],[\"加法赋值\",{\"1\":{\"2113\":1}}],[\"加法\",{\"1\":{\"2109\":1}}],[\"加密算法\",{\"1\":{\"2119\":1}}],[\"加密密码\",{\"1\":{\"2068\":1}}],[\"加密等功能\",{\"1\":{\"1333\":1}}],[\"加上一句\",{\"1\":{\"1907\":1}}],[\"加上端口跟踪\",{\"1\":{\"1879\":1}}],[\"加上开启验证功能配置\",{\"0\":{\"1352\":1}}],[\"加上i是防止要下载的文件有重名的导致下载失败\",{\"1\":{\"286\":1}}],[\"加深对并发原理的理解\",{\"1\":{\"1119\":1}}],[\"加载信任库\",{\"1\":{\"3214\":1}}],[\"加载密钥库\",{\"1\":{\"3214\":1,\"3237\":1}}],[\"加载因子\",{\"1\":{\"2627\":1}}],[\"加载因子和排序模式\",{\"1\":{\"2627\":1}}],[\"加载动图隐藏\",{\"1\":{\"1443\":1}}],[\"加载动图显示\",{\"1\":{\"1443\":1}}],[\"加载数据\",{\"1\":{\"1253\":2}}],[\"加载自定义类\",{\"1\":{\"746\":1}}],[\"加载应用程序classpath下的类\",{\"1\":{\"742\":1}}],[\"加载jre扩展目录\",{\"1\":{\"742\":1}}],[\"加载jre核心类库\",{\"1\":{\"742\":1}}],[\"加载\",{\"1\":{\"741\":1,\"2760\":1}}],[\"加载类过多\",{\"1\":{\"702\":1}}],[\"加载后进行bean的创建\",{\"1\":{\"463\":1}}],[\"加载这个配置类\",{\"1\":{\"463\":1}}],[\"加载指定类注册到ioc容器中\",{\"1\":{\"418\":1,\"462\":1}}],[\"加载配置类文件加载bean\",{\"1\":{\"418\":1,\"462\":1}}],[\"加载成功则返回true顺利创建bean\",{\"1\":{\"415\":1,\"459\":1}}],[\"加载时织入等\",{\"1\":{\"344\":1}}],[\"加载异常数据时直接拦截\",{\"1\":{\"192\":1}}],[\"加大此类信息key的过期时长\",{\"1\":{\"191\":1}}],[\"加锁后对象布局\",{\"1\":{\"711\":1}}],[\"加锁\",{\"1\":{\"190\":1,\"191\":1,\"2416\":1}}],[\"加入一个已存在的swarm集群\",{\"1\":{\"3250\":1}}],[\"加入该行代码\",{\"1\":{\"1788\":1}}],[\"加入新节点node2配置\",{\"1\":{\"1658\":1}}],[\"加入验证逻辑\",{\"1\":{\"1203\":1}}],[\"加入cluster节点\",{\"1\":{\"186\":1}}],[\"加入数据的最低存储要求\",{\"1\":{\"156\":1}}],[\"做什么\",{\"1\":{\"550\":1}}],[\"做热点数据的延时\",{\"1\":{\"190\":1}}],[\"做笔记并不是目的\",{\"1\":{\"0\":1}}],[\"落地实践\",{\"1\":{\"190\":1}}],[\"降序排序后\",{\"1\":{\"2326\":1}}],[\"降序\",{\"1\":{\"2326\":1,\"2371\":1,\"2408\":1}}],[\"降级等机制提高系统容错能力\",{\"1\":{\"3089\":1}}],[\"降级\",{\"0\":{\"1496\":1},\"1\":{\"190\":1}}],[\"降低耦合\",{\"1\":{\"3089\":1}}],[\"降低耦合度\",{\"1\":{\"2973\":1}}],[\"降低系统复杂度\",{\"1\":{\"3068\":1}}],[\"降低组件间耦合\",{\"1\":{\"2800\":1}}],[\"降低性能\",{\"1\":{\"2696\":1}}],[\"降低中断影响\",{\"1\":{\"1116\":1}}],[\"降低对外部仓库的依赖\",{\"1\":{\"989\":1}}],[\"降低网络开销\",{\"1\":{\"989\":1}}],[\"降低了学习和使用门槛\",{\"1\":{\"1098\":1}}],[\"降低了学习成本\",{\"1\":{\"945\":1}}],[\"降低了维护成本\",{\"1\":{\"1030\":1}}],[\"降低了内存碎片\",{\"1\":{\"713\":1}}],[\"降低了系统架构复杂度\",{\"1\":{\"304\":1}}],[\"降低应用服务器压力\",{\"1\":{\"190\":1}}],[\"降低单台服务器宕机带来的业务灾难\",{\"1\":{\"184\":1}}],[\"降低丢失数据的量\",{\"1\":{\"142\":1}}],[\"降低数据恢复用时\",{\"1\":{\"140\":1}}],[\"降低持久化写时间\",{\"1\":{\"140\":1}}],[\"降低磁盘占用量\",{\"1\":{\"140\":1}}],[\"降低区分数据是否改变的难度\",{\"1\":{\"139\":1}}],[\"灾难预警机制\",{\"1\":{\"190\":1}}],[\"灾难恢复选用rdb\",{\"1\":{\"142\":1}}],[\"思想的重要实现\",{\"1\":{\"1074\":1}}],[\"思想\",{\"1\":{\"1071\":1,\"3152\":1}}],[\"思路\",{\"1\":{\"190\":1,\"459\":1,\"1504\":1,\"1576\":1,\"1641\":1}}],[\"思考题5\",{\"0\":{\"2358\":1,\"2395\":1}}],[\"思考题4\",{\"0\":{\"2357\":1,\"2394\":1,\"2429\":1,\"2486\":1,\"2544\":1}}],[\"思考题参考答案\",{\"0\":{\"2161\":1,\"2183\":1,\"2207\":1,\"2234\":1,\"2282\":1}}],[\"思考题3\",{\"0\":{\"1198\":1,\"1281\":1,\"2356\":1,\"2393\":1,\"2428\":1,\"2456\":1,\"2485\":1,\"2513\":1,\"2543\":1,\"2698\":1,\"2728\":1,\"2754\":1,\"2780\":1},\"1\":{\"1170\":1,\"2085\":1,\"2095\":1,\"2105\":1,\"2119\":1,\"2138\":1}}],[\"思考题2回答\",{\"1\":{\"1254\":1,\"2975\":1,\"2994\":1,\"3011\":1}}],[\"思考题2\",{\"0\":{\"495\":1,\"522\":1,\"557\":1,\"571\":1,\"1059\":1,\"1087\":1,\"1197\":1,\"1280\":1,\"2355\":1,\"2392\":1,\"2427\":1,\"2455\":1,\"2484\":1,\"2512\":1,\"2542\":1,\"2697\":1,\"2727\":1,\"2753\":1,\"2779\":1,\"3199\":1,\"3228\":1},\"1\":{\"1170\":1,\"1238\":1,\"1254\":1,\"1347\":1,\"2085\":1,\"2095\":1,\"2105\":1,\"2119\":1,\"2138\":1,\"2837\":1,\"2849\":1,\"2861\":1,\"2873\":1,\"2885\":1,\"2897\":1,\"2909\":1,\"2921\":1,\"2975\":1,\"2994\":1,\"3011\":1,\"3070\":1,\"3091\":1,\"3111\":1,\"3130\":1}}],[\"思考题1回答\",{\"1\":{\"1254\":1,\"2975\":1,\"2994\":1,\"3011\":1}}],[\"思考题1\",{\"0\":{\"494\":1,\"521\":1,\"556\":1,\"570\":1,\"1058\":1,\"1086\":1,\"1196\":1,\"1279\":1,\"2354\":1,\"2391\":1,\"2426\":1,\"2454\":1,\"2483\":1,\"2511\":1,\"2541\":1,\"2696\":1,\"2726\":1,\"2752\":1,\"3198\":1,\"3227\":1},\"1\":{\"1170\":1,\"1238\":1,\"1254\":1,\"1347\":1,\"2085\":1,\"2095\":1,\"2105\":1,\"2119\":1,\"2138\":1,\"2837\":1,\"2849\":1,\"2861\":1,\"2873\":1,\"2885\":1,\"2897\":1,\"2909\":1,\"2921\":1,\"2975\":1,\"2994\":1,\"3011\":1,\"3070\":1,\"3091\":1,\"3111\":1,\"3130\":1}}],[\"思考题\",{\"0\":{\"1305\":1},\"1\":{\"398\":2,\"411\":2,\"423\":2,\"434\":2,\"445\":2,\"456\":2,\"533\":1,\"932\":2,\"945\":2,\"967\":2,\"989\":2,\"1030\":2,\"1139\":2,\"1155\":2,\"1216\":3,\"2931\":1,\"2942\":1,\"2960\":1,\"3141\":1,\"3154\":1,\"3170\":1}}],[\"思考题回答\",{\"0\":{\"1306\":1},\"1\":{\"317\":2,\"331\":2,\"344\":2,\"359\":2,\"373\":2,\"387\":2,\"533\":1,\"602\":1,\"618\":1,\"634\":1,\"651\":1,\"668\":1,\"686\":1,\"703\":1,\"720\":1,\"738\":1,\"756\":1,\"784\":1,\"818\":1,\"852\":1,\"886\":1,\"920\":1,\"1058\":1,\"1059\":1,\"1110\":1,\"1114\":1,\"1139\":2,\"1155\":2,\"1170\":3,\"1196\":1,\"1197\":1,\"1198\":1,\"1279\":1,\"1280\":1,\"1281\":1,\"1347\":2,\"1953\":2,\"1966\":2,\"1979\":2,\"1992\":2,\"2354\":1,\"2355\":1,\"2356\":1,\"2357\":1,\"2358\":1,\"2391\":1,\"2392\":1,\"2393\":1,\"2394\":1,\"2395\":1,\"2426\":1,\"2427\":1,\"2428\":1,\"2429\":1,\"2454\":1,\"2455\":1,\"2456\":1,\"2483\":1,\"2484\":1,\"2485\":1,\"2486\":1,\"2511\":1,\"2512\":1,\"2513\":1,\"2541\":1,\"2542\":1,\"2543\":1,\"2544\":1,\"2564\":1,\"2588\":1,\"2616\":1,\"2643\":1,\"2672\":1,\"2696\":1,\"2697\":1,\"2698\":1,\"2726\":1,\"2727\":1,\"2728\":1,\"2837\":2,\"2849\":2,\"2861\":2,\"2873\":2,\"2885\":2,\"2897\":2,\"2909\":2,\"2921\":2,\"2931\":1,\"2942\":1,\"2960\":1,\"3070\":2,\"3091\":2,\"3111\":2,\"3130\":2,\"3141\":1,\"3154\":1,\"3170\":1}}],[\"思考一下\",{\"1\":{\"304\":1}}],[\"思考\",{\"1\":{\"114\":1,\"458\":1,\"459\":1,\"461\":2}}],[\"客户反复刷新页面获取数据\",{\"1\":{\"190\":1}}],[\"客户端向服务器发送的消息\",{\"1\":{\"3179\":1}}],[\"客户端设置\",{\"1\":{\"3069\":1}}],[\"客户端代码\",{\"1\":{\"3065\":1}}],[\"客户端已连接\",{\"1\":{\"3065\":1}}],[\"客户端自动与服务器同步数据\",{\"1\":{\"1504\":1}}],[\"客户端的端口\",{\"1\":{\"1412\":1}}],[\"客户端的ip地址\",{\"1\":{\"1412\":1}}],[\"客户端cookie信息\",{\"1\":{\"1412\":1}}],[\"客户端agent信息\",{\"1\":{\"1412\":1}}],[\"客户端收到syn+ack包后\",{\"1\":{\"3070\":1}}],[\"客户端收到syn+ack包\",{\"1\":{\"1311\":1}}],[\"客户端断开连接\",{\"1\":{\"1228\":1,\"1314\":1,\"1315\":3,\"3118\":1}}],[\"客户端关闭连接\",{\"1\":{\"1228\":1,\"2916\":1,\"3118\":1}}],[\"客户端请求的动作\",{\"1\":{\"1412\":1}}],[\"客户端请求\",{\"1\":{\"377\":1}}],[\"客户端可以将该token放在header里\",{\"1\":{\"306\":1}}],[\"客户端使用凭据计算响应值\",{\"1\":{\"3215\":1}}],[\"客户端使用新的\",{\"1\":{\"306\":1}}],[\"客户端使用用户名密码进行认证\",{\"1\":{\"306\":1}}],[\"客户端访问需要认证的接口时\",{\"1\":{\"306\":1}}],[\"客户端还需维护cookie\",{\"1\":{\"304\":1}}],[\"客户端body大小限制\",{\"1\":{\"216\":1}}],[\"客户端\",{\"1\":{\"177\":1,\"3111\":1,\"3124\":1,\"3208\":1,\"3228\":1}}],[\"客户端发送exit时断开连接\",{\"1\":{\"1314\":1,\"1315\":1}}],[\"客户端发送syn包\",{\"1\":{\"1311\":1,\"3070\":1}}],[\"客户端发送命令\",{\"1\":{\"165\":1}}],[\"客户端发出bgsave指令给到redis服务器\",{\"1\":{\"138\":1}}],[\"客户端不应该依赖它不需要的接口\",{\"1\":{\"2772\":1}}],[\"客户端不应该被迫实现它不需要的接口\",{\"1\":{\"1211\":1}}],[\"客户端不应依赖不需要的接口\",{\"1\":{\"2005\":1}}],[\"客户端不能创建\",{\"1\":{\"125\":1}}],[\"客户端不能创建请求事件\",{\"1\":{\"125\":1}}],[\"客户端不能获得文件映射的指针\",{\"1\":{\"125\":1}}],[\"客户端不能分配文件映射\",{\"1\":{\"125\":1}}],[\"客户端不支持服务器请求的鉴定协议\",{\"1\":{\"125\":1}}],[\"客户端版本=\",{\"1\":{\"125\":1}}],[\"客户端错误\",{\"1\":{\"3179\":1}}],[\"客户端错误信息来自下述源文件\",{\"1\":{\"125\":1}}],[\"客户端错误代码和消息\",{\"1\":{\"125\":1}}],[\"客户端连接\",{\"1\":{\"3065\":1}}],[\"客户端连接服务器端需要提供的私钥文件\",{\"1\":{\"115\":1}}],[\"客户端连接服务器端需要提供的证书文件\",{\"1\":{\"115\":1}}],[\"客户端连接也需要提供\",{\"1\":{\"115\":1}}],[\"忽视封装\",{\"1\":{\"1215\":1}}],[\"忽然数据库连接量激增\",{\"1\":{\"190\":1}}],[\"忽略不存在的字段\",{\"1\":{\"3000\":1}}],[\"忽略常数因子\",{\"0\":{\"2720\":1}}],[\"忽略常数因子和低阶项\",{\"1\":{\"2701\":1}}],[\"忽略既是一直采集\",{\"1\":{\"1887\":1}}],[\"忽略错误\",{\"1\":{\"1503\":2}}],[\"忽略关闭异常\",{\"1\":{\"1326\":1}}],[\"忽略string\",{\"1\":{\"1169\":1}}],[\"忽略大小写比较\",{\"1\":{\"2194\":1}}],[\"忽略大小写可加\",{\"1\":{\"1771\":1}}],[\"忽略大小写\",{\"1\":{\"1165\":1,\"2194\":1}}],[\"忽略大小写和非字母字符\",{\"1\":{\"1165\":1}}],[\"忽略非标准javadoc注释\",{\"1\":{\"999\":1,\"1005\":1}}],[\"忽略测试\",{\"1\":{\"966\":1}}],[\"忽略gc日志\",{\"0\":{\"816\":1,\"850\":1,\"884\":1,\"918\":1}}],[\"忽略异常处理\",{\"0\":{\"1337\":1},\"1\":{\"553\":1}}],[\"忽略一个没有solt的节点\",{\"1\":{\"186\":1}}],[\"忽略\",{\"1\":{\"167\":1}}],[\"先确定数据结构类型\",{\"1\":{\"2542\":1}}],[\"先确定行\",{\"1\":{\"2167\":1}}],[\"先比较引用\",{\"1\":{\"2294\":1}}],[\"先判断null\",{\"1\":{\"2205\":1}}],[\"先执行循环体\",{\"1\":{\"2138\":1}}],[\"先计算a\",{\"1\":{\"2115\":1}}],[\"先将file\",{\"1\":{\"1869\":1}}],[\"先将b服务关闭再将a服务关闭\",{\"1\":{\"1368\":1}}],[\"先看链接中的指引\",{\"1\":{\"1642\":1}}],[\"先新建一个脚本文件\",{\"1\":{\"1504\":1}}],[\"先校验一下配置文件是否正确\",{\"1\":{\"1417\":1}}],[\"先访问到一个转发服务器\",{\"1\":{\"1403\":1}}],[\"先进入官网找到下载地址下载redis安装包\",{\"1\":{\"1781\":1}}],[\"先进先出\",{\"1\":{\"1174\":1,\"2459\":1,\"2643\":1}}],[\"先进行兼容性测试\",{\"1\":{\"566\":1}}],[\"先监控\",{\"1\":{\"815\":1,\"849\":1,\"883\":1,\"917\":1}}],[\"先获取\",{\"1\":{\"415\":1,\"459\":1}}],[\"先在终端执行以下命令安装homebrew\",{\"1\":{\"264\":1}}],[\"先查询数据库\",{\"1\":{\"189\":1}}],[\"先记录一下mysql的安装路径\",{\"1\":{\"119\":1}}],[\"效果不理想\",{\"1\":{\"190\":1}}],[\"效果会更好\",{\"1\":{\"189\":1}}],[\"效率更高\",{\"1\":{\"2921\":1}}],[\"效率远高于hashmap\",{\"1\":{\"2671\":1}}],[\"效率高于取模运算\",{\"1\":{\"2616\":1}}],[\"效率高\",{\"1\":{\"2407\":1}}],[\"效率\",{\"1\":{\"1227\":1,\"2103\":1,\"2117\":1}}],[\"效率最高\",{\"1\":{\"1164\":1}}],[\"效率偏低\",{\"1\":{\"192\":1}}],[\"效率非常低\",{\"1\":{\"139\":1}}],[\"效率较低\",{\"1\":{\"139\":1}}],[\"实用模式以及在不同场景下的最佳实践\",{\"1\":{\"2944\":1}}],[\"实用性原则\",{\"1\":{\"1959\":1,\"1972\":1,\"1985\":1}}],[\"实则o\",{\"1\":{\"2723\":1}}],[\"实战操作\",{\"0\":{\"1762\":1}}],[\"实战案例分析和深度思考问题\",{\"1\":{\"1240\":1}}],[\"实时协作平台等\",{\"1\":{\"3230\":1}}],[\"实时性要求高的场景\",{\"1\":{\"3206\":1}}],[\"实时传输控制协议\",{\"1\":{\"3176\":1}}],[\"实时传输协议\",{\"1\":{\"3176\":1}}],[\"实时调整监控策略\",{\"1\":{\"3111\":1}}],[\"实时网络带宽监控工具\",{\"1\":{\"3099\":1}}],[\"实时系统\",{\"1\":{\"2717\":1}}],[\"实时监听\",{\"1\":{\"1895\":1,\"1899\":1}}],[\"实时监控系统指标\",{\"1\":{\"3228\":1}}],[\"实时监控连接数\",{\"1\":{\"1113\":1,\"1347\":1}}],[\"实时监控redis命中率\",{\"1\":{\"192\":1}}],[\"实时查看容器的资源使用情况\",{\"0\":{\"1810\":1}}],[\"实时通信系统\",{\"1\":{\"1347\":1}}],[\"实际联系地址\",{\"1\":{\"3211\":1}}],[\"实际重写的方法\",{\"1\":{\"3036\":1}}],[\"实际项目中由jdbc提供\",{\"1\":{\"3000\":1}}],[\"实际项目中使用sip库解析\",{\"1\":{\"1095\":1}}],[\"实际上破坏了封装\",{\"1\":{\"2750\":1}}],[\"实际上限流一般都是基于漏桶算法和令牌桶算法实现的\",{\"1\":{\"1397\":1}}],[\"实际案例\",{\"1\":{\"2728\":1}}],[\"实际为treemap\",{\"1\":{\"2649\":1}}],[\"实际应返回上次中断的位置\",{\"1\":{\"2849\":1}}],[\"实际应在超过容量时移除\",{\"1\":{\"2642\":1}}],[\"实际应用案例分析\",{\"0\":{\"3242\":1}}],[\"实际应用选择\",{\"1\":{\"3227\":1}}],[\"实际应用较少\",{\"1\":{\"3091\":1}}],[\"实际应用中还需要考虑缓存一致性\",{\"1\":{\"3170\":1}}],[\"实际应用中还需要添加错误处理\",{\"1\":{\"2921\":1}}],[\"实际应用中应写入配置文件\",{\"1\":{\"2849\":1}}],[\"实际应用中应从配置文件读取\",{\"1\":{\"2849\":1}}],[\"实际应用中可写入配置文件\",{\"1\":{\"2849\":1}}],[\"实际应用中从网络读取\",{\"1\":{\"1238\":1}}],[\"实际应用示例\",{\"0\":{\"2553\":1,\"2576\":1,\"2603\":1,\"2659\":1}}],[\"实际应用考量\",{\"1\":{\"2455\":1}}],[\"实际应用场景及最佳实践等多个维度\",{\"1\":{\"1283\":1}}],[\"实际应用建议\",{\"1\":{\"1196\":1,\"1197\":1,\"1198\":1}}],[\"实际结果\",{\"1\":{\"2522\":1}}],[\"实际无法直接获取node对象\",{\"1\":{\"2508\":1}}],[\"实际性能优异\",{\"1\":{\"2357\":1}}],[\"实际扩容方法\",{\"1\":{\"2318\":1}}],[\"实际存储的字符数量\",{\"1\":{\"2271\":1}}],[\"实际字符数量\",{\"1\":{\"2263\":1}}],[\"实际值\",{\"1\":{\"1069\":1}}],[\"实例化对象\",{\"1\":{\"2999\":1}}],[\"实例变量各自独立\",{\"1\":{\"1037\":1}}],[\"实例变量值\",{\"1\":{\"1037\":1}}],[\"实例变量\",{\"1\":{\"1037\":1,\"2767\":1}}],[\"实例数据和对齐填充\",{\"1\":{\"720\":1}}],[\"实例方法\",{\"1\":{\"1037\":1}}],[\"实例方法锁\",{\"1\":{\"641\":1}}],[\"实例方法引用\",{\"1\":{\"539\":1}}],[\"实体类\",{\"1\":{\"428\":1,\"440\":1,\"2763\":1}}],[\"实施监控\",{\"1\":{\"192\":1}}],[\"实施\",{\"1\":{\"189\":1}}],[\"实现百万级并发会话不仅需要技术选型正确\",{\"1\":{\"3228\":1}}],[\"实现服务冗余和自动故障转移\",{\"1\":{\"3228\":1}}],[\"实现请求优先级机制\",{\"1\":{\"3225\":1}}],[\"实现请求处理逻辑\",{\"1\":{\"3218\":1}}],[\"实现对话状态变更的原子操作\",{\"1\":{\"3223\":1}}],[\"实现证书验证\",{\"1\":{\"3214\":1}}],[\"实现时需正确处理重传消息\",{\"1\":{\"3195\":1}}],[\"实现不同功能\",{\"1\":{\"3192\":1}}],[\"实现缓存键生成逻辑\",{\"1\":{\"3170\":1}}],[\"实现缓存机制\",{\"1\":{\"1049\":1,\"2849\":1}}],[\"实现方法级别的缓存功能\",{\"1\":{\"3170\":1}}],[\"实现方式\",{\"1\":{\"167\":1,\"2358\":1}}],[\"实现依赖注入\",{\"1\":{\"3158\":1}}],[\"实现文件传输\",{\"1\":{\"3130\":1}}],[\"实现采样机制控制开销\",{\"1\":{\"3111\":1}}],[\"实现泛型接口时有两种方式\",{\"1\":{\"3021\":1}}],[\"实现泛型单例模式\",{\"0\":{\"1294\":1}}],[\"实现功能的模块化\",{\"1\":{\"3009\":1}}],[\"实现配置与代码分离\",{\"1\":{\"2992\":1}}],[\"实现配置与代码的分离\",{\"1\":{\"2973\":1}}],[\"实现框架的灵活配置和动态代理等高级功能\",{\"1\":{\"2962\":1}}],[\"实现序列化接口\",{\"1\":{\"2938\":1}}],[\"实现异常处理\",{\"1\":{\"2935\":1}}],[\"实现循环读写\",{\"1\":{\"2920\":1}}],[\"实现两者之间的转换\",{\"1\":{\"2877\":1}}],[\"实现基本的用户信息管理\",{\"1\":{\"2759\":1}}],[\"实现代码生成逻辑\",{\"1\":{\"3162\":1}}],[\"实现代码复用和层次化设计\",{\"1\":{\"2735\":1}}],[\"实现代码的复用和简洁性\",{\"1\":{\"557\":1}}],[\"实现fifo缓存只需重写removeeldestentry\",{\"1\":{\"2643\":1}}],[\"实现二叉堆结构\",{\"1\":{\"2568\":1}}],[\"实现原子操作避免竞态条件\",{\"1\":{\"2544\":1}}],[\"实现原理\",{\"1\":{\"1175\":1,\"1224\":1,\"1256\":1,\"2395\":1,\"2512\":1,\"2543\":1}}],[\"实现原理与技术细节\",{\"0\":{\"503\":1}}],[\"实现要点\",{\"1\":{\"2544\":1}}],[\"实现自定义主机名验证逻辑\",{\"1\":{\"3214\":1}}],[\"实现自定义并发安全集合可采用以下方案\",{\"1\":{\"2544\":1}}],[\"实现自动过期的键值对存储\",{\"1\":{\"2687\":1}}],[\"实现自动执行任务\",{\"1\":{\"1907\":1}}],[\"实现自动扩缩容机制\",{\"1\":{\"3228\":1}}],[\"实现自动扩缩容\",{\"1\":{\"1347\":1}}],[\"实现机制\",{\"1\":{\"2543\":1}}],[\"实现双端队列\",{\"1\":{\"2511\":1}}],[\"实现双方连接保持在线\",{\"1\":{\"169\":1}}],[\"实现lru缓存时需注意\",{\"1\":{\"2642\":1}}],[\"实现lru缓存\",{\"1\":{\"2511\":1}}],[\"实现栈或队列数据结构\",{\"1\":{\"2511\":1}}],[\"实现deque接口\",{\"1\":{\"2491\":1}}],[\"实现定时任务调度功能\",{\"1\":{\"2467\":1}}],[\"实现其他方法\",{\"1\":{\"2456\":1}}],[\"实现其他必要方法\",{\"1\":{\"2456\":1,\"2513\":1}}],[\"实现其中类的功能\",{\"1\":{\"461\":1}}],[\"实现快速失败\",{\"1\":{\"2444\":1}}],[\"实现快速的故障恢复\",{\"1\":{\"162\":1}}],[\"实现合理的hashcode\",{\"1\":{\"2422\":1}}],[\"实现导致大量哈希冲突\",{\"1\":{\"2422\":1}}],[\"实现高效的文件读写操作\",{\"1\":{\"2917\":1}}],[\"实现高效的线程安全hashset\",{\"1\":{\"2392\":1}}],[\"实现高可用性和数据冗余\",{\"1\":{\"39\":1}}],[\"实现多种功能组合\",{\"1\":{\"2337\":1}}],[\"实现层\",{\"1\":{\"2331\":1}}],[\"实现charsequence接口\",{\"1\":{\"2287\":1}}],[\"实现comparable接口\",{\"1\":{\"2287\":1,\"2388\":1,\"2577\":1}}],[\"实现追加逻辑\",{\"1\":{\"2282\":1}}],[\"实现字符串的复用和内存优化\",{\"1\":{\"2241\":1}}],[\"实现字符串反转的几种方式\",{\"1\":{\"1164\":1}}],[\"实现逻辑\",{\"1\":{\"2240\":1}}],[\"实现接口\",{\"1\":{\"2077\":1,\"2100\":1}}],[\"实现规范的有效落地\",{\"1\":{\"2029\":1}}],[\"实现核心业务规则\",{\"1\":{\"2007\":1}}],[\"实现用户的crud操作\",{\"1\":{\"1949\":1}}],[\"实现思路\",{\"1\":{\"1443\":1}}],[\"实现效果\",{\"1\":{\"1418\":1}}],[\"实现三种限流算法\",{\"1\":{\"1394\":1}}],[\"实现步骤\",{\"1\":{\"1349\":1}}],[\"实现内存使用监控和告警\",{\"1\":{\"1347\":1}}],[\"实现连接池管理连接生命周期\",{\"1\":{\"1336\":1}}],[\"实现动态修改优先级的优先级队列可以通过以下方式\",{\"1\":{\"2588\":1}}],[\"实现动态流量控制\",{\"1\":{\"1312\":1}}],[\"实现动态创建对象和调用方法\",{\"1\":{\"1259\":1}}],[\"实现通用集合拷贝\",{\"0\":{\"1296\":1}}],[\"实现sdp解析逻辑\",{\"1\":{\"3209\":1}}],[\"实现sip\",{\"1\":{\"3214\":1,\"3238\":1}}],[\"实现sip注册客户端需要以下步骤\",{\"1\":{\"3199\":1}}],[\"实现siplistener接口处理响应和事件\",{\"1\":{\"3190\":1}}],[\"实现siplistener接口的方法\",{\"1\":{\"1094\":1}}],[\"实现serializable接口\",{\"1\":{\"1225\":1,\"2287\":1}}],[\"实现sequencedcollection接口\",{\"1\":{\"1198\":1}}],[\"实现复杂度\",{\"1\":{\"2897\":1}}],[\"实现复杂度高于synchronized\",{\"1\":{\"2456\":1}}],[\"实现复杂\",{\"1\":{\"1197\":2,\"1316\":1,\"2356\":1,\"2456\":1,\"2513\":1,\"2921\":1,\"3121\":1}}],[\"实现数组的冒泡排序\",{\"1\":{\"1161\":1}}],[\"实现数据分片和分区策略\",{\"1\":{\"3228\":1}}],[\"实现数据分片并行写入\",{\"1\":{\"272\":1}}],[\"实现数据热备份\",{\"1\":{\"162\":1}}],[\"实现更精细的线程协作\",{\"1\":{\"1129\":1}}],[\"实现线程安全hashmap的方案及对比\",{\"1\":{\"1197\":1}}],[\"实现线程安全的weakhashmap可以有以下几种方案\",{\"1\":{\"2697\":1}}],[\"实现线程安全的lru缓存可使用concurrenthashmap+concurrentlinkedqueue\",{\"1\":{\"2643\":1}}],[\"实现线程安全的list主要有以下几种方式\",{\"1\":{\"2356\":1}}],[\"实现线程安全的arraylist有以下几种方案\",{\"1\":{\"2456\":1}}],[\"实现线程安全的hashmap有以下几种方式\",{\"1\":{\"2429\":1}}],[\"实现线程安全的hashset有以下几种方式\",{\"1\":{\"2392\":1}}],[\"实现线程安全的连接池\",{\"0\":{\"1326\":1}}],[\"实现线程安全的计数\",{\"1\":{\"1126\":1}}],[\"实现线程安全的方式包括\",{\"1\":{\"1125\":1}}],[\"实现线程安全\",{\"1\":{\"1125\":1}}],[\"实现线程的复用\",{\"1\":{\"621\":1}}],[\"实现难度\",{\"1\":{\"1101\":1}}],[\"实现注解处理器\",{\"1\":{\"1087\":1}}],[\"实现校验器\",{\"1\":{\"1069\":1}}],[\"实现一个简单的builder模式生成器\",{\"0\":{\"3162\":1}}],[\"实现一个简单的日志注解\",{\"0\":{\"1068\":1}}],[\"实现一个线程处理多个通道的高效io模型\",{\"1\":{\"2916\":1}}],[\"实现一个线程安全的用户会话管理器\",{\"1\":{\"2525\":1}}],[\"实现一个基于注解的参数校验器\",{\"0\":{\"1069\":1}}],[\"实现aop切面处理日志\",{\"1\":{\"1068\":1}}],[\"实现目标\",{\"1\":{\"990\":1,\"1505\":1}}],[\"实现简单的orm功能\",{\"1\":{\"3141\":1}}],[\"实现简单的http服务器\",{\"0\":{\"1324\":1}}],[\"实现简单的参数校验功能\",{\"1\":{\"1069\":1}}],[\"实现简单\",{\"1\":{\"761\":1,\"764\":1,\"765\":1,\"1197\":1,\"2155\":1,\"2356\":2,\"2456\":1,\"2513\":1,\"2921\":1}}],[\"实现与自定义类加载器相同的路径转换逻辑\",{\"1\":{\"747\":1}}],[\"实现与自定义类加载器相同的加载逻辑\",{\"1\":{\"747\":1}}],[\"实现\",{\"1\":{\"662\":2,\"686\":1,\"1071\":1,\"1238\":1,\"2365\":1,\"2366\":1,\"2520\":1}}],[\"实现锁机制\",{\"1\":{\"651\":1}}],[\"实现runnable接口\",{\"1\":{\"592\":1}}],[\"实现redis的高可用方案\",{\"1\":{\"162\":1}}],[\"实现redis的高可用\",{\"1\":{\"161\":1}}],[\"实现了算法与数据结构的解耦\",{\"1\":{\"3047\":1}}],[\"实现了代码的高度复用和类型安全\",{\"1\":{\"3027\":1}}],[\"实现了配置与代码的分离\",{\"1\":{\"3009\":1}}],[\"实现了好莱坞原则\",{\"1\":{\"3009\":1}}],[\"实现了map\",{\"1\":{\"2677\":1}}],[\"实现了deque接口\",{\"1\":{\"2513\":1}}],[\"实现了高效的双端操作\",{\"1\":{\"2502\":1}}],[\"实现了list\",{\"1\":{\"2446\":1}}],[\"实现了list接口\",{\"1\":{\"2432\":1}}],[\"实现了类型安全的依赖管理\",{\"1\":{\"1299\":1}}],[\"实现了字符串的复用\",{\"1\":{\"1168\":1}}],[\"实现了模块间的隔离\",{\"1\":{\"750\":1}}],[\"实现了数据共享\",{\"1\":{\"732\":1}}],[\"实现了\",{\"1\":{\"696\":1,\"3139\":1,\"3152\":1}}],[\"实现了声明式编程风格\",{\"1\":{\"550\":1}}],[\"实现了函数式编程风格\",{\"1\":{\"537\":1}}],[\"实现批量动态加载bean\",{\"1\":{\"462\":1}}],[\"实现某功能\",{\"1\":{\"461\":1}}],[\"实现类可选择性重写\",{\"1\":{\"2780\":1}}],[\"实现类\",{\"1\":{\"1174\":1,\"1267\":1,\"2316\":1,\"2363\":1,\"2400\":1,\"2461\":1}}],[\"实现类2\",{\"1\":{\"293\":1}}],[\"实现类1\",{\"1\":{\"293\":1}}],[\"实现该接口\",{\"1\":{\"292\":1}}],[\"实现抽象方法\",{\"1\":{\"291\":1}}],[\"实现可扩展性\",{\"1\":{\"184\":1}}],[\"实现负载均衡\",{\"1\":{\"184\":1}}],[\"实现的核心技术之一\",{\"1\":{\"2996\":1}}],[\"实现的接口\",{\"1\":{\"2968\":1}}],[\"实现的并发双端队列\",{\"1\":{\"2513\":1}}],[\"实现的\",{\"1\":{\"130\":1,\"533\":1,\"556\":1}}],[\"实现水平扩展\",{\"1\":{\"39\":1}}],[\"准备发送数据\",{\"1\":{\"3066\":1}}],[\"准备下一次读取\",{\"1\":{\"2915\":1}}],[\"准备下次写入\",{\"1\":{\"1338\":1}}],[\"准备重新写入\",{\"1\":{\"2914\":1}}],[\"准备测试数据\",{\"1\":{\"2047\":1}}],[\"准备一个数组\",{\"1\":{\"1469\":2}}],[\"准备读取下一个消息\",{\"1\":{\"1325\":1}}],[\"准备阶段a的值为0\",{\"1\":{\"756\":1}}],[\"准备阶段是为类的静态变量分配内存并设置初始值\",{\"1\":{\"756\":1}}],[\"准备阶段和初始化阶段有什么区别\",{\"1\":{\"756\":1}}],[\"准备\",{\"1\":{\"741\":2,\"1146\":1}}],[\"准备工作\",{\"1\":{\"189\":1}}],[\"准备多台服务器\",{\"1\":{\"161\":1}}],[\"前台运行\",{\"1\":{\"3245\":1}}],[\"前台启动\",{\"1\":{\"1372\":1}}],[\"前摄器模式\",{\"1\":{\"2921\":1}}],[\"前5个字节\",{\"1\":{\"2849\":1}}],[\"前一个元素的索引\",{\"1\":{\"2498\":1}}],[\"前一个元素\",{\"1\":{\"2498\":1}}],[\"前驱为null\",{\"1\":{\"2497\":1}}],[\"前驱为pred\",{\"1\":{\"2494\":1}}],[\"前驱为当前尾节点\",{\"1\":{\"2494\":1}}],[\"前缀后缀判断\",{\"1\":{\"2195\":1}}],[\"前缀键\",{\"1\":{\"283\":1}}],[\"前期准备\",{\"0\":{\"1678\":1}}],[\"前者是80\",{\"1\":{\"1414\":1}}],[\"前向纠错\",{\"1\":{\"1116\":1}}],[\"前置知识\",{\"1\":{\"1442\":1}}],[\"前置增强\",{\"1\":{\"1267\":1}}],[\"前置通知\",{\"1\":{\"336\":1,\"338\":1}}],[\"前置准备工作\",{\"1\":{\"189\":1}}],[\"前提环境\",{\"0\":{\"1610\":1}}],[\"前提\",{\"1\":{\"97\":1}}],[\"宕机的概率非常小\",{\"1\":{\"1377\":1}}],[\"宕机\",{\"1\":{\"189\":1}}],[\"宕机带来的数据丢失风险\",{\"1\":{\"139\":1}}],[\"场景\",{\"1\":{\"189\":1,\"190\":1,\"191\":1,\"192\":1}}],[\"手动刷新使用flush\",{\"1\":{\"2872\":1}}],[\"手动同步\",{\"1\":{\"2536\":1}}],[\"手动同步stringbuilder\",{\"1\":{\"2279\":1}}],[\"手动实现\",{\"1\":{\"2207\":1}}],[\"手动添加从节点\",{\"1\":{\"1763\":1}}],[\"手动建立连接\",{\"1\":{\"1586\":1}}],[\"手动设置密码\",{\"1\":{\"1354\":1}}],[\"手动触发垃圾回收\",{\"0\":{\"773\":1},\"1\":{\"773\":1}}],[\"手动修改class文件\",{\"1\":{\"737\":1}}],[\"手动故障转移\",{\"1\":{\"186\":1}}],[\"手动重写\",{\"1\":{\"140\":1}}],[\"节省50\",{\"1\":{\"2289\":1}}],[\"节省内存空间\",{\"1\":{\"2252\":1}}],[\"节省内存\",{\"1\":{\"2192\":1,\"2207\":1,\"2336\":1}}],[\"节省宽带\",{\"1\":{\"1377\":1}}],[\"节省存储空间和传输带宽\",{\"1\":{\"731\":1}}],[\"节点\",{\"1\":{\"2628\":1}}],[\"节点值和next指针使用volatile修饰\",{\"1\":{\"2527\":1}}],[\"节点类\",{\"1\":{\"2512\":1}}],[\"节点分散存储\",{\"1\":{\"2503\":1,\"2511\":1}}],[\"节点构造方法\",{\"1\":{\"2490\":1}}],[\"节点存储的元素\",{\"1\":{\"2490\":1}}],[\"节点定义\",{\"1\":{\"2485\":1}}],[\"节点复用\",{\"1\":{\"2335\":1}}],[\"节点角色配置\",{\"1\":{\"1560\":1}}],[\"节点流\",{\"1\":{\"1222\":2}}],[\"节点流与处理流的区别\",{\"0\":{\"1222\":1}}],[\"节点服务响应超时时间\",{\"1\":{\"186\":1}}],[\"节约cpu性能\",{\"1\":{\"152\":1}}],[\"节约内存\",{\"1\":{\"151\":1,\"154\":1}}],[\"告别繁琐的xml配置\",{\"1\":{\"391\":1}}],[\"告知具体位置\",{\"1\":{\"185\":1}}],[\"告警失败\",{\"1\":{\"1687\":1}}],[\"告警成功\",{\"1\":{\"1687\":1}}],[\"告警状态\",{\"1\":{\"1687\":1}}],[\"告警\",{\"1\":{\"125\":1}}],[\"譬如我们要增加一个集群节点\",{\"1\":{\"185\":1}}],[\"秒\",{\"1\":{\"183\":2,\"199\":2,\"545\":1}}],[\"业务规则验证\",{\"1\":{\"2955\":1}}],[\"业务层\",{\"1\":{\"3089\":1}}],[\"业务层应抛出有业务含义的异常\",{\"1\":{\"2955\":1}}],[\"业务层异常处理示例\",{\"1\":{\"2955\":1}}],[\"业务层异常处理\",{\"0\":{\"2955\":1}}],[\"业务操作失败\",{\"1\":{\"2937\":1}}],[\"业务错误\",{\"1\":{\"2050\":2,\"2051\":1}}],[\"业务线特定规范\",{\"1\":{\"2029\":1}}],[\"业务线程池按cpu核心数的2~4倍配置\",{\"1\":{\"1347\":1}}],[\"业务边界清晰度\",{\"1\":{\"2014\":1}}],[\"业务处理耗时会阻塞io\",{\"1\":{\"3121\":1}}],[\"业务处理器\",{\"1\":{\"1332\":1}}],[\"业务处理交给线程池\",{\"1\":{\"1328\":1,\"3121\":2}}],[\"业务异常\",{\"1\":{\"1044\":1,\"2956\":1}}],[\"业务逻辑服务集群\",{\"1\":{\"3228\":1}}],[\"业务逻辑与横切关注点\",{\"1\":{\"3152\":1}}],[\"业务逻辑与io处理分离\",{\"1\":{\"3091\":1}}],[\"业务逻辑与错误处理分离\",{\"1\":{\"2958\":1}}],[\"业务逻辑与导出逻辑解耦\",{\"1\":{\"278\":1}}],[\"业务逻辑实现\",{\"1\":{\"2007\":1}}],[\"业务逻辑层\",{\"1\":{\"2007\":2}}],[\"业务逻辑处理\",{\"1\":{\"1044\":1}}],[\"业务逻辑\",{\"1\":{\"428\":1,\"1068\":1,\"2054\":1,\"2061\":1,\"2796\":1,\"3137\":1,\"3154\":2,\"3160\":1}}],[\"业务代码只需要关注数据获取\",{\"1\":{\"278\":1}}],[\"业务数据查询逻辑\",{\"1\":{\"269\":1}}],[\"业务正常范围时\",{\"1\":{\"192\":1}}],[\"业务发展过程中遇到的峰值瓶颈\",{\"1\":{\"183\":1}}],[\"业界可用性目标5个9\",{\"1\":{\"160\":1}}],[\"原镜像名\",{\"1\":{\"3246\":1}}],[\"原地算法\",{\"1\":{\"2727\":1}}],[\"原索引\",{\"1\":{\"2601\":2}}],[\"原有类专注于数据存储\",{\"1\":{\"2337\":1}}],[\"原实现会导致小字符串引用大字符数组\",{\"1\":{\"2296\":1}}],[\"原容量2\",{\"1\":{\"2272\":1}}],[\"原容量\",{\"1\":{\"2271\":1,\"2272\":2}}],[\"原字符串不变\",{\"1\":{\"2191\":1}}],[\"原生js实现ajax详解\",{\"0\":{\"1432\":1}}],[\"原生js实现ajax\",{\"0\":{\"1431\":1}}],[\"原生支持http\",{\"1\":{\"494\":1}}],[\"原始类型\",{\"1\":{\"3028\":1}}],[\"原始集合修改\",{\"1\":{\"2358\":1}}],[\"原始列表\",{\"1\":{\"2326\":1}}],[\"原始镜像名\",{\"1\":{\"1795\":1}}],[\"原始age值\",{\"1\":{\"1269\":1}}],[\"原始name值\",{\"1\":{\"1269\":1}}],[\"原列表结构修改后子列表失效\",{\"1\":{\"1194\":1}}],[\"原列表结构修改后\",{\"1\":{\"1194\":1}}],[\"原则\",{\"1\":{\"815\":1,\"849\":1,\"883\":1,\"917\":1,\"2013\":1,\"2459\":1,\"2785\":1}}],[\"原理\",{\"1\":{\"761\":1,\"762\":1,\"767\":1,\"1197\":2,\"2310\":1,\"2456\":4,\"2513\":4}}],[\"原理就是在在注解上加入了\",{\"1\":{\"461\":1}}],[\"原理就是在注解上加入了\",{\"1\":{\"417\":1}}],[\"原子操作支持\",{\"1\":{\"2542\":1}}],[\"原子操作的重要性\",{\"0\":{\"2534\":1}}],[\"原子操作\",{\"1\":{\"2522\":1,\"2525\":1}}],[\"原子操作是指不可被中断的操作\",{\"1\":{\"1126\":1}}],[\"原子获取\",{\"1\":{\"1126\":1}}],[\"原子递增\",{\"1\":{\"1126\":1}}],[\"原子添加指定值\",{\"1\":{\"675\":1}}],[\"原子自减\",{\"1\":{\"675\":1}}],[\"原子自增\",{\"1\":{\"675\":1}}],[\"原子类适用于简单的原子操作\",{\"1\":{\"684\":1}}],[\"原子类与不可变对象\",{\"0\":{\"681\":1}}],[\"原子类基于无锁算法实现\",{\"1\":{\"679\":1}}],[\"原子类的过度使用\",{\"0\":{\"684\":1}}],[\"原子类的无锁设计\",{\"0\":{\"679\":1}}],[\"原子类的分类\",{\"0\":{\"672\":1}}],[\"原子类的概念与作用\",{\"0\":{\"671\":1}}],[\"原子类支持原子性的更新基本类型\",{\"1\":{\"671\":1}}],[\"原子类是java并发包提供的线程安全工具类\",{\"1\":{\"671\":1}}],[\"原子类\",{\"0\":{\"669\":1}}],[\"原子性和有序性规则\",{\"1\":{\"703\":1}}],[\"原子性和有序性\",{\"1\":{\"602\":2}}],[\"原子性\",{\"1\":{\"348\":1}}],[\"原文链接\",{\"1\":{\"281\":1}}],[\"原master作为slave故障恢复后连接\",{\"1\":{\"182\":1}}],[\"原因如下\",{\"1\":{\"2484\":1}}],[\"原因分析\",{\"1\":{\"1557\":1,\"1558\":1,\"1664\":1,\"1665\":1,\"1666\":1,\"1667\":1}}],[\"原因不同\",{\"1\":{\"1155\":1}}],[\"原因\",{\"1\":{\"121\":1,\"237\":1,\"700\":1,\"701\":1,\"702\":1,\"753\":1,\"755\":1,\"814\":1,\"848\":1,\"882\":1,\"916\":1,\"1735\":2,\"1788\":1,\"2071\":1,\"2419\":1,\"2420\":1,\"2476\":1,\"2477\":1}}],[\"向指定地址和端口发送udp数据报\",{\"1\":{\"3066\":1}}],[\"向服务器发送数据\",{\"1\":{\"3065\":1}}],[\"向客户端发送响应\",{\"1\":{\"3065\":1}}],[\"向列表添加整数\",{\"1\":{\"3040\":1}}],[\"向上转型\",{\"0\":{\"2740\":1},\"1\":{\"2740\":3}}],[\"向上调整堆结构\",{\"1\":{\"2575\":1}}],[\"向上调整堆\",{\"1\":{\"2573\":1}}],[\"向上兼容\",{\"1\":{\"1028\":1}}],[\"向缓存中放入键值对\",{\"1\":{\"2512\":1}}],[\"向设备发出的请求平均数量\",{\"1\":{\"1884\":1}}],[\"向下调整堆结构\",{\"1\":{\"2575\":1}}],[\"向下调整堆\",{\"1\":{\"2574\":1}}],[\"向下转型不安全\",{\"1\":{\"1055\":1,\"2749\":1}}],[\"向下搜索所有可达的对象\",{\"1\":{\"762\":1}}],[\"向后兼容性优先\",{\"0\":{\"562\":1}}],[\"向后兼容性保障\",{\"0\":{\"509\":1}}],[\"向刷新接口申请新的\",{\"1\":{\"306\":1}}],[\"向有序集合中添加元素\",{\"1\":{\"204\":1}}],[\"向集合中添加元素\",{\"1\":{\"203\":1,\"2602\":1,\"2631\":1,\"2658\":1}}],[\"向新的master发送slaveof\",{\"1\":{\"182\":1}}],[\"向其他slave发送slaveof\",{\"1\":{\"182\":1}}],[\"向其他\",{\"1\":{\"177\":1}}],[\"谁先过来我投给谁\",{\"1\":{\"182\":1}}],[\"投给谁呢\",{\"1\":{\"182\":1}}],[\"投影查询\",{\"1\":{\"85\":1}}],[\"投影文档\",{\"1\":{\"58\":1}}],[\"具体位置根据磁盘大小而定\",{\"1\":{\"3262\":1}}],[\"具体请求处理方法省略\",{\"1\":{\"3218\":1}}],[\"具体子类提供实现\",{\"1\":{\"2847\":1}}],[\"具体信息\",{\"1\":{\"2071\":1}}],[\"具体命名规则\",{\"0\":{\"1995\":1}}],[\"具体可百度\",{\"1\":{\"1417\":1}}],[\"具体叫啥根据事实而定\",{\"1\":{\"1362\":1}}],[\"具体方法\",{\"1\":{\"1206\":1}}],[\"具体来说\",{\"1\":{\"331\":1}}],[\"具体实现可灵活扩展\",{\"1\":{\"2859\":1,\"2883\":1}}],[\"具体实现\",{\"1\":{\"292\":1,\"459\":1}}],[\"具体的流程如下\",{\"1\":{\"181\":1}}],[\"具有灵活\",{\"1\":{\"3172\":1}}],[\"具有较好的分布特性\",{\"1\":{\"2455\":1}}],[\"具有较大的可能性丢失数据\",{\"1\":{\"138\":1}}],[\"具有以下显著区别\",{\"1\":{\"2913\":1}}],[\"具有以下优势\",{\"1\":{\"2663\":1}}],[\"具有以下优点\",{\"1\":{\"731\":1}}],[\"具有以下特性\",{\"1\":{\"2650\":1}}],[\"具有以下特点\",{\"1\":{\"2395\":1}}],[\"具有以下核心特性\",{\"1\":{\"2314\":1}}],[\"具有不可变性和全局唯一性\",{\"1\":{\"2238\":1}}],[\"具有不可变性和常量池存储特性\",{\"1\":{\"2236\":1}}],[\"具有不可变性\",{\"1\":{\"2185\":1}}],[\"具有高可伸缩\",{\"1\":{\"1507\":1}}],[\"具有master端全部数据\",{\"1\":{\"166\":1}}],[\"各层职责明确\",{\"1\":{\"3220\":1}}],[\"各适用于什么场景\",{\"1\":{\"2897\":1}}],[\"各中间件默认端口\",{\"0\":{\"1367\":1}}],[\"各种reader和writer实现不同的字符编码策略\",{\"1\":{\"1231\":1}}],[\"各有其适用场景\",{\"1\":{\"3206\":1}}],[\"各有什么优缺点\",{\"1\":{\"2160\":1}}],[\"各有什么特点\",{\"1\":{\"634\":1}}],[\"各有特点\",{\"1\":{\"768\":1}}],[\"各内存区域详解\",{\"0\":{\"707\":1}}],[\"各自的实现原理是什么\",{\"1\":{\"2616\":1}}],[\"各自的性能特点是什么\",{\"1\":{\"2564\":1}}],[\"各自的适用场景是什么\",{\"1\":{\"43\":1,\"64\":1,\"75\":1}}],[\"各自适用场景是什么\",{\"1\":{\"686\":1,\"2588\":1}}],[\"各自适用场景\",{\"1\":{\"651\":1}}],[\"各group容量信息表\",{\"1\":{\"232\":1,\"1684\":1}}],[\"各个节点需要执行\",{\"1\":{\"1764\":1}}],[\"各个机器设置自己的名称\",{\"1\":{\"1676\":1}}],[\"各个数据库相互通信\",{\"1\":{\"185\":1}}],[\"各个slave的详细信息\",{\"1\":{\"180\":1}}],[\"启监听\",{\"1\":{\"1574\":1}}],[\"启服务\",{\"1\":{\"1574\":1}}],[\"启用时\",{\"1\":{\"2990\":1}}],[\"启用开始按钮\",{\"1\":{\"1470\":1}}],[\"启用停止按钮\",{\"1\":{\"1469\":1}}],[\"启用tcp快速回收\",{\"1\":{\"1347\":1}}],[\"启用tcp\",{\"0\":{\"1344\":1},\"1\":{\"1111\":1}}],[\"启用增量编译\",{\"1\":{\"956\":1}}],[\"启用压缩普通对象指针\",{\"1\":{\"798\":1,\"832\":1,\"866\":1,\"900\":1}}],[\"启用\",{\"1\":{\"790\":1,\"824\":1,\"858\":1,\"892\":1}}],[\"启用jfr的方法\",{\"1\":{\"480\":1}}],[\"启用jwt认证\",{\"1\":{\"456\":1}}],[\"启用epsilon的方法\",{\"1\":{\"477\":1}}],[\"启用zgc的方法\",{\"1\":{\"476\":1}}],[\"启用事务管理\",{\"0\":{\"353\":1}}],[\"启用aop\",{\"0\":{\"339\":1}}],[\"启用哨兵\",{\"0\":{\"178\":1}}],[\"启动指定服务已存在的容器\",{\"1\":{\"3246\":1}}],[\"启动一个mysql容器名称叫mysql5\",{\"1\":{\"3257\":1}}],[\"启动一个交互式容器\",{\"1\":{\"3246\":1}}],[\"启动一个容器\",{\"1\":{\"1512\":1}}],[\"启动时打印出hello\",{\"1\":{\"3246\":1}}],[\"启动disruptor\",{\"1\":{\"3240\":1}}],[\"启动docker\",{\"0\":{\"1614\":1,\"1674\":1,\"1745\":1}}],[\"启动应用时添加javaagent\",{\"1\":{\"3104\":1}}],[\"启动应用并开始记录\",{\"1\":{\"480\":1}}],[\"启动命令\",{\"1\":{\"3096\":2}}],[\"启动10个线程\",{\"1\":{\"2328\":1}}],[\"启动多个线程操作字符串\",{\"1\":{\"2269\":1}}],[\"启动防火墙\",{\"1\":{\"1923\":1}}],[\"启动进程的终端名\",{\"1\":{\"1882\":1}}],[\"启动redis\",{\"0\":{\"1786\":1},\"1\":{\"1780\":1}}],[\"启动成功\",{\"1\":{\"1688\":1}}],[\"启动harbor报\",{\"0\":{\"1665\":1}}],[\"启动harbor\",{\"1\":{\"1630\":1,\"1719\":1}}],[\"启动相关\",{\"1\":{\"1610\":1}}],[\"启动报错\",{\"1\":{\"1586\":1}}],[\"启动显示以下内容\",{\"1\":{\"1578\":1}}],[\"启动项目调试\",{\"1\":{\"1646\":1}}],[\"启动项目可看到\",{\"1\":{\"1564\":1}}],[\"启动项目后出现下图中找到agent\",{\"1\":{\"1552\":1}}],[\"启动参数说明\",{\"1\":{\"1530\":1}}],[\"启动kafka容器\",{\"0\":{\"1530\":1}}],[\"启动zookeeper容器\",{\"0\":{\"1529\":1}}],[\"启动\",{\"0\":{\"1585\":1,\"1923\":1},\"1\":{\"1417\":1,\"1503\":1,\"1568\":1,\"1834\":1,\"3263\":1}}],[\"启动服务\",{\"1\":{\"1374\":1,\"1504\":1,\"1620\":1,\"1621\":1,\"1752\":1,\"1753\":1}}],[\"启动服务器调试信息\",{\"1\":{\"193\":1}}],[\"启动服务器参数\",{\"1\":{\"165\":1}}],[\"启动jvisualvm\",{\"1\":{\"807\":1,\"841\":1,\"875\":1,\"909\":1}}],[\"启动类加载器\",{\"1\":{\"742\":1,\"745\":1}}],[\"启动类标识了\",{\"1\":{\"463\":1}}],[\"启动引导类上标识了\",{\"1\":{\"463\":1}}],[\"启动springboot启动类时\",{\"1\":{\"463\":1}}],[\"启动并配置映射\",{\"0\":{\"255\":1}}],[\"启动容器的时候\",{\"1\":{\"3257\":1}}],[\"启动容器的时候使用\",{\"1\":{\"3246\":1}}],[\"启动容器的使用\",{\"1\":{\"3246\":1}}],[\"启动容器并进入交互式模式\",{\"1\":{\"3245\":1}}],[\"启动容器\",{\"0\":{\"234\":1},\"1\":{\"1569\":1,\"3245\":2,\"3246\":1,\"3250\":1}}],[\"启动不同的排查流程\",{\"1\":{\"192\":1}}],[\"启动定时任务\",{\"1\":{\"191\":1}}],[\"启动哨兵\",{\"1\":{\"178\":1}}],[\"启动优先级\",{\"1\":{\"141\":1}}],[\"启动方式2\",{\"1\":{\"138\":1}}],[\"启动失败\",{\"1\":{\"121\":1}}],[\"启动mysql服务\",{\"0\":{\"121\":1,\"1772\":1},\"1\":{\"116\":1,\"121\":1,\"1585\":1}}],[\"哨兵在进行主从切换过程中经历三个阶段\",{\"1\":{\"179\":1}}],[\"哨兵工作原理\",{\"0\":{\"179\":1}}],[\"哨兵也是一台redis服务器\",{\"1\":{\"177\":1}}],[\"哨兵间\",{\"1\":{\"177\":1}}],[\"哨兵的作用\",{\"1\":{\"177\":1}}],[\"哨兵作用\",{\"0\":{\"177\":1}}],[\"哨兵\",{\"1\":{\"176\":2}}],[\"哨兵概念\",{\"0\":{\"176\":1}}],[\"哨兵简介\",{\"0\":{\"175\":1}}],[\"哨兵模式\",{\"0\":{\"174\":1}}],[\"慎重\",{\"1\":{\"191\":1}}],[\"慎重总结\",{\"1\":{\"142\":1}}],[\"慎用static关键字\",{\"1\":{\"2040\":1}}],[\"慎用\",{\"1\":{\"173\":1,\"190\":1}}],[\"确认收到对方的最终响应\",{\"1\":{\"3179\":1}}],[\"确认\",{\"1\":{\"3070\":1,\"3227\":1}}],[\"确认之前的镜像是否还在\",{\"1\":{\"1667\":1}}],[\"确认docker\",{\"1\":{\"1667\":1}}],[\"确认已安装内核版本\",{\"0\":{\"1483\":1}}],[\"确认应答\",{\"1\":{\"1312\":1}}],[\"确认回复邮件\",{\"0\":{\"993\":1}}],[\"确认参数可用性\",{\"1\":{\"817\":1,\"851\":1,\"885\":1,\"919\":1}}],[\"确认是否延时\",{\"1\":{\"190\":1}}],[\"确认是否释放slave\",{\"1\":{\"172\":1}}],[\"确定下一跳服务器地址\",{\"1\":{\"3212\":1}}],[\"确定通信对方的位置\",{\"1\":{\"3175\":1}}],[\"确定在哈希表中的存储位置\",{\"1\":{\"2393\":1}}],[\"确定行和列\",{\"1\":{\"2167\":1}}],[\"确定相关的人员和职责\",{\"1\":{\"1979\":1}}],[\"确定容器没问题后删除\",{\"1\":{\"1667\":1}}],[\"确定方法\",{\"1\":{\"818\":1,\"852\":1,\"886\":1,\"920\":1}}],[\"确定泄漏原因\",{\"1\":{\"784\":1}}],[\"确定类的继承关系\",{\"1\":{\"724\":1}}],[\"确定应用的内存需求\",{\"1\":{\"477\":1}}],[\"确保在finally块中释放directbytebuffer\",{\"1\":{\"3129\":1}}],[\"确保全链路追踪上下文传递\",{\"1\":{\"3110\":1}}],[\"确保socket\",{\"1\":{\"3090\":1}}],[\"确保非负\",{\"1\":{\"3086\":1}}],[\"确保集合中只存储指定类型的对象\",{\"1\":{\"3017\":1}}],[\"确保系统的安全性和可靠性\",{\"1\":{\"2960\":1}}],[\"确保正确关闭打印流\",{\"1\":{\"2908\":1}}],[\"确保所有缓冲数据都被写入\",{\"1\":{\"2866\":1}}],[\"确保所有依赖都能从仓库中获取\",{\"1\":{\"944\":1}}],[\"确保字体支持\",{\"1\":{\"2860\":1}}],[\"确保字符串对象创建后其值无法被修改\",{\"1\":{\"2240\":1}}],[\"确保编码一致\",{\"1\":{\"2860\":1}}],[\"确保数据写入\",{\"1\":{\"2848\":1}}],[\"确保数据安全性\",{\"1\":{\"137\":1}}],[\"确保执行\",{\"1\":{\"2836\":1}}],[\"确保有明确终止条件\",{\"1\":{\"2789\":1}}],[\"确保只将临时对象或明确希望被自动回收的对象作为weakhashmap的键\",{\"1\":{\"2691\":1}}],[\"确保只有在条件满足的情况下才会继续执行\",{\"1\":{\"1139\":1}}],[\"确保根节点为黑色\",{\"1\":{\"2656\":1}}],[\"确保显式容量\",{\"1\":{\"2437\":1}}],[\"确保内部容量足够\",{\"1\":{\"2437\":1}}],[\"确保分布均匀\",{\"1\":{\"2385\":1}}],[\"确保性能稳定\",{\"1\":{\"2377\":1}}],[\"确保引用不可变\",{\"1\":{\"2358\":1}}],[\"确保容量足够\",{\"1\":{\"2437\":2}}],[\"确保容量至少为1000\",{\"1\":{\"2355\":1}}],[\"确保容量\",{\"1\":{\"2318\":1}}],[\"确保外部数组修改不会影响string内部\",{\"1\":{\"2292\":1}}],[\"确保多线程安全\",{\"1\":{\"2267\":1}}],[\"确保每个子数组都已正确初始化\",{\"1\":{\"2180\":1}}],[\"确保循环条件最终会变为false\",{\"1\":{\"2138\":1}}],[\"确保注释与代码一致\",{\"1\":{\"2094\":1}}],[\"确保日志唯一性\",{\"1\":{\"2071\":1}}],[\"确保日志系统能处理详细的npe消息\",{\"1\":{\"518\":1}}],[\"确保文档自动化工具的灵活性和可扩展性\",{\"1\":{\"1992\":1}}],[\"确保文档生态系统的灵活性和可扩展性\",{\"1\":{\"1979\":1}}],[\"确保文档管理体系的灵活性和可扩展性\",{\"1\":{\"1966\":1}}],[\"确保文档的安全性和保密性\",{\"1\":{\"1958\":1}}],[\"确保文档的安全性和可用性\",{\"1\":{\"1958\":1}}],[\"确保文档的准确性和完整性\",{\"1\":{\"1958\":1}}],[\"确保项目顺利进行\",{\"1\":{\"1957\":1,\"1970\":1,\"1983\":1}}],[\"确保项目的顺利进行\",{\"1\":{\"1955\":1,\"1957\":1,\"1966\":1,\"1968\":1,\"1970\":1,\"1979\":1,\"1981\":1,\"1983\":1,\"1992\":1}}],[\"确保两边的防火墙关闭成功\",{\"1\":{\"1764\":1}}],[\"确保标准节点投票数不相同\",{\"1\":{\"1764\":1}}],[\"确保最后一个ack报文能到达对方\",{\"1\":{\"1311\":1}}],[\"确保双方都具备发送和接收能力\",{\"1\":{\"1311\":1}}],[\"确保类型安全\",{\"1\":{\"1290\":1}}],[\"确保反序列化时版本一致\",{\"1\":{\"1225\":1}}],[\"确保java核心库的安全\",{\"1\":{\"1155\":1}}],[\"确保资源关闭\",{\"1\":{\"1044\":1,\"2927\":1}}],[\"确保资源自动关闭\",{\"1\":{\"274\":1}}],[\"确保依赖可以从配置的仓库中获取\",{\"1\":{\"988\":1}}],[\"确保优化是有意义的\",{\"1\":{\"966\":1}}],[\"确保使用最新的稳定版本\",{\"1\":{\"932\":1}}],[\"确保了依赖版本的一致性\",{\"1\":{\"932\":1,\"967\":1}}],[\"确保了java核心类库的安全性\",{\"1\":{\"749\":1}}],[\"确保对象引用对其他线程可见时\",{\"1\":{\"668\":1}}],[\"确保旧代码能够在新版本jdk上运行\",{\"1\":{\"562\":1}}],[\"确保应用的质量\",{\"1\":{\"454\":1}}],[\"确保浏览器正确识别下载文件\",{\"1\":{\"275\":1}}],[\"确保不丢失\",{\"1\":{\"191\":1}}],[\"确保过滤器正确\",{\"1\":{\"53\":1}}],[\"确保设置了合适的索引\",{\"1\":{\"53\":1}}],[\"测量不同参数组合的性能指标\",{\"1\":{\"818\":1,\"852\":1,\"886\":1,\"920\":1}}],[\"测算从master到slave的重连平均时长second\",{\"1\":{\"171\":1}}],[\"测试覆盖\",{\"1\":{\"3169\":1}}],[\"测试计划\",{\"1\":{\"3106\":1}}],[\"测试输出\",{\"1\":{\"2909\":1}}],[\"测试输入输出的边界条件\",{\"1\":{\"2047\":1}}],[\"测试此流是否支持mark\",{\"1\":{\"2841\":1,\"2853\":1}}],[\"测试treemap\",{\"1\":{\"2409\":1}}],[\"测试hashmap\",{\"1\":{\"2409\":1}}],[\"测试两种map在不同操作上的性能表现\",{\"1\":{\"2409\":1}}],[\"测试头部删除\",{\"1\":{\"2327\":1}}],[\"测试头部添加\",{\"1\":{\"2327\":1}}],[\"测试尾部删除\",{\"1\":{\"2327\":1}}],[\"测试尾部添加\",{\"1\":{\"2327\":1}}],[\"测试删除元素\",{\"1\":{\"2327\":1}}],[\"测试删除元素性能\",{\"1\":{\"2327\":1}}],[\"测试删除性能\",{\"1\":{\"2327\":1}}],[\"测试随机访问\",{\"1\":{\"2327\":1}}],[\"测试访问\",{\"1\":{\"3250\":1}}],[\"测试访问元素性能\",{\"1\":{\"2327\":1}}],[\"测试访问性能\",{\"1\":{\"2327\":1}}],[\"测试添加元素\",{\"1\":{\"2327\":1}}],[\"测试添加元素性能\",{\"1\":{\"2327\":1}}],[\"测试添加性能\",{\"1\":{\"2327\":1}}],[\"测试数据应自动创建和清理\",{\"1\":{\"2048\":1,\"2055\":1,\"2063\":1}}],[\"测试实现\",{\"1\":{\"2046\":1}}],[\"测试方法命名规范\",{\"0\":{\"2046\":1}}],[\"测试方式\",{\"1\":{\"114\":1}}],[\"测试目录结构应与源码保持一致\",{\"1\":{\"2045\":1}}],[\"测试粒度应为方法级别\",{\"1\":{\"2045\":1}}],[\"测试范围与要求\",{\"0\":{\"2045\":1}}],[\"测试用例应独立运行\",{\"1\":{\"2044\":1}}],[\"测试和验证文档自动化工具的正确性和有效性\",{\"1\":{\"1992\":1}}],[\"测试文档的正确性和完整性\",{\"1\":{\"1988\":2}}],[\"测试文档\",{\"1\":{\"1961\":1,\"1971\":1}}],[\"测试任务1\",{\"1\":{\"1687\":1}}],[\"测试连接\",{\"1\":{\"1576\":1}}],[\"测试kafka\",{\"0\":{\"1531\":1}}],[\"测试es接收logstash数据\",{\"0\":{\"1527\":1}}],[\"测试\",{\"0\":{\"1591\":1,\"1596\":1,\"1601\":1},\"1\":{\"1503\":1,\"1624\":1,\"2990\":1}}],[\"测试异常\",{\"1\":{\"1250\":1}}],[\"测试异常流程性能\",{\"1\":{\"1250\":1}}],[\"测试正常流程性能\",{\"1\":{\"1250\":1}}],[\"测试略\",{\"1\":{\"1179\":1}}],[\"测试示例\",{\"1\":{\"293\":1}}],[\"测试当前服务器的并发性能\",{\"1\":{\"193\":1}}],[\"测试结果应稳定可靠\",{\"1\":{\"2044\":1}}],[\"测试结果\",{\"0\":{\"104\":1,\"112\":1},\"1\":{\"1988\":1}}],[\"触发器\",{\"1\":{\"3246\":1}}],[\"触发状态变更事件\",{\"1\":{\"3223\":1}}],[\"触发jvm的优化\",{\"1\":{\"3010\":1}}],[\"触发类加载\",{\"1\":{\"2980\":1}}],[\"触发gc\",{\"1\":{\"2685\":1}}],[\"触发垃圾回收\",{\"1\":{\"1150\":1}}],[\"触发全量复制\",{\"1\":{\"171\":1}}],[\"触发程序中更新表\",{\"1\":{\"125\":1}}],[\"触发程序位于错误的方案中\",{\"1\":{\"125\":1}}],[\"触发程序的语句使用\",{\"1\":{\"125\":1}}],[\"触发程序的\",{\"1\":{\"125\":1}}],[\"触发程序不存在\",{\"1\":{\"125\":1}}],[\"触发程序已存在\",{\"1\":{\"125\":1}}],[\"断点续传可以通过记录已传输字节数\",{\"1\":{\"2849\":1}}],[\"断言\",{\"1\":{\"3106\":1}}],[\"断言index是否合法\",{\"1\":{\"2498\":1}}],[\"断言型接口\",{\"1\":{\"538\":1}}],[\"断线重连支持\",{\"1\":{\"1347\":1}}],[\"断开master与slave连接\",{\"1\":{\"177\":1}}],[\"断开slave与master的连接\",{\"1\":{\"165\":1}}],[\"断网后slave的offset越界\",{\"1\":{\"171\":1}}],[\"伴随着系统的运行\",{\"1\":{\"171\":1}}],[\"频繁刷新\",{\"1\":{\"2873\":1}}],[\"频繁随机访问\",{\"1\":{\"2873\":1}}],[\"频繁使用且内存占用小的对象\",{\"1\":{\"2698\":1}}],[\"频繁使用get\",{\"1\":{\"2505\":1}}],[\"频繁修改可能影响性能\",{\"1\":{\"2671\":1}}],[\"频繁修改影响\",{\"1\":{\"2639\":1}}],[\"频繁插入删除\",{\"1\":{\"2671\":1}}],[\"频繁插入删除操作使用linkedlist\",{\"1\":{\"2345\":1}}],[\"频繁get操作会导致链表频繁调整\",{\"1\":{\"2639\":1}}],[\"频繁gc\",{\"1\":{\"782\":1,\"813\":1,\"847\":1,\"881\":1,\"915\":1}}],[\"频繁进行插入删除操作\",{\"1\":{\"2511\":1}}],[\"频繁扩容会导致性能开销\",{\"1\":{\"2449\":1}}],[\"频繁扩容\",{\"0\":{\"2423\":1},\"1\":{\"2449\":1}}],[\"频繁扩容问题\",{\"0\":{\"2344\":1}}],[\"频繁线程切换\",{\"1\":{\"1227\":1}}],[\"频繁字符串拼接导致的性能问题\",{\"1\":{\"1169\":1}}],[\"频繁调用string\",{\"1\":{\"1056\":1}}],[\"频繁调用会影响性能\",{\"1\":{\"780\":1}}],[\"频繁的gc回收可能导致树结构频繁重组\",{\"1\":{\"2696\":1}}],[\"频繁的线程切换会增加cpu开销\",{\"1\":{\"703\":1}}],[\"频繁的网络中断\",{\"0\":{\"172\":1}}],[\"频繁的全量复制\",{\"0\":{\"171\":1}}],[\"频度高\",{\"1\":{\"154\":1}}],[\"8月\",{\"1\":{\"3282\":1}}],[\"8e7e73b477dc\",{\"1\":{\"3273\":1}}],[\"8支持所有unicode字符\",{\"1\":{\"2884\":1}}],[\"8编码写入文件\",{\"1\":{\"2879\":1}}],[\"8编码写入的文本\",{\"1\":{\"2879\":1}}],[\"8编码读取文件\",{\"1\":{\"2878\":1}}],[\"8编码的文件\",{\"1\":{\"2861\":1}}],[\"8编码的文本\",{\"1\":{\"2855\":1}}],[\"8kb\",{\"1\":{\"2872\":1}}],[\"8kb缓冲区\",{\"1\":{\"1224\":1,\"2837\":1,\"2866\":1}}],[\"8种\",{\"1\":{\"2766\":1}}],[\"8使用尾插法\",{\"1\":{\"2616\":1}}],[\"8使用数组+链表+红黑树\",{\"1\":{\"2616\":1}}],[\"8优化了resize过程\",{\"1\":{\"2616\":1}}],[\"8优化了扰动函数\",{\"1\":{\"2616\":1}}],[\"8及之后的版本中没有像hashmap那样引入红黑树优化\",{\"1\":{\"2696\":1}}],[\"8及之前版本\",{\"1\":{\"2433\":1}}],[\"8及以上版本对arraylist的实现进行了优化\",{\"1\":{\"2355\":1}}],[\"8及以上版本中\",{\"1\":{\"1197\":1}}],[\"8及以上版本中使用\",{\"1\":{\"545\":1}}],[\"8及以上版本\",{\"1\":{\"1196\":1}}],[\"8及以上版本特性\",{\"1\":{\"1178\":1}}],[\"850ms\",{\"1\":{\"2986\":1}}],[\"85\",{\"1\":{\"2125\":1,\"2144\":1,\"2577\":2}}],[\"8字节\",{\"1\":{\"2099\":2}}],[\"83\",{\"1\":{\"1887\":1}}],[\"837\",{\"1\":{\"1503\":1}}],[\"8u261\",{\"1\":{\"1729\":1}}],[\"8mb\",{\"1\":{\"1667\":2}}],[\"8201\",{\"1\":{\"1650\":6,\"1713\":6}}],[\"82m9ar63\",{\"1\":{\"1615\":1,\"1675\":1,\"1746\":1}}],[\"8之后可以自动感知存储源的版本\",{\"1\":{\"1555\":1}}],[\"8之后的第二个lts版本\",{\"1\":{\"465\":1}}],[\"8之前不能自动感知存储源是什么\",{\"1\":{\"1555\":1}}],[\"8基础镜像\",{\"1\":{\"1551\":1}}],[\"84s\",{\"1\":{\"3278\":1}}],[\"8443\",{\"1\":{\"3107\":1}}],[\"840+0800\",{\"1\":{\"1764\":1}}],[\"84012704\",{\"1\":{\"1586\":1}}],[\"84\",{\"1\":{\"1527\":1,\"1530\":2,\"1532\":1,\"1533\":1,\"1534\":1,\"1535\":3,\"1643\":2,\"1644\":2,\"1661\":4}}],[\"8151\",{\"1\":{\"3266\":4}}],[\"81\",{\"1\":{\"1417\":1,\"1887\":1,\"1920\":1}}],[\"8192字节\",{\"1\":{\"2865\":1}}],[\"8192\",{\"1\":{\"286\":1,\"2837\":1,\"2866\":1,\"2868\":1,\"2872\":1}}],[\"890mb\",{\"1\":{\"1667\":1}}],[\"89\",{\"1\":{\"1372\":1}}],[\"862\",{\"1\":{\"1490\":2}}],[\"86\",{\"1\":{\"1369\":2,\"1887\":1}}],[\"8761\",{\"1\":{\"3246\":3}}],[\"876323262645176354l\",{\"1\":{\"2490\":1}}],[\"87\",{\"1\":{\"1368\":1,\"1370\":1}}],[\"8859\",{\"1\":{\"2881\":1,\"2884\":1,\"2885\":1}}],[\"886b\",{\"1\":{\"1918\":1}}],[\"88\",{\"1\":{\"1371\":1,\"1419\":1,\"1420\":1,\"1887\":1,\"2169\":1}}],[\"8888\",{\"1\":{\"1228\":1,\"1238\":1,\"3065\":2}}],[\"8848\",{\"1\":{\"234\":4,\"235\":1,\"236\":1,\"1367\":1,\"1643\":2,\"1648\":6,\"1685\":6}}],[\"8位\",{\"1\":{\"1221\":1}}],[\"8在哈希冲突严重时查询性能从o\",{\"1\":{\"2616\":1}}],[\"8在哈希冲突严重时\",{\"1\":{\"1196\":1}}],[\"8在java\",{\"1\":{\"538\":1}}],[\"8至jdk\",{\"1\":{\"1059\":1}}],[\"8到jdk\",{\"0\":{\"1059\":1,\"1198\":1},\"1\":{\"1198\":1}}],[\"8<\",{\"1\":{\"924\":1,\"932\":1,\"936\":1,\"938\":1,\"941\":2,\"953\":1,\"954\":1,\"956\":3,\"963\":1,\"999\":1,\"1005\":1}}],[\"8对应52\",{\"1\":{\"724\":1}}],[\"8+提供\",{\"1\":{\"2533\":1}}],[\"8+使用stream\",{\"1\":{\"2509\":1}}],[\"8+使用intstream避免装箱\",{\"1\":{\"2452\":1}}],[\"8+流api打印法\",{\"0\":{\"2219\":1}}],[\"8+的stream\",{\"1\":{\"2054\":1}}],[\"8+\",{\"0\":{\"2329\":1},\"1\":{\"1190\":1,\"1617\":1,\"1749\":1,\"2325\":2,\"2326\":1,\"2329\":1,\"2448\":1,\"3002\":1}}],[\"8+通过\",{\"1\":{\"719\":1}}],[\"8+增加元空间大小\",{\"1\":{\"702\":1}}],[\"8用元空间替代永久代的原因\",{\"1\":{\"715\":1}}],[\"8用元空间替代永久代\",{\"1\":{\"707\":1}}],[\"8后引入的optional和stream\",{\"1\":{\"1254\":1}}],[\"8后为元空间\",{\"1\":{\"706\":1}}],[\"8后元空间替代永久代\",{\"1\":{\"691\":1}}],[\"8新增了compute\",{\"1\":{\"2541\":1}}],[\"8新增\",{\"1\":{\"672\":1}}],[\"8中才引入红黑树\",{\"1\":{\"2672\":1}}],[\"8中处理哈希冲突的方式与hashmap相同\",{\"1\":{\"2643\":1}}],[\"8中处理集合的利器\",{\"1\":{\"543\":1}}],[\"8中如何处理哈希冲突\",{\"1\":{\"2643\":1}}],[\"8中hashmap的主要区别\",{\"1\":{\"2616\":1}}],[\"8中hashset的底层实现hashmap引入了红黑树优化\",{\"1\":{\"2394\":1}}],[\"8中hashset的红黑树优化原理\",{\"0\":{\"2394\":1}}],[\"8中concurrenthashmap的实现\",{\"1\":{\"2527\":1}}],[\"8中arraylist的关键源码\",{\"1\":{\"2318\":1}}],[\"8中的实现有哪些主要区别\",{\"1\":{\"2616\":1}}],[\"8中的实现有显著差异\",{\"1\":{\"2541\":1}}],[\"8中的实现差异\",{\"0\":{\"2541\":1}}],[\"8中的实现差异及性能影响\",{\"0\":{\"1196\":1}}],[\"8中的主要实现差异\",{\"1\":{\"1196\":1}}],[\"8中实现函数式接口的组合\",{\"0\":{\"557\":1}}],[\"8的stream\",{\"1\":{\"2931\":1}}],[\"8的concurrenthashmap在高并发场景下具有更好的性能和可扩展性\",{\"1\":{\"2541\":1}}],[\"8的扩容过程更稳定\",{\"1\":{\"1196\":1}}],[\"8的哈希计算更高效\",{\"1\":{\"1196\":1}}],[\"8的里程碑式更新\",{\"0\":{\"575\":1}}],[\"8的函数式接口提供了默认方法支持组合操作\",{\"1\":{\"557\":1}}],[\"8的lambda表达式并不是通过匿名内部类实现的\",{\"1\":{\"556\":1}}],[\"8的lambda表达式是如何实现的\",{\"0\":{\"556\":1}}],[\"8的接口默认方法设计体现了对向后兼容性的重视\",{\"1\":{\"549\":1}}],[\"8允许在接口中定义默认方法和静态方法\",{\"1\":{\"540\":1}}],[\"8引入红黑树的原因\",{\"1\":{\"2672\":1}}],[\"8引入lambda表达式和函数式接口\",{\"1\":{\"548\":1}}],[\"8引入的stream\",{\"1\":{\"2219\":1}}],[\"8引入的用于解决空指针异常\",{\"1\":{\"544\":1}}],[\"8引入的核心特性\",{\"1\":{\"537\":1}}],[\"8引入了函数式编程范式\",{\"1\":{\"575\":1}}],[\"8引入了全新的日期时间api\",{\"1\":{\"545\":1}}],[\"8引入了\",{\"1\":{\"538\":1}}],[\"8是java历史上的一个里程碑版本\",{\"1\":{\"535\":1}}],[\"80s\",{\"1\":{\"3278\":1}}],[\"80端口映射到宿主机的\",{\"1\":{\"1595\":1}}],[\"800\",{\"1\":{\"1467\":1}}],[\"8000\",{\"1\":{\"1092\":1,\"1877\":3,\"3180\":1,\"3190\":1}}],[\"80px\",{\"1\":{\"1442\":1}}],[\"8094\",{\"1\":{\"1644\":3,\"1649\":6,\"1688\":6}}],[\"8090\",{\"1\":{\"1367\":1}}],[\"8091\",{\"1\":{\"239\":2,\"242\":5}}],[\"8088改成私服仓库的ip+端口\",{\"1\":{\"1637\":1}}],[\"8088\",{\"1\":{\"1621\":1,\"1637\":1,\"1638\":2,\"1644\":1,\"1648\":1,\"1649\":1,\"1650\":10,\"1656\":1,\"1661\":1,\"1666\":1,\"1667\":2,\"1669\":1,\"1753\":1}}],[\"8089\",{\"1\":{\"1367\":1}}],[\"8080和1521端口\",{\"1\":{\"1569\":1}}],[\"8080\",{\"1\":{\"250\":1,\"280\":1,\"404\":1,\"1314\":2,\"1315\":2,\"1324\":2,\"1332\":2,\"1390\":4,\"1548\":1,\"1569\":4,\"1590\":4,\"1641\":7,\"1644\":1,\"1677\":1,\"1685\":1,\"1688\":1,\"1698\":1,\"1711\":1,\"1713\":11,\"1799\":3,\"1879\":1,\"1892\":1,\"1912\":1,\"1914\":1,\"2916\":1,\"2921\":2,\"3078\":1,\"3079\":1,\"3082\":1,\"3099\":2,\"3107\":1,\"3117\":1,\"3118\":1,\"3120\":1,\"3125\":1,\"3246\":3,\"3250\":2}}],[\"80\",{\"1\":{\"216\":2,\"285\":2,\"1379\":1,\"1385\":1,\"1389\":2,\"1390\":1,\"1405\":1,\"1409\":1,\"1417\":1,\"1595\":5,\"1892\":2,\"2021\":1,\"2125\":1,\"2144\":1,\"3070\":1,\"3245\":6,\"3250\":3,\"3271\":4,\"3273\":2}}],[\"8\",{\"0\":{\"245\":1,\"278\":1,\"534\":1,\"1712\":1,\"1728\":1,\"1773\":1,\"1823\":1,\"1910\":1,\"2043\":1,\"2044\":1,\"2045\":1,\"2046\":1,\"2047\":1,\"2048\":1,\"2055\":1,\"2589\":1,\"2910\":1,\"3274\":1,\"3275\":1,\"3276\":1,\"3277\":1,\"3278\":1,\"3279\":1,\"3280\":1,\"3281\":1,\"3282\":1,\"3331\":1},\"1\":{\"169\":1,\"190\":2,\"232\":1,\"248\":2,\"250\":4,\"263\":1,\"269\":2,\"285\":2,\"286\":3,\"294\":1,\"439\":1,\"543\":1,\"566\":1,\"728\":2,\"735\":1,\"936\":1,\"941\":1,\"956\":1,\"999\":1,\"1005\":2,\"1059\":1,\"1087\":1,\"1162\":1,\"1178\":1,\"1182\":2,\"1196\":3,\"1197\":1,\"1198\":1,\"1224\":1,\"1236\":1,\"1315\":2,\"1324\":2,\"1369\":2,\"1371\":1,\"1372\":1,\"1420\":1,\"1431\":3,\"1433\":1,\"1434\":1,\"1435\":1,\"1440\":3,\"1443\":3,\"1444\":2,\"1447\":1,\"1450\":1,\"1455\":1,\"1456\":1,\"1457\":1,\"1458\":2,\"1459\":1,\"1461\":1,\"1462\":2,\"1463\":1,\"1464\":1,\"1467\":1,\"1469\":2,\"1503\":5,\"1504\":1,\"1513\":2,\"1531\":1,\"1536\":6,\"1548\":2,\"1551\":3,\"1552\":1,\"1555\":2,\"1557\":2,\"1559\":1,\"1564\":2,\"1579\":1,\"1581\":1,\"1582\":1,\"1583\":5,\"1586\":2,\"1635\":3,\"1638\":1,\"1641\":1,\"1644\":2,\"1648\":1,\"1660\":4,\"1667\":5,\"1684\":1,\"1685\":1,\"1697\":1,\"1724\":4,\"1731\":1,\"1734\":1,\"1736\":1,\"1779\":1,\"1819\":1,\"1821\":1,\"1839\":1,\"1869\":1,\"1999\":1,\"2065\":1,\"2169\":1,\"2170\":2,\"2214\":2,\"2217\":2,\"2320\":1,\"2355\":1,\"2367\":1,\"2404\":1,\"2428\":1,\"2433\":2,\"2434\":1,\"2463\":1,\"2491\":1,\"2520\":1,\"2527\":1,\"2541\":4,\"2569\":1,\"2596\":2,\"2624\":1,\"2651\":1,\"2677\":1,\"2766\":2,\"2837\":1,\"2855\":2,\"2860\":1,\"2861\":1,\"2877\":1,\"2878\":2,\"2879\":1,\"2880\":1,\"2881\":1,\"2884\":2,\"2885\":1,\"2903\":1,\"2909\":1,\"2951\":1,\"3147\":2,\"3162\":1,\"3246\":3,\"3275\":4,\"3282\":1}}],[\"8gi\",{\"1\":{\"1638\":1}}],[\"8g等待30分钟左右\",{\"1\":{\"1637\":1}}],[\"8g\",{\"1\":{\"129\":1}}],[\"心跳阶段注意事项\",{\"1\":{\"169\":1}}],[\"心跳机制\",{\"0\":{\"169\":1},\"1\":{\"1115\":1}}],[\"获取最新镜像\",{\"0\":{\"3261\":1}}],[\"获取最新的数据变更指令\",{\"1\":{\"169\":1}}],[\"获取authorization头\",{\"1\":{\"3238\":1}}],[\"获取活跃对话列表\",{\"1\":{\"3209\":1}}],[\"获取方法上的注解\",{\"1\":{\"3149\":1}}],[\"获取目标节点\",{\"1\":{\"3086\":1}}],[\"获取输出流\",{\"1\":{\"3065\":2}}],[\"获取输入流\",{\"1\":{\"3065\":2}}],[\"获取输入框的id属性\",{\"1\":{\"1464\":2}}],[\"获取输入的用户名\",{\"1\":{\"1440\":1}}],[\"获取输入的用户名数据\",{\"1\":{\"1440\":1}}],[\"获取methodhandles\",{\"1\":{\"3010\":1}}],[\"获取master的状态\",{\"1\":{\"180\":1}}],[\"获取master平均每秒产生写命令数据总量write\",{\"1\":{\"171\":1}}],[\"获取无参构造函数\",{\"1\":{\"3007\":1}}],[\"获取数据库连接\",{\"1\":{\"3005\":1}}],[\"获取数组元素\",{\"1\":{\"1280\":1}}],[\"获取字段并设置值\",{\"1\":{\"3000\":1}}],[\"获取字段类型\",{\"1\":{\"2999\":1}}],[\"获取字符串长度\",{\"1\":{\"200\":1}}],[\"获取默认构造函数\",{\"1\":{\"2999\":1}}],[\"获取bean并使用\",{\"1\":{\"2999\":1}}],[\"获取bean定义\",{\"1\":{\"2999\":1}}],[\"获取bean实例\",{\"1\":{\"2999\":1}}],[\"获取公有字段\",{\"1\":{\"2984\":1}}],[\"获取公有方法\",{\"1\":{\"2983\":1}}],[\"获取公有属性\",{\"1\":{\"2971\":1}}],[\"获取setname方法的methodhandle\",{\"1\":{\"2974\":1}}],[\"获取slave最后一次连接时间间隔\",{\"1\":{\"169\":1}}],[\"获取静态属性\",{\"1\":{\"2971\":1}}],[\"获取私有属性\",{\"1\":{\"2971\":1}}],[\"获取私有字段\",{\"1\":{\"2984\":1}}],[\"获取私有字段age\",{\"1\":{\"1269\":1}}],[\"获取私有字段name\",{\"1\":{\"1269\":1}}],[\"获取实现的接口\",{\"1\":{\"2968\":1}}],[\"获取父类\",{\"1\":{\"2968\":1}}],[\"获取修饰符\",{\"1\":{\"2968\":1}}],[\"获取类上的注解\",{\"1\":{\"3149\":1}}],[\"获取类注解\",{\"1\":{\"2968\":1}}],[\"获取类名\",{\"1\":{\"2968\":1}}],[\"获取类的基本信息\",{\"0\":{\"2968\":1},\"1\":{\"2968\":1}}],[\"获取订单信息失败\",{\"1\":{\"2952\":1}}],[\"获取enumeration对象\",{\"1\":{\"2892\":1,\"2893\":1}}],[\"获取elasticsearch容器ip\",{\"0\":{\"1516\":1}}],[\"获取源文件大小\",{\"1\":{\"2837\":1}}],[\"获取用户凭证\",{\"1\":{\"3238\":1}}],[\"获取用户密码\",{\"1\":{\"3215\":1}}],[\"获取用户全名\",{\"1\":{\"2759\":1}}],[\"获取用户信息\",{\"1\":{\"1068\":1}}],[\"获取大于指定元素的最小元素\",{\"1\":{\"2658\":1}}],[\"获取小于指定元素的最大元素\",{\"1\":{\"2658\":1}}],[\"获取集合的迭代器\",{\"1\":{\"2658\":1}}],[\"获取集合的大小\",{\"1\":{\"203\":1}}],[\"获取并移除队列头部元素\",{\"1\":{\"2574\":1}}],[\"获取在线用户数\",{\"1\":{\"2525\":1}}],[\"获取会话状态\",{\"1\":{\"3235\":1}}],[\"获取会话\",{\"1\":{\"2525\":1}}],[\"获取缓存大小\",{\"1\":{\"2512\":1}}],[\"获取缓存中的值\",{\"1\":{\"2512\":1}}],[\"获取节点\",{\"1\":{\"2512\":1}}],[\"获取节点的前驱\",{\"1\":{\"2496\":1}}],[\"获取节点的后继\",{\"1\":{\"2496\":1}}],[\"获取节点的元素\",{\"1\":{\"2496\":1}}],[\"获取前一个元素的索引\",{\"1\":{\"2498\":1}}],[\"获取前一个元素\",{\"1\":{\"2498\":1}}],[\"获取前后端入门教程\",{\"1\":{\"1851\":1}}],[\"获取尾节点的前驱\",{\"1\":{\"2497\":1}}],[\"获取尾节点的元素\",{\"1\":{\"2497\":1}}],[\"获取尾部元素\",{\"1\":{\"2319\":1,\"2497\":1}}],[\"获取头节点的后继\",{\"1\":{\"2497\":1}}],[\"获取头节点的元素\",{\"1\":{\"2497\":1}}],[\"获取头部元素\",{\"1\":{\"2319\":1,\"2497\":1}}],[\"获取指定key的值\",{\"1\":{\"2629\":1}}],[\"获取指定节点\",{\"1\":{\"2495\":1}}],[\"获取指定节点的前驱\",{\"1\":{\"2494\":1}}],[\"获取指定位置的元素\",{\"1\":{\"2439\":1,\"2495\":1}}],[\"获取有序元素\",{\"1\":{\"2480\":1}}],[\"获取有序集合中指定分数范围内的元素\",{\"1\":{\"204\":1}}],[\"获取有序集合中指定范围内的元素\",{\"1\":{\"204\":1}}],[\"获取有序集合的大小\",{\"1\":{\"204\":1}}],[\"获取下一个元素的索引\",{\"1\":{\"2498\":1}}],[\"获取下一个元素\",{\"1\":{\"2441\":1,\"2498\":2}}],[\"获取要删除的元素\",{\"1\":{\"2440\":1}}],[\"获取旧元素\",{\"1\":{\"2439\":1}}],[\"获取和修改元素\",{\"0\":{\"2439\":1,\"2495\":1}}],[\"获取子列表\",{\"1\":{\"2324\":1}}],[\"获取子字符串\",{\"1\":{\"200\":1}}],[\"获取每行的实际长度\",{\"1\":{\"2181\":1}}],[\"获取年龄\",{\"1\":{\"2091\":1}}],[\"获取姓名\",{\"1\":{\"2091\":1,\"2970\":1}}],[\"获取文档\",{\"1\":{\"1962\":1}}],[\"获取本机ip地址\",{\"0\":{\"1875\":1},\"1\":{\"1835\":1}}],[\"获取认证\",{\"1\":{\"1636\":1}}],[\"获取kafka信息\",{\"1\":{\"1535\":1}}],[\"获取到system\",{\"1\":{\"1527\":1}}],[\"获取logstash镜像\",{\"0\":{\"1522\":1}}],[\"获取内存中的字符数组\",{\"1\":{\"2857\":1}}],[\"获取内存中的字节数组\",{\"1\":{\"2844\":1}}],[\"获取内核源码\",{\"0\":{\"1488\":1}}],[\"获取内容实现类\",{\"1\":{\"289\":1}}],[\"获取或设置标签的文本\",{\"1\":{\"1465\":1}}],[\"获取class对象有三种常用方式\",{\"1\":{\"2965\":1}}],[\"获取class对象的方式有以下四种\",{\"1\":{\"1260\":1}}],[\"获取css样式\",{\"1\":{\"1463\":1}}],[\"获取div的样式\",{\"1\":{\"1463\":1}}],[\"获取div的文本\",{\"1\":{\"1461\":1}}],[\"获取div标签的文本内容\",{\"1\":{\"1461\":1}}],[\"获取标签的文本内容\",{\"1\":{\"1461\":1}}],[\"获取焦点事件\",{\"1\":{\"1450\":1}}],[\"获取元素失败\",{\"1\":{\"2450\":1}}],[\"获取元素\",{\"1\":{\"1447\":1,\"2161\":1,\"2324\":1,\"3041\":1}}],[\"获取元素在有序集合中的分数\",{\"1\":{\"204\":1}}],[\"获取元素在有序集合中的排名\",{\"1\":{\"204\":1}}],[\"获取点击按钮的文本内容\",{\"1\":{\"1444\":1}}],[\"获取必要信息\",{\"1\":{\"1443\":2}}],[\"获取请求参数\",{\"1\":{\"1431\":1,\"1440\":2,\"1443\":2,\"1444\":2}}],[\"获取池中可用连接数\",{\"1\":{\"1326\":1}}],[\"获取连接\",{\"1\":{\"1326\":1,\"3241\":1}}],[\"获取\",{\"1\":{\"1263\":1,\"2506\":2,\"2936\":1,\"2965\":2}}],[\"获取就绪事件集合\",{\"1\":{\"1228\":2,\"1315\":1,\"2916\":2,\"3118\":1}}],[\"获取键集快照后迭代\",{\"1\":{\"2694\":1}}],[\"获取键对应的值\",{\"1\":{\"1181\":1}}],[\"获取键值\",{\"1\":{\"200\":1}}],[\"获取引导类加载器\",{\"1\":{\"1147\":1}}],[\"获取当前部署\",{\"1\":{\"3244\":1}}],[\"获取当前类声明的所有方法\",{\"1\":{\"2983\":1}}],[\"获取当前类声明的方法\",{\"1\":{\"2983\":1}}],[\"获取当前数组长度\",{\"1\":{\"2438\":1}}],[\"获取当前活跃连接数\",{\"1\":{\"1326\":1}}],[\"获取当前值和版本号\",{\"1\":{\"1139\":1}}],[\"获取当前日期\",{\"1\":{\"545\":1}}],[\"获取老年代垃圾收集器\",{\"1\":{\"772\":1}}],[\"获取新生代垃圾收集器\",{\"1\":{\"772\":2}}],[\"获取启动类加载器\",{\"1\":{\"745\":1}}],[\"获取扩展类加载器\",{\"1\":{\"745\":1,\"1147\":1}}],[\"获取系统类加载器\",{\"1\":{\"745\":1,\"1147\":1}}],[\"获取jvm内存信息\",{\"1\":{\"694\":1}}],[\"获取日期信息\",{\"1\":{\"545\":1}}],[\"获取值\",{\"1\":{\"544\":1}}],[\"获取单个用户\",{\"1\":{\"427\":1}}],[\"获取所有字段\",{\"1\":{\"2999\":1}}],[\"获取所有公有方法\",{\"1\":{\"2983\":1}}],[\"获取所有可用的字符集\",{\"1\":{\"2881\":1}}],[\"获取所有的商品复选框元素\",{\"1\":{\"1467\":3}}],[\"获取所有的商品项复选框元素\",{\"1\":{\"1467\":3}}],[\"获取所有用户\",{\"1\":{\"427\":1}}],[\"获取所有slave的状态\",{\"1\":{\"180\":1}}],[\"获取操作系统的缓存临时目录\",{\"1\":{\"286\":1}}],[\"获取响应体\",{\"1\":{\"285\":1}}],[\"获取响应\",{\"1\":{\"285\":1}}],[\"获取响应对象\",{\"1\":{\"285\":1}}],[\"获取两个集合的差集\",{\"1\":{\"281\":1}}],[\"获取两个集合交集的补集\",{\"1\":{\"281\":1}}],[\"获取两个集合交集\",{\"1\":{\"281\":1}}],[\"获取两个集合并集\",{\"1\":{\"281\":1}}],[\"获取参数名称\",{\"1\":{\"3002\":1}}],[\"获取参数值\",{\"1\":{\"279\":1}}],[\"获取参数bean\",{\"1\":{\"279\":1}}],[\"获取业务数据导出\",{\"1\":{\"270\":1}}],[\"获取真实ip以及websocket需添加的配置\",{\"1\":{\"216\":1}}],[\"获取列表指定索引位置的元素\",{\"1\":{\"202\":1}}],[\"获取列表指定范围内的元素\",{\"1\":{\"202\":1}}],[\"获取列表长度\",{\"1\":{\"202\":1}}],[\"获取哈希表前先清理过期条目\",{\"1\":{\"2682\":1}}],[\"获取哈希中所有值\",{\"1\":{\"201\":1}}],[\"获取哈希中所有字段和值\",{\"1\":{\"201\":1}}],[\"获取哈希中所有字段\",{\"1\":{\"201\":1}}],[\"获取哈希中字段的数量\",{\"1\":{\"201\":1}}],[\"获取哈希字段值\",{\"1\":{\"201\":1}}],[\"获取多个哈希字段值\",{\"1\":{\"201\":1}}],[\"获取慢查询日志条目数\",{\"1\":{\"193\":1}}],[\"获取慢查询日志信息\",{\"1\":{\"193\":1}}],[\"获取慢查询日志\",{\"1\":{\"193\":1}}],[\"获取的数据在数据库中也不存在\",{\"1\":{\"192\":1}}],[\"获取各个sentinel的状态\",{\"1\":{\"180\":1}}],[\"获得\",{\"1\":{\"1432\":1,\"1464\":2,\"1465\":2,\"3246\":1}}],[\"获得字符串形式的响应数据\",{\"1\":{\"1432\":1}}],[\"获得响应数据形式\",{\"1\":{\"1432\":1}}],[\"获得的信息包大于\",{\"1\":{\"125\":1}}],[\"获得来自主服务器的致命错误\",{\"1\":{\"125\":1}}],[\"获得来自fcntl\",{\"1\":{\"125\":1}}],[\"获得来自连接管道的读错误\",{\"1\":{\"125\":1}}],[\"获得来自regexp的错误\",{\"1\":{\"125\":1}}],[\"获得信息包无序\",{\"1\":{\"125\":1}}],[\"获得信息包大于\",{\"1\":{\"125\":1}}],[\"获得信号\",{\"1\":{\"125\":1}}],[\"作者信息\",{\"1\":{\"3246\":1}}],[\"作者\",{\"1\":{\"1551\":1,\"1687\":1,\"1794\":1}}],[\"作者设置为\",{\"1\":{\"29\":1}}],[\"作为多媒体会话控制的核心协议\",{\"1\":{\"3201\":1}}],[\"作为键\",{\"1\":{\"2675\":1}}],[\"作为treemap键的对象应保持不可变\",{\"1\":{\"2669\":1}}],[\"作为map中的value占位符\",{\"1\":{\"2622\":1,\"2649\":1}}],[\"作为map的key\",{\"1\":{\"2395\":1}}],[\"作为hashmap键的对象必须保证哈希值不变\",{\"1\":{\"2612\":1}}],[\"作为hashmap中的value占位符\",{\"1\":{\"2594\":1}}],[\"作为栈使用\",{\"1\":{\"2468\":1}}],[\"作为方法返回值\",{\"1\":{\"2395\":1}}],[\"作为方法参数或返回值\",{\"1\":{\"2358\":1}}],[\"作为流操作的结果收集容器\",{\"1\":{\"2358\":1}}],[\"作为队列使用\",{\"1\":{\"2468\":1}}],[\"作为队列使用时应优先使用queue接口方法\",{\"1\":{\"2349\":1}}],[\"作为队列使用的最佳实践\",{\"0\":{\"2349\":1}}],[\"作为参数传递时不会被修改\",{\"1\":{\"2192\":1,\"2300\":1}}],[\"作为守护进程运行yes\",{\"1\":{\"1788\":1}}],[\"作为ip通信的核心协议\",{\"1\":{\"1089\":1}}],[\"作为jdk的一部分\",{\"1\":{\"494\":1}}],[\"作为java\",{\"1\":{\"465\":1}}],[\"作为数据源输入\",{\"1\":{\"271\":1}}],[\"作用域\",{\"1\":{\"556\":1}}],[\"作用2\",{\"1\":{\"169\":1}}],[\"作用1\",{\"1\":{\"169\":1}}],[\"作用\",{\"1\":{\"167\":3,\"169\":1,\"171\":1,\"989\":1,\"1064\":1,\"3135\":1,\"3179\":1,\"3246\":1}}],[\"例如在通话过程中\",{\"1\":{\"3182\":1}}],[\"例如在apache和nginx这种web服务器中\",{\"1\":{\"1887\":1}}],[\"例如跳过了一些重要的初始化或清理代码\",{\"1\":{\"2138\":1}}],[\"例如var在java\",{\"1\":{\"2084\":1}}],[\"例如null\",{\"1\":{\"2084\":1}}],[\"例如class是关键字\",{\"1\":{\"2084\":1}}],[\"例如是io操作频繁\",{\"1\":{\"1887\":1}}],[\"例如我们调用系统函数\",{\"1\":{\"1887\":1}}],[\"例如我们读取文件\",{\"1\":{\"1887\":1}}],[\"例如设置以4\",{\"1\":{\"1478\":1}}],[\"例如当出现502错误时会调用此页面\",{\"1\":{\"1384\":1}}],[\"例如个人网站使用的虚拟机\",{\"1\":{\"1383\":1}}],[\"例如spring\",{\"1\":{\"398\":1}}],[\"例如set\",{\"1\":{\"167\":1}}],[\"例如a依赖于b\",{\"1\":{\"331\":1}}],[\"例如返回\",{\"1\":{\"306\":1}}],[\"例如下面的内容\",{\"1\":{\"303\":1}}],[\"例如每天随机分配60个加密串\",{\"1\":{\"192\":1}}],[\"例如30\",{\"1\":{\"192\":1}}],[\"例如超时查询\",{\"1\":{\"190\":1}}],[\"例如\",{\"1\":{\"167\":1,\"306\":2,\"423\":1,\"434\":2,\"445\":2,\"602\":1,\"618\":1,\"681\":1,\"749\":1,\"750\":1,\"756\":2,\"926\":1,\"1139\":2,\"1280\":1,\"1281\":1,\"1376\":1,\"1455\":1,\"1496\":1,\"1530\":3,\"1787\":1,\"1827\":2,\"2041\":1,\"2105\":1,\"2119\":2,\"2513\":1,\"2754\":1,\"2763\":1,\"3141\":1}}],[\"组合多个bytebuf而不发生拷贝\",{\"1\":{\"3130\":1}}],[\"组合多个输入流顺序读取\",{\"1\":{\"2897\":1}}],[\"组合多个输入流的示例\",{\"0\":{\"2892\":1},\"1\":{\"2892\":1}}],[\"组合多个输入流\",{\"1\":{\"2890\":1}}],[\"组合优于继承\",{\"1\":{\"3009\":1}}],[\"组合流中如果某个流为null\",{\"1\":{\"2896\":1}}],[\"组合流内容\",{\"1\":{\"2891\":1,\"2892\":1}}],[\"组合模式\",{\"1\":{\"2895\":1}}],[\"组合两个输入流的示例\",{\"0\":{\"2891\":1},\"1\":{\"2891\":1}}],[\"组合两个输入流\",{\"1\":{\"2890\":1}}],[\"组合方式\",{\"1\":{\"2748\":1}}],[\"组合是\",{\"1\":{\"2748\":1}}],[\"组合实现优雅关闭\",{\"1\":{\"633\":1}}],[\"组名是否一致\",{\"1\":{\"1696\":1}}],[\"组织或项目标识\",{\"1\":{\"937\":1}}],[\"组成\",{\"1\":{\"167\":2}}],[\"组件注册\",{\"1\":{\"3159\":1}}],[\"组件\",{\"0\":{\"24\":1,\"31\":1},\"1\":{\"31\":1}}],[\"长度字段调整值\",{\"1\":{\"3126\":1}}],[\"长度字段长度\",{\"1\":{\"3126\":1}}],[\"长度字段偏移量\",{\"1\":{\"3126\":1}}],[\"长度前缀\",{\"1\":{\"3090\":1}}],[\"长度验证注解\",{\"1\":{\"3003\":1}}],[\"长度相同则按字母顺序\",{\"1\":{\"2660\":1}}],[\"长度相同才继续比较\",{\"1\":{\"2294\":1}}],[\"长度\",{\"1\":{\"2271\":1}}],[\"长度固定\",{\"1\":{\"2155\":1}}],[\"长度为3\",{\"1\":{\"2144\":1}}],[\"长度为5\",{\"1\":{\"2144\":1}}],[\"长度为4的int数组\",{\"1\":{\"2144\":1}}],[\"长度4\",{\"1\":{\"2065\":1}}],[\"长度41位\",{\"1\":{\"171\":1}}],[\"长这样\",{\"1\":{\"303\":1}}],[\"长期运行会产生内存碎片\",{\"1\":{\"783\":1}}],[\"长期存活对象进入老年代\",{\"1\":{\"708\":1}}],[\"长期支持\",{\"1\":{\"494\":1}}],[\"长期使用\",{\"1\":{\"192\":1}}],[\"长期占用内存的冷数据会被持续清理\",{\"1\":{\"153\":1}}],[\"长时间网络中断\",{\"1\":{\"167\":1}}],[\"适应性\",{\"1\":{\"2357\":1}}],[\"适应不同场景\",{\"1\":{\"2331\":1}}],[\"适应不同的场景\",{\"1\":{\"1028\":1}}],[\"适配器模式\",{\"1\":{\"1231\":1,\"2859\":1,\"2883\":1}}],[\"适用场景和底层实现三个维度进行回答\",{\"1\":{\"1221\":1}}],[\"适用场景\",{\"1\":{\"651\":1,\"686\":1,\"784\":1,\"1238\":1,\"1314\":1,\"1315\":1,\"1316\":1,\"2201\":1,\"2227\":1,\"2253\":1,\"2275\":1,\"2310\":1,\"2354\":1,\"2454\":1,\"2461\":1,\"2511\":1,\"2518\":1,\"2897\":1,\"2913\":1,\"3091\":1,\"3206\":1}}],[\"适用于连接数少但数据量大的场景\",{\"1\":{\"3130\":1}}],[\"适用于连接数多但数据量小的场景\",{\"1\":{\"3130\":1}}],[\"适用于io密集型应用\",{\"1\":{\"3091\":1}}],[\"适用于暂时性错误\",{\"1\":{\"3087\":1}}],[\"适用于写入操作\",{\"1\":{\"3040\":1}}],[\"适用于读取操作\",{\"1\":{\"3039\":1}}],[\"适用于读多写少的场景\",{\"1\":{\"2392\":1}}],[\"适用于读多写少场景\",{\"1\":{\"2340\":1}}],[\"适用于大多数场景\",{\"1\":{\"2872\":1}}],[\"适用于不同场景\",{\"1\":{\"2861\":1}}],[\"适用于不需要保证元素顺序\",{\"1\":{\"2391\":1}}],[\"适用于所有类型的文件\",{\"1\":{\"2839\":1}}],[\"适用于所有类型文件\",{\"1\":{\"2830\":1}}],[\"适用于所有数组类型\",{\"1\":{\"2211\":1}}],[\"适用于可以接受短暂数据不一致的高并发场景\",{\"1\":{\"2543\":1}}],[\"适用于并发度不高的场景\",{\"1\":{\"2456\":1,\"2513\":1}}],[\"适用于需要处理大量并发连接且io操作耗时较长的场景\",{\"1\":{\"3091\":1}}],[\"适用于需要按顺序读取多个数据源的场景\",{\"1\":{\"2897\":1}}],[\"适用于需要对元素进行排序或需要执行范围查询的场景\",{\"1\":{\"2391\":1}}],[\"适用于需要保证元素插入顺序\",{\"1\":{\"2391\":1}}],[\"适用于需要修改数组元素的场景\",{\"1\":{\"1160\":1}}],[\"适用于存储常量数据或作为方法返回值防止外部修改\",{\"1\":{\"2378\":1}}],[\"适用于多线程环境下的数据通信\",{\"1\":{\"2897\":1}}],[\"适用于多线程竞争场景\",{\"1\":{\"645\":1}}],[\"适用于多维数组\",{\"1\":{\"2234\":1}}],[\"适用于一维数组\",{\"1\":{\"2234\":1}}],[\"适用于无法访问互联网的环境\",{\"1\":{\"1635\":1}}],[\"适用于能访问互联网的环境\",{\"1\":{\"1632\":1}}],[\"适用于政务内网\",{\"1\":{\"1608\":1}}],[\"适用于实时性要求高的场景如视频通话\",{\"1\":{\"3062\":1}}],[\"适用于实时性要求高的场景\",{\"1\":{\"1344\":1}}],[\"适用于什么场景\",{\"1\":{\"784\":1}}],[\"适用于client模式\",{\"1\":{\"769\":1}}],[\"适用于以下场景\",{\"1\":{\"477\":1}}],[\"适量错峰\",{\"1\":{\"166\":1}}],[\"适合实时性要求高的场景\",{\"1\":{\"3227\":1}}],[\"适合实现内存敏感的缓存\",{\"1\":{\"2698\":1}}],[\"适合表示固定数量的状态\",{\"1\":{\"2824\":1}}],[\"适合读操作远多于写操作的场景\",{\"1\":{\"2356\":1}}],[\"适合读多写少的高并发场景\",{\"1\":{\"2513\":1}}],[\"适合读多写少的场景\",{\"1\":{\"1132\":1}}],[\"适合读多写少场景\",{\"1\":{\"2356\":2,\"2456\":1}}],[\"适合并发量小的场景\",{\"1\":{\"2356\":1}}],[\"适合频繁在首尾插入删除\",{\"1\":{\"2354\":1}}],[\"适合频繁访问\",{\"1\":{\"2354\":1}}],[\"适合作为map键\",{\"1\":{\"2207\":1}}],[\"适合于未知循环次数的情况\",{\"1\":{\"2138\":1}}],[\"适合于已知循环次数的情况\",{\"1\":{\"2138\":1}}],[\"适合使用netty的场景\",{\"1\":{\"1347\":1}}],[\"适合复杂配置和跨语言场景\",{\"1\":{\"1086\":1}}],[\"适合对jvm调优不熟悉的场景\",{\"1\":{\"811\":1,\"845\":1,\"879\":1,\"913\":1}}],[\"适合存储临时对象缓存\",{\"1\":{\"2698\":1}}],[\"适合存储简单的数值\",{\"1\":{\"2105\":1}}],[\"适合存不重复value的数据\",{\"1\":{\"135\":1}}],[\"适合存有顺序的数据\",{\"1\":{\"134\":1}}],[\"适合存对象\",{\"1\":{\"133\":1}}],[\"适合存简单数据\",{\"1\":{\"132\":1}}],[\"适合处理大量的非结构化或半结构化数据\",{\"1\":{\"35\":1}}],[\"致使slave陷入死循环状态\",{\"1\":{\"166\":1}}],[\"影响\",{\"1\":{\"2873\":5}}],[\"影响迭代行为\",{\"1\":{\"2689\":1}}],[\"影响系统运行的错误\",{\"1\":{\"2070\":1}}],[\"影响性能\",{\"1\":{\"532\":1,\"703\":1,\"813\":1,\"847\":1,\"881\":1,\"915\":1,\"2386\":1,\"2614\":1,\"2639\":1}}],[\"影响的客户端数量\",{\"1\":{\"193\":1}}],[\"影响业务正常执行\",{\"1\":{\"166\":1}}],[\"影响数据淘汰的相关配置如下\",{\"1\":{\"157\":1}}],[\"包所在路径创建文件\",{\"1\":{\"3246\":1}}],[\"包所在路径创建\",{\"1\":{\"3246\":1}}],[\"包更新到最新\",{\"1\":{\"3245\":1}}],[\"包管理\",{\"1\":{\"2810\":1}}],[\"包内组件协作\",{\"1\":{\"2796\":1}}],[\"包com\",{\"1\":{\"2796\":1}}],[\"包导入语法\",{\"0\":{\"2768\":1}}],[\"包级私有工具类\",{\"1\":{\"2765\":1}}],[\"包级私有类示例\",{\"1\":{\"2765\":1}}],[\"包私有方法\",{\"1\":{\"2796\":1}}],[\"包私有类\",{\"1\":{\"2796\":1}}],[\"包私有\",{\"0\":{\"2796\":1},\"1\":{\"2765\":1}}],[\"包的访问控制\",{\"0\":{\"2765\":1}}],[\"包的命名规范\",{\"0\":{\"2763\":1}}],[\"包用于组织类并控制访问权限\",{\"1\":{\"2756\":1}}],[\"包和变量三大核心元素\",{\"1\":{\"2756\":1}}],[\"包名\",{\"0\":{\"2000\":1},\"1\":{\"1778\":1}}],[\"包\",{\"0\":{\"2755\":1,\"2762\":1},\"1\":{\"1438\":1,\"2762\":1,\"3246\":1}}],[\"包装字节数组而不拷贝\",{\"1\":{\"3130\":1}}],[\"包装原始异常\",{\"1\":{\"2937\":1}}],[\"包装其他输出流\",{\"1\":{\"2907\":1}}],[\"包装或使用concurrentskiplistset\",{\"1\":{\"2586\":1}}],[\"包装可变集合\",{\"1\":{\"2358\":1}}],[\"包装\",{\"1\":{\"2328\":1,\"2692\":1}}],[\"包装节点流或其他处理流\",{\"1\":{\"1222\":1}}],[\"包装为可修改的arraylist\",{\"1\":{\"1191\":1}}],[\"包装类缓存机制\",{\"1\":{\"1040\":1}}],[\"包装类\",{\"1\":{\"1040\":3}}],[\"包装成zip格式输出流\",{\"1\":{\"286\":1}}],[\"包扫描\",{\"1\":{\"461\":1}}],[\"包围连接点的通知\",{\"1\":{\"336\":1}}],[\"包含认证挑战\",{\"1\":{\"3215\":1}}],[\"包含www\",{\"1\":{\"3215\":1}}],[\"包含确认过程\",{\"1\":{\"3208\":1}}],[\"包含to\",{\"1\":{\"3199\":1}}],[\"包含必要的头域和sdp媒体描述\",{\"1\":{\"3190\":1}}],[\"包含必要的错误码和上下文信息\",{\"1\":{\"2938\":1}}],[\"包含序列号和方法\",{\"1\":{\"3180\":1}}],[\"包含一个唯一标签\",{\"1\":{\"3180\":1}}],[\"包含状态码\",{\"1\":{\"3179\":1}}],[\"包含时间戳\",{\"1\":{\"3110\":1}}],[\"包含以下关键信息\",{\"1\":{\"2981\":1}}],[\"包含错误码\",{\"1\":{\"2960\":1}}],[\"包含账户id和余额信息\",{\"1\":{\"2947\":1}}],[\"包含异常信息和堆栈跟踪\",{\"1\":{\"2925\":1}}],[\"包含要放入此列表的元素的集合\",{\"1\":{\"2436\":1,\"2493\":1}}],[\"包含关系\",{\"1\":{\"2372\":1}}],[\"包含大量元素\",{\"1\":{\"2355\":1}}],[\"包含判断\",{\"1\":{\"2195\":1}}],[\"包含作者\",{\"1\":{\"2035\":1}}],[\"包含请求参数的原始uri\",{\"1\":{\"1412\":1}}],[\"包含了类的所有信息\",{\"1\":{\"1260\":1,\"2965\":1}}],[\"包含了大量的常用依赖\",{\"1\":{\"974\":1,\"976\":1}}],[\"包含put\",{\"1\":{\"1181\":1}}],[\"包含静态变量\",{\"1\":{\"1037\":1}}],[\"包含main\",{\"1\":{\"743\":1}}],[\"包含局部变量表\",{\"1\":{\"691\":1}}],[\"包含applet\",{\"1\":{\"574\":1}}],[\"包含beanfactory和applicationcontext\",{\"1\":{\"313\":1}}],[\"包含rdb过程接收的数据\",{\"1\":{\"166\":1}}],[\"包括企业通信系统\",{\"1\":{\"3230\":1}}],[\"包括协议栈架构\",{\"1\":{\"3201\":1}}],[\"包括私有方法\",{\"1\":{\"2983\":1}}],[\"包括私有属性\",{\"1\":{\"2971\":1}}],[\"包括继承的公有方法\",{\"1\":{\"2983\":1}}],[\"包括class对象的生成\",{\"1\":{\"2977\":1}}],[\"包括cpu型号\",{\"1\":{\"1838\":1}}],[\"包括公有方法\",{\"1\":{\"2970\":1}}],[\"包括无参构造和有参构造\",{\"1\":{\"2969\":1}}],[\"包括无符号数和表两种数据类型\",{\"1\":{\"723\":1}}],[\"包括类加载\",{\"1\":{\"3100\":1}}],[\"包括类名\",{\"1\":{\"2968\":1}}],[\"包括类型擦除原理\",{\"1\":{\"1283\":1}}],[\"包括按行读写功能\",{\"1\":{\"2867\":1}}],[\"包括输入空间\",{\"1\":{\"2703\":1}}],[\"包括未使用的桶\",{\"1\":{\"2641\":1}}],[\"包括延迟初始化等\",{\"1\":{\"2355\":1}}],[\"包括排序\",{\"1\":{\"2148\":1}}],[\"包括参数\",{\"1\":{\"2065\":1}}],[\"包括工具选择\",{\"1\":{\"2029\":1}}],[\"包括文档\",{\"1\":{\"1972\":1}}],[\"包括文档创建工具\",{\"1\":{\"1971\":1}}],[\"包括文档的生成\",{\"1\":{\"1985\":1}}],[\"包括文档的创建者\",{\"1\":{\"1971\":1}}],[\"包括文档的创建流程\",{\"1\":{\"1971\":1}}],[\"包括文档的分类\",{\"1\":{\"1959\":1}}],[\"包括文档的更新频率\",{\"1\":{\"1946\":1}}],[\"包括文档的内容\",{\"1\":{\"1946\":1}}],[\"包括文档的格式\",{\"1\":{\"1946\":1}}],[\"包括需求文档\",{\"1\":{\"1971\":1}}],[\"包括api的版本号\",{\"1\":{\"1945\":1}}],[\"包括api的限制\",{\"1\":{\"1945\":1}}],[\"包括接口名称\",{\"1\":{\"1945\":1,\"1946\":1}}],[\"包括端口\",{\"1\":{\"1932\":1}}],[\"包括时间中断\",{\"1\":{\"1887\":1}}],[\"包括io等待和实际操作的耗时\",{\"1\":{\"1884\":1}}],[\"包括以下信息\",{\"1\":{\"1809\":1}}],[\"包括本机推送远程文件\",{\"1\":{\"1501\":1}}],[\"包括b的子级\",{\"1\":{\"1456\":1}}],[\"包括bean的创建\",{\"1\":{\"413\":1}}],[\"包括常见面试题解析\",{\"1\":{\"1240\":1}}],[\"包括基础循环打印\",{\"1\":{\"2209\":1}}],[\"包括基础概念辨析\",{\"1\":{\"1218\":1}}],[\"包括基础命令\",{\"1\":{\"195\":1}}],[\"包括方法名\",{\"1\":{\"1068\":1}}],[\"包括方法区\",{\"1\":{\"690\":1}}],[\"包括try\",{\"1\":{\"1044\":1}}],[\"包括自动装箱\",{\"1\":{\"1040\":1}}],[\"包括中央仓库和私服\",{\"1\":{\"939\":1}}],[\"包括详细信息和时间戳\",{\"1\":{\"816\":1,\"850\":1,\"884\":1,\"918\":1}}],[\"包括单元测试\",{\"1\":{\"447\":1}}],[\"包括jdbc\",{\"1\":{\"436\":1}}],[\"包括restful\",{\"1\":{\"425\":1}}],[\"包括handlerinterceptor接口和webmvcconfigurer的addinterceptors方法\",{\"1\":{\"383\":1}}],[\"包括\",{\"1\":{\"378\":1,\"1738\":1}}],[\"包括dispatcherservlet\",{\"1\":{\"377\":1}}],[\"包括drivermanagerdatasource\",{\"1\":{\"369\":1}}],[\"包括spring生态中的注解实践\",{\"1\":{\"3156\":1}}],[\"包括spring\",{\"1\":{\"375\":1}}],[\"包括对jdbc\",{\"1\":{\"361\":1}}],[\"包括编程式事务管理和声明式事务管理\",{\"1\":{\"346\":1}}],[\"包括编译时织入\",{\"1\":{\"344\":1}}],[\"包括前置通知\",{\"1\":{\"335\":1}}],[\"包括数据访问\",{\"1\":{\"309\":1}}],[\"包括数据库命令\",{\"1\":{\"77\":1}}],[\"包括范围分片和哈希分片\",{\"1\":{\"70\":1}}],[\"包括索引优化\",{\"1\":{\"66\":1}}],[\"包括map阶段和reduce阶段\",{\"1\":{\"64\":1}}],[\"包括插入数据\",{\"1\":{\"45\":1}}],[\"包括过滤\",{\"1\":{\"39\":1}}],[\"恢复自动提交\",{\"1\":{\"3005\":1}}],[\"恢复原始输出流\",{\"1\":{\"2909\":1}}],[\"恢复用户线程\",{\"1\":{\"777\":2}}],[\"恢复数据\",{\"1\":{\"171\":1}}],[\"恢复数据使用\",{\"1\":{\"167\":1}}],[\"恢复部分同步数据\",{\"1\":{\"166\":1}}],[\"恢复rdb同步数据\",{\"1\":{\"166\":1}}],[\"恢复速度\",{\"1\":{\"141\":1}}],[\"接受新连接\",{\"1\":{\"2916\":1,\"2921\":1}}],[\"接受writer或outputstream\",{\"1\":{\"2909\":1}}],[\"接受outputstream\",{\"1\":{\"2909\":1}}],[\"接受连接事件\",{\"1\":{\"3118\":1}}],[\"接受连接处理器\",{\"1\":{\"2921\":1}}],[\"接受连接\",{\"1\":{\"1238\":1,\"3120\":1,\"3121\":1}}],[\"接着把后面的yes设置为no即可\",{\"1\":{\"1788\":1}}],[\"接着在nginx配置文件中根据之前事先保存的文件开启访问验证\",{\"1\":{\"1418\":1}}],[\"接入skywalking\",{\"1\":{\"1563\":1}}],[\"接入感知\",{\"1\":{\"1117\":1}}],[\"接下来10个字节\",{\"1\":{\"2849\":1}}],[\"接下来控制台会输出各种编译过程中输出的内容\",{\"1\":{\"1784\":1}}],[\"接下来执行\",{\"1\":{\"1416\":1}}],[\"接下来我们来看看两个算法的介绍\",{\"1\":{\"1397\":1}}],[\"接下来我们可以通过一个简单的例子来看下\",{\"1\":{\"1397\":1}}],[\"接下来就是由选举胜出的sentinel去从slave中选一个新的master出来的工作\",{\"1\":{\"182\":1}}],[\"接下来就要通过某种方式将master和slave连接到一起\",{\"1\":{\"165\":1}}],[\"接口标准化\",{\"1\":{\"3068\":2}}],[\"接口和方法时使用类型参数\",{\"1\":{\"3013\":1,\"3016\":1}}],[\"接口和数组\",{\"1\":{\"2100\":1}}],[\"接口信息\",{\"1\":{\"2981\":1}}],[\"接口中定义的成员默认都是public\",{\"1\":{\"2801\":1}}],[\"接口中可定义私有辅助方法\",{\"1\":{\"1059\":1}}],[\"接口成员权限\",{\"1\":{\"2801\":1}}],[\"接口是实现多态的重要方式\",{\"1\":{\"2742\":1}}],[\"接口与多态\",{\"0\":{\"2742\":1}}],[\"接口与实现分离原则\",{\"0\":{\"2331\":1,\"2559\":1}}],[\"接口与实现分离\",{\"0\":{\"2375\":1,\"2412\":1},\"1\":{\"563\":1,\"2331\":1}}],[\"接口继承+功能扩展\",{\"1\":{\"2470\":1}}],[\"接口设计模式\",{\"0\":{\"2470\":1}}],[\"接口设计原则\",{\"0\":{\"2446\":1,\"2637\":1}}],[\"接口隔离\",{\"1\":{\"2446\":1,\"2812\":1}}],[\"接口隔离原则\",{\"0\":{\"1211\":1,\"2772\":1},\"1\":{\"549\":1,\"2005\":1,\"2800\":1,\"2871\":1,\"2973\":1}}],[\"接口层\",{\"1\":{\"2331\":1}}],[\"接口必须包含javadoc\",{\"1\":{\"2035\":1}}],[\"接口定义示例\",{\"0\":{\"1948\":1}}],[\"接口定义\",{\"1\":{\"1945\":1}}],[\"接口生命周期跟踪\",{\"1\":{\"1562\":1}}],[\"接口实现示例\",{\"0\":{\"1949\":1}}],[\"接口实现\",{\"1\":{\"1216\":1,\"2808\":1}}],[\"接口实现类可以直接继承默认方法\",{\"1\":{\"541\":1}}],[\"接口臃肿\",{\"1\":{\"1215\":1}}],[\"接口方法不断丰富\",{\"1\":{\"1198\":1}}],[\"接口私有方法\",{\"1\":{\"1059\":1}}],[\"接口可以有默认实现\",{\"1\":{\"1059\":1}}],[\"接口演进与向后兼容性\",{\"0\":{\"549\":1}}],[\"接口默认方法\",{\"1\":{\"575\":1}}],[\"接口默认方法的引入\",{\"1\":{\"542\":1}}],[\"接口默认方法和静态方法\",{\"0\":{\"540\":1}}],[\"接口静态方法使用static关键字修饰\",{\"1\":{\"542\":1}}],[\"接口\",{\"1\":{\"293\":1,\"1174\":1,\"1206\":1,\"1267\":1,\"2100\":1,\"2766\":1,\"2968\":1}}],[\"接到了他们的申请以后呢\",{\"1\":{\"182\":1}}],[\"接收并处理sip请求的服务器\",{\"1\":{\"3182\":1}}],[\"接收方通过tcp头部的窗口字段告知发送方可接收的字节数\",{\"1\":{\"3076\":1}}],[\"接收方通过ack报文告知发送方可接收的窗口大小\",{\"1\":{\"1312\":1}}],[\"接收数据\",{\"1\":{\"3066\":1}}],[\"接收数据方\",{\"1\":{\"161\":1}}],[\"接收udp数据报\",{\"1\":{\"3066\":1}}],[\"接收服务器响应\",{\"1\":{\"3065\":1}}],[\"接收客户端连接并处理数据\",{\"1\":{\"3065\":1}}],[\"接收字节流作为输入\",{\"1\":{\"2877\":1}}],[\"接收的外部网络连接是可信任\",{\"1\":{\"1940\":1}}],[\"接收消息\",{\"0\":{\"1535\":1}}],[\"接收用户请求是异步的\",{\"1\":{\"1377\":1}}],[\"接收窗口\",{\"1\":{\"3076\":1}}],[\"接收窗口大小\",{\"1\":{\"1312\":1}}],[\"接收窗口参数\",{\"1\":{\"1312\":1}}],[\"接收一个参数\",{\"1\":{\"538\":3}}],[\"接收一次记录一次\",{\"1\":{\"167\":1}}],[\"之前与key关联的值\",{\"1\":{\"2600\":1,\"2655\":1,\"2683\":1}}],[\"之前关闭防火墙之后docker没有重启\",{\"1\":{\"1665\":1}}],[\"之间完成了数据克隆\",{\"1\":{\"166\":1}}],[\"之间创建了连接的socket\",{\"1\":{\"165\":1}}],[\"之后的版本中我们建议使用一个专门的dns名称host\",{\"1\":{\"3256\":1}}],[\"之后就可以用你的域名访问了\",{\"1\":{\"1417\":1}}],[\"之后往下\",{\"1\":{\"997\":1}}],[\"之后要频繁用到\",{\"1\":{\"991\":1}}],[\"之后\",{\"1\":{\"129\":1}}],[\"发起方的ua既是invite请求的uac\",{\"1\":{\"3182\":1}}],[\"发起sip请求的客户端\",{\"1\":{\"3182\":1}}],[\"发起会话请求\",{\"1\":{\"3179\":1}}],[\"发起ajax异步请求\",{\"1\":{\"1444\":1}}],[\"发起ajax请求\",{\"1\":{\"1443\":1}}],[\"发起\",{\"1\":{\"1444\":1}}],[\"发起握手等候响应超时时间\",{\"1\":{\"1409\":1}}],[\"发起了大量对同一数据的数据库访问\",{\"1\":{\"191\":1}}],[\"发生在父子类中\",{\"1\":{\"2752\":1}}],[\"发生在同一个类中\",{\"1\":{\"2752\":1}}],[\"发生异常\",{\"1\":{\"2079\":1}}],[\"发生异常时重建selector\",{\"1\":{\"1237\":1}}],[\"发生未捕获异常\",{\"1\":{\"1254\":1}}],[\"发生的内存区域不同\",{\"1\":{\"1155\":1}}],[\"发生oom时\",{\"1\":{\"784\":1}}],[\"发布\",{\"0\":{\"1004\":1}}],[\"发布到中央snapshot仓库插件\",{\"1\":{\"999\":1}}],[\"发布公钥\",{\"1\":{\"997\":1}}],[\"发布测试环境\",{\"0\":{\"1709\":1},\"1\":{\"280\":1,\"1654\":1,\"1655\":1,\"1656\":1,\"1704\":1,\"1711\":1}}],[\"发送信号量到宿主机\",{\"1\":{\"3246\":1}}],[\"发送invite的ack确认\",{\"1\":{\"3208\":1}}],[\"发送invite请求\",{\"1\":{\"1094\":1,\"3188\":1,\"3190\":1}}],[\"发送invite请求并处理响应\",{\"1\":{\"1094\":1}}],[\"发送180\",{\"1\":{\"3208\":1}}],[\"发送注册请求\",{\"1\":{\"3199\":1}}],[\"发送时添加长度字段\",{\"1\":{\"3126\":1}}],[\"发送ack包确认\",{\"1\":{\"3070\":1}}],[\"发送ack包\",{\"1\":{\"3070\":1}}],[\"发送ajax请求\",{\"1\":{\"1440\":1}}],[\"发送sip响应\",{\"1\":{\"3232\":1}}],[\"发送syn+ack包\",{\"1\":{\"3070\":1}}],[\"发送slave端口信息\",{\"1\":{\"165\":1}}],[\"发送方的发送窗口不能超过接收窗口和拥塞窗口中的最小值\",{\"1\":{\"3076\":1}}],[\"发送方地址\",{\"1\":{\"3066\":1}}],[\"发送方和接收方各维护一个窗口\",{\"1\":{\"1312\":1}}],[\"发送响应\",{\"1\":{\"2921\":1}}],[\"发送消息\",{\"0\":{\"1534\":1}}],[\"发送到服务器的数据\",{\"1\":{\"1435\":1,\"1436\":1}}],[\"发送给服务器端的请求参数\",{\"1\":{\"1433\":1,\"1434\":1,\"1436\":1}}],[\"发送数据报\",{\"1\":{\"3066\":1}}],[\"发送数据并接收响应\",{\"1\":{\"3065\":1}}],[\"发送数据\",{\"1\":{\"1312\":2,\"3117\":1}}],[\"发送数据后设置定时器\",{\"1\":{\"1312\":1}}],[\"发送窗口更新\",{\"1\":{\"1312\":1}}],[\"发送窗口参数\",{\"1\":{\"1312\":1}}],[\"发送fin包请求关闭连接\",{\"1\":{\"3070\":1}}],[\"发送fin包\",{\"1\":{\"1311\":1}}],[\"发送请求并处理响应\",{\"1\":{\"3199\":1}}],[\"发送请求\",{\"1\":{\"1094\":1,\"1431\":1,\"1432\":1,\"3190\":1}}],[\"发送异步请求\",{\"1\":{\"471\":1}}],[\"发送同步请求\",{\"1\":{\"471\":1}}],[\"发送指令\",{\"1\":{\"182\":1}}],[\"发送通知\",{\"1\":{\"177\":1}}],[\"发送一次记录一次\",{\"1\":{\"167\":1}}],[\"发送ping命令\",{\"1\":{\"165\":1}}],[\"发现第一个不同字符立即返回\",{\"1\":{\"2294\":1}}],[\"发现\",{\"1\":{\"1667\":1}}],[\"发现ibllvm\",{\"1\":{\"1586\":1}}],[\"发现访问key不满足规则\",{\"1\":{\"192\":1}}],[\"发现一个新节点\",{\"1\":{\"186\":1}}],[\"发现问题立即抛出\",{\"1\":{\"2949\":1}}],[\"发现问题\",{\"1\":{\"182\":1}}],[\"发现必须删除的时候才删除\",{\"1\":{\"152\":1}}],[\"发现已过期\",{\"1\":{\"152\":1}}],[\"设备\",{\"1\":{\"3194\":1}}],[\"设备利用率\",{\"1\":{\"1884\":1}}],[\"设计优雅降级机制应对流量峰值\",{\"1\":{\"3228\":1}}],[\"设计支持百万级并发会话的sip服务器需要从多个层面进行优化\",{\"1\":{\"3228\":1}}],[\"设计不可变对象需遵循以下原则\",{\"1\":{\"2779\":1}}],[\"设计不需要精确知道集合大小的算法\",{\"1\":{\"2533\":1}}],[\"设计规范测试\",{\"1\":{\"2047\":1}}],[\"设计文档\",{\"1\":{\"1961\":1,\"1971\":1}}],[\"设计高质量自定义异常应遵循以下原则\",{\"1\":{\"2938\":1}}],[\"设计高效文件上传系统需考虑以下io优化策略\",{\"1\":{\"1238\":1}}],[\"设计高并发sip服务器需从协议处理\",{\"1\":{\"1110\":1}}],[\"设计原则\",{\"0\":{\"1207\":1}}],[\"设计原则以及常见面试题\",{\"1\":{\"1200\":1}}],[\"设计一个良好的文档自动化工具需要考虑以下几点\",{\"1\":{\"1992\":1}}],[\"设计一个良好的文档生态系统需要考虑以下几点\",{\"1\":{\"1979\":1}}],[\"设计一个良好的文档管理体系需要考虑以下几点\",{\"1\":{\"1966\":1}}],[\"设计一个支持百万级并发的sip服务器需要考虑哪些关键技术点\",{\"0\":{\"1110\":1}}],[\"设计一个\",{\"1\":{\"1068\":1}}],[\"设计混乱等问题\",{\"1\":{\"545\":1}}],[\"设计模式帮助我们编写更加模块化\",{\"1\":{\"1216\":1}}],[\"设计模式体现了面向对象编程的核心思想\",{\"1\":{\"1216\":1}}],[\"设计模式是面向对象编程的高级应用\",{\"1\":{\"1216\":1}}],[\"设计模式是面向对象编程的具体应用\",{\"1\":{\"1216\":1}}],[\"设计模式是解决特定问题的最佳实践\",{\"1\":{\"1216\":1}}],[\"设计模式\",{\"0\":{\"291\":1,\"292\":1,\"293\":1},\"1\":{\"1222\":1}}],[\"设计\",{\"1\":{\"276\":1,\"1069\":1}}],[\"设计思想\",{\"0\":{\"41\":1,\"52\":1,\"62\":1,\"73\":1,\"93\":1,\"210\":1,\"315\":1,\"329\":1,\"342\":1,\"357\":1,\"371\":1,\"385\":1,\"396\":1,\"409\":1,\"421\":1,\"432\":1,\"443\":1,\"454\":1,\"485\":1,\"512\":1,\"531\":1,\"547\":1,\"561\":1,\"594\":1,\"611\":1,\"627\":1,\"644\":1,\"661\":1,\"678\":1,\"695\":1,\"712\":1,\"730\":1,\"748\":1,\"775\":1,\"808\":1,\"842\":1,\"876\":1,\"910\":1,\"930\":1,\"943\":1,\"965\":1,\"987\":1,\"1028\":1,\"1045\":1,\"1070\":1,\"1096\":1,\"1137\":1,\"1153\":1,\"1168\":1,\"1183\":1,\"1214\":1,\"1230\":1,\"1252\":1,\"1273\":1,\"1297\":1,\"1327\":1,\"1951\":1,\"1964\":1,\"1977\":1,\"1990\":1,\"2083\":1,\"2093\":1,\"2103\":1,\"2117\":1,\"2136\":1,\"2154\":1,\"2176\":1,\"2200\":1,\"2226\":1,\"2251\":1,\"2274\":1,\"2306\":1,\"2330\":1,\"2374\":1,\"2411\":1,\"2442\":1,\"2469\":1,\"2499\":1,\"2526\":1,\"2556\":1,\"2579\":1,\"2606\":1,\"2633\":1,\"2662\":1,\"2686\":1,\"2713\":1,\"2744\":1,\"2769\":1,\"2788\":1,\"2800\":1,\"2812\":1,\"2824\":1,\"2835\":1,\"2847\":1,\"2859\":1,\"2871\":1,\"2883\":1,\"2895\":1,\"2907\":1,\"2919\":1,\"2929\":1,\"2940\":1,\"2958\":1,\"2973\":1,\"2992\":1,\"3009\":1,\"3027\":1,\"3068\":1,\"3089\":1,\"3109\":1,\"3128\":1,\"3139\":1,\"3152\":1,\"3168\":1,\"3192\":1,\"3220\":1},\"1\":{\"3027\":1}}],[\"设定校验程序\",{\"1\":{\"192\":1}}],[\"设定短时限\",{\"1\":{\"192\":1}}],[\"设置文件可执行权限\",{\"1\":{\"3248\":1}}],[\"设置文件下载头\",{\"1\":{\"269\":1}}],[\"设置指定服务运气容器的个数\",{\"1\":{\"3246\":1}}],[\"设置yum源\",{\"1\":{\"3245\":1}}],[\"设置事件处理器链\",{\"1\":{\"3240\":1}}],[\"设置事务属性\",{\"1\":{\"3005\":1}}],[\"设置会话数据并添加节点id\",{\"1\":{\"3235\":1}}],[\"设置ice候选者和媒体流\",{\"1\":{\"3232\":1}}],[\"设置tls监听端口\",{\"1\":{\"3214\":1}}],[\"设置支持的传输协议\",{\"1\":{\"3206\":1}}],[\"设置智能告警规则\",{\"1\":{\"3111\":1}}],[\"设置并发用户数和循环次数\",{\"1\":{\"3106\":1}}],[\"设置请求超时时间\",{\"1\":{\"3087\":1}}],[\"设置请求和响应的编码\",{\"1\":{\"1440\":1,\"1443\":1,\"1444\":1}}],[\"设置请求和响应的乱码\",{\"1\":{\"1431\":1}}],[\"设置字段可访问\",{\"1\":{\"2999\":1}}],[\"设置字段值\",{\"1\":{\"1263\":1,\"2999\":1}}],[\"设置可访问私有构造函数\",{\"1\":{\"2999\":1}}],[\"设置安全管理器\",{\"1\":{\"2990\":1}}],[\"设置当前元素\",{\"1\":{\"2498\":1}}],[\"设置新元素\",{\"1\":{\"2439\":1,\"2495\":1}}],[\"设置年龄\",{\"1\":{\"2091\":1}}],[\"设置姓名\",{\"1\":{\"2091\":1}}],[\"设置适当的文档访问权限\",{\"1\":{\"1958\":1,\"1966\":1}}],[\"设置固定ip\",{\"0\":{\"1851\":1},\"1\":{\"1835\":1}}],[\"设置redis密码\",{\"1\":{\"1787\":1}}],[\"设置副本集内容\",{\"1\":{\"1764\":2}}],[\"设置好镜像私服\",{\"1\":{\"1632\":1}}],[\"设置端口映射\",{\"0\":{\"1590\":1,\"1595\":1,\"1600\":1,\"1606\":1}}],[\"设置mysql服务开机自启动\",{\"1\":{\"1585\":1}}],[\"设置master的地址和端口\",{\"1\":{\"165\":1}}],[\"设置镜像对外暴露端口\",{\"1\":{\"1548\":1,\"1697\":1}}],[\"设置镜像基础\",{\"1\":{\"1548\":1,\"1697\":1}}],[\"设置数据源\",{\"0\":{\"1542\":1}}],[\"设置数组元素\",{\"1\":{\"1280\":1}}],[\"设置环境变量参数\",{\"1\":{\"1530\":1}}],[\"设置宿主机与容器之间的路径或文件映射\",{\"1\":{\"1530\":1}}],[\"设置宿主机与容器之间的端口映射\",{\"1\":{\"1530\":1}}],[\"设置容器名\",{\"1\":{\"1530\":1}}],[\"设置启动命令\",{\"1\":{\"1692\":1}}],[\"设置启动顺序\",{\"1\":{\"1484\":1,\"1495\":1}}],[\"设置启动\",{\"0\":{\"1484\":1,\"1495\":1}}],[\"设置启动序号\",{\"1\":{\"1478\":1}}],[\"设置定时器\",{\"1\":{\"1469\":2}}],[\"设置按钮状态\",{\"1\":{\"1469\":2,\"1470\":2}}],[\"设置属性的值\",{\"1\":{\"1464\":2,\"1465\":2}}],[\"设置css样式\",{\"1\":{\"1463\":1}}],[\"设置div的背景色为蓝色\",{\"1\":{\"1463\":1}}],[\"设置div的文本\",{\"1\":{\"1461\":1}}],[\"设置div标签的文本内容\",{\"1\":{\"1461\":1}}],[\"设置标签的文本内容\",{\"1\":{\"1461\":1}}],[\"设置页面加载事件\",{\"1\":{\"1443\":2}}],[\"设置用户名和密码\",{\"1\":{\"1421\":1}}],[\"设置开机自启动\",{\"1\":{\"1374\":1}}],[\"设置开启自启动\",{\"0\":{\"1368\":1}}],[\"设置读取超时时间为3秒\",{\"1\":{\"3069\":1}}],[\"设置读取超时\",{\"1\":{\"1339\":1}}],[\"设置ssl上下文到监听点\",{\"1\":{\"3214\":1}}],[\"设置setaccessible\",{\"1\":{\"2989\":1}}],[\"设置select超时时间\",{\"1\":{\"1237\":1}}],[\"设置socket超时\",{\"1\":{\"1339\":1}}],[\"设置连接超时\",{\"1\":{\"1339\":2}}],[\"设置私有字段age\",{\"1\":{\"1269\":1}}],[\"设置私有字段name\",{\"1\":{\"1269\":1}}],[\"设置合理的连接超时和读写超时\",{\"1\":{\"3129\":1}}],[\"设置合理的日志保留策略\",{\"1\":{\"2072\":1}}],[\"设置合理的so\",{\"1\":{\"1339\":1}}],[\"设置合理的tcp缓冲区大小\",{\"1\":{\"1238\":1}}],[\"设置合理的缓冲区大小\",{\"1\":{\"1238\":1}}],[\"设置jvm参数示例\",{\"0\":{\"803\":1,\"837\":1,\"871\":1,\"905\":1}}],[\"设置系统属性\",{\"1\":{\"798\":1,\"832\":1,\"866\":1,\"900\":1}}],[\"设置\",{\"1\":{\"756\":1,\"814\":1,\"848\":1,\"882\":1,\"916\":1}}],[\"设置超时时间\",{\"1\":{\"1237\":1,\"2920\":1}}],[\"设置超时\",{\"1\":{\"648\":1}}],[\"设置压缩方法\",{\"1\":{\"286\":1}}],[\"设置下载响应头\",{\"1\":{\"286\":1}}],[\"设置url路径\",{\"1\":{\"285\":1}}],[\"设置响应编码\",{\"1\":{\"269\":1}}],[\"设置不生效\",{\"1\":{\"219\":1}}],[\"设置不同的失效时间\",{\"1\":{\"191\":1}}],[\"设置密码有效期为无限制\",{\"1\":{\"1570\":1}}],[\"设置密码\",{\"0\":{\"1354\":1},\"1\":{\"219\":2,\"1819\":1}}],[\"设置过期时间时\",{\"1\":{\"211\":1}}],[\"设置列表指定索引位置的元素\",{\"1\":{\"202\":1}}],[\"设置多个哈希字段值\",{\"1\":{\"201\":1}}],[\"设置哈希字段值\",{\"1\":{\"201\":1}}],[\"设置子字符串\",{\"1\":{\"200\":1}}],[\"设置键值及过期时间\",{\"1\":{\"200\":1}}],[\"设置键值\",{\"1\":{\"200\":1}}],[\"设置键的过期时间\",{\"1\":{\"199\":2}}],[\"设置慢查询命令对应的日志显示长度\",{\"1\":{\"193\":1}}],[\"设置慢查询的时间下线\",{\"1\":{\"193\":1}}],[\"设置主从切换后\",{\"1\":{\"178\":1}}],[\"设置故障切换的最大超时时\",{\"1\":{\"178\":1}}],[\"设置判定服务器宕机时长\",{\"1\":{\"178\":1}}],[\"设置哨兵监听的主服务器信息\",{\"1\":{\"178\":1}}],[\"建议在关键操作后调用checkerror\",{\"1\":{\"2908\":1}}],[\"建议在构造时指定合适的初始容量\",{\"1\":{\"2587\":1}}],[\"建议与缓冲流一起使用\",{\"1\":{\"2896\":1}}],[\"建议为预期数量\",{\"1\":{\"2386\":1}}],[\"建议大家将下载的资源进行包管理\",{\"1\":{\"1779\":1}}],[\"建议挂载外部存储\",{\"1\":{\"1632\":1}}],[\"建议挂载配置文件和日志信息\",{\"1\":{\"234\":1}}],[\"建议调整\",{\"1\":{\"1610\":1}}],[\"建议调整拓扑结构\",{\"1\":{\"166\":1}}],[\"建议先不挂载启动一个容器查看\",{\"1\":{\"1576\":1}}],[\"建议先找个地方记下来\",{\"1\":{\"997\":1}}],[\"建议都配一样的\",{\"1\":{\"1354\":1}}],[\"建议\",{\"1\":{\"782\":1,\"1107\":1}}],[\"建议设置为相同值\",{\"1\":{\"717\":1}}],[\"建议设置如下\",{\"1\":{\"171\":1}}],[\"建议关闭此期间的对外服务\",{\"1\":{\"166\":1}}],[\"建议使用buffer池\",{\"1\":{\"3090\":1}}],[\"建议使用主从reactor模型分散负载\",{\"1\":{\"3090\":1}}],[\"建议使用try\",{\"1\":{\"3069\":1}}],[\"建议使用threadpoolexecutor手动创建线程池\",{\"1\":{\"631\":1}}],[\"建议使用offer\",{\"1\":{\"2562\":1}}],[\"建议使用final修饰\",{\"1\":{\"1087\":1}}],[\"建议使用shutdown\",{\"1\":{\"633\":1}}],[\"建议使用有界队列\",{\"1\":{\"629\":1}}],[\"建议使用50\",{\"1\":{\"166\":1}}],[\"建议使用rdb持久化方案\",{\"1\":{\"142\":1}}],[\"建议使用默认的aof持久化方案\",{\"1\":{\"142\":1}}],[\"建议使用\",{\"1\":{\"125\":1,\"140\":1}}],[\"建立容器链接\",{\"0\":{\"3257\":1}}],[\"建立常见网络问题的自动诊断流程\",{\"1\":{\"3111\":1}}],[\"建立网络性能基线\",{\"1\":{\"3111\":1}}],[\"建立完整的网络编程知识体系\",{\"1\":{\"3055\":1}}],[\"建立完善的告警机制\",{\"1\":{\"1347\":1}}],[\"建立长期性能监控机制\",{\"1\":{\"2728\":1}}],[\"建立性能指标基线\",{\"1\":{\"2728\":1}}],[\"建立性能基准\",{\"1\":{\"818\":1,\"852\":1,\"886\":1,\"920\":1}}],[\"建立清晰的文档自动化流程\",{\"1\":{\"1992\":1}}],[\"建立清晰的文档流程\",{\"1\":{\"1979\":1}}],[\"建立定期更新和维护文档的机制\",{\"1\":{\"1966\":1}}],[\"建立软连接\",{\"0\":{\"1839\":1},\"1\":{\"1835\":1}}],[\"建立通信\",{\"1\":{\"186\":1}}],[\"建立socket连接\",{\"1\":{\"165\":1}}],[\"建立slave到master的连接\",{\"1\":{\"165\":1}}],[\"建立连接\",{\"0\":{\"165\":1}}],[\"建立连接阶段\",{\"1\":{\"163\":1}}],[\"量\",{\"1\":{\"162\":1}}],[\"改进迭代器\",{\"1\":{\"2428\":1}}],[\"改进的依赖管理\",{\"1\":{\"486\":1}}],[\"改为byte\",{\"1\":{\"2289\":1}}],[\"改作onboot=yes\",{\"1\":{\"1918\":1}}],[\"改称\",{\"1\":{\"1775\":1}}],[\"改动\",{\"1\":{\"1734\":2,\"1764\":2}}],[\"改成国内镜像源\",{\"1\":{\"1669\":1}}],[\"改成仓库地址+仓库名+镜像名+版本号\",{\"1\":{\"1641\":1,\"1799\":1}}],[\"改变slave的数\",{\"1\":{\"162\":1}}],[\"改记录数据为记录操作过程\",{\"1\":{\"139\":1}}],[\"配额\",{\"1\":{\"232\":2,\"1684\":2}}],[\"配合打印\",{\"0\":{\"2218\":1}}],[\"配合使用\",{\"1\":{\"459\":1}}],[\"配合alibaba\",{\"1\":{\"298\":1}}],[\"配合雪崩处理策略即可\",{\"1\":{\"191\":1}}],[\"配合运行监控测试与即时调整策略\",{\"1\":{\"191\":1}}],[\"配合其他策略一起使用\",{\"1\":{\"190\":1}}],[\"配合访问量统计\",{\"1\":{\"190\":1}}],[\"配合读写分离\",{\"1\":{\"162\":1}}],[\"配置内核路由转发\",{\"0\":{\"3271\":1}}],[\"配置内容\",{\"1\":{\"1511\":1}}],[\"配置htp相关的参数\",{\"1\":{\"3263\":1}}],[\"配置查看\",{\"1\":{\"3260\":1}}],[\"配置主机名验证器\",{\"1\":{\"3214\":1}}],[\"配置主从机\",{\"0\":{\"102\":1}}],[\"配置tls证书\",{\"1\":{\"3214\":1}}],[\"配置tls参数\",{\"1\":{\"3206\":1,\"3237\":1}}],[\"配置nat端口映射\",{\"1\":{\"3194\":1}}],[\"配置安全策略文件\",{\"1\":{\"3011\":1}}],[\"配置安全配置\",{\"1\":{\"456\":1}}],[\"配置类\",{\"1\":{\"2763\":1}}],[\"配置项\",{\"1\":{\"2311\":1}}],[\"配置优化\",{\"1\":{\"1788\":1}}],[\"配置优先级\",{\"0\":{\"405\":1}}],[\"配置优先级以及一些高级配置技巧\",{\"1\":{\"400\":1}}],[\"配置路径时需要确保\",{\"1\":{\"1764\":1}}],[\"配置系统日志的方法比较简单\",{\"1\":{\"1739\":1}}],[\"配置环境变量\",{\"0\":{\"1731\":1}}],[\"配置字典\",{\"1\":{\"1712\":1}}],[\"配置自己的仓库地址\",{\"1\":{\"1712\":1}}],[\"配置dns\",{\"0\":{\"1848\":1},\"1\":{\"1835\":1}}],[\"配置dockerfile构建构建文件\",{\"0\":{\"1697\":1}}],[\"配置dcker仓库路径\",{\"0\":{\"1621\":1,\"1753\":1}}],[\"配置中心创建配置\",{\"0\":{\"1690\":1}}],[\"配置加速\",{\"0\":{\"1615\":1,\"1675\":1,\"1746\":1}}],[\"配置相关yum源\",{\"0\":{\"1612\":1,\"1672\":1,\"1743\":1}}],[\"配置相同\",{\"1\":{\"178\":1}}],[\"配置目录\",{\"1\":{\"1578\":1,\"1595\":1}}],[\"配置服务名称\",{\"1\":{\"1548\":1}}],[\"配置服务器地址和端口\",{\"1\":{\"3106\":1}}],[\"配置服务器\",{\"1\":{\"186\":1}}],[\"配置oap连接地址\",{\"1\":{\"1548\":1}}],[\"配置关系\",{\"0\":{\"1538\":1}}],[\"配置修改后重启服务\",{\"0\":{\"1525\":1}}],[\"配置完后\",{\"1\":{\"1417\":1}}],[\"配置简单\",{\"1\":{\"1377\":1}}],[\"配置elk开启自启动配置\",{\"0\":{\"1366\":1}}],[\"配置密码即可\",{\"1\":{\"1354\":1}}],[\"配置防火墙开放相关端口\",{\"1\":{\"1105\":1}}],[\"配置集中管理\",{\"1\":{\"1086\":1}}],[\"配置分散\",{\"1\":{\"1086\":1}}],[\"配置与代码分离\",{\"1\":{\"1071\":1}}],[\"配置与兼容性\",{\"0\":{\"507\":1}}],[\"配置非标准javadoc注释\",{\"1\":{\"1005\":1}}],[\"配置pom\",{\"0\":{\"999\":1}}],[\"配置本地maven的配置文件\",{\"1\":{\"998\":1}}],[\"配置本地仓库\",{\"0\":{\"973\":1}}],[\"配置快照仓库\",{\"0\":{\"985\":1}}],[\"配置远程仓库\",{\"0\":{\"984\":1}}],[\"配置镜像仓库提高访问速度\",{\"1\":{\"988\":1}}],[\"配置镜像仓库\",{\"0\":{\"981\":1}}],[\"配置构建缓存\",{\"0\":{\"957\":1}}],[\"配置编译器插件\",{\"0\":{\"956\":1}}],[\"配置线程池时需要考虑cpu核心数\",{\"1\":{\"602\":1}}],[\"配置连接超时时间\",{\"1\":{\"445\":1}}],[\"配置连接池大小\",{\"1\":{\"445\":1}}],[\"配置连接池类型\",{\"1\":{\"445\":1}}],[\"配置mybatis\",{\"1\":{\"439\":1}}],[\"配置sip\",{\"1\":{\"3224\":1,\"3237\":1}}],[\"配置sip监听点使用tls\",{\"1\":{\"3214\":1}}],[\"配置sip栈\",{\"1\":{\"1094\":1,\"3190\":1,\"3218\":1}}],[\"配置sudo权限\",{\"0\":{\"1855\":1},\"1\":{\"1835\":1}}],[\"配置ssl\",{\"1\":{\"1417\":1}}],[\"配置ssl证书\",{\"0\":{\"1417\":1}}],[\"配置ssl证书前\",{\"1\":{\"1416\":1}}],[\"配置ssl安全认证\",{\"0\":{\"116\":1}}],[\"配置settings\",{\"0\":{\"998\":1}}],[\"配置spring\",{\"0\":{\"382\":1}}],[\"配置数据源\",{\"0\":{\"367\":1},\"1\":{\"353\":1,\"438\":1}}],[\"配置其他bean\",{\"1\":{\"339\":1}}],[\"配置三个哨兵\",{\"1\":{\"178\":1}}],[\"配置一拖二的主从结构\",{\"1\":{\"178\":1}}],[\"配置哨兵\",{\"1\":{\"178\":1}}],[\"配置文件缺失\",{\"1\":{\"2037\":1}}],[\"配置文件会存放在\",{\"1\":{\"1785\":1}}],[\"配置文件如下\",{\"1\":{\"1764\":1}}],[\"配置文件采用yml格式\",{\"1\":{\"1738\":1}}],[\"配置文件启动时报错\",{\"1\":{\"1735\":2}}],[\"配置文件启动\",{\"1\":{\"1734\":1,\"1764\":1}}],[\"配置文件名称\",{\"1\":{\"1696\":1}}],[\"配置文件生效\",{\"1\":{\"1675\":1}}],[\"配置文件中的https注释掉\",{\"1\":{\"1664\":1}}],[\"配置文件形式构建\",{\"0\":{\"1656\":1}}],[\"配置文件均可如此配置\",{\"1\":{\"1530\":1}}],[\"配置文件elasticsearch\",{\"1\":{\"1351\":1}}],[\"配置文件庞大时维护困难\",{\"1\":{\"1086\":1}}],[\"配置文件类型\",{\"0\":{\"402\":1}}],[\"配置文件要先在宿主机创建好\",{\"1\":{\"216\":1}}],[\"配置文件\",{\"0\":{\"1351\":1},\"1\":{\"125\":1,\"406\":1,\"1658\":1,\"1779\":1}}],[\"配置文件my\",{\"1\":{\"121\":1}}],[\"配置从机\",{\"0\":{\"110\":1}}],[\"配置\",{\"0\":{\"13\":1,\"406\":1,\"1624\":1,\"1756\":1},\"1\":{\"1667\":1,\"1712\":1}}],[\"负值表示高优先级\",{\"1\":{\"1882\":1}}],[\"负责根据路由规则转发请求\",{\"1\":{\"3212\":1}}],[\"负责io事件处理\",{\"1\":{\"3121\":1}}],[\"负责接受连接\",{\"1\":{\"3121\":1}}],[\"负责文档的创建\",{\"1\":{\"1968\":1}}],[\"负责处理连接建立事件\",{\"1\":{\"1328\":1}}],[\"负责处理事件\",{\"1\":{\"1328\":1}}],[\"负责处理写操作\",{\"1\":{\"69\":1}}],[\"负责监听和分发事件\",{\"1\":{\"1328\":1}}],[\"负责加载\",{\"1\":{\"690\":1}}],[\"负责对象的创建和管理\",{\"1\":{\"313\":1}}],[\"负载平衡\",{\"1\":{\"1376\":1}}],[\"负载因子默认0\",{\"1\":{\"2386\":1}}],[\"负载因子\",{\"1\":{\"1181\":1,\"2386\":1,\"2423\":1,\"2593\":1,\"2604\":1,\"2609\":1,\"2679\":1}}],[\"负载\",{\"1\":{\"303\":2}}],[\"负载均衡器\",{\"1\":{\"3228\":1}}],[\"负载均衡用于将请求分发到多个服务器\",{\"1\":{\"3086\":1}}],[\"负载均衡\",{\"0\":{\"3086\":1},\"1\":{\"162\":1,\"1382\":1,\"1383\":1,\"3183\":1,\"3218\":1}}],[\"职责单一\",{\"1\":{\"2337\":1}}],[\"职责\",{\"1\":{\"161\":1}}],[\"概念\",{\"1\":{\"161\":1,\"167\":3}}],[\"概述\",{\"0\":{\"35\":1,\"45\":1,\"56\":1,\"66\":1,\"77\":1,\"195\":1,\"309\":1,\"319\":1,\"333\":1,\"346\":1,\"361\":1,\"375\":1,\"389\":1,\"400\":1,\"413\":1,\"425\":1,\"436\":1,\"447\":1,\"465\":1,\"497\":1,\"524\":1,\"535\":1,\"559\":1,\"922\":1,\"934\":1,\"947\":1,\"969\":1,\"1007\":1,\"1061\":1,\"1089\":1,\"1119\":1,\"1141\":1,\"1157\":1,\"1200\":1,\"1218\":1,\"1240\":1,\"1256\":1,\"1283\":1,\"1308\":1,\"1942\":1,\"1955\":1,\"1968\":1,\"1981\":1,\"2074\":1,\"2087\":1,\"2097\":1,\"2107\":1,\"2121\":1,\"2140\":1,\"2163\":1,\"2185\":1,\"2209\":1,\"2236\":1,\"2259\":1,\"2284\":1,\"2730\":1,\"2756\":1,\"2782\":1,\"2792\":1,\"2804\":1,\"2816\":1,\"2828\":1,\"2839\":1,\"2851\":1,\"2863\":1,\"2875\":1,\"2887\":1,\"2899\":1,\"2911\":1,\"2923\":1,\"2933\":1,\"2944\":1,\"2962\":1,\"2977\":1,\"2996\":1,\"3013\":1,\"3031\":1,\"3043\":1,\"3055\":1,\"3072\":1,\"3093\":1,\"3113\":1,\"3132\":1,\"3143\":1,\"3156\":1,\"3172\":1,\"3201\":1,\"3230\":1},\"1\":{\"1738\":1}}],[\"硬件\",{\"1\":{\"3264\":1}}],[\"硬件条件跟不上\",{\"1\":{\"161\":1}}],[\"硬盘故障\",{\"1\":{\"161\":1}}],[\"硬盘中的信息断电以后还可以保留下来\",{\"1\":{\"136\":1}}],[\"穷\",{\"1\":{\"161\":1}}],[\"容错机制\",{\"0\":{\"3087\":1}}],[\"容量×负载因子\",{\"1\":{\"2609\":1}}],[\"容量翻倍\",{\"1\":{\"2601\":1}}],[\"容量设置过小\",{\"1\":{\"2539\":1}}],[\"容量为0\",{\"1\":{\"2461\":1}}],[\"容量限制\",{\"1\":{\"2461\":1}}],[\"容量动态扩展\",{\"1\":{\"2432\":1}}],[\"容量\",{\"1\":{\"2271\":1}}],[\"容量与长度的区别\",{\"0\":{\"2271\":1}}],[\"容量管理机制\",{\"0\":{\"2270\":1}}],[\"容量不足时扩容\",{\"1\":{\"2161\":1}}],[\"容量瓶颈\",{\"1\":{\"161\":1}}],[\"容易引发classcastexception\",{\"1\":{\"3017\":1}}],[\"容易引起误解的部分\",{\"1\":{\"2095\":1}}],[\"容易出现拼写错误\",{\"1\":{\"1086\":1}}],[\"容易oom\",{\"1\":{\"715\":1}}],[\"容易理解和使用\",{\"1\":{\"52\":1}}],[\"容器对应的镜像\",{\"1\":{\"3276\":1}}],[\"容器对象\",{\"1\":{\"1453\":3}}],[\"容器对象长度\",{\"1\":{\"1453\":1}}],[\"容器访问主机ip\",{\"1\":{\"3256\":1}}],[\"容器命名\",{\"1\":{\"3246\":1}}],[\"容器启动命令\",{\"1\":{\"3246\":1}}],[\"容器自动重启\",{\"1\":{\"3245\":1}}],[\"容器环境\",{\"1\":{\"3110\":1}}],[\"容器化技术\",{\"0\":{\"3336\":1}}],[\"容器化的规范检查环境\",{\"1\":{\"2029\":1}}],[\"容器化支持\",{\"1\":{\"571\":1}}],[\"容器中的进程数量\",{\"1\":{\"1809\":1}}],[\"容器当前使用的内存占总内存的百分比\",{\"1\":{\"1809\":1}}],[\"容器当前使用的内存量和内存限制\",{\"1\":{\"1809\":1}}],[\"容器使用的\",{\"1\":{\"1809\":1}}],[\"容器的块\",{\"1\":{\"1809\":1}}],[\"容器的网络\",{\"1\":{\"1809\":1}}],[\"容器的\",{\"1\":{\"1809\":1}}],[\"容器打包成一个镜像\",{\"0\":{\"1794\":1}}],[\"容器构建\",{\"0\":{\"1793\":1}}],[\"容器间数据相互拷贝\",{\"0\":{\"1792\":1}}],[\"容器组中查看日志启动成功\",{\"1\":{\"1685\":1}}],[\"容器id\",{\"1\":{\"1646\":1,\"1792\":2,\"1794\":1,\"1806\":1,\"3245\":2,\"3246\":1,\"3250\":1}}],[\"容器等\",{\"1\":{\"1610\":1,\"1671\":1,\"1741\":1}}],[\"容器在启动时会读取该环境变量\",{\"1\":{\"1530\":1}}],[\"容器能够精确匹配bean\",{\"1\":{\"1299\":1}}],[\"容器名\",{\"1\":{\"242\":1,\"1793\":2,\"1796\":1,\"3245\":1}}],[\"容器\",{\"0\":{\"222\":1,\"241\":1,\"242\":1},\"1\":{\"1607\":1,\"1796\":1,\"3245\":2,\"3255\":1}}],[\"问题说明\",{\"0\":{\"1553\":1}}],[\"问题3\",{\"1\":{\"1055\":1,\"1056\":1}}],[\"问题\",{\"0\":{\"304\":1,\"1712\":1,\"3194\":1},\"1\":{\"304\":1,\"754\":1,\"815\":1,\"816\":1,\"817\":1,\"849\":1,\"850\":1,\"851\":1,\"883\":1,\"884\":1,\"885\":1,\"917\":1,\"918\":1,\"919\":1,\"1160\":1,\"1161\":1,\"1162\":1,\"1164\":1,\"1165\":1,\"1166\":1,\"1234\":1,\"1235\":1,\"1236\":1,\"1237\":1,\"1336\":1,\"1337\":1,\"1338\":1,\"1339\":1,\"2158\":1,\"2159\":1,\"2180\":1,\"2181\":1,\"2204\":1,\"2205\":1,\"2230\":1,\"2231\":1,\"2232\":1,\"2255\":1,\"2256\":1,\"2257\":1,\"2278\":1,\"2279\":1,\"2280\":1,\"2344\":1,\"2345\":1,\"2346\":1,\"2348\":1,\"2351\":1,\"2352\":1,\"2354\":1,\"2355\":1,\"2356\":1,\"2357\":1,\"2358\":1,\"2422\":1,\"2423\":1,\"2424\":1,\"2448\":1,\"2449\":1,\"2450\":1,\"2451\":1,\"2452\":1,\"2478\":1,\"2480\":1,\"2481\":1,\"2505\":1,\"2506\":1,\"2507\":1,\"2508\":1,\"2509\":1,\"2533\":1,\"2534\":1,\"2536\":1,\"2537\":1,\"2539\":1,\"2691\":1,\"2692\":1,\"2693\":1,\"2694\":1,\"2748\":1,\"2749\":1,\"2750\":1,\"2774\":1,\"2775\":1,\"2776\":1,\"2777\":1,\"2790\":1,\"2802\":1,\"2814\":1,\"2826\":1,\"3222\":1,\"3223\":1,\"3224\":1,\"3225\":1}}],[\"问题出现后\",{\"1\":{\"192\":1}}],[\"问题分析\",{\"1\":{\"192\":1}}],[\"问题排查\",{\"1\":{\"189\":1,\"190\":1,\"191\":1,\"192\":1}}],[\"问题现象\",{\"1\":{\"172\":2,\"173\":1}}],[\"问题原因\",{\"1\":{\"171\":1,\"172\":2,\"173\":1}}],[\"问题2\",{\"1\":{\"161\":1,\"1055\":1,\"1056\":1,\"1191\":1}}],[\"问题1\",{\"1\":{\"161\":1,\"1055\":1,\"1056\":1,\"1191\":1}}],[\"系统介绍sip机制的基础知识\",{\"1\":{\"3172\":1}}],[\"系统级网络诊断\",{\"0\":{\"3099\":1}}],[\"系统讲解泛型类\",{\"1\":{\"3013\":1}}],[\"系统繁忙\",{\"1\":{\"2956\":1}}],[\"系统性能瓶颈评估与优化步骤\",{\"1\":{\"2728\":1}}],[\"系统性原则\",{\"1\":{\"1959\":1,\"1972\":1,\"1985\":1}}],[\"系统启动\",{\"1\":{\"2070\":1}}],[\"系统错误\",{\"1\":{\"2050\":2,\"2051\":1}}],[\"系统io错误\",{\"1\":{\"2037\":1}}],[\"系统相关命令\",{\"0\":{\"1902\":1}}],[\"系统cpu时间\",{\"1\":{\"1887\":1}}],[\"系统调用也是\",{\"1\":{\"1887\":1}}],[\"系统调度进程\",{\"1\":{\"1504\":1}}],[\"系统分析器处于关闭状态\",{\"1\":{\"1739\":1}}],[\"系统分析器记录固定集合system\",{\"1\":{\"1739\":1}}],[\"系统日志会向logpath指定的文件持续追加\",{\"1\":{\"1739\":1}}],[\"系统日志在mongodb数据库中很重要\",{\"1\":{\"1739\":1}}],[\"系统日志\",{\"1\":{\"1739\":1}}],[\"系统设置调整\",{\"1\":{\"1610\":1}}],[\"系统关联关系结构\",{\"1\":{\"1562\":1}}],[\"系统类加载器\",{\"1\":{\"1147\":1}}],[\"系统属性\",{\"1\":{\"405\":1}}],[\"系统平稳运行过程中\",{\"1\":{\"190\":1,\"191\":1,\"192\":1}}],[\"系统崩溃\",{\"1\":{\"161\":1}}],[\"系统控制\",{\"1\":{\"140\":1}}],[\"机器在做压力测试\",{\"1\":{\"1887\":1}}],[\"机器之间网络无法联通\",{\"1\":{\"1788\":1}}],[\"机器配置\",{\"1\":{\"1632\":1}}],[\"机器故障\",{\"1\":{\"161\":1}}],[\"机制\",{\"1\":{\"130\":1,\"1197\":1,\"2444\":1,\"3029\":1}}],[\"知道配置文件启动\",{\"1\":{\"219\":1}}],[\"知道了三高的概念之后\",{\"1\":{\"161\":1}}],[\"知识沉淀\",{\"0\":{\"1759\":1}}],[\"知识扩展\",{\"0\":{\"40\":1,\"51\":1,\"61\":1,\"72\":1,\"92\":1,\"209\":1,\"314\":1,\"328\":1,\"341\":1,\"356\":1,\"370\":1,\"384\":1,\"395\":1,\"408\":1,\"420\":1,\"431\":1,\"442\":1,\"453\":1,\"484\":1,\"511\":1,\"530\":1,\"546\":1,\"560\":1,\"929\":1,\"942\":1,\"964\":1,\"986\":1,\"1027\":1,\"1136\":1,\"1152\":1,\"1167\":1,\"1213\":1,\"1229\":1,\"1251\":1,\"1272\":1,\"1950\":1,\"1963\":1,\"1976\":1,\"1989\":1,\"2082\":1,\"2092\":1,\"2102\":1,\"2116\":1,\"2135\":1,\"2153\":1,\"2175\":1,\"2199\":1,\"2225\":1,\"2250\":1,\"2273\":1,\"2305\":1,\"2743\":1,\"2787\":1,\"2799\":1,\"2811\":1,\"2823\":1,\"2834\":1,\"2846\":1,\"2858\":1,\"2870\":1,\"2882\":1,\"2894\":1,\"2906\":1,\"2918\":1,\"2928\":1,\"2939\":1,\"2957\":1,\"2972\":1,\"2991\":1,\"3008\":1,\"3026\":1,\"3067\":1,\"3088\":1,\"3108\":1,\"3127\":1,\"3138\":1,\"3151\":1,\"3167\":1,\"3191\":1,\"3219\":1}}],[\"知识要点\",{\"0\":{\"36\":1,\"46\":1,\"57\":1,\"67\":1,\"78\":1,\"196\":1,\"310\":1,\"320\":1,\"334\":1,\"347\":1,\"362\":1,\"376\":1,\"390\":1,\"401\":1,\"414\":1,\"426\":1,\"437\":1,\"448\":1,\"466\":1,\"498\":1,\"525\":1,\"536\":1,\"572\":1,\"923\":1,\"935\":1,\"948\":1,\"970\":1,\"1008\":1,\"1120\":1,\"1142\":1,\"1158\":1,\"1201\":1,\"1219\":1,\"1241\":1,\"1257\":1,\"1943\":1,\"1956\":1,\"1969\":1,\"1982\":1,\"2075\":1,\"2088\":1,\"2098\":1,\"2108\":1,\"2122\":1,\"2141\":1,\"2164\":1,\"2186\":1,\"2210\":1,\"2237\":1,\"2260\":1,\"2285\":1,\"2731\":1,\"2757\":1,\"2783\":1,\"2793\":1,\"2805\":1,\"2817\":1,\"2829\":1,\"2840\":1,\"2852\":1,\"2864\":1,\"2876\":1,\"2888\":1,\"2900\":1,\"2912\":1,\"2924\":1,\"2934\":1,\"2945\":1,\"2963\":1,\"2978\":1,\"2997\":1,\"3014\":1,\"3032\":1,\"3044\":1,\"3056\":1,\"3073\":1,\"3094\":1,\"3114\":1,\"3133\":1,\"3144\":1,\"3157\":1,\"3173\":1,\"3202\":1,\"3231\":1}}],[\"知识只有被系统性的归纳起来\",{\"1\":{\"0\":1}}],[\"9cn9x\",{\"1\":{\"3273\":1}}],[\"9ckgtyvxkoc2inmoeynna\",{\"1\":{\"303\":1,\"307\":1}}],[\"9d0f\",{\"1\":{\"3266\":4}}],[\"92\",{\"1\":{\"2577\":2}}],[\"9200\",{\"1\":{\"1355\":2,\"1363\":1,\"1367\":1,\"1511\":1,\"1512\":2,\"1513\":1,\"1517\":1,\"1520\":1,\"1523\":1,\"1524\":1,\"1527\":1,\"1535\":1,\"1542\":1,\"1560\":1}}],[\"9引入了list\",{\"1\":{\"2358\":1}}],[\"9引入的cleaner\",{\"1\":{\"2698\":1}}],[\"9引入的不可变set\",{\"1\":{\"2395\":1}}],[\"9引入的不可变set集合\",{\"1\":{\"2378\":1}}],[\"9引入的不可变集合\",{\"1\":{\"2358\":1}}],[\"9引入的不可变list设计体现了不可变对象模式\",{\"1\":{\"2336\":1}}],[\"9引入的模块化系统对反射进行了限制\",{\"1\":{\"1281\":1}}],[\"95\",{\"1\":{\"2144\":1,\"2902\":1}}],[\"957\",{\"1\":{\"1483\":3,\"1484\":1,\"1495\":1,\"1498\":3,\"1499\":3}}],[\"9380\",{\"1\":{\"1892\":1}}],[\"9300\",{\"1\":{\"1512\":2,\"1560\":2}}],[\"9mb\",{\"1\":{\"1667\":2}}],[\"99g\",{\"1\":{\"3275\":1}}],[\"99e367eb35a3\",{\"1\":{\"3271\":1}}],[\"99\",{\"1\":{\"2216\":4}}],[\"9902\",{\"1\":{\"1530\":1}}],[\"9997\",{\"1\":{\"294\":1}}],[\"9999\",{\"1\":{\"216\":1,\"3066\":2}}],[\"999\",{\"1\":{\"125\":1,\"160\":1,\"1440\":1}}],[\"9600\",{\"1\":{\"1526\":4}}],[\"9411\",{\"1\":{\"3104\":1}}],[\"94\",{\"1\":{\"1764\":1}}],[\"94改成自己的\",{\"1\":{\"1524\":1}}],[\"9465151\",{\"1\":{\"160\":1}}],[\"9000\",{\"1\":{\"3246\":3}}],[\"9090\",{\"1\":{\"1638\":1,\"1876\":1}}],[\"9090和1521三个端口分别映射到容器内的22\",{\"1\":{\"1569\":1}}],[\"9092\",{\"1\":{\"1367\":1,\"1530\":9,\"1532\":1,\"1533\":1,\"1534\":2,\"1535\":7,\"1661\":3}}],[\"90\",{\"1\":{\"1373\":1,\"1822\":1,\"2125\":1,\"2144\":1,\"3046\":1}}],[\"9及以上版本\",{\"1\":{\"1264\":1}}],[\"9+中使用模块系统\",{\"1\":{\"3011\":1}}],[\"9+中\",{\"1\":{\"3010\":1}}],[\"9+中不可变集合的实现原理\",{\"0\":{\"2358\":1}}],[\"9+的不可变集合提供了更安全\",{\"1\":{\"2358\":1}}],[\"9+不可变集合实现原理\",{\"1\":{\"2358\":1}}],[\"9+\",{\"1\":{\"1178\":1,\"1191\":1,\"2320\":1,\"2323\":1,\"2369\":1,\"2677\":1}}],[\"91364\",{\"1\":{\"993\":1}}],[\"9的模块系统\",{\"1\":{\"570\":1}}],[\"9开始引入的模块化系统在java\",{\"1\":{\"486\":1}}],[\"9中引入的孵化阶段的http客户端正式标准化\",{\"1\":{\"471\":1}}],[\"9和java\",{\"1\":{\"465\":1}}],[\"98\",{\"1\":{\"2905\":1}}],[\"9876\",{\"1\":{\"249\":1,\"250\":4,\"1834\":1}}],[\"9849\",{\"1\":{\"234\":2}}],[\"9849三个端口\",{\"1\":{\"234\":1}}],[\"9848\",{\"1\":{\"234\":3,\"1643\":2,\"1648\":6,\"1685\":6}}],[\"9\",{\"0\":{\"1729\":1,\"1774\":1,\"1824\":1,\"1911\":1,\"2049\":1,\"2050\":1,\"2051\":1,\"2617\":1,\"3332\":1},\"1\":{\"190\":2,\"456\":1,\"543\":1,\"728\":2,\"999\":1,\"1005\":1,\"1059\":1,\"1066\":1,\"1161\":1,\"1162\":1,\"1198\":1,\"1410\":2,\"1443\":1,\"1462\":1,\"1469\":2,\"1483\":2,\"1484\":2,\"1495\":2,\"1498\":2,\"1499\":2,\"1536\":1,\"1586\":2,\"1618\":1,\"1635\":1,\"1660\":4,\"1736\":2,\"1750\":1,\"1763\":4,\"1779\":1,\"1856\":1,\"2065\":1,\"2169\":1,\"2170\":2,\"2214\":2,\"2217\":2,\"2291\":1,\"2320\":1,\"2326\":1,\"2367\":1,\"2404\":1,\"2463\":1,\"2491\":1,\"2520\":1,\"2569\":1,\"2596\":1,\"2624\":1,\"2651\":1,\"3047\":2,\"3100\":3,\"3246\":1,\"3282\":3}}],[\"速度快\",{\"1\":{\"160\":1,\"777\":1}}],[\"速度可以提升几十倍甚至上百倍\",{\"1\":{\"129\":1}}],[\"任意维度的数组\",{\"1\":{\"2233\":1}}],[\"任意选择数据淘汰\",{\"1\":{\"157\":2}}],[\"任何父类出现的地方\",{\"1\":{\"2745\":1}}],[\"任何修改操作都会创建新的字符串对象\",{\"1\":{\"2190\":1}}],[\"任何地方都可以访问\",{\"1\":{\"2076\":1}}],[\"任何接收的网络数据包都被丢弃\",{\"1\":{\"1940\":1}}],[\"任何接收的网络连接都被ipv4的icmp\",{\"1\":{\"1940\":1}}],[\"任何一种数据库都有各种各样的日志\",{\"1\":{\"1739\":1}}],[\"任何请求都会匹配到\",{\"1\":{\"1392\":1}}],[\"任何人都可以获得该令牌的所有权限\",{\"1\":{\"305\":1}}],[\"任务队列\",{\"1\":{\"3082\":1}}],[\"任务3\",{\"1\":{\"2467\":1}}],[\"任务2\",{\"1\":{\"2467\":1}}],[\"任务1\",{\"1\":{\"2467\":1}}],[\"任务标志\",{\"1\":{\"1882\":1}}],[\"任务执行超时时间\",{\"1\":{\"1687\":1}}],[\"任务执行异常\",{\"1\":{\"1254\":1}}],[\"任务执行时间等因素\",{\"1\":{\"602\":1}}],[\"任务异常\",{\"1\":{\"1254\":1}}],[\"任务代码\",{\"1\":{\"1135\":1}}],[\"任务提交者作为生产者\",{\"1\":{\"628\":1}}],[\"任务\",{\"1\":{\"625\":1,\"1687\":2}}],[\"任务过多时的处理策略\",{\"1\":{\"622\":1}}],[\"任务完成后线程不会销毁\",{\"1\":{\"621\":1}}],[\"任务类型\",{\"1\":{\"602\":1}}],[\"任务结果\",{\"1\":{\"527\":1}}],[\"任务逻辑\",{\"1\":{\"527\":3,\"1066\":1}}],[\"任务列表\",{\"0\":{\"21\":1}}],[\"挑选2到3个\",{\"1\":{\"192\":1}}],[\"挑选将要过期的数据淘汰\",{\"1\":{\"157\":1}}],[\"挑选最近使用次数最少的数据淘汰\",{\"1\":{\"157\":2}}],[\"挑选最近最少使用的数据淘汰\",{\"1\":{\"157\":2}}],[\"挑战是数据一致性难以保证\",{\"1\":{\"43\":1}}],[\"清华大学镜像站\",{\"1\":{\"1488\":1}}],[\"清晰表达方法功能\",{\"1\":{\"2784\":1}}],[\"清晰性\",{\"1\":{\"1994\":1}}],[\"清晰\",{\"1\":{\"1944\":1,\"1953\":1}}],[\"清晰理解缓冲区的三个状态\",{\"1\":{\"1338\":1}}],[\"清晰的api设计等优点\",{\"1\":{\"545\":1}}],[\"清理过期nonce\",{\"1\":{\"3215\":1}}],[\"清理过期条目\",{\"0\":{\"2681\":1}}],[\"清理资源\",{\"1\":{\"3166\":1}}],[\"清理所有键已被回收的条目\",{\"1\":{\"2681\":1}}],[\"清理所有无用镜像\",{\"0\":{\"1802\":1}}],[\"清理部署\",{\"0\":{\"1708\":1},\"1\":{\"1654\":1,\"1655\":1,\"1656\":1,\"1704\":1,\"1711\":1}}],[\"清理项目\",{\"1\":{\"940\":1}}],[\"清理数据的策略称为逐出算法\",{\"1\":{\"156\":1}}],[\"清除threadlocal\",{\"1\":{\"3007\":1}}],[\"清除缓存\",{\"1\":{\"2685\":1}}],[\"清除集群\",{\"1\":{\"1677\":1}}],[\"清除算法\",{\"0\":{\"764\":1},\"1\":{\"770\":1,\"783\":1,\"1150\":1}}],[\"清除或标记\",{\"1\":{\"713\":1,\"767\":1,\"776\":1}}],[\"清除\",{\"1\":{\"698\":1}}],[\"清除旧中继日志失败\",{\"1\":{\"125\":1}}],[\"清峰\",{\"1\":{\"284\":1,\"289\":1}}],[\"清空缓存\",{\"1\":{\"2512\":1}}],[\"清空缓冲区\",{\"1\":{\"1338\":1,\"2914\":2,\"2915\":1,\"2916\":1,\"3116\":2}}],[\"清空链表\",{\"1\":{\"2496\":1}}],[\"清空并设置为null\",{\"1\":{\"2451\":1}}],[\"清空集合\",{\"1\":{\"2369\":1}}],[\"清空后\",{\"1\":{\"2324\":1,\"2914\":1}}],[\"清空列表时确保所有引用被释放\",{\"1\":{\"2508\":1}}],[\"清空列表\",{\"1\":{\"2324\":1,\"2440\":1}}],[\"清空操作\",{\"1\":{\"2265\":1}}],[\"清空指定元素的所有子元素\",{\"1\":{\"1462\":1}}],[\"清空模式\",{\"1\":{\"1338\":1}}],[\"清空eden和from区\",{\"1\":{\"720\":1}}],[\"清空所有数据库\",{\"1\":{\"198\":1}}],[\"清空当前数据库\",{\"1\":{\"198\":1}}],[\"淘汰策略概述\",{\"0\":{\"156\":1}}],[\"逐个poll\",{\"1\":{\"2480\":1}}],[\"逐个字符比较\",{\"1\":{\"2294\":1}}],[\"逐级目录排查\",{\"1\":{\"1667\":1}}],[\"逐步调整\",{\"1\":{\"818\":1,\"852\":1,\"886\":1,\"920\":1}}],[\"逐出数据的过程不是100\",{\"1\":{\"156\":1}}],[\"逐出算法\",{\"0\":{\"155\":1}}],[\"逐一进行检测\",{\"1\":{\"153\":1}}],[\"拿空间换时间\",{\"1\":{\"154\":1}}],[\"拿时间换空间\",{\"1\":{\"151\":1,\"152\":1,\"154\":1}}],[\"下界通配符\",{\"0\":{\"3040\":1},\"1\":{\"3040\":1}}],[\"下划线转驼峰命名\",{\"1\":{\"3000\":1}}],[\"下划线转驼峰\",{\"1\":{\"3000\":1}}],[\"下沉\",{\"1\":{\"2472\":1}}],[\"下文中配置文件路径一致\",{\"1\":{\"1692\":1}}],[\"下创建nginx\",{\"1\":{\"1595\":1}}],[\"下的\",{\"1\":{\"1487\":1}}],[\"下拉框被选中的元素\",{\"1\":{\"1459\":1}}],[\"下标遍历\",{\"1\":{\"1179\":1}}],[\"下面我\",{\"1\":{\"3248\":1}}],[\"下面我将介绍通过kibana认证登录的方式访问elk\",{\"1\":{\"1349\":1}}],[\"下面命令可以输出\",{\"1\":{\"3246\":1}}],[\"下面采用直接修改内核参数的方式\",{\"1\":{\"1788\":1}}],[\"下面通过源码安装\",{\"1\":{\"1779\":1}}],[\"下面分别介绍这几种日志\",{\"1\":{\"1739\":1}}],[\"下面进入oracle\",{\"1\":{\"1570\":1}}],[\"下面仅说明差异点\",{\"1\":{\"1001\":1}}],[\"下面的注解都被\",{\"1\":{\"415\":1,\"459\":1}}],[\"下午6\",{\"1\":{\"286\":1}}],[\"下午3\",{\"1\":{\"286\":5}}],[\"下一跳地址\",{\"1\":{\"3212\":1}}],[\"下一个节点\",{\"1\":{\"2680\":1}}],[\"下一个元素的索引\",{\"1\":{\"2498\":1}}],[\"下一个元素\",{\"1\":{\"2441\":1,\"2498\":2}}],[\"下一个要返回的节点的索引\",{\"1\":{\"2498\":1}}],[\"下一个要返回的节点\",{\"1\":{\"2498\":1}}],[\"下一个要返回的元素索引\",{\"1\":{\"2441\":1}}],[\"下一个要发送的字节序号\",{\"1\":{\"1312\":1}}],[\"下一下再执行\",{\"1\":{\"283\":1}}],[\"下一篇\",{\"1\":{\"5\":1}}],[\"下载最新版本\",{\"1\":{\"3261\":1}}],[\"下载最新镜像\",{\"1\":{\"3245\":1}}],[\"下载服务镜像\",{\"1\":{\"3246\":1}}],[\"下载并安装asyncprofiler\",{\"1\":{\"3100\":1}}],[\"下载进度\",{\"1\":{\"2849\":1}}],[\"下载到本地\",{\"1\":{\"1898\":1}}],[\"下载到本地路径\",{\"1\":{\"1898\":1}}],[\"下载完成后需要将压缩文件解压\",{\"1\":{\"1782\":1}}],[\"下载redis软件\",{\"0\":{\"1781\":1}}],[\"下载rpm\",{\"1\":{\"1581\":1}}],[\"下载好安装包\",{\"1\":{\"1779\":1}}],[\"下载jdk\",{\"0\":{\"1726\":1}}],[\"下载docker\",{\"1\":{\"1714\":1}}],[\"下载kk\",{\"1\":{\"1677\":1}}],[\"下载速度较慢\",{\"1\":{\"1669\":1}}],[\"下载安装脚本\",{\"0\":{\"1633\":1}}],[\"下载安装包拷贝到linux中\",{\"0\":{\"1626\":1,\"1715\":1}}],[\"下载安装包\",{\"0\":{\"1617\":1,\"1623\":1,\"1749\":1,\"1755\":1,\"1766\":1},\"1\":{\"1734\":1}}],[\"下载\",{\"0\":{\"1581\":1},\"1\":{\"1635\":1,\"1898\":1}}],[\"下载包\",{\"1\":{\"1563\":1}}],[\"下载镜像清单\",{\"1\":{\"1635\":1}}],[\"下载镜像\",{\"0\":{\"1515\":1}}],[\"下载gpg签名工具\",{\"1\":{\"995\":1}}],[\"下载输出流\",{\"1\":{\"286\":1}}],[\"下载文件\",{\"1\":{\"286\":1}}],[\"下载地址\",{\"1\":{\"260\":1,\"996\":1,\"1581\":1,\"1617\":1}}],[\"下载官方dockerfile\",{\"0\":{\"247\":1}}],[\"下载适配m1芯片的seata镜像\",{\"1\":{\"237\":1}}],[\"下次从该位置继续传输来实现\",{\"1\":{\"2849\":1}}],[\"下次从current\",{\"1\":{\"153\":1}}],[\"下次调度时间\",{\"1\":{\"1687\":1}}],[\"下次启动即可从4\",{\"1\":{\"1478\":1}}],[\"下次用户登录时\",{\"1\":{\"306\":1}}],[\"下次此类数据到达重复上述过程\",{\"1\":{\"192\":1}}],[\"检索和维护项目文档的重要机制\",{\"1\":{\"1966\":1}}],[\"检索和维护项目中的所有文档\",{\"1\":{\"1955\":1}}],[\"检索和维护\",{\"1\":{\"1957\":1,\"1964\":1,\"1966\":1}}],[\"检索内容\",{\"1\":{\"1857\":2}}],[\"检索\",{\"1\":{\"1857\":1,\"1959\":1,\"1985\":1}}],[\"检查状态转换是否合法\",{\"1\":{\"3223\":1}}],[\"检查本地路由表\",{\"1\":{\"3212\":1}}],[\"检查方法是否有\",{\"1\":{\"3002\":1,\"3005\":1}}],[\"检查方法名是否符合驼峰命名法\",{\"1\":{\"1087\":1}}],[\"检查字段和方法上的注解\",{\"1\":{\"2999\":1}}],[\"检查字段是否使用final修饰\",{\"1\":{\"1087\":1}}],[\"检查流的类型\",{\"1\":{\"2873\":1}}],[\"检查关键算法和数据结构的时间\",{\"1\":{\"2728\":1}}],[\"检查key是否为null\",{\"1\":{\"2655\":1}}],[\"检查kibana容器配置文件\",{\"0\":{\"1520\":1}}],[\"检查集合是否包含指定元素\",{\"1\":{\"2602\":1}}],[\"检查括号是否匹配\",{\"1\":{\"2554\":1}}],[\"检查元素索引是否合法\",{\"1\":{\"2495\":1}}],[\"检查元素是否在集合中\",{\"1\":{\"203\":1}}],[\"检查位置索引是否合法\",{\"1\":{\"2494\":1}}],[\"检查头节点是否被修改\",{\"1\":{\"2485\":1}}],[\"检查尾节点是否被修改\",{\"1\":{\"2485\":1}}],[\"检查\",{\"1\":{\"2462\":1,\"2513\":1,\"3263\":1}}],[\"检查并发修改\",{\"1\":{\"2441\":3,\"2498\":1}}],[\"检查添加操作的索引是否合法\",{\"1\":{\"2439\":1}}],[\"检查索引是否超出范围\",{\"1\":{\"2439\":1}}],[\"检查索引是否合法\",{\"1\":{\"2437\":1,\"2439\":2,\"2440\":1,\"2494\":1,\"2495\":2,\"2496\":1}}],[\"检查c\",{\"1\":{\"2436\":1}}],[\"检查该位置是否已有元素\",{\"1\":{\"2393\":1}}],[\"检查矩阵乘法条件\",{\"1\":{\"2183\":1}}],[\"检查格式是否支持\",{\"1\":{\"1974\":2,\"1987\":2}}],[\"检查redis\",{\"1\":{\"1788\":1}}],[\"检查到redis服务正在运行\",{\"1\":{\"1786\":1}}],[\"检查nacos的dns是否一致\",{\"1\":{\"1696\":1}}],[\"检查卸载后内核版本\",{\"1\":{\"1499\":1}}],[\"检查内核版本\",{\"1\":{\"1472\":1,\"1478\":1,\"1479\":1}}],[\"检查内存泄漏\",{\"1\":{\"700\":1}}],[\"检查自己的nginx是否安装了ssl模块\",{\"1\":{\"1416\":1}}],[\"检查访问权限\",{\"1\":{\"1263\":1,\"2986\":1,\"2987\":1}}],[\"检查是否拥有任一权限\",{\"1\":{\"3154\":1}}],[\"检查是否拥有所有权限\",{\"1\":{\"3154\":1}}],[\"检查是否有route头域\",{\"1\":{\"3212\":1}}],[\"检查是否有\",{\"1\":{\"2999\":1}}],[\"检查是否有异常方法或属性\",{\"1\":{\"738\":1}}],[\"检查是否支持mark\",{\"1\":{\"2849\":1}}],[\"检查是否为string类型\",{\"1\":{\"2294\":1}}],[\"检查是否删除成功\",{\"0\":{\"1725\":1}}],[\"检查是否安装了crontab\",{\"1\":{\"1504\":1}}],[\"检查是否需要退出\",{\"1\":{\"1237\":1}}],[\"检查是否需要扩容\",{\"1\":{\"1181\":1,\"2600\":1,\"2683\":1}}],[\"检查两个字符串长度是否相同\",{\"1\":{\"1170\":1}}],[\"检查类名是否符合驼峰命名法\",{\"1\":{\"1087\":1}}],[\"检查它与现有依赖的兼容性\",{\"1\":{\"1029\":1,\"1030\":1}}],[\"检查依赖更新\",{\"1\":{\"1025\":1}}],[\"检查settings\",{\"1\":{\"944\":1,\"988\":1}}],[\"检查pom文件中的语法错误\",{\"1\":{\"944\":1}}],[\"检查中断状态并做出响应\",{\"1\":{\"607\":1}}],[\"检查用户是否登录\",{\"1\":{\"430\":1}}],[\"检查bean是否存在等基本功能\",{\"1\":{\"321\":1}}],[\"检查安装成功\",{\"1\":{\"264\":1}}],[\"检查配置是否成功\",{\"1\":{\"261\":1}}],[\"检查键是否存在\",{\"1\":{\"199\":1}}],[\"检查下一个expires\",{\"1\":{\"153\":1}}],[\"检测代码缺陷和潜在问题\",{\"1\":{\"2017\":1}}],[\"检测ip途径的各代理地址\",{\"1\":{\"1917\":1}}],[\"检测ip端口是否开放\",{\"1\":{\"1916\":1}}],[\"检测ip是否通\",{\"1\":{\"1916\":1}}],[\"检测ip和端口通畅\",{\"0\":{\"1916\":1}}],[\"检测硬盘大小\",{\"0\":{\"1911\":1}}],[\"检测的核心就是审计\",{\"1\":{\"1738\":1}}],[\"检测\",{\"1\":{\"1738\":1}}],[\"检测数据在传输过程中的差错\",{\"1\":{\"1312\":1}}],[\"检测完成后上方的release就会变成可点击的状态\",{\"1\":{\"1004\":1}}],[\"检测mysql严重耗时业务进行优化\",{\"1\":{\"190\":1}}],[\"检测全库数据\",{\"1\":{\"157\":1}}],[\"检测易失数据\",{\"1\":{\"157\":1}}],[\"检测内存是否充足\",{\"1\":{\"156\":1}}],[\"检测频度可自定义设置\",{\"1\":{\"153\":1}}],[\"检测时\",{\"1\":{\"153\":1}}],[\"默认开启\",{\"1\":{\"3270\":1}}],[\"默认没有\",{\"1\":{\"3250\":1}}],[\"默认加sh\",{\"1\":{\"3245\":1}}],[\"默认sip消息处理器\",{\"1\":{\"3218\":1}}],[\"默认5060\",{\"1\":{\"3177\":1}}],[\"默认浮点\",{\"1\":{\"2905\":1}}],[\"默认缓冲区大小\",{\"1\":{\"2872\":1}}],[\"默认缓冲区大小通常为8kb\",{\"1\":{\"2865\":1}}],[\"默认黑色\",{\"1\":{\"2654\":1}}],[\"默认按自然顺序排序或通过comparator自定义排序\",{\"1\":{\"2646\":1}}],[\"默认序列化会保存整个哈希表结构\",{\"1\":{\"2641\":1}}],[\"默认0\",{\"1\":{\"2609\":1}}],[\"默认6\",{\"1\":{\"2608\":1}}],[\"默认60秒\",{\"1\":{\"172\":1}}],[\"默认实现\",{\"1\":{\"2463\":1}}],[\"默认空数组实例\",{\"1\":{\"2433\":1}}],[\"默认容量16的设计考量\",{\"1\":{\"2282\":1}}],[\"默认容量16\",{\"1\":{\"2263\":2,\"2278\":1}}],[\"默认初始化值\",{\"1\":{\"2144\":1}}],[\"默认初始容量\",{\"1\":{\"1181\":1,\"2318\":1,\"2433\":1}}],[\"默认访问级别\",{\"1\":{\"2076\":1}}],[\"默认储存位置\",{\"1\":{\"1898\":1}}],[\"默认docker\",{\"1\":{\"3245\":1}}],[\"默认d\",{\"1\":{\"1898\":1}}],[\"默认解压到当前目录\",{\"1\":{\"1894\":1}}],[\"默认块大小是1024byte\",{\"1\":{\"1887\":1}}],[\"默认当前是root根目录\",{\"1\":{\"1781\":1}}],[\"默认在同一包内可见\",{\"1\":{\"2796\":1}}],[\"默认在\",{\"1\":{\"1779\":1}}],[\"默认生成\",{\"1\":{\"1653\":1,\"1703\":1}}],[\"默认有sys和system两个用户\",{\"1\":{\"1570\":1}}],[\"默认下载oracle\",{\"1\":{\"1568\":1}}],[\"默认创建的这个sh问件是没有执行权限的\",{\"1\":{\"1504\":1}}],[\"默认的一个sid\",{\"1\":{\"1570\":1}}],[\"默认的媒体类型\",{\"1\":{\"1385\":1}}],[\"默认的首页文件\",{\"1\":{\"1379\":1,\"1384\":1,\"1385\":1}}],[\"默认的冲突解决策略\",{\"1\":{\"1028\":1}}],[\"默认是\",{\"1\":{\"1435\":2,\"1436\":2,\"3246\":1}}],[\"默认是可以直接访问到kibana的\",{\"1\":{\"1349\":1}}],[\"默认是不加密\",{\"1\":{\"305\":1}}],[\"默认策略\",{\"1\":{\"1065\":1}}],[\"默认\",{\"0\":{\"1404\":1},\"1\":{\"992\":1,\"1687\":1,\"1940\":1,\"2733\":1,\"2765\":1}}],[\"默认情况下模块不会导出其内部包\",{\"1\":{\"2994\":1}}],[\"默认情况下\",{\"1\":{\"972\":1,\"975\":1,\"1418\":1,\"1739\":1,\"2832\":1}}],[\"默认范围\",{\"1\":{\"925\":1,\"938\":1}}],[\"默认无限制\",{\"1\":{\"792\":1,\"826\":1,\"860\":1,\"894\":1}}],[\"默认80\",{\"1\":{\"1379\":1,\"1385\":1}}],[\"默认8kb\",{\"1\":{\"1224\":1}}],[\"默认8\",{\"1\":{\"792\":1,\"826\":1,\"860\":1,\"894\":1,\"2414\":1,\"2607\":1,\"2608\":1}}],[\"默认2\",{\"1\":{\"792\":1,\"826\":1,\"860\":1,\"894\":1}}],[\"默认物理内存的1\",{\"1\":{\"792\":2,\"826\":2,\"860\":2,\"894\":2}}],[\"默认eden\",{\"1\":{\"717\":1}}],[\"默认15次\",{\"1\":{\"2987\":1}}],[\"默认15岁晋升\",{\"1\":{\"708\":1}}],[\"默认16\",{\"1\":{\"2541\":1,\"2609\":1}}],[\"默认10\",{\"1\":{\"2318\":1}}],[\"默认10秒\",{\"1\":{\"169\":1}}],[\"默认1m\",{\"1\":{\"793\":1,\"827\":1,\"861\":1,\"895\":1}}],[\"默认1\",{\"1\":{\"717\":1}}],[\"默认优先级为5\",{\"1\":{\"606\":1}}],[\"默认启用新特性\",{\"1\":{\"514\":1}}],[\"默认方法需有方法体\",{\"1\":{\"2780\":1}}],[\"默认方法的设计遵循了\",{\"1\":{\"549\":1}}],[\"默认方法使用default关键字修饰\",{\"1\":{\"541\":1}}],[\"默认方法\",{\"0\":{\"541\":1},\"1\":{\"473\":1,\"541\":1,\"1059\":1}}],[\"默认值存储在annotationdefault属性中\",{\"1\":{\"3145\":1}}],[\"默认值为null\",{\"1\":{\"2144\":1}}],[\"默认值为0\",{\"1\":{\"157\":1,\"2144\":1}}],[\"默认值减少显式配置\",{\"1\":{\"1074\":1}}],[\"默认值与自定义\",{\"1\":{\"809\":1,\"843\":1,\"877\":1,\"911\":1}}],[\"默认值\",{\"1\":{\"327\":1}}],[\"默认分4个并行组\",{\"1\":{\"272\":1}}],[\"默认国外的镜像源地址比较慢改为国内的\",{\"1\":{\"261\":1}}],[\"默认为capacity\",{\"1\":{\"3116\":1}}],[\"默认为0\",{\"1\":{\"2288\":1,\"2593\":1}}],[\"默认为可以\",{\"1\":{\"1503\":2}}],[\"默认为\",{\"1\":{\"242\":1}}],[\"默认为10\",{\"1\":{\"153\":1}}],[\"默认latest拉取不下来\",{\"1\":{\"233\":1}}],[\"默认会在data\",{\"1\":{\"115\":1}}],[\"返回200\",{\"1\":{\"3187\":1,\"3188\":1}}],[\"返回3xx响应\",{\"1\":{\"3185\":1}}],[\"返回统一的用户友好响应\",{\"1\":{\"2960\":1}}],[\"返回友好消息\",{\"1\":{\"2956\":1}}],[\"返回友好响应\",{\"1\":{\"2956\":1}}],[\"返回简单的html响应\",{\"1\":{\"2921\":1}}],[\"返回下一个字节\",{\"1\":{\"2873\":1}}],[\"返回实际读取的字符数\",{\"1\":{\"2853\":1}}],[\"返回实际读取的字节数\",{\"1\":{\"2841\":1}}],[\"返回可读取的字节数估计值\",{\"1\":{\"2841\":1}}],[\"返回0\",{\"1\":{\"2841\":1,\"2853\":1}}],[\"返回枚举常量的名称\",{\"1\":{\"2820\":1}}],[\"返回枚举常量的索引位置\",{\"1\":{\"2820\":1}}],[\"返回所有枚举常量的数组\",{\"1\":{\"2820\":1}}],[\"返回类型必须相同\",{\"1\":{\"2752\":1}}],[\"返回类型必须与父类兼容\",{\"1\":{\"2737\":1}}],[\"返回类型不同不足以构成重载\",{\"1\":{\"2741\":1}}],[\"返回逆序的键集视图\",{\"1\":{\"2665\":1}}],[\"返回逆序迭代器\",{\"1\":{\"2498\":1}}],[\"返回支持导航方法的键集视图\",{\"1\":{\"2665\":1}}],[\"返回键值对的set视图\",{\"1\":{\"2665\":1}}],[\"返回键的set视图\",{\"1\":{\"2665\":1}}],[\"返回long类型\",{\"1\":{\"2533\":1}}],[\"返回从指定位置开始的列表迭代器\",{\"1\":{\"2498\":1}}],[\"返回指定索引处的节点\",{\"1\":{\"2495\":1}}],[\"返回指定节点的元素\",{\"1\":{\"2495\":1}}],[\"返回指定位置的元素\",{\"1\":{\"2439\":1}}],[\"返回特殊值\",{\"1\":{\"2462\":1}}],[\"返回iterator\",{\"1\":{\"2454\":1}}],[\"返回int值\",{\"1\":{\"2194\":1}}],[\"返回列表的迭代器\",{\"1\":{\"2441\":1,\"2498\":1}}],[\"返回被删除的元素\",{\"1\":{\"2440\":1,\"2496\":1,\"2497\":2}}],[\"返回旧元素\",{\"1\":{\"2439\":1,\"2495\":1}}],[\"返回默认容量10和mincapacity中的较大值\",{\"1\":{\"2437\":1}}],[\"返回副本而非原对象引用\",{\"1\":{\"2307\":1}}],[\"返回池中的引用\",{\"1\":{\"2297\":1}}],[\"返回索引\",{\"1\":{\"2150\":1}}],[\"返回两个数的和\",{\"1\":{\"2090\":1}}],[\"返回结果\",{\"1\":{\"1871\":1}}],[\"返回错误信息\",{\"1\":{\"1764\":1}}],[\"返回\",{\"1\":{\"1764\":1,\"2831\":1}}],[\"返回180\",{\"1\":{\"3188\":1}}],[\"返回1认证成功\",{\"1\":{\"1764\":1}}],[\"返回1\",{\"1\":{\"1736\":1}}],[\"返回完整的消息列表\",{\"1\":{\"1325\":1}}],[\"返回不可变的日期对象\",{\"1\":{\"2779\":1}}],[\"返回不可变视图\",{\"1\":{\"2358\":1}}],[\"返回不可变列表\",{\"1\":{\"1198\":1}}],[\"返回不存在\",{\"1\":{\"152\":1}}],[\"返回的是原列表的视图\",{\"1\":{\"2346\":1}}],[\"返回的是不可变列表\",{\"1\":{\"1194\":1}}],[\"返回的是不可变集合\",{\"1\":{\"1191\":1}}],[\"返回的列表不可修改\",{\"1\":{\"1191\":1}}],[\"返回值类型\",{\"1\":{\"2784\":1}}],[\"返回值的collection视图\",{\"1\":{\"2665\":1}}],[\"返回值和异常\",{\"1\":{\"2095\":2}}],[\"返回值和异常信息\",{\"1\":{\"2035\":1}}],[\"返回值名称等的命名规范\",{\"1\":{\"1946\":1}}],[\"返回值\",{\"1\":{\"1068\":1,\"1945\":1}}],[\"返回常量池对象\",{\"1\":{\"1041\":1}}],[\"返回boolean\",{\"1\":{\"538\":1,\"2909\":2}}],[\"返回一个结果\",{\"1\":{\"538\":2}}],[\"返回null的方法调用链\",{\"1\":{\"2053\":1}}],[\"返回null\",{\"1\":{\"501\":1}}],[\"返回falsebean1创建失败报错\",{\"1\":{\"459\":1}}],[\"返回falsebean创建失败\",{\"1\":{\"415\":1}}],[\"返回通知\",{\"1\":{\"336\":1}}],[\"返回数据\",{\"1\":{\"152\":1}}],[\"返回顶部按钮\",{\"1\":{\"5\":1,\"8\":1}}],[\"缺少业务上下文\",{\"1\":{\"2071\":1}}],[\"缺少count属性\",{\"1\":{\"1079\":1}}],[\"缺少对基本表的权限\",{\"1\":{\"125\":1}}],[\"缺点是过度使用会导致代码臃肿\",{\"1\":{\"1254\":1}}],[\"缺点是代码会变得更加复杂\",{\"1\":{\"359\":1}}],[\"缺点是不能像编程式事务管理那样精细地控制事务\",{\"1\":{\"359\":1}}],[\"缺点是不能确保依赖对象在实例化时就被注入\",{\"1\":{\"331\":1}}],[\"缺点是当依赖对象较多时\",{\"1\":{\"331\":1}}],[\"缺点\",{\"1\":{\"151\":1,\"152\":1,\"291\":1,\"686\":1,\"761\":1,\"764\":1,\"765\":1,\"766\":1,\"932\":1,\"945\":1,\"967\":1,\"1030\":1,\"1049\":1,\"1155\":1,\"1197\":3,\"1314\":1,\"1315\":1,\"1316\":1,\"1382\":1,\"2155\":1,\"2227\":1,\"2356\":4,\"2456\":4,\"2513\":4,\"2528\":1,\"2543\":1,\"2636\":1,\"2921\":2,\"2931\":1,\"3078\":1,\"3085\":2,\"3121\":3}}],[\"到\",{\"1\":{\"1783\":1}}],[\"到行尾\",{\"1\":{\"1731\":1}}],[\"到行首\",{\"1\":{\"1731\":1}}],[\"到公司私仓下载镜像\",{\"1\":{\"1641\":1}}],[\"到物理机的d盘中\",{\"1\":{\"1569\":1}}],[\"到的访问概率越高\",{\"1\":{\"1405\":1}}],[\"到卸载出内存为止\",{\"1\":{\"741\":1}}],[\"到处运行\",{\"1\":{\"574\":1,\"696\":1,\"1046\":1,\"1153\":1}}],[\"到时就删除\",{\"1\":{\"151\":1}}],[\"到data\",{\"1\":{\"116\":1}}],[\"定制排序\",{\"1\":{\"2363\":1,\"2371\":1,\"2400\":1,\"2461\":1,\"2582\":1,\"2664\":1,\"2666\":1}}],[\"定位维度\",{\"1\":{\"521\":1}}],[\"定期进行性能测试和瓶颈分析\",{\"1\":{\"3228\":1}}],[\"定期进行代码和架构评审\",{\"1\":{\"2013\":1}}],[\"定期刷新注册可通过定时器实现\",{\"1\":{\"3199\":1}}],[\"定期刷新注册\",{\"1\":{\"3199\":1}}],[\"定期评估监控系统性能影响\",{\"1\":{\"3110\":1}}],[\"定期规范审计与改进\",{\"1\":{\"2029\":1}}],[\"定期回顾和更新\",{\"1\":{\"2028\":1}}],[\"定期审计规范执行情况\",{\"1\":{\"2027\":1}}],[\"定期更新和维护文档\",{\"1\":{\"1958\":1}}],[\"定期更新依赖版本\",{\"1\":{\"932\":1}}],[\"定期执行该脚本\",{\"1\":{\"1504\":1}}],[\"定期实现文件同步\",{\"0\":{\"1504\":1}}],[\"定期发送options消息检测连接状态\",{\"1\":{\"1115\":1}}],[\"定期使用mvn\",{\"1\":{\"1025\":1}}],[\"定期检查依赖的更新和安全漏洞\",{\"1\":{\"1029\":1,\"1030\":1}}],[\"定期检查依赖\",{\"0\":{\"1025\":1}}],[\"定期检查依赖树\",{\"1\":{\"966\":1}}],[\"定期检查项目依赖\",{\"1\":{\"931\":1}}],[\"定期清理\",{\"1\":{\"192\":1}}],[\"定期维护\",{\"1\":{\"190\":1}}],[\"定期删除就是周期性轮询redis库中的时效性数据\",{\"1\":{\"153\":1}}],[\"定期删除\",{\"0\":{\"153\":1},\"1\":{\"150\":1,\"154\":1}}],[\"定时任务调度\",{\"1\":{\"2461\":1,\"2486\":1}}],[\"定时打印线程池状态\",{\"1\":{\"626\":1}}],[\"定时器任务\",{\"1\":{\"165\":1}}],[\"定时删除和惰性删除这两种方案都是走的极端\",{\"1\":{\"153\":1}}],[\"定时删除\",{\"0\":{\"151\":1},\"1\":{\"150\":1,\"154\":1}}],[\"定义容器运行的时候监听的端口\",{\"1\":{\"3246\":1}}],[\"定义外部可以挂载的数据卷\",{\"1\":{\"3246\":1}}],[\"定义权限注解\",{\"1\":{\"3154\":1}}],[\"定义格式\",{\"1\":{\"3019\":1,\"3023\":1,\"3024\":1}}],[\"定义跨服务的标准异常响应格式\",{\"1\":{\"2960\":1}}],[\"定义\",{\"1\":{\"2543\":1,\"3085\":1}}],[\"定义接口\",{\"1\":{\"2077\":1,\"2742\":1,\"2883\":1}}],[\"定义类\",{\"1\":{\"2077\":1}}],[\"定义业务实体\",{\"1\":{\"2007\":1}}],[\"定义文档的各种流程\",{\"1\":{\"1975\":1}}],[\"定义项目中常见的文档类型\",{\"1\":{\"1961\":1}}],[\"定义进行挂载的数据卷\",{\"1\":{\"1661\":1}}],[\"定义jdk基础镜像版本\",{\"1\":{\"1551\":1}}],[\"定义skywalking\",{\"1\":{\"1551\":1}}],[\"定义索引\",{\"1\":{\"1524\":1}}],[\"定义es服务器的ip\",{\"1\":{\"1524\":1}}],[\"定义图片路径变量\",{\"1\":{\"1469\":1}}],[\"定义定时器对象\",{\"1\":{\"1469\":1}}],[\"定义计数器变量\",{\"1\":{\"1469\":1}}],[\"定义计数器\",{\"1\":{\"1469\":1}}],[\"定义请求查询分页数据的函数\",{\"1\":{\"1444\":2}}],[\"定义查询分页数据的函数\",{\"1\":{\"1443\":1}}],[\"定义滚动条距底部的距离\",{\"1\":{\"1443\":2}}],[\"定义当前页码和每页显示的条数\",{\"1\":{\"1443\":2,\"1444\":2}}],[\"定义发送请求标记\",{\"1\":{\"1443\":2}}],[\"定义限流维度\",{\"1\":{\"1395\":1,\"1396\":1}}],[\"定义校验注解\",{\"1\":{\"1069\":1}}],[\"定义日志注解\",{\"1\":{\"1068\":1}}],[\"定义的是多线程之间共享变量的可见性\",{\"1\":{\"703\":1}}],[\"定义的这类授权\",{\"1\":{\"125\":2}}],[\"定义企业级应用标准\",{\"1\":{\"577\":1}}],[\"定义各个策略子类\",{\"1\":{\"292\":1}}],[\"定义一个简单的注解\",{\"1\":{\"3134\":1}}],[\"定义一个接口\",{\"1\":{\"2100\":1}}],[\"定义一个类\",{\"1\":{\"2100\":1}}],[\"定义一个整数变量\",{\"1\":{\"2089\":1}}],[\"定义一个标记注解\",{\"1\":{\"1087\":1}}],[\"定义一个策略接口\",{\"1\":{\"292\":1}}],[\"定义一套制作炸鸡的步骤\",{\"1\":{\"291\":1}}],[\"定义了sip请求和响应的交互模式\",{\"1\":{\"3227\":1}}],[\"定义了请求和响应的交互模式\",{\"1\":{\"3208\":1}}],[\"定义了基本的字符写入方法\",{\"1\":{\"2854\":1}}],[\"定义了基本的字符读取方法\",{\"1\":{\"2853\":1}}],[\"定义了基本的字节写入方法\",{\"1\":{\"2842\":1}}],[\"定义了基本的字节读取方法\",{\"1\":{\"2841\":1}}],[\"定义了list的行为规范\",{\"1\":{\"2331\":1}}],[\"定义了线程和主内存之间的抽象关系\",{\"1\":{\"602\":1}}],[\"定义了当一个事务方法调用另一个事务方法时\",{\"1\":{\"348\":1,\"355\":1}}],[\"定义了哪些连接点会被拦截\",{\"1\":{\"335\":1}}],[\"定义了过多分区\",{\"1\":{\"125\":1}}],[\"定义了错误的子分区数\",{\"1\":{\"125\":1}}],[\"定义了错误的分区数\",{\"1\":{\"125\":1}}],[\"定义了多个主键\",{\"1\":{\"125\":1}}],[\"定义这类授权\",{\"1\":{\"125\":1}}],[\"甚至可以缓存methodaccessor等底层调用器\",{\"1\":{\"3011\":1}}],[\"甚至可以控制是否执行连接点\",{\"1\":{\"336\":1,\"344\":1}}],[\"甚至oom\",{\"1\":{\"782\":1,\"813\":1,\"847\":1,\"881\":1,\"915\":1}}],[\"甚至无法满足一些业务上的需求\",{\"1\":{\"306\":1}}],[\"甚至引发服务器宕机或\",{\"1\":{\"150\":1}}],[\"甚至能达到\",{\"1\":{\"129\":1}}],[\"看似o\",{\"1\":{\"2723\":1}}],[\"看文件里有多少个word\",{\"1\":{\"1860\":1}}],[\"看到\",{\"1\":{\"1569\":1}}],[\"看不到监控数据\",{\"1\":{\"1547\":1}}],[\"看起来像是同时进行\",{\"1\":{\"1123\":1}}],[\"看需要什么格式的请求体json\",{\"1\":{\"285\":1}}],[\"看下图\",{\"1\":{\"148\":1}}],[\"看master1能否同步\",{\"1\":{\"104\":1}}],[\"代理\",{\"1\":{\"3228\":1}}],[\"代理对象会从class文件的属性表中读取对应的值\",{\"1\":{\"3149\":1}}],[\"代理服务器路由实现示例\",{\"1\":{\"3212\":1}}],[\"代理服务器路由逻辑\",{\"0\":{\"3212\":1}}],[\"代理服务器可分为\",{\"1\":{\"3212\":1}}],[\"代理服务器是sip路由的关键组件\",{\"1\":{\"3212\":1}}],[\"代理服务器转发请求\",{\"1\":{\"3188\":1}}],[\"代理服务器分为有状态和无状态两种\",{\"1\":{\"3183\":1}}],[\"代理服务器接收sip请求并转发给其他服务器\",{\"1\":{\"3183\":1}}],[\"代理服务器\",{\"0\":{\"3183\":1},\"1\":{\"3130\":1,\"3192\":1,\"3220\":1}}],[\"代理服务器nginx就可以直接处理\",{\"1\":{\"1401\":1}}],[\"代理模式的目的是增强接口实现的功能\",{\"1\":{\"2994\":1}}],[\"代理模式的基础\",{\"1\":{\"2992\":1}}],[\"代理环境\",{\"0\":{\"1705\":1},\"1\":{\"1655\":1}}],[\"代表本次执行的上下文路径\",{\"1\":{\"3246\":1}}],[\"代表自己输入的英文字母\",{\"1\":{\"1392\":1}}],[\"代表a服务先启动\",{\"1\":{\"1368\":1}}],[\"代表所有运行模式不开启\",{\"1\":{\"1368\":1}}],[\"代表方法的参数\",{\"1\":{\"1261\":1}}],[\"代表类\",{\"1\":{\"1261\":1}}],[\"代表类的构造函数\",{\"1\":{\"1261\":1}}],[\"代表类的方法\",{\"1\":{\"1261\":1}}],[\"代表类的成员变量\",{\"1\":{\"1261\":1}}],[\"代表类的字节码对象\",{\"1\":{\"1261\":1}}],[\"代表该数据在内存中还能存活的时间\",{\"1\":{\"147\":1}}],[\"代价是不是很大\",{\"1\":{\"304\":1}}],[\"代码片段\",{\"0\":{\"3290\":1}}],[\"代码说明\",{\"1\":{\"3190\":1}}],[\"代码生成\",{\"1\":{\"3152\":1}}],[\"代码简洁\",{\"1\":{\"2826\":1}}],[\"代码简洁但效率最低\",{\"1\":{\"1164\":1}}],[\"代码更健壮\",{\"1\":{\"2349\":1}}],[\"代码更加简洁\",{\"1\":{\"548\":1}}],[\"代码量少\",{\"1\":{\"2227\":1}}],[\"代码冗长\",{\"1\":{\"2227\":1}}],[\"代码中的特殊处理和边界条件\",{\"1\":{\"2095\":1}}],[\"代码风格规范\",{\"0\":{\"2031\":1}}],[\"代码规范检查工具配置\",{\"0\":{\"2042\":1}}],[\"代码规范\",{\"0\":{\"2030\":1}}],[\"代码规范插件\",{\"0\":{\"296\":1}}],[\"代码评审通过率\",{\"1\":{\"2026\":1}}],[\"代码评审流程与规范执行\",{\"0\":{\"2022\":1}}],[\"代码是否符合项目命名规范\",{\"1\":{\"2023\":1}}],[\"代码重复率低于5\",{\"1\":{\"2021\":1}}],[\"代码覆盖率最低阈值\",{\"1\":{\"2021\":1}}],[\"代码如下\",{\"1\":{\"1788\":1}}],[\"代码实现\",{\"1\":{\"1431\":1,\"1433\":1,\"1434\":1,\"1435\":1,\"1440\":1,\"1443\":1,\"1447\":1,\"1450\":1,\"1455\":1,\"1456\":1,\"1457\":1,\"1458\":1,\"1459\":1,\"1461\":1,\"1462\":1,\"1463\":1,\"1464\":1,\"1467\":1,\"1469\":1,\"1470\":1,\"2512\":1}}],[\"代码实践\",{\"0\":{\"591\":1,\"608\":1,\"624\":1,\"640\":1,\"657\":1,\"674\":1,\"692\":1,\"709\":1,\"726\":1,\"744\":1,\"771\":1,\"799\":1,\"833\":1,\"867\":1,\"901\":1,\"1035\":1,\"1067\":1,\"1093\":1,\"1176\":1,\"1292\":1,\"1322\":1,\"2321\":1,\"2368\":1,\"2405\":1,\"2435\":1,\"2464\":1,\"2492\":1,\"2521\":1,\"2550\":1,\"2570\":1,\"2597\":1,\"2625\":1,\"2652\":1,\"2678\":1,\"2705\":1}}],[\"代码意图更清晰\",{\"1\":{\"1286\":1}}],[\"代码与配置紧密结合\",{\"1\":{\"1086\":1}}],[\"代码自我描述\",{\"1\":{\"1071\":1}}],[\"代码块锁\",{\"1\":{\"641\":1}}],[\"代码块\",{\"1\":{\"537\":1,\"2356\":1}}],[\"代码审查指南更新\",{\"1\":{\"522\":1}}],[\"代码示例\",{\"0\":{\"323\":1,\"337\":1,\"351\":1,\"365\":1,\"379\":1,\"1947\":1},\"1\":{\"500\":1,\"1221\":1,\"1222\":1,\"1225\":1,\"1228\":1,\"1232\":1,\"2779\":1,\"3078\":1,\"3079\":1,\"3082\":1}}],[\"代码优化\",{\"1\":{\"1151\":1}}],[\"代码优化插件\",{\"0\":{\"298\":1}}],[\"代码优雅\",{\"1\":{\"292\":1}}],[\"代码复用\",{\"1\":{\"291\":1,\"1286\":1}}],[\"代码2\",{\"1\":{\"289\":1}}],[\"代码1\",{\"1\":{\"289\":1}}],[\"代码检出\",{\"0\":{\"1706\":1},\"1\":{\"280\":1,\"1654\":1,\"1655\":1,\"1656\":1,\"1704\":1,\"1711\":1}}],[\"代码+令牌桶算法\",{\"1\":{\"130\":1}}],[\"双方需要分别关闭各自的发送通道\",{\"1\":{\"3070\":1}}],[\"双方进入established状态\",{\"1\":{\"1311\":1}}],[\"双重缓冲\",{\"1\":{\"2873\":1}}],[\"双精度数\",{\"1\":{\"2845\":1}}],[\"双指针技术\",{\"1\":{\"2727\":1}}],[\"双层嵌套循环\",{\"1\":{\"2709\":1}}],[\"双端操作\",{\"1\":{\"2468\":1}}],[\"双端队列的头部移除并返回元素\",{\"1\":{\"2552\":1}}],[\"双端队列的尾部添加元素\",{\"1\":{\"2552\":1}}],[\"双端队列实现\",{\"0\":{\"2502\":1}}],[\"双端队列实现栈和队列\",{\"0\":{\"2468\":1}}],[\"双端队列特有方法\",{\"0\":{\"2497\":1}}],[\"双端队列\",{\"1\":{\"2465\":1,\"2468\":1}}],[\"双端队列支持\",{\"1\":{\"2335\":1}}],[\"双向性\",{\"1\":{\"3117\":1}}],[\"双向链表如何维护\",{\"1\":{\"2643\":1}}],[\"双向链表负责顺序维护\",{\"1\":{\"2637\":1}}],[\"双向链表节点结构\",{\"0\":{\"2623\":1}}],[\"双向链表节点内部类\",{\"1\":{\"2490\":1}}],[\"双向链表设计\",{\"0\":{\"2500\":1}}],[\"双向链表的尾节点\",{\"1\":{\"2490\":1,\"2621\":1}}],[\"双向链表的头节点\",{\"1\":{\"2490\":1,\"2621\":1}}],[\"双向链表\",{\"1\":{\"2316\":1,\"2461\":1,\"2503\":1,\"2634\":1}}],[\"双向通道\",{\"1\":{\"1315\":1,\"2919\":1,\"3079\":1}}],[\"双字节\",{\"1\":{\"2289\":1}}],[\"双括号初始化\",{\"1\":{\"1178\":1}}],[\"双亲委派机制是指当一个类加载器收到类加载请求时\",{\"1\":{\"1155\":1}}],[\"双亲委派模型的局限性\",{\"0\":{\"754\":1}}],[\"双亲委派模型的安全设计\",{\"0\":{\"749\":1}}],[\"双亲委派模型通过优先由父类加载器加载类\",{\"1\":{\"749\":1}}],[\"双亲委派模型演示\",{\"0\":{\"745\":1}}],[\"双亲委派模型是java类加载器的核心机制\",{\"1\":{\"742\":1}}],[\"双保险策略\",{\"1\":{\"142\":1}}],[\"双主从\",{\"0\":{\"97\":1}}],[\"且每次反射调用都需要进行访问权限检查和参数验证\",{\"1\":{\"3011\":1}}],[\"且一个方法只能有一个可变参数\",{\"1\":{\"2789\":1}}],[\"且当前节点为左孩子\",{\"1\":{\"2656\":2}}],[\"且当前节点为右孩子\",{\"1\":{\"2656\":2}}],[\"且都是非线程安全的\",{\"1\":{\"2591\":1}}],[\"且不可修改\",{\"1\":{\"2819\":1}}],[\"且不可动态调整\",{\"1\":{\"2541\":1}}],[\"且不会影响程序的正确性\",{\"1\":{\"2745\":1}}],[\"且不会进行任何备份\",{\"1\":{\"1675\":1}}],[\"且数组长度>=64时\",{\"1\":{\"2428\":1}}],[\"且数组长度不小于64时\",{\"1\":{\"2414\":1,\"2608\":1}}],[\"且设置ling\",{\"1\":{\"1573\":1}}],[\"且响应已就绪\",{\"1\":{\"1432\":1}}],[\"且没有提供修改数组的方法\",{\"1\":{\"703\":1}}],[\"且过期时间到达时\",{\"1\":{\"151\":1}}],[\"且追求大数据集的恢复速度\",{\"1\":{\"142\":1}}],[\"且恢复速度较快\",{\"1\":{\"142\":1}}],[\"且恢复速度较慢\",{\"1\":{\"142\":1}}],[\"且通过数据可以体现进入顺序\",{\"1\":{\"134\":1}}],[\"现代sip实现通常同时支持tcp和udp\",{\"1\":{\"3227\":1}}],[\"现代框架通常提供混合配置方式\",{\"1\":{\"1086\":1}}],[\"现场调整\",{\"1\":{\"191\":1}}],[\"现状问题\",{\"1\":{\"183\":1}}],[\"现在mongodb官方建议用副本集替代主从复制\",{\"1\":{\"1759\":1}}],[\"现在使用最广的开源搜索引擎之一\",{\"1\":{\"1507\":1}}],[\"现在一般前端用nginx作为反向代理抗住压力\",{\"1\":{\"1382\":1}}],[\"现在中国使用nginx网站用户有很多\",{\"1\":{\"1376\":1}}],[\"现在已经成为java开发中最受欢迎的框架之一\",{\"1\":{\"312\":1}}],[\"现在sentinel1就拿到了一票\",{\"1\":{\"182\":1}}],[\"现在很多大型网站都开启了ssl功能\",{\"1\":{\"114\":1}}],[\"现象\",{\"1\":{\"161\":2}}],[\"现问题时\",{\"1\":{\"142\":1}}],[\"低延迟\",{\"1\":{\"3206\":1}}],[\"低侵入式网络监控系统设计要点\",{\"1\":{\"3111\":1}}],[\"低效方式\",{\"1\":{\"2942\":1}}],[\"低空飞行\",{\"1\":{\"2748\":1}}],[\"低并发场景\",{\"1\":{\"2456\":1,\"2513\":1}}],[\"低并发\",{\"1\":{\"2424\":1}}],[\"低并发或需要精确计数用atomiclong\",{\"1\":{\"686\":1}}],[\"低频使用的字符串无需intern\",{\"1\":{\"2256\":1}}],[\"低停顿\",{\"1\":{\"770\":1}}],[\"低版本编译器编译高版本特性\",{\"1\":{\"737\":1}}],[\"低开销java性能分析器\",{\"1\":{\"3100\":1}}],[\"低开销\",{\"1\":{\"686\":1}}],[\"低\",{\"1\":{\"141\":2,\"1101\":2,\"1227\":1,\"2201\":1,\"2253\":1,\"2275\":1,\"2316\":1,\"2503\":1}}],[\"快恢复机制\",{\"1\":{\"1312\":1}}],[\"快重传\",{\"1\":{\"1312\":1}}],[\"快照仓库查看\",{\"1\":{\"1000\":1}}],[\"快照版本\",{\"0\":{\"995\":1},\"1\":{\"931\":1,\"988\":1}}],[\"快照形式\",{\"1\":{\"137\":1}}],[\"快速入门\",{\"1\":{\"3246\":1}}],[\"快速清理所有没有使用的镜像\",{\"1\":{\"3245\":1}}],[\"快速清理所有退出的容器\",{\"1\":{\"3245\":1}}],[\"快速恢复\",{\"1\":{\"3075\":1}}],[\"快速重传后\",{\"1\":{\"3075\":1}}],[\"快速重传\",{\"1\":{\"3075\":1}}],[\"快速重传和快速恢复\",{\"1\":{\"3075\":1}}],[\"快速增长\",{\"1\":{\"2702\":1}}],[\"快速排序\",{\"1\":{\"2702\":1,\"2727\":1}}],[\"快速排查依赖冲突\",{\"1\":{\"301\":1}}],[\"快速删除指定位置的元素\",{\"1\":{\"2440\":1}}],[\"快速失败并降级\",{\"1\":{\"3087\":1}}],[\"快速失败机制\",{\"0\":{\"2444\":1}}],[\"快速失败\",{\"1\":{\"2358\":1,\"2530\":1}}],[\"快速打印\",{\"1\":{\"2227\":1}}],[\"快速溯源\",{\"1\":{\"2051\":1}}],[\"快速原型开发\",{\"1\":{\"1347\":1}}],[\"快速解析和验证\",{\"1\":{\"731\":1}}],[\"快速释放掉不必要的内存占用\",{\"1\":{\"151\":1}}],[\"快\",{\"1\":{\"141\":2,\"2316\":4}}],[\"慢启动\",{\"1\":{\"3075\":2}}],[\"慢查询日志\",{\"1\":{\"1739\":1}}],[\"慢查询日志等\",{\"1\":{\"1739\":1}}],[\"慢开始\",{\"1\":{\"1312\":1}}],[\"慢日志\",{\"1\":{\"193\":1}}],[\"慢\",{\"1\":{\"141\":2,\"2316\":4}}],[\"小文件可考虑不使用缓冲流或使用较小缓冲区\",{\"1\":{\"2873\":1}}],[\"小文件操作\",{\"1\":{\"2873\":1}}],[\"小狗\",{\"1\":{\"2797\":1}}],[\"小于30的最大元素\",{\"1\":{\"2661\":1}}],[\"小于3的最大元素\",{\"1\":{\"2371\":1}}],[\"小于e的最大元素\",{\"1\":{\"2658\":1}}],[\"小于等于30的最大元素\",{\"1\":{\"2661\":1}}],[\"小于等于3的最大元素\",{\"1\":{\"2371\":1}}],[\"小于等于\",{\"1\":{\"2110\":1}}],[\"小于\",{\"1\":{\"2110\":1}}],[\"小于索引选择器\",{\"1\":{\"1458\":1}}],[\"小范围\",{\"1\":{\"2101\":2}}],[\"小图\",{\"1\":{\"1469\":1}}],[\"小结\",{\"0\":{\"1436\":1,\"1440\":1,\"1448\":1,\"1454\":1,\"1460\":1,\"1465\":1}}],[\"小数据量\",{\"1\":{\"2542\":1}}],[\"小数据量时差异不明显\",{\"1\":{\"2511\":1}}],[\"小数\",{\"1\":{\"1222\":1}}],[\"小型项目不宜引入复杂框架\",{\"1\":{\"568\":1}}],[\"小\",{\"1\":{\"141\":1}}],[\"优雅关闭线程组\",{\"1\":{\"3125\":1}}],[\"优雅降级\",{\"1\":{\"3010\":1}}],[\"优雅的抛出异常\",{\"1\":{\"287\":1}}],[\"优秀\",{\"1\":{\"2125\":1}}],[\"优秀的自定义异常设计应包含错误码\",{\"1\":{\"1249\":1}}],[\"优势\",{\"0\":{\"304\":1},\"1\":{\"304\":1,\"494\":1,\"1222\":1,\"1231\":1}}],[\"优选新master\",{\"1\":{\"182\":1}}],[\"优先考虑低侵入式方案\",{\"1\":{\"3110\":1}}],[\"优先考虑组合而非继承\",{\"1\":{\"2748\":1}}],[\"优先处理异常情况或特殊情况\",{\"1\":{\"2061\":1}}],[\"优先7\",{\"1\":{\"1393\":1}}],[\"优先匹配这里\",{\"1\":{\"1393\":1}}],[\"优先权越高\",{\"1\":{\"1368\":2}}],[\"优先使用printwriter\",{\"1\":{\"2909\":1}}],[\"优先使用sequenceinputstream\",{\"1\":{\"2897\":1}}],[\"优先使用inputstreamreader+fileinputstream组合\",{\"1\":{\"2885\":1}}],[\"优先使用bufferedreader\",{\"1\":{\"2861\":1}}],[\"优先使用try\",{\"1\":{\"2848\":1,\"2908\":1}}],[\"优先使用基本类型进行计算\",{\"1\":{\"2776\":1}}],[\"优先使用arraylist\",{\"1\":{\"2454\":1}}],[\"优先使用orm框架\",{\"1\":{\"2066\":1}}],[\"优先使用增强for循环或stream\",{\"1\":{\"2059\":1}}],[\"优先使用java\",{\"1\":{\"2054\":1}}],[\"优先使用jdk\",{\"1\":{\"1196\":1}}],[\"优先使用并发容器\",{\"1\":{\"2039\":1}}],[\"优先使用最终一致性\",{\"1\":{\"2013\":1}}],[\"优先使用concurrenthashmap\",{\"1\":{\"1197\":1}}],[\"优先使用编译期注解处理器\",{\"0\":{\"1082\":1}}],[\"优先使用较新的版本\",{\"1\":{\"945\":1}}],[\"优先使用notifyall\",{\"1\":{\"667\":1}}],[\"优先解决明显的性能瓶颈\",{\"1\":{\"818\":1,\"852\":1,\"886\":1,\"920\":1}}],[\"优先选择提供原子方法的集合\",{\"1\":{\"2542\":1}}],[\"优先选择linkedlist\",{\"1\":{\"2511\":1}}],[\"优先选择arraylist\",{\"1\":{\"2511\":1}}],[\"优先选择g1\",{\"1\":{\"818\":1,\"852\":1,\"886\":1,\"920\":1}}],[\"优先选择serial收集器\",{\"1\":{\"818\":1,\"852\":1,\"886\":1,\"920\":1}}],[\"优先选择活跃社区支持的框架\",{\"1\":{\"568\":1}}],[\"优先回收价值最高的region\",{\"1\":{\"778\":1}}],[\"优先修复能通过npe消息精确定位的空值问题\",{\"1\":{\"522\":1}}],[\"优先级更高\",{\"1\":{\"2582\":1}}],[\"优先级排序策略\",{\"0\":{\"2582\":1}}],[\"优先级队列设计\",{\"0\":{\"2472\":1}}],[\"优先级队列\",{\"1\":{\"2461\":1,\"2465\":1}}],[\"优先级任务调度\",{\"1\":{\"2461\":1}}],[\"优先级4\",{\"1\":{\"1393\":1}}],[\"优先级3\",{\"1\":{\"1393\":1}}],[\"优先级2\",{\"1\":{\"1393\":1}}],[\"优先级1\",{\"1\":{\"1393\":1}}],[\"优先级高的线程优先执行\",{\"1\":{\"606\":1}}],[\"优先级\",{\"1\":{\"182\":1,\"1392\":1,\"1882\":1,\"2118\":1}}],[\"优先原则\",{\"1\":{\"182\":1}}],[\"优点是迫使开发者考虑异常情况\",{\"1\":{\"1254\":1}}],[\"优点是代码更加简洁\",{\"1\":{\"350\":1}}],[\"优点是可以更精细地控制事务\",{\"1\":{\"349\":1}}],[\"优点\",{\"1\":{\"151\":1,\"152\":1,\"291\":1,\"306\":1,\"761\":1,\"762\":1,\"764\":1,\"765\":1,\"766\":1,\"767\":1,\"932\":1,\"945\":1,\"967\":1,\"1030\":1,\"1049\":1,\"1155\":1,\"1197\":3,\"1216\":1,\"1314\":1,\"1315\":1,\"1316\":1,\"1382\":1,\"2155\":1,\"2227\":1,\"2356\":4,\"2456\":4,\"2513\":4,\"2528\":1,\"2543\":1,\"2636\":1,\"2921\":2,\"2931\":1,\"3085\":1,\"3121\":3}}],[\"优缺点比较\",{\"1\":{\"3227\":1}}],[\"优缺点分析\",{\"1\":{\"2528\":1}}],[\"优缺点\",{\"0\":{\"141\":1},\"1\":{\"2543\":1}}],[\"优化tcp参数\",{\"1\":{\"3228\":1}}],[\"优化会话性能\",{\"1\":{\"3201\":1}}],[\"优化性能的关键基础设施\",{\"1\":{\"3093\":1}}],[\"优化方式\",{\"1\":{\"2942\":1}}],[\"优化方案\",{\"1\":{\"1056\":1,\"2942\":1,\"3150\":1}}],[\"优化数据传输格式和协议\",{\"1\":{\"2728\":1}}],[\"优化数据结构\",{\"1\":{\"2728\":1}}],[\"优化数据结构选择\",{\"1\":{\"212\":1}}],[\"优化算法复杂度\",{\"1\":{\"2728\":1}}],[\"优化后\",{\"1\":{\"2723\":1,\"2986\":3}}],[\"优化后的斐波那契数列\",{\"1\":{\"2711\":1}}],[\"优化红黑树实现\",{\"1\":{\"2651\":1}}],[\"优化了迭代器实现\",{\"1\":{\"2624\":1}}],[\"优化了红黑树转换逻辑\",{\"1\":{\"2624\":1}}],[\"优化resize过程\",{\"1\":{\"2596\":1}}],[\"优化redis的命令执行效率可以从以下几个方面入手\",{\"1\":{\"212\":1}}],[\"优化哈希算法\",{\"1\":{\"2596\":1}}],[\"优化哈希函数\",{\"1\":{\"2428\":1}}],[\"优化堆结构调整算法\",{\"1\":{\"2569\":1}}],[\"优化siftup和siftdown方法\",{\"1\":{\"2569\":1}}],[\"优化concurrenthashmap性能\",{\"1\":{\"2520\":1}}],[\"优化建议\",{\"1\":{\"2512\":1}}],[\"优化序列化机制\",{\"1\":{\"2491\":1}}],[\"优化迭代器实现\",{\"1\":{\"2434\":1,\"2491\":1}}],[\"优化扩容算法\",{\"1\":{\"2434\":1}}],[\"优化为o\",{\"1\":{\"2414\":1,\"2501\":1}}],[\"优化初始容量\",{\"1\":{\"2386\":1}}],[\"优化合并过程\",{\"1\":{\"2357\":1}}],[\"优化内存使用\",{\"1\":{\"2308\":1,\"3225\":1}}],[\"优化原因\",{\"1\":{\"2289\":1}}],[\"优化代码\",{\"1\":{\"1558\":1}}],[\"优化反射性能的方法\",{\"1\":{\"1264\":1}}],[\"优化集合的序列化和反序列化\",{\"1\":{\"1198\":1}}],[\"优化\",{\"1\":{\"1049\":1,\"2495\":1,\"2724\":1}}],[\"优化for循环耗时\",{\"1\":{\"1043\":1}}],[\"优化for循环\",{\"1\":{\"1043\":1}}],[\"优化生命周期可以显著提高构建效率\",{\"1\":{\"949\":1}}],[\"优化对象生命周期\",{\"1\":{\"700\":1}}],[\"优化包括\",{\"1\":{\"651\":1}}],[\"优化主从间的网络环境\",{\"1\":{\"173\":1}}],[\"优化mongodb的查询性能可以从以下几个方面入手\",{\"1\":{\"95\":1}}],[\"优化聚合操作的性能可以从以下几个方面入手\",{\"1\":{\"64\":1}}],[\"简要描述api的功能和用途\",{\"1\":{\"1945\":1}}],[\"简介\",{\"1\":{\"1501\":1}}],[\"简称\",{\"1\":{\"990\":1}}],[\"简洁且避免反射攻击\",{\"1\":{\"2824\":1}}],[\"简洁和清晰的层次结构使得\",{\"1\":{\"1437\":1}}],[\"简洁高效\",{\"1\":{\"1164\":1,\"2227\":1}}],[\"简洁性\",{\"0\":{\"1098\":1},\"1\":{\"432\":1,\"1994\":1,\"2083\":1,\"2103\":1,\"2117\":1,\"2136\":1,\"2336\":1,\"3192\":1}}],[\"简洁明了\",{\"1\":{\"93\":1,\"210\":1}}],[\"简化nio编程复杂度\",{\"1\":{\"3123\":1}}],[\"简化实现\",{\"1\":{\"3002\":1,\"3005\":3}}],[\"简化实现示例\",{\"1\":{\"2485\":1}}],[\"简化异常处理\",{\"1\":{\"2940\":1}}],[\"简化接口模式\",{\"1\":{\"2907\":1}}],[\"简化示例\",{\"1\":{\"2849\":1}}],[\"简化哈希计算\",{\"1\":{\"2428\":1}}],[\"简化遍历\",{\"1\":{\"2332\":1}}],[\"简化为一次位运算\",{\"1\":{\"1196\":1}}],[\"简化版hashmap实现\",{\"1\":{\"1181\":1}}],[\"简化版\",{\"0\":{\"1181\":1},\"1\":{\"1095\":1,\"2987\":1}}],[\"简化lambda表达式\",{\"1\":{\"1059\":1}}],[\"简化代码\",{\"1\":{\"1049\":1}}],[\"简化了tcp\",{\"1\":{\"3123\":1}}],[\"简化了实现并提高了并发性能\",{\"1\":{\"2688\":1}}],[\"简化了协议的实现和调试\",{\"1\":{\"1098\":1}}],[\"简化了依赖配置\",{\"1\":{\"1030\":1}}],[\"简化了项目配置\",{\"1\":{\"932\":1,\"945\":1,\"967\":1}}],[\"简化了插入和存储过程的调用\",{\"1\":{\"363\":1}}],[\"简化数组转换\",{\"1\":{\"495\":1}}],[\"简化的密码套件\",{\"1\":{\"482\":1}}],[\"简化gc调优\",{\"1\":{\"476\":1}}],[\"简化测试\",{\"1\":{\"454\":1}}],[\"简化集成\",{\"1\":{\"443\":1}}],[\"简化配置\",{\"1\":{\"391\":1}}],[\"简单实现\",{\"1\":{\"3212\":1}}],[\"简单逻辑优先使用直接编码\",{\"1\":{\"3169\":1}}],[\"简单熔断器实现\",{\"1\":{\"3087\":1}}],[\"简单类名\",{\"1\":{\"2968\":1}}],[\"简单nio\",{\"1\":{\"2921\":1}}],[\"简单文件读取且不关心编码\",{\"1\":{\"2885\":1}}],[\"简单读取文本文件时\",{\"1\":{\"2861\":1}}],[\"简单队列实现\",{\"1\":{\"2461\":1}}],[\"简单易用\",{\"1\":{\"2456\":1,\"2513\":1}}],[\"简单拼接\",{\"1\":{\"2310\":1}}],[\"简单赋值\",{\"1\":{\"2113\":1}}],[\"简单来说就是\",{\"1\":{\"1764\":1}}],[\"简单来说就是config\",{\"1\":{\"1632\":1}}],[\"简单来讲rcync的目的是实现两台主机上的文件同步\",{\"1\":{\"1501\":1}}],[\"简单讲是http的安全版\",{\"1\":{\"1414\":1}}],[\"简单的文件编码检测示例\",{\"1\":{\"2885\":1}}],[\"简单的http服务器\",{\"1\":{\"1347\":1}}],[\"简单的tcp连接池实现\",{\"1\":{\"1326\":1}}],[\"简单打印异常\",{\"1\":{\"1337\":1}}],[\"简单但无法充分利用多核cpu\",{\"1\":{\"1328\":1}}],[\"简单http服务器启动\",{\"1\":{\"1324\":1}}],[\"简单http服务器实现\",{\"1\":{\"1324\":1}}],[\"简单配置\",{\"1\":{\"1086\":1}}],[\"简单性\",{\"1\":{\"1046\":1}}],[\"简单性与灵活性\",{\"1\":{\"809\":1,\"843\":1,\"877\":1,\"911\":1}}],[\"简单\",{\"1\":{\"1046\":1,\"1227\":1,\"2897\":1,\"3121\":1}}],[\"简单高效\",{\"1\":{\"769\":1}}],[\"简单同步用synchronized\",{\"1\":{\"651\":1}}],[\"简单场景优先使用synchronized\",{\"1\":{\"649\":1}}],[\"简单示例\",{\"1\":{\"293\":1}}],[\"简单说就是将对同一个数据的若干个条命令执行结果转化成最终结果数据对应的指令进行记录\",{\"1\":{\"140\":1}}],[\"什么场景下应该选择xml\",{\"0\":{\"1086\":1}}],[\"什么样的应用场景需要用到数据淘汰策略\",{\"1\":{\"156\":1}}],[\"什么叫数据淘汰策略\",{\"1\":{\"156\":1}}],[\"什么叫aof重写\",{\"1\":{\"140\":1}}],[\"什么是类型擦除\",{\"0\":{\"3034\":1}}],[\"什么是类加载的双亲委派机制\",{\"1\":{\"1155\":1}}],[\"什么是泛型\",{\"0\":{\"3016\":1}}],[\"什么是死循环\",{\"1\":{\"2138\":1}}],[\"什么是死锁\",{\"0\":{\"1128\":1}}],[\"什么是短路运算\",{\"1\":{\"2119\":1}}],[\"什么是运算符的优先级\",{\"1\":{\"2119\":1}}],[\"什么是自动装箱和拆箱\",{\"1\":{\"2105\":1}}],[\"什么是oplog\",{\"1\":{\"1759\":1}}],[\"什么是正向代理和反向代理\",{\"0\":{\"1380\":1}}],[\"什么是nginx\",{\"0\":{\"1376\":1}}],[\"什么是反射\",{\"0\":{\"1259\":1}}],[\"什么是设计模式\",{\"1\":{\"1216\":1}}],[\"什么是多态\",{\"1\":{\"1216\":1}}],[\"什么是面向对象编程\",{\"1\":{\"1216\":1}}],[\"什么是内存溢出和栈溢出\",{\"1\":{\"1155\":1}}],[\"什么是内存分配担保机制\",{\"1\":{\"784\":1}}],[\"什么是虚假唤醒\",{\"1\":{\"1139\":1}}],[\"什么是aba问题\",{\"1\":{\"1139\":1}}],[\"什么是aspectj\",{\"1\":{\"344\":1}}],[\"什么是原子操作\",{\"0\":{\"1126\":1}}],[\"什么是并发和并行\",{\"0\":{\"1123\":1}}],[\"什么是线程安全\",{\"0\":{\"1125\":1}}],[\"什么是线程和进程\",{\"0\":{\"1122\":1}}],[\"什么是线程上下文类加载器\",{\"1\":{\"756\":1}}],[\"什么是依赖传递\",{\"1\":{\"932\":1}}],[\"什么是jvm参数的\",{\"1\":{\"818\":1,\"852\":1,\"886\":1,\"920\":1}}],[\"什么是java内存模型\",{\"1\":{\"602\":1}}],[\"什么是tlab\",{\"1\":{\"720\":1}}],[\"什么是锁降级\",{\"1\":{\"651\":1}}],[\"什么是springboot的starter\",{\"1\":{\"398\":1}}],[\"什么是maven的仓库镜像\",{\"1\":{\"989\":1}}],[\"什么是maven的依赖传递机制\",{\"1\":{\"1030\":1}}],[\"什么是maven的依赖传递\",{\"1\":{\"967\":1}}],[\"什么是mvc设计模式\",{\"1\":{\"387\":1}}],[\"什么是mongodb的聚合管道\",{\"1\":{\"95\":1}}],[\"什么是mongodb的读写关注级别\",{\"1\":{\"95\":1}}],[\"什么是mongodb中的读写关注级别\",{\"1\":{\"75\":1}}],[\"什么是mongodb中的批量操作\",{\"1\":{\"54\":1}}],[\"什么是连接池\",{\"1\":{\"373\":1}}],[\"什么是事务的传播行为\",{\"1\":{\"359\":1}}],[\"什么是循环依赖\",{\"1\":{\"331\":1}}],[\"什么是redis的管道技术\",{\"1\":{\"212\":1}}],[\"什么是redis的惰性删除策略\",{\"1\":{\"212\":1}}],[\"什么是心跳机制\",{\"1\":{\"169\":1}}],[\"什么是持久化\",{\"0\":{\"137\":1},\"1\":{\"137\":1}}],[\"什么是覆盖索引\",{\"1\":{\"64\":1}}],[\"什么是乐观并发控制\",{\"1\":{\"54\":1}}],[\"什么是cap定理\",{\"1\":{\"43\":1}}],[\"排队解决\",{\"1\":{\"1378\":1}}],[\"排查类加载泄漏\",{\"1\":{\"814\":1,\"848\":1,\"882\":1,\"916\":1}}],[\"排查和解决jvm内存泄漏问题的步骤\",{\"1\":{\"784\":1}}],[\"排除所有空行\",{\"1\":{\"1871\":1}}],[\"排除依赖\",{\"0\":{\"1016\":1}}],[\"排除不必要的依赖\",{\"0\":{\"953\":1}}],[\"排除tomcat依赖\",{\"1\":{\"416\":1}}],[\"排除丢失数据的风险\",{\"1\":{\"139\":1}}],[\"排序与二分查找\",{\"1\":{\"3047\":1}}],[\"排序与查找\",{\"0\":{\"2371\":1,\"2408\":1}}],[\"排序方式\",{\"1\":{\"2666\":1}}],[\"排序机制确保了treemap中的键始终处于有序状态\",{\"1\":{\"2664\":1}}],[\"排序机制\",{\"0\":{\"2664\":1}}],[\"排序模式\",{\"1\":{\"2627\":1}}],[\"排序模式标志\",{\"1\":{\"2621\":1}}],[\"排序后数组\",{\"1\":{\"1161\":1}}],[\"排序文档\",{\"1\":{\"58\":1}}],[\"排序和分页\",{\"1\":{\"48\":1}}],[\"排序\",{\"1\":{\"39\":1,\"48\":1,\"56\":1,\"85\":1,\"543\":1,\"1182\":2,\"2329\":1,\"3227\":1}}],[\"大规模sip服务需要集群架构支持高可用和负载均衡\",{\"1\":{\"3233\":1}}],[\"大规模部署\",{\"1\":{\"3230\":1}}],[\"大大提升了io操作的灵活性和性能\",{\"1\":{\"2911\":1}}],[\"大大提高redis服务器并发量与数据吞吐量\",{\"1\":{\"162\":1}}],[\"大文件处理\",{\"1\":{\"2861\":1}}],[\"大文件处理时\",{\"1\":{\"2860\":1,\"2884\":1}}],[\"大文件操作时\",{\"1\":{\"2836\":1}}],[\"大于30的最小元素\",{\"1\":{\"2661\":1}}],[\"大于3的最小元素\",{\"1\":{\"2371\":1}}],[\"大于e的最小元素\",{\"1\":{\"2658\":1}}],[\"大于等于30的最小元素\",{\"1\":{\"2661\":1}}],[\"大于等于3的最小元素\",{\"1\":{\"2371\":1}}],[\"大于等于\",{\"1\":{\"2110\":1}}],[\"大于\",{\"1\":{\"2110\":1}}],[\"大于索引选择器\",{\"1\":{\"1458\":1}}],[\"大范围\",{\"1\":{\"2101\":2}}],[\"大小写敏感\",{\"1\":{\"2084\":1}}],[\"大括号位置\",{\"0\":{\"2033\":1}}],[\"大型分布式团队规范落地解决方案\",{\"1\":{\"2029\":1}}],[\"大型项目迁移到java\",{\"1\":{\"522\":1}}],[\"大图\",{\"1\":{\"1469\":1}}],[\"大家懂的\",{\"1\":{\"1887\":1}}],[\"大家会通过负载均衡的方式来分担服务器压力\",{\"1\":{\"1403\":1}}],[\"大家就开始抢\",{\"1\":{\"182\":1}}],[\"大数据传输\",{\"1\":{\"3130\":1}}],[\"大数据量处理\",{\"1\":{\"2717\":1}}],[\"大数据量\",{\"1\":{\"2542\":1}}],[\"大数据量频繁修改场景\",{\"1\":{\"2536\":1}}],[\"大数据量时linkedlist在头部操作有优势\",{\"1\":{\"2511\":1}}],[\"大数据量下的io性能较低\",{\"1\":{\"139\":1}}],[\"大数据处理\",{\"1\":{\"1347\":1}}],[\"大多数字符串使用latin\",{\"1\":{\"2289\":1}}],[\"大多数字符串操作场景下\",{\"1\":{\"2282\":1}}],[\"大多数ide都提供了依赖分析工具\",{\"1\":{\"1021\":1}}],[\"大多是加载有无该对象字节码文件\",{\"1\":{\"463\":1}}],[\"大约30分钟后你能在中央仓库搜索到依赖\",{\"1\":{\"1004\":1}}],[\"大约1mb左右\",{\"1\":{\"317\":1}}],[\"大致内容为你的稳定版仓库已激活\",{\"1\":{\"1004\":1}}],[\"大堆内存\",{\"1\":{\"818\":1,\"852\":1,\"886\":1,\"920\":1}}],[\"大内存建议使用g1收集器\",{\"1\":{\"813\":1,\"847\":1,\"881\":1,\"915\":1}}],[\"大部分对象存活时间短\",{\"1\":{\"776\":1}}],[\"大对象处理\",{\"0\":{\"718\":1}}],[\"大对象\",{\"1\":{\"708\":1}}],[\"大幅降低了线程创建和上下文切换的成本\",{\"1\":{\"524\":1}}],[\"大量并发请求导致服务器响应延迟或丢包\",{\"1\":{\"3225\":1}}],[\"大量注解处理导致的cpu占用\",{\"1\":{\"3150\":1}}],[\"大量自动装箱操作\",{\"1\":{\"2452\":1}}],[\"大量key集中过期\",{\"1\":{\"190\":1}}],[\"大量408\",{\"1\":{\"190\":1}}],[\"大量的请求过来之后都需要去从缓存中获取数据\",{\"1\":{\"189\":1}}],[\"大\",{\"1\":{\"141\":1}}],[\"大概都在\",{\"1\":{\"129\":1}}],[\"目前没有特定用途\",{\"1\":{\"2081\":1}}],[\"目前启动了三个服务\",{\"1\":{\"1562\":1}}],[\"目前已经是redis持久化的主流方式\",{\"1\":{\"139\":1}}],[\"目标容器\",{\"1\":{\"3257\":1}}],[\"目标sip\",{\"1\":{\"3190\":1}}],[\"目标和\",{\"1\":{\"2715\":1}}],[\"目标值索引\",{\"1\":{\"2710\":1,\"2721\":1}}],[\"目标值\",{\"1\":{\"2710\":1,\"2721\":1}}],[\"目标文档格式\",{\"1\":{\"1974\":1}}],[\"目标文档路径\",{\"1\":{\"1974\":1,\"1987\":1}}],[\"目标文件夹\",{\"1\":{\"1502\":1,\"1865\":1}}],[\"目标镜像名\",{\"1\":{\"1794\":1}}],[\"目标服务器调用源服务器拉取文件\",{\"1\":{\"1503\":1}}],[\"目标服务器连接时需要密码输入\",{\"1\":{\"1503\":1}}],[\"目标ip\",{\"1\":{\"1502\":1}}],[\"目标用户\",{\"1\":{\"1502\":1}}],[\"目标路径\",{\"1\":{\"1501\":1}}],[\"目标元素索引\",{\"1\":{\"1161\":1}}],[\"目标元素\",{\"1\":{\"1161\":1}}],[\"目的和实现细节\",{\"1\":{\"2087\":1,\"2095\":1}}],[\"目的就\",{\"1\":{\"1446\":1}}],[\"目的是为了掌握知识点\",{\"1\":{\"0\":1}}],[\"目录里面有什么内容\",{\"1\":{\"1887\":1}}],[\"目录开始往下找\",{\"1\":{\"1873\":5}}],[\"目录数据\",{\"1\":{\"1792\":4}}],[\"目录为\",{\"1\":{\"1693\":1}}],[\"目录中的文件\",{\"1\":{\"1667\":1}}],[\"目录下\",{\"1\":{\"1626\":2,\"1714\":1,\"1715\":2,\"1852\":1,\"3250\":1}}],[\"目录下的\",{\"1\":{\"1548\":1,\"1697\":1}}],[\"目录映射\",{\"0\":{\"1590\":1,\"1595\":1}}],[\"目录挂载到容器的\",{\"1\":{\"1578\":1,\"1595\":1}}],[\"目录自行创建\",{\"1\":{\"1535\":1}}],[\"目录\",{\"1\":{\"242\":1,\"1487\":1,\"3246\":1}}],[\"答案是不会\",{\"1\":{\"138\":1}}],[\"线性对数时间\",{\"1\":{\"2702\":1}}],[\"线性查找\",{\"1\":{\"2702\":1}}],[\"线性增长\",{\"1\":{\"2702\":1,\"2711\":1}}],[\"线性时间复杂度o\",{\"0\":{\"2708\":1}}],[\"线性时间\",{\"1\":{\"2702\":1}}],[\"线上环境不建议使用\",{\"1\":{\"138\":1}}],[\"线程组\",{\"1\":{\"3106\":1}}],[\"线程在io操作期间会被阻塞\",{\"1\":{\"3078\":1}}],[\"线程不安全\",{\"0\":{\"2586\":1}}],[\"线程不断重复执行相同的操作\",{\"1\":{\"590\":1}}],[\"线程间数据传递\",{\"1\":{\"2897\":1}}],[\"线程间通信\",{\"1\":{\"3117\":1}}],[\"线程间通信的流\",{\"1\":{\"2897\":1}}],[\"线程间通信可以直接共享内存\",{\"1\":{\"1122\":1}}],[\"线程间直接通信\",{\"1\":{\"2518\":1}}],[\"线程间直接移交数据\",{\"1\":{\"2461\":1}}],[\"线程名\",{\"1\":{\"2071\":1,\"3110\":1}}],[\"线程模型\",{\"1\":{\"2913\":1}}],[\"线程模型优化\",{\"1\":{\"1347\":1,\"3091\":1}}],[\"线程模式后面会详细介绍到\",{\"1\":{\"128\":1}}],[\"线程异常\",{\"1\":{\"1254\":1}}],[\"线程a无法察觉这个变化\",{\"1\":{\"1139\":1}}],[\"线程a读取了一个值为a的变量\",{\"1\":{\"1139\":1}}],[\"线程b将该变量的值从a修改为b\",{\"1\":{\"1139\":1}}],[\"线程的切换\",{\"1\":{\"1887\":1}}],[\"线程的创建和销毁成本低\",{\"1\":{\"1122\":1}}],[\"线程的sleep\",{\"1\":{\"618\":1}}],[\"线程是调度的基本单位\",{\"1\":{\"1122\":1}}],[\"线程是进程的一个执行单元\",{\"1\":{\"1122\":1}}],[\"线程是cpu调度的基本单位\",{\"1\":{\"589\":1}}],[\"线程上下文类加载器是thread类中的一个classloader类型的属性\",{\"1\":{\"756\":1}}],[\"线程上下文类加载器\",{\"1\":{\"753\":1}}],[\"线程优先在tlab中分配对象\",{\"1\":{\"720\":1}}],[\"线程优先级范围为1\",{\"1\":{\"606\":1}}],[\"线程持有的锁\",{\"1\":{\"720\":1}}],[\"线程切换时\",{\"1\":{\"703\":1}}],[\"线程切换对jvm内存有什么影响\",{\"1\":{\"703\":1}}],[\"线程共享进程的内存空间\",{\"1\":{\"1122\":1}}],[\"线程共享进程的内存空间和资源\",{\"1\":{\"589\":1}}],[\"线程共享\",{\"1\":{\"691\":2,\"697\":1,\"706\":1}}],[\"线程私有\",{\"1\":{\"691\":3,\"697\":1,\"706\":1}}],[\"线程\",{\"1\":{\"689\":1,\"1227\":1,\"1254\":1}}],[\"线程反复重试cas操作\",{\"1\":{\"686\":1}}],[\"线程2更新是否成功\",{\"1\":{\"676\":1}}],[\"线程2获取当前值\",{\"1\":{\"676\":1}}],[\"线程2尝试更新\",{\"1\":{\"676\":1}}],[\"线程1将值从1改回0\",{\"1\":{\"676\":1}}],[\"线程1将值从0改为1\",{\"1\":{\"676\":1}}],[\"线程1获取当前值\",{\"1\":{\"676\":1}}],[\"线程1执行aba操作\",{\"1\":{\"676\":1}}],[\"线程终止规则\",{\"1\":{\"656\":1}}],[\"线程启动规则\",{\"1\":{\"656\":1}}],[\"线程启动与运行的区别\",{\"0\":{\"615\":1}}],[\"线程中的所有操作happens\",{\"1\":{\"656\":1}}],[\"线程中的每个操作happens\",{\"1\":{\"656\":1}}],[\"线程中断异常\",{\"1\":{\"1326\":1}}],[\"线程中断\",{\"1\":{\"610\":1}}],[\"线程中断处理\",{\"0\":{\"610\":1}}],[\"线程中断是一种协作机制\",{\"1\":{\"607\":1}}],[\"线程中断机制\",{\"0\":{\"607\":1}}],[\"线程工厂\",{\"1\":{\"622\":1}}],[\"线程协作模式\",{\"0\":{\"612\":1}}],[\"线程状态和内存使用\",{\"1\":{\"3096\":1}}],[\"线程状态5\",{\"1\":{\"609\":1}}],[\"线程状态4\",{\"1\":{\"609\":1}}],[\"线程状态3\",{\"1\":{\"609\":1}}],[\"线程状态2\",{\"1\":{\"609\":1}}],[\"线程状态1\",{\"1\":{\"609\":1}}],[\"线程状态转换示例\",{\"0\":{\"609\":1}}],[\"线程状态之间的转换是并发编程的基础\",{\"1\":{\"605\":1}}],[\"线程可以通过isinterrupted\",{\"1\":{\"607\":1}}],[\"线程调度机制\",{\"0\":{\"606\":1}}],[\"线程生命周期\",{\"0\":{\"605\":1}}],[\"线程基础\",{\"0\":{\"603\":1}}],[\"线程操作变量时需要将变量加载到工作内存中\",{\"1\":{\"602\":1}}],[\"线程池配置示例\",{\"1\":{\"3225\":1}}],[\"线程池管理\",{\"1\":{\"3218\":1}}],[\"线程池处理网络请求\",{\"1\":{\"3082\":1}}],[\"线程池模型\",{\"0\":{\"3082\":1}}],[\"线程池模式\",{\"1\":{\"612\":1}}],[\"线程池等核心知识点\",{\"1\":{\"1119\":1}}],[\"线程池提交任务有两种方式\",{\"1\":{\"632\":1}}],[\"线程池参数调优策略\",{\"0\":{\"629\":1}}],[\"线程池中的线程作为消费者\",{\"1\":{\"628\":1}}],[\"线程池状态\",{\"1\":{\"626\":1}}],[\"线程池监控与调优\",{\"0\":{\"626\":1}}],[\"线程池允许创建的最大线程数\",{\"1\":{\"622\":1}}],[\"线程池长期维持的线程数量\",{\"1\":{\"622\":1}}],[\"线程池会从池中分配空闲线程执行任务\",{\"1\":{\"621\":1}}],[\"线程池的拒绝策略有哪些\",{\"1\":{\"634\":1}}],[\"线程池的工作队列有哪些类型\",{\"1\":{\"634\":1}}],[\"线程池的工作原理\",{\"0\":{\"621\":1}}],[\"线程池的优雅关闭\",{\"0\":{\"633\":1}}],[\"线程池的设计模式\",{\"0\":{\"628\":1}}],[\"线程池的核心参数\",{\"0\":{\"622\":1}}],[\"线程池的核心参数包括核心线程数\",{\"1\":{\"602\":1}}],[\"线程池的核心参数有哪些\",{\"1\":{\"602\":1}}],[\"线程池\",{\"0\":{\"619\":1,\"1133\":1},\"1\":{\"3083\":1,\"3089\":1}}],[\"线程池通过预先创建一定数量的线程\",{\"1\":{\"597\":1,\"621\":1}}],[\"线程池设计理念\",{\"0\":{\"597\":1}}],[\"线程通过发送消息进行通信\",{\"1\":{\"595\":1}}],[\"线程通过共享内存进行通信\",{\"1\":{\"595\":1}}],[\"线程创建\",{\"1\":{\"590\":1}}],[\"线程与进程的关系\",{\"0\":{\"589\":1}}],[\"线程安全包装\",{\"1\":{\"2586\":1}}],[\"线程安全需求\",{\"1\":{\"2542\":1}}],[\"线程安全性\",{\"1\":{\"2454\":1}}],[\"线程安全map实现对比\",{\"1\":{\"2410\":1}}],[\"线程安全实现\",{\"0\":{\"2268\":1}}],[\"线程安全集合\",{\"1\":{\"1175\":1}}],[\"线程安全是指多个线程同时访问一个共享资源时\",{\"1\":{\"1125\":1}}],[\"线程安全的对话操作示例\",{\"1\":{\"3223\":1}}],[\"线程安全的weakhashmap\",{\"1\":{\"2692\":1}}],[\"线程安全的treemap实现方式\",{\"1\":{\"2672\":1}}],[\"线程安全的map实现\",{\"0\":{\"2410\":1}}],[\"线程安全的set实现\",{\"0\":{\"2373\":1}}],[\"线程安全的stringbuffer\",{\"1\":{\"1041\":1}}],[\"线程安全的list实现对比\",{\"1\":{\"2328\":1}}],[\"线程安全的list实现\",{\"0\":{\"2328\":1}}],[\"线程安全的操作\",{\"1\":{\"1132\":1}}],[\"线程安全的队列\",{\"1\":{\"1132\":1}}],[\"线程安全的\",{\"1\":{\"1132\":2}}],[\"线程安全的单例模式\",{\"0\":{\"613\":1}}],[\"线程安全的计数器实现\",{\"0\":{\"593\":1}}],[\"线程安全问题\",{\"0\":{\"2350\":1,\"2389\":1,\"2424\":1,\"2478\":1,\"2613\":1,\"2670\":1,\"2692\":1},\"1\":{\"590\":1,\"3090\":1}}],[\"线程安全\",{\"0\":{\"1124\":1,\"2039\":1},\"1\":{\"283\":1,\"545\":1,\"1048\":1,\"1119\":1,\"1174\":1,\"2192\":1,\"2201\":1,\"2207\":1,\"2261\":1,\"2275\":1,\"2300\":1,\"2316\":1,\"2337\":1,\"2358\":1,\"2363\":1,\"2400\":1,\"2406\":1,\"2461\":1,\"2819\":1}}],[\"线程数\",{\"1\":{\"190\":1}}],[\"线程堆栈溢出\",{\"1\":{\"125\":2}}],[\"直白的说\",{\"1\":{\"1661\":1}}],[\"直到cs到一个比较小的值\",{\"1\":{\"1887\":1}}],[\"直到得到结果\",{\"1\":{\"1318\":1}}],[\"直到被合适的处理器捕获\",{\"1\":{\"1252\":1}}],[\"直到找到不匹配的字符或到达某个字符串的末尾\",{\"1\":{\"1170\":1}}],[\"直到终端操作被调用\",{\"1\":{\"543\":1}}],[\"直到当前rdb过程完成为止\",{\"1\":{\"138\":1}}],[\"直接写死我们本机的ip加上映射端口\",{\"1\":{\"3256\":1}}],[\"直接写es即可\",{\"1\":{\"1555\":1}}],[\"直接暴露ip端口\",{\"1\":{\"3256\":1}}],[\"直接重发响应\",{\"1\":{\"3222\":1}}],[\"直接发送数据报\",{\"1\":{\"3066\":1}}],[\"直接生成字节码替代反射\",{\"1\":{\"3010\":1}}],[\"直接执行方法\",{\"1\":{\"3002\":1,\"3005\":1}}],[\"直接输出各种类型数据\",{\"1\":{\"2901\":1}}],[\"直接修改输入数据\",{\"1\":{\"2727\":1}}],[\"直接替换值\",{\"1\":{\"2600\":1}}],[\"直接使用缓存的method\",{\"1\":{\"2993\":1}}],[\"直接使用linkedlist的add\",{\"1\":{\"2506\":1}}],[\"直接使用原字符数组的引用\",{\"1\":{\"2296\":1}}],[\"直接添加到末尾\",{\"1\":{\"2494\":1}}],[\"直接遍历不保证有序\",{\"1\":{\"2480\":1}}],[\"直接遍历数组元素并拼接字符串\",{\"1\":{\"2234\":1}}],[\"直接存储新元素\",{\"1\":{\"2393\":1}}],[\"直接赋值\",{\"1\":{\"2303\":1}}],[\"直接实现charsequence\",{\"1\":{\"2275\":1}}],[\"直接引用常量池已有的\",{\"1\":{\"2243\":1}}],[\"直接引用是可以直接指向目标的指针\",{\"1\":{\"738\":1}}],[\"直接打印数组变量会输出内存地址而非内容\",{\"1\":{\"2230\":1}}],[\"直接打印数组引用的陷阱\",{\"0\":{\"2230\":1}}],[\"直接绑定至相应的主机即可\",{\"1\":{\"1660\":1}}],[\"直接复制即可\",{\"1\":{\"1577\":1,\"1578\":1}}],[\"直接编辑\",{\"1\":{\"1504\":1}}],[\"直接跳转到data\",{\"1\":{\"1389\":2,\"1390\":1}}],[\"直接访问\",{\"1\":{\"2358\":1}}],[\"直接访问浏览器是否提示需要输入认证信息\",{\"1\":{\"1355\":1}}],[\"直接访问和修改私有成员\",{\"1\":{\"1271\":1}}],[\"直接与数据源连接\",{\"1\":{\"1222\":1}}],[\"直接通过类名访问静态成员\",{\"1\":{\"1037\":1}}],[\"直接声明依赖的版本\",{\"1\":{\"1030\":1}}],[\"直接依赖\",{\"0\":{\"1018\":1}}],[\"直接进入老年代\",{\"1\":{\"708\":1}}],[\"直接内存\",{\"1\":{\"706\":1}}],[\"直接丢弃任务\",{\"1\":{\"634\":1}}],[\"直接抛出rejectedexecutionexception\",{\"1\":{\"634\":1}}],[\"直接抛出异常\",{\"1\":{\"632\":1}}],[\"直接提交给线程\",{\"1\":{\"634\":1}}],[\"直接调用在编译期确定方法\",{\"1\":{\"2986\":1}}],[\"直接调用测试\",{\"1\":{\"2986\":1}}],[\"直接调用耗时\",{\"1\":{\"2986\":2}}],[\"直接调用\",{\"1\":{\"1264\":2,\"2986\":1}}],[\"直接调用run\",{\"1\":{\"615\":1}}],[\"直接调用get\",{\"1\":{\"554\":1}}],[\"直接运行\",{\"1\":{\"479\":2}}],[\"直接在字段上使用\",{\"1\":{\"322\":1}}],[\"直接在idea中查询\",{\"1\":{\"302\":1}}],[\"直接在迭代器中移除\",{\"1\":{\"283\":1}}],[\"直接返回堆顶元素\",{\"1\":{\"2588\":1}}],[\"直接返回true\",{\"1\":{\"2294\":1}}],[\"直接返回\",{\"1\":{\"185\":1,\"192\":1,\"2999\":1}}],[\"直接操作缓存能够承受的数据库请求数量是远远大于直接访问数据库的\",{\"1\":{\"129\":1}}],[\"第n个斐波那契数\",{\"1\":{\"2711\":2,\"2716\":1}}],[\"第三行会越界\",{\"1\":{\"2181\":1}}],[\"第三行1列\",{\"1\":{\"2167\":1}}],[\"第三部分是指交换分区\",{\"1\":{\"1885\":1}}],[\"第三方监控工具\",{\"0\":{\"3097\":1}}],[\"第三方插件\",{\"0\":{\"1407\":1,\"1408\":1}}],[\"第三方库\",{\"1\":{\"2227\":1}}],[\"第三方库与框架的蓬勃发展\",{\"1\":{\"564\":1}}],[\"第三方库有更多的插件和扩展\",{\"1\":{\"494\":1}}],[\"第三类\",{\"1\":{\"157\":1}}],[\"第三步\",{\"1\":{\"1764\":2,\"2123\":1}}],[\"第三步服务能够启动\",{\"1\":{\"121\":1}}],[\"第三步操作能正常启动可直接跳到第四步\",{\"1\":{\"121\":1}}],[\"第二个参数设为true\",{\"1\":{\"2908\":1}}],[\"第二个参数为true表示启用自动刷新\",{\"1\":{\"2904\":1}}],[\"第二个参数则是自定义\",{\"1\":{\"1739\":1}}],[\"第二行3列\",{\"1\":{\"2167\":1}}],[\"第二步\",{\"1\":{\"2123\":1}}],[\"第二语言\",{\"1\":{\"2095\":2}}],[\"第二部分\",{\"1\":{\"1885\":1}}],[\"第二次查找\",{\"1\":{\"1166\":1}}],[\"第二次遍历\",{\"1\":{\"1166\":1}}],[\"第二种出现频繁全量复制的问题现象\",{\"1\":{\"171\":1}}],[\"第二种aof文件\",{\"1\":{\"137\":1}}],[\"第二类\",{\"1\":{\"157\":1}}],[\"第一行2列\",{\"1\":{\"2167\":1}}],[\"第一部分mem行\",{\"1\":{\"1885\":1}}],[\"第一步\",{\"1\":{\"1764\":4,\"2123\":1}}],[\"第一次出现位置\",{\"1\":{\"2195\":1}}],[\"第一次访问不会有数据视图\",{\"1\":{\"1562\":1}}],[\"第一次统计\",{\"1\":{\"1166\":1}}],[\"第一次遍历\",{\"1\":{\"1166\":1}}],[\"第一个元素即目标\",{\"1\":{\"2721\":1}}],[\"第一个元素\",{\"1\":{\"2324\":1,\"2371\":1,\"2661\":1}}],[\"第一个参数是指定级别\",{\"1\":{\"1739\":1}}],[\"第一个location区块结果\",{\"1\":{\"1379\":1,\"1385\":1}}],[\"第一个location区块开始\",{\"1\":{\"1379\":1,\"1385\":1}}],[\"第一个server区块开始\",{\"1\":{\"1379\":1,\"1385\":1}}],[\"第一个springboot应用\",{\"0\":{\"392\":1}}],[\"第一个不重复字符的索引\",{\"1\":{\"1166\":1}}],[\"第一个是服务端拿到指令直接告诉客户端开始执行了\",{\"1\":{\"138\":1}}],[\"第一类\",{\"1\":{\"157\":1}}],[\"第一种rdb文件\",{\"1\":{\"137\":1}}],[\"总长度变为17\",{\"1\":{\"2271\":1}}],[\"总是0\",{\"1\":{\"1885\":1}}],[\"总页数和当前页\",{\"1\":{\"1444\":2}}],[\"总传输字节数\",{\"1\":{\"1232\":1}}],[\"总内存\",{\"1\":{\"694\":1}}],[\"总而言之就两点\",{\"1\":{\"190\":1,\"191\":1}}],[\"总体\",{\"1\":{\"165\":1,\"166\":1}}],[\"总的来说\",{\"1\":{\"153\":1,\"189\":1,\"190\":1,\"191\":1,\"192\":1}}],[\"总的锁定数超出了锁定表的大小\",{\"1\":{\"125\":1}}],[\"总结\",{\"1\":{\"151\":1,\"152\":1,\"153\":1,\"182\":1,\"1739\":1}}],[\"总结一下\",{\"1\":{\"137\":1}}],[\"假设初始容量为c\",{\"1\":{\"2455\":1}}],[\"假设所有行长度相同\",{\"1\":{\"2181\":1}}],[\"假设不添加该关键字linux会将可执行文件存放在\",{\"1\":{\"1785\":1}}],[\"假设sentinel1先过来\",{\"1\":{\"182\":1}}],[\"假如你现在正在写一个比较重要的文档\",{\"1\":{\"136\":1}}],[\"假定未定义算法\",{\"1\":{\"125\":1}}],[\"保障代码安全性和封装性\",{\"1\":{\"2792\":1}}],[\"保障不会被同时淘汰就行\",{\"1\":{\"191\":1}}],[\"保留策略错误\",{\"1\":{\"3153\":1}}],[\"保留策略选择\",{\"1\":{\"3140\":1}}],[\"保留原始异常作为原因\",{\"1\":{\"2952\":1}}],[\"保留原始异常信息\",{\"1\":{\"2929\":1}}],[\"保留两位小数\",{\"1\":{\"2905\":1}}],[\"保留空行\",{\"1\":{\"2861\":2}}],[\"保留utf\",{\"1\":{\"2289\":1}}],[\"保留一些关键字\",{\"1\":{\"2083\":1}}],[\"保留关键字\",{\"0\":{\"2081\":1}}],[\"保留30天日志\",{\"1\":{\"2072\":1}}],[\"保留必要的人工评审\",{\"1\":{\"2028\":1}}],[\"保留未读取数据\",{\"1\":{\"1338\":1,\"2914\":2}}],[\"保留了java线程模型的语义\",{\"1\":{\"533\":1}}],[\"保护系统\",{\"1\":{\"3087\":1}}],[\"保护\",{\"1\":{\"1738\":1}}],[\"保护知识产权\",{\"1\":{\"989\":1}}],[\"保护投资\",{\"1\":{\"562\":1}}],[\"保证单例性\",{\"1\":{\"2825\":1}}],[\"保证o\",{\"1\":{\"2672\":1}}],[\"保证可见性\",{\"1\":{\"2485\":1}}],[\"保证可见性和有序性\",{\"1\":{\"655\":1}}],[\"保证服务器的高可用\",{\"1\":{\"1409\":1}}],[\"保证了平均o\",{\"1\":{\"2413\":1}}],[\"保证了线程安全和哈希值的缓存效率\",{\"1\":{\"1168\":1}}],[\"保证了java核心库的安全性\",{\"1\":{\"742\":1}}],[\"保证线程安全\",{\"1\":{\"675\":1,\"2456\":1,\"2513\":1}}],[\"保证对象初始化的安全性\",{\"1\":{\"655\":1}}],[\"保证原子性\",{\"1\":{\"655\":1}}],[\"保证数据的可用性\",{\"1\":{\"73\":1}}],[\"保持连接\",{\"1\":{\"3125\":1}}],[\"保持链表顺序\",{\"1\":{\"2601\":1}}],[\"保持插入顺序\",{\"1\":{\"2406\":1}}],[\"保持相等元素的相对顺序\",{\"1\":{\"2357\":1}}],[\"保持简洁明了\",{\"1\":{\"2138\":1}}],[\"保持一致性\",{\"1\":{\"2094\":1}}],[\"保持名称可读性\",{\"1\":{\"2001\":1}}],[\"保持文档自动化工具的简洁和清晰\",{\"1\":{\"1991\":1}}],[\"保持文档生态系统的简洁和清晰\",{\"1\":{\"1978\":1}}],[\"保持文档管理体系的简洁和清晰\",{\"1\":{\"1965\":1}}],[\"保持文档的简洁和清晰\",{\"1\":{\"1952\":1,\"1953\":1}}],[\"保持程序运行\",{\"1\":{\"1094\":1}}],[\"保持snapshot原样\",{\"1\":{\"1001\":1}}],[\"保持向后兼容\",{\"1\":{\"788\":1,\"822\":1,\"856\":1,\"890\":1}}],[\"保持api行为一致\",{\"1\":{\"562\":1}}],[\"保持异常类型不变\",{\"1\":{\"514\":1}}],[\"保持类型安全\",{\"1\":{\"468\":1}}],[\"保持控制器的简洁\",{\"1\":{\"386\":1}}],[\"保持数据访问层的简洁\",{\"1\":{\"372\":1}}],[\"保持代码简洁\",{\"1\":{\"316\":1}}],[\"保存会话状态到分布式缓存\",{\"1\":{\"3235\":1}}],[\"保存请求和响应的状态信息\",{\"1\":{\"3183\":1}}],[\"保存原始输出流\",{\"1\":{\"2909\":1}}],[\"保存当前下载位置\",{\"1\":{\"2849\":1}}],[\"保存节点引用\",{\"1\":{\"2508\":1}}],[\"保存头节点\",{\"1\":{\"2497\":1}}],[\"保存旧元素\",{\"1\":{\"2495\":1}}],[\"保存尾节点\",{\"1\":{\"2494\":1}}],[\"保存文档\",{\"1\":{\"1962\":2}}],[\"保存文件\",{\"1\":{\"434\":1}}],[\"保存后的文档id\",{\"1\":{\"1962\":1}}],[\"保存后的用户对象\",{\"1\":{\"1948\":1}}],[\"保存后退出\",{\"1\":{\"1578\":1}}],[\"保存用户\",{\"1\":{\"1948\":1}}],[\"保存用户到数据库\",{\"1\":{\"1208\":2}}],[\"保存退出\",{\"1\":{\"1869\":1}}],[\"保存路径\",{\"1\":{\"1738\":1}}],[\"保存重启\",{\"0\":{\"1353\":1}}],[\"保存各个库中槽的编号数据\",{\"1\":{\"185\":1}}],[\"保存slave当前数据同步的位置\",{\"1\":{\"166\":1}}],[\"保存slave的端口\",{\"1\":{\"165\":1}}],[\"保存master的地址与端口\",{\"1\":{\"165\":1}}],[\"保存master信息\",{\"1\":{\"165\":1}}],[\"保存了所有key的过期描述\",{\"1\":{\"148\":1}}],[\"保存多个数据\",{\"1\":{\"134\":1}}],[\"方案二\",{\"0\":{\"3282\":1},\"1\":{\"1536\":1}}],[\"方案一\",{\"0\":{\"3281\":1},\"1\":{\"1536\":1}}],[\"方向代理\",{\"1\":{\"1377\":1,\"1382\":1}}],[\"方便用户使用\",{\"1\":{\"2093\":1,\"2095\":1}}],[\"方便直接在宿主机修改配置信息\",{\"1\":{\"234\":1}}],[\"方便管理\",{\"1\":{\"133\":1}}],[\"方式5\",{\"1\":{\"2407\":1}}],[\"方式4\",{\"1\":{\"2407\":1}}],[\"方式获得的\",{\"1\":{\"1449\":1}}],[\"方式实现\",{\"1\":{\"1436\":2}}],[\"方式四\",{\"1\":{\"1260\":1,\"1453\":2}}],[\"方式3\",{\"1\":{\"527\":1,\"2407\":1,\"2965\":2}}],[\"方式2\",{\"1\":{\"407\":1,\"434\":1,\"527\":1,\"2407\":1,\"2965\":2}}],[\"方式1\",{\"1\":{\"407\":1,\"434\":1,\"527\":1,\"2407\":2,\"2965\":2,\"2980\":1}}],[\"方式三\",{\"1\":{\"165\":1,\"592\":2,\"1260\":1,\"1453\":2}}],[\"方式二\",{\"1\":{\"165\":1,\"592\":2,\"1260\":1,\"1452\":2,\"1453\":2,\"1827\":1,\"2143\":1,\"2166\":1}}],[\"方式一\",{\"1\":{\"165\":1,\"592\":2,\"1260\":1,\"1452\":2,\"1453\":2,\"1827\":1,\"2143\":1,\"2166\":1}}],[\"方法注入\",{\"1\":{\"3159\":1}}],[\"方法注解不会被子类继承\",{\"1\":{\"1078\":1}}],[\"方法调用的实际实现\",{\"1\":{\"2987\":1}}],[\"方法调用栈过深\",{\"1\":{\"701\":1}}],[\"方法查找规则\",{\"1\":{\"2983\":1}}],[\"方法查找流程\",{\"0\":{\"2983\":1}}],[\"方法信息\",{\"1\":{\"2981\":1}}],[\"方法绕过了访问检查\",{\"1\":{\"2975\":1}}],[\"方法绕过访问检查\",{\"1\":{\"1269\":1}}],[\"方法切换读写模式\",{\"1\":{\"2920\":1}}],[\"方法差异\",{\"1\":{\"2909\":1}}],[\"方法不存在\",{\"1\":{\"2993\":1}}],[\"方法不会触发\",{\"1\":{\"2908\":1}}],[\"方法不能混合使用\",{\"1\":{\"1449\":1}}],[\"方法时生效\",{\"1\":{\"2908\":1}}],[\"方法时间复杂度为o\",{\"1\":{\"2348\":1}}],[\"方法手动刷新\",{\"1\":{\"2904\":1}}],[\"方法手动控制\",{\"1\":{\"2455\":1}}],[\"方法输出包含换行符会触发自动刷新\",{\"1\":{\"2904\":1}}],[\"方法进行格式化字符串输出\",{\"1\":{\"2901\":1}}],[\"方法后会自动刷新缓冲区\",{\"1\":{\"2901\":1}}],[\"方法检查是否发生错误\",{\"1\":{\"2901\":1}}],[\"方法检查错误\",{\"1\":{\"2899\":1,\"2908\":1}}],[\"方法检测流是否支持标记和重置功能\",{\"1\":{\"2849\":1}}],[\"方法生成平台无关的换行符\",{\"1\":{\"2860\":1}}],[\"方法按行读取文本比单个字符读取效率高\",{\"1\":{\"2860\":1}}],[\"方法签名\",{\"1\":{\"2841\":1,\"2842\":1,\"2853\":1,\"2854\":1}}],[\"方法用于字符数组操作\",{\"1\":{\"2833\":1}}],[\"方法用于将字符串加入常量池并返回池中的引用\",{\"1\":{\"2297\":1}}],[\"方法可能导致数据丢失\",{\"1\":{\"2920\":1}}],[\"方法可能抛出ioexception\",{\"1\":{\"2872\":1}}],[\"方法可以写入字节数组\",{\"1\":{\"2832\":1}}],[\"方法可以提高读取效率\",{\"1\":{\"2831\":1}}],[\"方法可轻松扩展功能\",{\"1\":{\"2637\":1}}],[\"方法会刷新流\",{\"1\":{\"2908\":1}}],[\"方法会触发自动刷新\",{\"1\":{\"2904\":1}}],[\"方法会抛出异常\",{\"1\":{\"2825\":1}}],[\"方法会被阻塞在notempty条件上\",{\"1\":{\"2483\":1}}],[\"方法会被阻塞在notfull条件上\",{\"1\":{\"2483\":1}}],[\"方法默认是public\",{\"1\":{\"2801\":1}}],[\"方法内修改引用对象内容会影响原对象\",{\"1\":{\"2785\":1}}],[\"方法内修改不影响原变量\",{\"1\":{\"2785\":1}}],[\"方法内不可修改\",{\"1\":{\"1038\":1}}],[\"方法命名规范\",{\"1\":{\"2784\":1}}],[\"方法与compareto\",{\"1\":{\"2672\":1}}],[\"方法比较\",{\"1\":{\"2664\":2}}],[\"方法比较内容\",{\"1\":{\"2204\":1}}],[\"方法在遇到一个流的io异常时会停止读取并抛出异常\",{\"1\":{\"2896\":1}}],[\"方法在读取文本时的优缺点\",{\"1\":{\"2861\":1}}],[\"方法在节点删除后维护双向链表\",{\"1\":{\"2630\":1}}],[\"方法在不同版本使用了不同的排序算法\",{\"1\":{\"2357\":1}}],[\"方法来启用\",{\"1\":{\"2989\":1}}],[\"方法来维护双向链表\",{\"1\":{\"2628\":1}}],[\"方法来实现分页查询\",{\"1\":{\"54\":1}}],[\"方法将其转换为大于等于该值的最小2的幂次方\",{\"1\":{\"2616\":1}}],[\"方法将旧数组元素复制到新数组\",{\"1\":{\"2355\":1}}],[\"方法并检查返回值\",{\"1\":{\"2562\":1}}],[\"方法访问元素\",{\"1\":{\"2505\":1}}],[\"方法定义排序规则\",{\"1\":{\"2486\":1}}],[\"方法返回值\",{\"1\":{\"2784\":1}}],[\"方法返回的都是同一个class对象\",{\"1\":{\"2975\":1}}],[\"方法返回的视图与原map是什么关系\",{\"1\":{\"2672\":1}}],[\"方法返回的不是精确值\",{\"1\":{\"2533\":1}}],[\"方法返回剩余延迟时间和compareto\",{\"1\":{\"2486\":1}}],[\"方法返回enumeration\",{\"1\":{\"2454\":1}}],[\"方法包装普通hashset\",{\"1\":{\"2392\":1}}],[\"方法使用装饰器模式\",{\"1\":{\"2379\":1}}],[\"方法是java中封装行为的基本单元\",{\"1\":{\"2782\":1}}],[\"方法是java提供的显式操作字符串常量池的方式\",{\"1\":{\"2244\":1}}],[\"方法是weakhashmap的核心\",{\"1\":{\"2681\":1}}],[\"方法是基于内容的比较\",{\"1\":{\"2358\":1}}],[\"方法提前扩容\",{\"1\":{\"2355\":1}}],[\"方法代替多次add\",{\"1\":{\"2355\":1}}],[\"方法创建\",{\"1\":{\"2378\":1,\"2395\":1}}],[\"方法创建不可变队列\",{\"1\":{\"2463\":1}}],[\"方法创建不可变集合\",{\"1\":{\"2404\":1,\"2415\":1}}],[\"方法创建不可变set集合\",{\"1\":{\"2367\":1}}],[\"方法创建不可变副本\",{\"1\":{\"2320\":1}}],[\"方法创建不可变list\",{\"1\":{\"2320\":1,\"2323\":1}}],[\"方法创建数组\",{\"1\":{\"1280\":1}}],[\"方法尝试优化内存\",{\"1\":{\"2256\":1}}],[\"方法加synchronized\",{\"1\":{\"2201\":1}}],[\"方法参数\",{\"1\":{\"2966\":1}}],[\"方法参数越少越好\",{\"1\":{\"2788\":1}}],[\"方法参数使用\",{\"1\":{\"2054\":1}}],[\"方法参数不应超过5个\",{\"1\":{\"2027\":1}}],[\"方法实现栈或队列\",{\"1\":{\"2506\":1}}],[\"方法实现\",{\"1\":{\"2035\":1,\"2905\":1,\"2987\":1}}],[\"方法体\",{\"1\":{\"2033\":1,\"3023\":1,\"3024\":1,\"3025\":1,\"3134\":1}}],[\"方法3\",{\"1\":{\"1558\":1}}],[\"方法2\",{\"1\":{\"1557\":1,\"1558\":1,\"2207\":1}}],[\"方法1\",{\"1\":{\"1557\":1,\"1558\":1,\"2207\":1}}],[\"方法二\",{\"0\":{\"1358\":1},\"1\":{\"1551\":1,\"1610\":1,\"1741\":1,\"1787\":1,\"1811\":1}}],[\"方法一\",{\"0\":{\"1357\":1},\"1\":{\"1551\":1,\"1610\":1,\"1741\":1,\"1811\":1}}],[\"方法才能访问私有成员\",{\"1\":{\"1271\":1}}],[\"方法才会启动线程\",{\"1\":{\"615\":1}}],[\"方法或构造函数参数设置原因异常\",{\"1\":{\"2937\":1}}],[\"方法或构造函数\",{\"1\":{\"1263\":1}}],[\"方法等待事件就绪\",{\"1\":{\"3118\":1}}],[\"方法等的修饰符\",{\"1\":{\"1261\":1}}],[\"方法等共享引用\",{\"1\":{\"732\":1}}],[\"方法和字段注解不会被继承\",{\"1\":{\"3140\":1}}],[\"方法和字段注解不会被子类继承\",{\"1\":{\"1064\":1,\"3153\":1}}],[\"方法和scanner类的nextline\",{\"1\":{\"2861\":1}}],[\"方法和属性的访问范围\",{\"1\":{\"2792\":1}}],[\"方法和构造函数\",{\"1\":{\"1256\":1,\"1259\":1,\"2821\":1,\"2962\":1}}],[\"方法重定向标准输出流\",{\"1\":{\"2909\":1}}],[\"方法重写\",{\"0\":{\"2737\":1},\"1\":{\"1205\":1,\"1216\":1}}],[\"方法重载时\",{\"1\":{\"3035\":1}}],[\"方法重载与重写的区别\",{\"1\":{\"2782\":1}}],[\"方法重载\",{\"0\":{\"2741\":1,\"2786\":1},\"1\":{\"1205\":1,\"1216\":1}}],[\"方法的正确使用\",{\"1\":{\"3090\":1}}],[\"方法的异常表会包含两个条目\",{\"1\":{\"2935\":1}}],[\"方法的重载版本\",{\"1\":{\"2901\":1}}],[\"方法的定义与结构\",{\"0\":{\"2784\":1}}],[\"方法的一致性\",{\"1\":{\"2672\":1}}],[\"方法的陷阱\",{\"0\":{\"2346\":1,\"2533\":1}}],[\"方法的基本使用\",{\"0\":{\"2245\":1}}],[\"方法的作用及使用场景\",{\"1\":{\"2206\":1}}],[\"方法的功能\",{\"1\":{\"2095\":1}}],[\"方法的目的\",{\"1\":{\"2095\":1}}],[\"方法的访问权限\",{\"1\":{\"2076\":1}}],[\"方法的使用场景\",{\"1\":{\"1169\":1}}],[\"方法的类\",{\"1\":{\"743\":1}}],[\"方法名等外部输入进行严格验证\",{\"1\":{\"3011\":1}}],[\"方法名等外部输入\",{\"1\":{\"3010\":1}}],[\"方法名等参数应严格验证\",{\"1\":{\"2993\":1}}],[\"方法名等\",{\"1\":{\"2074\":1}}],[\"方法名改变\",{\"1\":{\"1277\":1}}],[\"方法名相同\",{\"1\":{\"1205\":1,\"1216\":1,\"2752\":1}}],[\"方法名\",{\"0\":{\"1997\":1},\"1\":{\"1087\":1,\"2737\":1,\"2752\":1,\"2784\":1,\"3023\":1,\"3025\":1}}],[\"方法名是否符合驼峰命名规范\",{\"1\":{\"1087\":1}}],[\"方法final不影响局部变量\",{\"1\":{\"1053\":1}}],[\"方法符号引用\",{\"1\":{\"725\":1}}],[\"方法表集合\",{\"1\":{\"724\":1}}],[\"方法正常或异常退出的位置\",{\"1\":{\"714\":1}}],[\"方法执行的工作区\",{\"1\":{\"714\":1}}],[\"方法出口\",{\"1\":{\"707\":1,\"714\":1}}],[\"方法区中常量引用的对象\",{\"1\":{\"762\":1}}],[\"方法区中类静态属性引用的对象\",{\"1\":{\"762\":1}}],[\"方法区的一部分\",{\"1\":{\"707\":1}}],[\"方法区溢出\",{\"0\":{\"702\":1}}],[\"方法区常量\",{\"1\":{\"693\":1}}],[\"方法区常量示例\",{\"1\":{\"693\":1}}],[\"方法区\",{\"1\":{\"691\":1,\"706\":1,\"707\":1,\"710\":1}}],[\"方法获取文件大小时需谨慎\",{\"1\":{\"2848\":1}}],[\"方法获取userservice类的class对象\",{\"1\":{\"1266\":1}}],[\"方法获取\",{\"1\":{\"632\":1,\"1260\":2}}],[\"方法清除值\",{\"1\":{\"618\":1}}],[\"方法清除线程局部变量\",{\"1\":{\"601\":1}}],[\"方法有什么区别\",{\"1\":{\"618\":1}}],[\"方法只是普通方法调用\",{\"1\":{\"615\":1}}],[\"方法设置中断标志\",{\"1\":{\"607\":1}}],[\"方法引用可以使代码更加简洁\",{\"1\":{\"539\":1}}],[\"方法引用主要有以下几种类型\",{\"1\":{\"539\":1}}],[\"方法引用使用\",{\"1\":{\"539\":1}}],[\"方法引用是lambda表达式的一种简化形式\",{\"1\":{\"539\":1}}],[\"方法引用\",{\"0\":{\"539\":1},\"1\":{\"1059\":1}}],[\"方法互补\",{\"1\":{\"474\":1}}],[\"方法\",{\"0\":{\"2244\":1,\"2256\":1,\"2294\":1,\"2295\":1,\"2296\":1,\"2297\":1,\"2311\":1,\"2781\":1},\"1\":{\"47\":2,\"48\":4,\"49\":3,\"50\":2,\"71\":3,\"474\":1,\"617\":1,\"1038\":1,\"1064\":1,\"1169\":1,\"1178\":1,\"1198\":2,\"1228\":1,\"1232\":1,\"1267\":2,\"1270\":1,\"1453\":4,\"1454\":2,\"2224\":2,\"2227\":1,\"2231\":1,\"2232\":2,\"2280\":1,\"2294\":1,\"2295\":1,\"2303\":1,\"2320\":1,\"2325\":2,\"2340\":2,\"2345\":1,\"2367\":1,\"2382\":1,\"2385\":1,\"2393\":1,\"2404\":1,\"2422\":2,\"2427\":1,\"2434\":2,\"2448\":1,\"2476\":1,\"2477\":1,\"2491\":1,\"2507\":2,\"2509\":2,\"2585\":2,\"2605\":1,\"2641\":1,\"2643\":1,\"2677\":1,\"2698\":1,\"2732\":1,\"2826\":1,\"2841\":1,\"2848\":1,\"2849\":1,\"2853\":1,\"2872\":1,\"2873\":1,\"2899\":1,\"2909\":2,\"2916\":1,\"2942\":1,\"2982\":1,\"3179\":1,\"3198\":1}}],[\"他可以处理2\",{\"1\":{\"1376\":1}}],[\"他实现非常高效的反向代理\",{\"1\":{\"1376\":1}}],[\"他会检测你的jar包是否存在问题\",{\"1\":{\"1004\":1}}],[\"他会加载其配置类到ioc容器中\",{\"1\":{\"463\":1}}],[\"他一旦遇到停电\",{\"1\":{\"136\":1}}],[\"他也能当数字使用\",{\"1\":{\"132\":1}}],[\"他就是存一个字符串\",{\"1\":{\"132\":1}}],[\"每rtt拥塞窗口增加1个mss\",{\"1\":{\"3075\":1}}],[\"每收到一个ack\",{\"1\":{\"3075\":1}}],[\"每段单独加锁\",{\"1\":{\"2519\":1}}],[\"每颗分别是几核\",{\"1\":{\"1838\":1}}],[\"每页显示的条数\",{\"1\":{\"1443\":1}}],[\"每添加一个新形状\",{\"1\":{\"1209\":1}}],[\"每完成一行或一列遍历后\",{\"1\":{\"1162\":1}}],[\"每台服务器都要读取\",{\"1\":{\"304\":1}}],[\"每台主机保存一部分\",{\"1\":{\"185\":1}}],[\"每来一个子类就要定义一套子类的规范\",{\"1\":{\"291\":1}}],[\"每一层负责不同的通信功能\",{\"1\":{\"3058\":1}}],[\"每一个重要版本都带来了革命性的特性\",{\"1\":{\"573\":1}}],[\"每一个空间中只能保存一个字符串信息\",{\"1\":{\"132\":1}}],[\"每一页的数据条数\",{\"1\":{\"284\":1}}],[\"每份代表的是一个存储空间\",{\"1\":{\"185\":1}}],[\"每种都有利有弊\",{\"1\":{\"142\":1}}],[\"每条指令最多写入64个元素\",{\"1\":{\"140\":1}}],[\"每秒上下文切换次数\",{\"1\":{\"1887\":1}}],[\"每秒cpu的中断次数\",{\"1\":{\"1887\":1}}],[\"每秒虚拟内存写入磁盘的大小\",{\"1\":{\"1887\":1}}],[\"每秒从磁盘读入虚拟内存的大小\",{\"1\":{\"1887\":1}}],[\"每秒tcp重传数量\",{\"1\":{\"1886\":1}}],[\"每秒远程发起的tcp连接数\",{\"1\":{\"1886\":1}}],[\"每秒本地发起的tcp连接数\",{\"1\":{\"1886\":1}}],[\"每秒花费固定的cpu资源维护内存\",{\"1\":{\"154\":1}}],[\"每秒钟执行server\",{\"1\":{\"153\":1}}],[\"每秒钟fsync一次\",{\"1\":{\"142\":1}}],[\"每秒将缓冲区中的指令同步到aof文件中\",{\"1\":{\"140\":1}}],[\"每秒\",{\"1\":{\"140\":1}}],[\"每次重启容器ip会变化\",{\"1\":{\"3255\":1}}],[\"每次拼接都是o\",{\"1\":{\"2723\":1}}],[\"每次查找范围减半\",{\"1\":{\"2710\":1}}],[\"每次get或put操作会将元素移到链表尾部\",{\"1\":{\"2635\":1}}],[\"每次gc时\",{\"1\":{\"720\":1}}],[\"每次扩容为原来的1\",{\"1\":{\"2581\":1}}],[\"每次扩容为原来的2倍+2\",{\"1\":{\"2581\":1}}],[\"每次添加都会复制整个数组\",{\"1\":{\"2536\":1}}],[\"每次添加都会自动装箱为integer\",{\"1\":{\"2452\":1}}],[\"每次操作都需要获取锁\",{\"1\":{\"2456\":1,\"2513\":1}}],[\"每次操作创建新的stream\",{\"1\":{\"553\":1}}],[\"每次结构性修改\",{\"1\":{\"2444\":1}}],[\"每次调用创建新string\",{\"1\":{\"2280\":1}}],[\"每次调用系统函数\",{\"1\":{\"1887\":1}}],[\"每次循环都创建新string对象\",{\"1\":{\"2280\":1}}],[\"每次循环创建新string对象\",{\"1\":{\"2257\":1}}],[\"每次循环创建新对象\",{\"1\":{\"1056\":1}}],[\"每次修改创建新对象\",{\"1\":{\"2201\":1,\"2275\":1}}],[\"每次读取缓冲区大小的数据\",{\"1\":{\"1224\":1}}],[\"每次读取一个字节\",{\"1\":{\"1224\":1}}],[\"每次读写都是全部数据\",{\"1\":{\"139\":1}}],[\"每次创建新对象\",{\"1\":{\"1041\":1,\"2202\":1,\"2253\":1}}],[\"每次只使用一块\",{\"1\":{\"765\":1}}],[\"每次请求都会创建一个新的bean实例\",{\"1\":{\"327\":1}}],[\"每次访问数据库\",{\"1\":{\"192\":1}}],[\"每次传播命令\",{\"1\":{\"167\":1}}],[\"每次选取待删除数据的个数\",{\"1\":{\"157\":1}}],[\"每次执行耗时\",{\"1\":{\"153\":1}}],[\"每次写入操作均同步到aof文件中数据零误差\",{\"1\":{\"140\":1}}],[\"每次\",{\"1\":{\"140\":1}}],[\"每个层次专注于解决特定问题\",{\"1\":{\"3068\":1}}],[\"每个方法应只抛出与其职责相关的特定异常\",{\"1\":{\"2948\":1}}],[\"每个方法调用创建栈帧\",{\"1\":{\"707\":1}}],[\"每个流专注于单一功能\",{\"1\":{\"2895\":1}}],[\"每个流类专注于单一功能\",{\"1\":{\"2847\":1}}],[\"每个枚举常量在jvm中只有一个实例\",{\"1\":{\"2819\":1}}],[\"每个枚举常量都是该类的实例\",{\"1\":{\"2818\":1}}],[\"每个元素是链表或红黑树的头节点\",{\"1\":{\"2593\":1}}],[\"每个segment独立扩容\",{\"1\":{\"2541\":1}}],[\"每个segment是一个小的hashmap\",{\"1\":{\"2541\":1}}],[\"每个stream对象只能执行一次终端操作\",{\"1\":{\"553\":1}}],[\"每个节点要么是红色\",{\"1\":{\"2650\":1}}],[\"每个节点需要额外存储前后指针\",{\"1\":{\"2511\":1}}],[\"每个节点额外存储前后指针\",{\"1\":{\"2503\":1}}],[\"每个节点包含前驱和后继引用\",{\"1\":{\"2500\":1}}],[\"每个节点包含前驱节点\",{\"1\":{\"2319\":1}}],[\"每个键最多映射到一个值\",{\"1\":{\"2398\":1}}],[\"每个字符仅需1个字节\",{\"1\":{\"2289\":1}}],[\"每个引用指向一个一维数组\",{\"1\":{\"2171\":1}}],[\"每个变量都必须明确声明其数据类型\",{\"1\":{\"2097\":1}}],[\"每个case必须以break\",{\"1\":{\"2062\":1}}],[\"每个cpu核心绑定一个reactor线程\",{\"1\":{\"1347\":1}}],[\"每个模块只负责一个业务领域\",{\"1\":{\"2005\":1}}],[\"每个服务应拥有私有数据存储\",{\"1\":{\"2014\":1}}],[\"每个服务配置不一样\",{\"1\":{\"1698\":1}}],[\"每个服务端口不一致\",{\"1\":{\"1697\":1}}],[\"每个服务都要\",{\"0\":{\"1697\":1,\"1698\":1}}],[\"每个机器设置自己的名称\",{\"1\":{\"1610\":1}}],[\"每个请求按访问ip的哈希结果分配\",{\"1\":{\"1406\":1}}],[\"每个请求按时间顺序逐一分配到不同的后端服务器\",{\"1\":{\"1404\":1}}],[\"每个worker进程支持的最大连接数\",{\"1\":{\"1385\":1}}],[\"每个客户端连接需要一个独立线程处理\",{\"1\":{\"1314\":1}}],[\"每个连接需要一个独立线程处理\",{\"1\":{\"1314\":1}}],[\"每个对象都是一个独立的单元\",{\"1\":{\"1216\":1}}],[\"每个对象都是一个独立的模块\",{\"1\":{\"1216\":1}}],[\"每个段独立加锁\",{\"1\":{\"1197\":1,\"2697\":1}}],[\"每个实例独立\",{\"1\":{\"1037\":1}}],[\"每个生命周期包含一系列阶段\",{\"1\":{\"940\":1}}],[\"每个线程负责一部分桶的迁移\",{\"1\":{\"2541\":1}}],[\"每个线程都有自己的栈\",{\"1\":{\"1145\":1}}],[\"每个线程的栈大小\",{\"1\":{\"793\":1,\"827\":1,\"861\":1,\"895\":1}}],[\"每个线程更新自己的cell\",{\"1\":{\"680\":1}}],[\"每个region可以根据需要扮演新生代的eden区\",{\"1\":{\"778\":1}}],[\"每个全局http会话创建一个新的bean实例\",{\"1\":{\"327\":1}}],[\"每个http会话创建一个新的bean实例\",{\"1\":{\"327\":1}}],[\"每个http请求创建一个新的bean实例\",{\"1\":{\"327\":1}}],[\"每个业务服务都保持session同步不就好了\",{\"1\":{\"304\":1}}],[\"每个商家根据店铺等级\",{\"1\":{\"191\":1}}],[\"每个阶段接收输入\",{\"1\":{\"95\":1}}],[\"每个操作处理输入文档并输出结果文档\",{\"1\":{\"64\":1}}],[\"每个操作接收输入文档\",{\"1\":{\"58\":1}}],[\"每个\",{\"1\":{\"31\":1}}],[\"也称为asynchronous\",{\"1\":{\"3120\":1}}],[\"也称为bio\",{\"1\":{\"2913\":1}}],[\"也称作aarch64架构\",{\"1\":{\"224\":1}}],[\"也需要置为null\",{\"1\":{\"2508\":1}}],[\"也要确保流被关闭\",{\"1\":{\"2848\":1}}],[\"也要尽量避免频繁调用系统函数\",{\"1\":{\"1887\":1}}],[\"也要进程上下文切换\",{\"1\":{\"1887\":1}}],[\"也不一定意味这应用程序性能会不好\",{\"1\":{\"1884\":1}}],[\"也不需要像\",{\"1\":{\"306\":1}}],[\"也会产生不同的class对象\",{\"1\":{\"2975\":1}}],[\"也会生成不同的class对象\",{\"1\":{\"1279\":1}}],[\"也会重新检查条件\",{\"1\":{\"1139\":2}}],[\"也能帮助开发者梳理并发编程的知识体系\",{\"1\":{\"1119\":1}}],[\"也能正确处理相关的字节码变化\",{\"1\":{\"510\":1}}],[\"也能生成精确的错误消息\",{\"1\":{\"505\":1}}],[\"也能在禁用\",{\"1\":{\"304\":1}}],[\"也注重可用性和易用性\",{\"1\":{\"487\":1}}],[\"也一直注册不到nacos注册中心\",{\"1\":{\"237\":1}}],[\"也有一些命令工具\",{\"1\":{\"193\":1}}],[\"也是bye请求的uas\",{\"1\":{\"3182\":1}}],[\"也是封装和继承无法单独实现的\",{\"1\":{\"2754\":1}}],[\"也是用户使用api的指南\",{\"1\":{\"1942\":1,\"1953\":1}}],[\"也是面试中的高频考点\",{\"1\":{\"1218\":1}}],[\"也是面试中必问的知识点\",{\"1\":{\"1200\":1}}],[\"也是\",{\"1\":{\"166\":1}}],[\"也是默认配置\",{\"1\":{\"140\":1}}],[\"也是最常用的数据存储类型\",{\"1\":{\"132\":1}}],[\"也就是所有数据库的操作日志\",{\"1\":{\"1739\":1}}],[\"也就是在不重新加载整个页面的情况下\",{\"1\":{\"1436\":1}}],[\"也就是在不重新加载整个页\",{\"1\":{\"1430\":1}}],[\"也就是我们刚才所讲的情况\",{\"1\":{\"1399\":1}}],[\"也就是根据用户请求的网站url进行匹配\",{\"1\":{\"1391\":1}}],[\"也就是说\",{\"1\":{\"305\":1}}],[\"也就是说bgsave的过程分成两个过程\",{\"1\":{\"138\":1}}],[\"也就是它保存的是某一时刻的数据状态\",{\"1\":{\"137\":1}}],[\"也就叫做持久化\",{\"1\":{\"136\":1}}],[\"也叫做快照存储\",{\"1\":{\"137\":1}}],[\"也可使用tcp保证可靠性\",{\"1\":{\"3176\":1}}],[\"也可自定义\",{\"1\":{\"2865\":1}}],[\"也可事先预留装好harbor后再修改\",{\"1\":{\"1621\":1,\"1753\":1}}],[\"也可下发新的refresh\",{\"1\":{\"306\":1}}],[\"也可以运行在udp之上\",{\"1\":{\"3227\":1}}],[\"也可以去\",{\"1\":{\"1852\":1}}],[\"也可以做到读写分离\",{\"1\":{\"1763\":1}}],[\"也可以将\",{\"1\":{\"1438\":1,\"1440\":1}}],[\"也可以是\",{\"1\":{\"1433\":1,\"1434\":1,\"1435\":1,\"1436\":2}}],[\"也可以自定义用户\",{\"1\":{\"1357\":1}}],[\"也可以重写默认方法\",{\"1\":{\"541\":1}}],[\"也可以直接运行\",{\"1\":{\"479\":1}}],[\"也可以直接利用\",{\"1\":{\"130\":1}}],[\"也可以放在请求json中\",{\"1\":{\"306\":1}}],[\"也可以用于交换信息\",{\"1\":{\"305\":1}}],[\"也可能是\",{\"1\":{\"125\":2}}],[\"最常用的是digest认证\",{\"1\":{\"3215\":1}}],[\"最常见的错误是捕获异常后不处理也不记录\",{\"1\":{\"1253\":1}}],[\"最不利输入下的复杂度\",{\"1\":{\"2721\":1}}],[\"最理想输入下的复杂度\",{\"1\":{\"2721\":1}}],[\"最好情况\",{\"1\":{\"2721\":2}}],[\"最老的元素\",{\"1\":{\"2632\":1}}],[\"最少访问的元素在尾部\",{\"1\":{\"2512\":1}}],[\"最近访问的元素移到头部\",{\"1\":{\"2512\":1}}],[\"最近最少使用\",{\"1\":{\"2427\":1,\"2512\":1,\"2632\":1}}],[\"最近登录的5个账号\",{\"1\":{\"1850\":1}}],[\"最近登录信息列表\",{\"0\":{\"1850\":1},\"1\":{\"1835\":1}}],[\"最坏和平均情况\",{\"0\":{\"2721\":1}}],[\"最坏情况\",{\"1\":{\"2721\":2}}],[\"最坏情况下o\",{\"1\":{\"2512\":1}}],[\"最坏情况保证\",{\"1\":{\"2357\":1}}],[\"最坏o\",{\"1\":{\"2357\":1,\"2666\":1}}],[\"最小权限原则\",{\"1\":{\"2800\":1,\"2993\":1,\"3011\":1}}],[\"最小知识原则\",{\"1\":{\"2788\":1}}],[\"最小值\",{\"1\":{\"2326\":1}}],[\"最小化依赖\",{\"0\":{\"1024\":1}}],[\"最小化构建范围\",{\"1\":{\"965\":1}}],[\"最快\",{\"1\":{\"2276\":1}}],[\"最慢\",{\"1\":{\"2276\":1}}],[\"最高权限任意操作\",{\"1\":{\"1736\":1}}],[\"最高5分钟\",{\"1\":{\"192\":1}}],[\"最短路径优先\",{\"0\":{\"1014\":1},\"1\":{\"927\":1,\"1028\":1}}],[\"最后进行性能测试验证\",{\"1\":{\"2542\":1}}],[\"最后返回的节点\",{\"1\":{\"2498\":1}}],[\"最后一个返回的元素索引\",{\"1\":{\"2441\":1}}],[\"最后一个元素或不存在\",{\"1\":{\"2721\":1}}],[\"最后一个元素\",{\"1\":{\"2371\":1,\"2661\":1}}],[\"最后一次出现位置\",{\"1\":{\"2195\":1}}],[\"最后一次写入到现在\",{\"1\":{\"1882\":1}}],[\"最后一次主从信息交换距现在的秒\",{\"1\":{\"193\":1}}],[\"最后比较内容\",{\"1\":{\"2294\":1}}],[\"最后200行就可以排查\",{\"1\":{\"1910\":1}}],[\"最后使用的cpu\",{\"1\":{\"1882\":1}}],[\"最后ctrl\",{\"1\":{\"1869\":1}}],[\"最后你就可以通过maven坐标直接引用你的项目依赖了\",{\"1\":{\"1004\":1}}],[\"最后清除边界以外的内存\",{\"1\":{\"766\":1}}],[\"最后汇总结果\",{\"1\":{\"680\":1}}],[\"最佳实践等多个方面\",{\"1\":{\"1240\":1}}],[\"最佳实践\",{\"0\":{\"1022\":1},\"1\":{\"521\":1,\"2511\":1,\"2768\":1,\"2771\":1}}],[\"最初是oracle\",{\"1\":{\"480\":1}}],[\"最优复制缓冲区空间\",{\"1\":{\"171\":1}}],[\"最终都是在docker\",{\"1\":{\"3246\":1}}],[\"最终响应\",{\"1\":{\"3208\":1}}],[\"最终类\",{\"1\":{\"2761\":1}}],[\"最终大小\",{\"1\":{\"2524\":1}}],[\"最终列表内容\",{\"1\":{\"2523\":2}}],[\"最终的\",{\"1\":{\"2077\":1}}],[\"最终会有一个选举结果\",{\"1\":{\"182\":1}}],[\"最终结果\",{\"1\":{\"171\":1,\"172\":1,\"675\":1}}],[\"最终你还要把它再读取出来\",{\"1\":{\"136\":1}}],[\"最先入队的元素会被弹出\",{\"1\":{\"167\":1}}],[\"最多丢失0\",{\"1\":{\"142\":1}}],[\"最简单的方式\",{\"1\":{\"2697\":1}}],[\"最简单的存储数据的格式\",{\"1\":{\"132\":1}}],[\"最简单的数据存储类型\",{\"1\":{\"132\":1}}],[\"最大帧长度\",{\"1\":{\"3126\":1}}],[\"最大化cpu利用率\",{\"1\":{\"3089\":1}}],[\"最大数组容量\",{\"1\":{\"2433\":1}}],[\"最大容量\",{\"1\":{\"2355\":1}}],[\"最大连接数\",{\"1\":{\"1326\":1}}],[\"最大窗口大小\",{\"1\":{\"1312\":1}}],[\"最大值\",{\"1\":{\"1069\":1,\"2326\":1,\"2408\":1,\"2708\":1}}],[\"最大堆大小\",{\"1\":{\"792\":1,\"826\":1,\"860\":1,\"894\":1}}],[\"最大65535项\",{\"1\":{\"736\":1}}],[\"最大内存\",{\"1\":{\"694\":2}}],[\"最大线程数\",{\"1\":{\"602\":1,\"622\":1,\"625\":1,\"3082\":2}}],[\"最大请求大小\",{\"1\":{\"434\":1}}],[\"最大文件大小\",{\"1\":{\"434\":1}}],[\"最大的劣势\",{\"1\":{\"304\":1}}],[\"最大变更历史数量\",{\"1\":{\"232\":2,\"1684\":2}}],[\"最大可使用内存\",{\"1\":{\"157\":1}}],[\"最大为\",{\"1\":{\"125\":2}}],[\"最大大小为\",{\"1\":{\"125\":1}}],[\"最大行大小为\",{\"1\":{\"125\":1}}],[\"最大键长度是\",{\"1\":{\"125\":1}}],[\"位向量\",{\"1\":{\"2363\":1}}],[\"位运算\",{\"1\":{\"2727\":1}}],[\"位运算比算术运算更快\",{\"1\":{\"2119\":1}}],[\"位运算符的应用场景主要包括\",{\"1\":{\"2119\":1}}],[\"位运算符有什么应用场景\",{\"1\":{\"2119\":1}}],[\"位运算符等可以直接操作二进制位\",{\"1\":{\"2117\":1}}],[\"位运算符用于操作二进制位\",{\"1\":{\"2112\":1}}],[\"位运算符\",{\"0\":{\"2112\":1}}],[\"位异或赋值\",{\"1\":{\"2113\":1}}],[\"位或赋值\",{\"1\":{\"2113\":1}}],[\"位与赋值\",{\"1\":{\"2113\":1}}],[\"位于网络上的仓库\",{\"1\":{\"939\":1}}],[\"位于开发者本地机器上的仓库\",{\"1\":{\"939\":1}}],[\"位于java\",{\"1\":{\"471\":1,\"545\":1,\"1261\":1,\"2516\":1}}],[\"位图\",{\"1\":{\"131\":1}}],[\"位置服务数据库\",{\"1\":{\"3184\":1}}],[\"位置\",{\"1\":{\"125\":1}}],[\"种特殊数据类型\",{\"1\":{\"131\":1}}],[\"种基础数据类型\",{\"1\":{\"131\":1}}],[\"散列\",{\"1\":{\"131\":1}}],[\"比静态继承更加灵活\",{\"1\":{\"3009\":1}}],[\"比单向流更灵活\",{\"1\":{\"2919\":1}}],[\"比weakhashmap更适合高并发场景\",{\"1\":{\"2697\":1}}],[\"比http协议安全\",{\"1\":{\"1414\":1}}],[\"比初始标记稍长\",{\"1\":{\"777\":1}}],[\"比锁机制更轻量\",{\"1\":{\"663\":1}}],[\"比较响应值\",{\"1\":{\"3215\":1}}],[\"比较nio和aio的适用场景\",{\"1\":{\"3130\":1}}],[\"比较反射调用与直接调用的区别\",{\"1\":{\"2986\":1}}],[\"比较bufferedreader的readline\",{\"1\":{\"2861\":1}}],[\"比较treeset\",{\"1\":{\"2672\":1}}],[\"比较linkedhashmap的accessorder=true模式与lru算法的异同\",{\"1\":{\"2643\":1}}],[\"比较器违反compareto\",{\"1\":{\"2671\":1}}],[\"比较器\",{\"1\":{\"2568\":1,\"2571\":1}}],[\"比较不同实现方式的优缺点\",{\"1\":{\"2356\":1}}],[\"比较不同遍历方式的优缺点\",{\"1\":{\"1160\":1}}],[\"比较的是内容\",{\"1\":{\"2204\":1}}],[\"比较的是引用而非内容\",{\"1\":{\"2255\":1}}],[\"比较的是引用\",{\"1\":{\"2204\":1}}],[\"比较引用\",{\"1\":{\"2194\":1}}],[\"比较内容\",{\"1\":{\"2194\":1,\"2255\":1}}],[\"比较两个文件\",{\"0\":{\"1866\":1},\"1\":{\"1835\":1}}],[\"比较两个数组是否相同\",{\"1\":{\"1170\":1}}],[\"比较两个整数\",{\"1\":{\"537\":1}}],[\"比较相邻元素是否相等\",{\"1\":{\"1170\":1}}],[\"比较字符串内容\",{\"1\":{\"1169\":1}}],[\"比较字符\",{\"1\":{\"1165\":1}}],[\"比较重要的有下面\",{\"1\":{\"128\":1}}],[\"比对的时候\",{\"1\":{\"1871\":1}}],[\"比对slave发现长时间没有进行响应\",{\"1\":{\"172\":1}}],[\"比对master与slave的差异\",{\"1\":{\"167\":1}}],[\"比如^m\",{\"1\":{\"1868\":1}}],[\"比如我们现在就是指定了redis必须存放在\",{\"1\":{\"1785\":1}}],[\"比如我centos7\",{\"1\":{\"1507\":1}}],[\"比如记录所有耗时操作500ms的操作\",{\"1\":{\"1739\":1}}],[\"比如目前我用的版本是\",{\"1\":{\"1536\":1}}],[\"比如获取元素\",{\"1\":{\"1446\":1}}],[\"比如servlet\",{\"1\":{\"1401\":1}}],[\"比如可以使用nginx搭建api接口网关\",{\"1\":{\"1383\":1}}],[\"比如说现在的sentinel1和sentinel4发出这个选举指令了\",{\"1\":{\"182\":1}}],[\"比如说大家用idea的时候\",{\"1\":{\"137\":1}}],[\"比如\",{\"1\":{\"130\":1,\"1763\":1}}],[\"类信息\",{\"1\":{\"2992\":1}}],[\"类初始化阶段执行\",{\"1\":{\"2980\":1}}],[\"类初始化时机\",{\"0\":{\"743\":1}}],[\"类注解\",{\"1\":{\"2968\":1}}],[\"类继承\",{\"1\":{\"2808\":1}}],[\"类继承关系与核心结构\",{\"0\":{\"2262\":1}}],[\"类与方法修饰关键字\",{\"0\":{\"2808\":1}}],[\"类与对象相关关键字\",{\"0\":{\"2077\":1}}],[\"类变量\",{\"1\":{\"2767\":1}}],[\"类的运行时常量池\",{\"1\":{\"2981\":1}}],[\"类的方法\",{\"1\":{\"2966\":1}}],[\"类的构造方法\",{\"1\":{\"2966\":1}}],[\"类的属性\",{\"1\":{\"2795\":1,\"2966\":1}}],[\"类的修饰符\",{\"0\":{\"2761\":1}}],[\"类的加载机制\",{\"0\":{\"2760\":1}}],[\"类的定义与结构\",{\"0\":{\"2759\":1}}],[\"类使用class关键字定义\",{\"1\":{\"2759\":1}}],[\"类是java面向对象编程的核心\",{\"1\":{\"2758\":1}}],[\"类是对象的模板\",{\"1\":{\"2756\":1}}],[\"类必须是公共的\",{\"1\":{\"2734\":1}}],[\"类结构分析\",{\"0\":{\"2619\":1,\"2675\":1}}],[\"类声明为final\",{\"1\":{\"2307\":1,\"2779\":1}}],[\"类主体\",{\"1\":{\"2287\":1}}],[\"类定义与继承关系\",{\"0\":{\"2287\":1}}],[\"类定义与核心字段\",{\"0\":{\"2263\":1}}],[\"类和接口的目的和功能\",{\"1\":{\"2095\":1}}],[\"类和接口符号引用\",{\"1\":{\"725\":1}}],[\"类选择器\",{\"1\":{\"1455\":2}}],[\"类名<t>\",{\"1\":{\"3019\":1}}],[\"类名\",{\"0\":{\"1996\":1},\"1\":{\"1087\":1,\"2071\":1,\"2074\":1,\"2968\":1,\"3019\":1}}],[\"类\",{\"0\":{\"2755\":1,\"2758\":1},\"1\":{\"1064\":1,\"1139\":2,\"2035\":1,\"2100\":1,\"2201\":1,\"2746\":1,\"2766\":1}}],[\"类中的成员可以是各种类型\",{\"1\":{\"1038\":1}}],[\"类别\",{\"1\":{\"1034\":1}}],[\"类版本冲突\",{\"0\":{\"755\":1}}],[\"类从被加载到虚拟机内存中开始\",{\"1\":{\"741\":1}}],[\"类加载时注解信息的解析\",{\"1\":{\"3150\":1}}],[\"类加载时执行\",{\"1\":{\"1037\":1}}],[\"类加载完成\",{\"1\":{\"2980\":2}}],[\"类加载与class对象生成流程\",{\"0\":{\"2979\":1}}],[\"类加载期\",{\"1\":{\"2243\":2}}],[\"类加载机制\",{\"0\":{\"1146\":1},\"1\":{\"1141\":1}}],[\"类加载机制采用延迟加载策略\",{\"1\":{\"751\":1}}],[\"类加载过程分为三个主要阶段\",{\"1\":{\"2760\":1}}],[\"类加载过程包括加载\",{\"1\":{\"1146\":1}}],[\"类加载过程中\",{\"1\":{\"756\":1,\"1279\":1}}],[\"类加载过多导致溢出\",{\"1\":{\"814\":1,\"848\":1,\"882\":1,\"916\":1}}],[\"类加载器引用\",{\"1\":{\"2981\":1}}],[\"类加载器\",{\"0\":{\"1147\":1}}],[\"类加载器泄漏\",{\"0\":{\"753\":1}}],[\"类加载器的隔离性设计\",{\"0\":{\"750\":1}}],[\"类加载器的层次结构\",{\"1\":{\"742\":1}}],[\"类加载器子系统\",{\"1\":{\"690\":1}}],[\"类加载的双亲委派模型\",{\"0\":{\"742\":1}}],[\"类加载的生命周期\",{\"0\":{\"741\":1,\"2980\":1}}],[\"类索引\",{\"1\":{\"724\":1}}],[\"类文件不符合jvm规范会导致verifyerror\",{\"1\":{\"737\":1}}],[\"类文件验证失败\",{\"0\":{\"737\":1}}],[\"类文件采用紧凑的二进制格式\",{\"1\":{\"731\":1}}],[\"类文件的二进制格式设计\",{\"0\":{\"731\":1}}],[\"类文件的核心\",{\"1\":{\"724\":1}}],[\"类文件结构由以下部分组成\",{\"1\":{\"724\":1}}],[\"类文件结构详解\",{\"0\":{\"724\":1}}],[\"类文件格式严格规定了类的各种信息如何存储\",{\"1\":{\"723\":1}}],[\"类文件格式概述\",{\"0\":{\"723\":1}}],[\"类文件格式保持稳定\",{\"1\":{\"562\":1}}],[\"类似c语言的printf函数\",{\"1\":{\"2901\":1}}],[\"类似concurrenthashmap的分段锁机制\",{\"1\":{\"2697\":1}}],[\"类似hashmap\",{\"1\":{\"2689\":1}}],[\"类似地\",{\"1\":{\"1270\":1}}],[\"类似于进程\",{\"1\":{\"3245\":1}}],[\"类似于安装包\",{\"1\":{\"3245\":1}}],[\"类似于bio中的流\",{\"1\":{\"3117\":1}}],[\"类似于传统io中的流\",{\"1\":{\"2915\":1}}],[\"类似于\",{\"1\":{\"1455\":1,\"1460\":1}}],[\"类似于http协议\",{\"1\":{\"1098\":1}}],[\"类似于provided\",{\"1\":{\"925\":1}}],[\"类似于关系型数据库中的列\",{\"1\":{\"37\":1}}],[\"类似于关系型数据库中的表\",{\"1\":{\"37\":1}}],[\"类似于关系型数据库中的行\",{\"1\":{\"37\":1}}],[\"类似trim\",{\"1\":{\"472\":1}}],[\"类型信息丢失\",{\"1\":{\"3085\":1}}],[\"类型推断原理以及泛型在继承体系中的表现\",{\"1\":{\"3031\":1}}],[\"类型参数通常使用大写字母表示\",{\"1\":{\"3019\":1}}],[\"类型参数固定\",{\"1\":{\"1288\":1}}],[\"类型不安全\",{\"1\":{\"3017\":1}}],[\"类型溢出\",{\"1\":{\"2104\":1}}],[\"类型擦除后方法签名相同\",{\"1\":{\"3035\":1}}],[\"类型擦除的影响\",{\"0\":{\"3035\":1}}],[\"类型擦除的三个阶段\",{\"0\":{\"1290\":1}}],[\"类型擦除\",{\"1\":{\"3034\":1}}],[\"类型擦除引发的常见问题\",{\"0\":{\"1291\":1}}],[\"类型擦除深度解析\",{\"0\":{\"1289\":1}}],[\"类型检查\",{\"1\":{\"1288\":1}}],[\"类型注解\",{\"1\":{\"1066\":1}}],[\"类型转换\",{\"1\":{\"2104\":1,\"2118\":1}}],[\"类型转换等场景\",{\"1\":{\"1066\":1}}],[\"类型转换异常\",{\"1\":{\"1055\":1}}],[\"类型转换异常处理\",{\"0\":{\"1055\":1}}],[\"类型转换常见问题及解决方案\",{\"1\":{\"1055\":1}}],[\"类型转换与字符串操作问题\",{\"0\":{\"1054\":1}}],[\"类型安全的map\",{\"1\":{\"3046\":1}}],[\"类型安全的list\",{\"1\":{\"3046\":1}}],[\"类型安全\",{\"1\":{\"409\":1,\"1286\":1,\"2819\":1}}],[\"类型\",{\"1\":{\"303\":1,\"992\":1,\"2436\":1,\"2752\":1,\"2786\":1}}],[\"类型为object\",{\"1\":{\"283\":1}}],[\"类型的数据结构更加适合用来做消息队列\",{\"1\":{\"130\":1}}],[\"其底层实现机制和高级用法对编写高效\",{\"1\":{\"3031\":1}}],[\"其底层实现就是基于\",{\"1\":{\"130\":1}}],[\"其底层依赖于jvm的invokevirtual或invokeinterface指令\",{\"1\":{\"2987\":1}}],[\"其设计思想主要包括\",{\"1\":{\"2973\":1}}],[\"其设计权衡\",{\"1\":{\"1049\":1}}],[\"其工作原理如下\",{\"1\":{\"2889\":1}}],[\"其工作过程是\",{\"1\":{\"742\":1}}],[\"其核心特点是插入删除效率高\",{\"1\":{\"2489\":1}}],[\"其核心特点是基于数组实现\",{\"1\":{\"2432\":1}}],[\"其核心是维护一个object类型的数组elementdata\",{\"1\":{\"2318\":1}}],[\"其核心作用包括\",{\"1\":{\"1286\":1}}],[\"其源码实现蕴含了丰富的设计思想和性能优化技巧\",{\"1\":{\"2284\":1}}],[\"其内部机制远比表面看起来更为复杂\",{\"1\":{\"3201\":1}}],[\"其内部持有一个linkedhashmap实例\",{\"1\":{\"2619\":1}}],[\"其内部也是通过双向链表维护访问顺序\",{\"1\":{\"2512\":1}}],[\"其内部维护了一个reentrantlock和两个condition\",{\"1\":{\"2483\":1}}],[\"其内部char数组也被final修饰\",{\"1\":{\"2190\":1}}],[\"其内部的工作原理具体如下\",{\"1\":{\"180\":1}}],[\"其次是为在主从的情况下设置不同的权值\",{\"1\":{\"1405\":1}}],[\"其性能优势并不总是明显\",{\"1\":{\"1238\":1}}],[\"其性能已接近hashmap\",{\"1\":{\"1197\":1}}],[\"其余否\",{\"1\":{\"1174\":2}}],[\"其地址为\",{\"1\":{\"975\":1}}],[\"其生命周期包括\",{\"1\":{\"741\":1}}],[\"其final字段已经初始化完成\",{\"1\":{\"668\":1}}],[\"其中exception又分为受检异常\",{\"1\":{\"2923\":1}}],[\"其中tostring\",{\"1\":{\"2215\":1}}],[\"其中tty表示终端名称\",{\"1\":{\"1845\":1}}],[\"其中包括\",{\"1\":{\"1886\":1}}],[\"其中包含了此次写入操作具体更改的磁盘地址和字节\",{\"1\":{\"1739\":1}}],[\"其中包含了spring的早期思想\",{\"1\":{\"312\":1}}],[\"其中包含所有依赖的rpm安装包\",{\"1\":{\"1581\":1}}],[\"其中hbhs是用户名\",{\"1\":{\"1422\":1}}],[\"其中密码已经加过密\",{\"1\":{\"1418\":1}}],[\"其中语法层面最核心的设计思想包括\",{\"1\":{\"1046\":1}}],[\"其中验证\",{\"1\":{\"741\":1}}],[\"其中jep\",{\"1\":{\"497\":1}}],[\"其中有加载失败则表明没有该字节码文件\",{\"1\":{\"415\":1,\"459\":1}}],[\"其中\",{\"1\":{\"216\":1,\"463\":1,\"924\":1,\"1764\":1}}],[\"其中客户端的身份验证是可选的\",{\"1\":{\"114\":1}}],[\"其他都可以不用动\",{\"1\":{\"3263\":1}}],[\"其他事件处理方法省略\",{\"1\":{\"3208\":1,\"3217\":1}}],[\"其他exception子类\",{\"1\":{\"2925\":1}}],[\"其他包\",{\"1\":{\"2794\":1}}],[\"其他包路径\",{\"1\":{\"461\":1}}],[\"其他常量\",{\"1\":{\"2256\":1}}],[\"其他常用参数\",{\"0\":{\"798\":1,\"832\":1,\"866\":1,\"900\":1}}],[\"其他代码\",{\"1\":{\"2190\":1}}],[\"其他方法实现\",{\"1\":{\"2282\":1}}],[\"其他方法\",{\"1\":{\"2161\":1,\"2356\":4,\"2392\":1,\"2544\":2,\"2697\":1}}],[\"其他方法类似\",{\"1\":{\"439\":1}}],[\"其他运算符\",{\"0\":{\"2115\":1}}],[\"其他月份\",{\"1\":{\"2078\":1,\"2126\":1}}],[\"其他不能访问\",{\"1\":{\"1940\":1}}],[\"其他系统指令不同\",{\"1\":{\"1788\":1}}],[\"其他的资源文件会存放在usr\",{\"1\":{\"1785\":1}}],[\"其他的一概不要动\",{\"1\":{\"1632\":1}}],[\"其他源码安装包下载地址\",{\"1\":{\"1488\":1}}],[\"其他人只需引入maven坐标即可直接使用\",{\"1\":{\"990\":1}}],[\"其他类\",{\"1\":{\"461\":1}}],[\"其他命令仍然会执行\",{\"1\":{\"211\":1}}],[\"其他slave切换master\",{\"1\":{\"182\":1}}],[\"其他服务器依然可以继续提供服务\",{\"1\":{\"161\":1}}],[\"其实现原理如下\",{\"1\":{\"2486\":1}}],[\"其实现与字符串常量池密切相关\",{\"1\":{\"2297\":1}}],[\"其实这个参数解决不了内存问题\",{\"1\":{\"1558\":1}}],[\"其实这种方式也为尝不可\",{\"1\":{\"304\":1}}],[\"其实简单几步就可以实现\",{\"1\":{\"1500\":1}}],[\"其实也不是\",{\"1\":{\"147\":1}}],[\"其实最简单的就是现在长什么样\",{\"1\":{\"137\":1}}],[\"其实基于的一个前提就是他提前把你的数据给存起来了\",{\"1\":{\"136\":1}}],[\"其实你不用担心\",{\"1\":{\"136\":1}}],[\"脚本文件夹打包上传至政务云服务器中\",{\"1\":{\"1646\":1}}],[\"脚本启动\",{\"1\":{\"1369\":1}}],[\"脚本\",{\"0\":{\"232\":1}}],[\"脚本的话\",{\"1\":{\"130\":1}}],[\"脚本的方式来实现限流\",{\"1\":{\"130\":1}}],[\"脚注\",{\"0\":{\"18\":1}}],[\"功能\",{\"1\":{\"2861\":1,\"2885\":1,\"2917\":1,\"3065\":2,\"3066\":2}}],[\"功能更全面但有额外开销\",{\"1\":{\"2861\":1}}],[\"功能增强\",{\"1\":{\"2541\":1}}],[\"功能与linkedlist类似\",{\"1\":{\"2513\":1}}],[\"功能完善\",{\"1\":{\"2511\":1}}],[\"功能分析\",{\"1\":{\"1467\":1,\"1469\":1,\"1470\":1}}],[\"功能丰富\",{\"1\":{\"1347\":1,\"2227\":1}}],[\"功能相对基础\",{\"1\":{\"494\":1}}],[\"功能强大的多合一故障诊断工具\",{\"1\":{\"3096\":1}}],[\"功能强大\",{\"1\":{\"129\":1}}],[\"功能全面\",{\"1\":{\"129\":1}}],[\"延迟\",{\"1\":{\"3091\":1,\"3109\":1}}],[\"延迟异常创建\",{\"1\":{\"2942\":1}}],[\"延迟任务类\",{\"1\":{\"2467\":1}}],[\"延迟队列\",{\"1\":{\"2467\":1}}],[\"延迟队列应用\",{\"0\":{\"2467\":1}}],[\"延迟时间\",{\"1\":{\"2461\":1}}],[\"延迟初始化\",{\"1\":{\"2445\":1}}],[\"延迟等指标\",{\"1\":{\"1347\":1}}],[\"延迟要求\",{\"1\":{\"818\":1,\"852\":1,\"886\":1,\"920\":1}}],[\"延迟加载与按需加载\",{\"0\":{\"751\":1}}],[\"延迟的插入线程不能获得请求的锁定\",{\"1\":{\"125\":1}}],[\"延时执行\",{\"1\":{\"154\":1}}],[\"延时队列\",{\"1\":{\"130\":1}}],[\"延时队列等场景\",{\"1\":{\"129\":1}}],[\"限定类型为number及其子类\",{\"1\":{\"3025\":1}}],[\"限定类型>\",{\"1\":{\"3025\":1}}],[\"限定类型参数\",{\"0\":{\"3025\":1}}],[\"限流机制\",{\"1\":{\"3087\":1}}],[\"限流有3种\",{\"1\":{\"1394\":1}}],[\"限流怎么做的\",{\"0\":{\"1394\":1}}],[\"限流\",{\"1\":{\"129\":1,\"130\":1,\"190\":1}}],[\"限制并发请求数量\",{\"1\":{\"3087\":1}}],[\"限制并发连接数\",{\"0\":{\"1397\":1},\"1\":{\"1394\":1}}],[\"限制对内部api的反射访问\",{\"1\":{\"3011\":1}}],[\"限制反射权限\",{\"1\":{\"3011\":1}}],[\"限制反射对敏感类和成员的访问\",{\"1\":{\"3010\":1}}],[\"限制\",{\"1\":{\"1940\":1}}],[\"限制内存上限\",{\"1\":{\"1569\":1}}],[\"限制的原理实质是基于漏桶算法原理来实现的\",{\"1\":{\"1395\":1}}],[\"限制一个用户发送的请求\",{\"1\":{\"1395\":1,\"1396\":1}}],[\"限制一部分请求访问\",{\"1\":{\"190\":1}}],[\"限制命令的执行权限\",{\"1\":{\"95\":1}}],[\"限制返回的数据量\",{\"1\":{\"64\":1}}],[\"集中收集一段时间内的npe异常日志\",{\"1\":{\"522\":1}}],[\"集中管理所有配置\",{\"1\":{\"409\":1}}],[\"集成aiops进行异常检测和根因分析\",{\"1\":{\"3111\":1}}],[\"集成sleuth和zipkin等工具\",{\"1\":{\"2960\":1}}],[\"集成代码评审功能\",{\"1\":{\"2024\":1}}],[\"集成测试环境构建制品\",{\"1\":{\"1654\":1,\"1704\":1}}],[\"集成测试环境制品构建\",{\"0\":{\"1707\":1},\"1\":{\"280\":1,\"1655\":1,\"1656\":1,\"1711\":1}}],[\"集成测试\",{\"0\":{\"450\":1},\"1\":{\"447\":1,\"450\":1}}],[\"集成模块\",{\"1\":{\"313\":1}}],[\"集群架构设计\",{\"0\":{\"3234\":1}}],[\"集群配置\",{\"1\":{\"1764\":1}}],[\"集群管理\",{\"1\":{\"1712\":1}}],[\"集群中的每个节点默认已经附带了多个标签\",{\"1\":{\"1660\":1}}],[\"集群初始化节点\",{\"1\":{\"1560\":1}}],[\"集群节点配置\",{\"1\":{\"1560\":1}}],[\"集群名称配置\",{\"1\":{\"1560\":1}}],[\"集群\",{\"1\":{\"232\":1,\"1684\":1}}],[\"集群命令\",{\"0\":{\"208\":1}}],[\"集群瓦解\",{\"1\":{\"190\":1}}],[\"集群操作命令\",{\"1\":{\"186\":1}}],[\"集群是如何操作的呢\",{\"1\":{\"185\":1}}],[\"集群作用\",{\"1\":{\"184\":1}}],[\"集群就是使用网络将若干台计算机联通起来\",{\"1\":{\"184\":1}}],[\"集群简介\",{\"0\":{\"184\":1}}],[\"集群cluster\",{\"0\":{\"183\":1}}],[\"集群的话会更高\",{\"1\":{\"129\":1}}],[\"集合类\",{\"1\":{\"2518\":1}}],[\"集合类型变量建议使用复数形式\",{\"1\":{\"2001\":1}}],[\"集合为空时使用空数组\",{\"1\":{\"2436\":1}}],[\"集合为null时必须显式处理\",{\"1\":{\"2058\":1}}],[\"集合中只能使用包装类型\",{\"1\":{\"2776\":1}}],[\"集合中的元素数量\",{\"1\":{\"2433\":1,\"2490\":1}}],[\"集合中存放null元素\",{\"1\":{\"2053\":1}}],[\"集合运算\",{\"0\":{\"2372\":1}}],[\"集合转换\",{\"1\":{\"2369\":1}}],[\"集合转换与不可变性问题\",{\"0\":{\"1191\":1},\"1\":{\"1191\":1}}],[\"集合大小\",{\"1\":{\"2369\":1}}],[\"集合本身不可变\",{\"1\":{\"2358\":2}}],[\"集合元素拼接\",{\"1\":{\"2310\":1}}],[\"集合遍历\",{\"0\":{\"2059\":1}}],[\"集合遍历方式及性能分析\",{\"1\":{\"1179\":1}}],[\"集合遍历方式性能对比\",{\"0\":{\"1179\":1}}],[\"集合判空\",{\"0\":{\"2058\":1}}],[\"集合处理规范\",{\"0\":{\"2056\":1}}],[\"集合工具类使用注意事项\",{\"1\":{\"1194\":1}}],[\"集合工具类使用陷阱\",{\"0\":{\"1194\":1}}],[\"集合初始容量优化\",{\"1\":{\"1193\":1}}],[\"集合初始化\",{\"0\":{\"2057\":1},\"1\":{\"2054\":1}}],[\"集合初始化时避免null\",{\"1\":{\"2054\":1}}],[\"集合初始化时指定初始容量\",{\"1\":{\"2040\":1}}],[\"集合初始化方式对比\",{\"1\":{\"1178\":1}}],[\"集合初始化与遍历方式\",{\"0\":{\"1177\":1}}],[\"集合使用常见错误\",{\"0\":{\"1189\":1}}],[\"集合选择策略\",{\"0\":{\"1187\":1}}],[\"集合去重与排序综合案例\",{\"1\":{\"1182\":1}}],[\"集合去重与排序\",{\"0\":{\"1182\":1}}],[\"集合体系结构\",{\"1\":{\"1175\":1}}],[\"集合框架操作复杂度分析\",{\"0\":{\"2712\":1}}],[\"集合框架在jdk\",{\"0\":{\"1198\":1}}],[\"集合框架设计模式应用\",{\"0\":{\"1184\":1}}],[\"集合框架核心接口对比\",{\"0\":{\"1174\":1}}],[\"集合框架体系结构\",{\"0\":{\"1173\":1}}],[\"集合框架\",{\"0\":{\"1171\":1,\"3326\":1}}],[\"集合的集合\",{\"1\":{\"2178\":1}}],[\"集合的迭代和处理\",{\"1\":{\"537\":1}}],[\"集合的容器\",{\"1\":{\"37\":1}}],[\"集合增强\",{\"0\":{\"473\":1}}],[\"集合命令\",{\"0\":{\"82\":1,\"203\":1},\"1\":{\"77\":1}}],[\"集合和文档\",{\"1\":{\"77\":1}}],[\"集合\",{\"0\":{\"2312\":1,\"2359\":1,\"2396\":1,\"2430\":1,\"2457\":1,\"2487\":1,\"2514\":1,\"2545\":1,\"2565\":1,\"2589\":1,\"2617\":1,\"2644\":1,\"2673\":1},\"1\":{\"37\":1,\"131\":1,\"2661\":1}}],[\"就能动态生成crud操作的sql语句\",{\"1\":{\"3141\":1}}],[\"就能访问到容器内的目录\",{\"1\":{\"1530\":1}}],[\"就无法再继承其他类\",{\"1\":{\"2994\":1}}],[\"就无法做到了\",{\"1\":{\"304\":1}}],[\"就增加功能来说\",{\"1\":{\"2895\":1}}],[\"就像读取单个流一样\",{\"1\":{\"2889\":1}}],[\"就不再计算剩余的部分\",{\"1\":{\"2119\":1}}],[\"就想到查看linux系统操作日志\",{\"1\":{\"1910\":1}}],[\"就要进行上下文切换\",{\"1\":{\"1887\":1}}],[\"就将data的内容发送到对端\",{\"1\":{\"1877\":1}}],[\"就将请求分配到那个服务器上\",{\"1\":{\"1407\":1}}],[\"就可以使网页实现异步更新\",{\"1\":{\"1430\":1,\"1436\":1}}],[\"就可以访问该静态图片了\",{\"1\":{\"1402\":1}}],[\"就可以生成测试覆盖率的报告\",{\"1\":{\"456\":1}}],[\"就会自动构建镜像并使用镜像启动容器\",{\"1\":{\"3246\":1}}],[\"就会出现cpu瓶颈了\",{\"1\":{\"1887\":1}}],[\"就会继续等待\",{\"1\":{\"1139\":1}}],[\"就会产生冲突\",{\"1\":{\"1010\":1}}],[\"就会发生依赖冲突\",{\"1\":{\"927\":1}}],[\"就会在有效期内一直可用\",{\"1\":{\"304\":1}}],[\"就创建一个嵌套的事务\",{\"1\":{\"359\":1}}],[\"就创建一个新事务\",{\"1\":{\"359\":2}}],[\"就暂停这个事务\",{\"1\":{\"359\":1}}],[\"就抛出异常\",{\"1\":{\"359\":2}}],[\"就以非事务的方式执行\",{\"1\":{\"359\":1}}],[\"就加入到这个事务中\",{\"1\":{\"359\":3}}],[\"就是说多少个进程真的分配到cpu\",{\"1\":{\"1887\":1}}],[\"就是挂载在磁盘上\",{\"1\":{\"1661\":1}}],[\"就是一个\",{\"1\":{\"1446\":1}}],[\"就是一轮选举完没有选取\",{\"1\":{\"182\":1}}],[\"就是存放在nginx的html页面\",{\"1\":{\"1386\":1}}],[\"就是正工作的时候停电了\",{\"1\":{\"136\":1}}],[\"就单机\",{\"1\":{\"129\":1}}],[\"就好像缓存穿透一般\",{\"1\":{\"0\":1}}],[\"核理論\",{\"0\":{\"2674\":1}}],[\"核理论\",{\"0\":{\"2397\":1,\"2431\":1,\"2488\":1,\"2546\":1,\"2566\":1,\"2645\":1}}],[\"核心指标\",{\"1\":{\"3111\":1}}],[\"核心参数\",{\"1\":{\"3082\":1}}],[\"核心代码框架\",{\"1\":{\"3070\":1}}],[\"核心代码示例\",{\"1\":{\"1238\":1}}],[\"核心步骤包括\",{\"1\":{\"3070\":1}}],[\"核心传输协议\",{\"0\":{\"3060\":1}}],[\"核心集合接口与泛型\",{\"0\":{\"3046\":1}}],[\"核心类包括\",{\"1\":{\"2966\":1}}],[\"核心类库中的drivermanager\",{\"1\":{\"756\":1}}],[\"核心api及其基本使用方法\",{\"1\":{\"2962\":1}}],[\"核心api使用与实现原理\",{\"0\":{\"1223\":1}}],[\"核心api使用\",{\"1\":{\"1218\":1}}],[\"核心功能\",{\"1\":{\"2897\":1}}],[\"核心优化点\",{\"1\":{\"2527\":1}}],[\"核心思想是通过原子操作避免使用锁\",{\"1\":{\"2485\":1}}],[\"核心操作对比\",{\"0\":{\"2462\":1}}],[\"核心成员变量与内部类\",{\"0\":{\"2490\":1}}],[\"核心成员变量\",{\"0\":{\"2433\":1,\"2548\":1,\"2568\":1,\"2592\":1,\"2620\":1,\"2647\":1,\"2679\":1}}],[\"核心方法源码解析\",{\"0\":{\"2293\":1}}],[\"核心方法实现\",{\"0\":{\"2572\":1},\"1\":{\"2284\":1}}],[\"核心字段\",{\"0\":{\"2288\":1}}],[\"核心模块代码覆盖率不低于80\",{\"1\":{\"2045\":1}}],[\"核心语法\",{\"1\":{\"1433\":1,\"1434\":1,\"1435\":1}}],[\"核心对象\",{\"1\":{\"1432\":1}}],[\"核心知识点\",{\"1\":{\"1225\":1}}],[\"核心并发关键字包括\",{\"1\":{\"654\":1}}],[\"核心线程数\",{\"1\":{\"622\":1,\"625\":1,\"626\":1,\"629\":2,\"3082\":2}}],[\"核心理论\",{\"0\":{\"587\":1,\"604\":1,\"620\":1,\"636\":1,\"653\":1,\"670\":1,\"688\":1,\"705\":1,\"722\":1,\"740\":1,\"758\":1,\"786\":1,\"820\":1,\"854\":1,\"888\":1,\"1032\":1,\"1062\":1,\"1090\":1,\"1172\":1,\"1284\":1,\"1309\":1,\"2313\":1,\"2360\":1,\"2458\":1,\"2515\":1,\"2590\":1,\"2618\":1,\"2700\":1}}],[\"核心规范发展\",{\"0\":{\"578\":1}}],[\"核心特性\",{\"0\":{\"534\":1},\"1\":{\"2816\":1}}],[\"核心简化\",{\"1\":{\"463\":1}}],[\"核心组件和会话流程等方面\",{\"1\":{\"3172\":1}}],[\"核心组件\",{\"1\":{\"377\":1,\"3079\":1}}],[\"核心容器\",{\"1\":{\"313\":1}}],[\"核心概念\",{\"0\":{\"37\":1,\"1202\":1},\"1\":{\"3104\":1}}],[\"核\",{\"1\":{\"129\":1}}],[\"左侧\",{\"1\":{\"2905\":1}}],[\"左对齐\",{\"1\":{\"2905\":1}}],[\"左旋操作\",{\"1\":{\"2657\":1}}],[\"左孩子索引\",{\"1\":{\"2580\":1}}],[\"左子节点索引\",{\"1\":{\"2472\":1}}],[\"左移赋值\",{\"1\":{\"2113\":1}}],[\"左移\",{\"1\":{\"2112\":1}}],[\"左大括号与语句同行\",{\"1\":{\"2033\":1}}],[\"左右\",{\"1\":{\"129\":1}}],[\"左连接其他集合\",{\"1\":{\"58\":1}}],[\"引起重复处理\",{\"1\":{\"3222\":1}}],[\"引导类加载器\",{\"1\":{\"1147\":1}}],[\"引入消息队列解耦组件间通信\",{\"1\":{\"3228\":1}}],[\"引入消息队列削峰填谷\",{\"1\":{\"1347\":1}}],[\"引入navigablemap和navigableset接口\",{\"1\":{\"2651\":1}}],[\"引入record类作为键时的优化\",{\"1\":{\"2596\":1}}],[\"引入priorityqueue\",{\"1\":{\"2569\":1}}],[\"引入arraydeque\",{\"1\":{\"2549\":1}}],[\"引入arrays\",{\"1\":{\"2434\":1}}],[\"引入queue接口及linkedlist实现\",{\"1\":{\"2549\":1}}],[\"引入queue接口及priorityqueue\",{\"1\":{\"2463\":1}}],[\"引入treemap和treeset\",{\"1\":{\"2651\":1}}],[\"引入transferqueue\",{\"1\":{\"2520\":1}}],[\"引入toarray\",{\"1\":{\"2320\":1}}],[\"引入foreach循环支持\",{\"1\":{\"2434\":1,\"2491\":1}}],[\"引入红黑树结构\",{\"1\":{\"2596\":1}}],[\"引入红黑树\",{\"1\":{\"2428\":1}}],[\"引入concurrenthashmap\",{\"1\":{\"2404\":1,\"2520\":1}}],[\"引入copyof\",{\"1\":{\"2320\":1}}],[\"引入linkedhashmap和linkedhashset\",{\"1\":{\"2624\":1}}],[\"引入linkedhashmap\",{\"1\":{\"2404\":1,\"2596\":1}}],[\"引入listiterator\",{\"1\":{\"2320\":1}}],[\"引入list接口及arraylist\",{\"1\":{\"2320\":1}}],[\"引入hashmap\",{\"1\":{\"2404\":1,\"2596\":1}}],[\"引入of\",{\"1\":{\"2320\":1,\"2367\":1,\"2569\":1,\"2596\":1,\"2624\":1,\"2651\":1}}],[\"引入外部依赖\",{\"1\":{\"2227\":1}}],[\"引入分页插件的样式文件和\",{\"1\":{\"1444\":1}}],[\"引入stack类\",{\"1\":{\"2549\":1}}],[\"引入starter后\",{\"1\":{\"398\":1}}],[\"引入stream\",{\"1\":{\"1198\":2,\"2320\":1}}],[\"引入函数式编程能力\",{\"1\":{\"1059\":1}}],[\"引入约定优于配置和依赖管理\",{\"1\":{\"584\":1}}],[\"引入集合框架\",{\"1\":{\"574\":1}}],[\"引入了函数式编程范式和一系列革命性特性\",{\"1\":{\"535\":1}}],[\"引入了多项重要改进\",{\"1\":{\"497\":1}}],[\"引入即可使用\",{\"1\":{\"396\":1}}],[\"引入\",{\"1\":{\"129\":1,\"306\":1,\"335\":1,\"1447\":2,\"2596\":1,\"3246\":1}}],[\"引用指向新对象\",{\"1\":{\"2785\":1}}],[\"引用队列\",{\"1\":{\"2679\":1,\"2680\":1,\"2687\":1}}],[\"引用分为四种级别\",{\"1\":{\"2676\":1}}],[\"引用常量池对象\",{\"1\":{\"2303\":1}}],[\"引用常量池同一对象\",{\"1\":{\"2189\":1,\"2239\":1,\"2245\":2}}],[\"引用相同对象\",{\"1\":{\"2294\":1}}],[\"引用比较\",{\"1\":{\"2248\":1}}],[\"引用同一对象\",{\"1\":{\"2243\":1,\"2303\":1}}],[\"引用不同对象\",{\"1\":{\"2303\":1}}],[\"引用不同堆对象\",{\"1\":{\"2239\":1}}],[\"引用不同内存区域\",{\"1\":{\"2239\":1}}],[\"引用数据类型存储的是对象的地址\",{\"1\":{\"2105\":1}}],[\"引用数据类型可能为null\",{\"1\":{\"2104\":1}}],[\"引用数据类型是对对象的引用\",{\"1\":{\"2100\":1}}],[\"引用数据类型\",{\"0\":{\"2100\":1}}],[\"引用父类\",{\"1\":{\"2077\":1}}],[\"引用当前对象\",{\"1\":{\"2077\":1}}],[\"引用失效时减1\",{\"1\":{\"761\":1}}],[\"引用计数法\",{\"0\":{\"761\":1},\"1\":{\"1149\":1}}],[\"引用类型属性需防御性拷贝\",{\"1\":{\"2779\":1}}],[\"引用类型\",{\"1\":{\"2080\":1,\"2766\":1,\"2785\":1}}],[\"引用类型原子类\",{\"1\":{\"672\":1}}],[\"引用类型和数组元素\",{\"1\":{\"671\":1}}],[\"引用变量\",{\"1\":{\"125\":1,\"3246\":1}}],[\"引用了无效的表\",{\"1\":{\"125\":1}}],[\"引用\",{\"1\":{\"125\":1}}],[\"访问宿主机的方式有所变化\",{\"1\":{\"3256\":1}}],[\"访问私有方法\",{\"1\":{\"2989\":1}}],[\"访问私有字段失败\",{\"1\":{\"2989\":1}}],[\"访问私有字段\",{\"1\":{\"2989\":1}}],[\"访问私有成员\",{\"1\":{\"2962\":1,\"2975\":1}}],[\"访问属性\",{\"0\":{\"2971\":1}}],[\"访问修饰符\",{\"1\":{\"2981\":1}}],[\"访问修饰符工具类\",{\"1\":{\"2966\":1}}],[\"访问修饰符不能严于父类\",{\"1\":{\"2737\":1,\"2752\":1}}],[\"访问父类protected属性\",{\"1\":{\"2797\":1}}],[\"访问节点后回调\",{\"1\":{\"2629\":1}}],[\"访问2\",{\"1\":{\"2427\":1,\"2632\":1}}],[\"访问顺序\",{\"1\":{\"2400\":1,\"2635\":1}}],[\"访问操作\",{\"1\":{\"2354\":1}}],[\"访问前检查索引范围\",{\"1\":{\"2341\":1}}],[\"访问了不存在的索引位置\",{\"1\":{\"2341\":1}}],[\"访问性能测试\",{\"1\":{\"2327\":1}}],[\"访问未初始化的数组或已置为null的数组\",{\"1\":{\"2159\":1}}],[\"访问数组时索引超出范围\",{\"1\":{\"2158\":1}}],[\"访问数据库\",{\"1\":{\"125\":1}}],[\"访问第二行第三列元素\",{\"1\":{\"2169\":1}}],[\"访问第一行第一列元素\",{\"1\":{\"2169\":1}}],[\"访问第一个元素\",{\"1\":{\"2146\":1}}],[\"访问第三个元素\",{\"1\":{\"2146\":1}}],[\"访问效率高\",{\"1\":{\"2105\":1}}],[\"访问控制和方法调用等多个环节\",{\"1\":{\"2977\":1}}],[\"访问控制修饰符\",{\"0\":{\"2733\":1}}],[\"访问控制关键字\",{\"0\":{\"2076\":1,\"2807\":1}}],[\"访问控制台日中管理中可看到\",{\"1\":{\"1564\":1}}],[\"访问harbor\",{\"0\":{\"1630\":1,\"1719\":1}}],[\"访问后等一小会待数据加载完毕\",{\"1\":{\"1563\":1}}],[\"访问演示接口\",{\"0\":{\"1563\":1}}],[\"访问接口后产生相应的数据视图\",{\"1\":{\"1562\":1}}],[\"访问skywalking\",{\"0\":{\"1562\":1}}],[\"访问页面\",{\"0\":{\"1547\":1}}],[\"访问页面端\",{\"0\":{\"257\":1}}],[\"访问路径\",{\"1\":{\"1417\":1}}],[\"访问\",{\"0\":{\"1519\":1},\"1\":{\"1390\":1,\"2354\":1,\"3246\":1}}],[\"访问50x\",{\"1\":{\"1385\":1}}],[\"访问日志文件\",{\"1\":{\"1384\":1}}],[\"访问类的私有成员\",{\"1\":{\"1259\":1}}],[\"访问类的静态字段\",{\"1\":{\"743\":1}}],[\"访问速度慢\",{\"1\":{\"988\":1}}],[\"访问速度可能较慢\",{\"1\":{\"976\":1}}],[\"访问速度更快\",{\"1\":{\"129\":1}}],[\"访问标志\",{\"1\":{\"724\":1}}],[\"访问需要认证的接口\",{\"1\":{\"306\":1}}],[\"访问需要认证的接口时鉴权失败\",{\"1\":{\"306\":1}}],[\"访问console\",{\"0\":{\"251\":1}}],[\"访问峰值呈现逐渐降低的趋势\",{\"1\":{\"191\":1}}],[\"那a的开启顺序值比b服务小\",{\"1\":{\"1368\":1}}],[\"那redis的集群是如何增强可扩展性的呢\",{\"1\":{\"185\":1}}],[\"那就会接着进行第二轮第三轮直到完成选举\",{\"1\":{\"182\":1}}],[\"那自然就成为了处理事故的人\",{\"1\":{\"182\":1}}],[\"那怎么办\",{\"1\":{\"182\":1}}],[\"那这件事由哪个sentinel来做呢\",{\"1\":{\"182\":1}}],[\"那这个操作过程是什么样的呢\",{\"1\":{\"176\":1}}],[\"那哨兵是什么呢\",{\"1\":{\"176\":1}}],[\"那此时我们可能需要从一堆的slave中重新选举出一个新的master\",{\"1\":{\"176\":1}}],[\"那我们要来分析单机redis的风险与问题\",{\"1\":{\"161\":1}}],[\"那我想问一下\",{\"1\":{\"137\":1}}],[\"那数据删除的策略policy到底有几种呢\",{\"1\":{\"157\":1}}],[\"那有没有折中方案\",{\"1\":{\"153\":1}}],[\"那解决的思路是什么呢\",{\"1\":{\"139\":1}}],[\"那恐怕就比较灾难了\",{\"1\":{\"136\":1}}],[\"那既然都这么快了\",{\"1\":{\"128\":1}}],[\"那么env的相同名字的值始终覆盖arg的参数\",{\"1\":{\"3246\":1}}],[\"那么无论b的值是什么\",{\"1\":{\"2119\":1}}],[\"那么你该升级内存了或者把耗内存的任务迁移到其他机器\",{\"1\":{\"1887\":1}}],[\"那么设备利用率不代表后端实际的硬件设备已经饱和\",{\"1\":{\"1884\":1}}],[\"那么现在来设置密码\",{\"1\":{\"1787\":1}}],[\"那么maven会自动将项目c添加到项目a的依赖中\",{\"1\":{\"926\":1}}],[\"那么给过去以后呢\",{\"1\":{\"182\":1}}],[\"那么sentinel2既能接到sentinel1的也能接到sentinel4的\",{\"1\":{\"182\":1}}],[\"那么这种是记录纯粹的数据\",{\"1\":{\"137\":1}}],[\"那么如何开启ssl呢\",{\"1\":{\"116\":1}}],[\"那么不会使用ssl方式了\",{\"1\":{\"115\":1}}],[\"那么在传输过程中\",{\"1\":{\"114\":1}}],[\"那么其在网络中数据都是以明文进行传输的\",{\"1\":{\"114\":1}}],[\"通话结束时\",{\"1\":{\"3189\":1}}],[\"通信通道\",{\"1\":{\"3124\":1}}],[\"通信协议到java\",{\"1\":{\"3055\":1}}],[\"通信协议实现简单且解析高效\",{\"1\":{\"128\":1}}],[\"通道关闭问题\",{\"1\":{\"2920\":1}}],[\"通道支持双向操作\",{\"1\":{\"2919\":1}}],[\"通道\",{\"0\":{\"2915\":1}}],[\"通用对象深拷贝工具\",{\"0\":{\"3007\":1}}],[\"通用数组打印工具类实现思路\",{\"1\":{\"2234\":1}}],[\"通用方式实现\",{\"1\":{\"1436\":1}}],[\"通用匹配\",{\"1\":{\"1392\":1,\"1393\":1}}],[\"通用迭代器遍历方法\",{\"1\":{\"1185\":1}}],[\"通配符的灵活应用\",{\"1\":{\"3031\":1}}],[\"通配符应用\",{\"0\":{\"1296\":1}}],[\"通配符使用场景\",{\"1\":{\"1283\":1}}],[\"通知你的中央仓库已激活\",{\"1\":{\"994\":1}}],[\"通知的类型\",{\"0\":{\"336\":1}}],[\"通知方法会在目标方法抛出异常时执行\",{\"1\":{\"267\":1}}],[\"通知方法会在目标方法返回时执行\",{\"1\":{\"267\":1}}],[\"通知方法会在目标方法返回或者异常后执行\",{\"1\":{\"267\":1}}],[\"通知方法会在目标方法调用之前执行\",{\"1\":{\"267\":1}}],[\"通知方法将目标方法封装起来\",{\"1\":{\"267\":1}}],[\"通知\",{\"0\":{\"181\":1},\"1\":{\"177\":1,\"179\":1,\"335\":1}}],[\"通常包含以下核心层次\",{\"1\":{\"3204\":1}}],[\"通常由程序逻辑错误导致\",{\"1\":{\"2926\":1}}],[\"通常用于不同线程\",{\"1\":{\"2897\":1}}],[\"通常8kb~64kb\",{\"1\":{\"2884\":1}}],[\"通常8kb\",{\"1\":{\"2873\":1}}],[\"通常更高效\",{\"1\":{\"2872\":1}}],[\"通常更低\",{\"1\":{\"2689\":1}}],[\"通常在需要立即写入数据时使用\",{\"1\":{\"2872\":1}}],[\"通常为1\",{\"1\":{\"3075\":1}}],[\"通常为1kb~8kb\",{\"1\":{\"2836\":1,\"2848\":1}}],[\"通常为get或post\",{\"1\":{\"1412\":1}}],[\"通常关注辅助空间的增长情况\",{\"1\":{\"2703\":1}}],[\"通常而言\",{\"1\":{\"1759\":1}}],[\"通常无法处理\",{\"1\":{\"1243\":1}}],[\"通常全大写\",{\"1\":{\"1038\":1}}],[\"通常是http\",{\"1\":{\"1412\":1}}],[\"通常是由于递归调用过深或方法内部创建过大的局部变量导致的\",{\"1\":{\"1155\":1}}],[\"通常是udp\",{\"1\":{\"1105\":1}}],[\"通常是无状态的\",{\"1\":{\"1100\":1}}],[\"通常是项目名称\",{\"1\":{\"937\":1}}],[\"通常是零值\",{\"1\":{\"756\":1}}],[\"通常使用大o符号\",{\"1\":{\"2701\":1}}],[\"通常使用反转的域名\",{\"1\":{\"937\":1}}],[\"通常使用表达式来定义\",{\"1\":{\"335\":1}}],[\"通常需要更大的堆空间\",{\"1\":{\"492\":1}}],[\"通常此类数据的出现量是一个较低的值\",{\"1\":{\"192\":1}}],[\"通常检测10\",{\"1\":{\"192\":1}}],[\"通常检测3\",{\"1\":{\"192\":1}}],[\"通常会有一个波动值\",{\"1\":{\"192\":1}}],[\"通常哨兵的数量配置为单数\",{\"1\":{\"177\":1}}],[\"通常放置在同一个机房部署\",{\"1\":{\"173\":1}}],[\"通常设置在50\",{\"1\":{\"157\":1}}],[\"通常情况下\",{\"1\":{\"130\":1}}],[\"通过主机访问\",{\"0\":{\"3282\":1}}],[\"通过主机ip访问\",{\"0\":{\"3256\":1}}],[\"通过rancher\",{\"0\":{\"3281\":1}}],[\"通过rancher创建kubernetes集群\",{\"0\":{\"3273\":1}}],[\"通过register消息更新注册信息\",{\"1\":{\"3184\":1}}],[\"通过reactor模式处理大量并发连接\",{\"1\":{\"1111\":1}}],[\"通过redis\",{\"1\":{\"171\":1}}],[\"通过访问别名即可访问到容器ip\",{\"1\":{\"3257\":1}}],[\"通过容器ip访问\",{\"0\":{\"3255\":1}}],[\"通过发送\",{\"1\":{\"3246\":1}}],[\"通过与其他协议\",{\"1\":{\"3220\":1}}],[\"通过定义新的头域和方法\",{\"1\":{\"3220\":1}}],[\"通过定义泛型基类mapper\",{\"1\":{\"3052\":1}}],[\"通过则处理请求\",{\"1\":{\"3215\":1}}],[\"通过理解这些深层次的技术细节\",{\"1\":{\"3201\":1}}],[\"通过理论解析与代码实践相结合的方式\",{\"1\":{\"1283\":1}}],[\"通过理论讲解与代码实践相结合的方式\",{\"1\":{\"1218\":1}}],[\"通过不同组件\",{\"1\":{\"3192\":1}}],[\"通过不同参数列表实现\",{\"1\":{\"1287\":1}}],[\"通过文本形式的消息进行通信\",{\"1\":{\"3172\":1}}],[\"通过文档注释生成api文档\",{\"1\":{\"2093\":1}}],[\"通过事件驱动实现高效的多路复用io\",{\"1\":{\"3121\":1}}],[\"通过buffer\",{\"1\":{\"3113\":1}}],[\"通过btn2解绑btn1的单击事件\",{\"1\":{\"1451\":1}}],[\"通过上述优化可支持百万级并发连接\",{\"1\":{\"3091\":1}}],[\"通过限流\",{\"1\":{\"3089\":1}}],[\"通过限制对共享资源的访问来避免竞态条件\",{\"1\":{\"637\":1}}],[\"通过回调和事件通知机制\",{\"1\":{\"3089\":1}}],[\"通过实现serializable接口\",{\"1\":{\"3085\":1}}],[\"通过线程池管理线程资源\",{\"1\":{\"3082\":1}}],[\"通过输出流发送响应\",{\"1\":{\"3070\":1}}],[\"通过osi\",{\"1\":{\"3068\":1}}],[\"通过offset\",{\"1\":{\"173\":1}}],[\"通过offset区分不同的slave当前数据传播的差异\",{\"1\":{\"167\":1}}],[\"通过分布式追踪id串联跨服务调用\",{\"1\":{\"3111\":1}}],[\"通过分层设计实现网络通信的模块化\",{\"1\":{\"3058\":1}}],[\"通过分片\",{\"1\":{\"39\":1}}],[\"通过缓存反射对象\",{\"1\":{\"3011\":1}}],[\"通过缓冲区实现数据的批量处理\",{\"1\":{\"2919\":1}}],[\"通过tls协议保护sip信令传输\",{\"1\":{\"3237\":1}}],[\"通过throwable\",{\"1\":{\"2936\":1}}],[\"通过tcp\",{\"1\":{\"125\":1}}],[\"通过内存映射文件减少数据拷贝次数\",{\"1\":{\"2919\":1}}],[\"通过内存屏障或原子操作保证部分操作的有序性\",{\"1\":{\"2543\":1}}],[\"通过内存屏障\",{\"1\":{\"662\":1}}],[\"通过构造函数反射创建实例\",{\"1\":{\"2999\":1}}],[\"通过构造函数的参数注入依赖对象\",{\"1\":{\"322\":1}}],[\"通过构造方法接收多个输入流\",{\"1\":{\"2889\":1}}],[\"通过序列流\",{\"1\":{\"2887\":1}}],[\"通过序列号识别重复数据并丢弃\",{\"1\":{\"1312\":1}}],[\"通过序列号确保数据按序到达\",{\"1\":{\"1312\":1}}],[\"通过抽象类\",{\"1\":{\"2883\":1}}],[\"通过抽象类定义接口\",{\"1\":{\"2859\":1}}],[\"通过指定的字符编码将字符编码为字节\",{\"1\":{\"2877\":1}}],[\"通过指定的字符编码将字节解码为字符\",{\"1\":{\"2877\":1}}],[\"通过使用内存缓冲区减少io操作次数\",{\"1\":{\"2871\":1}}],[\"通过减少实际的io操作次数来提升读写效率\",{\"1\":{\"2863\":1}}],[\"通过减少暂停时间\",{\"1\":{\"777\":1}}],[\"通过在编译时进行类型检查\",{\"1\":{\"3017\":1}}],[\"通过在内存中创建缓冲区来提高io操作的性能\",{\"1\":{\"2863\":1}}],[\"通过在配置文件中使用加密后的字符串\",{\"1\":{\"411\":1}}],[\"通过filterinputstream和filteroutputstream为基础流添加功能\",{\"1\":{\"2847\":1}}],[\"通过final关键字保障数据安全性\",{\"1\":{\"2812\":1}}],[\"通过公共方法暴露访问接口\",{\"1\":{\"2795\":1}}],[\"通过公共方法\",{\"1\":{\"2771\":1}}],[\"通过隐藏内部实现细节\",{\"1\":{\"2771\":1}}],[\"通过面向接口编程\",{\"1\":{\"2754\":1}}],[\"通过多态\",{\"1\":{\"2754\":1}}],[\"通过多态可以很好地实现这一原则\",{\"1\":{\"2746\":1}}],[\"通过多个从节点分担数据读取负载\",{\"1\":{\"162\":1}}],[\"通过数学公式减少计算步骤\",{\"1\":{\"2727\":1}}],[\"通过数组存储元素\",{\"1\":{\"2472\":1}}],[\"通过增加计算时间来减少空间占用\",{\"1\":{\"2716\":1}}],[\"通过增加额外存储空间来降低时间复杂度\",{\"1\":{\"2715\":1}}],[\"通过旋转和变色操作保持树的平衡\",{\"1\":{\"2663\":1}}],[\"通过重写removeeldestentry\",{\"1\":{\"2637\":1}}],[\"通过哈希值快速定位\",{\"1\":{\"2607\":1}}],[\"通过哈希函数将键映射到数组索引\",{\"1\":{\"2413\":1}}],[\"通过哈希函数将元素映射到数组索引\",{\"1\":{\"2376\":1}}],[\"通过比较并交换实现原子操作\",{\"1\":{\"2519\":1}}],[\"通过设置accessorder=true可以直接实现lru缓存功能\",{\"1\":{\"2512\":1}}],[\"通过设置合理的超时时间\",{\"1\":{\"172\":1}}],[\"通过维护头节点和尾节点的引用\",{\"1\":{\"2502\":1}}],[\"通过维护一个volatile\",{\"1\":{\"639\":1}}],[\"通过判断索引位置在前半部分还是后半部分\",{\"1\":{\"2501\":1}}],[\"通过集合创建linkedlist的构造方法\",{\"1\":{\"2493\":1}}],[\"通过集合创建arraylist的构造方法\",{\"1\":{\"2436\":1}}],[\"通过包装器模式\",{\"1\":{\"2456\":1,\"2513\":1}}],[\"通过方法暴露操作\",{\"1\":{\"2446\":1}}],[\"通过自动扩容机制提供灵活的容量管理\",{\"1\":{\"2443\":1}}],[\"通过高位运算确定新位置\",{\"1\":{\"2428\":1}}],[\"通过以下方式保证不可变性\",{\"1\":{\"2415\":1}}],[\"通过以下命令新建\",{\"1\":{\"1426\":1}}],[\"通过enumeration枚举\",{\"1\":{\"2890\":1}}],[\"通过enable注解实现功能模块的按需加载\",{\"1\":{\"421\":1}}],[\"通过equals方法比较新元素与已有元素是否相等\",{\"1\":{\"2393\":1}}],[\"通过计算元素的hashcode值来确定存储位置\",{\"1\":{\"2365\":1}}],[\"通过计算对象的引用数量来判断对象是否可达\",{\"1\":{\"1149\":1}}],[\"通过节点引用连接\",{\"1\":{\"2335\":1}}],[\"通过索引直接访问\",{\"1\":{\"2334\":1}}],[\"通过预分配空间减少频繁扩容开销\",{\"1\":{\"2334\":1}}],[\"通过modcount机制检测并发修改\",{\"1\":{\"2332\":1}}],[\"通过maven打包clean\",{\"1\":{\"1000\":1}}],[\"通过对源码的解读\",{\"1\":{\"2284\":1}}],[\"通过对象\",{\"1\":{\"1260\":1,\"2965\":1}}],[\"通过对象之间的交互来解决问题\",{\"1\":{\"1214\":1,\"1216\":1}}],[\"通过递归方式处理嵌套数组\",{\"1\":{\"2234\":1}}],[\"通过引用数据类型提供灵活的扩展机制\",{\"1\":{\"2103\":1}}],[\"通过注释\",{\"1\":{\"2095\":1}}],[\"通过注释提高代码的可读性\",{\"1\":{\"2093\":1}}],[\"通过注解实现代码自我描述和自我处理\",{\"1\":{\"3168\":1}}],[\"通过注解标记扩展点\",{\"1\":{\"3168\":1}}],[\"通过注解标记不同策略实现\",{\"1\":{\"3168\":1}}],[\"通过注解声明权限需求\",{\"1\":{\"3154\":1}}],[\"通过注解声明意图而非实现细节\",{\"1\":{\"1071\":1,\"3152\":1}}],[\"通过注解处理器在编译期生成代码\",{\"1\":{\"1073\":1,\"3161\":1}}],[\"通过注解为代码添加元数据\",{\"1\":{\"1071\":1}}],[\"通过注解简化事务管理\",{\"1\":{\"443\":1}}],[\"通过注解简化web开发的配置\",{\"1\":{\"432\":1}}],[\"通过注解或xml配置来管理事务\",{\"1\":{\"350\":1}}],[\"通过控制类\",{\"1\":{\"2085\":1,\"2792\":1}}],[\"通过关键字使代码结构清晰\",{\"1\":{\"2083\":1}}],[\"通过错误码可直接定位错误类型和模块\",{\"1\":{\"2051\":1}}],[\"通过技术手段\",{\"1\":{\"2029\":1}}],[\"通过api网关和服务发现实现平滑过渡\",{\"1\":{\"2014\":1}}],[\"通过api版本控制实现兼容\",{\"1\":{\"2013\":1}}],[\"通过领域驱动设计\",{\"1\":{\"2014\":1}}],[\"通过接口和抽象类实现扩展开放\",{\"1\":{\"2005\":1}}],[\"通过接口名直接调用\",{\"1\":{\"542\":1}}],[\"通过xshell软件连接到远程服务器输入rz命令把安装包上传到linux服务器\",{\"1\":{\"1781\":1}}],[\"通过一条指令全部安装\",{\"1\":{\"1779\":1}}],[\"通过源码安装需要提前安装好gcc编译器\",{\"1\":{\"1779\":1}}],[\"通过源码编译agent\",{\"1\":{\"1551\":1,\"1557\":1}}],[\"通过yum安装\",{\"1\":{\"1779\":1}}],[\"通过nginx源码安装\",{\"1\":{\"1779\":1}}],[\"通过nignx访问的站点或目录\",{\"1\":{\"1418\":1}}],[\"通过kubekey安装工具安装\",{\"0\":{\"1676\":1}}],[\"通过decoder捕获远程服务异常并转换为本地异常\",{\"1\":{\"2960\":1}}],[\"通过du\",{\"1\":{\"1667\":1}}],[\"通过docker\",{\"1\":{\"1507\":2}}],[\"通过命令行创建harbor镜像库\",{\"1\":{\"1642\":1}}],[\"通过基础镜像base引用agent目录\",{\"1\":{\"1551\":1,\"1557\":1}}],[\"通过镜像\",{\"1\":{\"1512\":1}}],[\"通过浏览器与服务器进行少量数据交换\",{\"1\":{\"1430\":1,\"1436\":1}}],[\"通过它\",{\"1\":{\"1399\":1}}],[\"通过端口来区分虚拟主机\",{\"1\":{\"1388\":1}}],[\"通过域名来区分虚拟主机\",{\"1\":{\"1388\":1}}],[\"通过滑动窗口机制控制发送速率\",{\"1\":{\"1312\":1}}],[\"通过匿名内部类或反射获取typetoken\",{\"1\":{\"1304\":1}}],[\"通过原始类型绕开泛型检查\",{\"1\":{\"1301\":1}}],[\"通过原子更新实现无锁的线程安全\",{\"1\":{\"681\":1}}],[\"通过泛型类型信息\",{\"1\":{\"1299\":1}}],[\"通过反射解析这些注解\",{\"1\":{\"3141\":1}}],[\"通过反射和动态代理\",{\"1\":{\"3009\":1}}],[\"通过反射调用目标方法\",{\"1\":{\"2994\":1}}],[\"通过反射调用方法\",{\"1\":{\"2970\":1}}],[\"通过反射读取注解等元数据\",{\"1\":{\"2973\":1}}],[\"通过反射可以在不修改原有代码的情况下\",{\"1\":{\"2973\":1}}],[\"通过反射可以使用构造方法创建对象\",{\"1\":{\"2969\":1}}],[\"通过反射访问属性\",{\"1\":{\"2971\":1}}],[\"通过反射创建代理类实例\",{\"1\":{\"2994\":1}}],[\"通过反射创建代理对象\",{\"1\":{\"1267\":1}}],[\"通过反射创建对象\",{\"1\":{\"2969\":1}}],[\"通过反射创建bean对象\",{\"1\":{\"1266\":1}}],[\"通过反射将java对象转换为json字符串\",{\"1\":{\"1266\":1}}],[\"通过反射将查询结果映射到java对象\",{\"1\":{\"1266\":1}}],[\"通过反射执行测试方法\",{\"1\":{\"1266\":1}}],[\"通过反射\",{\"1\":{\"1259\":1,\"1271\":1,\"1273\":1,\"2962\":1,\"2992\":1}}],[\"通过异常机制进行保护\",{\"1\":{\"1252\":1}}],[\"通过异常转换\",{\"1\":{\"1252\":1}}],[\"通过继承inputstream\",{\"1\":{\"2835\":1}}],[\"通过继承abstractlist实现基础功能\",{\"1\":{\"2446\":1}}],[\"通过继承throwable类\",{\"1\":{\"1252\":1}}],[\"通过继承和多态\",{\"1\":{\"1216\":1}}],[\"通过转换流\",{\"1\":{\"1221\":1}}],[\"通过clienttransaction发送请求\",{\"1\":{\"3190\":1}}],[\"通过class对象可以获取类的完整信息\",{\"1\":{\"2968\":1}}],[\"通过class\",{\"1\":{\"1260\":1,\"2965\":1}}],[\"通过char数组指定范围创建\",{\"1\":{\"2291\":1}}],[\"通过char数组创建\",{\"1\":{\"2291\":1}}],[\"通过compare\",{\"1\":{\"2664\":1}}],[\"通过compareto\",{\"1\":{\"2664\":1}}],[\"通过comparator实现\",{\"1\":{\"2582\":1}}],[\"通过concurrenthashmap实现高效缓存\",{\"1\":{\"2041\":1}}],[\"通过collections\",{\"1\":{\"1186\":1}}],[\"通过cas操作实现原子性\",{\"1\":{\"2473\":1}}],[\"通过cas操作避免了传统锁机制的上下文切换和阻塞开销\",{\"1\":{\"679\":1}}],[\"通过cas操作尝试获取锁\",{\"1\":{\"645\":1}}],[\"通过cas\",{\"1\":{\"671\":1}}],[\"通过即时编译等技术提高代码执行效率\",{\"1\":{\"1153\":1}}],[\"通过类继承构建异常体系\",{\"1\":{\"2929\":1}}],[\"通过类型参数化实现\",{\"1\":{\"1287\":1}}],[\"通过类加载器获取\",{\"1\":{\"1260\":1}}],[\"通过类加载机制和字节码验证确保代码安全\",{\"1\":{\"1153\":1}}],[\"通过类名\",{\"1\":{\"1260\":1,\"2965\":1,\"2980\":2}}],[\"通过类名访问静态变量\",{\"1\":{\"1037\":1}}],[\"通过字节码实现一次编写\",{\"1\":{\"1153\":1}}],[\"通过从gc\",{\"1\":{\"1149\":1}}],[\"通过这种方式\",{\"1\":{\"1139\":1}}],[\"通过这些策略\",{\"1\":{\"2960\":1}}],[\"通过这些组合方法\",{\"1\":{\"557\":1}}],[\"通过这些措施\",{\"1\":{\"522\":1}}],[\"通过负载均衡器分发请求\",{\"1\":{\"1112\":1}}],[\"通过插件扩展功能\",{\"1\":{\"943\":1}}],[\"通过版本号精确控制依赖版本\",{\"1\":{\"930\":1}}],[\"通过依赖传递机制减少重复声明\",{\"1\":{\"930\":1}}],[\"通过年龄计数器判断\",{\"1\":{\"708\":1}}],[\"通过硬件指令保证操作的原子性\",{\"1\":{\"673\":1}}],[\"通过编译器和处理器确保字段初始化完成后才能被访问\",{\"1\":{\"662\":1}}],[\"通过操作系统互斥量实现\",{\"1\":{\"645\":1}}],[\"通过复用线程对象减少资源消耗\",{\"1\":{\"628\":1}}],[\"通过复制集\",{\"1\":{\"39\":1}}],[\"通过wait\",{\"1\":{\"618\":1}}],[\"通过共享队列实现线程间数据传递\",{\"1\":{\"612\":1}}],[\"通过调用interrupt\",{\"1\":{\"607\":1}}],[\"通过允许在接口中添加默认方法\",{\"1\":{\"549\":1}}],[\"通过printf\",{\"1\":{\"2905\":1}}],[\"通过protected预留扩展点\",{\"1\":{\"2800\":1}}],[\"通过profiles实现不同环境的配置隔离\",{\"1\":{\"409\":1}}],[\"通过parallelstream\",{\"1\":{\"543\":1}}],[\"通过提供更精确的错误信息\",{\"1\":{\"513\":1}}],[\"通过逐步应用这些特性\",{\"1\":{\"495\":1}}],[\"通过开源jfr等商业特性\",{\"1\":{\"488\":1}}],[\"通过加载各配置类生成bean注入ioc容器中\",{\"1\":{\"463\":1}}],[\"通过将配置信息编码为注解\",{\"1\":{\"3152\":1}}],[\"通过将配置信息与代码分离\",{\"1\":{\"3139\":1}}],[\"通过将类型抽象为参数\",{\"1\":{\"3027\":1}}],[\"通过将数据处理过程抽象为一系列操作\",{\"1\":{\"550\":1}}],[\"通过将全路径类名写入配置文件中\",{\"1\":{\"462\":1}}],[\"通过将批次索引加1再乘以每批的大小来得到的\",{\"1\":{\"288\":1}}],[\"通过参数校验和异常处理提高应用的健壮性\",{\"1\":{\"432\":1}}],[\"通过拦截器和过滤器提供灵活的扩展机制\",{\"1\":{\"432\":1}}],[\"通过initcause\",{\"1\":{\"2937\":1}}],[\"通过info命令可以查看该信息\",{\"1\":{\"171\":1}}],[\"通过info\",{\"1\":{\"167\":1}}],[\"通过id属性值获取div元素\",{\"1\":{\"1449\":2}}],[\"通过id属性值来获取div元素\",{\"1\":{\"1447\":2}}],[\"通过importselector和importbeandefinitionregistrar提供灵活的扩展机制\",{\"1\":{\"421\":1}}],[\"通过默认配置减少开发者的配置工作\",{\"1\":{\"396\":1,\"421\":1}}],[\"通过socket接口实现不同主机间的数据传输\",{\"1\":{\"3055\":1}}],[\"通过string\",{\"1\":{\"2308\":1}}],[\"通过string对象创建\",{\"1\":{\"2291\":1}}],[\"通过stop\",{\"1\":{\"1788\":1}}],[\"通过starter依赖简化测试的配置和使用\",{\"1\":{\"454\":1}}],[\"通过starter依赖简化各种数据访问技术的集成\",{\"1\":{\"443\":1}}],[\"通过selector\",{\"1\":{\"3118\":1}}],[\"通过selector轮询就绪事件\",{\"1\":{\"3079\":1}}],[\"通过selector实现单线程处理多通道\",{\"1\":{\"2919\":1}}],[\"通过selector多路复用实现一个线程处理多个连接\",{\"1\":{\"1328\":1}}],[\"通过set\",{\"1\":{\"2378\":1,\"2395\":1}}],[\"通过setcontextclassloader\",{\"1\":{\"756\":1}}],[\"通过setter方法注入依赖对象\",{\"1\":{\"322\":1}}],[\"通过session\",{\"1\":{\"304\":1}}],[\"通过show\",{\"1\":{\"101\":1,\"109\":1}}],[\"通过查询总次数与查询得到非nil数据总次数计算而来\",{\"1\":{\"193\":1}}],[\"通过算法设计\",{\"1\":{\"185\":1}}],[\"通过unix套接字连接的本地主机\",{\"1\":{\"125\":1}}],[\"通过\",{\"1\":{\"13\":1,\"16\":1,\"130\":3,\"272\":1,\"273\":1,\"276\":1,\"409\":1,\"784\":1,\"811\":1,\"845\":1,\"879\":1,\"913\":1,\"1073\":3,\"1418\":2,\"3111\":1,\"3246\":1}}],[\"点运算符\",{\"1\":{\"2115\":1}}],[\"点我干嘛\",{\"1\":{\"1450\":1,\"1451\":1}}],[\"点我\",{\"1\":{\"1450\":1}}],[\"点击活动\",{\"1\":{\"1655\":1,\"1710\":1}}],[\"点击按钮分页\",{\"0\":{\"1444\":1}}],[\"点击链接保存\",{\"1\":{\"1418\":1}}],[\"点击release后\",{\"1\":{\"1004\":1}}],[\"点击下方的activity即可查看具体的问题或者发送邮件给你了\",{\"1\":{\"1004\":1}}],[\"点数据恢复通常采用rdb方案\",{\"1\":{\"142\":1}}],[\"点\",{\"1\":{\"128\":1}}],[\"许可的mysql服务器使用\",{\"1\":{\"125\":1}}],[\"许多命令支持多种参数组合\",{\"1\":{\"93\":1,\"210\":1}}],[\"残缺信息包\",{\"1\":{\"125\":1}}],[\"命名基本原则\",{\"0\":{\"1994\":1}}],[\"命名规范检查工具\",{\"0\":{\"2002\":1}}],[\"命名规范\",{\"0\":{\"1993\":1},\"1\":{\"1946\":1}}],[\"命名空间namespace\",{\"1\":{\"1688\":1,\"1698\":1,\"1713\":1}}],[\"命名空间\",{\"1\":{\"1634\":1}}],[\"命名指令\",{\"1\":{\"1610\":1}}],[\"命名为\",{\"1\":{\"1548\":1,\"1697\":1}}],[\"命名约定简化配置\",{\"1\":{\"1074\":1}}],[\"命名管道\",{\"1\":{\"125\":1}}],[\"命令序列\",{\"1\":{\"3180\":1}}],[\"命令中如果不加zone信息\",{\"1\":{\"1940\":1}}],[\"命令名\",{\"1\":{\"1882\":1}}],[\"命令名称通常是描述性的英文单词或缩写\",{\"1\":{\"93\":1,\"210\":1}}],[\"命令来完成强制活动用户退出\",{\"1\":{\"1845\":1}}],[\"命令重命名\",{\"0\":{\"1842\":1},\"1\":{\"1835\":1}}],[\"命令提示是否未认证报错\",{\"1\":{\"1355\":1}}],[\"命令行下载远程文件\",{\"0\":{\"1915\":1}}],[\"命令行\",{\"1\":{\"1882\":1}}],[\"命令行导出文件\",{\"0\":{\"1823\":1}}],[\"命令行修改方式示例\",{\"1\":{\"1788\":1}}],[\"命令行参数\",{\"1\":{\"405\":1,\"406\":1}}],[\"命令行设置的密码在服务重启后失效\",{\"1\":{\"219\":1}}],[\"命令数\",{\"1\":{\"193\":1}}],[\"命令传播\",{\"0\":{\"167\":1}}],[\"命令传播阶段出现了断网现象\",{\"1\":{\"167\":1}}],[\"命令传播阶段的部分复制\",{\"1\":{\"167\":1}}],[\"命令传播阶段\",{\"1\":{\"163\":1}}],[\"命令不同步\",{\"1\":{\"125\":1}}],[\"命令\",{\"0\":{\"1020\":1},\"1\":{\"116\":1,\"211\":1,\"264\":2,\"1489\":1,\"1911\":1}}],[\"命令安全\",{\"1\":{\"94\":1}}],[\"命令被设计为尽可能高效地执行\",{\"1\":{\"93\":1,\"210\":1}}],[\"新镜像名\",{\"1\":{\"3246\":1}}],[\"新节点默认为红色\",{\"1\":{\"2656\":1}}],[\"新实现通过arrays\",{\"1\":{\"2296\":1}}],[\"新容量为旧容量的1\",{\"1\":{\"2438\":1}}],[\"新容量\",{\"1\":{\"2272\":1,\"2318\":1,\"2355\":1,\"2684\":1}}],[\"新添加的一块硬盘\",{\"1\":{\"1500\":1}}],[\"新浪\",{\"1\":{\"1376\":1}}],[\"新用户\",{\"1\":{\"1365\":1}}],[\"新客户端连接\",{\"1\":{\"1228\":1,\"1238\":1,\"1314\":1,\"1315\":1,\"3118\":1,\"3120\":1}}],[\"新开发人员可以快速上手\",{\"1\":{\"945\":1}}],[\"新生代和老年代的比例\",{\"1\":{\"1151\":1}}],[\"新生代和老年代比例一般为1\",{\"1\":{\"782\":1}}],[\"新生代大小直接影响minor\",{\"1\":{\"810\":1,\"844\":1,\"878\":1,\"912\":1}}],[\"新生代大小\",{\"1\":{\"792\":1,\"826\":1,\"860\":1,\"894\":1}}],[\"新生代区域小\",{\"1\":{\"776\":1}}],[\"新生代总容量\",{\"1\":{\"774\":1}}],[\"新生代gc前使用容量\",{\"1\":{\"774\":1}}],[\"新生代收集器\",{\"0\":{\"769\":1},\"1\":{\"772\":1}}],[\"新生代垃圾回收\",{\"1\":{\"765\":1}}],[\"新生代与老年代比例\",{\"1\":{\"717\":1,\"792\":1,\"826\":1,\"860\":1,\"894\":1}}],[\"新生代\",{\"1\":{\"713\":1,\"767\":2,\"792\":1,\"826\":1,\"860\":1,\"894\":1}}],[\"新版本号\",{\"1\":{\"676\":2}}],[\"新建一个名为\",{\"1\":{\"3246\":1}}],[\"新建xxl\",{\"0\":{\"1687\":1}}],[\"新建kubeconfig\",{\"0\":{\"1703\":1},\"1\":{\"1653\":1}}],[\"新建镜像仓库凭证\",{\"0\":{\"1702\":1},\"1\":{\"1653\":1}}],[\"新建配置文件\",{\"0\":{\"1517\":1}}],[\"新建\",{\"0\":{\"1426\":1},\"1\":{\"605\":1}}],[\"新功能默认不启用\",{\"1\":{\"570\":1}}],[\"新增支付方式时无需修改现有代码\",{\"1\":{\"2746\":1}}],[\"新增双端队列相关方法\",{\"1\":{\"2491\":1}}],[\"新增of\",{\"1\":{\"2463\":1,\"2491\":1}}],[\"新增stream\",{\"1\":{\"2463\":1}}],[\"新增synchronousqueue等\",{\"1\":{\"2463\":1}}],[\"新增sequencedcollection接口\",{\"1\":{\"1198\":1}}],[\"新增foreachremaining\",{\"1\":{\"2434\":1,\"2491\":1}}],[\"新增removeif\",{\"1\":{\"2434\":1,\"2491\":1}}],[\"新增record集合工厂方法\",{\"1\":{\"1198\":1}}],[\"新增ensurecapacity\",{\"1\":{\"2434\":1}}],[\"新增addall\",{\"1\":{\"2434\":1,\"2463\":1}}],[\"新增api而非修改现有api\",{\"1\":{\"570\":1}}],[\"新增函数\",{\"1\":{\"2428\":1}}],[\"新增特性\",{\"1\":{\"2320\":1}}],[\"新增用户\",{\"1\":{\"1855\":1}}],[\"新增调度任务可用两种方法\",{\"1\":{\"1504\":1}}],[\"新增list\",{\"1\":{\"1198\":1}}],[\"新增不可变集合工厂方法\",{\"1\":{\"1198\":1,\"2520\":1}}],[\"新增master\",{\"1\":{\"186\":1}}],[\"新http客户端相比传统的httpurlconnection具有以下优势\",{\"1\":{\"471\":1}}],[\"新值换旧值\",{\"1\":{\"283\":1}}],[\"新master上任\",{\"1\":{\"182\":1}}],[\"新masterip端口\",{\"1\":{\"182\":1}}],[\"新的哈希表数组\",{\"1\":{\"2601\":1}}],[\"新的镜像名\",{\"1\":{\"1795\":1}}],[\"新的命令行\",{\"1\":{\"1491\":1}}],[\"新的日期时间api具有不可变性\",{\"1\":{\"545\":1}}],[\"新的日期时间api的主要类\",{\"1\":{\"545\":1}}],[\"新的日期时间api\",{\"0\":{\"545\":1}}],[\"新的http客户端在处理异步请求时\",{\"1\":{\"491\":1}}],[\"新的存储需求\",{\"1\":{\"133\":1,\"135\":1}}],[\"新的查询高速缓冲的大小是\",{\"1\":{\"125\":1}}],[\"新分区的范围超过了已重组分区的范围\",{\"1\":{\"125\":1}}],[\"试图用错误的子分区数增加分区\",{\"1\":{\"125\":1}}],[\"试图获取锁定时发现死锁\",{\"1\":{\"125\":1}}],[\"才将数据一次性写入到目标设备或从源设备读取\",{\"1\":{\"2865\":1}}],[\"才将v的值更新为b\",{\"1\":{\"673\":1}}],[\"才由自己加载\",{\"1\":{\"1155\":1}}],[\"才加载该bean\",{\"1\":{\"463\":1}}],[\"才允许使用varchar\",{\"1\":{\"125\":1}}],[\"才能建立起知识体系\",{\"1\":{\"0\":1}}],[\"仅供参考\",{\"1\":{\"3263\":1}}],[\"仅关注会话信令控制\",{\"1\":{\"3192\":1}}],[\"仅提供路由信息\",{\"1\":{\"3185\":1}}],[\"仅转发消息\",{\"1\":{\"3183\":1,\"3212\":1}}],[\"仅搜索当前类声明的方法\",{\"1\":{\"2983\":1}}],[\"仅输入\",{\"1\":{\"2897\":1}}],[\"仅读取行\",{\"1\":{\"2861\":1}}],[\"仅适用于文本文件\",{\"1\":{\"2830\":1}}],[\"仅保证引用不变\",{\"1\":{\"2813\":1}}],[\"仅看参数列表\",{\"1\":{\"2786\":1}}],[\"仅对必要的反射操作设置setaccessible\",{\"1\":{\"2993\":1}}],[\"仅对本类可见\",{\"1\":{\"2765\":1}}],[\"仅对高频复用字符串使用intern\",{\"1\":{\"2256\":1}}],[\"仅包内可见\",{\"1\":{\"2761\":1}}],[\"仅本类可直接访问\",{\"1\":{\"2733\":1}}],[\"仅本类可见\",{\"1\":{\"2733\":1,\"2807\":1}}],[\"仅暴露必要的接口\",{\"1\":{\"2732\":1}}],[\"仅用于触发缓存清除\",{\"1\":{\"3170\":1}}],[\"仅用于跟踪对象回收\",{\"1\":{\"2698\":1}}],[\"仅用于快速查找文件并查询文件内容\",{\"1\":{\"186\":1}}],[\"仅arraylist适用\",{\"1\":{\"2323\":1}}],[\"仅记录引用\",{\"1\":{\"2297\":1}}],[\"仅记录部分数据\",{\"1\":{\"139\":1}}],[\"仅创建一个string对象\",{\"1\":{\"2280\":1}}],[\"仅能有发送出去的网络连接\",{\"1\":{\"1940\":1}}],[\"仅能将range\",{\"1\":{\"125\":1}}],[\"仅仅接收经过选择的连接\",{\"1\":{\"1940\":2}}],[\"仅存在于源码中\",{\"1\":{\"1065\":1}}],[\"仅存储键\",{\"1\":{\"135\":1}}],[\"仅执行一次\",{\"1\":{\"1037\":1}}],[\"仅为演示\",{\"1\":{\"773\":1}}],[\"仅50\",{\"1\":{\"765\":1}}],[\"仅增强错误消息\",{\"1\":{\"514\":1}}],[\"仅改进了消息文本内容\",{\"1\":{\"509\":1}}],[\"仅影响数据变更的指令\",{\"1\":{\"167\":1}}],[\"仅在确实需要抛出异常时才创建异常对象\",{\"1\":{\"2942\":1}}],[\"仅在必要时刷新\",{\"1\":{\"2873\":1}}],[\"仅在必要时使用\",{\"1\":{\"1264\":1}}],[\"仅在当前类内部可见\",{\"1\":{\"2795\":1}}],[\"仅在该代码块执行期间有效\",{\"1\":{\"2767\":1}}],[\"仅在执行期间有效\",{\"1\":{\"2767\":1}}],[\"仅在本包内可见\",{\"1\":{\"2765\":1}}],[\"仅在本包可见\",{\"1\":{\"2765\":1}}],[\"仅在常量池存储引用\",{\"1\":{\"2246\":1}}],[\"仅在特定问题排查时开启\",{\"1\":{\"2070\":1}}],[\"仅在多cpu环境下有意义\",{\"1\":{\"1882\":1}}],[\"仅在实际发生npe时才会处理详细信息\",{\"1\":{\"506\":1}}],[\"仅在portlet应用中有效\",{\"1\":{\"327\":1}}],[\"仅在web应用中有效\",{\"1\":{\"327\":2}}],[\"仅在key分区中允许使用字段列表\",{\"1\":{\"125\":1}}],[\"仅在function中允许return\",{\"1\":{\"125\":1}}],[\"变更频率\",{\"1\":{\"2014\":1}}],[\"变更文件所属用户\",{\"0\":{\"1864\":1},\"1\":{\"1835\":1}}],[\"变位词是指两个字符串包含相同的字符\",{\"1\":{\"1170\":1}}],[\"变为\",{\"1\":{\"125\":1}}],[\"变量定义在过大作用域\",{\"1\":{\"2774\":1,\"2777\":1}}],[\"变量作用域过大\",{\"0\":{\"2774\":1,\"2777\":1}}],[\"变量作用域\",{\"0\":{\"2767\":1}}],[\"变量是java程序中存储数据的基本单元\",{\"1\":{\"2764\":1}}],[\"变量是否使用final修饰等\",{\"1\":{\"1087\":1}}],[\"变量则是程序中存储数据的基本单元\",{\"1\":{\"2756\":1}}],[\"变量和方法的访问权限\",{\"1\":{\"2085\":1}}],[\"变量类型关键字\",{\"0\":{\"2080\":1}}],[\"变量名\",{\"0\":{\"1998\":1},\"1\":{\"2074\":1}}],[\"变量被重新赋值\",{\"1\":{\"552\":1}}],[\"变量3为$\",{\"1\":{\"289\":1}}],[\"变量2为$\",{\"1\":{\"289\":1}}],[\"变量1为$\",{\"1\":{\"289\":1}}],[\"变量集合\",{\"1\":{\"289\":1}}],[\"变量集\",{\"1\":{\"289\":2}}],[\"变量\",{\"0\":{\"2755\":1,\"2764\":1},\"1\":{\"125\":8,\"289\":1,\"1038\":1,\"1138\":1,\"1412\":1,\"2076\":1}}],[\"外置改端口\",{\"1\":{\"1895\":1}}],[\"外网地址\",{\"1\":{\"1524\":1}}],[\"外部互联网无法访问\",{\"1\":{\"3264\":1}}],[\"外部配置注入\",{\"1\":{\"3159\":1}}],[\"外部类的访问控制主要通过包结构管理\",{\"1\":{\"2802\":1}}],[\"外部状态\",{\"1\":{\"2308\":1}}],[\"外部\",{\"1\":{\"1940\":1}}],[\"外部安装\",{\"1\":{\"1682\":1}}],[\"外部网站的管理后台\",{\"1\":{\"1388\":1}}],[\"外部网站\",{\"1\":{\"1388\":1}}],[\"外部资源访问\",{\"1\":{\"1244\":1}}],[\"外部无法直接访问\",{\"1\":{\"1203\":1,\"2299\":1}}],[\"外部的application\",{\"1\":{\"405\":2}}],[\"外部数据源错误\",{\"1\":{\"125\":1}}],[\"外键定义不正确\",{\"1\":{\"125\":1}}],[\"外键约束失败\",{\"1\":{\"125\":4}}],[\"xfs\",{\"1\":{\"3275\":2}}],[\"xftp\",{\"1\":{\"1898\":1}}],[\"x57644qvmbfqpmh78fb4cbdnm8zbbxk9hmjb2bjggl5j2hvwnvj4c9\",{\"1\":{\"3273\":1}}],[\"xor\",{\"1\":{\"2112\":1}}],[\"x11\",{\"1\":{\"1880\":1}}],[\"x表示查找的内容\",{\"1\":{\"1857\":1}}],[\"xvf\",{\"1\":{\"1768\":1,\"1894\":1,\"1897\":1}}],[\"xvjf\",{\"1\":{\"1489\":1}}],[\"x64\",{\"1\":{\"1729\":1,\"3100\":2}}],[\"xuxueli\",{\"1\":{\"1687\":1}}],[\"xuxueli0323\",{\"1\":{\"1686\":1}}],[\"xk\",{\"1\":{\"1649\":2,\"1688\":2}}],[\"xcvf\",{\"1\":{\"1626\":1,\"1715\":1}}],[\"xr\",{\"1\":{\"1586\":3}}],[\"x<\",{\"1\":{\"1564\":2}}],[\"xgw\",{\"1\":{\"1527\":1}}],[\"x可以是8\",{\"1\":{\"1493\":1}}],[\"xzf\",{\"1\":{\"1779\":1}}],[\"xz压缩率更高\",{\"1\":{\"1488\":1}}],[\"xz\",{\"1\":{\"1488\":2,\"1489\":1,\"1884\":1}}],[\"x从0开始计数\",{\"1\":{\"1478\":1}}],[\"xq\",{\"1\":{\"1462\":4}}],[\"x86用amd64\",{\"1\":{\"1800\":1}}],[\"x86\",{\"1\":{\"1373\":1,\"1419\":1,\"1420\":3,\"1475\":1,\"1478\":2,\"1480\":1,\"1481\":6,\"1482\":2,\"1483\":8,\"1484\":3,\"1490\":2,\"1495\":3,\"1496\":2,\"1497\":1,\"1498\":8,\"1499\":8,\"1610\":2,\"1617\":1,\"1623\":1,\"1624\":2,\"1660\":4,\"1671\":2,\"1724\":4,\"1734\":2,\"1741\":2,\"1749\":1,\"1755\":1,\"1756\":1,\"1765\":4,\"1767\":1,\"1768\":1,\"1769\":1,\"1770\":1,\"1778\":1,\"3273\":2}}],[\"xpack\",{\"1\":{\"1352\":2,\"1517\":1,\"1520\":1,\"1523\":3,\"1560\":2}}],[\"xdoclint\",{\"1\":{\"999\":1,\"1005\":1}}],[\"x开头\",{\"1\":{\"789\":1,\"823\":1,\"857\":1,\"891\":1}}],[\"xloggc\",{\"1\":{\"774\":1,\"796\":1,\"805\":1,\"806\":1,\"830\":1,\"839\":1,\"840\":1,\"864\":1,\"873\":1,\"874\":1,\"898\":1,\"907\":1,\"908\":1}}],[\"xls格式\",{\"1\":{\"277\":1}}],[\"xls\",{\"1\":{\"269\":1,\"270\":1,\"278\":1}}],[\"xshell\",{\"1\":{\"1898\":2}}],[\"xss防护\",{\"0\":{\"2067\":1}}],[\"xss<size>\",{\"1\":{\"793\":1,\"827\":1,\"861\":1,\"895\":1}}],[\"xss\",{\"1\":{\"789\":1,\"823\":1,\"857\":1,\"891\":1}}],[\"xss128k\",{\"1\":{\"710\":1}}],[\"xss参数\",{\"1\":{\"701\":1}}],[\"xsd\",{\"1\":{\"584\":2}}],[\"xsi\",{\"1\":{\"584\":1}}],[\"xsi=\",{\"1\":{\"584\":1}}],[\"xxl\",{\"0\":{\"1641\":1,\"1649\":1,\"1686\":1},\"1\":{\"1610\":1,\"1640\":1,\"1641\":1,\"1644\":9,\"1649\":21,\"1678\":1,\"1682\":1,\"1686\":1,\"1687\":3,\"1688\":21}}],[\"xx\",{\"1\":{\"476\":2,\"477\":2,\"480\":1,\"508\":1,\"694\":1,\"702\":1,\"710\":2,\"717\":2,\"718\":1,\"719\":2,\"774\":2,\"780\":1,\"783\":1,\"784\":1,\"790\":4,\"792\":4,\"793\":2,\"795\":5,\"796\":5,\"797\":4,\"798\":3,\"801\":1,\"805\":3,\"806\":7,\"811\":1,\"814\":1,\"824\":4,\"826\":4,\"827\":2,\"829\":5,\"830\":5,\"831\":4,\"832\":3,\"835\":1,\"839\":3,\"840\":7,\"845\":1,\"848\":1,\"858\":4,\"860\":4,\"861\":2,\"863\":5,\"864\":5,\"865\":4,\"866\":3,\"869\":1,\"873\":3,\"874\":7,\"879\":1,\"882\":1,\"892\":4,\"894\":4,\"895\":2,\"897\":5,\"898\":5,\"899\":4,\"900\":3,\"903\":1,\"907\":3,\"908\":7,\"913\":1,\"916\":1,\"1488\":4,\"1558\":3,\"1788\":4}}],[\"xxxxxxxx\",{\"1\":{\"1896\":1}}],[\"xxxxxxxxxx\",{\"1\":{\"1833\":1}}],[\"xxxxxx\",{\"1\":{\"997\":1}}],[\"xxxxx\",{\"1\":{\"997\":1,\"1564\":1,\"1852\":1}}],[\"xxxx\",{\"1\":{\"994\":1,\"1478\":1,\"1676\":1,\"1915\":1}}],[\"xxx\",{\"1\":{\"115\":2,\"289\":1,\"992\":1,\"993\":1,\"994\":1,\"997\":3,\"1353\":1,\"1359\":1,\"1362\":1,\"1364\":1,\"1397\":1,\"1478\":1,\"1528\":1,\"1542\":3,\"1548\":4,\"1677\":1,\"1760\":1,\"1844\":3,\"1854\":1,\"1856\":1,\"1857\":2,\"1862\":2,\"1863\":4,\"1864\":1,\"1865\":6,\"1867\":1,\"1868\":1,\"1870\":1,\"1871\":7,\"1872\":1,\"1894\":1,\"1895\":2,\"1897\":3,\"1898\":3,\"1904\":1}}],[\"xinetd\",{\"1\":{\"1503\":2}}],[\"xiyuan\",{\"1\":{\"267\":1}}],[\"xid已存在\",{\"1\":{\"125\":1}}],[\"xmbasgi9qher\",{\"1\":{\"1527\":1}}],[\"xmn=256m\",{\"1\":{\"1643\":1}}],[\"xmn1g\",{\"1\":{\"806\":1,\"840\":1,\"874\":1,\"908\":1}}],[\"xmn<size>\",{\"1\":{\"792\":1,\"826\":1,\"860\":1,\"894\":1}}],[\"xmn\",{\"1\":{\"789\":1,\"823\":1,\"857\":1,\"891\":1}}],[\"xml配置网络日志\",{\"1\":{\"3102\":1}}],[\"xml<\",{\"1\":{\"2018\":1}}],[\"xml中私仓的地址以及nacos配置\",{\"1\":{\"1645\":1}}],[\"xml中指定的一致\",{\"1\":{\"999\":2}}],[\"xmlhttprequest\",{\"1\":{\"1431\":1,\"1432\":1}}],[\"xmlhttp\",{\"1\":{\"1431\":8}}],[\"xml的缺点\",{\"1\":{\"1086\":1}}],[\"xml的优点\",{\"1\":{\"1086\":1}}],[\"xml和pom文件中的仓库配置\",{\"1\":{\"988\":1}}],[\"xml文件中加入以下配置\",{\"1\":{\"1005\":1}}],[\"xml文件中配置镜像仓库\",{\"1\":{\"981\":1}}],[\"xml文件中配置本地仓库的位置\",{\"1\":{\"973\":1}}],[\"xml文件中的仓库配置\",{\"1\":{\"944\":1}}],[\"xml文件中添加jacoco插件的配置\",{\"1\":{\"456\":1}}],[\"xmlschema\",{\"1\":{\"584\":1}}],[\"xmlns\",{\"1\":{\"584\":1}}],[\"xmlns=\",{\"1\":{\"584\":1}}],[\"xml\",{\"0\":{\"998\":1,\"999\":1,\"1002\":1,\"1003\":1},\"1\":{\"439\":2,\"995\":2,\"1430\":2,\"1432\":1,\"1433\":1,\"1434\":1,\"1435\":1,\"1436\":4,\"1564\":2,\"2018\":1}}],[\"xmx512m\",{\"1\":{\"1558\":1}}],[\"xmx1g\",{\"1\":{\"1512\":1}}],[\"xmx1024m\",{\"1\":{\"694\":1,\"804\":1,\"838\":1,\"872\":1,\"906\":1,\"1558\":1}}],[\"xmx4g\",{\"1\":{\"806\":1,\"840\":1,\"874\":1,\"908\":1}}],[\"xmx<size>\",{\"1\":{\"792\":1,\"826\":1,\"860\":1,\"894\":1}}],[\"xmx\",{\"1\":{\"717\":1,\"789\":1,\"813\":1,\"823\":1,\"847\":1,\"857\":1,\"881\":1,\"891\":1,\"915\":1,\"1638\":1}}],[\"xmx2048m\",{\"1\":{\"1548\":1,\"1697\":1}}],[\"xmx20m\",{\"1\":{\"710\":1}}],[\"xmx2g\",{\"1\":{\"805\":1,\"839\":1,\"873\":1,\"907\":1,\"1661\":1}}],[\"xmx256m\",{\"1\":{\"250\":1,\"1542\":1,\"1698\":1}}],[\"xmx设置为相同值可以避免堆内存动态扩展\",{\"1\":{\"818\":1,\"852\":1,\"886\":1,\"920\":1}}],[\"xmx设置为相同值\",{\"1\":{\"818\":1,\"852\":1,\"886\":1,\"920\":1}}],[\"xmx设置\",{\"1\":{\"700\":1}}],[\"xmx=256m\",{\"1\":{\"234\":1,\"1643\":1}}],[\"xms1g\",{\"1\":{\"1512\":1}}],[\"xms和\",{\"1\":{\"813\":1,\"818\":2,\"847\":1,\"852\":2,\"881\":1,\"886\":2,\"915\":1,\"920\":2}}],[\"xms4g\",{\"1\":{\"806\":1,\"840\":1,\"874\":1,\"908\":1}}],[\"xms<size>\",{\"1\":{\"792\":1,\"826\":1,\"860\":1,\"894\":1}}],[\"xms\",{\"1\":{\"789\":1,\"823\":1,\"857\":1,\"891\":1,\"1638\":1}}],[\"xms与xmx不一致\",{\"1\":{\"813\":1,\"847\":1,\"881\":1,\"915\":1}}],[\"xms与\",{\"1\":{\"717\":1}}],[\"xms2048m\",{\"1\":{\"1548\":1,\"1697\":1}}],[\"xms20m\",{\"1\":{\"710\":1}}],[\"xms2g\",{\"1\":{\"805\":1,\"839\":1,\"873\":1,\"907\":1,\"1661\":1}}],[\"xms256m\",{\"1\":{\"250\":1,\"1542\":1,\"1698\":1}}],[\"xms512m\",{\"1\":{\"694\":1,\"804\":1,\"838\":1,\"872\":1,\"906\":1,\"1558\":2}}],[\"xms=256m\",{\"1\":{\"234\":1,\"1643\":1}}],[\"x\",{\"1\":{\"216\":3,\"292\":2,\"1058\":3,\"1185\":1,\"1191\":1,\"1194\":2,\"1404\":4,\"1405\":2,\"1406\":4,\"1488\":2,\"1493\":1,\"1524\":2,\"1530\":8,\"1532\":2,\"1533\":2,\"1534\":2,\"1535\":6,\"1559\":1,\"1563\":4,\"1564\":4,\"1586\":3,\"1595\":1,\"1601\":2,\"1638\":12,\"1641\":14,\"1643\":4,\"1644\":4,\"1661\":8,\"1666\":2,\"1667\":4,\"1669\":2,\"1698\":2,\"1711\":5,\"1713\":22,\"1857\":1,\"1880\":1,\"1914\":1,\"2323\":1,\"2358\":2,\"2465\":1,\"2495\":11,\"2496\":27,\"2574\":2,\"2575\":11,\"2656\":35,\"2905\":1}}],[\"xargs\",{\"1\":{\"1856\":1,\"1869\":1}}],[\"xa\",{\"1\":{\"125\":2}}],[\"xa100\",{\"1\":{\"125\":1}}],[\"xae08\",{\"1\":{\"125\":1}}],[\"xae03\",{\"1\":{\"125\":1}}],[\"xae09\",{\"1\":{\"125\":1}}],[\"xae07\",{\"1\":{\"125\":1}}],[\"xae05\",{\"1\":{\"125\":1}}],[\"xae04\",{\"1\":{\"125\":1}}],[\"xaer\",{\"1\":{\"125\":12}}],[\"预检查\",{\"1\":{\"2959\":1}}],[\"预检查避免异常\",{\"1\":{\"2942\":1}}],[\"预检查优化\",{\"1\":{\"2942\":1}}],[\"预检查机制\",{\"1\":{\"2942\":1}}],[\"预览流内容后决定处理方式等\",{\"1\":{\"2849\":1}}],[\"预扩容\",{\"1\":{\"2449\":1}}],[\"预指定容量\",{\"1\":{\"2355\":1}}],[\"预估元素数量时指定初始容量\",{\"1\":{\"2423\":1}}],[\"预估容量\",{\"1\":{\"2344\":1,\"2449\":1}}],[\"预估字符串长度并设置初始容量\",{\"1\":{\"2278\":1}}],[\"预分配与扩容\",{\"1\":{\"2334\":1}}],[\"预留一定区间给新增业务模块\",{\"1\":{\"2051\":1}}],[\"预期存储1000个元素\",{\"1\":{\"2604\":1}}],[\"预期结果\",{\"1\":{\"2522\":1}}],[\"预期元素数\",{\"1\":{\"2423\":1}}],[\"预期大小\",{\"1\":{\"2328\":1}}],[\"预期\",{\"1\":{\"2269\":1}}],[\"预期的返回数据的类型\",{\"1\":{\"1433\":1,\"1434\":1,\"1435\":1,\"1436\":2}}],[\"预期原值\",{\"1\":{\"673\":1}}],[\"预期为\",{\"1\":{\"125\":1}}],[\"预先设定\",{\"1\":{\"191\":1}}],[\"预处理语句不含元数据\",{\"1\":{\"125\":1}}],[\"预处理语句包含引用了相同语句的存储子程序调用\",{\"1\":{\"125\":1}}],[\"预处理语句包含过多的占位符\",{\"1\":{\"125\":1}}],[\"尚不能用不同的组处理过程\",{\"1\":{\"125\":1}}],[\"尚不支持该命令\",{\"1\":{\"125\":1}}],[\"值2\",{\"1\":{\"3180\":1}}],[\"值1\",{\"1\":{\"3180\":1}}],[\"值传递模型避免了指针操作风险\",{\"1\":{\"2790\":1}}],[\"值传递\",{\"1\":{\"2785\":1}}],[\"值也可能导致内存泄漏\",{\"1\":{\"2693\":1}}],[\"值的内存泄漏\",{\"0\":{\"2693\":1}}],[\"值类型\",{\"1\":{\"2632\":1}}],[\"值大于10的元素\",{\"1\":{\"2408\":1}}],[\"值得注意的是\",{\"1\":{\"1884\":1}}],[\"值含义取决于调度类型\",{\"1\":{\"1687\":1}}],[\"值越小\",{\"1\":{\"1368\":2}}],[\"值为空\",{\"1\":{\"474\":2}}],[\"值\",{\"1\":{\"125\":1,\"2099\":1,\"2400\":1,\"2512\":2,\"2600\":1,\"2655\":1,\"2680\":1,\"2683\":1}}],[\"调试工具\",{\"1\":{\"2975\":1}}],[\"调试工具等特殊场景\",{\"1\":{\"1271\":1}}],[\"调试场景\",{\"1\":{\"2227\":1}}],[\"调度\",{\"1\":{\"1687\":4}}],[\"调度状态\",{\"1\":{\"1687\":1}}],[\"调度过期策略\",{\"1\":{\"1687\":1}}],[\"调度配置\",{\"1\":{\"1687\":1}}],[\"调度类型\",{\"1\":{\"1687\":1}}],[\"调大tcp缓冲区\",{\"1\":{\"1347\":1}}],[\"调整副本数\",{\"1\":{\"3244\":1}}],[\"调整超时时间\",{\"1\":{\"3228\":1}}],[\"调整超出范围的值\",{\"1\":{\"125\":1}}],[\"调整带宽等\",{\"1\":{\"3175\":1}}],[\"调整后的哈希表\",{\"1\":{\"2684\":1}}],[\"调整哈希表大小\",{\"1\":{\"2601\":1,\"2684\":1}}],[\"调整元素\",{\"1\":{\"2575\":1}}],[\"调整\",{\"1\":{\"2472\":2}}],[\"调整tcp连接超时参数\",{\"1\":{\"1347\":1}}],[\"调整方法签名\",{\"1\":{\"1290\":1}}],[\"调整相应的边界\",{\"1\":{\"1162\":1}}],[\"调整堆大小\",{\"1\":{\"1151\":1}}],[\"调用clear\",{\"1\":{\"3116\":1}}],[\"调用class\",{\"1\":{\"2980\":2}}],[\"调用flip\",{\"1\":{\"3116\":1}}],[\"调用flush\",{\"1\":{\"2904\":1}}],[\"调用带注解的方法\",{\"1\":{\"3002\":1}}],[\"调用带返回值的方法\",{\"1\":{\"2970\":1}}],[\"调用次数超过阈值\",{\"1\":{\"2987\":1}}],[\"调用methodaccessor实现\",{\"1\":{\"2987\":1}}],[\"调用了静态方法\",{\"1\":{\"2970\":1}}],[\"调用了私有方法\",{\"1\":{\"2970\":1}}],[\"调用静态方法\",{\"1\":{\"2970\":1}}],[\"调用公有方法后\",{\"1\":{\"2970\":1}}],[\"调用公有方法\",{\"1\":{\"2970\":1}}],[\"调用支付服务\",{\"1\":{\"2955\":1}}],[\"调用println\",{\"1\":{\"2901\":1}}],[\"调用相同方法\",{\"1\":{\"2740\":1}}],[\"调用父类protected方法\",{\"1\":{\"2797\":1}}],[\"调用父类构造方法\",{\"1\":{\"2738\":1}}],[\"调用父类方法\",{\"1\":{\"2077\":1,\"2738\":1}}],[\"调用get\",{\"1\":{\"2688\":1}}],[\"调用arraylist的remove方法\",{\"1\":{\"2441\":1}}],[\"调用\",{\"0\":{\"2280\":1}}],[\"调用查询方法\",{\"1\":{\"1444\":3}}],[\"调用查询数据的方法\",{\"1\":{\"1444\":1}}],[\"调用查询数据的函数\",{\"1\":{\"1444\":1}}],[\"调用业务层的方法\",{\"1\":{\"1443\":1,\"1444\":1}}],[\"调用业务层的模糊查询方法得到数据\",{\"1\":{\"1440\":1}}],[\"调用业务层的模糊查询方法\",{\"1\":{\"1440\":1}}],[\"调用者运行\",{\"1\":{\"3225\":1}}],[\"调用者负责适当处理异常\",{\"1\":{\"2958\":1}}],[\"调用者负责处理异常\",{\"1\":{\"2940\":1}}],[\"调用者不会立即得到结果\",{\"1\":{\"1319\":1}}],[\"调用者主动等待结果返回\",{\"1\":{\"1319\":1}}],[\"调用不会阻塞当前线程\",{\"1\":{\"1318\":1}}],[\"调用结果返回前\",{\"1\":{\"1318\":1}}],[\"调用结束\",{\"1\":{\"1068\":2}}],[\"调用时可能静默失败\",{\"1\":{\"1303\":1}}],[\"调用私有方法成功\",{\"1\":{\"2989\":1}}],[\"调用私有方法\",{\"1\":{\"2970\":1}}],[\"调用私有方法concat\",{\"1\":{\"1270\":1}}],[\"调用私有方法add\",{\"1\":{\"1270\":1}}],[\"调用目标方法\",{\"1\":{\"1267\":1}}],[\"调用select\",{\"1\":{\"3118\":1}}],[\"调用selector的select\",{\"1\":{\"1228\":1}}],[\"调用size\",{\"1\":{\"2688\":1}}],[\"调用start\",{\"1\":{\"615\":1}}],[\"调用方处理\",{\"1\":{\"2054\":1}}],[\"调用方法完成转换\",{\"1\":{\"1438\":1}}],[\"调用方法\",{\"0\":{\"2970\":1},\"1\":{\"1145\":1,\"1263\":1,\"2974\":1,\"3010\":1}}],[\"调用方代码\",{\"1\":{\"521\":1}}],[\"调用异常\",{\"1\":{\"1068\":1}}],[\"调用开始\",{\"1\":{\"1068\":2}}],[\"调用defineclass方法将字节数组转换为class对象\",{\"1\":{\"746\":1}}],[\"调用类的静态方法\",{\"1\":{\"743\":1}}],[\"调用接口静态方法\",{\"1\":{\"542\":1}}],[\"调用制作炸鸡的步骤方法\",{\"1\":{\"291\":1}}],[\"调用exchange方法\",{\"1\":{\"285\":1}}],[\"调用取消\",{\"1\":{\"125\":1}}],[\"调用程序缺少使用它们的权限\",{\"1\":{\"125\":1}}],[\"此区域内可公开访问\",{\"1\":{\"1940\":1}}],[\"此过滤能满足绝大部分的日志记录\",{\"1\":{\"1738\":1}}],[\"此处使用mock框架模拟resultset\",{\"1\":{\"3000\":1}}],[\"此处启动并加载\",{\"1\":{\"1692\":1}}],[\"此处先配置logstash直接采集本地数据发送至es\",{\"1\":{\"1524\":1}}],[\"此处建议给容器设置固定ip\",{\"1\":{\"1512\":1}}],[\"此处以删除\",{\"1\":{\"1499\":1}}],[\"此处有两种方法\",{\"1\":{\"1356\":1}}],[\"此处简化处理\",{\"1\":{\"1095\":1}}],[\"此处配置的名称要和maven配置文件对应的serverid一致\",{\"1\":{\"999\":1}}],[\"此id必须与setting\",{\"1\":{\"999\":2}}],[\"此外\",{\"1\":{\"317\":1,\"373\":1,\"2085\":1,\"2138\":1}}],[\"此方法直接在迭代过程中移除符合条件的条目\",{\"1\":{\"283\":1}}],[\"此周期内请求访问过期的数据\",{\"1\":{\"190\":1}}],[\"此类命令同样需要记录\",{\"1\":{\"140\":1}}],[\"此时可以关闭分析器\",{\"1\":{\"1739\":1}}],[\"此时使用pi会导致编译错误\",{\"1\":{\"1052\":1}}],[\"此时通过线程上下文类加载器实现\",{\"1\":{\"756\":1}}],[\"此时从数据库中查找数据然后将数据再存入缓存\",{\"1\":{\"189\":1}}],[\"此时需要决定更换master\",{\"1\":{\"182\":1}}],[\"此时需要让主从数据同步到一致的状态\",{\"1\":{\"167\":1}}],[\"此时应该怎么办\",{\"1\":{\"176\":1}}],[\"此时我们可以想一下\",{\"1\":{\"138\":1}}],[\"此时\",{\"1\":{\"125\":1}}],[\"此文字有脚注^first\",{\"1\":{\"18\":1}}],[\"子集生成\",{\"1\":{\"2702\":1}}],[\"子集视图\",{\"1\":{\"2661\":1}}],[\"子列表\",{\"1\":{\"2324\":1}}],[\"子列表操作会抛出concurrentmodificationexception\",{\"1\":{\"1194\":1}}],[\"子串位置\",{\"1\":{\"2195\":1}}],[\"子任务id\",{\"1\":{\"1687\":1}}],[\"子选择器\",{\"1\":{\"1456\":1}}],[\"子pom\",{\"1\":{\"963\":1}}],[\"子类及同包可见\",{\"1\":{\"2807\":1}}],[\"子类只能访问自己继承的protected成员\",{\"1\":{\"2797\":1}}],[\"子类将无法确定应该继承哪个父类的方法\",{\"1\":{\"2753\":1}}],[\"子类对象可以赋值给父类引用\",{\"1\":{\"2740\":1}}],[\"子类可以重写父类的方法\",{\"1\":{\"2737\":1}}],[\"子类可以替换父类\",{\"1\":{\"1210\":1}}],[\"子类特有属性\",{\"1\":{\"2736\":1}}],[\"子类特有方法\",{\"1\":{\"1204\":1,\"2736\":1}}],[\"子类继承父类\",{\"1\":{\"2736\":1}}],[\"子类必须能替换父类且不影响功能正确性\",{\"1\":{\"2005\":1}}],[\"子类实现抽象类的抽象方法\",{\"1\":{\"1216\":1}}],[\"子类实现添加到接口集合中\",{\"1\":{\"293\":1}}],[\"子类不应该修改父类的行为\",{\"1\":{\"1215\":1}}],[\"子类重写父类的方法\",{\"1\":{\"1205\":1,\"1216\":1}}],[\"子类\",{\"1\":{\"1204\":1,\"1288\":1,\"2735\":1,\"2794\":1,\"2797\":1}}],[\"子类加载器才会尝试自己加载\",{\"1\":{\"742\":1}}],[\"子类具体实现逻辑\",{\"1\":{\"292\":1}}],[\"子类具体实现\",{\"1\":{\"291\":1}}],[\"子进程开始执行之后\",{\"1\":{\"138\":1}}],[\"子分区\",{\"1\":{\"125\":1}}],[\"子分区只能是哈希分区\",{\"1\":{\"125\":1}}],[\"子程序\",{\"1\":{\"125\":1}}],[\"子句\",{\"1\":{\"125\":1}}],[\"子查询返回1行以上\",{\"1\":{\"125\":1}}],[\"时转换\",{\"1\":{\"2607\":1}}],[\"时转为红黑树\",{\"1\":{\"2527\":1}}],[\"时填写的域名\",{\"1\":{\"1005\":1}}],[\"时使用lock\",{\"1\":{\"649\":1}}],[\"时生成的伪代码逻辑\",{\"1\":{\"504\":1}}],[\"时会抛出npe\",{\"1\":{\"500\":1}}],[\"时才会验证\",{\"1\":{\"306\":1}}],[\"时间戳和请求id等信息\",{\"1\":{\"2960\":1}}],[\"时间换空间\",{\"0\":{\"2716\":1},\"1\":{\"2716\":1}}],[\"时间复杂度为各层循环次数的乘积\",{\"1\":{\"2726\":1}}],[\"时间复杂度为o\",{\"1\":{\"2155\":2,\"2505\":1,\"2636\":1}}],[\"时间复杂度是衡量算法执行时间随输入规模增长的变化趋势\",{\"1\":{\"2701\":1}}],[\"时间复杂度定义与表示法\",{\"0\":{\"2701\":1}}],[\"时间复杂度的get和put操作\",{\"1\":{\"2634\":1}}],[\"时间复杂度的查找\",{\"1\":{\"2512\":1}}],[\"时间复杂度且实现简单\",{\"1\":{\"2484\":1}}],[\"时间复杂度分析有助于选择合适的数据结构和算法\",{\"1\":{\"2717\":1}}],[\"时间复杂度分析\",{\"1\":{\"2455\":1}}],[\"时间复杂度\",{\"0\":{\"2699\":1},\"1\":{\"2294\":1,\"2348\":1,\"2357\":2,\"2489\":2,\"2511\":2,\"2512\":2,\"2666\":1,\"2672\":1,\"2707\":1,\"2708\":1,\"2709\":1,\"2710\":1,\"2711\":2,\"2715\":1,\"2716\":1,\"2727\":1}}],[\"时间复杂度o\",{\"1\":{\"1161\":1,\"1164\":1,\"1166\":1,\"1170\":1,\"2334\":1,\"2505\":2}}],[\"时间同步命令\",{\"1\":{\"1907\":1}}],[\"时间的切换\",{\"0\":{\"1452\":1}}],[\"时间的绑定和解绑\",{\"0\":{\"1451\":1}}],[\"时间段\",{\"1\":{\"545\":2}}],[\"时间\",{\"1\":{\"545\":1,\"1175\":1,\"1687\":3}}],[\"时间到期\",{\"1\":{\"306\":1}}],[\"时间短\",{\"1\":{\"160\":1}}],[\"时效性数据的存储结构\",{\"0\":{\"148\":1}}],[\"时\",{\"1\":{\"125\":2,\"490\":1,\"545\":1,\"1190\":1,\"1504\":1,\"2608\":1,\"2610\":1,\"2974\":1}}],[\"时出现意外eof\",{\"1\":{\"125\":1}}],[\"时出错\",{\"1\":{\"125\":6}}],[\"句柄声明后面的光标声明\",{\"1\":{\"125\":1}}],[\"光标移至行尾\",{\"1\":{\"1857\":1}}],[\"光标移到行首\",{\"1\":{\"1857\":1}}],[\"光标或句柄声明后面的变量或条件声明\",{\"1\":{\"125\":1}}],[\"光标未打开\",{\"1\":{\"125\":1}}],[\"光标已打开\",{\"1\":{\"125\":1}}],[\"光标select不得有into\",{\"1\":{\"125\":1}}],[\"光标语句必须是select\",{\"1\":{\"125\":1}}],[\"参与主节点primary的选举\",{\"1\":{\"1764\":1}}],[\"参考abstractstringbuilder\",{\"1\":{\"2282\":1}}],[\"参考表数据\",{\"1\":{\"1827\":1}}],[\"参考表\",{\"1\":{\"1827\":4}}],[\"参考数据\",{\"1\":{\"1827\":1}}],[\"参考\",{\"1\":{\"1635\":1,\"1638\":1,\"1882\":1}}],[\"参考答案\",{\"1\":{\"1086\":1,\"1087\":1,\"1238\":2,\"3198\":1,\"3199\":1,\"3227\":1,\"3228\":1}}],[\"参考文档地址\",{\"1\":{\"995\":1}}],[\"参看sentinel\",{\"1\":{\"178\":1}}],[\"参量数目不正确\",{\"1\":{\"125\":1}}],[\"参数化类型\",{\"1\":{\"3027\":1}}],[\"参数表示在标记位置失效前可读取的最大字节数\",{\"1\":{\"2849\":1}}],[\"参数传递机制\",{\"0\":{\"2785\":1},\"1\":{\"2782\":1}}],[\"参数则是方法与外界交互的数据载体\",{\"1\":{\"2782\":1}}],[\"参数个数不同\",{\"1\":{\"2741\":1,\"2786\":1}}],[\"参数类型不同\",{\"1\":{\"2741\":1,\"2786\":1}}],[\"参数类型\",{\"1\":{\"2741\":1}}],[\"参数列表和方法体组成\",{\"1\":{\"2784\":1}}],[\"参数列表\",{\"1\":{\"2752\":1}}],[\"参数列表不同\",{\"1\":{\"2752\":1}}],[\"参数列表与父类不一致\",{\"1\":{\"2737\":1}}],[\"参数列表必须与父类一致\",{\"1\":{\"2737\":1}}],[\"参数验证失败\",{\"1\":{\"2050\":1,\"2051\":1}}],[\"参数名称\",{\"1\":{\"1946\":1}}],[\"参数说明\",{\"1\":{\"1578\":1,\"1590\":1,\"1595\":1,\"2035\":1}}],[\"参数超过最大值\",{\"1\":{\"1069\":1}}],[\"参数不同\",{\"1\":{\"1205\":1,\"1216\":1}}],[\"参数不能为空\",{\"1\":{\"1069\":1}}],[\"参数不正确\",{\"1\":{\"125\":1}}],[\"参数和返回值\",{\"1\":{\"1068\":1}}],[\"参数设计的权衡原则\",{\"0\":{\"809\":1,\"843\":1,\"877\":1,\"911\":1}}],[\"参数校验\",{\"0\":{\"428\":1},\"1\":{\"425\":1,\"2054\":1}}],[\"参数map或者bean对象\",{\"1\":{\"279\":1}}],[\"参数明确\",{\"1\":{\"278\":1}}],[\"参数自动识别数据类型生成对应格式\",{\"1\":{\"276\":1}}],[\"参数支持自定义sheet配置\",{\"1\":{\"273\":1}}],[\"参数current\",{\"1\":{\"153\":1}}],[\"参数\",{\"0\":{\"2781\":1},\"1\":{\"125\":2,\"293\":1,\"1068\":1,\"1501\":1,\"1876\":1,\"1945\":1,\"2095\":2,\"3023\":1,\"3024\":1,\"3025\":1}}],[\"参数计数不正确\",{\"1\":{\"125\":1}}],[\"有状态代理\",{\"1\":{\"3183\":1,\"3212\":1}}],[\"有状态服务不能对外暴露端口\",{\"1\":{\"1692\":1}}],[\"有限制类型参数\",{\"1\":{\"3034\":1}}],[\"有限状态集合\",{\"1\":{\"2824\":1}}],[\"有时过度使用受检异常会导致代码臃肿\",{\"1\":{\"2931\":1}}],[\"有时开发者会用空catch块简单规避\",{\"1\":{\"1254\":1}}],[\"有参构造\",{\"1\":{\"2969\":1}}],[\"有参构造创建\",{\"1\":{\"2969\":1}}],[\"有参构造方法\",{\"1\":{\"2734\":1}}],[\"有参有返回值方法\",{\"1\":{\"2784\":1}}],[\"有一个\",{\"1\":{\"2748\":1}}],[\"有界缓冲区\",{\"1\":{\"2518\":2}}],[\"有界\",{\"1\":{\"2461\":1}}],[\"有助于减少内存碎片\",{\"1\":{\"2455\":1}}],[\"有助于区分命令和参数\",{\"1\":{\"212\":1}}],[\"有额外开销\",{\"1\":{\"2394\":1}}],[\"有包装开销\",{\"1\":{\"2358\":1}}],[\"有包删除包\",{\"1\":{\"1778\":1}}],[\"有同步\",{\"1\":{\"2310\":1}}],[\"有意义\",{\"1\":{\"1994\":1}}],[\"有关受支持的\",{\"1\":{\"1635\":1}}],[\"有关布隆过滤器的命中问题对当前状况可以忽略\",{\"1\":{\"192\":1}}],[\"有的harbor的配置文件叫harbor\",{\"1\":{\"1627\":1}}],[\"有的不叫这个\",{\"1\":{\"1362\":1}}],[\"有错误看常见错误\",{\"1\":{\"1583\":1}}],[\"有网的环境下把openjdk打包成包含fontconfig和字体\",{\"1\":{\"1557\":1}}],[\"有两种修改方法\",{\"1\":{\"1788\":1}}],[\"有两种方法\",{\"1\":{\"1418\":1}}],[\"有两个端口暴露\",{\"1\":{\"1538\":1}}],[\"有安全隐患\",{\"1\":{\"1414\":1}}],[\"有其他的请求的话我nginx就漏掉不接受你的请求\",{\"1\":{\"1396\":1}}],[\"有序并发映射\",{\"1\":{\"2518\":1}}],[\"有序\",{\"1\":{\"2400\":1}}],[\"有序且线程安全\",{\"1\":{\"2373\":1,\"2389\":1}}],[\"有序性需求\",{\"1\":{\"2542\":1}}],[\"有序性\",{\"1\":{\"2314\":1,\"2363\":1,\"2400\":1,\"2461\":1,\"2663\":1,\"2666\":1}}],[\"有序到达\",{\"1\":{\"1312\":1}}],[\"有序可重复\",{\"1\":{\"1174\":1}}],[\"有序集合命令\",{\"0\":{\"204\":1}}],[\"有序集合\",{\"1\":{\"131\":1}}],[\"有报错则根据错误信息解决错误\",{\"1\":{\"999\":1}}],[\"有哪些应用场景\",{\"1\":{\"3130\":1}}],[\"有哪些防御措施\",{\"1\":{\"3011\":1}}],[\"有哪些转换策略\",{\"1\":{\"2182\":1}}],[\"有哪些获取方式\",{\"0\":{\"1260\":1}}],[\"有哪些优势和不足\",{\"0\":{\"494\":1}}],[\"有哪些注意事项\",{\"1\":{\"54\":1}}],[\"有类\",{\"1\":{\"459\":1}}],[\"有这个类或者是他的字节码文件\",{\"1\":{\"459\":1}}],[\"有什么区别\",{\"1\":{\"317\":1,\"703\":1,\"2897\":1}}],[\"有效期30天\",{\"1\":{\"306\":1}}],[\"有效使用\",{\"1\":{\"305\":1}}],[\"有效的复制到slave中\",{\"1\":{\"161\":1}}],[\"有人还会说\",{\"1\":{\"304\":1}}],[\"有人会说\",{\"1\":{\"304\":1}}],[\"有key则执行value中的操作\",{\"1\":{\"283\":1}}],[\"有值则返回\",{\"1\":{\"283\":1}}],[\"有可能出现各版本服务之间数据格式无法兼容现象\",{\"1\":{\"138\":1}}],[\"有可能会造成长时间阻塞\",{\"1\":{\"138\":1}}],[\"有没有遇到过写错了ctrl+z撤销\",{\"1\":{\"137\":1}}],[\"有主题和消费组的概念\",{\"1\":{\"130\":1}}],[\"有必要定义所有的\",{\"1\":{\"125\":1}}],[\"有1个采用旧格式的密码\",{\"1\":{\"125\":1}}],[\"随业务增长逐步拆分为微服务\",{\"1\":{\"2014\":1}}],[\"随着时间的推移\",{\"1\":{\"312\":1}}],[\"随着命令不断写入aof\",{\"1\":{\"140\":1}}],[\"随机访问时考虑使用nio的channel和buffer\",{\"1\":{\"2873\":1}}],[\"随机访问时优势不大\",{\"1\":{\"2872\":1}}],[\"随机访问时间复杂度为o\",{\"1\":{\"1168\":1}}],[\"随机访问性能略低于treemap\",{\"1\":{\"2672\":1}}],[\"随机访问性能更好\",{\"1\":{\"2564\":1}}],[\"随机访问性能问题\",{\"0\":{\"2348\":1,\"2505\":1}}],[\"随机访问o\",{\"1\":{\"2505\":1}}],[\"随机访问效率低\",{\"1\":{\"2489\":1}}],[\"随机访问效率高\",{\"1\":{\"2140\":1,\"2155\":1}}],[\"随机访问优化\",{\"1\":{\"2334\":1}}],[\"随机访问\",{\"1\":{\"2316\":1,\"2327\":2,\"2354\":1,\"2503\":1,\"2511\":1}}],[\"随机移除并返回集合中的一个元素\",{\"1\":{\"203\":1}}],[\"随机获取集合中的一个元素\",{\"1\":{\"203\":1}}],[\"随机抽查\",{\"1\":{\"153\":1,\"154\":1}}],[\"随机挑选w个key检测\",{\"1\":{\"153\":1}}],[\"随机表达式\",{\"1\":{\"125\":1}}],[\"随后的客户端请求所携带的token都会被服务端判定失效\",{\"1\":{\"306\":1}}],[\"随后对该value对应的值进行操作\",{\"1\":{\"283\":1}}],[\"随后执行value中的操作\",{\"1\":{\"283\":1}}],[\"随后\",{\"1\":{\"125\":1}}],[\"随便提起来一些知识点也都能说上两嘴\",{\"1\":{\"0\":1}}],[\"截取子串\",{\"1\":{\"1041\":1,\"2196\":1}}],[\"截取列表\",{\"1\":{\"202\":1}}],[\"截短了不正确的\",{\"1\":{\"125\":1}}],[\"截短数据\",{\"1\":{\"125\":1}}],[\"截去\",{\"1\":{\"125\":1}}],[\"输出流已恢复正常\",{\"1\":{\"2909\":1}}],[\"输出流在关闭前应调用flush\",{\"1\":{\"2848\":1}}],[\"输出包含\",{\"1\":{\"2908\":1}}],[\"输出包含换行符的字符串不会触发自动刷新\",{\"1\":{\"2904\":1}}],[\"输出各种数据类型\",{\"1\":{\"2902\":1,\"2903\":1}}],[\"输出缓冲流必须在操作完成后刷新或关闭\",{\"1\":{\"2872\":1}}],[\"输出缓冲区\",{\"1\":{\"172\":1}}],[\"输出缓冲区内无足够空间\",{\"1\":{\"125\":1}}],[\"输出字符流在关闭前会自动刷新\",{\"1\":{\"2860\":1}}],[\"输出矩形的面积和周长\",{\"1\":{\"2742\":1}}],[\"输出圆形的面积和周长\",{\"1\":{\"2742\":1}}],[\"输出将按字符串长度排序\",{\"1\":{\"2660\":1}}],[\"输出a\",{\"1\":{\"2537\":1}}],[\"输出结果\",{\"1\":{\"2409\":1,\"2522\":1,\"2577\":1,\"2578\":1,\"3000\":1}}],[\"输出类似\",{\"1\":{\"2230\":1}}],[\"输出0\",{\"1\":{\"2180\":1}}],[\"输出6\",{\"1\":{\"2169\":1}}],[\"输出1\",{\"1\":{\"2169\":1}}],[\"输出10\",{\"1\":{\"1058\":1,\"2146\":1}}],[\"输出100000\",{\"1\":{\"677\":1}}],[\"输出30\",{\"1\":{\"2146\":1}}],[\"输出变量的值\",{\"1\":{\"2089\":1}}],[\"输出html内容时必须进行转义\",{\"1\":{\"2067\":1}}],[\"输出每个ip的连接数\",{\"1\":{\"1881\":1}}],[\"输出上传路径\",{\"1\":{\"1727\":1}}],[\"输出至es\",{\"1\":{\"1535\":1}}],[\"输出顺序\",{\"1\":{\"1246\":1,\"2660\":1}}],[\"输出2000\",{\"1\":{\"675\":1}}],[\"输出\",{\"1\":{\"575\":1,\"1058\":1,\"2147\":1,\"2149\":1,\"2150\":1,\"2151\":2,\"2159\":1,\"2170\":1,\"2191\":1,\"2212\":1,\"2213\":1,\"2214\":1,\"2292\":1,\"2480\":1,\"2740\":3,\"2785\":2,\"2819\":3,\"2999\":1,\"3010\":1,\"3023\":2,\"3024\":2,\"3025\":2,\"3035\":1,\"3047\":2}}],[\"输入输出配对使用\",{\"1\":{\"2897\":1}}],[\"输入数组\",{\"1\":{\"2708\":1,\"2715\":1}}],[\"输入数据已损坏\",{\"1\":{\"125\":1}}],[\"输入验证和过滤\",{\"1\":{\"3010\":1}}],[\"输入验证\",{\"0\":{\"2065\":1},\"1\":{\"2993\":1,\"3011\":1}}],[\"输入下面命令启动redis\",{\"1\":{\"1786\":1}}],[\"输入以下命令\",{\"1\":{\"1785\":1}}],[\"输入以下命令解压到当前目录\",{\"1\":{\"1782\":1}}],[\"输入命令make执行编译命令\",{\"1\":{\"1784\":1}}],[\"输入wget\",{\"1\":{\"1781\":1}}],[\"输入exit\",{\"1\":{\"1780\":1}}],[\"输入elasticsearch的密码\",{\"1\":{\"1358\":1}}],[\"输入elasticsearch用户名\",{\"1\":{\"1358\":1}}],[\"输入密码\",{\"1\":{\"1773\":1}}],[\"输入unzip和centos搜索\",{\"1\":{\"1636\":1}}],[\"输入zip和centos搜索\",{\"1\":{\"1636\":1}}],[\"输入rsync\",{\"1\":{\"1501\":1}}],[\"输入\",{\"1\":{\"1402\":1,\"1416\":1,\"1586\":1}}],[\"输入字符串\",{\"1\":{\"1164\":3,\"1165\":1,\"1166\":1,\"2554\":1}}],[\"输入两次\",{\"1\":{\"997\":1}}],[\"输入原先的密码\",{\"1\":{\"121\":1}}],[\"帮助gc\",{\"1\":{\"2684\":1}}],[\"帮助gc回收value\",{\"1\":{\"2681\":1,\"2684\":1}}],[\"帮助gc回收\",{\"1\":{\"2440\":3,\"2445\":1,\"2496\":4,\"2497\":2}}],[\"帮助更新尾节点\",{\"1\":{\"2485\":2}}],[\"帮助用户快速掌握api的使用方法\",{\"1\":{\"1945\":1}}],[\"帮助读者全面掌握异常处理相关面试要点\",{\"1\":{\"1240\":1}}],[\"帮助读者深入理解io流的底层原理\",{\"1\":{\"1218\":1}}],[\"帮助你构建完整的知识体系并掌握面试应答策略\",{\"1\":{\"1308\":1}}],[\"帮助你构建更高效\",{\"1\":{\"947\":1}}],[\"帮助你全面掌握反射机制并从容应对面试挑战\",{\"1\":{\"1256\":1}}],[\"帮助你全面掌握面向对象编程的精髓\",{\"1\":{\"1200\":1}}],[\"帮助你全面掌握这一重要知识点\",{\"1\":{\"1061\":1}}],[\"帮助你更好地管理和解决maven依赖冲突\",{\"1\":{\"1007\":1}}],[\"帮助你更好地管理和使用maven仓库\",{\"1\":{\"969\":1}}],[\"帮助你掌握如何高效地管理项目依赖\",{\"1\":{\"922\":1}}],[\"帮助开发者从底层理解泛型的工作原理\",{\"1\":{\"3031\":1}}],[\"帮助开发者编写更具可维护性和可靠性的代码\",{\"1\":{\"2944\":1}}],[\"帮助开发者构建高性能网络应用\",{\"1\":{\"3113\":1}}],[\"帮助开发者构建全方位的网络问题发现与解决能力\",{\"1\":{\"3093\":1}}],[\"帮助开发者构建模块化\",{\"1\":{\"2730\":1}}],[\"帮助开发者构建健壮\",{\"1\":{\"447\":1}}],[\"帮助开发者理解string类的底层实现\",{\"1\":{\"2284\":1}}],[\"帮助开发者高效处理字符串动态拼接和修改需求\",{\"1\":{\"2259\":1}}],[\"帮助开发者掌握字符串常量的正确使用方法和最佳实践\",{\"1\":{\"2236\":1}}],[\"帮助开发者全面掌握泛型面试要点\",{\"1\":{\"1283\":1}}],[\"帮助开发者了解和分析依赖关系\",{\"1\":{\"1028\":1}}],[\"帮助开发者快速找到所需的文档\",{\"1\":{\"1958\":1}}],[\"帮助开发者快速定位问题根源\",{\"1\":{\"497\":1}}],[\"帮助开发者快速集成各种数据访问技术\",{\"1\":{\"436\":1}}],[\"帮助开发者快速构建web应用\",{\"1\":{\"425\":1}}],[\"帮助开发者快速掌握redis的使用技巧\",{\"1\":{\"195\":1}}],[\"帮助开发者快速掌握mongodb的使用技巧\",{\"1\":{\"77\":1}}],[\"帮助数据库崩溃或不存在\",{\"1\":{\"125\":1}}],[\"操作系统命令\",{\"0\":{\"3317\":1}}],[\"操作系统\",{\"0\":{\"3308\":1}}],[\"操作系统通知应用程序\",{\"1\":{\"2921\":1}}],[\"操作及内核\",{\"1\":{\"3264\":1}}],[\"操作大文件时\",{\"1\":{\"2848\":1}}],[\"操作是o\",{\"1\":{\"2512\":1}}],[\"操作o\",{\"1\":{\"2512\":1}}],[\"操作实现非阻塞队列\",{\"1\":{\"2485\":1}}],[\"操作实现无锁并发控制\",{\"1\":{\"663\":1}}],[\"操作效率\",{\"1\":{\"2484\":1}}],[\"操作类型比例\",{\"1\":{\"2542\":1}}],[\"操作类型\",{\"1\":{\"2462\":1}}],[\"操作次数\",{\"1\":{\"2409\":1}}],[\"操作\",{\"1\":{\"2349\":1,\"2704\":1,\"2942\":1,\"3011\":1}}],[\"操作会导致大量元素移动\",{\"1\":{\"2345\":1}}],[\"操作都会创建新的string对象\",{\"1\":{\"2299\":1}}],[\"操作都是在linux上\",{\"1\":{\"1402\":1}}],[\"操作日志包含了主节点的每一次写操作\",{\"1\":{\"1739\":1}}],[\"操作说明\",{\"1\":{\"1561\":1}}],[\"操作属性\",{\"0\":{\"1464\":1},\"1\":{\"1465\":1}}],[\"操作样式\",{\"0\":{\"1463\":1},\"1\":{\"1465\":1}}],[\"操作对象\",{\"0\":{\"1462\":1},\"1\":{\"1465\":1}}],[\"操作文本\",{\"0\":{\"1461\":1},\"1\":{\"1465\":1}}],[\"操作步骤固定\",{\"1\":{\"2707\":1}}],[\"操作步骤\",{\"1\":{\"1448\":1}}],[\"操作失败\",{\"1\":{\"1435\":1,\"2959\":1}}],[\"操作缓冲区后及时调用flip\",{\"1\":{\"1338\":1}}],[\"操作完成后由操作系统通知应用程序\",{\"1\":{\"1238\":1}}],[\"操作完以后回一个消息\",{\"1\":{\"138\":1}}],[\"操作完以后他会把这个结果返回\",{\"1\":{\"138\":1}}],[\"操作方式\",{\"1\":{\"1238\":1,\"2913\":1}}],[\"操作数栈\",{\"1\":{\"707\":1,\"714\":1,\"1145\":1}}],[\"操作数栈等\",{\"1\":{\"691\":1}}],[\"操作数应包含\",{\"1\":{\"125\":1}}],[\"操作保证操作的原子性\",{\"1\":{\"671\":1}}],[\"操作happens\",{\"1\":{\"656\":1}}],[\"操作符\",{\"1\":{\"539\":1}}],[\"操作过程\",{\"1\":{\"137\":1}}],[\"操作前mysql数据一定一定先备份\",{\"1\":{\"118\":1}}],[\"资源池化\",{\"1\":{\"3089\":1}}],[\"资源会自动关闭\",{\"1\":{\"2951\":1}}],[\"资源释放问题\",{\"1\":{\"3069\":1}}],[\"资源释放\",{\"1\":{\"2930\":1}}],[\"资源关闭问题\",{\"1\":{\"2908\":1}}],[\"资源关闭传统方式\",{\"1\":{\"1044\":1}}],[\"资源不存在\",{\"1\":{\"2051\":1}}],[\"资源未找到异常\",{\"1\":{\"2956\":1}}],[\"资源未正确关闭\",{\"0\":{\"1234\":1}}],[\"资源未关闭泄漏\",{\"1\":{\"781\":1}}],[\"资源自动关闭\",{\"1\":{\"1044\":1}}],[\"资源管理和架构设计三方面优化\",{\"1\":{\"3239\":1}}],[\"资源管理\",{\"1\":{\"373\":1,\"2835\":1,\"2847\":1,\"2860\":1,\"2889\":1}}],[\"资源消耗更低\",{\"1\":{\"3080\":1}}],[\"资源消耗低\",{\"1\":{\"1315\":1}}],[\"资源消耗大\",{\"1\":{\"1314\":1,\"3078\":1}}],[\"资源消耗\",{\"1\":{\"141\":1}}],[\"资源\",{\"1\":{\"125\":1}}],[\"超级权限\",{\"1\":{\"1736\":1}}],[\"超级账号\",{\"1\":{\"1736\":1}}],[\"超出容量\",{\"1\":{\"2427\":1}}],[\"超出缓存范围\",{\"1\":{\"1040\":1}}],[\"超出了gc开销限制\",{\"1\":{\"1558\":1}}],[\"超出了\",{\"1\":{\"125\":1}}],[\"超时控制\",{\"1\":{\"3087\":1}}],[\"超时处理\",{\"1\":{\"3069\":1}}],[\"超时插入\",{\"1\":{\"2465\":1}}],[\"超时退出\",{\"1\":{\"2462\":1}}],[\"超时锁定等高级特性\",{\"1\":{\"2456\":1,\"2513\":1}}],[\"超时时间\",{\"1\":{\"1409\":3}}],[\"超时时间repl\",{\"1\":{\"172\":1}}],[\"超时未收到ack则重传\",{\"1\":{\"1312\":1}}],[\"超时重传\",{\"1\":{\"1312\":1}}],[\"超时释放锁\",{\"1\":{\"1128\":1}}],[\"超时和公平锁\",{\"1\":{\"668\":1}}],[\"超时\",{\"1\":{\"649\":1,\"651\":1}}],[\"超时等待\",{\"1\":{\"605\":1}}],[\"超热数据使用永久key\",{\"1\":{\"190\":1}}],[\"超过容量\",{\"1\":{\"2632\":1}}],[\"超过最大容量\",{\"1\":{\"2601\":1}}],[\"超过了10就不正常了\",{\"1\":{\"1887\":1}}],[\"超过了5就高\",{\"1\":{\"1887\":1}}],[\"超过了锁定等待超时\",{\"1\":{\"125\":1}}],[\"超过98\",{\"1\":{\"1558\":1}}],[\"超过50倍纳入重点排查对象\",{\"1\":{\"192\":1}}],[\"超过5倍纳入重点排查对象\",{\"1\":{\"192\":1}}],[\"超过该值\",{\"1\":{\"172\":1}}],[\"禁止直接拼接sql字符串\",{\"1\":{\"2066\":1}}],[\"禁止使用new\",{\"1\":{\"2057\":1}}],[\"禁止包含版本号\",{\"1\":{\"2051\":1}}],[\"禁止开机自启\",{\"0\":{\"1937\":1}}],[\"禁止指令重排序并强制刷新缓存\",{\"1\":{\"668\":1}}],[\"禁止指令重排序\",{\"1\":{\"662\":1}}],[\"禁止\",{\"1\":{\"161\":1}}],[\"禁止驱逐数据\",{\"1\":{\"157\":1}}],[\"禁止混合事务性表和非事务性表\",{\"1\":{\"125\":1}}],[\"禁用不必要的协议特性和扩展\",{\"1\":{\"3228\":1}}],[\"禁用访问检查\",{\"1\":{\"2989\":1}}],[\"禁用所有自动重启\",{\"1\":{\"1796\":1}}],[\"禁用这个检查\",{\"1\":{\"1558\":1}}],[\"禁用停止按钮\",{\"1\":{\"1470\":1}}],[\"禁用开始按钮\",{\"1\":{\"1469\":1}}],[\"禁用nagle算法\",{\"1\":{\"1344\":1}}],[\"禁用system\",{\"1\":{\"798\":1,\"832\":1,\"866\":1,\"900\":1}}],[\"禁用增强npe消息\",{\"0\":{\"508\":1}}],[\"禁用或删除\",{\"1\":{\"306\":1}}],[\"禁用\",{\"1\":{\"790\":1,\"824\":1,\"858\":1,\"892\":1},\"2\":{\"7\":1}}],[\"禁用了如下功能\",{\"1\":{\"5\":1}}],[\"存盘\",{\"1\":{\"1869\":1}}],[\"存活下来的对象更可能长时间存活\",{\"1\":{\"776\":1}}],[\"存有字节码文件\",{\"1\":{\"415\":1,\"459\":1}}],[\"存在一定性能开销\",{\"1\":{\"2936\":1}}],[\"存在一个大小固定的令牌桶\",{\"1\":{\"1400\":1}}],[\"存在竞态条件\",{\"1\":{\"2534\":1}}],[\"存在掉电风险的客户现场\",{\"1\":{\"1632\":1}}],[\"存在的情况下\",{\"1\":{\"1271\":1}}],[\"存在内存泄漏风险\",{\"1\":{\"1178\":1,\"2296\":1}}],[\"存在栈溢出风险\",{\"1\":{\"1164\":1}}],[\"存在于运行时\",{\"1\":{\"1065\":1}}],[\"存在于字节码中\",{\"1\":{\"1065\":1}}],[\"存在类则为满足条件创建bean\",{\"1\":{\"415\":1,\"459\":1}}],[\"存在sql语法错误\",{\"1\":{\"125\":1}}],[\"存储卷\",{\"0\":{\"3276\":1}}],[\"存储会话状态\",{\"1\":{\"3228\":1}}],[\"存储单例bean\",{\"1\":{\"2999\":1}}],[\"存储实例化的bean\",{\"1\":{\"2999\":1}}],[\"存储bean定义\",{\"1\":{\"2999\":1}}],[\"存储链表或红黑树的头节点\",{\"1\":{\"2607\":1}}],[\"存储用户会话\",{\"1\":{\"2525\":1}}],[\"存储键和值\",{\"1\":{\"2512\":1}}],[\"存储键值对的数组\",{\"1\":{\"2679\":1}}],[\"存储键值对的哈希表数组\",{\"1\":{\"2593\":1}}],[\"存储键值对\",{\"1\":{\"2512\":1}}],[\"存储带有过期时间的缓存项\",{\"1\":{\"2486\":1}}],[\"存储基本类型时会自动装箱\",{\"1\":{\"2452\":1}}],[\"存储常量数据\",{\"1\":{\"2395\":1}}],[\"存储固定不变的数据\",{\"1\":{\"2358\":1}}],[\"存储元素的数组\",{\"1\":{\"2318\":1,\"2433\":1,\"2568\":1}}],[\"存储位置\",{\"1\":{\"2253\":1}}],[\"存储\",{\"1\":{\"1955\":1,\"1957\":1,\"1959\":1,\"1964\":1,\"1966\":2,\"3104\":1}}],[\"存储和用户界面\",{\"1\":{\"1561\":1}}],[\"存储10条数据\",{\"1\":{\"1442\":1}}],[\"存储每个字符的出现次数\",{\"1\":{\"1166\":1}}],[\"存储在方法区\",{\"1\":{\"2975\":1}}],[\"存储在线用户id\",{\"1\":{\"2525\":1}}],[\"存储在常量池\",{\"1\":{\"2188\":1,\"2239\":1}}],[\"存储在堆内存\",{\"1\":{\"2188\":1,\"2239\":1}}],[\"存储在堆内存中\",{\"1\":{\"2152\":1}}],[\"存储在堆中\",{\"1\":{\"1144\":2}}],[\"存储在栈中\",{\"1\":{\"1145\":1}}],[\"存储在数据库中\",{\"1\":{\"306\":1}}],[\"存储额外信息\",{\"1\":{\"724\":1}}],[\"存储字符的数组\",{\"1\":{\"2263\":1}}],[\"存储字符串的字符数组\",{\"1\":{\"2190\":1,\"2240\":1,\"2288\":1}}],[\"存储字符出现的次数\",{\"1\":{\"1166\":1}}],[\"存储字面量和符号引用\",{\"1\":{\"724\":1}}],[\"存储字节\",{\"1\":{\"125\":1}}],[\"存储方法参数和局部变量\",{\"1\":{\"714\":1}}],[\"存储方法调用栈帧\",{\"1\":{\"691\":1}}],[\"存储编译期生成的字面量和符号引用\",{\"1\":{\"707\":1}}],[\"存储类元信息\",{\"1\":{\"707\":1}}],[\"存储类信息\",{\"1\":{\"691\":1}}],[\"存储局部变量表\",{\"1\":{\"707\":1}}],[\"存储对象实例\",{\"1\":{\"691\":1}}],[\"存储速度\",{\"1\":{\"141\":1}}],[\"存储效率较高\",{\"1\":{\"138\":1}}],[\"存储格式复杂\",{\"1\":{\"137\":1}}],[\"存储格式简单\",{\"1\":{\"137\":1}}],[\"存储操作过程\",{\"1\":{\"137\":1}}],[\"存储数据量较大\",{\"1\":{\"139\":1}}],[\"存储数据结果\",{\"1\":{\"137\":1}}],[\"存储数据的格式\",{\"1\":{\"132\":1}}],[\"存储大量的数据\",{\"1\":{\"135\":1}}],[\"存储多个数据\",{\"1\":{\"134\":1}}],[\"存储的数据\",{\"1\":{\"132\":1}}],[\"存储的是\",{\"1\":{\"127\":1}}],[\"多机的环境下则需要用到docker\",{\"1\":{\"3250\":1}}],[\"多阶段构建\",{\"1\":{\"3246\":1}}],[\"多类型参数的泛型类\",{\"0\":{\"3020\":1}}],[\"多种数据类型输出\",{\"1\":{\"2901\":1}}],[\"多一次哈希查找\",{\"1\":{\"2615\":1}}],[\"多维数组打印的问题\",{\"0\":{\"2231\":1}}],[\"多维数组的替代方案\",{\"0\":{\"2178\":1}}],[\"多行注释以\",{\"1\":{\"2090\":1}}],[\"多行注释\",{\"0\":{\"2090\":1}}],[\"多条件分支\",{\"1\":{\"2078\":1}}],[\"多地址逗号分隔\",{\"1\":{\"1687\":1}}],[\"多节点安装文档\",{\"1\":{\"1609\":1}}],[\"多余的就慢慢来落\",{\"1\":{\"1396\":1}}],[\"多余的全部漏掉\",{\"1\":{\"1395\":1,\"1396\":1}}],[\"多了这个可以代表nginx对于一个用户的请求会立即处理前五个\",{\"1\":{\"1396\":1}}],[\"多态依赖于继承\",{\"1\":{\"2754\":1}}],[\"多态是封装和继承的延伸\",{\"0\":{\"2754\":1}}],[\"多态是指同一操作作用于不同对象时\",{\"1\":{\"2739\":1}}],[\"多态是指同一个方法可以有不同的实现方式\",{\"1\":{\"1205\":1,\"1216\":1}}],[\"多态误用\",{\"0\":{\"2749\":1}}],[\"多态通过以下方式实现\",{\"1\":{\"1216\":1}}],[\"多态通过方法重载和方法重写实现\",{\"1\":{\"1205\":1}}],[\"多态和抽象\",{\"1\":{\"1214\":1,\"1216\":1}}],[\"多态\",{\"0\":{\"1205\":1,\"2739\":1}}],[\"多态实现原理\",{\"1\":{\"1034\":1}}],[\"多路径传输\",{\"1\":{\"1117\":1}}],[\"多路复用器\",{\"1\":{\"1315\":1,\"3079\":1}}],[\"多路复用\",{\"0\":{\"1320\":1},\"1\":{\"128\":1,\"3128\":1}}],[\"多重继承等复杂特性\",{\"1\":{\"1046\":1}}],[\"多模块项目优化可以提高项目的可维护性和构建效率\",{\"1\":{\"961\":1}}],[\"多模块项目优化\",{\"0\":{\"961\":1}}],[\"多线程下不安全\",{\"1\":{\"2478\":1}}],[\"多线程拼接\",{\"1\":{\"2310\":1}}],[\"多线程同时调用sb\",{\"1\":{\"2279\":1}}],[\"多线程使用stringbuilder\",{\"1\":{\"2279\":1}}],[\"多线程误用stringbuilder\",{\"0\":{\"2279\":1}}],[\"多线程字符串操作\",{\"1\":{\"2275\":1}}],[\"多线程环境且需要内置同步\",{\"1\":{\"2454\":1}}],[\"多线程环境下可能导致并发修改异常或数据不一致\",{\"1\":{\"2692\":1}}],[\"多线程环境下可能导致\",{\"1\":{\"2613\":1,\"2640\":1,\"2670\":1}}],[\"多线程环境下可能导致数据不一致或concurrentmodificationexception\",{\"1\":{\"2389\":1}}],[\"多线程环境下需使用collections\",{\"1\":{\"2586\":1}}],[\"多线程环境下concurrenthashmap表现更好\",{\"1\":{\"2426\":1}}],[\"多线程环境下共享数据\",{\"1\":{\"2358\":1,\"2395\":1}}],[\"多线程环境下的共享对象\",{\"1\":{\"2307\":1}}],[\"多线程环境使用示例\",{\"0\":{\"2269\":1}}],[\"多线程环境\",{\"1\":{\"2201\":1}}],[\"多线程竞争同一把锁\",{\"1\":{\"1197\":1}}],[\"多线程操作安全集合\",{\"1\":{\"1186\":1}}],[\"多线程\",{\"1\":{\"1046\":1}}],[\"多线程标记\",{\"1\":{\"770\":1}}],[\"多线程编程\",{\"1\":{\"537\":1}}],[\"多版本jar\",{\"1\":{\"570\":1}}],[\"多变量\",{\"1\":{\"289\":1}}],[\"多租户改造\",{\"1\":{\"232\":1,\"1684\":1}}],[\"多个cmd执行做后一个\",{\"1\":{\"3246\":1}}],[\"多个cell\",{\"1\":{\"686\":1}}],[\"多个线程同时修改对话状态\",{\"1\":{\"3223\":1}}],[\"多个线程同时访问共享资源可能导致数据不一致\",{\"1\":{\"590\":1}}],[\"多个流的组合读取过程是透明的\",{\"1\":{\"2889\":1}}],[\"多个流嵌套时\",{\"1\":{\"2848\":1}}],[\"多个逗号分割\",{\"1\":{\"1687\":1}}],[\"多个逗号分隔\",{\"1\":{\"1687\":1}}],[\"多个用空格分开\",{\"1\":{\"1379\":1,\"1385\":1}}],[\"多个处理器依次处理请求\",{\"1\":{\"1332\":1}}],[\"多个数据包可能被合并发送\",{\"1\":{\"1325\":1}}],[\"多个数据请求从服务器直接压到redis后\",{\"1\":{\"191\":1}}],[\"多个直接依赖可能会引入同一个库的不同版本\",{\"1\":{\"1030\":1}}],[\"多个项目可以共享同一个间接依赖\",{\"1\":{\"1030\":1}}],[\"多个读锁同时尝试升级为写锁时互相等待\",{\"1\":{\"651\":1}}],[\"多个操作可以链式组合\",{\"1\":{\"550\":1}}],[\"多个参数有返回值\",{\"1\":{\"537\":1}}],[\"多个虚拟线程可以映射到同一个平台线程上执行\",{\"1\":{\"526\":1}}],[\"多个slave获取相同数据不同步\",{\"1\":{\"173\":1}}],[\"多个slave同时对master请求数据同步\",{\"1\":{\"166\":1}}],[\"多个\",{\"1\":{\"165\":1,\"167\":1}}],[\"多台服务器连接方案\",{\"1\":{\"161\":1}}],[\"多语句事务要求更多的\",{\"1\":{\"125\":1}}],[\"多键索引\",{\"1\":{\"68\":1}}],[\"应尽量避免\",{\"1\":{\"3028\":1}}],[\"应缓存重用\",{\"1\":{\"2993\":1}}],[\"应将try\",{\"1\":{\"2959\":1}}],[\"应考虑单个流的异常处理机制\",{\"1\":{\"2896\":1}}],[\"应先进行非空判断\",{\"1\":{\"2896\":1}}],[\"应选择linkedhashset\",{\"1\":{\"2643\":1}}],[\"应重新获取迭代器\",{\"1\":{\"2537\":1}}],[\"应捕获具体异常\",{\"1\":{\"2037\":1}}],[\"应\",{\"1\":{\"1276\":1}}],[\"应注意\",{\"1\":{\"1275\":1}}],[\"应该捕获具体异常\",{\"1\":{\"2930\":1}}],[\"应该对扩展开放\",{\"1\":{\"2746\":1}}],[\"应该比较size\",{\"1\":{\"2642\":1}}],[\"应该直接轮训到下一台服务器\",{\"1\":{\"1409\":1}}],[\"应该通过方法来访问和修改对象的状态\",{\"1\":{\"1215\":1}}],[\"应该为1000\",{\"1\":{\"1186\":1}}],[\"应使用try\",{\"1\":{\"2872\":1}}],[\"应使用stringbuilder\",{\"1\":{\"1169\":1}}],[\"应使用set\",{\"1\":{\"125\":1}}],[\"应使用equals\",{\"1\":{\"1169\":1}}],[\"应使用中断机制或自定义标志位安全停止线程\",{\"1\":{\"617\":1}}],[\"应使用orelse\",{\"1\":{\"554\":1}}],[\"应使用批量命令\",{\"1\":{\"211\":1}}],[\"应监控redis的内存使用情况\",{\"1\":{\"211\":1}}],[\"应根据业务需求合理设置\",{\"1\":{\"211\":1}}],[\"应避免使用keys\",{\"1\":{\"211\":1}}],[\"应对策略应该在临时预案防范方面多做文章\",{\"1\":{\"192\":1}}],[\"应对策略应该在业务数据分析与预防方面进行\",{\"1\":{\"191\":1}}],[\"应谨慎选择\",{\"1\":{\"166\":1}}],[\"应用本身有健康监测机制\",{\"1\":{\"3246\":1}}],[\"应用架构设计\",{\"1\":{\"3228\":1}}],[\"应用层\",{\"1\":{\"3204\":1}}],[\"应用层网关\",{\"1\":{\"3194\":1}}],[\"应用指标收集工具\",{\"1\":{\"3097\":1}}],[\"应用线程不参与io操作\",{\"1\":{\"2921\":1}}],[\"应用示例\",{\"1\":{\"2467\":1}}],[\"应用说它已经完成\",{\"1\":{\"1881\":1}}],[\"应用已经开始\",{\"1\":{\"1881\":1}}],[\"应用类型\",{\"1\":{\"818\":1,\"852\":1,\"886\":1,\"920\":1}}],[\"应用启动初期内存需求小\",{\"1\":{\"818\":1,\"852\":1,\"886\":1,\"920\":1}}],[\"应用程序主动发起io操作\",{\"1\":{\"3091\":1}}],[\"应用程序只授予完成其功能所必需的最小权限\",{\"1\":{\"3011\":1}}],[\"应用程序只需发起io请求\",{\"1\":{\"2921\":1}}],[\"应用程序负责完成实际的io操作\",{\"1\":{\"2921\":1}}],[\"应用程序可以像操作单个流一样依次读取多个数据源\",{\"1\":{\"2887\":1}}],[\"应用程序类加载器\",{\"1\":{\"742\":1,\"745\":1}}],[\"应用程序代码不需要实现spring特定的接口\",{\"1\":{\"311\":1}}],[\"应用框架\",{\"1\":{\"559\":1}}],[\"应用内的application\",{\"1\":{\"405\":2}}],[\"应用名称app\",{\"1\":{\"1698\":1}}],[\"应用名称+命名空间\",{\"1\":{\"1685\":1}}],[\"应用名称\",{\"1\":{\"403\":1}}],[\"应用自定义sheet配置\",{\"1\":{\"269\":1}}],[\"应用服务器流量随时间增量较大\",{\"1\":{\"192\":1}}],[\"应用服务器\",{\"1\":{\"190\":1}}],[\"应用服务器无法及时得到数据响应请求\",{\"1\":{\"190\":1}}],[\"应用服务器无法及时处理请求\",{\"1\":{\"190\":1}}],[\"应用服务器崩溃\",{\"1\":{\"190\":2}}],[\"应用要提供某一业务要能支持很多客户端同时访问的能力\",{\"1\":{\"160\":1}}],[\"应用\",{\"1\":{\"138\":1,\"765\":1,\"766\":1,\"1231\":4,\"1388\":2}}],[\"应用场景包括\",{\"1\":{\"2486\":1,\"2849\":1}}],[\"应用场景以及面试中常见的问题与解答\",{\"1\":{\"1256\":1}}],[\"应用场景\",{\"1\":{\"118\":1,\"2395\":1,\"3130\":1}}],[\"应予以修复\",{\"1\":{\"125\":1}}],[\"来建立类型关系\",{\"1\":{\"2754\":1}}],[\"来查找耗时过长的操作\",{\"1\":{\"1739\":1}}],[\"来保证数据传输的安全\",{\"1\":{\"1414\":1}}],[\"来管理版本号\",{\"1\":{\"932\":1}}],[\"来形成一个折中的方案\",{\"1\":{\"306\":1}}],[\"来恢复数据\",{\"1\":{\"142\":1}}],[\"来实现分布式限流\",{\"1\":{\"130\":1}}],[\"来实现分布式锁\",{\"1\":{\"130\":1}}],[\"来做分布式锁是一种比较常见的方式\",{\"1\":{\"130\":1}}],[\"来说\",{\"1\":{\"125\":1}}],[\"来自\",{\"1\":{\"1228\":1,\"2916\":1}}],[\"来自客户端的请求数量越来越多\",{\"1\":{\"190\":1}}],[\"来自某一select的表\",{\"1\":{\"125\":1}}],[\"来自主连接\",{\"1\":{\"125\":1}}],[\"来解析\",{\"1\":{\"14\":1}}],[\"该stopsignal指令设置将发送到容器的系统调用信号以退出\",{\"1\":{\"3246\":1}}],[\"该方法用于计算两个数的和\",{\"1\":{\"2090\":1}}],[\"该方法通过遍历缓存映射\",{\"1\":{\"283\":1}}],[\"该命令将显示所有正在运行的容器的内存使用情况\",{\"1\":{\"1809\":1}}],[\"该命令从标准输入设备读取指令\",{\"1\":{\"1504\":1}}],[\"该操作不可逆\",{\"1\":{\"1675\":1}}],[\"该操作需要运行的从实例\",{\"1\":{\"125\":1}}],[\"该特性通过在npe消息中精确指出哪个变量为null以及空值传播路径\",{\"1\":{\"497\":1}}],[\"该特性尚未实施\",{\"1\":{\"125\":1}}],[\"该配置文件配置了所有springboot官方整合的其他依赖的全路径类名\",{\"1\":{\"463\":1}}],[\"该配置文件中定义了大量的配置类\",{\"1\":{\"419\":1,\"463\":1}}],[\"该文件可以在mysql目录下的data目录中看到\",{\"1\":{\"1760\":1}}],[\"该文件和\",{\"1\":{\"1635\":1}}],[\"该文件配置了很多类的全路径类名\",{\"1\":{\"463\":1}}],[\"该文件属于自动生成\",{\"1\":{\"186\":1}}],[\"该注解被\",{\"1\":{\"463\":1}}],[\"该接口通过注解\",{\"1\":{\"459\":1}}],[\"该类会加载\",{\"1\":{\"463\":1}}],[\"该类会加载meta\",{\"1\":{\"423\":1}}],[\"该类autoconfigurationimportselector\",{\"1\":{\"419\":1,\"463\":1}}],[\"该怎么进行session认证呢\",{\"1\":{\"304\":1}}],[\"该key访问量巨大\",{\"1\":{\"191\":1}}],[\"该设置控制是否进行主从切换\",{\"1\":{\"178\":1}}],[\"该参数定义了超时时间的阈值\",{\"1\":{\"172\":1}}],[\"该阶段是开发者或运维人员手工维护的\",{\"1\":{\"142\":1}}],[\"该策略redis仍可以保持很好的处理性能\",{\"1\":{\"142\":1}}],[\"该客户端库仅授权给具有\",{\"1\":{\"125\":1}}],[\"该预处理语句有与之相关的打开光标\",{\"1\":{\"125\":1}}],[\"该mysql版本尚不支持\",{\"1\":{\"125\":1}}],[\"该mysql版本是未使用raid支持而编译的\",{\"1\":{\"125\":1}}],[\"该表类型要求主键\",{\"1\":{\"125\":1}}],[\"编写itheima\",{\"1\":{\"3250\":1}}],[\"编写一份良好的api文档需要考虑以下几点\",{\"1\":{\"1953\":1}}],[\"编写一个拉取源文件的脚本\",{\"1\":{\"1504\":1}}],[\"编写\",{\"1\":{\"1447\":1,\"3250\":1}}],[\"编写broker\",{\"0\":{\"249\":1}}],[\"编辑yml文件\",{\"1\":{\"3263\":1}}],[\"编辑yaml\",{\"1\":{\"1633\":1}}],[\"编辑文件\",{\"1\":{\"3246\":1}}],[\"编辑配置信息\",{\"1\":{\"1788\":1}}],[\"编辑配置\",{\"1\":{\"1712\":1}}],[\"编辑配置文件设置存储方式\",{\"1\":{\"1563\":1}}],[\"编辑流水线每一个环节的凭证也改成自己定义的\",{\"1\":{\"1711\":1}}],[\"编辑jekins\",{\"1\":{\"1707\":1}}],[\"编辑config\",{\"1\":{\"1677\":1}}],[\"编辑logstash\",{\"0\":{\"1523\":1,\"1524\":1}}],[\"编辑\",{\"0\":{\"1351\":1},\"1\":{\"1351\":1,\"1637\":1,\"1712\":1}}],[\"编辑此页链接\",{\"1\":{\"5\":1}}],[\"编程规范是指导开发者编写清晰\",{\"1\":{\"1993\":1}}],[\"编程规范的重要性\",{\"1\":{\"1993\":1}}],[\"编程\",{\"1\":{\"1446\":1}}],[\"编程容易\",{\"1\":{\"1314\":1}}],[\"编程错误\",{\"1\":{\"1244\":1}}],[\"编程模型\",{\"1\":{\"1238\":1,\"3130\":1}}],[\"编程复杂度高\",{\"1\":{\"1315\":1}}],[\"编程复杂度\",{\"1\":{\"1227\":1}}],[\"编程式事务管理的优点是可以更精细地控制事务\",{\"1\":{\"359\":1}}],[\"编程式事务管理\",{\"0\":{\"349\":1,\"354\":1},\"1\":{\"354\":1}}],[\"编译\",{\"0\":{\"1784\":1},\"1\":{\"1779\":1}}],[\"编译完内核后安装\",{\"1\":{\"1494\":1}}],[\"编译内核\",{\"0\":{\"1493\":1}}],[\"编译和安装\",{\"0\":{\"1492\":1}}],[\"编译和运行时都需要\",{\"1\":{\"925\":1,\"938\":1}}],[\"编译通过\",{\"1\":{\"1301\":1,\"1303\":1}}],[\"编译后注解信息存储在class文件的属性表中\",{\"1\":{\"3148\":1}}],[\"编译后child类会生成桥接方法\",{\"1\":{\"3036\":1}}],[\"编译后类型擦除为\",{\"1\":{\"3034\":1}}],[\"编译后类型擦除为同一方法\",{\"1\":{\"1287\":1}}],[\"编译后生成不同方法签名\",{\"1\":{\"1287\":1}}],[\"编译后\",{\"1\":{\"1247\":1,\"2935\":1}}],[\"编译后会生成对应的class文件\",{\"1\":{\"1063\":1}}],[\"编译前\",{\"1\":{\"1247\":1}}],[\"编译期处理流程和运行时反射解析机制\",{\"1\":{\"3143\":1}}],[\"编译期确定\",{\"1\":{\"2965\":1}}],[\"编译期确保case值的合法性\",{\"1\":{\"2822\":1}}],[\"编译期特性\",{\"1\":{\"2818\":1}}],[\"编译期转换为stringbuilder\",{\"1\":{\"2310\":1}}],[\"编译期优化\",{\"1\":{\"2304\":2}}],[\"编译期优化为\",{\"1\":{\"2249\":2}}],[\"编译期\",{\"1\":{\"1288\":1,\"2243\":2}}],[\"编译期检查的异常\",{\"1\":{\"2926\":1}}],[\"编译期检查类型\",{\"1\":{\"1286\":1}}],[\"编译期检查\",{\"1\":{\"1086\":1,\"2819\":1}}],[\"编译期代码生成\",{\"0\":{\"1073\":1}}],[\"编译错误\",{\"1\":{\"1037\":1,\"1038\":2,\"1052\":4,\"1053\":1,\"3025\":1,\"3035\":3,\"3038\":1,\"3039\":1}}],[\"编译时错误\",{\"1\":{\"3017\":1}}],[\"编译时检查\",{\"1\":{\"2929\":1}}],[\"编译时被丢弃\",{\"1\":{\"1065\":1}}],[\"编译时不需要\",{\"1\":{\"925\":1,\"938\":1}}],[\"编译时需要\",{\"1\":{\"925\":1,\"938\":1}}],[\"编译时也会加载相应的字节码文件\",{\"1\":{\"459\":1}}],[\"编译的class文件版本高于运行时jvm版本会导致unsupportedclassversionerror\",{\"1\":{\"735\":1}}],[\"编译java文件\",{\"1\":{\"727\":1}}],[\"编译器生成的桥接方法\",{\"1\":{\"3036\":1}}],[\"编译器会发出警告\",{\"1\":{\"3136\":1}}],[\"编译器会检查方法签名是否正确\",{\"1\":{\"3136\":1}}],[\"编译器会在泛型类的子类中自动生成桥接方法\",{\"1\":{\"3036\":1}}],[\"编译器会对字符串常量表达式进行优化\",{\"1\":{\"2249\":1}}],[\"编译器不强制处理\",{\"1\":{\"2926\":1}}],[\"编译器不强制捕获\",{\"1\":{\"2925\":1}}],[\"编译器强制要求捕获或声明抛出\",{\"1\":{\"2925\":1}}],[\"编译器可优化为位运算\",{\"1\":{\"2295\":1}}],[\"编译器在处理\",{\"1\":{\"504\":1}}],[\"编译器层面的支持\",{\"0\":{\"504\":1}}],[\"编译器仍会进行类型检查\",{\"1\":{\"468\":1}}],[\"编码规范\",{\"0\":{\"3322\":1}}],[\"编码格式等\",{\"1\":{\"3175\":1}}],[\"编码支持\",{\"1\":{\"2909\":1}}],[\"编码控制\",{\"1\":{\"2885\":1}}],[\"编码一致性问题\",{\"1\":{\"2884\":1}}],[\"编码处理\",{\"1\":{\"2877\":1}}],[\"编码标识\",{\"1\":{\"2289\":1}}],[\"编码转换等\",{\"1\":{\"2859\":1}}],[\"编码转换\",{\"1\":{\"1221\":1}}],[\"编码\",{\"1\":{\"303\":2}}],[\"编制索引\",{\"1\":{\"125\":1}}],[\"非invite事务状态机\",{\"1\":{\"3208\":1}}],[\"非invite事务\",{\"1\":{\"3208\":1}}],[\"非空注解\",{\"1\":{\"3003\":1}}],[\"非受检异常用于表示编程错误\",{\"1\":{\"2931\":1}}],[\"非受检异常\",{\"1\":{\"2925\":1,\"2926\":1}}],[\"非受检异常适用场景\",{\"1\":{\"1244\":1}}],[\"非原子操作组合\",{\"1\":{\"2534\":1}}],[\"非私有以简化嵌套类访问\",{\"1\":{\"2433\":1}}],[\"非连续存储\",{\"1\":{\"2335\":1}}],[\"非final\",{\"1\":{\"2263\":1}}],[\"非线程安全\",{\"1\":{\"2261\":1,\"2426\":1,\"2432\":1,\"2489\":1}}],[\"非对称加密等\",{\"1\":{\"2119\":1}}],[\"非元素选择器\",{\"1\":{\"1458\":1}}],[\"非阻塞socketchannel客户端示例\",{\"1\":{\"3117\":1}}],[\"非阻塞模式下read\",{\"1\":{\"2920\":1}}],[\"非阻塞模式下的异常处理\",{\"1\":{\"2920\":1}}],[\"非阻塞队列算法\",{\"0\":{\"2529\":1}}],[\"非阻塞\",{\"1\":{\"1318\":1,\"2461\":4,\"3117\":2}}],[\"非阻塞io操作\",{\"1\":{\"3128\":1}}],[\"非阻塞io\",{\"0\":{\"3079\":1},\"1\":{\"1227\":1,\"2913\":1,\"2919\":1}}],[\"非堆内存参数\",{\"0\":{\"793\":1,\"827\":1,\"861\":1,\"895\":1}}],[\"非标准参数\",{\"0\":{\"789\":1,\"823\":1,\"857\":1,\"891\":1}}],[\"非公平锁允许插队获取锁\",{\"1\":{\"638\":1}}],[\"非公平锁\",{\"1\":{\"638\":1}}],[\"非核心线程的空闲超时时间\",{\"1\":{\"622\":1}}],[\"非常适合构建微服务架构\",{\"1\":{\"396\":1}}],[\"非常适合用于数据备份\",{\"1\":{\"138\":1}}],[\"非侵入性\",{\"1\":{\"311\":1}}],[\"非localhost\",{\"1\":{\"249\":1}}],[\"非活动时段波动\",{\"1\":{\"192\":1}}],[\"非写入类的无效指令将被忽略\",{\"1\":{\"140\":1}}],[\"非二进制数据类型发送长数据\",{\"1\":{\"125\":1}}],[\"非法混合了校对\",{\"1\":{\"125\":3}}],[\"非法grant\",{\"1\":{\"125\":1}}],[\"非唯一的表\",{\"1\":{\"125\":1}}],[\"行为\",{\"1\":{\"2246\":1,\"2759\":1}}],[\"行为差异\",{\"0\":{\"2246\":1}}],[\"行为兼容性\",{\"1\":{\"562\":1}}],[\"行前不能有空格\",{\"1\":{\"219\":1}}],[\"行bgsave命令和创建复制缓冲区\",{\"1\":{\"166\":1}}],[\"行检索被mysql\",{\"1\":{\"125\":1}}],[\"行\",{\"1\":{\"125\":3,\"2856\":1,\"2867\":1}}],[\"行匹配\",{\"1\":{\"125\":1}}],[\"行的大小过大\",{\"1\":{\"125\":1}}],[\"解码失败\",{\"1\":{\"2885\":1}}],[\"解耦\",{\"1\":{\"2332\":1}}],[\"解释\",{\"1\":{\"1880\":1}}],[\"解释器\",{\"1\":{\"690\":1}}],[\"解锁system用户\",{\"1\":{\"1570\":1}}],[\"解锁操作happens\",{\"1\":{\"656\":1}}],[\"解绑事件\",{\"1\":{\"1451\":1,\"1454\":1}}],[\"解答\",{\"1\":{\"1160\":1,\"1161\":1,\"1162\":1,\"1164\":1,\"1165\":1,\"1166\":1}}],[\"解除尾节点的链接\",{\"1\":{\"2497\":1}}],[\"解除头节点的链接\",{\"1\":{\"2497\":1}}],[\"解除指定节点的链接\",{\"1\":{\"2496\":1}}],[\"解除指定节点的链接并返回其元素\",{\"1\":{\"2496\":1}}],[\"解除不必要的对象引用\",{\"1\":{\"784\":1}}],[\"解除屏蔽\",{\"1\":{\"125\":1}}],[\"解放了程序员的内存管理负担\",{\"1\":{\"698\":1}}],[\"解决分布式缓存中的数据分布问题\",{\"1\":{\"3086\":1}}],[\"解决不同编码环境下的文本处理问题\",{\"1\":{\"2877\":1}}],[\"解决哈希冲突\",{\"1\":{\"2607\":1}}],[\"解决linkedlist的线程安全问题有以下几种方案\",{\"1\":{\"2513\":1}}],[\"解决内存泄漏问题\",{\"1\":{\"2296\":1}}],[\"解决内存碎片问题\",{\"1\":{\"720\":1}}],[\"解决tcp粘包问题\",{\"0\":{\"1325\":1}}],[\"解决空轮询问题的代码片段\",{\"1\":{\"1237\":1}}],[\"解决了字节流处理文本时可能出现的乱码问题\",{\"1\":{\"2851\":1}}],[\"解决了类名冲突问题\",{\"1\":{\"2762\":1}}],[\"解决了传统集合在多线程环境下需要手动同步的问题\",{\"1\":{\"2516\":1}}],[\"解决了nio的诸多痛点\",{\"1\":{\"1347\":1}}],[\"解决了循环链表问题\",{\"1\":{\"1196\":1}}],[\"解决了旧版date和calendar类的线程不安全\",{\"1\":{\"545\":1}}],[\"解决aba问题的方法包括\",{\"1\":{\"1139\":1}}],[\"解决aba问题的atomicstampedreference\",{\"0\":{\"676\":1}}],[\"解决策略\",{\"0\":{\"1013\":1}}],[\"解决策略和最佳实践\",{\"1\":{\"1007\":1}}],[\"解决\",{\"1\":{\"700\":1,\"701\":1,\"702\":1,\"735\":1,\"736\":1,\"737\":1,\"753\":1,\"754\":1,\"755\":1,\"783\":2,\"813\":3,\"814\":1,\"815\":1,\"816\":1,\"817\":1,\"847\":3,\"848\":1,\"849\":1,\"850\":1,\"851\":1,\"881\":3,\"882\":1,\"883\":1,\"884\":1,\"885\":1,\"915\":3,\"916\":1,\"917\":1,\"918\":1,\"919\":1,\"1677\":1}}],[\"解决方法有\",{\"1\":{\"2994\":1}}],[\"解决方法是使用outputstreamwriter并显式指定编码\",{\"1\":{\"2837\":1}}],[\"解决方法\",{\"1\":{\"490\":1,\"683\":1,\"2641\":1,\"2974\":3}}],[\"解决方案包括\",{\"1\":{\"1104\":1,\"1114\":1,\"3069\":1}}],[\"解决方案\",{\"1\":{\"171\":1,\"172\":2,\"173\":1,\"189\":1,\"190\":1,\"191\":1,\"192\":1,\"1005\":3,\"1055\":2,\"1105\":1,\"1191\":1,\"1234\":1,\"1235\":1,\"1236\":1,\"1237\":1,\"1336\":1,\"1337\":1,\"1338\":1,\"1339\":1,\"1555\":1,\"1557\":1,\"1558\":1,\"1664\":1,\"1665\":1,\"1666\":1,\"1667\":1,\"1735\":2,\"2158\":1,\"2159\":1,\"2180\":1,\"2181\":1,\"2204\":1,\"2205\":1,\"2230\":1,\"2231\":1,\"2255\":1,\"2256\":1,\"2257\":1,\"2278\":1,\"2279\":1,\"2280\":1,\"2340\":1,\"2341\":1,\"2342\":1,\"2344\":1,\"2345\":1,\"2346\":1,\"2348\":1,\"2351\":1,\"2352\":1,\"2382\":1,\"2383\":1,\"2385\":1,\"2386\":1,\"2388\":1,\"2389\":1,\"2419\":2,\"2420\":1,\"2422\":1,\"2423\":1,\"2424\":1,\"2448\":1,\"2449\":1,\"2450\":1,\"2451\":1,\"2452\":1,\"2476\":1,\"2477\":1,\"2478\":1,\"2480\":1,\"2481\":1,\"2505\":1,\"2506\":1,\"2507\":1,\"2508\":1,\"2509\":1,\"2533\":1,\"2534\":1,\"2536\":1,\"2537\":1,\"2539\":1,\"2613\":1,\"2640\":1,\"2670\":1,\"2691\":1,\"2692\":1,\"2693\":1,\"2694\":1,\"2745\":1,\"2748\":1,\"2749\":1,\"2750\":1,\"2774\":1,\"2775\":1,\"2776\":1,\"2777\":1,\"2920\":5,\"3090\":1,\"3194\":1,\"3222\":1,\"3223\":1,\"3224\":1,\"3225\":1}}],[\"解决jackson序列化时long类型缺失精度问题\",{\"1\":{\"282\":1}}],[\"解决办法如下\",{\"1\":{\"112\":1}}],[\"解析媒体信息\",{\"1\":{\"3209\":1}}],[\"解析后的sdp信息\",{\"1\":{\"3205\":1}}],[\"解析后的消息信息\",{\"1\":{\"3205\":1}}],[\"解析sip消息中的sdp信息\",{\"1\":{\"3232\":1}}],[\"解析sip请求消息\",{\"1\":{\"1095\":1,\"3205\":1}}],[\"解析sdp获取媒体信息\",{\"1\":{\"3209\":1}}],[\"解析sdp内容\",{\"1\":{\"3205\":1,\"3209\":1}}],[\"解析消息体\",{\"1\":{\"3205\":1}}],[\"解析核心头域\",{\"1\":{\"3205\":1}}],[\"解析过程包括\",{\"1\":{\"3205\":1}}],[\"解析过程中发现非法\",{\"1\":{\"125\":1}}],[\"解析和业务逻辑\",{\"1\":{\"3204\":1}}],[\"解析注解\",{\"1\":{\"3137\":1}}],[\"解析文件格式时需要回溯\",{\"1\":{\"2849\":1}}],[\"解析标签\",{\"1\":{\"1461\":1,\"1465\":1}}],[\"解析http请求的方法和路径\",{\"1\":{\"2921\":1}}],[\"解析http请求\",{\"1\":{\"1324\":1,\"2921\":1}}],[\"解析头部\",{\"1\":{\"1095\":1}}],[\"解析请求行\",{\"1\":{\"1095\":1,\"3070\":1,\"3205\":1}}],[\"解析三个阶段统称为连接\",{\"1\":{\"741\":1}}],[\"解析常量池示例\",{\"0\":{\"728\":1}}],[\"解析模版内容\",{\"1\":{\"289\":1}}],[\"解析token\",{\"1\":{\"279\":1}}],[\"解析参数\",{\"1\":{\"125\":1}}],[\"解析\",{\"1\":{\"125\":1,\"741\":1,\"1146\":1}}],[\"解压jar包\",{\"0\":{\"1894\":1}}],[\"解压到指定文件夹\",{\"1\":{\"1863\":1}}],[\"解压后在根目录上输入ls\",{\"1\":{\"1782\":1}}],[\"解压并安装redis\",{\"0\":{\"1782\":1}}],[\"解压运行脚本文件构建项目镜像\",{\"1\":{\"1646\":1}}],[\"解压进入目录\",{\"1\":{\"1637\":1}}],[\"解压命令\",{\"1\":{\"1636\":1}}],[\"解压的docker文件夹全部移动至\",{\"1\":{\"1619\":1,\"1751\":1}}],[\"解压的数据过大\",{\"1\":{\"125\":1}}],[\"解压缩命令\",{\"0\":{\"1861\":1,\"1863\":1},\"1\":{\"1835\":2}}],[\"解压缩\",{\"0\":{\"1618\":1,\"1750\":1}}],[\"解压\",{\"0\":{\"1768\":1},\"1\":{\"1582\":1,\"1715\":2,\"1730\":1,\"1734\":1,\"1779\":1,\"1897\":1,\"1898\":1,\"3263\":1}}],[\"解压内核代码\",{\"0\":{\"1489\":1}}],[\"解压数据的长度已损坏\",{\"1\":{\"125\":2}}],[\"被动关闭方收到fin包时\",{\"1\":{\"3070\":1}}],[\"被动关闭方收到fin包后\",{\"1\":{\"3070\":1}}],[\"被动关闭方准备好后\",{\"1\":{\"3070\":1}}],[\"被动方准备关闭\",{\"1\":{\"1311\":1}}],[\"被动方收到fin包\",{\"1\":{\"1311\":1}}],[\"被移除的值\",{\"1\":{\"2512\":1}}],[\"被解除链接的节点的元素\",{\"1\":{\"2496\":1}}],[\"被删除的元素\",{\"1\":{\"2440\":1,\"2496\":1}}],[\"被替换的旧元素\",{\"1\":{\"2439\":1,\"2495\":1}}],[\"被替换为map中任意变量内容\",{\"1\":{\"289\":2}}],[\"被加载到运行时常量池\",{\"1\":{\"2243\":1}}],[\"被记录在class常量池\",{\"1\":{\"2243\":1}}],[\"被修改过的页面数\",{\"1\":{\"1882\":1}}],[\"被换出的大小\",{\"1\":{\"1882\":1}}],[\"被\",{\"1\":{\"1491\":1}}],[\"被继承的类称为父类\",{\"1\":{\"1204\":1}}],[\"被final修饰的常量除外\",{\"1\":{\"743\":1}}],[\"被final修饰的字段不可变\",{\"1\":{\"655\":1}}],[\"被篡改的class文件通常无法通过验证\",{\"1\":{\"738\":1}}],[\"被拒绝连接的客户端总数\",{\"1\":{\"193\":1}}],[\"被严重占用\",{\"1\":{\"172\":1}}],[\"被广泛应用于分布式缓存方向\",{\"1\":{\"127\":1}}],[\"被0除\",{\"1\":{\"125\":1}}],[\"被标记为崩溃\",{\"1\":{\"125\":2}}],[\"被屏蔽\",{\"1\":{\"125\":1}}],[\"被指定了两次\",{\"1\":{\"125\":1}}],[\"由invite请求的2xx响应确认后创建\",{\"1\":{\"3209\":1}}],[\"由ip地址和端口号唯一标识\",{\"1\":{\"3064\":1}}],[\"由call\",{\"1\":{\"3209\":1}}],[\"由c++实现\",{\"1\":{\"742\":1}}],[\"由上层统一处理\",{\"1\":{\"2955\":1}}],[\"由操作系统在后台完成\",{\"1\":{\"2921\":1}}],[\"由操作系统完成io操作\",{\"1\":{\"2921\":1}}],[\"由操作系统控制每次同步到aof文件的周期\",{\"1\":{\"140\":1}}],[\"由应用程序主动等待io事件就绪\",{\"1\":{\"2921\":1}}],[\"由应用程序类加载器加载\",{\"1\":{\"756\":1}}],[\"由多个数据节点和选举节点组成\",{\"1\":{\"1764\":1}}],[\"由被添加者对象调用\",{\"1\":{\"1462\":2}}],[\"由添加者对象调用\",{\"1\":{\"1462\":4,\"1465\":4}}],[\"由root或alias指令与uri请求生成\",{\"1\":{\"1412\":1}}],[\"由repl\",{\"1\":{\"169\":1}}],[\"由起始行\",{\"1\":{\"1098\":1}}],[\"由apache提供的maven仓库管理工具\",{\"1\":{\"979\":1}}],[\"由jfrog提供的maven仓库管理工具\",{\"1\":{\"979\":1}}],[\"由jvm解释或编译执行\",{\"1\":{\"696\":1}}],[\"由jvm自动管理\",{\"1\":{\"651\":1,\"668\":1}}],[\"由jvm管理而非操作系统\",{\"1\":{\"524\":1}}],[\"由sonatype提供的maven仓库管理工具\",{\"1\":{\"979\":1}}],[\"由slave提供服务\",{\"1\":{\"162\":1}}],[\"由slave分担master负载\",{\"1\":{\"162\":1}}],[\"由maven官方维护\",{\"1\":{\"976\":1}}],[\"由mongos\",{\"1\":{\"70\":1}}],[\"由启动类加载器加载\",{\"1\":{\"756\":1}}],[\"由提交任务的线程执行任务\",{\"1\":{\"634\":1}}],[\"由线程\",{\"1\":{\"625\":1}}],[\"由oracle和openjdk社区维护\",{\"1\":{\"494\":1}}],[\"由最后的参数n决定\",{\"1\":{\"186\":1}}],[\"由一主多从结构变为树状结构\",{\"1\":{\"166\":1}}],[\"由定时器任务立即执行对键的删除操作\",{\"1\":{\"151\":1}}],[\"由此可见\",{\"1\":{\"129\":1}}],[\"由于类型擦除可能导致方法签名冲突\",{\"1\":{\"3035\":1}}],[\"由于类型信息在编译时被擦除\",{\"1\":{\"3035\":1}}],[\"由于内存连续性\",{\"1\":{\"2511\":1}}],[\"由于数组直接打印会输出内存地址而非实际内容\",{\"1\":{\"2209\":1}}],[\"由于在代码中构建容器的配置文件是构建工作负载的yml\",{\"1\":{\"1713\":1}}],[\"由于后续拉各类包都要依赖私仓\",{\"1\":{\"1632\":1}}],[\"由于上面并未和kafka产生关联\",{\"1\":{\"1535\":1}}],[\"由于jdk实现和操作系统支持的差异\",{\"1\":{\"1238\":1}}],[\"由于无法获取到新的\",{\"1\":{\"306\":1}}],[\"由于服务器不保存\",{\"1\":{\"305\":1}}],[\"由于有效期存储在\",{\"1\":{\"304\":1}}],[\"由于层级深度\",{\"1\":{\"166\":1}}],[\"由于aof文件存储体积较大\",{\"1\":{\"142\":1}}],[\"由于更新很频繁\",{\"1\":{\"125\":1}}],[\"由于它已被调用了该存储函数\",{\"1\":{\"125\":1}}],[\"由于该mysql从服务器是在不支持ssl的情况下编译的\",{\"1\":{\"125\":1}}],[\"由于\",{\"1\":{\"125\":1,\"306\":1}}],[\"由于存在冲突的读锁定\",{\"1\":{\"125\":1}}],[\"由于存在活动的锁定表或活动的事务\",{\"1\":{\"125\":1}}],[\"由于存在很多连接错误\",{\"1\":{\"125\":1}}],[\"由于唯一性限制\",{\"1\":{\"125\":1}}],[\"由于用lock\",{\"1\":{\"125\":1}}],[\"函数等\",{\"1\":{\"2746\":1}}],[\"函数式风格\",{\"1\":{\"2227\":1}}],[\"函数式编程\",{\"1\":{\"2227\":1}}],[\"函数式编程支持增强\",{\"1\":{\"1198\":1}}],[\"函数式编程强调将函数作为一等公民\",{\"1\":{\"548\":1}}],[\"函数式编程范式的引入\",{\"0\":{\"548\":1}}],[\"函数式接口是只包含一个抽象方法的接口\",{\"1\":{\"538\":1}}],[\"函数式接口\",{\"0\":{\"538\":1},\"1\":{\"1034\":1,\"3136\":1}}],[\"函数式接口抛出异常\",{\"0\":{\"287\":1}}],[\"函数型接口\",{\"1\":{\"538\":1}}],[\"函数中不允许使用常量\",{\"1\":{\"125\":1}}],[\"函数\",{\"1\":{\"125\":2}}],[\"与cmd作用相同\",{\"1\":{\"3246\":1}}],[\"与collections\",{\"1\":{\"2358\":2}}],[\"与其他协议的协同工作\",{\"1\":{\"3220\":1}}],[\"与其他工具的集成\",{\"0\":{\"510\":1}}],[\"与invite类似\",{\"1\":{\"3199\":1}}],[\"与ispresent\",{\"1\":{\"474\":1}}],[\"与sip结合可构建跨平台通信系统\",{\"1\":{\"3232\":1}}],[\"与sip方法\",{\"1\":{\"3198\":1}}],[\"与start\",{\"1\":{\"125\":1}}],[\"与普通异常\",{\"1\":{\"2929\":1}}],[\"与返回值类型和访问修饰符无关\",{\"1\":{\"2786\":1}}],[\"与返回类型和访问修饰符无关\",{\"1\":{\"2752\":1}}],[\"与offer\",{\"0\":{\"2562\":1}}],[\"与hashmap的对比\",{\"0\":{\"2666\":1}}],[\"与hashmap一样\",{\"1\":{\"2639\":1}}],[\"与hashmap相比\",{\"1\":{\"2636\":1,\"2689\":1}}],[\"与hashmap结构类似\",{\"1\":{\"2541\":1}}],[\"与hash存储结构完全相同\",{\"1\":{\"135\":1}}],[\"与arraylist的设计对比\",{\"0\":{\"2503\":1}}],[\"与arrays\",{\"1\":{\"2234\":1}}],[\"与unmodifiablelist对比\",{\"1\":{\"2358\":1}}],[\"与unique或index一起使用\",{\"1\":{\"125\":1}}],[\"与不可变的string类不同\",{\"1\":{\"2259\":1}}],[\"与对应语句对齐\",{\"1\":{\"2033\":1}}],[\"与\",{\"1\":{\"1507\":1}}],[\"与远程文件的同步传输\",{\"1\":{\"1501\":1}}],[\"与$uri相同\",{\"1\":{\"1412\":1}}],[\"与开启顺序相反\",{\"1\":{\"1368\":1}}],[\"与传统io的面向流\",{\"1\":{\"2911\":1}}],[\"与传统nio\",{\"1\":{\"1238\":1}}],[\"与传统nio有什么区别\",{\"1\":{\"1238\":1}}],[\"与传统bio相比有本质区别\",{\"1\":{\"1227\":1}}],[\"与传统的h\",{\"1\":{\"1101\":1}}],[\"与代码强相关的配置优先使用注解\",{\"1\":{\"1086\":1}}],[\"与代码分离\",{\"1\":{\"1086\":1}}],[\"与内存布局相关\",{\"1\":{\"738\":1}}],[\"与虚拟机实现的内存布局无关\",{\"1\":{\"738\":1}}],[\"与匿名内部类的主要区别\",{\"1\":{\"556\":1}}],[\"与匿名内部类有何区别\",{\"0\":{\"556\":1}}],[\"与java版本同步更新\",{\"1\":{\"494\":1}}],[\"与java生态深度整合\",{\"1\":{\"494\":1}}],[\"与多文件压缩包下载\",{\"1\":{\"286\":1}}],[\"与null数据的占比\",{\"1\":{\"192\":1}}],[\"与原master断开时间久的out\",{\"1\":{\"182\":1}}],[\"与rdb相比可以简单理解为由记录数据改为记录数据产生的变化\",{\"1\":{\"139\":1}}],[\"与此同时它会创建一个子进程\",{\"1\":{\"138\":1}}],[\"与前面的设置不匹配\",{\"1\":{\"125\":2}}],[\"与数据库交互\",{\"1\":{\"2007\":1}}],[\"与数据库\",{\"1\":{\"125\":2}}],[\"与非group列的混合不合法\",{\"1\":{\"125\":1}}],[\"与上述同样的操作\",{\"1\":{\"114\":1}}],[\"jks\",{\"1\":{\"3214\":2,\"3237\":2}}],[\"jupiter\",{\"1\":{\"3166\":6}}],[\"junit和mockito等测试框架大量使用注解简化测试代码\",{\"1\":{\"3166\":1}}],[\"junit\",{\"1\":{\"585\":2,\"1266\":1,\"3166\":6}}],[\"jun\",{\"1\":{\"115\":8}}],[\"jfo\",{\"1\":{\"3162\":2}}],[\"jfr是一个低开销的事件收集框架\",{\"1\":{\"480\":1}}],[\"jfr\",{\"0\":{\"480\":1},\"1\":{\"480\":6}}],[\"jmx\",{\"1\":{\"3111\":1}}],[\"jmeter是功能强大的负载测试工具\",{\"1\":{\"3106\":1}}],[\"jmeter\",{\"1\":{\"3106\":2}}],[\"jmap\",{\"1\":{\"3100\":2}}],[\"jmm通过volatile\",{\"1\":{\"602\":1}}],[\"jmm\",{\"1\":{\"602\":2,\"703\":2}}],[\"jvisualvm\",{\"1\":{\"3096\":1}}],[\"jvm对注解提供特殊支持\",{\"1\":{\"3145\":1}}],[\"jvm对synchronized做了哪些优化\",{\"1\":{\"651\":1}}],[\"jvm网络监控工具\",{\"0\":{\"3095\":1}}],[\"jvm中只会有一个class对象\",{\"1\":{\"2975\":1}}],[\"jvm在运行时为注解创建动态代理对象\",{\"1\":{\"3149\":1}}],[\"jvm在加载类时会为注解创建动态代理实例\",{\"1\":{\"3145\":1}}],[\"jvm在创建异常对象时自动填充堆栈信息\",{\"1\":{\"2936\":1}}],[\"jvm在字符串常量池中查找或创建对应对象\",{\"1\":{\"2243\":1}}],[\"jvm需要遍历当前线程的调用栈并记录每个栈帧信息\",{\"1\":{\"2942\":1}}],[\"jvm需要将类加载到内存中\",{\"1\":{\"2760\":1}}],[\"jvm需要保存和恢复线程的上下文\",{\"1\":{\"703\":1}}],[\"jvm给出这样一个参数\",{\"1\":{\"1558\":1}}],[\"jvm的设计遵循以下原则\",{\"1\":{\"1153\":1}}],[\"jvm性能优化主要包括以下几个方面\",{\"1\":{\"1151\":1}}],[\"jvm性能监控\",{\"0\":{\"819\":1}}],[\"jvm原理\",{\"0\":{\"1140\":1,\"3300\":1}}],[\"jvm调优\",{\"0\":{\"887\":1}}],[\"jvm故障排错\",{\"0\":{\"853\":1}}],[\"jvm根据当前系统运行情况自动调整新生代大小\",{\"1\":{\"811\":1,\"845\":1,\"879\":1,\"913\":1}}],[\"jvm提供合理默认值\",{\"1\":{\"809\":1,\"843\":1,\"877\":1,\"911\":1}}],[\"jvm提供了多种垃圾收集器\",{\"1\":{\"768\":1}}],[\"jvm会按照特定规则搜索并返回匹配的成员\",{\"1\":{\"2982\":1}}],[\"jvm会在当前方法的异常表中查找匹配的catch块\",{\"1\":{\"2935\":1}}],[\"jvm会保证class对象的唯一性\",{\"1\":{\"1279\":1}}],[\"jvm会执行以下步骤\",{\"1\":{\"1263\":1}}],[\"jvm会检查老年代最大可用连续空间是否大于新生代所有对象总大小\",{\"1\":{\"784\":1}}],[\"jvm会将其挂起并调度其他虚拟线程在该平台线程上运行\",{\"1\":{\"528\":1}}],[\"jvm可以忽略该请求\",{\"1\":{\"780\":1}}],[\"jvm参数调优\",{\"1\":{\"3091\":1}}],[\"jvm参数临时开放包访问\",{\"1\":{\"1281\":1}}],[\"jvm参数的\",{\"1\":{\"818\":1,\"852\":1,\"886\":1,\"920\":1}}],[\"jvm参数设计体现了多种权衡\",{\"1\":{\"809\":1,\"843\":1,\"877\":1,\"911\":1}}],[\"jvm参数设置与内存监控\",{\"0\":{\"694\":1}}],[\"jvm参数根据稳定性和标准化程度分为三类\",{\"1\":{\"787\":1,\"821\":1,\"855\":1,\"889\":1}}],[\"jvm参数分类\",{\"0\":{\"787\":1,\"821\":1,\"855\":1,\"889\":1}}],[\"jvm参数总结\",{\"0\":{\"785\":1}}],[\"jvm参数\",{\"1\":{\"772\":1,\"807\":1,\"841\":1,\"875\":1,\"909\":1}}],[\"jvm垃圾回收机制\",{\"0\":{\"757\":1}}],[\"jvm规定\",{\"1\":{\"743\":1}}],[\"jvm规范定义了一些标准属性\",{\"1\":{\"733\":1}}],[\"jvm类加载机制\",{\"0\":{\"739\":1}}],[\"jvm类文件结构\",{\"0\":{\"721\":1}}],[\"jvm是如何实现多线程的\",{\"1\":{\"703\":1}}],[\"jvm采用自动垃圾回收机制\",{\"1\":{\"698\":1}}],[\"jvm将内存分为栈\",{\"1\":{\"697\":1}}],[\"jvm通过异常表\",{\"1\":{\"2935\":1}}],[\"jvm通过映射操作系统原生线程实现多线程\",{\"1\":{\"703\":1}}],[\"jvm通过字节码和不同平台的jvm实现\",{\"1\":{\"696\":1}}],[\"jvm通过对象监视器\",{\"1\":{\"651\":1}}],[\"jvm跨平台设计理念\",{\"0\":{\"696\":1}}],[\"jvm内存结构主要包括以下几个部分\",{\"1\":{\"1143\":1}}],[\"jvm内存分为线程私有区域和线程共享区域\",{\"1\":{\"706\":1}}],[\"jvm内存区域划分\",{\"0\":{\"706\":1}}],[\"jvm内存信息\",{\"1\":{\"694\":1}}],[\"jvm内存模型描述的是jvm的物理内存布局\",{\"1\":{\"703\":1}}],[\"jvm内存模型与java内存模型\",{\"1\":{\"703\":1}}],[\"jvm内存模型\",{\"0\":{\"704\":1},\"1\":{\"693\":1}}],[\"jvmparamdemo\",{\"1\":{\"694\":2}}],[\"jvmmemorydemo\",{\"1\":{\"693\":1}}],[\"jvm运行时数据区域\",{\"0\":{\"691\":1}}],[\"jvm主要由以下几个部分组成\",{\"1\":{\"690\":1}}],[\"jvm架构组成\",{\"0\":{\"690\":1}}],[\"jvm负责将字节码翻译成机器码并执行\",{\"1\":{\"689\":1}}],[\"jvm定义与作用\",{\"0\":{\"689\":1}}],[\"jvm理论基础\",{\"0\":{\"687\":1}}],[\"jvm禁止将final字段的写操作重排序到构造方法之外\",{\"1\":{\"668\":1}}],[\"jvm优化更成熟\",{\"1\":{\"649\":1}}],[\"jvm自动消除不可能存在竞争的锁\",{\"1\":{\"645\":1}}],[\"jvm\",{\"1\":{\"234\":2,\"689\":1,\"727\":1,\"1141\":1,\"1542\":1,\"1548\":1,\"1558\":1,\"1643\":3,\"1661\":1,\"1697\":1,\"1698\":1,\"3100\":1}}],[\"j<n\",{\"1\":{\"2726\":1}}],[\"j<m\",{\"1\":{\"2726\":1}}],[\"j=i\",{\"1\":{\"2726\":1}}],[\"j=0\",{\"1\":{\"2726\":1}}],[\"j的文件\",{\"1\":{\"1873\":1}}],[\"j6ldh4\",{\"1\":{\"1649\":1,\"1688\":1}}],[\"jedisconnectionexception\",{\"1\":{\"1788\":1}}],[\"jenkinsjavaopts\",{\"1\":{\"1638\":3}}],[\"jenkinsvolumesize\",{\"1\":{\"1638\":1}}],[\"jenkinsmemoryreq\",{\"1\":{\"1638\":1}}],[\"jenkinsmemorylim\",{\"1\":{\"1638\":1}}],[\"jetty<\",{\"1\":{\"416\":1}}],[\"jetty\",{\"1\":{\"391\":1}}],[\"jy\",{\"1\":{\"1462\":5}}],[\"jq\",{\"1\":{\"1449\":2}}],[\"jqdiv\",{\"1\":{\"1447\":3,\"1449\":4}}],[\"jquery对象转换为js对象\",{\"1\":{\"1449\":1}}],[\"jquery对象无法使用js里面的功能\",{\"1\":{\"1449\":1}}],[\"jquery方式\",{\"1\":{\"1447\":1,\"1449\":1}}],[\"jquery介绍\",{\"0\":{\"1446\":1}}],[\"jquery快速入门\",{\"0\":{\"1445\":1,\"1447\":1},\"1\":{\"1445\":1}}],[\"jquery的通用方式实现ajax\",{\"0\":{\"1435\":1},\"1\":{\"1435\":1}}],[\"jquery的post方式实现ajax\",{\"0\":{\"1434\":1},\"1\":{\"1434\":1}}],[\"jquery的get方式实现ajax\",{\"0\":{\"1433\":1},\"1\":{\"1433\":1}}],[\"jquery\",{\"1\":{\"1433\":1,\"1434\":1,\"1435\":1,\"1440\":1,\"1446\":3,\"1447\":4,\"1448\":4,\"1449\":7,\"1450\":2,\"1451\":2,\"1454\":6,\"1455\":2,\"1456\":1,\"1457\":1,\"1458\":1,\"1459\":1,\"1460\":1,\"1461\":1,\"1462\":1,\"1463\":1,\"1464\":1,\"1467\":1,\"1469\":1}}],[\"j++\",{\"1\":{\"1161\":1,\"2078\":1,\"2170\":1,\"2173\":1,\"2174\":1,\"2181\":2,\"2183\":1,\"2214\":1,\"2522\":1,\"2709\":1,\"2726\":2}}],[\"j\",{\"1\":{\"1161\":8,\"1295\":5,\"1493\":1,\"1788\":1,\"1873\":1,\"1876\":3,\"1998\":1,\"2078\":4,\"2170\":3,\"2173\":4,\"2174\":5,\"2181\":6,\"2183\":4,\"2214\":4,\"2522\":2,\"2601\":7,\"2684\":4,\"2707\":6,\"2709\":8}}],[\"jre\",{\"1\":{\"585\":1,\"1731\":1}}],[\"jre<\",{\"1\":{\"567\":1}}],[\"jiagooushi\",{\"1\":{\"1536\":1}}],[\"jiezuiquanmiandemianshiti\",{\"1\":{\"1399\":1,\"1400\":1}}],[\"jigsaw\",{\"0\":{\"1281\":1}}],[\"jigsaw项目\",{\"1\":{\"563\":1}}],[\"jira\",{\"1\":{\"991\":1}}],[\"jinfo\",{\"1\":{\"802\":1,\"836\":1,\"870\":1,\"904\":1}}],[\"jit\",{\"1\":{\"690\":1}}],[\"jit编译器和swing\",{\"1\":{\"574\":1}}],[\"ji1oprfxnmaofz9\",{\"1\":{\"303\":1,\"307\":1}}],[\"jconsole\",{\"1\":{\"3096\":2,\"3110\":1}}],[\"jcp\",{\"1\":{\"563\":1}}],[\"jcmd\",{\"1\":{\"480\":1}}],[\"jlink工具\",{\"1\":{\"486\":1}}],[\"jp\",{\"1\":{\"1504\":1}}],[\"jpg\",{\"1\":{\"1402\":2,\"1440\":1,\"1469\":11,\"2843\":2}}],[\"jpg|gif|png|js|css\",{\"1\":{\"1393\":1}}],[\"jpg|gif|png\",{\"1\":{\"1393\":1}}],[\"jps\",{\"1\":{\"802\":1,\"836\":1,\"870\":1,\"904\":1,\"3096\":1}}],[\"jprofiler等工具分析堆转储文件\",{\"1\":{\"784\":1}}],[\"jpms\",{\"1\":{\"486\":1,\"2994\":1}}],[\"jpa注解映射\",{\"0\":{\"3165\":1}}],[\"jpa泛型接口\",{\"1\":{\"3050\":1}}],[\"jpa通过泛型repository接口大幅简化了数据访问层代码\",{\"1\":{\"3050\":1}}],[\"jpa的泛型repository\",{\"0\":{\"3050\":1}}],[\"jparepository<t\",{\"1\":{\"3050\":1}}],[\"jparepository<order\",{\"1\":{\"2007\":1}}],[\"jparepository<user\",{\"1\":{\"440\":1,\"3050\":1}}],[\"jpa实体示例\",{\"1\":{\"578\":1}}],[\"jpa规范\",{\"1\":{\"578\":1}}],[\"jpa<\",{\"1\":{\"440\":1}}],[\"jpa依赖来简化jpa的使用\",{\"1\":{\"440\":1}}],[\"jpa等\",{\"1\":{\"436\":1}}],[\"jpa\",{\"0\":{\"440\":1},\"1\":{\"364\":1,\"563\":1,\"2066\":1}}],[\"jd\",{\"1\":{\"3003\":1}}],[\"jdk自带监控工具\",{\"0\":{\"3096\":1}}],[\"jdk早期版本存在selector\",{\"1\":{\"3090\":1}}],[\"jdk动态代理实现事务管理\",{\"0\":{\"3005\":1}}],[\"jdk动态代理基于接口实现\",{\"1\":{\"2994\":1}}],[\"jdk动态代理为什么只能代理接口而不能代理类\",{\"1\":{\"2994\":1}}],[\"jdk源码中\",{\"1\":{\"2987\":1}}],[\"jdk5引入枚举类型\",{\"1\":{\"2816\":1}}],[\"jdk中的priorityqueue为什么选择小顶堆而不是大顶堆实现\",{\"1\":{\"2588\":1}}],[\"jdk中的priorityqueue是如何实现的\",{\"1\":{\"2564\":1}}],[\"jdk中的实现\",{\"1\":{\"2512\":1}}],[\"jdk提供的常用内置注解\",{\"1\":{\"3136\":1}}],[\"jdk提供的4个元注解及其作用\",{\"1\":{\"1064\":1}}],[\"jdk提供了4个标准元注解\",{\"1\":{\"3135\":1}}],[\"jdk提供了一系列开箱即用的命令行和图形化工具\",{\"1\":{\"3096\":1}}],[\"jdk提供了linkedhashmap类\",{\"1\":{\"2512\":1}}],[\"jdk9引入的模块系统\",{\"1\":{\"2994\":1}}],[\"jdk9引入的map\",{\"1\":{\"2415\":1}}],[\"jdk9标记为过时\",{\"1\":{\"2291\":1}}],[\"jdk9+不可变map\",{\"1\":{\"2406\":1}}],[\"jdk9+\",{\"1\":{\"2289\":1}}],[\"jdk9对string的实现进行了优化\",{\"1\":{\"2289\":1}}],[\"jdk9及以上版本的结构变化\",{\"0\":{\"2289\":1}}],[\"jdk9及以上g1为默认收集器\",{\"1\":{\"818\":1,\"852\":1,\"886\":1,\"920\":1}}],[\"jdk7引入的methodhandle比反射性能更好\",{\"1\":{\"2993\":1}}],[\"jdk7引入的try\",{\"1\":{\"1247\":1,\"2835\":1,\"2951\":1}}],[\"jdk7分段锁\",{\"1\":{\"2429\":1}}],[\"jdk7\",{\"1\":{\"2403\":1}}],[\"jdk7改进原因\",{\"1\":{\"2296\":1}}],[\"jdk7及之后\",{\"1\":{\"2272\":1}}],[\"jdk7+推荐使用standardcharsets类避免检查异常\",{\"1\":{\"2884\":1}}],[\"jdk7+可使用try\",{\"1\":{\"2831\":1}}],[\"jdk7+允许协变返回类型\",{\"1\":{\"2737\":1}}],[\"jdk7+中\",{\"1\":{\"2311\":1}}],[\"jdk7+实现\",{\"1\":{\"2296\":1}}],[\"jdk7+\",{\"1\":{\"2246\":2,\"2297\":1,\"2974\":1,\"3136\":1}}],[\"jdk6引入的注解处理工具\",{\"1\":{\"3147\":1}}],[\"jdk6与jdk7+的intern\",{\"1\":{\"2297\":1}}],[\"jdk6与jdk7+的substring实现有显著差异\",{\"1\":{\"2296\":1}}],[\"jdk6实现\",{\"1\":{\"2296\":1}}],[\"jdk6及之前\",{\"1\":{\"2272\":1}}],[\"jdk6\",{\"1\":{\"2246\":2,\"2297\":1}}],[\"jdk字体类初始化异常问题\",{\"0\":{\"1557\":1}}],[\"jdk基础镜像引用\",{\"1\":{\"1551\":1}}],[\"jdk1\",{\"1\":{\"1369\":2,\"1371\":1,\"1372\":1,\"1731\":1,\"1839\":1,\"2205\":1,\"2291\":1,\"2885\":2,\"3079\":1,\"3080\":1}}],[\"jdk17引入zgc\",{\"1\":{\"818\":1,\"852\":1,\"886\":1,\"920\":1}}],[\"jdk原生支持有限\",{\"1\":{\"1316\":1}}],[\"jdk8之前不支持重复注解\",{\"1\":{\"3153\":1}}],[\"jdk8之前不支持重复注解和类型注解\",{\"1\":{\"1084\":1}}],[\"jdk8版本\",{\"1\":{\"2804\":1}}],[\"jdk8允许接口包含默认方法\",{\"1\":{\"2780\":1}}],[\"jdk8中的接口有哪些新特性\",{\"0\":{\"2780\":1}}],[\"jdk8对hashmap的主要优化包括\",{\"1\":{\"2428\":1}}],[\"jdk8及以上使用cas+synchronized实现\",{\"1\":{\"2426\":1}}],[\"jdk8及以上已移除\",{\"1\":{\"793\":2,\"827\":2,\"861\":2,\"895\":2}}],[\"jdk8+\",{\"0\":{\"2402\":1},\"1\":{\"2403\":1,\"2407\":1,\"2542\":1,\"2966\":1,\"3136\":1}}],[\"jdk8+依赖\",{\"1\":{\"2227\":1}}],[\"jdk8\",{\"0\":{\"2288\":1,\"2291\":1},\"1\":{\"1548\":2,\"1697\":1,\"2263\":2,\"2287\":1,\"2400\":1,\"2429\":1}}],[\"jdk8注解新特性\",{\"0\":{\"1066\":1}}],[\"jdk内置的注解\",{\"1\":{\"1063\":1}}],[\"jdk版本演进\",{\"0\":{\"2520\":1}}],[\"jdk版本特性差异\",{\"0\":{\"2549\":1,\"2569\":1,\"2595\":1,\"2651\":1}}],[\"jdk版本特性\",{\"0\":{\"2367\":1,\"2404\":1,\"2463\":1,\"2624\":1,\"2677\":1}}],[\"jdk版本中intern\",{\"0\":{\"2246\":1}}],[\"jdk版本\",{\"1\":{\"818\":1,\"852\":1,\"886\":1,\"920\":1,\"2246\":1,\"2320\":1}}],[\"jdk版本选择\",{\"1\":{\"566\":1,\"2355\":1}}],[\"jdk\",{\"0\":{\"1059\":1,\"2329\":1,\"2358\":1,\"2394\":1},\"1\":{\"574\":5,\"575\":1,\"662\":2,\"672\":1,\"691\":1,\"702\":1,\"706\":1,\"707\":1,\"715\":1,\"719\":1,\"999\":1,\"1005\":1,\"1044\":1,\"1056\":1,\"1059\":7,\"1178\":3,\"1190\":1,\"1191\":1,\"1196\":9,\"1197\":2,\"1198\":6,\"1237\":1,\"1548\":1,\"1557\":2,\"1729\":1,\"1839\":1,\"2020\":1,\"2035\":1,\"2062\":2,\"2246\":3,\"2318\":2,\"2320\":8,\"2323\":1,\"2325\":2,\"2326\":1,\"2328\":1,\"2329\":1,\"2336\":1,\"2351\":1,\"2355\":2,\"2357\":2,\"2358\":4,\"2367\":4,\"2369\":1,\"2378\":1,\"2394\":1,\"2395\":1,\"2404\":6,\"2433\":2,\"2434\":9,\"2448\":1,\"2452\":1,\"2463\":5,\"2491\":8,\"2506\":1,\"2509\":1,\"2513\":1,\"2520\":6,\"2527\":1,\"2533\":1,\"2541\":9,\"2549\":4,\"2569\":5,\"2596\":8,\"2613\":1,\"2616\":8,\"2624\":4,\"2651\":5,\"2672\":1,\"2677\":3,\"3010\":1,\"3120\":1,\"3129\":1}}],[\"jdk的商业特性\",{\"1\":{\"480\":1}}],[\"jdbc等多种协议\",{\"1\":{\"3106\":1}}],[\"jdbc驱动加载时\",{\"1\":{\"756\":1}}],[\"jdbc<\",{\"1\":{\"438\":1}}],[\"jdbc依赖来简化jdbc的使用\",{\"1\":{\"438\":1}}],[\"jdbc\",{\"0\":{\"438\":1},\"1\":{\"367\":2,\"404\":1,\"406\":2,\"1644\":1,\"3005\":1}}],[\"jdbctemplate还处理了异常\",{\"1\":{\"373\":1}}],[\"jdbctemplate简化了jdbc的使用\",{\"1\":{\"373\":1}}],[\"jdbctemplate的使用\",{\"0\":{\"366\":1}}],[\"jdbctemplate\",{\"1\":{\"363\":1,\"366\":4,\"367\":3,\"438\":7,\"3049\":2}}],[\"jdbc支持\",{\"0\":{\"363\":1}}],[\"j2ee\",{\"1\":{\"312\":1,\"577\":1}}],[\"john\",{\"1\":{\"3003\":1,\"3005\":2,\"3007\":3,\"3010\":2}}],[\"johnson发布了\",{\"1\":{\"312\":1}}],[\"journal=true\",{\"1\":{\"1764\":1}}],[\"journaling\",{\"1\":{\"1739\":1}}],[\"journal日志\",{\"1\":{\"1739\":2}}],[\"journal\",{\"1\":{\"1734\":2,\"1764\":1}}],[\"jobs\",{\"1\":{\"2020\":1}}],[\"jobid`\",{\"1\":{\"1687\":2}}],[\"job数据库\",{\"0\":{\"1687\":1}}],[\"job部署\",{\"0\":{\"1686\":1}}],[\"job所需的sql文件导入数据库\",{\"1\":{\"1640\":1}}],[\"job\",{\"0\":{\"1641\":1,\"1644\":1,\"1649\":1,\"1688\":1},\"1\":{\"1610\":1,\"1641\":1,\"1644\":9,\"1649\":21,\"1678\":1,\"1682\":1,\"1686\":1,\"1687\":14,\"1688\":21}}],[\"jol<\",{\"1\":{\"711\":1}}],[\"joining\",{\"0\":{\"2221\":1},\"1\":{\"2221\":2}}],[\"joinpoint\",{\"1\":{\"267\":7,\"335\":1,\"338\":6,\"1068\":4,\"3154\":2,\"3170\":6}}],[\"join中发现交叉关联\",{\"1\":{\"125\":1}}],[\"join\",{\"1\":{\"125\":3,\"471\":1,\"675\":2,\"677\":1,\"2197\":2,\"2310\":1,\"2328\":1}}],[\"jwtauthenticationfilter\",{\"1\":{\"456\":2}}],[\"jwtsecret\",{\"1\":{\"1638\":1}}],[\"jwts\",{\"1\":{\"456\":3}}],[\"jwt工具类\",{\"1\":{\"456\":1}}],[\"jwt<\",{\"1\":{\"307\":1}}],[\"jwt不允许续签时间\",{\"1\":{\"306\":1}}],[\"jwt有个弊端\",{\"1\":{\"306\":1}}],[\"jwtutils\",{\"1\":{\"456\":4}}],[\"jwtutil\",{\"1\":{\"279\":4}}],[\"jwt\",{\"0\":{\"303\":1,\"304\":1,\"305\":1,\"306\":1,\"3293\":1},\"1\":{\"279\":12,\"303\":9,\"304\":6,\"305\":10,\"306\":3,\"307\":1,\"2012\":1}}],[\"jwt校验\",{\"0\":{\"279\":1}}],[\"jain\",{\"1\":{\"3204\":1,\"3217\":1}}],[\"jaggedarray\",{\"1\":{\"2167\":4,\"2180\":6}}],[\"ja\",{\"1\":{\"1873\":2}}],[\"january\",{\"1\":{\"545\":1}}],[\"jar包相关命令\",{\"0\":{\"1893\":1}}],[\"jar包名称不一致\",{\"1\":{\"1697\":1}}],[\"jar放在公司提供的脚本package文件夹下\",{\"1\":{\"1645\":1}}],[\"jar拷贝到plugins中\",{\"1\":{\"1559\":1}}],[\"jar\",{\"1\":{\"476\":2,\"477\":2,\"480\":2,\"742\":1,\"804\":2,\"805\":2,\"806\":2,\"838\":2,\"839\":2,\"840\":2,\"872\":2,\"873\":2,\"874\":2,\"906\":2,\"907\":2,\"908\":2,\"1438\":2,\"1548\":6,\"1551\":2,\"1697\":6,\"1731\":3,\"1894\":2,\"1895\":4,\"1896\":2,\"1897\":1,\"3104\":3,\"3107\":2,\"3246\":9}}],[\"jacky\",{\"1\":{\"1873\":1}}],[\"jackson\",{\"1\":{\"1438\":2,\"1440\":2,\"1443\":1,\"1444\":1}}],[\"jacksonobjectmapperbuilder\",{\"1\":{\"282\":2}}],[\"jackson2objectmapperbuildercustomizer\",{\"1\":{\"282\":3}}],[\"jackson全局转化long类型为string\",{\"1\":{\"282\":1}}],[\"jacksonconfig\",{\"1\":{\"282\":1}}],[\"jacoco\",{\"1\":{\"456\":1}}],[\"jakarta\",{\"1\":{\"269\":1}}],[\"java新特性\",{\"0\":{\"3297\":1}}],[\"javafileobject\",{\"1\":{\"3162\":1}}],[\"java网络调试\",{\"1\":{\"3107\":1}}],[\"java网络编程主要涉及传输层\",{\"1\":{\"3059\":1}}],[\"java探针\",{\"1\":{\"3104\":1}}],[\"java应用网络诊断\",{\"0\":{\"3100\":1}}],[\"java应用更好地适应docker\",{\"1\":{\"571\":1}}],[\"java监控与管理控制台\",{\"1\":{\"3096\":1}}],[\"java序列化\",{\"1\":{\"3085\":1}}],[\"java原生序列化\",{\"1\":{\"3085\":1}}],[\"java集合只能存储object类型的对象\",{\"1\":{\"3017\":1}}],[\"java集合框架是泛型应用的典范\",{\"1\":{\"3046\":1}}],[\"java集合框架中的泛型应用\",{\"0\":{\"3045\":1}}],[\"java集合框架设计者在时间和空间之间选择了平衡\",{\"1\":{\"2455\":1}}],[\"java集合框架主要分为三大体系\",{\"1\":{\"1173\":1}}],[\"javassist等字节码生成框架\",{\"1\":{\"3010\":1}}],[\"javascript\",{\"1\":{\"1430\":2,\"1436\":2,\"1437\":1,\"1438\":1,\"1446\":2,\"1448\":1,\"2325\":1}}],[\"java是静态类型语言\",{\"1\":{\"2992\":1}}],[\"java是一种强类型语言\",{\"1\":{\"2097\":1}}],[\"java反射机制提供了访问私有成员的能力\",{\"1\":{\"2988\":1}}],[\"java反射机制的底层实现依赖于jvm提供的相关指令和数据结构\",{\"1\":{\"1263\":1}}],[\"java反射能够访问私有成员是因为它通过调用setaccessible\",{\"1\":{\"2975\":1}}],[\"java反射api主要包含在java\",{\"1\":{\"2966\":1}}],[\"java异常体系的核心类层次结构如下\",{\"1\":{\"2925\":1}}],[\"java异常体系以throwable为根类\",{\"1\":{\"2923\":1}}],[\"java没有原生proactor模式实现\",{\"1\":{\"2921\":1}}],[\"java标准库没有提供直接检测文件编码的api\",{\"1\":{\"2885\":1}}],[\"java支持多种字符集\",{\"1\":{\"2881\":1}}],[\"java规范保证反射无法实例化枚举\",{\"1\":{\"2826\":1}}],[\"java保留goto作为关键字但未实现其功能\",{\"1\":{\"2814\":1}}],[\"java保留这些关键字是为了保持语言的向后兼容性和未来的扩展性\",{\"1\":{\"2085\":1}}],[\"java四种权限修饰符的访问控制范围如下表所示\",{\"1\":{\"2794\":1}}],[\"java设计哲学强调简单安全\",{\"1\":{\"2790\":1}}],[\"java方法由访问修饰符\",{\"1\":{\"2784\":1}}],[\"java使用import语句导入其他包的类\",{\"1\":{\"2768\":1}}],[\"java使用双轴快速排序\",{\"1\":{\"2357\":1}}],[\"java变量根据作用域可分为\",{\"1\":{\"2767\":1}}],[\"java变量类型分为基本类型和引用类型两大类\",{\"1\":{\"2766\":1}}],[\"java包名通常采用反转域名的方式命名\",{\"1\":{\"2763\":1}}],[\"java类支持多种修饰符\",{\"1\":{\"2761\":1}}],[\"java类文件\",{\"1\":{\"723\":1}}],[\"java面向对象编程的基础构建块包括类\",{\"1\":{\"2756\":1}}],[\"java不支持类的多继承\",{\"1\":{\"2753\":1}}],[\"java为什么不支持多继承\",{\"0\":{\"2753\":1}}],[\"java通过异常处理机制提供了一种结构化的错误处理方式\",{\"1\":{\"2923\":1}}],[\"java通过访问修饰符控制包内类的可见性\",{\"1\":{\"2765\":1}}],[\"java通过接口实现了多继承的功能\",{\"1\":{\"2753\":1}}],[\"java通过方法重写和方法重载实现多态\",{\"1\":{\"2739\":1}}],[\"java通过多种机制平衡兼容性与创新\",{\"1\":{\"570\":1}}],[\"javabean是遵循特定规范的java类\",{\"1\":{\"2734\":1}}],[\"javabean规范\",{\"0\":{\"2734\":1}}],[\"java提供统一的socket\",{\"1\":{\"3068\":1}}],[\"java提供四种访问控制级别\",{\"1\":{\"2733\":1}}],[\"java提供了两个主要的可变字符串类\",{\"1\":{\"2261\":1}}],[\"java提供了java\",{\"1\":{\"2148\":1,\"2215\":1}}],[\"java提供了四个访问控制关键字\",{\"1\":{\"2076\":1}}],[\"java提供了三层类加载器\",{\"1\":{\"1147\":1}}],[\"java提供了多个用于并发编程的关键字\",{\"1\":{\"654\":1}}],[\"java提供了多种锁实现\",{\"1\":{\"637\":1}}],[\"java官方推荐使用deque接口替代stack类的主要原因是\",{\"1\":{\"2564\":1}}],[\"java避免使用goto语句主要是因为goto语句会破坏程序的结构化特性\",{\"1\":{\"2138\":1}}],[\"java流程控制的设计体现了以下思想\",{\"1\":{\"2136\":1}}],[\"java运算符的设计体现了以下思想\",{\"1\":{\"2117\":1}}],[\"java区分基本数据类型和引用数据类型主要是出于效率和设计的考虑\",{\"1\":{\"2105\":1}}],[\"java数据类型的设计体现了以下思想\",{\"1\":{\"2103\":1}}],[\"java共有8种基本数据类型\",{\"1\":{\"2099\":1}}],[\"java注释的设计体现了以下思想\",{\"1\":{\"2093\":1}}],[\"java关键字按功能可分为以下几类\",{\"1\":{\"2806\":1}}],[\"java关键字是被语言赋予特定含义的保留单词\",{\"1\":{\"2804\":1}}],[\"java关键字是大小写敏感的\",{\"1\":{\"2084\":1}}],[\"java关键字的设计体现了以下思想\",{\"1\":{\"2083\":1}}],[\"java基础\",{\"0\":{\"2073\":1,\"2086\":1,\"2096\":1,\"2106\":1,\"2120\":1,\"3324\":1}}],[\"javaw\",{\"1\":{\"1896\":1}}],[\"java常用linux命令\",{\"0\":{\"1835\":1}}],[\"javaagent参数加载监控逻辑\",{\"1\":{\"3111\":1}}],[\"javaagent\",{\"1\":{\"1551\":2,\"3104\":1}}],[\"java8\",{\"0\":{\"1641\":1},\"1\":{\"1536\":1,\"1552\":1,\"1610\":1}}],[\"java对象\",{\"1\":{\"1439\":5}}],[\"java的异常分类设计基于错误的可预测性和处理责任\",{\"1\":{\"2931\":1}}],[\"java的访问控制关键字提供了灵活而精细的访问控制机制\",{\"1\":{\"2085\":1}}],[\"java的受检异常设计基于\",{\"1\":{\"1254\":1}}],[\"java的诞生与早期发展\",{\"0\":{\"574\":1}}],[\"java开发实践等方面\",{\"1\":{\"1089\":1}}],[\"java始终采用值传递\",{\"1\":{\"1058\":1}}],[\"java始终将向后兼容性作为核心设计目标\",{\"1\":{\"562\":1}}],[\"java语法设计遵循\",{\"1\":{\"1046\":1}}],[\"java语法设计哲学\",{\"0\":{\"1046\":1}}],[\"java语法体系可分为基础语法\",{\"1\":{\"1033\":1}}],[\"java语法体系概览\",{\"0\":{\"1033\":1}}],[\"java语言正式发布\",{\"1\":{\"574\":1}}],[\"java语言的发展伴随着jdk版本的迭代\",{\"1\":{\"573\":1}}],[\"java语言与jdk的演进\",{\"0\":{\"573\":1}}],[\"javavirtualmachines\",{\"1\":{\"999\":1,\"1005\":1}}],[\"javadocmethod\",{\"1\":{\"2042\":1}}],[\"javadoc注释\",{\"0\":{\"2035\":1}}],[\"javadocexecutable>\",{\"1\":{\"999\":1,\"1005\":1}}],[\"javadoc<\",{\"1\":{\"999\":1,\"1005\":1}}],[\"javadocs<\",{\"1\":{\"999\":1,\"1005\":1}}],[\"javadoc\",{\"1\":{\"999\":1,\"1005\":2}}],[\"java代码\",{\"1\":{\"727\":1,\"1440\":1,\"1443\":1,\"1444\":1}}],[\"javap\",{\"1\":{\"727\":1}}],[\"javac\",{\"1\":{\"727\":1}}],[\"java虚拟机\",{\"1\":{\"689\":1,\"1141\":1}}],[\"java线程调度采用抢占式调度模型\",{\"1\":{\"606\":1}}],[\"java线程具有6种状态\",{\"1\":{\"605\":1}}],[\"java内存模型\",{\"1\":{\"602\":1}}],[\"java中配置sip\",{\"1\":{\"3214\":1}}],[\"java中实现事务状态管理的示例代码\",{\"1\":{\"3208\":1}}],[\"java中可以通过jain\",{\"1\":{\"3190\":1}}],[\"java中通过java\",{\"1\":{\"3064\":1}}],[\"java中允许反射访问\",{\"1\":{\"3010\":1}}],[\"java中使用exports语句导出包\",{\"1\":{\"2994\":1}}],[\"java中使用extends关键字实现单继承\",{\"1\":{\"2735\":1}}],[\"java中方法参数传递严格遵循\",{\"1\":{\"2785\":1}}],[\"java中字符串有多种创建方式\",{\"1\":{\"2187\":1}}],[\"java中还有一些其他运算符\",{\"1\":{\"2115\":1}}],[\"java中数组初始化有三种方式\",{\"1\":{\"1160\":1}}],[\"java中只有值传递\",{\"1\":{\"1058\":1}}],[\"java中的sip编程基础\",{\"0\":{\"3190\":1}}],[\"java中的string类是最常用的类之一\",{\"1\":{\"2284\":1}}],[\"java中的缓冲流主要包括bufferedinputstream\",{\"1\":{\"2863\":1}}],[\"java中的collections\",{\"1\":{\"2357\":2}}],[\"java中的class对象是单例的\",{\"1\":{\"1279\":1}}],[\"java中的字符串由java\",{\"1\":{\"2185\":1}}],[\"java中的浮点数\",{\"1\":{\"2105\":1}}],[\"java中的数据类型转换分为自动类型转换和强制类型转换\",{\"1\":{\"2101\":1}}],[\"java中的数组是定长的\",{\"1\":{\"1168\":1}}],[\"java中的引用数据类型包括类\",{\"1\":{\"2100\":1}}],[\"java中的访问控制关键字有什么设计优势\",{\"1\":{\"2085\":1}}],[\"java中的动态代理主要通过java\",{\"1\":{\"1267\":1}}],[\"java中的值传递与引用传递区别\",{\"0\":{\"1058\":1}}],[\"java中的原子类\",{\"1\":{\"646\":1,\"663\":1}}],[\"java中的threadpoolexecutor是线程池的核心实现\",{\"1\":{\"597\":1}}],[\"java中声明\",{\"1\":{\"490\":1}}],[\"java并发\",{\"0\":{\"586\":1,\"603\":1,\"619\":1,\"635\":1,\"652\":1,\"669\":1}}],[\"java构建工具经历了从复杂到简化的发展过程\",{\"1\":{\"582\":1}}],[\"java生态的繁荣离不开丰富的框架支持\",{\"1\":{\"579\":1}}],[\"java生态的发展离不开开源社区的贡献\",{\"1\":{\"564\":1}}],[\"java生态通过清晰的模块边界和标准规范促进了生态系统的健康发展\",{\"1\":{\"563\":1}}],[\"java生态系统如何保持向后兼容性的同时实现创新\",{\"0\":{\"570\":1}}],[\"java生态系统的成功得益于其独特的设计思想\",{\"1\":{\"561\":1}}],[\"java生态系统是一个庞大而活跃的技术体系\",{\"1\":{\"559\":1}}],[\"java生态系统演进\",{\"0\":{\"558\":1}}],[\"java能够在不破坏现有实现的情况下扩展接口功能\",{\"1\":{\"549\":1}}],[\"java团队采用了渐进式改进而非颠覆性变革\",{\"1\":{\"514\":1}}],[\"java编译器在生成字节码时\",{\"1\":{\"504\":1}}],[\"java示例\",{\"1\":{\"490\":1}}],[\"java进一步整合了开源生态\",{\"1\":{\"488\":1}}],[\"java飞行记录器\",{\"1\":{\"480\":1}}],[\"java文件夹当中\",{\"0\":{\"1729\":1}}],[\"java文件\",{\"1\":{\"479\":1,\"1221\":1}}],[\"javajavajava\",{\"1\":{\"472\":1}}],[\"java<\",{\"1\":{\"438\":1,\"439\":1,\"440\":1}}],[\"java等文件\",{\"1\":{\"299\":1}}],[\"javax\",{\"1\":{\"286\":1,\"289\":1,\"1094\":6,\"1095\":2,\"1431\":5,\"1443\":5,\"1444\":5,\"3147\":3,\"3165\":1,\"3190\":5,\"3205\":3,\"3206\":8,\"3208\":6,\"3209\":4,\"3212\":4,\"3214\":5,\"3215\":4,\"3217\":3,\"3218\":6}}],[\"java\",{\"0\":{\"296\":1,\"464\":1,\"494\":1,\"496\":1,\"521\":1,\"523\":1,\"534\":1,\"556\":1,\"575\":1,\"1126\":1,\"1132\":1,\"1135\":1,\"1313\":1,\"1557\":1,\"1730\":1,\"2219\":1,\"3063\":1,\"3077\":1,\"3120\":1,\"3216\":1,\"3298\":1},\"1\":{\"250\":2,\"269\":8,\"270\":2,\"279\":1,\"286\":11,\"289\":3,\"293\":2,\"297\":1,\"298\":1,\"393\":5,\"439\":1,\"465\":2,\"468\":5,\"469\":1,\"471\":7,\"472\":6,\"473\":2,\"474\":1,\"476\":2,\"477\":1,\"479\":8,\"480\":2,\"482\":1,\"483\":1,\"486\":1,\"487\":1,\"488\":1,\"490\":1,\"494\":2,\"497\":1,\"499\":1,\"500\":7,\"501\":2,\"502\":2,\"503\":1,\"505\":1,\"507\":1,\"508\":1,\"521\":2,\"526\":1,\"527\":1,\"535\":1,\"538\":2,\"540\":1,\"545\":1,\"548\":1,\"549\":1,\"556\":1,\"557\":1,\"563\":1,\"574\":1,\"694\":1,\"727\":1,\"728\":10,\"735\":1,\"772\":1,\"801\":1,\"804\":1,\"805\":1,\"806\":1,\"835\":1,\"838\":1,\"839\":1,\"840\":1,\"869\":1,\"872\":1,\"873\":1,\"874\":1,\"903\":1,\"906\":1,\"907\":1,\"908\":1,\"999\":1,\"1005\":2,\"1041\":9,\"1052\":2,\"1094\":1,\"1095\":1,\"1126\":1,\"1160\":1,\"1162\":2,\"1178\":8,\"1221\":1,\"1222\":1,\"1224\":2,\"1225\":2,\"1228\":9,\"1231\":1,\"1232\":5,\"1238\":16,\"1254\":1,\"1260\":2,\"1264\":4,\"1267\":3,\"1269\":1,\"1270\":1,\"1280\":1,\"1281\":2,\"1313\":1,\"1333\":1,\"1369\":4,\"1371\":2,\"1372\":2,\"1431\":1,\"1438\":4,\"1440\":2,\"1443\":1,\"1444\":2,\"1510\":1,\"1512\":1,\"1536\":2,\"1548\":3,\"1551\":4,\"1552\":1,\"1558\":6,\"1641\":1,\"1697\":2,\"1722\":1,\"1723\":1,\"1724\":4,\"1725\":1,\"1728\":1,\"1729\":1,\"1730\":1,\"1731\":7,\"1865\":1,\"1895\":2,\"2020\":2,\"2045\":1,\"2147\":1,\"2149\":1,\"2150\":1,\"2151\":1,\"2170\":1,\"2189\":3,\"2195\":2,\"2196\":2,\"2204\":3,\"2216\":1,\"2217\":1,\"2218\":1,\"2219\":1,\"2220\":1,\"2221\":2,\"2223\":1,\"2224\":1,\"2228\":1,\"2234\":2,\"2243\":6,\"2263\":2,\"2265\":2,\"2269\":1,\"2282\":1,\"2287\":1,\"2323\":4,\"2324\":2,\"2325\":5,\"2326\":4,\"2327\":3,\"2328\":5,\"2329\":4,\"2369\":2,\"2373\":5,\"2406\":2,\"2407\":2,\"2408\":2,\"2409\":3,\"2410\":6,\"2427\":2,\"2429\":4,\"2465\":4,\"2466\":4,\"2467\":3,\"2468\":2,\"2485\":1,\"2512\":1,\"2513\":5,\"2522\":5,\"2523\":6,\"2524\":2,\"2525\":4,\"2544\":3,\"2685\":1,\"2698\":1,\"2768\":4,\"2820\":1,\"2831\":2,\"2832\":2,\"2833\":3,\"2837\":7,\"2843\":3,\"2844\":3,\"2845\":5,\"2849\":7,\"2855\":6,\"2856\":5,\"2857\":5,\"2861\":6,\"2866\":5,\"2867\":5,\"2868\":5,\"2873\":2,\"2878\":4,\"2879\":4,\"2880\":8,\"2881\":2,\"2885\":6,\"2891\":3,\"2892\":6,\"2893\":3,\"2897\":3,\"2902\":3,\"2903\":4,\"2904\":2,\"2905\":2,\"2909\":2,\"2911\":1,\"2914\":1,\"2915\":5,\"2916\":9,\"2917\":5,\"2921\":18,\"2927\":3,\"2931\":1,\"2938\":1,\"2942\":1,\"2968\":2,\"2969\":1,\"2970\":1,\"2971\":1,\"2974\":3,\"2983\":1,\"2984\":1,\"2986\":1,\"2989\":2,\"2994\":2,\"3002\":3,\"3003\":2,\"3005\":5,\"3007\":4,\"3010\":3,\"3064\":1,\"3065\":9,\"3066\":7,\"3072\":1,\"3091\":1,\"3102\":1,\"3104\":1,\"3107\":1,\"3111\":1,\"3113\":1,\"3135\":1,\"3137\":1,\"3147\":1,\"3149\":2,\"3164\":1,\"3165\":1,\"3190\":2,\"3205\":1,\"3206\":2,\"3212\":1,\"3214\":3,\"3215\":3,\"3217\":2,\"3246\":2}}],[\"jstat\",{\"1\":{\"3100\":2}}],[\"jstack\",{\"1\":{\"3096\":2,\"3110\":1}}],[\"js对象无法使用jquery里面的功能\",{\"1\":{\"1449\":1}}],[\"js对象和jquery对象转换\",{\"0\":{\"1449\":1}}],[\"jsdiv\",{\"1\":{\"1447\":3,\"1449\":4}}],[\"js方式\",{\"1\":{\"1447\":1,\"1449\":1}}],[\"jsp则转发给tomcat服务器处理\",{\"1\":{\"1401\":1}}],[\"jsp\",{\"1\":{\"382\":1}}],[\"json反序列化可能产生null\",{\"1\":{\"2053\":1}}],[\"json配置\",{\"0\":{\"1803\":1}}],[\"json实时在线查看日志打印情况\",{\"1\":{\"1738\":1}}],[\"json中\",{\"1\":{\"1738\":1}}],[\"json填入registry\",{\"1\":{\"1669\":1}}],[\"json填入insecure\",{\"1\":{\"1666\":1}}],[\"json填入以下内容\",{\"1\":{\"1621\":1,\"1753\":1}}],[\"json需要重启docker\",{\"1\":{\"1632\":1}}],[\"json字符串\",{\"1\":{\"1439\":10}}],[\"json转list<user>\",{\"1\":{\"1439\":2}}],[\"json转\",{\"1\":{\"1439\":2}}],[\"json转map<string\",{\"1\":{\"1439\":4}}],[\"json转user对象\",{\"1\":{\"1439\":2}}],[\"json转换工具的使用\",{\"1\":{\"1439\":1}}],[\"json转换工具的介绍\",{\"0\":{\"1438\":1}}],[\"json转换练习\",{\"0\":{\"1439\":1}}],[\"json回顾\",{\"0\":{\"1437\":1}}],[\"json序列化\",{\"1\":{\"1266\":1}}],[\"jsonwebtoken<\",{\"1\":{\"456\":1}}],[\"jsonutil\",{\"1\":{\"289\":2}}],[\"jsonobject\",{\"1\":{\"289\":3}}],[\"jsonserialize\",{\"1\":{\"282\":1}}],[\"json\",{\"1\":{\"267\":2,\"285\":2,\"289\":2,\"303\":3,\"471\":2,\"1433\":1,\"1434\":1,\"1435\":1,\"1436\":2,\"1437\":2,\"1438\":6,\"1439\":25,\"1440\":7,\"1443\":4,\"1444\":4,\"1518\":1,\"1526\":1,\"1615\":2,\"1675\":2,\"1738\":2,\"1746\":2,\"1914\":1,\"3085\":1}}],[\"js\",{\"0\":{\"3306\":1},\"1\":{\"266\":2,\"1401\":1,\"1433\":4,\"1434\":4,\"1435\":4,\"1436\":4,\"1440\":2,\"1444\":1,\"1446\":1,\"1447\":2,\"1448\":2,\"1449\":8,\"1450\":3,\"1454\":5,\"1455\":2,\"1456\":2,\"1457\":2,\"1458\":2,\"1459\":2,\"1461\":2,\"1462\":2,\"1463\":2,\"1464\":2,\"1467\":2,\"1469\":2}}],[\"js版本\",{\"1\":{\"266\":1}}],[\"kh2mwtynw5bahl5ewr0dg12ugrlowfhouwkls0tls1ftkqgq0vsvelgsunbveutls0tlqo=\",{\"1\":{\"3273\":1}}],[\"kdsemrhvnvawel0yjnkbk1sc3dhuvlevlfrrev4smtlvzvoyldsamjhbhpkr1z1wlhjdfkyrxdia\",{\"1\":{\"3273\":1}}],[\"k为当前字符串长度\",{\"1\":{\"2723\":1}}],[\"k>\",{\"1\":{\"2655\":3}}],[\"k++\",{\"1\":{\"2078\":1,\"2183\":1}}],[\"k外\",{\"1\":{\"1998\":1}}],[\"k参数\",{\"1\":{\"1877\":1}}],[\"ks\",{\"1\":{\"1635\":2,\"1638\":1}}],[\"kk\",{\"1\":{\"1633\":4,\"1634\":1,\"1635\":1,\"1637\":3,\"1638\":1,\"1658\":2,\"1659\":1,\"1667\":1,\"1675\":1,\"1677\":5}}],[\"kkzone=cn\",{\"1\":{\"1633\":1,\"1637\":1,\"1677\":1}}],[\"kk会自动安装docker\",{\"1\":{\"1632\":1}}],[\"kunpeng\",{\"1\":{\"1579\":1}}],[\"kubemsbdata\",{\"1\":{\"3278\":3,\"3282\":4}}],[\"kubemsbf\",{\"1\":{\"3273\":1}}],[\"kubemsb\",{\"1\":{\"3273\":10,\"3282\":1}}],[\"kubeadm\",{\"1\":{\"1675\":1}}],[\"kubeedge\",{\"1\":{\"1638\":1}}],[\"kubepodscidr\",{\"1\":{\"1638\":1}}],[\"kubekey\",{\"1\":{\"1635\":2,\"1638\":1}}],[\"kubelet\",{\"1\":{\"1634\":2,\"1638\":2,\"1675\":2}}],[\"kube\",{\"1\":{\"1634\":2,\"1638\":2,\"1675\":3,\"1677\":1,\"3273\":3,\"3282\":1}}],[\"kubernetesclient\",{\"1\":{\"3244\":1}}],[\"kubernetesdeploy\",{\"1\":{\"1656\":1,\"1711\":1}}],[\"kubernetes\",{\"1\":{\"1633\":1,\"1634\":1,\"1635\":5,\"1637\":1,\"1638\":5,\"1648\":18,\"1649\":18,\"1650\":126,\"1660\":3,\"1661\":7,\"1675\":2,\"1677\":1,\"1680\":1,\"1685\":18,\"1688\":18,\"1698\":7,\"1713\":139,\"3273\":19,\"3276\":1}}],[\"kubernetes环境\",{\"1\":{\"571\":1}}],[\"kubeshpere添加新节点\",{\"0\":{\"1658\":1}}],[\"kubeshpere流水线配置\",{\"0\":{\"280\":1}}],[\"kubeservicecidr\",{\"1\":{\"1638\":1}}],[\"kubesphere在线全流程搭建\",{\"0\":{\"1670\":1}}],[\"kubesphere的存储卷是属于分布式存储\",{\"1\":{\"1661\":1}}],[\"kubesphere自制应用\",{\"0\":{\"1647\":1}}],[\"kubesphere及k8s安装\",{\"0\":{\"1631\":1}}],[\"kubesphere\",{\"1\":{\"1609\":3,\"1632\":1,\"1633\":2,\"1635\":3,\"1637\":2,\"1638\":6,\"1648\":7,\"1649\":7,\"1650\":43,\"1661\":4,\"1667\":2,\"1675\":1,\"1677\":3,\"1680\":1,\"1685\":7,\"1688\":7,\"1698\":4,\"1713\":47}}],[\"kubesphere官方文档\",{\"1\":{\"1609\":1}}],[\"kubesphere创建ui\",{\"0\":{\"1543\":1}}],[\"kubesphere创建oap\",{\"0\":{\"1539\":1}}],[\"kubectl\",{\"1\":{\"280\":8,\"1634\":2,\"1656\":13,\"1658\":1,\"1660\":6,\"1677\":1,\"1711\":13,\"1808\":2,\"3273\":3,\"3276\":4,\"3278\":2}}],[\"kubeconfigid\",{\"1\":{\"1656\":1,\"1711\":1}}],[\"kubeconfig\",{\"1\":{\"280\":4,\"1656\":5,\"1711\":5,\"3273\":1}}],[\"kubeconfigfile\",{\"1\":{\"280\":1,\"1656\":1,\"1711\":1}}],[\"ky10\",{\"1\":{\"1579\":1}}],[\"know\",{\"1\":{\"1513\":1}}],[\"koi\",{\"1\":{\"1384\":2}}],[\"kotlin\",{\"1\":{\"585\":1}}],[\"kibana查询慢网络请求\",{\"1\":{\"3103\":1}}],[\"kibana组合\",{\"1\":{\"3103\":1}}],[\"kibana中也同步显示数据\",{\"1\":{\"1527\":1}}],[\"kibana展示消息全流程\",{\"1\":{\"1505\":1,\"1535\":1}}],[\"kibana并输入以下内容\",{\"1\":{\"1373\":1}}],[\"kibana端口\",{\"1\":{\"1367\":1}}],[\"kibana\",{\"0\":{\"1373\":1},\"1\":{\"1357\":1,\"1358\":3,\"1359\":1,\"1373\":8,\"1507\":2,\"1515\":1,\"1517\":4,\"1518\":6,\"1520\":5,\"1527\":2,\"1536\":1,\"3103\":1}}],[\"kibana安全认证\",{\"0\":{\"1356\":1}}],[\"kibana设置连接方式\",{\"1\":{\"1349\":1}}],[\"kibana其实有为我们提供认证登录的方式\",{\"1\":{\"1349\":1}}],[\"kind>\",{\"1\":{\"2027\":1}}],[\"kind\",{\"1\":{\"1087\":3,\"1638\":2,\"1648\":10,\"1649\":10,\"1650\":28,\"1660\":1,\"1661\":2,\"1685\":10,\"1688\":10,\"1698\":1,\"1713\":30,\"2027\":1,\"3273\":1,\"3276\":1}}],[\"killmode=process\",{\"1\":{\"1620\":1,\"1752\":1}}],[\"kill\",{\"1\":{\"125\":1,\"1620\":1,\"1736\":1,\"1752\":1,\"1845\":1,\"1856\":1,\"3246\":2}}],[\"kamailio\",{\"1\":{\"3228\":1}}],[\"kay\",{\"1\":{\"997\":1}}],[\"kafka端口\",{\"1\":{\"1367\":1}}],[\"kafka\",{\"0\":{\"1370\":1},\"1\":{\"130\":1,\"1347\":1,\"1369\":2,\"1370\":11,\"1530\":31,\"1531\":3,\"1532\":2,\"1533\":2,\"1534\":2,\"1535\":17,\"2010\":1,\"3104\":1}}],[\"klass\",{\"1\":{\"720\":1}}],[\"kfc\",{\"1\":{\"291\":2}}],[\"k8s在容器编排领域处于绝对领先的地位\",{\"1\":{\"3250\":1}}],[\"k8s在线｜离线部署\",{\"0\":{\"1608\":1}}],[\"k8sclient\",{\"1\":{\"3244\":3}}],[\"k8s的监控方案\",{\"1\":{\"3110\":1}}],[\"k8s集群的关闭是比较危险的行为\",{\"1\":{\"1632\":1}}],[\"k8s和kubeshere\",{\"1\":{\"1610\":1}}],[\"k8s所需差件\",{\"1\":{\"1610\":1}}],[\"k8s全部选这个\",{\"1\":{\"1476\":1}}],[\"k8s\",{\"1\":{\"280\":1,\"1636\":1,\"1648\":1,\"1649\":1,\"1650\":1,\"1660\":15,\"1685\":1,\"1688\":1,\"1713\":1,\"3265\":3,\"3266\":6,\"3267\":3,\"3273\":20,\"3276\":7,\"3278\":2,\"3282\":3}}],[\"kptenantid`\",{\"1\":{\"232\":1,\"1684\":1}}],[\"kp\",{\"1\":{\"232\":1,\"1684\":1}}],[\"kernelbuild\",{\"1\":{\"1487\":2}}],[\"kernel中罗列出来的长期支持版本\",{\"1\":{\"1472\":1}}],[\"kernel中罗列出来的是最新的稳定主线版本\",{\"1\":{\"1472\":1}}],[\"kernel\",{\"1\":{\"1472\":2,\"1475\":2,\"1476\":6,\"1480\":2,\"1481\":6,\"1482\":2,\"1483\":9,\"1488\":4,\"1496\":2,\"1498\":9,\"1499\":9,\"1660\":1}}],[\"keepalivetime\",{\"1\":{\"622\":1,\"2539\":1,\"3225\":2}}],[\"keepalive\",{\"1\":{\"216\":2,\"1111\":1,\"1385\":1,\"1417\":1,\"1595\":1,\"3125\":1}}],[\"keymanagerfactory\",{\"1\":{\"3214\":7,\"3237\":6}}],[\"keypattern\",{\"1\":{\"3170\":1}}],[\"keyproperty\",{\"1\":{\"3164\":1}}],[\"keyiterator\",{\"1\":{\"3079\":4}}],[\"keyid\",{\"1\":{\"1764\":1}}],[\"keygen\",{\"1\":{\"1841\":1}}],[\"key`\",{\"1\":{\"1687\":2}}],[\"key=\",{\"1\":{\"1677\":1}}],[\"key未命中的总次数\",{\"1\":{\"193\":1}}],[\"key的总数\",{\"1\":{\"193\":1}}],[\"key的所有部分必须是not\",{\"1\":{\"125\":1}}],[\"key加密\",{\"1\":{\"192\":1}}],[\"key过期\",{\"1\":{\"191\":1}}],[\"key4\",{\"1\":{\"140\":2}}],[\"key3\",{\"1\":{\"140\":1}}],[\"key2\",{\"1\":{\"140\":1,\"199\":1,\"203\":3,\"204\":2,\"206\":1}}],[\"key1\",{\"1\":{\"140\":1,\"199\":1,\"203\":3,\"204\":2,\"206\":1}}],[\"key分区上使用\",{\"1\":{\"125\":1}}],[\"key分区混合起来\",{\"1\":{\"125\":1}}],[\"keycache\",{\"1\":{\"125\":1}}],[\"keyset遍历后get获取值\",{\"1\":{\"2615\":1}}],[\"keyset\",{\"1\":{\"2059\":1,\"2407\":1,\"2420\":2,\"2615\":1,\"2665\":1,\"2694\":4}}],[\"keyserver\",{\"1\":{\"997\":4}}],[\"keys权限为600\",{\"1\":{\"1841\":1}}],[\"keystorepath\",{\"1\":{\"3206\":1,\"3214\":2}}],[\"keystorepassword\",{\"1\":{\"3206\":2,\"3214\":3}}],[\"keystore\",{\"1\":{\"1358\":3,\"3206\":1,\"3214\":8,\"3237\":7}}],[\"keys找到\",{\"1\":{\"998\":1}}],[\"keys命令慎用\",{\"1\":{\"211\":1}}],[\"keyspace\",{\"1\":{\"193\":2}}],[\"keys\",{\"1\":{\"125\":1,\"172\":1,\"193\":1,\"199\":1,\"997\":3,\"1841\":1}}],[\"keyname\",{\"1\":{\"125\":1}}],[\"keyfile\",{\"1\":{\"125\":2,\"1734\":3,\"1764\":7}}],[\"keyword\",{\"1\":{\"122\":1}}],[\"key\",{\"1\":{\"59\":1,\"89\":1,\"115\":7,\"125\":21,\"199\":8,\"200\":12,\"201\":11,\"202\":10,\"203\":7,\"204\":8,\"232\":23,\"279\":4,\"283\":10,\"285\":1,\"289\":3,\"307\":1,\"643\":4,\"997\":2,\"1132\":2,\"1181\":23,\"1196\":2,\"1228\":10,\"1315\":13,\"1324\":10,\"1417\":5,\"1474\":1,\"1677\":3,\"1684\":23,\"1687\":13,\"1881\":3,\"2059\":1,\"2307\":1,\"2398\":1,\"2407\":9,\"2419\":1,\"2420\":6,\"2429\":4,\"2512\":19,\"2534\":7,\"2599\":4,\"2600\":17,\"2604\":1,\"2612\":4,\"2615\":3,\"2623\":2,\"2628\":6,\"2629\":4,\"2654\":1,\"2655\":11,\"2669\":4,\"2675\":1,\"2680\":3,\"2682\":3,\"2683\":3,\"2684\":2,\"2685\":8,\"2693\":1,\"2694\":1,\"2697\":4,\"2916\":10,\"2921\":11,\"3019\":1,\"3020\":5,\"3046\":2,\"3079\":5,\"3086\":5,\"3118\":10,\"3170\":11,\"3273\":4}}],[\"k\",{\"1\":{\"193\":1,\"283\":3,\"1181\":5,\"1687\":1,\"2078\":4,\"2183\":4,\"2410\":2,\"2429\":2,\"2512\":5,\"2522\":1,\"2525\":1,\"2534\":2,\"2575\":14,\"2600\":8,\"2623\":1,\"2628\":2,\"2654\":1,\"2655\":3,\"2680\":2,\"2682\":3,\"2683\":5,\"2684\":1,\"2694\":1,\"2697\":2,\"2723\":1,\"3019\":1,\"3020\":2,\"3046\":1}}],[\"kv\",{\"1\":{\"127\":1}}],[\"记录路由路径\",{\"1\":{\"3211\":1}}],[\"记录事务状态变更\",{\"1\":{\"3208\":1}}],[\"记录消息传输路径\",{\"1\":{\"3180\":1}}],[\"记录所有反射调用\",{\"1\":{\"3011\":1}}],[\"记录执行时间\",{\"1\":{\"3002\":1}}],[\"记录返回结果\",{\"1\":{\"3002\":1}}],[\"记录参数\",{\"1\":{\"3002\":1}}],[\"记录方法执行开始\",{\"1\":{\"3002\":1}}],[\"记录方法调用后日志\",{\"1\":{\"1068\":1}}],[\"记录方法调用前日志\",{\"1\":{\"1068\":1}}],[\"记录反射调用\",{\"1\":{\"2993\":1,\"3010\":1}}],[\"记录日志\",{\"1\":{\"2956\":1}}],[\"记录详细异常日志便于排查\",{\"1\":{\"1337\":1}}],[\"记录详细日志便于调试\",{\"1\":{\"1107\":1}}],[\"记录已确认的报文\",{\"1\":{\"1312\":1}}],[\"记录异常日志\",{\"1\":{\"1068\":1}}],[\"记录slave接收master发送过来的指令字节对应的位置\",{\"1\":{\"167\":1}}],[\"记录发送给所有slave的指令字节对应的位置\",{\"1\":{\"167\":1}}],[\"记录\",{\"1\":{\"125\":3,\"480\":1}}],[\"正例\",{\"1\":{\"2770\":1}}],[\"正则替换\",{\"1\":{\"2196\":1}}],[\"正则表达式\",{\"1\":{\"38\":1}}],[\"正值表示低优先级\",{\"1\":{\"1882\":1}}],[\"正向代理就是一个人发送一个请求直接就到达了目标的服务器\",{\"1\":{\"1380\":1}}],[\"正读和反读都一样\",{\"1\":{\"1165\":1}}],[\"正常业务逻辑\",{\"1\":{\"2061\":1}}],[\"正常数据传输状态\",{\"1\":{\"1881\":1}}],[\"正常流量\",{\"0\":{\"1395\":1},\"1\":{\"1394\":1}}],[\"正常流程耗时\",{\"1\":{\"1250\":1}}],[\"正常限制访问频率\",{\"0\":{\"1395\":1},\"1\":{\"1394\":1}}],[\"正常执行\",{\"1\":{\"1191\":1,\"2342\":1}}],[\"正常执行路径上几乎没有性能损耗\",{\"1\":{\"506\":1}}],[\"正常关闭\",{\"1\":{\"125\":1}}],[\"正确理解和处理不同状态码\",{\"1\":{\"3196\":1}}],[\"正确处理返回值为0的情况\",{\"1\":{\"2920\":1}}],[\"正确处理线程池中的异常\",{\"0\":{\"632\":1}}],[\"正确实现事务状态机\",{\"1\":{\"3222\":1}}],[\"正确实现lru缓存\",{\"0\":{\"2642\":1}}],[\"正确实现invite事务的三次握手\",{\"1\":{\"1108\":1}}],[\"正确获取值\",{\"1\":{\"2605\":1}}],[\"正确方案\",{\"1\":{\"2449\":2,\"2508\":2}}],[\"正确方案3\",{\"1\":{\"2448\":1,\"2451\":1,\"2478\":1,\"2505\":1,\"2506\":1,\"2507\":1,\"2509\":1}}],[\"正确方案2\",{\"1\":{\"2448\":1,\"2450\":1,\"2451\":1,\"2452\":1,\"2478\":1,\"2505\":1,\"2506\":1,\"2507\":1,\"2509\":1}}],[\"正确方案1\",{\"1\":{\"2448\":1,\"2450\":1,\"2451\":1,\"2452\":1,\"2478\":1,\"2505\":1,\"2506\":1,\"2507\":1,\"2509\":1}}],[\"正确方式\",{\"1\":{\"1234\":1,\"1235\":1,\"1236\":1,\"2340\":1,\"2585\":1}}],[\"正确输入测试\",{\"1\":{\"2047\":1}}],[\"正确使用finally块\",{\"1\":{\"2959\":1}}],[\"正确使用缓冲区\",{\"1\":{\"1338\":1}}],[\"正确使用泛型通配符\",{\"0\":{\"1302\":1}}],[\"正确的处理方式包括\",{\"1\":{\"1254\":1}}],[\"正确解决方案2\",{\"1\":{\"1190\":1}}],[\"正确解决方案1\",{\"1\":{\"1190\":1}}],[\"正确做法\",{\"1\":{\"1053\":1,\"1077\":1,\"2614\":1}}],[\"正确\",{\"1\":{\"1038\":1,\"1079\":1,\"2480\":1,\"2533\":1,\"2534\":1,\"2536\":1,\"2539\":1}}],[\"正确停止线程\",{\"0\":{\"617\":1}}],[\"正确示例2\",{\"1\":{\"2279\":1}}],[\"正确示例1\",{\"1\":{\"2279\":1}}],[\"正确示例\",{\"1\":{\"491\":1,\"552\":1,\"553\":1,\"566\":1,\"1253\":1,\"1336\":1,\"1337\":1,\"1338\":1,\"2158\":1,\"2159\":1,\"2180\":1,\"2181\":1,\"2204\":1,\"2205\":1,\"2230\":1,\"2231\":1,\"2255\":1,\"2382\":1,\"2420\":1,\"2476\":1,\"2477\":1,\"2481\":1,\"2691\":1,\"2959\":1}}],[\"正确设置\",{\"1\":{\"275\":1}}],[\"正数\",{\"1\":{\"147\":2}}],[\"正使用不支持的缓冲区类型\",{\"1\":{\"125\":1}}],[\"正在吃\",{\"1\":{\"2737\":1}}],[\"正在吃鱼\",{\"1\":{\"2737\":1,\"2740\":1}}],[\"正在吃骨头\",{\"1\":{\"2736\":1,\"2740\":1}}],[\"正在睡觉\",{\"1\":{\"2736\":1}}],[\"正在进食\",{\"1\":{\"2736\":1,\"2740\":1}}],[\"正在重试\",{\"1\":{\"1337\":1}}],[\"正在更新的视图没有其基本表的完整键\",{\"1\":{\"125\":1}}],[\"正在引用未初始化的变量\",{\"1\":{\"125\":1}}],[\"套接字通道\",{\"1\":{\"2915\":1}}],[\"套接字\",{\"1\":{\"125\":2,\"3064\":1}}],[\"版本查看\",{\"1\":{\"3260\":1}}],[\"版本兼容性\",{\"1\":{\"3169\":1}}],[\"版本兼容性处理\",{\"0\":{\"1084\":1}}],[\"版本适配\",{\"1\":{\"2993\":1}}],[\"版本升级时进行充分的反射兼容性测试\",{\"1\":{\"2974\":1}}],[\"版本差异特性\",{\"0\":{\"2434\":1,\"2491\":1}}],[\"版本差异\",{\"1\":{\"2084\":1}}],[\"版本信息\",{\"1\":{\"1945\":1}}],[\"版本的更多信息\",{\"1\":{\"1635\":1}}],[\"版本的兼容性问题\",{\"1\":{\"1507\":1}}],[\"版本对应关系\",{\"1\":{\"1536\":1}}],[\"版本说明\",{\"1\":{\"1507\":1}}],[\"版本为例\",{\"1\":{\"1499\":1}}],[\"版本则会提示\",{\"1\":{\"1496\":1}}],[\"版本时\",{\"1\":{\"1496\":1}}],[\"版本安装\",{\"0\":{\"1476\":1}}],[\"版本不兼容\",{\"0\":{\"1011\":1}}],[\"版本不一致\",{\"1\":{\"931\":1,\"966\":1}}],[\"版本冲突\",{\"1\":{\"944\":1,\"988\":1}}],[\"版本控制\",{\"1\":{\"930\":1,\"987\":1}}],[\"版本号大于等于\",{\"1\":{\"1793\":1}}],[\"版本号不兼容问题\",{\"0\":{\"735\":1}}],[\"版本号已变化\",{\"1\":{\"676\":1}}],[\"版本号\",{\"1\":{\"676\":2,\"724\":1,\"937\":1}}],[\"版本锁定\",{\"0\":{\"1017\":1},\"1\":{\"567\":1}}],[\"版本迁移问题\",{\"0\":{\"566\":1}}],[\"版本\",{\"1\":{\"125\":2,\"263\":1,\"465\":1,\"497\":1,\"1476\":2,\"1579\":1,\"1635\":3,\"1795\":2,\"2035\":1,\"2434\":1,\"2491\":1,\"3246\":1}}],[\"允许通过反射api访问注解信息\",{\"1\":{\"3145\":1}}],[\"允许单个线程监控多个channel的io事件\",{\"1\":{\"3118\":1}}],[\"允许单个线程监控多个通道的io事件\",{\"1\":{\"1228\":1,\"2916\":1}}],[\"允许添加null\",{\"1\":{\"3038\":1}}],[\"允许程序通过元数据描述如何处理数据\",{\"1\":{\"3009\":1}}],[\"允许将文件直接映射到内存地址空间\",{\"1\":{\"2917\":1}}],[\"允许将横切关注点\",{\"1\":{\"311\":1}}],[\"允许显式指定字符编码\",{\"1\":{\"2877\":1}}],[\"允许应用程序将字节流转换为字符流\",{\"1\":{\"2875\":1}}],[\"允许指定字符编码\",{\"1\":{\"2855\":1}}],[\"允许指定的外部网络进入连接\",{\"1\":{\"1940\":1}}],[\"允许子类重写扩展功能\",{\"1\":{\"2800\":1}}],[\"允许子类访问父类成员\",{\"1\":{\"2797\":1}}],[\"允许存在多个同名方法\",{\"1\":{\"2741\":1,\"2786\":1}}],[\"允许存储重复元素\",{\"1\":{\"2314\":1}}],[\"允许并发修改\",{\"1\":{\"2543\":1}}],[\"允许短暂的不一致状态\",{\"1\":{\"2529\":1}}],[\"允许gc回收整个列表\",{\"1\":{\"2451\":1}}],[\"允许null元素\",{\"1\":{\"2432\":1,\"2489\":1}}],[\"允许null键\",{\"1\":{\"2400\":1}}],[\"允许null\",{\"1\":{\"2363\":1}}],[\"允许用户向system\",{\"1\":{\"1736\":1}}],[\"允许用户在指定数据库中执行管理函数\",{\"1\":{\"1736\":1}}],[\"允许用户读写指定数据库\",{\"1\":{\"1736\":1}}],[\"允许用户读取指定数据库\",{\"1\":{\"1736\":1}}],[\"允许远程ip连接\",{\"1\":{\"1734\":1}}],[\"允许访问网络\",{\"0\":{\"1662\":1}}],[\"允许外部访问\",{\"1\":{\"1569\":1}}],[\"允许在编译期扫描和处理注解\",{\"1\":{\"3147\":1}}],[\"允许在运行时创建代理类\",{\"1\":{\"2992\":1}}],[\"允许在特定场景下\",{\"1\":{\"2975\":1}}],[\"允许在同一元素上多次使用同一注解\",{\"1\":{\"1066\":1}}],[\"允许在lambda表达式的参数中使用var\",{\"1\":{\"468\":1}}],[\"允许\",{\"1\":{\"1053\":3,\"2358\":1,\"2419\":2}}],[\"允许线程重复获取已持有的锁\",{\"1\":{\"638\":1}}],[\"允许多个读线程同时访问\",{\"1\":{\"612\":1}}],[\"允许同一jar支持多个jdk版本\",{\"1\":{\"570\":1}}],[\"允许向现有的类添加新的方法或字段\",{\"1\":{\"335\":1}}],[\"允许的最大键部分是\",{\"1\":{\"125\":1}}],[\"允许的最大键数是\",{\"1\":{\"125\":1}}],[\"允许mysqld使用更多内存\",{\"1\":{\"125\":1}}],[\"指示客户端直接联系其他服务器\",{\"1\":{\"3185\":1}}],[\"指示客户端需要进一步操作\",{\"1\":{\"3179\":1}}],[\"指标关联分析\",{\"1\":{\"3111\":1}}],[\"指标\",{\"1\":{\"3109\":1}}],[\"指编译器在编译时会移除泛型类型信息\",{\"1\":{\"3034\":1}}],[\"指导如何设计高质量的自定义异常\",{\"1\":{\"2933\":1}}],[\"指代父类对象\",{\"1\":{\"2810\":1}}],[\"指代当前对象\",{\"1\":{\"2810\":1}}],[\"指数增长\",{\"1\":{\"3075\":1}}],[\"指数级增长\",{\"1\":{\"2711\":1,\"2726\":1}}],[\"指数时间\",{\"1\":{\"2702\":1}}],[\"指数退避\",{\"1\":{\"1337\":1}}],[\"指向前一个节点的引用\",{\"1\":{\"2490\":1}}],[\"指向下一个节点的引用\",{\"1\":{\"2490\":1}}],[\"指向堆中对象\",{\"1\":{\"2246\":1}}],[\"指向运行时常量池的方法引用\",{\"1\":{\"714\":1}}],[\"指出注意事项和限制\",{\"1\":{\"1953\":1}}],[\"指的第一部分mem行中的free\",{\"1\":{\"1885\":1}}],[\"指的第一部分mem行中的used\",{\"1\":{\"1885\":1}}],[\"指令级\",{\"1\":{\"141\":1}}],[\"指定端口映射\",{\"1\":{\"3246\":1}}],[\"指定\",{\"1\":{\"3246\":1}}],[\"指定服务名称\",{\"1\":{\"3246\":1}}],[\"指定数据卷存储位置\",{\"1\":{\"3246\":1}}],[\"指定数组大小\",{\"1\":{\"2509\":1}}],[\"指定run\",{\"1\":{\"3246\":1}}],[\"指定执行脚本的shell\",{\"1\":{\"3246\":1}}],[\"指定执行用户\",{\"1\":{\"3246\":1}}],[\"指定监测当前容器的健康监测的命令\",{\"1\":{\"3246\":1}}],[\"指定容器内部的工作目录\",{\"1\":{\"3246\":1}}],[\"指定build或者启动的时候\",{\"1\":{\"3246\":1}}],[\"指定build的image那些目录可以启动的时候挂载到文件系统中\",{\"1\":{\"3246\":1}}],[\"指定build时候的环境变量\",{\"1\":{\"3246\":1}}],[\"指定dockerfile基于那个image构建\",{\"1\":{\"3246\":1}}],[\"指定父镜像\",{\"1\":{\"3246\":1}}],[\"指定目标地址和端口\",{\"1\":{\"3066\":1}}],[\"指定目标得到的槽的数量\",{\"1\":{\"186\":1}}],[\"指定具体类型\",{\"1\":{\"3021\":1}}],[\"指定文件写入器和自动刷新\",{\"1\":{\"2903\":1}}],[\"指定文件输出流和自动刷新\",{\"1\":{\"2902\":1}}],[\"指定文件路径\",{\"1\":{\"2831\":1}}],[\"指定缓存容量\",{\"1\":{\"2512\":1}}],[\"指定索引处的节点\",{\"1\":{\"2495\":1}}],[\"指定初始大小\",{\"1\":{\"2449\":1}}],[\"指定初始容量的构造方法\",{\"1\":{\"2436\":1}}],[\"指定初始容量为0时使用\",{\"1\":{\"2433\":1}}],[\"指定初始容量\",{\"1\":{\"1193\":1,\"2323\":1,\"2627\":1}}],[\"指定位置的元素\",{\"1\":{\"2439\":1,\"2495\":1}}],[\"指定位置添加后\",{\"1\":{\"2324\":1}}],[\"指定长度\",{\"1\":{\"2144\":1}}],[\"指定下载镜像架构\",{\"1\":{\"1800\":1}}],[\"指定库名\",{\"1\":{\"1737\":1}}],[\"指定pod运行在固定ip上\",{\"0\":{\"1660\":1}}],[\"指定对应版本\",{\"1\":{\"1637\":1}}],[\"指定对应的站点目录为html\",{\"1\":{\"1385\":1}}],[\"指定工作节点\",{\"1\":{\"1633\":1,\"1637\":1}}],[\"指定工作目录\",{\"1\":{\"1551\":1}}],[\"指定主节点\",{\"1\":{\"1633\":1,\"1637\":1,\"1763\":1}}],[\"指定主机名称\",{\"1\":{\"1610\":1}}],[\"指定要纳入集群的机器\",{\"1\":{\"1633\":1,\"1637\":1}}],[\"指定jar路径\",{\"1\":{\"1551\":2}}],[\"指定上游服务器负载均衡服务器\",{\"1\":{\"1409\":1}}],[\"指定注解的保留策略\",{\"1\":{\"3135\":1}}],[\"指定注解是否可被继承\",{\"1\":{\"1064\":1,\"3135\":1}}],[\"指定注解是否包含在javadoc中\",{\"1\":{\"1064\":1,\"3135\":1}}],[\"指定注解保留策略\",{\"1\":{\"1064\":1}}],[\"指定注解可修饰的元素类型\",{\"1\":{\"1064\":1,\"3135\":1}}],[\"指定项目编码\",{\"1\":{\"1005\":1}}],[\"指定的节点\",{\"1\":{\"2494\":1}}],[\"指定的主类\",{\"1\":{\"743\":1}}],[\"指定的键过长\",{\"1\":{\"125\":1}}],[\"指定时间后自动唤醒\",{\"1\":{\"618\":1}}],[\"指定了常用依赖的版本号\",{\"1\":{\"394\":1}}],[\"指定了过高的精度\",{\"1\":{\"125\":1}}],[\"指定了过大的标度\",{\"1\":{\"125\":1}}],[\"指定了过多键部分\",{\"1\":{\"125\":1}}],[\"指定了过多键\",{\"1\":{\"125\":1}}],[\"指定符号\",{\"1\":{\"289\":1}}],[\"指定seata\",{\"1\":{\"242\":2}}],[\"指定若干款主打商品\",{\"1\":{\"191\":1}}],[\"指定更大的堆栈\",{\"1\":{\"125\":1}}],[\"指定给\",{\"1\":{\"125\":1}}],[\"指定较大的堆栈\",{\"1\":{\"125\":1}}],[\"指南\",{\"2\":{\"9\":1}}],[\"别名叫mysql\",{\"1\":{\"3257\":1}}],[\"别名=\",{\"1\":{\"2881\":1}}],[\"别名\",{\"1\":{\"125\":1,\"3246\":1,\"3257\":1}}],[\"过时实现\",{\"1\":{\"3136\":1}}],[\"过时注释\",{\"1\":{\"2094\":1}}],[\"过小\",{\"1\":{\"2614\":1}}],[\"过少的注释会使代码难以理解\",{\"1\":{\"2095\":1}}],[\"过多的注释会使代码变得臃肿\",{\"1\":{\"2095\":1}}],[\"过多常量会导致编译失败\",{\"1\":{\"736\":1}}],[\"过程\",{\"1\":{\"764\":1,\"765\":1,\"766\":1}}],[\"过程中不创建新的槽\",{\"1\":{\"186\":1}}],[\"过度注释\",{\"1\":{\"2094\":1}}],[\"过度使用静态变量存储可变状态\",{\"1\":{\"2775\":1}}],[\"过度使用继承导致类层次结构复杂\",{\"1\":{\"2748\":1}}],[\"过度使用intern\",{\"0\":{\"2256\":1}}],[\"过度使用异常\",{\"1\":{\"1253\":1}}],[\"过度使用原子类可能导致代码可读性下降和逻辑复杂度增加\",{\"1\":{\"684\":1}}],[\"过度继承\",{\"1\":{\"1215\":1}}],[\"过度优化\",{\"1\":{\"966\":1}}],[\"过度调优\",{\"0\":{\"815\":1,\"849\":1,\"883\":1,\"917\":1}}],[\"过度同步会导致性能下降\",{\"1\":{\"650\":1}}],[\"过滤http请求\",{\"1\":{\"3107\":1}}],[\"过滤java\",{\"1\":{\"3107\":1}}],[\"过滤特定端口的tcp流量\",{\"1\":{\"3107\":1}}],[\"过滤\",{\"1\":{\"2329\":1}}],[\"过滤值\",{\"1\":{\"544\":1}}],[\"过滤偶数并求和\",{\"1\":{\"543\":1}}],[\"过滤以\",{\"1\":{\"543\":1}}],[\"过滤器选择器\",{\"0\":{\"1458\":1},\"1\":{\"1460\":1}}],[\"过滤器\",{\"1\":{\"383\":1,\"3107\":1}}],[\"过滤出符合条件的策略者\",{\"1\":{\"292\":1}}],[\"过滤文档\",{\"1\":{\"58\":1}}],[\"过来的key校验\",{\"1\":{\"192\":1}}],[\"过期后\",{\"1\":{\"306\":1}}],[\"过期\",{\"1\":{\"306\":1}}],[\"过期时间\",{\"1\":{\"279\":1}}],[\"过期时间设置\",{\"1\":{\"211\":1}}],[\"过期时间使用固定时间+随机值的形式\",{\"1\":{\"190\":1}}],[\"过期数据是一块独立的存储空间\",{\"1\":{\"148\":1}}],[\"过期数据\",{\"0\":{\"146\":1}}],[\"过大会浪费内存并可能降低性能\",{\"1\":{\"2872\":1}}],[\"过大可能浪费内存\",{\"1\":{\"2848\":1}}],[\"过大\",{\"1\":{\"125\":1,\"2614\":1}}],[\"过长\",{\"1\":{\"125\":1}}],[\"语义不同\",{\"1\":{\"3198\":1}}],[\"语义不清晰\",{\"1\":{\"2506\":2}}],[\"语义化编程\",{\"1\":{\"2812\":1}}],[\"语言增强\",{\"0\":{\"467\":1}}],[\"语言开发的开源\",{\"1\":{\"127\":1}}],[\"语句带来的混乱\",{\"1\":{\"2136\":1}}],[\"语句遍历\",{\"1\":{\"1453\":1}}],[\"语句中不存在任何参数\",{\"1\":{\"125\":1}}],[\"语句中有sum函数和相同语句中的列\",{\"1\":{\"125\":1}}],[\"语句未准备好\",{\"1\":{\"125\":1}}],[\"语句\",{\"1\":{\"125\":1,\"1454\":1,\"1831\":1}}],[\"语法格式\",{\"1\":{\"3025\":1}}],[\"语法上包含初始化\",{\"1\":{\"2138\":1}}],[\"语法特性背后的设计考量\",{\"0\":{\"1047\":1}}],[\"语法基础核心考点\",{\"0\":{\"1034\":1}}],[\"语法基础\",{\"0\":{\"1031\":1,\"3323\":1}}],[\"语法保留给mysql服务器内部使用\",{\"1\":{\"125\":1}}],[\"语法\",{\"0\":{\"20\":1},\"1\":{\"16\":1,\"31\":1,\"1450\":1,\"1454\":1}}],[\"语法进行了扩展\",{\"1\":{\"15\":1}}],[\"语法扩展\",{\"1\":{\"14\":1}}],[\"列名\",{\"1\":{\"1882\":1}}],[\"列出特定区域的所有配置\",{\"0\":{\"1932\":1}}],[\"列出所有运行容器\",{\"1\":{\"3246\":1}}],[\"列出所有区域\",{\"0\":{\"1931\":1}}],[\"列出所有开放的端口\",{\"0\":{\"1930\":1}}],[\"列出所有目录会发现与下载redis之前多了一个redis\",{\"1\":{\"1782\":1}}],[\"列出当前socket统计信息\",{\"1\":{\"1880\":1}}],[\"列出当前的所有调度任务\",{\"1\":{\"1504\":1}}],[\"列出用户jp的所有调度任务\",{\"1\":{\"1504\":1}}],[\"列宽等excel特性\",{\"1\":{\"273\":1}}],[\"列表存储\",{\"1\":{\"2542\":1}}],[\"列表迭代器实现\",{\"1\":{\"2498\":1}}],[\"列表迭代器\",{\"1\":{\"2498\":1}}],[\"列表的迭代器\",{\"1\":{\"2441\":1,\"2498\":1}}],[\"列表大小\",{\"1\":{\"2328\":1}}],[\"列表命令\",{\"0\":{\"202\":1}}],[\"列表\",{\"1\":{\"131\":1}}],[\"列被设为默认值\",{\"1\":{\"125\":1}}],[\"列计数不匹配行\",{\"1\":{\"125\":1}}],[\"列计数不匹配值计数\",{\"1\":{\"125\":1}}],[\"列过多\",{\"1\":{\"125\":1}}],[\"列长度过大\",{\"1\":{\"125\":1}}],[\"列分类符不正确\",{\"1\":{\"125\":1}}],[\"列\",{\"1\":{\"125\":10}}],[\"未优化\",{\"1\":{\"2986\":3}}],[\"未处理的异常\",{\"1\":{\"2956\":1}}],[\"未处理异常\",{\"1\":{\"491\":1}}],[\"未捕获的异常\",{\"1\":{\"2956\":1}}],[\"未引入重大变更\",{\"1\":{\"2569\":1,\"2596\":1}}],[\"未对stack和queue接口做重大修改\",{\"1\":{\"2549\":1}}],[\"未指定初始容量导致频繁扩容\",{\"1\":{\"2278\":1}}],[\"未指定字符编码\",{\"1\":{\"1236\":1}}],[\"未超过\",{\"1\":{\"2271\":1}}],[\"未正确关闭通道导致资源泄漏\",{\"1\":{\"2920\":1}}],[\"未正确关闭socket连接\",{\"1\":{\"1336\":1}}],[\"未正确重写removeeldestentry\",{\"1\":{\"2642\":1}}],[\"未正确处理null和空字符串\",{\"1\":{\"2205\":1}}],[\"未初始化\",{\"1\":{\"2180\":1}}],[\"未被换出的物理内存大小\",{\"1\":{\"1882\":1}}],[\"未被修改\",{\"1\":{\"1058\":1}}],[\"未注释默认只接收本机访问\",{\"1\":{\"1788\":1}}],[\"未用\",{\"1\":{\"1788\":1}}],[\"未认证查看或操作\",{\"1\":{\"1736\":1}}],[\"未认证在部分浏览器上访问是会提示不安全的\",{\"1\":{\"1414\":1}}],[\"未设置so\",{\"0\":{\"1339\":1}}],[\"未调用flip\",{\"1\":{\"1338\":1}}],[\"未妥善处理网络异常\",{\"1\":{\"1337\":1}}],[\"未关闭socket和out\",{\"1\":{\"1336\":1}}],[\"未关闭连接\",{\"1\":{\"1336\":1}}],[\"未找到返回\",{\"1\":{\"1161\":1,\"2710\":1,\"2721\":1}}],[\"未命中redis后\",{\"1\":{\"191\":1}}],[\"未收到服务器的应答事件\",{\"1\":{\"125\":1}}],[\"未加载插件\",{\"1\":{\"125\":1}}],[\"未发现case\",{\"1\":{\"125\":1}}],[\"未声明的变量\",{\"1\":{\"125\":1}}],[\"未定义的数据\",{\"1\":{\"147\":1}}],[\"未定义的cursor\",{\"1\":{\"125\":1}}],[\"未定义的condition\",{\"1\":{\"125\":1}}],[\"未定义\",{\"1\":{\"125\":1}}],[\"未使用二进制日志功能\",{\"1\":{\"125\":1}}],[\"未使用lock\",{\"1\":{\"125\":1}}],[\"未使用任何表\",{\"1\":{\"125\":1}}],[\"未使用ssl情况下\",{\"1\":{\"114\":1}}],[\"未使用ssl\",{\"1\":{\"114\":1}}],[\"未使用ssl和使用ssl安全性对比\",{\"1\":{\"114\":1}}],[\"未使用ssl和使用ssl两者在安全性上有什么不同\",{\"1\":{\"114\":1}}],[\"未知状态\",{\"1\":{\"2062\":2}}],[\"未知标记\",{\"1\":{\"1005\":1}}],[\"未知mysql错误\",{\"1\":{\"125\":1}}],[\"未知xid\",{\"1\":{\"125\":1}}],[\"未知或不正确的时区\",{\"1\":{\"125\":1}}],[\"未知的mysql服务器主机\",{\"1\":{\"125\":1}}],[\"未知的表引擎\",{\"1\":{\"125\":1}}],[\"未知的键高速缓冲\",{\"1\":{\"125\":1}}],[\"未知的系统变量\",{\"1\":{\"125\":1}}],[\"未知校对\",{\"1\":{\"125\":1}}],[\"未知字符集\",{\"1\":{\"125\":1}}],[\"未知过程\",{\"1\":{\"125\":1}}],[\"未知错误\",{\"1\":{\"125\":1}}],[\"未知线程id\",{\"1\":{\"125\":1}}],[\"未知表\",{\"1\":{\"125\":1}}],[\"未知数据库\",{\"1\":{\"125\":1}}],[\"未知命令\",{\"1\":{\"125\":1}}],[\"未选择数据库\",{\"1\":{\"125\":1}}],[\"拒绝反射访问权限\",{\"1\":{\"2990\":1}}],[\"拒绝策略包括\",{\"1\":{\"634\":1}}],[\"拒绝策略的灵活切换\",{\"1\":{\"628\":1}}],[\"拒绝策略\",{\"1\":{\"622\":1,\"625\":1,\"3082\":2}}],[\"拒绝策略等\",{\"1\":{\"602\":1}}],[\"拒绝使用旧鉴定协议\",{\"1\":{\"125\":1}}],[\"拒绝访问\",{\"1\":{\"125\":1}}],[\"拒绝用户\",{\"1\":{\"125\":5}}],[\"拒绝更改\",{\"1\":{\"125\":1}}],[\"增长速率\",{\"1\":{\"2702\":1}}],[\"增量构建\",{\"0\":{\"951\":1},\"1\":{\"951\":1,\"965\":1,\"967\":1}}],[\"增大堆内存的方式将原来的内存增加到了512\",{\"1\":{\"1558\":1}}],[\"增大堆内存\",{\"1\":{\"1558\":1}}],[\"增大文件描述符限制\",{\"1\":{\"1347\":1}}],[\"增大老年代空间\",{\"1\":{\"783\":1}}],[\"增大mysqld变量\",{\"1\":{\"125\":1}}],[\"增强枚举的功能性\",{\"1\":{\"2821\":1}}],[\"增强哈希分布\",{\"1\":{\"2596\":1}}],[\"增强安全性\",{\"1\":{\"2491\":1}}],[\"增强快速失败机制\",{\"1\":{\"2491\":1}}],[\"增强并发修改检测\",{\"1\":{\"2434\":1}}],[\"增强封装性\",{\"1\":{\"2434\":1}}],[\"增强了性能\",{\"1\":{\"2624\":1}}],[\"增强了set集合的stream操作\",{\"1\":{\"2367\":1}}],[\"增强了社区活力\",{\"1\":{\"488\":1}}],[\"增强功能\",{\"1\":{\"1222\":1,\"2835\":1}}],[\"增强linkedlist\",{\"1\":{\"1198\":1}}],[\"增强map接口\",{\"1\":{\"1198\":1}}],[\"增强stream\",{\"1\":{\"1198\":1}}],[\"增强for循环打印数组\",{\"0\":{\"2213\":1}}],[\"增强for循环中删除元素\",{\"1\":{\"1190\":1}}],[\"增强for循环代码简洁\",{\"1\":{\"1160\":1}}],[\"增强for循环\",{\"1\":{\"1160\":1,\"1179\":1,\"2059\":1,\"2128\":1,\"2147\":1,\"2170\":1,\"2320\":1,\"2325\":1,\"2370\":1}}],[\"增强for循环和arrays\",{\"1\":{\"1160\":1}}],[\"增强的npe消息可能无法提供准确的变量名\",{\"1\":{\"519\":1}}],[\"增强的npe消息可能更长\",{\"1\":{\"518\":1}}],[\"增强的npe消息不会破坏任何现有代码\",{\"1\":{\"509\":1}}],[\"增强的npe特性\",{\"0\":{\"496\":1}}],[\"增强navigablemap接口\",{\"1\":{\"2651\":1}}],[\"增强npe消息\",{\"1\":{\"500\":1}}],[\"增强nullpointerexception错误消息\",{\"1\":{\"497\":1}}],[\"增加调试复杂度\",{\"1\":{\"2941\":1}}],[\"增加io操作次数\",{\"1\":{\"2873\":1}}],[\"增加初始化开销\",{\"1\":{\"2873\":1}}],[\"增加内存使用和复制操作\",{\"1\":{\"2873\":1}}],[\"增加内存开销\",{\"1\":{\"2873\":1}}],[\"增加维护难度\",{\"1\":{\"2814\":1}}],[\"增加意外修改风险\",{\"1\":{\"2774\":1,\"2777\":1}}],[\"增加缓存\",{\"1\":{\"2728\":1}}],[\"增加tounmodifiableset\",{\"1\":{\"2367\":1}}],[\"增加垃圾回收的负担\",{\"1\":{\"2105\":1}}],[\"增加sudo权限\",{\"1\":{\"1855\":1}}],[\"增加配置\",{\"1\":{\"1736\":1}}],[\"增加了项目的复杂性\",{\"1\":{\"932\":1,\"967\":1,\"1030\":1}}],[\"增加gc\",{\"1\":{\"780\":1}}],[\"增加栈内存\",{\"1\":{\"701\":1}}],[\"增加堆内存\",{\"1\":{\"700\":1}}],[\"增加租户字段\",{\"1\":{\"232\":1,\"1684\":1}}],[\"增加有序集合中元素的分数\",{\"1\":{\"204\":1}}],[\"增加指定数值\",{\"1\":{\"200\":1}}],[\"增加服务器的分类缓冲区大小\",{\"1\":{\"125\":1}}],[\"增删改查\",{\"0\":{\"44\":1},\"1\":{\"45\":1}}],[\"表现优异后被java\",{\"1\":{\"2357\":1}}],[\"表现不同行为\",{\"1\":{\"2740\":1}}],[\"表现不同\",{\"1\":{\"1155\":1}}],[\"表空间名\",{\"1\":{\"1833\":1}}],[\"表名\",{\"1\":{\"1814\":1}}],[\"表名称\",{\"1\":{\"232\":8,\"1684\":8}}],[\"表里的\",{\"1\":{\"1775\":1}}],[\"表格数据\",{\"1\":{\"2177\":1}}],[\"表格数据等具有二维结构的信息\",{\"1\":{\"2163\":1}}],[\"表格\",{\"1\":{\"1507\":1}}],[\"表单属性选择器\",{\"0\":{\"1459\":1},\"1\":{\"1460\":1}}],[\"表明是一个配置类\",{\"1\":{\"461\":1}}],[\"表示该\",{\"1\":{\"3246\":1}}],[\"表示请求已被接受\",{\"1\":{\"3179\":1}}],[\"表示请求正在处理\",{\"1\":{\"3179\":1}}],[\"表示未知类型\",{\"1\":{\"3038\":1}}],[\"表示未读取\",{\"1\":{\"2920\":1}}],[\"表示程序可以处理的异常\",{\"1\":{\"2925\":1}}],[\"表示程序可以处理的意外情况\",{\"1\":{\"1243\":1}}],[\"表示严重错误\",{\"1\":{\"2925\":1}}],[\"表示\",{\"1\":{\"2701\":1}}],[\"表示最近访问\",{\"1\":{\"2512\":1}}],[\"表示可以插入新节点\",{\"1\":{\"2485\":1}}],[\"表示具体错误编号\",{\"1\":{\"2050\":1}}],[\"表示错误来源\",{\"1\":{\"2050\":1}}],[\"表示层和应用层\",{\"1\":{\"3058\":1}}],[\"表示层\",{\"1\":{\"2007\":2}}],[\"表示系统调用时间长\",{\"1\":{\"1887\":1}}],[\"表示系统级别的严重问题\",{\"1\":{\"1243\":1}}],[\"表示物理内存不够用或者内存泄露了\",{\"1\":{\"1887\":1}}],[\"表示你的机器物理内存不足了\",{\"1\":{\"1887\":1}}],[\"表示你的cpu很繁忙\",{\"1\":{\"1887\":1}}],[\"表示阻塞的进程\",{\"1\":{\"1887\":1}}],[\"表示运行队列\",{\"1\":{\"1887\":1}}],[\"表示要封停的ip\",{\"1\":{\"1876\":1}}],[\"表示文件名\",{\"1\":{\"1873\":1}}],[\"表示使用docker镜像名称为kafka\",{\"1\":{\"1530\":1}}],[\"表示将该环境变量设置到容器的环境变量中\",{\"1\":{\"1530\":1}}],[\"表示将容器内部的路径\",{\"1\":{\"1530\":1}}],[\"表示将容器中9092端口映射到宿主机的9902端口\",{\"1\":{\"1530\":1}}],[\"表示一个独立的虚拟主机站点\",{\"1\":{\"1379\":1,\"1385\":1}}],[\"表示由启动类加载器加载\",{\"1\":{\"745\":1}}],[\"表示存放的打包的资源根目录\",{\"1\":{\"216\":1}}],[\"表示了应用服务在全年宕机的时间\",{\"1\":{\"160\":1}}],[\"表示不限制\",{\"1\":{\"157\":1}}],[\"表的写锁定与其他表结合起来\",{\"1\":{\"125\":1}}],[\"表定义已更改\",{\"1\":{\"125\":1}}],[\"表过多\",{\"1\":{\"125\":1}}],[\"表\",{\"1\":{\"125\":10}}],[\"键被gc时立即回收\",{\"1\":{\"2698\":1}}],[\"键是新创建的对象\",{\"1\":{\"2691\":1}}],[\"键是常量池中的字符串\",{\"1\":{\"2691\":1}}],[\"键是否存在\",{\"1\":{\"125\":1}}],[\"键对应的值\",{\"1\":{\"2682\":1}}],[\"键对象\",{\"1\":{\"2599\":1}}],[\"键的生命周期不确定\",{\"1\":{\"2696\":1}}],[\"键的强引用问题\",{\"0\":{\"2691\":1}}],[\"键的存储方式\",{\"1\":{\"2687\":1}}],[\"键的哈希值\",{\"1\":{\"2680\":1}}],[\"键的哈希值不可变\",{\"0\":{\"2612\":1}}],[\"键的不可变性\",{\"0\":{\"2669\":1}}],[\"键的可比较性\",{\"0\":{\"2668\":1}}],[\"键必须实现comparable接口\",{\"1\":{\"2664\":1,\"2668\":1}}],[\"键类型\",{\"1\":{\"2632\":1}}],[\"键已存在\",{\"1\":{\"2600\":1,\"2655\":2}}],[\"键不能重复\",{\"1\":{\"2398\":1}}],[\"键不存在\",{\"1\":{\"1181\":1}}],[\"键可以将当前的排序倒转\",{\"1\":{\"1882\":1}}],[\"键入命令修改postgres用户密码\",{\"1\":{\"1607\":1}}],[\"键存在\",{\"1\":{\"1181\":1}}],[\"键值对数量\",{\"1\":{\"2593\":1,\"2648\":1,\"2679\":1}}],[\"键值对数据\",{\"1\":{\"127\":1}}],[\"键值对存储\",{\"1\":{\"2542\":1}}],[\"键值对节点类\",{\"1\":{\"1181\":1}}],[\"键值对映射\",{\"1\":{\"1174\":1}}],[\"键值对\",{\"1\":{\"790\":1,\"824\":1,\"858\":1,\"892\":1}}],[\"键命令\",{\"0\":{\"199\":1}}],[\"键部分\",{\"1\":{\"125\":1}}],[\"键引用和表引用不匹配\",{\"1\":{\"125\":1}}],[\"键说明中\",{\"1\":{\"125\":1}}],[\"键列\",{\"1\":{\"125\":1}}],[\"键文件不正确\",{\"1\":{\"125\":1}}],[\"键\",{\"1\":{\"125\":4,\"1882\":1,\"2512\":3,\"2600\":1,\"2629\":1,\"2655\":1,\"2680\":1,\"2683\":1}}],[\"更适合\",{\"1\":{\"2861\":1}}],[\"更高\",{\"1\":{\"2861\":1}}],[\"更高效\",{\"1\":{\"2509\":1}}],[\"更高效的不可变集合实现\",{\"1\":{\"2358\":1}}],[\"更好的方式\",{\"1\":{\"2533\":1}}],[\"更好的安全性\",{\"1\":{\"486\":1}}],[\"更优方案\",{\"1\":{\"2476\":1}}],[\"更紧凑\",{\"1\":{\"2358\":1}}],[\"更换实现类无需修改使用接口的代码\",{\"1\":{\"2331\":1}}],[\"更换镜像为淘宝镜像\",{\"1\":{\"261\":1}}],[\"更换镜像源\",{\"0\":{\"261\":1}}],[\"更安全的写法\",{\"1\":{\"2204\":1}}],[\"更灵活\",{\"1\":{\"2748\":1}}],[\"更灵活的数组打印方式\",{\"1\":{\"2219\":1}}],[\"更灵活的代码\",{\"1\":{\"1061\":1}}],[\"更灵活但性能略低\",{\"1\":{\"2178\":1}}],[\"更易穿透防火墙\",{\"1\":{\"1105\":1}}],[\"更能在实际项目中写出更优雅\",{\"1\":{\"1061\":1}}],[\"更稳定的maven项目\",{\"1\":{\"947\":1}}],[\"更大的堆内存减少gc频率\",{\"1\":{\"809\":1,\"843\":1,\"877\":1,\"911\":1}}],[\"更名为jakarta\",{\"1\":{\"577\":1}}],[\"更小的运行时镜像\",{\"1\":{\"486\":1}}],[\"更强的封装性\",{\"1\":{\"486\":1}}],[\"更强的安全性\",{\"1\":{\"482\":1}}],[\"更快的握手过程\",{\"1\":{\"482\":1}}],[\"更加容易分辨括号是否缺失\",{\"1\":{\"299\":1}}],[\"更多的页面静态化处理\",{\"1\":{\"190\":1}}],[\"更改会话参数\",{\"1\":{\"3175\":1}}],[\"更改\",{\"1\":{\"1775\":1}}],[\"更改slave指向新的master\",{\"1\":{\"186\":1}}],[\"更改1个以上的基本表\",{\"1\":{\"125\":1}}],[\"更改目录\",{\"1\":{\"125\":1}}],[\"更新中\",{\"1\":{\"3245\":1}}],[\"更新对话状态\",{\"1\":{\"3208\":1,\"3209\":1}}],[\"更新事务状态\",{\"1\":{\"3208\":2}}],[\"更新下载进度\",{\"1\":{\"2849\":1}}],[\"更新头节点为后继\",{\"1\":{\"2496\":1,\"2497\":1}}],[\"更新头节点为新节点\",{\"1\":{\"2494\":1,\"2497\":1}}],[\"更新succ的前驱为新节点\",{\"1\":{\"2494\":1}}],[\"更新尾节点为前驱\",{\"1\":{\"2496\":1,\"2497\":1}}],[\"更新尾节点为新节点\",{\"1\":{\"2494\":1}}],[\"更新尾节点\",{\"1\":{\"2485\":1}}],[\"更新期望的修改次数\",{\"1\":{\"2441\":1}}],[\"更新工具配置适应新规范\",{\"1\":{\"2027\":1}}],[\"更新流程\",{\"1\":{\"1971\":1}}],[\"更新方式\",{\"1\":{\"1946\":1}}],[\"更新规范\",{\"1\":{\"1946\":1}}],[\"更新内容等的规范\",{\"1\":{\"1946\":1}}],[\"更新内容等\",{\"1\":{\"1945\":1}}],[\"更新表数据\",{\"1\":{\"1827\":1}}],[\"更新表\",{\"1\":{\"1827\":4}}],[\"更新数组中的元素\",{\"1\":{\"1814\":1,\"1833\":1,\"1834\":1}}],[\"更新数据到另一张表\",{\"0\":{\"1827\":1}}],[\"更新数据时\",{\"1\":{\"53\":1}}],[\"更新数据\",{\"0\":{\"49\":1}}],[\"更新数据和删除数据\",{\"1\":{\"45\":1}}],[\"更新多条\",{\"0\":{\"1814\":1}}],[\"更新多个文档\",{\"1\":{\"49\":2,\"86\":1}}],[\"更新角色权限\",{\"1\":{\"1737\":1}}],[\"更新窗口大小\",{\"1\":{\"1312\":1}}],[\"更新已确认的序号\",{\"1\":{\"1312\":1}}],[\"更新发送窗口\",{\"1\":{\"1312\":1}}],[\"更新值并移到头部\",{\"1\":{\"2512\":1}}],[\"更新值\",{\"1\":{\"1181\":1}}],[\"更新失败\",{\"1\":{\"676\":1}}],[\"更新用户\",{\"1\":{\"427\":1}}],[\"更新日志已被放弃\",{\"1\":{\"125\":2}}],[\"更新文档\",{\"0\":{\"86\":1}}],[\"更新操作符\",{\"1\":{\"49\":1}}],[\"更新单个文档\",{\"1\":{\"49\":2,\"86\":1}}],[\"更新时间等页面元信息\",{\"1\":{\"8\":1}}],[\"更新时间\",{\"1\":{\"5\":1,\"1945\":1}}],[\"撤销数据库时出错\",{\"1\":{\"125\":2}}],[\"无连接\",{\"1\":{\"3206\":1}}],[\"无连接是活动的或正在进行\",{\"1\":{\"1881\":1}}],[\"无状态与有状态结合\",{\"1\":{\"3220\":1}}],[\"无状态代理服务器提高了处理效率\",{\"1\":{\"3220\":1}}],[\"无状态代理\",{\"1\":{\"3183\":1,\"3212\":1}}],[\"无状态性\",{\"0\":{\"1100\":1}}],[\"无多线程竞争\",{\"1\":{\"3121\":1}}],[\"无侵入式埋点\",{\"1\":{\"3104\":1}}],[\"无对应的标准流\",{\"1\":{\"2909\":1}}],[\"无显式修饰符\",{\"1\":{\"2796\":1}}],[\"无显示说明没有密码\",{\"1\":{\"1787\":1}}],[\"无界通配符\",{\"0\":{\"3038\":1},\"1\":{\"3038\":1}}],[\"无界队列\",{\"1\":{\"2539\":1}}],[\"无界队列可能导致内存溢出\",{\"1\":{\"629\":1}}],[\"无界\",{\"1\":{\"2518\":1}}],[\"无缓冲\",{\"1\":{\"2461\":1,\"2518\":1}}],[\"无装箱操作\",{\"1\":{\"2452\":1}}],[\"无序遍历\",{\"0\":{\"2480\":1,\"2585\":1}}],[\"无序\",{\"1\":{\"2363\":1,\"2400\":3,\"2666\":1}}],[\"无序不可重复\",{\"1\":{\"1174\":1}}],[\"无修改方法\",{\"1\":{\"2358\":1}}],[\"无修改数组的方法\",{\"1\":{\"2299\":1}}],[\"无扩容时\",{\"1\":{\"2354\":1}}],[\"无初始元素\",{\"1\":{\"2323\":1}}],[\"无同步\",{\"1\":{\"2310\":1}}],[\"无同步锁\",{\"1\":{\"2268\":1}}],[\"无额外空间优化时间复杂度的常用策略\",{\"1\":{\"2727\":1}}],[\"无额外开销\",{\"1\":{\"2358\":1}}],[\"无额外字段\",{\"1\":{\"2263\":2}}],[\"无额外依赖\",{\"1\":{\"2227\":1}}],[\"无符号右移赋值\",{\"1\":{\"2113\":1}}],[\"无符号右移\",{\"1\":{\"2112\":1}}],[\"无干扰性\",{\"1\":{\"2093\":1}}],[\"无二义性\",{\"1\":{\"2071\":1}}],[\"无参无返回值方法\",{\"1\":{\"2784\":1}}],[\"无参构造\",{\"1\":{\"2969\":1}}],[\"无参构造创建\",{\"1\":{\"2969\":1}}],[\"无参构造时不立即分配容量\",{\"1\":{\"2445\":1}}],[\"无参构造时使用\",{\"1\":{\"2433\":1}}],[\"无参构造方法\",{\"1\":{\"2291\":1,\"2436\":1,\"2493\":1,\"2734\":1,\"2759\":1}}],[\"无参构造器初始化已知大小的集合\",{\"1\":{\"2057\":1}}],[\"无参数方法形式\",{\"1\":{\"3134\":1}}],[\"无参数\",{\"1\":{\"538\":1}}],[\"无参数无返回值\",{\"1\":{\"537\":1}}],[\"无任何配置信息\",{\"1\":{\"1764\":1}}],[\"无内网访问下进行\",{\"1\":{\"1642\":1}}],[\"无内存碎片\",{\"1\":{\"765\":1,\"766\":1}}],[\"无指定版本默认安装最新\",{\"1\":{\"1476\":1}}],[\"无边界则为object\",{\"1\":{\"1290\":1}}],[\"无限返回0的bug\",{\"1\":{\"3090\":1,\"3129\":1}}],[\"无限制类型参数\",{\"1\":{\"3034\":1}}],[\"无限循环\",{\"1\":{\"2137\":1}}],[\"无限递归导致栈溢出\",{\"1\":{\"1243\":1}}],[\"无限升级内存\",{\"1\":{\"161\":1}}],[\"无\",{\"1\":{\"1227\":1,\"2461\":5,\"2666\":1,\"2968\":1}}],[\"无方法\",{\"1\":{\"1225\":1}}],[\"无this引用\",{\"1\":{\"1037\":1}}],[\"无锁化设计\",{\"1\":{\"3091\":1}}],[\"无锁算法\",{\"1\":{\"2519\":1}}],[\"无锁设计\",{\"1\":{\"2513\":1,\"2544\":1,\"2672\":1}}],[\"无锁设计通常比锁机制具有更高的吞吐量\",{\"1\":{\"679\":1}}],[\"无锁竞争\",{\"1\":{\"2356\":1}}],[\"无锁读取\",{\"1\":{\"2356\":1}}],[\"无锁\",{\"1\":{\"686\":1}}],[\"无锁编程与cas\",{\"0\":{\"663\":1}}],[\"无锁编程通过cas操作避免使用传统锁\",{\"1\":{\"646\":1}}],[\"无锁编程思想\",{\"0\":{\"646\":1}}],[\"无服务器架构\",{\"1\":{\"571\":1}}],[\"无返回值\",{\"1\":{\"538\":1,\"2810\":1}}],[\"无需轮询\",{\"1\":{\"3080\":1}}],[\"无需等待超时\",{\"1\":{\"3075\":1}}],[\"无需实现类\",{\"1\":{\"3050\":1}}],[\"无需实际文件\",{\"1\":{\"2844\":1}}],[\"无需强制类型转换\",{\"1\":{\"3017\":1}}],[\"无需显式关闭资源\",{\"1\":{\"2951\":1}}],[\"无需显式捕获\",{\"1\":{\"2927\":1}}],[\"无需手动finally块\",{\"1\":{\"2951\":1}}],[\"无需手动转换数据类型\",{\"1\":{\"2901\":1}}],[\"无需手动关闭每个流\",{\"1\":{\"2896\":1}}],[\"无需单独关闭\",{\"1\":{\"2872\":1}}],[\"无需单独部署\",{\"1\":{\"391\":1}}],[\"无需default\",{\"1\":{\"2822\":1}}],[\"无需同步处理\",{\"1\":{\"2826\":1}}],[\"无需同步\",{\"1\":{\"2358\":1,\"2395\":1,\"2513\":1}}],[\"无需同步即可在多线程中使用\",{\"1\":{\"2207\":1}}],[\"无需考虑并发修改\",{\"1\":{\"2336\":1}}],[\"无需连续内存空间\",{\"1\":{\"2335\":1}}],[\"无需关注底层数据结构\",{\"1\":{\"2332\":1}}],[\"无需扩容\",{\"1\":{\"2316\":1,\"2503\":1}}],[\"无需在创建时指定固定大小\",{\"1\":{\"2314\":1}}],[\"无需重写readresolve\",{\"1\":{\"2826\":1}}],[\"无需重启\",{\"1\":{\"1737\":1}}],[\"无需重新编译即可修改配置\",{\"1\":{\"1086\":1}}],[\"无需告警\",{\"1\":{\"1687\":1}}],[\"无需将请求转发给后端服务器tomcat\",{\"1\":{\"1401\":1}}],[\"无需selector轮询\",{\"1\":{\"1316\":1}}],[\"无需为每种元素类型创建新的arraylist子类\",{\"1\":{\"1298\":1}}],[\"无需通过注释说明类型\",{\"1\":{\"1286\":1}}],[\"无需用户空间参与\",{\"1\":{\"1232\":1}}],[\"无需维护额外的xml文件\",{\"1\":{\"1086\":1}}],[\"无需类型转换\",{\"1\":{\"574\":1,\"3046\":1}}],[\"无需额外线程\",{\"1\":{\"2897\":1}}],[\"无需额外配置\",{\"1\":{\"494\":1}}],[\"无需额外依赖\",{\"1\":{\"494\":1}}],[\"无需先编译\",{\"1\":{\"479\":1}}],[\"无操作\",{\"1\":{\"477\":1}}],[\"无代码生成和xml配置\",{\"1\":{\"391\":1}}],[\"无键或值则执行value方法\",{\"1\":{\"283\":1}}],[\"无波动\",{\"1\":{\"191\":1}}],[\"无占用\",{\"1\":{\"154\":1}}],[\"无论使用哪种方式\",{\"1\":{\"2861\":1}}],[\"无论数组大小\",{\"1\":{\"2707\":1}}],[\"无论k是1\",{\"1\":{\"2455\":1}}],[\"无论当前是否有事务\",{\"1\":{\"359\":1}}],[\"无论连接点是否正常执行\",{\"1\":{\"336\":1}}],[\"无论是否发生异常都会执行\",{\"1\":{\"2079\":1}}],[\"无论是初级开发者还是有经验的工程师\",{\"1\":{\"1218\":1}}],[\"无论是黑名单还是白名单\",{\"1\":{\"192\":1}}],[\"无论是处理大量的数据\",{\"1\":{\"73\":1}}],[\"无论cpu此时负载量多高\",{\"1\":{\"151\":1}}],[\"无来自服务器的应答\",{\"1\":{\"125\":1}}],[\"无足够内存\",{\"1\":{\"125\":1}}],[\"无效参量\",{\"1\":{\"125\":1}}],[\"无效的连接句柄\",{\"1\":{\"125\":1}}],[\"无效的参数编号\",{\"1\":{\"125\":1}}],[\"无效的\",{\"1\":{\"125\":1}}],[\"无效的分组函数使用\",{\"1\":{\"125\":1}}],[\"无效\",{\"1\":{\"125\":1}}],[\"无法充分利用多核cpu\",{\"1\":{\"3121\":1}}],[\"无法通过虚引用获取对象\",{\"1\":{\"2698\":1}}],[\"无法通过联合视图\",{\"1\":{\"125\":1}}],[\"无法保证数据的实时一致性\",{\"1\":{\"2543\":1}}],[\"无法保证原子性\",{\"1\":{\"665\":1}}],[\"无法自定义\",{\"1\":{\"2227\":1}}],[\"无法处理users为null的情况\",{\"1\":{\"2058\":1}}],[\"无法处理活动时候的突发流量\",{\"1\":{\"1396\":1}}],[\"无法卸载当前在用的内核版本\",{\"1\":{\"1499\":1}}],[\"无法进行其他操作\",{\"1\":{\"1436\":1}}],[\"无法进行有效的线程切换\",{\"1\":{\"529\":1}}],[\"无法继续\",{\"1\":{\"1337\":1}}],[\"无法使用instanceof判断泛型类型\",{\"1\":{\"3035\":1}}],[\"无法使用instanceof\",{\"1\":{\"1291\":1}}],[\"无法实现一些特殊的类加载需求\",{\"1\":{\"1155\":1}}],[\"无法实现阻塞\",{\"1\":{\"686\":1}}],[\"无法转为数字\",{\"1\":{\"1055\":1}}],[\"无法分析gc问题\",{\"1\":{\"816\":1,\"850\":1,\"884\":1,\"918\":1}}],[\"无法解决循环引用问题\",{\"1\":{\"761\":1}}],[\"无法解压缩通信信息包\",{\"1\":{\"125\":1}}],[\"无法直接获取\",{\"1\":{\"745\":1}}],[\"无法确定哪个变量为null\",{\"1\":{\"515\":1}}],[\"无法做到实时持久化\",{\"1\":{\"138\":1}}],[\"无法设置命名管道的状态\",{\"1\":{\"125\":1}}],[\"无法等待命名管道\",{\"1\":{\"125\":1}}],[\"无法连接到外部数据源\",{\"1\":{\"125\":1}}],[\"无法授予execute和alter\",{\"1\":{\"125\":1}}],[\"无法映射文件\",{\"1\":{\"125\":1}}],[\"无法从另一个存储子程序中撤销或更改\",{\"1\":{\"125\":1}}],[\"无法撤销默认的keycache\",{\"1\":{\"125\":1}}],[\"无法撤销已放弃子程序上的所有权限\",{\"1\":{\"125\":1}}],[\"无法撤销所有权限\",{\"1\":{\"125\":1}}],[\"无法撤销1个或多个请求的用户\",{\"1\":{\"125\":1}}],[\"无法撤销数据库\",{\"1\":{\"125\":1}}],[\"无法执行查询\",{\"1\":{\"125\":1}}],[\"无法添加具体类型元素\",{\"1\":{\"3038\":1}}],[\"无法添加或更新子行\",{\"1\":{\"125\":1}}],[\"无法添加外键约束\",{\"1\":{\"125\":1}}],[\"无法初始化字符集\",{\"1\":{\"125\":1}}],[\"无法初始化主服务器信息结构\",{\"1\":{\"125\":1}}],[\"无法初始化函数\",{\"1\":{\"125\":1}}],[\"无法找到与列列表匹配的fulltext索引\",{\"1\":{\"125\":1}}],[\"无法找到文件\",{\"1\":{\"125\":1}}],[\"无法打开命名管道\",{\"1\":{\"125\":1}}],[\"无法打开表\",{\"1\":{\"125\":1}}],[\"无法打开文件\",{\"1\":{\"125\":1}}],[\"无法再次打开表\",{\"1\":{\"125\":1}}],[\"无法加载函数\",{\"1\":{\"125\":1}}],[\"无法在运行时获取泛型的具体类型信息\",{\"1\":{\"3028\":1}}],[\"无法在服务端废止\",{\"1\":{\"304\":1}}],[\"无法在非分区表上进行分区管理\",{\"1\":{\"125\":1}}],[\"无法在用户表中找到匹配行\",{\"1\":{\"125\":1}}],[\"无法在\",{\"1\":{\"125\":2}}],[\"无法写入\",{\"1\":{\"125\":1}}],[\"无法为\",{\"1\":{\"125\":1}}],[\"无法读取\",{\"1\":{\"125\":1}}],[\"无法读取系统表中的记录\",{\"1\":{\"125\":1}}],[\"无法锁定文件\",{\"1\":{\"125\":1}}],[\"无法获得更新锁定\",{\"1\":{\"125\":1}}],[\"无法获得该地址给出的主机名\",{\"1\":{\"125\":1}}],[\"无法获得工作目录\",{\"1\":{\"125\":1}}],[\"无法获取父类私有字段\",{\"1\":{\"2984\":1}}],[\"无法获取值\",{\"1\":{\"2612\":1}}],[\"无法获取\",{\"1\":{\"125\":1}}],[\"无法删除或更新父行\",{\"1\":{\"125\":1}}],[\"无法删除\",{\"1\":{\"125\":1}}],[\"无法创建新的对象\",{\"1\":{\"1155\":1}}],[\"无法创建新线程\",{\"1\":{\"125\":1}}],[\"无法创建特定的句柄文件\",{\"1\":{\"125\":1}}],[\"无法创建联合表\",{\"1\":{\"125\":2}}],[\"无法创建从线程\",{\"1\":{\"125\":1}}],[\"无法创建ip套接字\",{\"1\":{\"125\":1}}],[\"无法创建数据库\",{\"1\":{\"125\":2}}],[\"无法创建表\",{\"1\":{\"125\":1}}],[\"无法创建文件\",{\"1\":{\"125\":1}}],[\"错误率\",{\"1\":{\"3091\":1,\"3109\":1,\"3111\":1}}],[\"错误处理需要检查返回值\",{\"1\":{\"2920\":1}}],[\"错误处理\",{\"1\":{\"2909\":1}}],[\"错误信息会写入到重定向的错误日志\",{\"1\":{\"2909\":1}}],[\"错误地组合多个操作\",{\"1\":{\"2534\":1}}],[\"错误地认为二维数组的列长度统一\",{\"1\":{\"2181\":1}}],[\"错误使用==比较字符串内容\",{\"1\":{\"2255\":1}}],[\"错误使用废弃参数\",{\"0\":{\"817\":1,\"851\":1,\"885\":1,\"919\":1}}],[\"错误注释\",{\"1\":{\"2094\":1}}],[\"错误输入测试\",{\"1\":{\"2047\":1}}],[\"错误提示消失\",{\"1\":{\"1586\":1}}],[\"错误提示\",{\"1\":{\"1586\":1,\"1677\":1}}],[\"错误日志文件\",{\"1\":{\"1384\":1}}],[\"错误页面优雅替代显示文件\",{\"1\":{\"1384\":1}}],[\"错误发生时间\",{\"1\":{\"1249\":1}}],[\"错误方式\",{\"1\":{\"1234\":1,\"1235\":1,\"1236\":1,\"2585\":1}}],[\"错误3\",{\"0\":{\"1079\":1}}],[\"错误2\",{\"0\":{\"1078\":1}}],[\"错误1\",{\"0\":{\"1077\":1}}],[\"错误的比较器实现\",{\"1\":{\"2671\":1}}],[\"错误的集合转换\",{\"0\":{\"2509\":1}}],[\"错误的状态管理会导致会话异常\",{\"1\":{\"1108\":1}}],[\"错误的保留策略\",{\"0\":{\"1077\":1}}],[\"错误的初始化时机\",{\"1\":{\"1053\":1}}],[\"错误的主机信息\",{\"1\":{\"125\":1}}],[\"错误码不应体现版本信息\",{\"1\":{\"2051\":1}}],[\"错误码设计原则\",{\"0\":{\"2051\":1}}],[\"错误码格式\",{\"0\":{\"2050\":1}}],[\"错误码规范\",{\"0\":{\"2049\":1}}],[\"错误码\",{\"1\":{\"1044\":1,\"1249\":1,\"2938\":1}}],[\"错误示例\",{\"1\":{\"491\":1,\"552\":1,\"553\":1,\"566\":1,\"1077\":1,\"1079\":1,\"1190\":1,\"1253\":1,\"1336\":1,\"1337\":1,\"1338\":1,\"2158\":1,\"2159\":1,\"2180\":1,\"2181\":1,\"2204\":1,\"2205\":1,\"2230\":1,\"2231\":1,\"2255\":1,\"2279\":1,\"2340\":1,\"2382\":1,\"2419\":1,\"2420\":1,\"2448\":1,\"2449\":1,\"2450\":1,\"2451\":1,\"2452\":1,\"2476\":1,\"2477\":1,\"2478\":1,\"2481\":1,\"2505\":1,\"2506\":1,\"2507\":1,\"2508\":1,\"2509\":1,\"2612\":1,\"2642\":1,\"2668\":1,\"2669\":1,\"2691\":1,\"2737\":1,\"2959\":1}}],[\"错误指标\",{\"1\":{\"193\":1}}],[\"错误或未知协议\",{\"1\":{\"125\":1}}],[\"错误\",{\"1\":{\"125\":550,\"306\":1,\"1005\":1,\"1079\":1,\"1301\":1,\"2480\":1,\"2533\":1,\"2534\":1,\"2536\":1,\"2539\":1,\"2642\":1,\"3109\":1}}],[\"zxf\",{\"1\":{\"3246\":1}}],[\"zxvf\",{\"1\":{\"1582\":1,\"1618\":1,\"1626\":1,\"1715\":1,\"1730\":1,\"1734\":1,\"1750\":1,\"1863\":2,\"1898\":1,\"3100\":1,\"3263\":1}}],[\"z9hg4bk\",{\"1\":{\"3190\":1}}],[\"z9hg4bk776asdhds\",{\"1\":{\"1094\":1}}],[\"z0\",{\"1\":{\"2065\":1}}],[\"zcvf\",{\"1\":{\"1898\":2}}],[\"zcard\",{\"1\":{\"204\":1}}],[\"z=僵尸进程\",{\"1\":{\"1882\":1}}],[\"zvxf\",{\"1\":{\"1782\":1}}],[\"zzz\",{\"1\":{\"1865\":1}}],[\"zz2022\",{\"1\":{\"1563\":1}}],[\"zz\",{\"1\":{\"1503\":1,\"1577\":3,\"1578\":3,\"1736\":2,\"1737\":1,\"1819\":1}}],[\"zk\",{\"1\":{\"1464\":1}}],[\"zkserver\",{\"1\":{\"1369\":2}}],[\"zulu\",{\"1\":{\"999\":1,\"1005\":1}}],[\"zunionstore\",{\"1\":{\"204\":1}}],[\"z垃圾收集器\",{\"1\":{\"476\":1}}],[\"zgc在java\",{\"1\":{\"492\":1}}],[\"zgc的优势可能不明显\",{\"1\":{\"492\":1}}],[\"zgc的内存占用较大\",{\"1\":{\"492\":1}}],[\"zgc的使用注意事项\",{\"0\":{\"492\":1}}],[\"zgc的设计目标是\",{\"1\":{\"487\":1}}],[\"zgc的工作原理\",{\"1\":{\"476\":1}}],[\"zgc\",{\"0\":{\"476\":1}}],[\"zoo\",{\"1\":{\"1528\":1}}],[\"zookeeper\",{\"1\":{\"1369\":12,\"1374\":4,\"1529\":6,\"1530\":2,\"1533\":1,\"1535\":7}}],[\"zookpeeper\",{\"0\":{\"1369\":1}}],[\"zos\",{\"1\":{\"286\":1}}],[\"zones\",{\"1\":{\"1931\":1}}],[\"zoneinfo\",{\"1\":{\"1548\":1,\"1697\":1}}],[\"zone指令以及limit\",{\"1\":{\"1397\":1}}],[\"zone=public\",{\"1\":{\"1918\":1,\"1925\":1,\"1926\":1,\"1927\":1,\"1928\":1,\"1930\":1,\"1932\":1}}],[\"zone=myservername\",{\"1\":{\"1397\":1}}],[\"zone=myip\",{\"1\":{\"1397\":1}}],[\"zone=zone\",{\"1\":{\"1395\":1,\"1396\":1}}],[\"zone=one\",{\"1\":{\"1395\":1,\"1396\":1}}],[\"zone命令及limit\",{\"1\":{\"1395\":1}}],[\"zoneddatetime\",{\"1\":{\"545\":1}}],[\"zone\",{\"1\":{\"122\":5,\"125\":1,\"1395\":1,\"1396\":1,\"1397\":2,\"1638\":1,\"1940\":2}}],[\"zipkin<\",{\"1\":{\"3104\":1}}],[\"zipkin\",{\"1\":{\"3104\":2}}],[\"zip<\",{\"1\":{\"1564\":1}}],[\"zipoutstream\",{\"1\":{\"286\":9}}],[\"zipoutputstream\",{\"1\":{\"286\":6}}],[\"ziputil\",{\"1\":{\"286\":1}}],[\"zipfilepath\",{\"1\":{\"286\":3}}],[\"zipfile\",{\"1\":{\"286\":6}}],[\"zipentry\",{\"1\":{\"286\":2}}],[\"zip\",{\"1\":{\"286\":4,\"1636\":1,\"1862\":2,\"1863\":1,\"2849\":2}}],[\"zip压缩下载工具类\",{\"0\":{\"286\":1}}],[\"zinterstore\",{\"1\":{\"204\":1}}],[\"zincrby\",{\"1\":{\"204\":1}}],[\"zjh=\",{\"1\":{\"285\":1}}],[\"zhaoyuqiang\",{\"1\":{\"1738\":1}}],[\"zhaohuanh\",{\"1\":{\"1711\":2}}],[\"zhao\",{\"1\":{\"1711\":1}}],[\"zhangsan\",{\"1\":{\"1431\":1}}],[\"zh\",{\"1\":{\"1517\":1,\"1520\":1,\"1609\":3}}],[\"zhongzhi\",{\"1\":{\"270\":1,\"280\":1,\"1711\":1,\"1897\":1}}],[\"zhusaidong\",{\"1\":{\"233\":1,\"234\":2}}],[\"zscore\",{\"1\":{\"204\":1}}],[\"zset等类型\",{\"1\":{\"140\":1}}],[\"zset\",{\"1\":{\"131\":1}}],[\"zrank\",{\"1\":{\"204\":1}}],[\"zrangebyscore\",{\"1\":{\"204\":1}}],[\"zrange\",{\"1\":{\"204\":1}}],[\"zrem\",{\"1\":{\"204\":1}}],[\"zrzyjyb\",{\"1\":{\"118\":1}}],[\"za\",{\"1\":{\"2065\":1}}],[\"zaxxer\",{\"1\":{\"445\":1}}],[\"zadd\",{\"1\":{\"204\":1}}],[\"zabbix\",{\"1\":{\"193\":1}}],[\"zerodatetimebehavior=converttonull\",{\"1\":{\"1648\":1,\"1685\":1}}],[\"zerocopydemo\",{\"1\":{\"1321\":1}}],[\"zerocopyexample\",{\"1\":{\"1232\":1}}],[\"zero\",{\"1\":{\"125\":1,\"1232\":2,\"2007\":1,\"2947\":1}}],[\"z\",{\"0\":{\"476\":1},\"1\":{\"125\":3,\"1185\":1,\"1191\":1,\"1564\":1,\"1882\":1,\"2323\":1,\"2465\":1}}],[\"zlib压缩库\",{\"1\":{\"1779\":1}}],[\"zlib\",{\"1\":{\"125\":6,\"1779\":2}}],[\"即与docker\",{\"1\":{\"3262\":1}}],[\"即创建容器又帮我们维护容器\",{\"1\":{\"3250\":1}}],[\"即时通讯等领域\",{\"1\":{\"3172\":1}}],[\"即时通讯系统\",{\"1\":{\"3091\":1}}],[\"即时编译器\",{\"1\":{\"690\":1}}],[\"即一个类只负责一项职责\",{\"1\":{\"2770\":1}}],[\"即1\",{\"1\":{\"2318\":1,\"2355\":1}}],[\"即通过accept调用创建的tcp连接\",{\"1\":{\"1886\":1}}],[\"即可访问微服务接口\",{\"1\":{\"3246\":1}}],[\"即可删除redis\",{\"1\":{\"1785\":1}}],[\"即可关闭redis\",{\"1\":{\"1780\":1}}],[\"即可启动成功\",{\"1\":{\"121\":1}}],[\"即容器创建并启动完成\",{\"1\":{\"1569\":1}}],[\"即接入成功\",{\"1\":{\"1564\":1}}],[\"即完成从kafka收集消息\",{\"1\":{\"1535\":1}}],[\"即vi\",{\"1\":{\"1504\":1}}],[\"即http下加入ssl层\",{\"1\":{\"1414\":1}}],[\"即将具体类型参数化\",{\"1\":{\"1286\":1}}],[\"即对扩展开放\",{\"1\":{\"1273\":1}}],[\"即异步io\",{\"1\":{\"1238\":1}}],[\"即选择依赖路径最短的版本\",{\"1\":{\"1014\":1}}],[\"即没有被重新赋值\",{\"1\":{\"552\":1}}],[\"即没有初始化服务\",{\"1\":{\"121\":1}}],[\"即m个虚拟线程映射到n个平台线程上执行\",{\"1\":{\"528\":1}}],[\"即使所在的类不是泛型类\",{\"1\":{\"3023\":1}}],[\"即使反射也不能随意打破模块边界\",{\"1\":{\"2994\":1}}],[\"即使使用反射也无法访问未导出包中的类\",{\"1\":{\"2994\":1}}],[\"即使使用了线程安全的包装\",{\"1\":{\"2513\":1}}],[\"即使调用了setaccessible\",{\"1\":{\"2990\":1}}],[\"即使类名相同\",{\"1\":{\"2975\":1}}],[\"即使创建多个实例对象\",{\"1\":{\"2975\":1}}],[\"即使某个被组合的流关闭失败\",{\"1\":{\"2896\":1}}],[\"即使发生异常\",{\"1\":{\"2848\":1}}],[\"即使发生修改也不会影响迭代结果\",{\"1\":{\"2543\":1}}],[\"即使个别操作具有较高复杂度\",{\"1\":{\"2704\":1}}],[\"即使键被回收\",{\"1\":{\"2693\":1}}],[\"即使不再需要\",{\"1\":{\"2691\":1}}],[\"即使此时它仍然是weakhashmap的键\",{\"1\":{\"2676\":1}}],[\"即使io性能不理想\",{\"1\":{\"1884\":1}}],[\"即使用spec\",{\"1\":{\"1660\":1}}],[\"即使导出了包\",{\"1\":{\"1281\":1}}],[\"即使通过不同的类加载器加载同一个类\",{\"1\":{\"1279\":1}}],[\"即使线程被虚假唤醒\",{\"1\":{\"1139\":1}}],[\"即使在复杂表达式中\",{\"1\":{\"502\":1}}],[\"即使有其中一台服务器宕机\",{\"1\":{\"161\":1}}],[\"即两个或多个对象相互依赖\",{\"1\":{\"330\":1}}],[\"即只允许用户登录一个设备\",{\"1\":{\"306\":1}}],[\"即\",{\"1\":{\"281\":1,\"1788\":1}}],[\"即准备阶段\",{\"1\":{\"163\":1}}],[\"即服务器年宕机时长低于315秒\",{\"1\":{\"160\":1}}],[\"即99\",{\"1\":{\"160\":1}}],[\"即占用物理内存的比例\",{\"1\":{\"157\":1}}],[\"结束已建立的会话\",{\"1\":{\"3175\":1}}],[\"结束方法\",{\"1\":{\"2134\":1}}],[\"结束\",{\"1\":{\"2134\":1,\"3070\":1}}],[\"结束索引\",{\"1\":{\"288\":1}}],[\"结尾\",{\"1\":{\"2090\":1,\"2091\":1}}],[\"结构修改计数器\",{\"1\":{\"2593\":1,\"2648\":1}}],[\"结构化的流程控制使得代码更容易维护和修改\",{\"1\":{\"2136\":1}}],[\"结构化\",{\"1\":{\"2136\":1}}],[\"结构化检索和分析\",{\"1\":{\"1507\":1}}],[\"结构实现\",{\"1\":{\"128\":1}}],[\"结合aop实现方法结果缓存\",{\"1\":{\"3170\":1}}],[\"结合aop在方法执行前检查权限\",{\"1\":{\"3154\":1}}],[\"结合ant的灵活性和maven的依赖管理\",{\"1\":{\"585\":1}}],[\"结合red指标和系统指标\",{\"1\":{\"3111\":1}}],[\"结合resilience4j或hystrix等框架\",{\"1\":{\"2960\":1}}],[\"结合弱引用\",{\"1\":{\"3011\":1}}],[\"结合concurrentlinkedqueue维护顺序\",{\"1\":{\"2640\":1}}],[\"结合了不同算法的优势\",{\"1\":{\"767\":1}}],[\"结合原子类和不可变对象可以构建线程安全的数据结构\",{\"1\":{\"681\":1}}],[\"结合监控系统\",{\"1\":{\"634\":1}}],[\"结合使用optional和npe增强的示例\",{\"1\":{\"521\":1}}],[\"结合使用两者\",{\"1\":{\"521\":1}}],[\"结果大于0\",{\"1\":{\"1838\":1}}],[\"结果\",{\"1\":{\"1246\":2,\"1687\":1}}],[\"结果为3\",{\"1\":{\"2101\":1}}],[\"结果为30\",{\"1\":{\"538\":1}}],[\"结果为6\",{\"1\":{\"575\":1}}],[\"结果集\",{\"1\":{\"279\":4,\"289\":2}}],[\"结果有1个以上的行组成\",{\"1\":{\"125\":1}}],[\"结果字符串长于\",{\"1\":{\"125\":1}}],[\"结果报错\",{\"1\":{\"121\":1}}],[\"结论\",{\"1\":{\"114\":2,\"161\":3,\"1058\":1,\"1179\":2}}],[\"我想要从容器连接主机的一个服务\",{\"1\":{\"3256\":1}}],[\"我曾经在一个做加密解密很频繁的服务器上\",{\"1\":{\"1887\":1}}],[\"我本机上没什么io操作\",{\"1\":{\"1887\":1}}],[\"我本机大概占用300多m\",{\"1\":{\"1887\":2}}],[\"我的机器内存充裕\",{\"1\":{\"1887\":1}}],[\"我的机器内存总共8g\",{\"1\":{\"1887\":1}}],[\"我测试的服务器目前cpu比较空闲\",{\"1\":{\"1887\":1}}],[\"我么可以通过cat\",{\"1\":{\"1787\":1}}],[\"我用的root用户\",{\"1\":{\"1584\":1}}],[\"我采用\",{\"1\":{\"1558\":1}}],[\"我这里演示用命令重启oracle服务\",{\"1\":{\"1574\":1}}],[\"我这里没设置\",{\"1\":{\"1512\":1}}],[\"我这里是因为生产上的mysql数据存放目录data在其他文件夹中\",{\"1\":{\"121\":1}}],[\"我真的是div\",{\"1\":{\"1461\":1}}],[\"我也是有底线的\",{\"1\":{\"1443\":1}}],[\"我nginx多久接收一个\",{\"1\":{\"1396\":1}}],[\"我nginx多久接收一个请求\",{\"1\":{\"1395\":1}}],[\"我直接用\",{\"1\":{\"990\":1}}],[\"我给稳定版\",{\"1\":{\"990\":1}}],[\"我给测试版\",{\"1\":{\"990\":1}}],[\"我习惯的实现方式\",{\"1\":{\"306\":1}}],[\"我愿称它为你最少最少要遵守的代码规范\",{\"1\":{\"297\":1}}],[\"我执行的\",{\"1\":{\"248\":1}}],[\"我都给你留下来了\",{\"1\":{\"137\":1}}],[\"我就记下来就行了\",{\"1\":{\"137\":1}}],[\"我们会调用你\",{\"1\":{\"3009\":1}}],[\"我们会有多种删除策略\",{\"1\":{\"147\":1}}],[\"我们应该使用bigdecimal类而不是浮点数\",{\"1\":{\"2105\":1}}],[\"我们应该为以下部分添加注释\",{\"1\":{\"2095\":1}}],[\"我们大体上就可以排除网络访问层\",{\"1\":{\"1917\":1}}],[\"我们的代码就会进入内核空间\",{\"1\":{\"1887\":1}}],[\"我们一般做性能测试时会进行几千并发甚至几万并发的测试\",{\"1\":{\"1887\":1}}],[\"我们上面启动方式就是执行了该配置文件的配置运行的\",{\"1\":{\"1787\":1}}],[\"我们就可以启动redis客户端进入redis了\",{\"1\":{\"1786\":1}}],[\"我们就需要redis的哨兵\",{\"1\":{\"176\":1}}],[\"我们把宿主环境9200端口映射到docker容器中的9200端口\",{\"1\":{\"1512\":1}}],[\"我们把这些时间加在一起就是全年应用服务不可用的时间\",{\"1\":{\"160\":1}}],[\"我们需要将a服务器上的某个文件\",{\"1\":{\"1501\":1}}],[\"我们需要判断\",{\"1\":{\"152\":1}}],[\"我们除了可以在\",{\"1\":{\"1438\":1}}],[\"我们则在反向代理服务器nginx中进行缓存\",{\"1\":{\"1401\":1}}],[\"我们则根据静态资源的特点将其做缓存操作\",{\"1\":{\"1401\":1}}],[\"我们也可以自定义函数式接口\",{\"1\":{\"538\":1}}],[\"我们也就提高了系统整体的并发\",{\"1\":{\"129\":1}}],[\"我们再次的总结一下主从复制的三个阶段的工作流程\",{\"1\":{\"168\":1}}],[\"我们想\",{\"1\":{\"161\":1}}],[\"我们称为并发\",{\"1\":{\"160\":1}}],[\"我们来看具体的操作流程\",{\"1\":{\"182\":1}}],[\"我们来看一下\",{\"1\":{\"132\":1}}],[\"我们来讲redis的定期删除方案\",{\"1\":{\"153\":1}}],[\"我们主进程一直在处理指令\",{\"1\":{\"138\":1}}],[\"我们知道一点\",{\"1\":{\"137\":1}}],[\"我们叫做数据恢复\",{\"1\":{\"136\":1}}],[\"我们叫做数据保存\",{\"1\":{\"136\":1}}],[\"我们说自动恢复\",{\"1\":{\"136\":1}}],[\"我们可以在不修改现有代码的情况下\",{\"1\":{\"2754\":1}}],[\"我们可以在不修改框架源码的情况下\",{\"1\":{\"1273\":1}}],[\"我们可以编写不依赖于具体类型的代码\",{\"1\":{\"2754\":1}}],[\"我们可以ctrl+c退出后\",{\"1\":{\"1786\":1}}],[\"我们可以将之前的例子添加burst参数以及nodelay参数\",{\"1\":{\"1396\":1}}],[\"我们可以自己编写\",{\"1\":{\"1386\":1}}],[\"我们可以绕过访问控制符的限制\",{\"1\":{\"1271\":1}}],[\"我们可以打破封装性\",{\"1\":{\"1259\":1,\"2962\":1}}],[\"我们可以采用一些用具\",{\"1\":{\"193\":1}}],[\"我们可以总结出完整的主从复制流程\",{\"1\":{\"169\":1}}],[\"我们可以很方便地完成很多复杂的业务场景比如通过\",{\"1\":{\"130\":1}}],[\"我们可以把一些高频访问的数据放到\",{\"1\":{\"129\":1}}],[\"我们都是基于\",{\"1\":{\"130\":1}}],[\"我们发现比之前版本多了一步操作\",{\"1\":{\"115\":1}}],[\"我替换了mysql安装目录后\",{\"1\":{\"121\":1}}],[\"我在cmd输入启动命令\",{\"1\":{\"121\":1}}],[\"我在本机上测试\",{\"1\":{\"121\":1}}],[\"将tar包上传到指定位置\",{\"1\":{\"3263\":1}}],[\"将功能拆分为注册\",{\"1\":{\"3228\":1}}],[\"将复杂的会话控制逻辑放在通信端点\",{\"1\":{\"3220\":1}}],[\"将协议栈分为应用层\",{\"1\":{\"3220\":1}}],[\"将用户地址与实际位置绑定\",{\"1\":{\"3179\":1}}],[\"将网络通信分为协议层\",{\"1\":{\"3089\":1}}],[\"将io事件分发到相应的处理器处理\",{\"1\":{\"3083\":1}}],[\"将index+1及其后的元素向前移动一位\",{\"1\":{\"2440\":2}}],[\"将index及其后的元素向后移动一位\",{\"1\":{\"2437\":1}}],[\"将泛型类型替换为其原始类型\",{\"1\":{\"3034\":1}}],[\"将泛型类型参数替换为边界类型\",{\"1\":{\"1290\":1}}],[\"将类型确定的工作推迟到创建对象或调用方法时才去明确指定的特殊类型\",{\"1\":{\"3016\":1}}],[\"将类名转换为文件路径\",{\"1\":{\"746\":1}}],[\"将创建好的实例存入容器\",{\"1\":{\"2999\":1}}],[\"将底层技术异常转换为高层业务异常\",{\"1\":{\"2952\":1}}],[\"将严重错误\",{\"1\":{\"2929\":1}}],[\"将流添加到vector集合\",{\"1\":{\"2892\":1}}],[\"将抽象部分与实现部分分离\",{\"1\":{\"2883\":1}}],[\"将字节流接口适配为字符流接口\",{\"1\":{\"2883\":1}}],[\"将字符串对象加入常量池\",{\"1\":{\"2189\":1}}],[\"将字符串转换为stream流\",{\"1\":{\"472\":1}}],[\"将指定字符序列的子序列追加到此writer\",{\"1\":{\"2854\":1}}],[\"将指定的字符序列追加到此writer\",{\"1\":{\"2854\":1}}],[\"将指定元素插入优先级队列\",{\"1\":{\"2573\":1}}],[\"将b\",{\"1\":{\"2842\":1}}],[\"将此流重新定位到上次标记的位置\",{\"1\":{\"2841\":1,\"2853\":1}}],[\"将业务逻辑封装在对象内部\",{\"1\":{\"2750\":1}}],[\"将表分成多个段\",{\"1\":{\"2697\":1}}],[\"将条目从旧表转移到新表\",{\"1\":{\"2684\":1}}],[\"将被包装为弱引用\",{\"1\":{\"2680\":1}}],[\"将红黑树转回链表\",{\"1\":{\"2608\":1}}],[\"将链表转为红黑树\",{\"1\":{\"2608\":1}}],[\"将链表转换为红黑树\",{\"1\":{\"2428\":1}}],[\"将新节点添加到链表末尾\",{\"1\":{\"2608\":1}}],[\"将新元素添加到链表或红黑树中\",{\"1\":{\"2393\":1}}],[\"将旧表中的节点转移到新表\",{\"1\":{\"2601\":1}}],[\"将键值对放入映射\",{\"1\":{\"2600\":1,\"2655\":1}}],[\"将高16位与低16位异或\",{\"1\":{\"2599\":1}}],[\"将整个数组分成多个segment\",{\"1\":{\"2541\":1}}],[\"将节点移动到双向链表尾部\",{\"1\":{\"2629\":1}}],[\"将节点移到头部\",{\"1\":{\"2512\":1}}],[\"将节点链接到双向链表尾部\",{\"1\":{\"2628\":1}}],[\"将节点的元素置为null\",{\"1\":{\"2496\":1}}],[\"将节点的后继置为null\",{\"1\":{\"2496\":1}}],[\"将节点的前驱置为null\",{\"1\":{\"2496\":1}}],[\"将linkedlist转换为数组时使用toarray\",{\"1\":{\"2509\":1}}],[\"将尾节点的元素和前驱置为null\",{\"1\":{\"2497\":1}}],[\"将头节点的元素和后继置为null\",{\"1\":{\"2497\":1}}],[\"将元素链接到链表头部\",{\"1\":{\"2497\":1}}],[\"将元素链接到链表末尾\",{\"1\":{\"2494\":1}}],[\"将元素链接到指定节点之前\",{\"1\":{\"2494\":1}}],[\"将元素添加到数组的size位置\",{\"1\":{\"2437\":1}}],[\"将容量调整为元素数量\",{\"1\":{\"2451\":1}}],[\"将容器的8080端口映射到主机的8080端口\",{\"1\":{\"1590\":1}}],[\"将容器的\",{\"1\":{\"1578\":1,\"1595\":1}}],[\"将容器的文件同步到宿主机\",{\"0\":{\"240\":1}}],[\"将所有属性都私有化并提供简单的getter\",{\"1\":{\"2750\":1}}],[\"将所有节点的引用置为null\",{\"1\":{\"2496\":1}}],[\"将所有元素置为null\",{\"1\":{\"2440\":1}}],[\"将所有的存储空间计划切割成16384份\",{\"1\":{\"185\":1}}],[\"将最后一个元素置为null\",{\"1\":{\"2440\":2}}],[\"将最坏情况下的时间复杂度从o\",{\"1\":{\"2414\":1}}],[\"将osi七层模型简化为四层\",{\"1\":{\"3059\":1}}],[\"将o\",{\"1\":{\"2728\":1}}],[\"将object类型转换为泛型e\",{\"1\":{\"2439\":1}}],[\"将oraclejdk打入agent镜像中\",{\"1\":{\"1557\":2}}],[\"将elementdata从transient改为private\",{\"1\":{\"2434\":1}}],[\"将eden和from区存活对象复制到to区\",{\"1\":{\"720\":1}}],[\"将集合转换为不可变set\",{\"1\":{\"2367\":1}}],[\"将存储结构从char\",{\"1\":{\"2289\":1}}],[\"将存活对象复制到另一半\",{\"1\":{\"1150\":1}}],[\"将对象创建的控制权从应用代码转移到框架\",{\"1\":{\"3009\":1}}],[\"将对象组合成树形结构以表示\",{\"1\":{\"2895\":1}}],[\"将对象加入常量池并获取引用\",{\"1\":{\"2245\":1}}],[\"将对台服务器组成一个集群\",{\"1\":{\"1403\":1}}],[\"将数组分成多个\",{\"1\":{\"2357\":1}}],[\"将数组转换为list集合\",{\"1\":{\"2218\":1}}],[\"将数据输出和格式化的责任分离到专门的类中\",{\"1\":{\"2907\":1}}],[\"将数据一次性写入目标\",{\"1\":{\"2865\":1}}],[\"将数据分成多个段\",{\"1\":{\"2519\":1}}],[\"将数据分解成键值对\",{\"1\":{\"59\":1}}],[\"将数据库字符编码集修改为utf8mb4\",{\"1\":{\"1831\":1}}],[\"将数据显示到页面\",{\"1\":{\"1444\":2}}],[\"将数据显示\",{\"1\":{\"1443\":1}}],[\"将数据响应给客户端\",{\"1\":{\"1443\":2,\"1444\":2}}],[\"将数据转成json\",{\"1\":{\"1440\":1}}],[\"将数据复制多个副本保存在不同的服务器上\",{\"1\":{\"161\":1}}],[\"将数据的操作过程进行保存\",{\"1\":{\"137\":1}}],[\"将二维数据封装为对象\",{\"1\":{\"2178\":1}}],[\"将行变为列\",{\"1\":{\"2173\":1}}],[\"将变更频率相似的功能放在同一服务\",{\"1\":{\"2014\":1}}],[\"将设置为开机自启\",{\"0\":{\"1936\":1}}],[\"将foobared改成自己的密码\",{\"1\":{\"1787\":1}}],[\"将protected\",{\"1\":{\"1786\":2}}],[\"将上面复制的下载链接粘贴上\",{\"1\":{\"1781\":1}}],[\"将安装包放入core文件夹中管理\",{\"1\":{\"1779\":1}}],[\"将配置文件都修修改完之后\",{\"1\":{\"1764\":1}}],[\"将配置文件中elasticsearch\",{\"1\":{\"1520\":1}}],[\"将文件映射到内存\",{\"1\":{\"2917\":1}}],[\"将文件copy到\",{\"1\":{\"1714\":1}}],[\"将文件由内存中保存到硬盘中的这个过程\",{\"1\":{\"136\":1}}],[\"将每个服务的jar文件放入脚本文件夹中\",{\"1\":{\"1645\":1}}],[\"将政务云服务器docker中的镜像上传至政务云harbor中\",{\"1\":{\"1641\":1}}],[\"将mysql\",{\"1\":{\"1640\":1}}],[\"将mysql文件夹改名\",{\"1\":{\"120\":1}}],[\"将默认安装\",{\"1\":{\"1635\":1}}],[\"将下载好的harbor\",{\"1\":{\"1626\":2,\"1715\":2}}],[\"将docker\",{\"1\":{\"1624\":1}}],[\"将docker注册为系统服务\",{\"0\":{\"1620\":1,\"1752\":1}}],[\"将data路径放置mysql安装目录下\",{\"1\":{\"121\":1}}],[\"将主机中当前目录挂载到容器的webapps\",{\"1\":{\"1590\":1}}],[\"将主机当前目录下的data目录挂载到容器的\",{\"1\":{\"1578\":1}}],[\"将主机当前目录下的\",{\"1\":{\"1578\":2,\"1595\":2}}],[\"将环境变量指定数据源\",{\"1\":{\"1555\":1}}],[\"将编译构建得到的jar文件复制到镜像空间中\",{\"1\":{\"1551\":1}}],[\"将打包好的镜像导入到政务云服务器docker中\",{\"1\":{\"1641\":1}}],[\"将打包好的镜像导入docker\",{\"1\":{\"1507\":1}}],[\"将打包好的镜像上传至离线服务器\",{\"1\":{\"1507\":1}}],[\"将a文件夹的文件同步到c文件夹下\",{\"1\":{\"1502\":1}}],[\"将a文件夹同步到b文件夹\",{\"1\":{\"1501\":1}}],[\"将其sip\",{\"1\":{\"3187\":1}}],[\"将其优化为o\",{\"1\":{\"2512\":1}}],[\"将其均卸载之\",{\"1\":{\"1765\":1}}],[\"将其解压后进入源码目录\",{\"1\":{\"1489\":1}}],[\"将其他slave连接新的master\",{\"1\":{\"177\":1}}],[\"将图片显示到大图片上\",{\"1\":{\"1470\":2}}],[\"将描述列表全部删除\",{\"1\":{\"1462\":2}}],[\"将雄起删除\",{\"1\":{\"1462\":2}}],[\"将雄起添加到上海上方\",{\"1\":{\"1462\":2}}],[\"将雄起添加到上海下方\",{\"1\":{\"1462\":2}}],[\"将加油添加到城市列表最上方\",{\"1\":{\"1462\":2}}],[\"将加油添加到城市列表最下方\",{\"1\":{\"1462\":2}}],[\"将得到的数据转为json\",{\"1\":{\"1443\":1,\"1444\":1}}],[\"将得到的数据转为\",{\"1\":{\"1443\":1,\"1444\":1}}],[\"将请求分发到不同的服务器\",{\"1\":{\"3183\":1}}],[\"将请求标记设置为true\",{\"1\":{\"1443\":1}}],[\"将请求标记置为false\",{\"1\":{\"1443\":1}}],[\"将请求标记置为\",{\"1\":{\"1443\":1}}],[\"将请求转成https\",{\"1\":{\"1417\":1}}],[\"将返回的数据显示到show的div\",{\"1\":{\"1440\":1}}],[\"将返回的数据转成\",{\"1\":{\"1440\":1}}],[\"将联想框隐藏\",{\"1\":{\"1440\":1}}],[\"将响应的数据显示到span标签\",{\"1\":{\"1431\":1,\"1433\":1,\"1434\":1,\"1435\":1}}],[\"将证书上传到一个文件夹中\",{\"1\":{\"1417\":1}}],[\"将连接放入池中\",{\"1\":{\"1326\":1}}],[\"将大数据分成适合mtu的报文段\",{\"1\":{\"1312\":1}}],[\"将大文件分成小块\",{\"1\":{\"1238\":1}}],[\"将大型应用拆分为模块\",{\"1\":{\"495\":1}}],[\"将channel注册到selector\",{\"1\":{\"1228\":1,\"3118\":1}}],[\"将hashmap分为多个段\",{\"1\":{\"1197\":1}}],[\"将sip信令转换为webrtc兼容格式\",{\"1\":{\"3232\":1}}],[\"将sip服务器部署在网络边缘\",{\"1\":{\"1117\":1}}],[\"将ssthresh设为当前拥塞窗口的一半\",{\"1\":{\"3075\":1}}],[\"将sql异常转换为业务异常\",{\"1\":{\"2952\":1}}],[\"将slave的数据库状态更新成master当前的数据库状态\",{\"1\":{\"166\":1}}],[\"将长会话拆分为多个短会话\",{\"1\":{\"1116\":1}}],[\"将原来server标签和profile标签中的的ossrh替换为release\",{\"1\":{\"1002\":1,\"1003\":1}}],[\"将工单状态response修改为open\",{\"1\":{\"993\":1}}],[\"将自定义项目上传至maven中央仓库\",{\"1\":{\"990\":1}}],[\"将gc日志输出到指定文件\",{\"1\":{\"796\":1,\"830\":1,\"864\":1,\"898\":1}}],[\"将内存分为两半\",{\"1\":{\"1150\":1}}],[\"将内存分为大小相等的两块\",{\"1\":{\"765\":1}}],[\"将内存划分为新生代和老年代\",{\"1\":{\"776\":1}}],[\"将父类加载器设置为null\",{\"1\":{\"747\":1}}],[\"将符号引用转换为直接引用\",{\"1\":{\"725\":1}}],[\"将堆分为新生代和老年代\",{\"1\":{\"713\":1}}],[\"将异常封装在future中\",{\"1\":{\"632\":1}}],[\"将npe减少作为代码质量指标\",{\"1\":{\"522\":1}}],[\"将npe消息中的变量名作为代码审查关注点\",{\"1\":{\"522\":1}}],[\"将生成的\",{\"1\":{\"306\":1}}],[\"将会话管理流程改进如下\",{\"1\":{\"306\":1}}],[\"将前两部分加密\",{\"1\":{\"303\":1}}],[\"将一个接口多个实现\",{\"1\":{\"293\":1}}],[\"将总数据按指定数量分批\",{\"1\":{\"288\":1}}],[\"将多个相关异常聚合为一个复合异常\",{\"1\":{\"2940\":1}}],[\"将多个连续的细粒度锁合并为一个粗粒度锁\",{\"1\":{\"645\":1}}],[\"将多个文件压缩到指定输出流中\",{\"1\":{\"286\":1}}],[\"将多文件循环写入压缩包\",{\"1\":{\"286\":1}}],[\"将当前字符串加入常量池并返回其引用\",{\"1\":{\"2297\":1}}],[\"将当前\",{\"1\":{\"1548\":1,\"1697\":1}}],[\"将当前图片显示到小图片上\",{\"1\":{\"1469\":2}}],[\"将当前页的数据放进pagelist\",{\"1\":{\"284\":1}}],[\"将当前数据状态进行保存\",{\"1\":{\"137\":1}}],[\"将脚本写入mysql库中\",{\"1\":{\"232\":1}}],[\"将统计结果中的数据分类\",{\"1\":{\"189\":1}}],[\"将需要参与分槽的所有masterid不分先后顺序添加到参数中\",{\"1\":{\"186\":1}}],[\"将key按照计算出的结果放到对应的存储空间\",{\"1\":{\"185\":1}}],[\"将resultset映射为java对象列表\",{\"1\":{\"3000\":1}}],[\"将rdb文件中保存的repl\",{\"1\":{\"171\":1}}],[\"将runid与offset保存到rdb文件中\",{\"1\":{\"171\":1}}],[\"将拒绝所有信息同步\",{\"1\":{\"169\":1}}],[\"将出现变化的数据自动同步到slave\",{\"1\":{\"161\":1}}],[\"将出现错误信息如下\",{\"1\":{\"156\":1}}],[\"将列\",{\"1\":{\"125\":1}}],[\"将\",{\"1\":{\"125\":1,\"550\":1,\"818\":1,\"852\":1,\"886\":1,\"920\":1,\"1449\":2,\"1454\":2}}],[\"qr\",{\"1\":{\"3282\":1}}],[\"qjsqb\",{\"1\":{\"1813\":1}}],[\"qa|grep\",{\"1\":{\"1765\":1,\"1778\":2}}],[\"qa\",{\"1\":{\"1483\":1,\"1498\":1,\"1499\":1,\"1504\":1,\"1580\":3,\"1723\":1,\"1801\":1,\"1840\":1,\"3245\":1}}],[\"q3u8\",{\"1\":{\"1418\":1}}],[\"qingfenginn\",{\"1\":{\"1417\":5}}],[\"q\",{\"1\":{\"997\":1,\"1527\":1,\"1796\":1}}],[\"quantity=2\",{\"1\":{\"3002\":1}}],[\"quantity=\",{\"1\":{\"3002\":1}}],[\"quantity\",{\"1\":{\"3002\":7}}],[\"quality\",{\"1\":{\"2020\":3}}],[\"qualifier注解来指定使用哪个数据源\",{\"1\":{\"445\":1}}],[\"quickcheckmemberaccess\",{\"1\":{\"2987\":1}}],[\"quicksort\",{\"1\":{\"2357\":1}}],[\"quiet=true\",{\"1\":{\"1764\":1}}],[\"quota\",{\"1\":{\"1642\":4}}],[\"question\",{\"1\":{\"3282\":1}}],[\"queue的add\",{\"0\":{\"2562\":1}}],[\"queue源码\",{\"0\":{\"2545\":1}}],[\"queue<largeobject>\",{\"1\":{\"2536\":1}}],[\"queue<string>\",{\"1\":{\"2465\":1,\"2476\":1,\"2477\":1,\"2478\":3}}],[\"queue<integer>\",{\"1\":{\"642\":1,\"2465\":1,\"2524\":1,\"2555\":1,\"2586\":1}}],[\"queuebasicoperations\",{\"1\":{\"2465\":1}}],[\"queue还提供了专门的插入\",{\"1\":{\"2459\":1}}],[\"queue接口定义了队列的规范\",{\"1\":{\"2559\":1}}],[\"queue接口采用了\",{\"1\":{\"2470\":1}}],[\"queue接口基本操作示例\",{\"1\":{\"2465\":1}}],[\"queue接口是java集合框架中的队列数据结构\",{\"1\":{\"2459\":1}}],[\"queue接口概述\",{\"0\":{\"2459\":1}}],[\"queue\",{\"0\":{\"2457\":1},\"1\":{\"642\":5,\"1174\":1,\"2468\":7,\"2476\":5,\"2477\":4,\"2506\":5,\"2524\":5,\"2536\":1,\"2539\":4,\"2555\":5,\"2568\":1,\"2571\":1,\"2573\":2,\"2574\":3,\"2575\":3,\"2679\":1,\"2680\":3,\"2681\":1,\"2683\":1,\"3007\":1}}],[\"queries\",{\"1\":{\"122\":1}}],[\"querybypage\",{\"1\":{\"1443\":2,\"1444\":5}}],[\"queryforobject\",{\"1\":{\"366\":1,\"438\":1}}],[\"querywarrant\",{\"1\":{\"285\":2}}],[\"query\",{\"1\":{\"113\":1,\"125\":5,\"129\":1,\"438\":1,\"1764\":1,\"3282\":4}}],[\"qq\",{\"1\":{\"281\":1,\"997\":4,\"998\":1,\"999\":1,\"1536\":1,\"1644\":3}}],[\"qop\",{\"1\":{\"3215\":8}}],[\"qos\",{\"1\":{\"1564\":6,\"2072\":2,\"3102\":1}}],[\"qo\",{\"1\":{\"264\":1}}],[\"qot9\",{\"1\":{\"118\":1}}],[\"qps\",{\"1\":{\"129\":2}}],[\"qc\",{\"1\":{\"125\":1}}],[\"已收到\",{\"1\":{\"3118\":1}}],[\"已向服务器发送消息\",{\"1\":{\"3065\":1}}],[\"已取消\",{\"1\":{\"2062\":1}}],[\"已完成\",{\"1\":{\"2062\":1}}],[\"已完成任务数\",{\"1\":{\"626\":1}}],[\"已知集合大小\",{\"1\":{\"2449\":1}}],[\"已知大小却不指定容量\",{\"1\":{\"2057\":1}}],[\"已知大概元素数量时\",{\"1\":{\"1193\":1}}],[\"已知需要存储1000个元素\",{\"1\":{\"2355\":1}}],[\"已知需要存储10个元素\",{\"1\":{\"2057\":1}}],[\"已知需要存储约1000个元素\",{\"1\":{\"2344\":1}}],[\"已知需要存储4个键值对\",{\"1\":{\"2057\":1}}],[\"已在当天的资料中提供\",{\"1\":{\"1441\":1}}],[\"已在当天的sql语句中提供\",{\"1\":{\"1441\":1}}],[\"已发送但未确认的第一个字节序号\",{\"1\":{\"1312\":1}}],[\"已发展成为包含编程语言\",{\"1\":{\"559\":1}}],[\"已失效的连接请求报文段\",{\"1\":{\"1311\":1}}],[\"已排序数组\",{\"1\":{\"1161\":1,\"2710\":1}}],[\"已废弃\",{\"1\":{\"566\":1}}],[\"已支持java\",{\"1\":{\"510\":1}}],[\"已过期的数据是真的就立即删除了吗\",{\"1\":{\"147\":1}}],[\"已过时\",{\"1\":{\"125\":1,\"2291\":1}}],[\"已经启动了则可以使用\",{\"1\":{\"3245\":1}}],[\"已经有缓冲的流\",{\"1\":{\"2873\":1}}],[\"已经使用的内存数\",{\"1\":{\"1885\":1}}],[\"已经经过authbasicmodule验证的用户名\",{\"1\":{\"1412\":1}}],[\"已经过期的数据\",{\"1\":{\"147\":1}}],[\"已经开启了ssl\",{\"1\":{\"115\":1}}],[\"已截短\",{\"1\":{\"125\":1}}],[\"已更改\",{\"1\":{\"125\":1}}],[\"已使用\",{\"1\":{\"125\":1}}],[\"已满\",{\"1\":{\"125\":1}}],[\"已用read锁定\",{\"1\":{\"125\":1}}],[\"已跳过\",{\"1\":{\"125\":1}}],[\"已删除\",{\"1\":{\"125\":1}}],[\"已存在事务\",{\"1\":{\"3222\":1}}],[\"已存在\",{\"1\":{\"125\":3}}],[\"已锁定\",{\"1\":{\"125\":1}}],[\"已测试\",{\"0\":{\"97\":1}}],[\"|=\",{\"1\":{\"2113\":1}}],[\"|sort|uniq\",{\"1\":{\"1881\":1}}],[\"|tr\",{\"1\":{\"1875\":1}}],[\"|grep\",{\"1\":{\"1580\":1,\"1786\":1,\"1892\":2}}],[\"||\",{\"1\":{\"289\":4,\"430\":1,\"502\":1,\"1161\":2,\"1162\":2,\"1164\":3,\"1165\":1,\"1166\":1,\"1170\":1,\"1181\":2,\"1182\":1,\"1295\":4,\"1326\":2,\"1440\":1,\"1833\":7,\"1949\":2,\"1962\":2,\"1974\":2,\"1975\":1,\"1987\":1,\"2111\":2,\"2161\":1,\"2205\":2,\"2272\":1,\"2439\":1,\"2554\":4,\"2600\":4,\"2605\":1,\"2707\":3,\"2708\":1,\"2709\":1,\"2710\":1,\"2727\":1,\"2873\":2,\"2942\":1,\"2949\":1,\"3003\":2,\"3007\":8,\"3023\":1,\"3024\":1}}],[\"|\",{\"1\":{\"115\":30,\"121\":4,\"264\":2,\"280\":1,\"1225\":1,\"1412\":69,\"1475\":2,\"1483\":1,\"1498\":1,\"1499\":1,\"1504\":1,\"1610\":1,\"1633\":1,\"1656\":14,\"1671\":1,\"1677\":1,\"1711\":14,\"1723\":1,\"1741\":1,\"1773\":1,\"1780\":1,\"1786\":1,\"1811\":1,\"1838\":8,\"1840\":1,\"1856\":3,\"1867\":1,\"1869\":1,\"1870\":1,\"1881\":2,\"1892\":1,\"2112\":1,\"2909\":1,\"3099\":2,\"3103\":4,\"3255\":1,\"3282\":13}}],[\"服务id\",{\"1\":{\"3250\":3}}],[\"服务拓扑可视化\",{\"1\":{\"3111\":1}}],[\"服务拓扑图\",{\"1\":{\"3104\":1}}],[\"服务类\",{\"1\":{\"3002\":1}}],[\"服务通信异常\",{\"1\":{\"2960\":1}}],[\"服务通信模式\",{\"0\":{\"2010\":1}}],[\"服务实现\",{\"1\":{\"2763\":1}}],[\"服务边界与团队结构对齐\",{\"1\":{\"2014\":1}}],[\"服务粒度平衡需考虑以下因素\",{\"1\":{\"2014\":1}}],[\"服务拆分策略\",{\"0\":{\"2009\":1}}],[\"服务和接口\",{\"1\":{\"1932\":1}}],[\"服务中查看nds\",{\"1\":{\"1688\":1}}],[\"服务中可查看dns\",{\"1\":{\"1685\":1}}],[\"服务名\",{\"1\":{\"1575\":1}}],[\"服务名是xe\",{\"1\":{\"1570\":1}}],[\"服务\",{\"0\":{\"1353\":1},\"1\":{\"1666\":1,\"3246\":1}}],[\"服务网格\",{\"1\":{\"571\":1}}],[\"服务加载变化\",{\"1\":{\"490\":1}}],[\"服务层使用\",{\"1\":{\"3049\":1}}],[\"服务层\",{\"1\":{\"439\":1,\"440\":1,\"2763\":1}}],[\"服务端启动器\",{\"1\":{\"3124\":1}}],[\"服务端模式\",{\"1\":{\"3111\":1}}],[\"服务端接收文件时直接写入磁盘\",{\"1\":{\"1238\":1}}],[\"服务端自会重新给该用户分配一个新的token\",{\"1\":{\"306\":1}}],[\"服务端不必理会\",{\"1\":{\"306\":1}}],[\"服务端只需要重置token即可\",{\"1\":{\"306\":1}}],[\"服务端可以随时踢掉用户当前的登录状态\",{\"1\":{\"306\":1}}],[\"服务端的权限系统对用户鉴权\",{\"1\":{\"306\":1}}],[\"服务端会分配给该用户一个token\",{\"1\":{\"306\":1}}],[\"服务端向客户端下发新的\",{\"1\":{\"306\":1}}],[\"服务端鉴权后返回给客户端需要的数据\",{\"1\":{\"306\":1}}],[\"服务端生成有效时间较短的\",{\"1\":{\"306\":1}}],[\"服务端进行抓包\",{\"1\":{\"114\":1}}],[\"服务器验证响应值\",{\"1\":{\"3215\":1}}],[\"服务器返回401\",{\"1\":{\"3215\":1}}],[\"服务器错误\",{\"1\":{\"3179\":1}}],[\"服务器对请求的回复\",{\"1\":{\"3179\":1}}],[\"服务器响应\",{\"1\":{\"3117\":1}}],[\"服务器已启动\",{\"1\":{\"3065\":1}}],[\"服务器已收到消息\",{\"1\":{\"3065\":1}}],[\"服务器已收到\",{\"1\":{\"1228\":1,\"1238\":1,\"1314\":1,\"1315\":1,\"2916\":1,\"3125\":1}}],[\"服务器启动器\",{\"1\":{\"3125\":1}}],[\"服务器启动\",{\"1\":{\"2916\":1,\"3118\":1}}],[\"服务器启动后迅速宕机\",{\"1\":{\"189\":1}}],[\"服务器套接字通道\",{\"1\":{\"2915\":1}}],[\"服务器在等待进入呼叫\",{\"1\":{\"1881\":1}}],[\"服务器版本\",{\"1\":{\"1780\":1}}],[\"服务器版本=\",{\"1\":{\"125\":1}}],[\"服务器宿主机\",{\"1\":{\"1661\":1}}],[\"服务器登录harbor\",{\"1\":{\"1636\":1}}],[\"服务器的状态很危险\",{\"1\":{\"1887\":1}}],[\"服务器的防火墙问题\",{\"1\":{\"1788\":1}}],[\"服务器的配置文件\",{\"1\":{\"1503\":1}}],[\"服务器的运行\",{\"1\":{\"167\":1}}],[\"服务器\",{\"1\":{\"1443\":1,\"1444\":1}}],[\"服务器连接已建立\",{\"1\":{\"1432\":1}}],[\"服务器名称\",{\"1\":{\"1412\":1}}],[\"服务器地址\",{\"1\":{\"1412\":1}}],[\"服务器主机\",{\"1\":{\"1326\":1}}],[\"服务器收到syn包后\",{\"1\":{\"3070\":1}}],[\"服务器收到syn包\",{\"1\":{\"1311\":1}}],[\"服务器模型\",{\"1\":{\"1091\":1,\"3172\":1}}],[\"服务器应用关注吞吐量或延迟\",{\"1\":{\"818\":1,\"852\":1,\"886\":1,\"920\":1}}],[\"服务器内存资源紧张\",{\"1\":{\"818\":1,\"852\":1,\"886\":1,\"920\":1}}],[\"服务器运行id是每一台服务器每次运行的身份识别码\",{\"1\":{\"167\":1}}],[\"服务器运行id\",{\"1\":{\"167\":1}}],[\"服务器配置\",{\"1\":{\"165\":1}}],[\"服务器配置不允许binlog清除\",{\"1\":{\"125\":1}}],[\"服务器中每x小时执行bgsave备份\",{\"1\":{\"138\":1}}],[\"服务器每秒可以执行的查询次数\",{\"1\":{\"129\":1}}],[\"服务器不能获得文件映射的指针\",{\"1\":{\"125\":1}}],[\"服务器不能分配文件映射\",{\"1\":{\"125\":1}}],[\"服务器握手过程中出错\",{\"1\":{\"125\":1}}],[\"服务器正运行在\",{\"1\":{\"125\":1}}],[\"服务器未配置为从服务器\",{\"1\":{\"125\":1}}],[\"服务器端事务处理\",{\"1\":{\"3208\":1}}],[\"服务器端设置\",{\"1\":{\"3069\":1}}],[\"服务器端代码\",{\"1\":{\"3065\":1}}],[\"服务器端的redis\",{\"1\":{\"1788\":1}}],[\"服务器端在处理过程中\",{\"1\":{\"1436\":2}}],[\"服务器端口\",{\"1\":{\"403\":1,\"1326\":1}}],[\"服务器端私钥文件\",{\"1\":{\"115\":1}}],[\"服务器端证书文件\",{\"1\":{\"115\":1}}],[\"服务没有报告任何错误\",{\"1\":{\"121\":1}}],[\"服务报告没有任何错误\",{\"1\":{\"121\":1}}],[\"自适应\",{\"1\":{\"3104\":1}}],[\"自适应调整重传间隔\",{\"1\":{\"1115\":1}}],[\"自适应调优理念\",{\"0\":{\"811\":1,\"845\":1,\"879\":1,\"913\":1}}],[\"自平衡\",{\"1\":{\"2663\":1}}],[\"自身专注于数组特性\",{\"1\":{\"2446\":1}}],[\"自身宕机让出primary\",{\"1\":{\"1764\":1}}],[\"自然排序时\",{\"1\":{\"2655\":1}}],[\"自然排序后\",{\"1\":{\"2326\":1}}],[\"自然排序\",{\"1\":{\"2326\":1,\"2363\":2,\"2400\":1,\"2406\":2,\"2461\":1,\"2465\":1,\"2582\":1,\"2664\":1,\"2666\":1}}],[\"自然灾害等情况下数据的完整性\",{\"1\":{\"1739\":1}}],[\"自减\",{\"1\":{\"2109\":1}}],[\"自增\",{\"1\":{\"2109\":1}}],[\"自制应用名称name\",{\"1\":{\"1713\":1}}],[\"自制应用创建xxl\",{\"0\":{\"1688\":1}}],[\"自制应用创建nacos\",{\"0\":{\"1685\":1}}],[\"自制服务应用\",{\"0\":{\"1713\":1}}],[\"自行安装docker\",{\"1\":{\"1632\":1}}],[\"自家项目依赖\",{\"1\":{\"999\":1}}],[\"自定生成实体类方法\",{\"0\":{\"300\":1}}],[\"自定义builder注解\",{\"1\":{\"3162\":1}}],[\"自定义业务handler\",{\"1\":{\"3125\":2}}],[\"自定义业务异常示例\",{\"1\":{\"2938\":1}}],[\"自定义业务异常\",{\"1\":{\"2937\":1}}],[\"自定义业务异常继承runtimeexception\",{\"1\":{\"2037\":1}}],[\"自定义查询\",{\"1\":{\"3052\":1}}],[\"自定义repository接口\",{\"1\":{\"3050\":1}}],[\"自定义reentrantlock实现\",{\"1\":{\"2456\":1}}],[\"自定义验证异常\",{\"1\":{\"3003\":1}}],[\"自定义日志注解\",{\"1\":{\"3002\":1}}],[\"自定义缓冲区输入流实现\",{\"1\":{\"2873\":1}}],[\"自定义缓冲区大小时\",{\"1\":{\"2872\":1}}],[\"自定义方法\",{\"1\":{\"2821\":1}}],[\"自定义同步arraylist\",{\"1\":{\"2456\":1}}],[\"自定义同步器只需重写tryacquire\",{\"1\":{\"639\":1}}],[\"自定义排序示例\",{\"0\":{\"2660\":1}}],[\"自定义排序\",{\"1\":{\"2326\":1}}],[\"自定义格式打印\",{\"1\":{\"2228\":1}}],[\"自定义数组打印工具类\",{\"0\":{\"2228\":1}}],[\"自定义sonarqube规则\",{\"1\":{\"2027\":1}}],[\"自定义项目devops\",{\"1\":{\"1670\":1}}],[\"自定义项目jar上传到maven中央仓库\",{\"0\":{\"990\":1}}],[\"自定义镜像\",{\"0\":{\"1549\":1},\"1\":{\"1536\":1}}],[\"自定义话题\",{\"1\":{\"1535\":1}}],[\"自定义\",{\"1\":{\"1417\":1,\"2999\":1}}],[\"自定义对象作为hashmap键的正确实现\",{\"1\":{\"2605\":1}}],[\"自定义对象作为hashmap键\",{\"0\":{\"2605\":1}}],[\"自定义对象排序\",{\"0\":{\"2388\":1,\"2577\":1}}],[\"自定义对象排序结果\",{\"1\":{\"1182\":1}}],[\"自定义对象\",{\"1\":{\"2178\":1}}],[\"自定义对象去重与排序\",{\"1\":{\"1182\":1}}],[\"自定义注解通常需要结合反射在运行时解析\",{\"1\":{\"3137\":1}}],[\"自定义注解与解析\",{\"0\":{\"3137\":1}}],[\"自定义注解与反射处理器示例\",{\"1\":{\"3002\":1}}],[\"自定义注解处理器开发\",{\"0\":{\"3161\":1},\"1\":{\"3156\":1}}],[\"自定义注解处理器需要正确配置\",{\"1\":{\"3153\":1}}],[\"自定义注解处理器\",{\"0\":{\"3002\":1}}],[\"自定义注解\",{\"1\":{\"1063\":1,\"3137\":1}}],[\"自定义注解做打点标记\",{\"1\":{\"267\":1}}],[\"自定义异常如需要跨进程传输\",{\"1\":{\"2941\":1}}],[\"自定义异常设计\",{\"0\":{\"2938\":1}}],[\"自定义异常设计以及异常对性能的影响\",{\"1\":{\"2933\":1}}],[\"自定义异常\",{\"1\":{\"1044\":1}}],[\"自定义类加载器加载目标类\",{\"1\":{\"756\":1}}],[\"自定义类加载器未被正确回收\",{\"1\":{\"753\":1}}],[\"自定义类加载器实现\",{\"0\":{\"746\":1}}],[\"自定义类加载器\",{\"1\":{\"742\":1}}],[\"自定义类加载器读取类文件\",{\"0\":{\"729\":1}}],[\"自定义拒绝策略需实现rejectedexecutionhandler接口\",{\"1\":{\"634\":1}}],[\"自定义线程池实现\",{\"0\":{\"625\":1}}],[\"自定义条件类\",{\"1\":{\"459\":1}}],[\"自定义属性值替换工具类\",{\"1\":{\"289\":1}}],[\"自定义函数接口\",{\"1\":{\"287\":3}}],[\"自定义配置\",{\"1\":{\"278\":1}}],[\"自定义的编写broker\",{\"1\":{\"250\":1}}],[\"自己移除自己\",{\"1\":{\"1462\":1,\"1465\":1}}],[\"自己本地的jdk安装路径中javadoc路径\",{\"1\":{\"999\":1}}],[\"自己的邮箱\",{\"1\":{\"997\":1}}],[\"自己的局域网ip\",{\"1\":{\"249\":1}}],[\"自己写文的目的是为了记录自己对知识点的掌握程度\",{\"1\":{\"0\":1}}],[\"自带的\",{\"1\":{\"130\":1}}],[\"自动实现根据用户名查询\",{\"1\":{\"3050\":1}}],[\"自动刷新\",{\"1\":{\"2909\":1}}],[\"自动刷新需要在构造方法中显式启用\",{\"1\":{\"2908\":1}}],[\"自动刷新仅在调用println\",{\"1\":{\"2908\":1}}],[\"自动刷新陷阱\",{\"1\":{\"2908\":1}}],[\"自动刷新机制\",{\"0\":{\"2904\":1},\"1\":{\"2901\":1}}],[\"自动关闭流\",{\"1\":{\"2832\":1}}],[\"自动支持序列化\",{\"1\":{\"2826\":1}}],[\"自动清理策略\",{\"0\":{\"2688\":1}}],[\"自动清理机制\",{\"1\":{\"2687\":1}}],[\"自动复用\",{\"1\":{\"2253\":1}}],[\"自动类型转换\",{\"1\":{\"2101\":1}}],[\"自动化诊断\",{\"1\":{\"3111\":1}}],[\"自动化\",{\"1\":{\"2044\":1}}],[\"自动化工具\",{\"1\":{\"2029\":1}}],[\"自动化工具覆盖率\",{\"1\":{\"2026\":1}}],[\"自动化评审工具\",{\"0\":{\"2024\":1}}],[\"自动化测试增强\",{\"1\":{\"522\":1}}],[\"自动测试文档\",{\"1\":{\"1988\":1}}],[\"自动测试文档的正确性和完整性\",{\"1\":{\"1984\":1}}],[\"自动转换文档格式\",{\"1\":{\"1984\":1}}],[\"自动检索文档\",{\"1\":{\"1984\":1}}],[\"自动管理文档\",{\"1\":{\"1984\":1}}],[\"自动管理内存\",{\"1\":{\"1153\":1}}],[\"自动生成文档\",{\"1\":{\"1984\":1,\"1987\":1}}],[\"自动时间同步\",{\"1\":{\"1907\":1}}],[\"自动获取密码配置\",{\"1\":{\"1503\":1}}],[\"自动拆箱是指将包装类对象自动转换为对应的基本数据类型\",{\"1\":{\"2105\":1}}],[\"自动拆箱null的包装类型\",{\"1\":{\"2053\":1}}],[\"自动拆箱时null会抛出npe\",{\"1\":{\"1040\":1}}],[\"自动拆箱\",{\"1\":{\"1040\":1}}],[\"自动解决依赖冲突和版本问题\",{\"1\":{\"943\":1}}],[\"自动解决项目所需的依赖库\",{\"1\":{\"930\":1}}],[\"自动解决\",{\"1\":{\"930\":1}}],[\"自动装箱开销\",{\"1\":{\"2789\":1}}],[\"自动装箱性能损耗\",{\"0\":{\"2452\":1}}],[\"自动装箱是指将基本数据类型自动转换为对应的包装类对象\",{\"1\":{\"2105\":1}}],[\"自动装箱与拆箱的权衡\",{\"0\":{\"1049\":1}}],[\"自动装箱\",{\"1\":{\"1034\":1,\"1040\":1,\"1049\":1,\"2104\":1}}],[\"自动装箱拆箱等重大特性\",{\"1\":{\"574\":1}}],[\"自动装配tomcat服务器注入到bean中\",{\"1\":{\"460\":1}}],[\"自动装配原理五\",{\"0\":{\"463\":1}}],[\"自动装配原理四\",{\"0\":{\"462\":1}}],[\"自动装配原理三enable注解原理\",{\"0\":{\"461\":1}}],[\"自动装配原理二内置服务器的切换\",{\"0\":{\"460\":1}}],[\"自动装配原理一bean的创建\",{\"0\":{\"459\":1}}],[\"自动装配\",{\"1\":{\"391\":1}}],[\"自动去重\",{\"1\":{\"281\":1}}],[\"自动处理文件名编码\",{\"1\":{\"275\":1}}],[\"自动+人工\",{\"1\":{\"190\":1}}],[\"自动故障转移\",{\"1\":{\"177\":1}}],[\"自动\",{\"1\":{\"125\":1}}],[\"自上次读取以来表\",{\"1\":{\"125\":1}}],[\"自签的ca证书\",{\"1\":{\"115\":1}}],[\"当主机需要变化ip地址\",{\"1\":{\"3256\":1}}],[\"当主数据库呢\",{\"1\":{\"128\":1}}],[\"当连的无线网\",{\"1\":{\"3256\":1}}],[\"当执行from完成之后\",{\"1\":{\"3246\":1}}],[\"当执行bgsave的时候\",{\"1\":{\"138\":1}}],[\"当存在onbuild关键字的镜像作为基础镜像的时候\",{\"1\":{\"3246\":1}}],[\"当调用注解的方法时\",{\"1\":{\"3149\":1}}],[\"当调用str\",{\"1\":{\"500\":1}}],[\"当注解元素是数组且只有一个值时\",{\"1\":{\"3140\":1}}],[\"当服务故障比例超过阈值时\",{\"1\":{\"3087\":1}}],[\"当收到3个重复ack时\",{\"1\":{\"3075\":1}}],[\"当拥塞窗口达到慢启动阈值\",{\"1\":{\"3075\":1}}],[\"当bean的属性为泛型类型时\",{\"1\":{\"3049\":1}}],[\"当方法需要处理多种泛型类型\",{\"1\":{\"3038\":1}}],[\"当泛型类的方法被重写时\",{\"1\":{\"3036\":1}}],[\"当类被重新加载时\",{\"1\":{\"3011\":1}}],[\"当类发生变化时可能抛出异常\",{\"1\":{\"2993\":1}}],[\"当类发生变化\",{\"1\":{\"2974\":1}}],[\"当反射操作失败时\",{\"1\":{\"3010\":1}}],[\"当java安全管理器\",{\"1\":{\"2990\":1}}],[\"当java程序运行时\",{\"1\":{\"2760\":1}}],[\"当依赖服务异常时执行降级策略\",{\"1\":{\"2960\":1}}],[\"当异常发生时\",{\"1\":{\"2935\":1}}],[\"当io操作完成后通知应用程序\",{\"1\":{\"3120\":1}}],[\"当io操作完成后\",{\"1\":{\"2921\":1}}],[\"当io事件就绪后\",{\"1\":{\"2921\":1}}],[\"当id为null或小于等于0时抛出\",{\"1\":{\"1948\":1}}],[\"当处理字符数据且需要控制编码时\",{\"1\":{\"2909\":1}}],[\"当处理字节数据或需要与标准输出流交互时\",{\"1\":{\"2909\":1}}],[\"当处理中文等非ascii字符时\",{\"1\":{\"2885\":1}}],[\"当满足特定条件时自动刷新缓冲区\",{\"1\":{\"2904\":1}}],[\"当满足条件时则返回ture\",{\"1\":{\"459\":1}}],[\"当启用自动刷新时\",{\"1\":{\"2901\":1}}],[\"当启动项目时\",{\"1\":{\"419\":1,\"463\":1}}],[\"当序列流关闭时\",{\"1\":{\"2889\":1}}],[\"当到达流的末尾时自动切换到下一个输入流\",{\"1\":{\"2889\":1}}],[\"当编写跨平台应用时\",{\"1\":{\"2885\":1}}],[\"当缓冲区满时\",{\"1\":{\"2865\":1}}],[\"当缓冲区满或手动刷新时\",{\"1\":{\"2865\":1}}],[\"当缓存满时\",{\"1\":{\"2512\":2}}],[\"当缓存中不存在指定键时\",{\"1\":{\"283\":1}}],[\"当进行读写操作时\",{\"1\":{\"2865\":1}}],[\"当输入规模较小时\",{\"1\":{\"2720\":1}}],[\"当键被回收时会加入此队列\",{\"1\":{\"2680\":1}}],[\"当键对象不再被强引用时\",{\"1\":{\"2675\":1}}],[\"当需要在不同线程间传递数据时\",{\"1\":{\"2897\":1}}],[\"当需要合并多个输入源且不需要并发处理时\",{\"1\":{\"2897\":1}}],[\"当需要读取网络流或其他字节流并转换为字符流时\",{\"1\":{\"2885\":1}}],[\"当需要读取文件且明确知道编码时\",{\"1\":{\"2885\":1}}],[\"当需要保持插入顺序且频繁迭代时\",{\"1\":{\"2643\":1}}],[\"当需要更新类时\",{\"1\":{\"756\":1}}],[\"当达到容量时就移除\",{\"1\":{\"2642\":1}}],[\"当hashmap被修改\",{\"1\":{\"2610\":1}}],[\"当hashmap中链表长度超过阈值\",{\"1\":{\"2414\":1}}],[\"当红黑树转换发生时\",{\"1\":{\"2643\":1}}],[\"当红黑树节点数量少于阈值\",{\"1\":{\"2608\":1}}],[\"当红黑树的节点数量减少到6个时\",{\"1\":{\"2394\":1}}],[\"当两个不同的键计算出相同的索引时\",{\"1\":{\"2608\":1}}],[\"当两个元素的hashcode相同且equals方法返回true时\",{\"1\":{\"2365\":1}}],[\"当冲突较少时使用\",{\"1\":{\"2607\":1}}],[\"当元素优先级改变时\",{\"1\":{\"2588\":1}}],[\"当元素数量达到容量时\",{\"1\":{\"2581\":1}}],[\"当元素数量达到容量时触发扩容\",{\"1\":{\"2318\":1}}],[\"当元素数量\",{\"1\":{\"2355\":1}}],[\"当元素数量不确定且需要频繁增删时\",{\"1\":{\"2156\":1}}],[\"当元素数量固定且需要频繁访问时\",{\"1\":{\"2156\":1}}],[\"当容量大于等于64时\",{\"1\":{\"2581\":1}}],[\"当容量小于64时\",{\"1\":{\"2581\":1}}],[\"当队列空时\",{\"1\":{\"2483\":1}}],[\"当队列满时返回false\",{\"1\":{\"2562\":1}}],[\"当队列满时抛出illegalstateexception\",{\"1\":{\"2562\":1}}],[\"当队列满时\",{\"1\":{\"2483\":1}}],[\"当操作失败时要么抛出异常\",{\"1\":{\"2459\":1}}],[\"当大量元素的hashcode值相同时\",{\"1\":{\"2385\":1}}],[\"当大部分元素为0时\",{\"1\":{\"2178\":1}}],[\"当使用迭代器遍历集合时\",{\"1\":{\"2382\":1}}],[\"当使用增强for循环遍历集合的同时修改集合结构\",{\"1\":{\"1190\":1}}],[\"当发生哈希冲突时\",{\"1\":{\"2376\":1,\"2413\":1}}],[\"当链表长度超过8且数组容量大于等于64时\",{\"1\":{\"2394\":1}}],[\"当链表长度超过8时转为红黑树\",{\"1\":{\"2367\":1,\"2596\":1,\"2643\":1}}],[\"当链表长度超过阈值\",{\"1\":{\"2428\":1,\"2607\":1,\"2608\":1}}],[\"当链表长度超过阈值时转为红黑树\",{\"1\":{\"2376\":1,\"2624\":1}}],[\"当链表长度超过阈值8时\",{\"1\":{\"1196\":1}}],[\"当追加内容导致长度超过容量时\",{\"1\":{\"2272\":1}}],[\"当确定整个表达式的结果后\",{\"1\":{\"2119\":1}}],[\"当arraylist元素数量接近容量时\",{\"1\":{\"2344\":1}}],[\"当a为true时\",{\"1\":{\"2111\":1}}],[\"当a为false时\",{\"1\":{\"2111\":1}}],[\"当api发生变化时\",{\"1\":{\"1952\":1}}],[\"当测试失败时抛出\",{\"1\":{\"1988\":1}}],[\"当生成失败时抛出\",{\"1\":{\"1987\":1}}],[\"当format不支持时抛出\",{\"1\":{\"1987\":1}}],[\"当reviewers为空时抛出\",{\"1\":{\"1975\":1}}],[\"当转换失败时抛出\",{\"1\":{\"1974\":1}}],[\"当找不到对应的文档时抛出\",{\"1\":{\"1962\":1}}],[\"当documentpath为null时抛出\",{\"1\":{\"1988\":1}}],[\"当document或reviewers为null时抛出\",{\"1\":{\"1975\":1}}],[\"当documentid为null或空时抛出\",{\"1\":{\"1962\":1}}],[\"当document的名称为空或长度超过50时抛出\",{\"1\":{\"1962\":1}}],[\"当document为null时抛出\",{\"1\":{\"1962\":1}}],[\"当user的名称为空或长度超过50时抛出\",{\"1\":{\"1948\":1}}],[\"当user为null时抛出\",{\"1\":{\"1948\":1}}],[\"当程序使用内存时\",{\"1\":{\"1887\":1}}],[\"当这个值超过了cpu数目\",{\"1\":{\"1887\":1}}],[\"当这一半满时\",{\"1\":{\"1150\":1}}],[\"当设置密码后\",{\"1\":{\"1780\":1}}],[\"当有元素出队时\",{\"1\":{\"2483\":1}}],[\"当有元素入队时\",{\"1\":{\"2483\":1}}],[\"当有请求访问宿主机的9902端口时\",{\"1\":{\"1530\":1}}],[\"当有任务提交时\",{\"1\":{\"621\":1}}],[\"当系统已存在\",{\"1\":{\"1496\":1}}],[\"当\",{\"1\":{\"1443\":1}}],[\"当请求成功后的回调函数\",{\"1\":{\"1433\":1,\"1434\":1,\"1436\":1}}],[\"当上游服务器\",{\"1\":{\"1409\":1}}],[\"当然通过面板服务关联资源可以实现\",{\"1\":{\"1713\":1}}],[\"当然也可写死不配置在环境变量中\",{\"1\":{\"1707\":1}}],[\"当然如果上线部署的话还是要选择有状态服务\",{\"1\":{\"1692\":1}}],[\"当然\",{\"1\":{\"1397\":1}}],[\"当客户端访问www\",{\"1\":{\"1389\":2,\"1390\":2}}],[\"当网站的访问量达到一定程度后\",{\"1\":{\"1383\":1}}],[\"当事件发生时通知所有注册的观察者\",{\"1\":{\"1330\":1}}],[\"当某个通道就绪时才进行处理\",{\"1\":{\"1320\":1}}],[\"当我们删除一个容器后\",{\"1\":{\"3250\":1}}],[\"当我们安装好elk后\",{\"1\":{\"1349\":1}}],[\"当我们在配置文件中定义一个bean时\",{\"1\":{\"1266\":1}}],[\"当我们通过反射访问类的成员时\",{\"1\":{\"1263\":1}}],[\"当我们查找数据时\",{\"1\":{\"185\":1}}],[\"当参数是对象时\",{\"1\":{\"1058\":1}}],[\"当参数是基本类型时\",{\"1\":{\"1058\":1}}],[\"当间接依赖的版本更新时\",{\"1\":{\"1030\":1}}],[\"当你不需要下载新的依赖时\",{\"1\":{\"960\":1}}],[\"当你不需要运行测试时\",{\"1\":{\"950\":1}}],[\"当项目发生变化时\",{\"1\":{\"1965\":1,\"1978\":1,\"1991\":1}}],[\"当项目结构与约定不符时\",{\"1\":{\"945\":1}}],[\"当项目中存在多个版本的同一依赖时\",{\"1\":{\"927\":1}}],[\"当对象被引用时计数器加1\",{\"1\":{\"761\":1}}],[\"当对所有数据尝试完毕\",{\"1\":{\"156\":1}}],[\"当一个类同时继承两个父类\",{\"1\":{\"2753\":1}}],[\"当一个类加载器收到类加载请求时\",{\"1\":{\"742\":1}}],[\"当一个项目依赖另一个项目时\",{\"1\":{\"1030\":1}}],[\"当一个值从a变为b再变回a时\",{\"1\":{\"683\":1}}],[\"当符号引用所代表的目标已被加载到内存中时\",{\"1\":{\"738\":1}}],[\"当竞争激烈导致cas失败率高时\",{\"1\":{\"686\":1}}],[\"当且仅当v的值等于a时\",{\"1\":{\"673\":1}}],[\"当虚拟线程执行阻塞操作时\",{\"1\":{\"528\":1}}],[\"当导入web依赖时会加载tomcat字节码文件\",{\"1\":{\"460\":1}}],[\"当用户移动到新的位置时\",{\"1\":{\"3184\":1}}],[\"当用户不存在时抛出\",{\"1\":{\"2035\":1}}],[\"当用户访问时\",{\"1\":{\"1403\":1}}],[\"当用户需要登出或禁用用户时\",{\"1\":{\"306\":1}}],[\"当用户进行登出操作\",{\"1\":{\"304\":1}}],[\"当业务服务分布在多台服务器时\",{\"1\":{\"304\":1}}],[\"当数据到达过期时间时\",{\"1\":{\"212\":1}}],[\"当数据量巨大时\",{\"1\":{\"139\":1}}],[\"当加载正常数据时放行\",{\"1\":{\"192\":1}}],[\"当被监控的服务器出现问题时\",{\"1\":{\"177\":1}}],[\"当sip使用tcp传输时\",{\"1\":{\"3227\":1}}],[\"当size\",{\"1\":{\"2643\":1}}],[\"当sourceformat或targetformat不支持时抛出\",{\"1\":{\"1974\":1}}],[\"当sourcepath或targetpath为null时抛出\",{\"1\":{\"1974\":1,\"1987\":1}}],[\"当sentinel认定master下线之后\",{\"1\":{\"182\":1}}],[\"当slave接到了慢查询时\",{\"1\":{\"172\":1}}],[\"当slave多数掉线\",{\"1\":{\"169\":1}}],[\"当slave断线后\",{\"1\":{\"167\":1}}],[\"当skip\",{\"1\":{\"54\":1}}],[\"当入队元素的数量大于队列长度时\",{\"1\":{\"167\":1}}],[\"当master宕机后sentinel是如何知晓并判断出master是真的宕机了呢\",{\"1\":{\"182\":1}}],[\"当master接收到主客户端的指令时\",{\"1\":{\"167\":1}}],[\"当master数据库状态被修改后\",{\"1\":{\"167\":1}}],[\"当master出现问题时\",{\"1\":{\"162\":1}}],[\"当新数据进入redis时\",{\"1\":{\"156\":1}}],[\"当key设置有过期时间\",{\"1\":{\"151\":1}}],[\"当时间到期之后通过field找到内存该地址处的数据\",{\"1\":{\"148\":1}}],[\"当出现此类情况以毒攻毒\",{\"1\":{\"192\":1}}],[\"当出现故障时通过投票机制选择新的master并将所有slave连接到新的master\",{\"1\":{\"176\":1}}],[\"当出\",{\"1\":{\"142\":1}}],[\"当前目录路径\",{\"1\":{\"3246\":1}}],[\"当前余额\",{\"1\":{\"2947\":1}}],[\"当前读写位置\",{\"1\":{\"2914\":1,\"3116\":1}}],[\"当前元素数量\",{\"1\":{\"2568\":1}}],[\"当前列表大小\",{\"1\":{\"2523\":1}}],[\"当前时间\",{\"1\":{\"2467\":1,\"2905\":1}}],[\"当前存储元素的数组\",{\"1\":{\"2437\":1}}],[\"当前已经废弃不用\",{\"1\":{\"1885\":1}}],[\"当前已使用的空间\",{\"1\":{\"1833\":1}}],[\"当前使用百分比\",{\"1\":{\"1833\":1}}],[\"当前剩余可使用空间\",{\"1\":{\"1833\":1}}],[\"当前可使用总空间\",{\"1\":{\"1833\":1}}],[\"当前文件位置\",{\"1\":{\"3246\":1}}],[\"当前文件夹下的镜像文件名\",{\"1\":{\"3246\":1}}],[\"当前文件夹下\",{\"1\":{\"1641\":1,\"1798\":1}}],[\"当前文档高度\",{\"1\":{\"1442\":1}}],[\"当前文档的高度\",{\"1\":{\"1442\":1,\"1443\":3}}],[\"当前滚动条滚动的距离\",{\"1\":{\"1443\":1}}],[\"当前异步操作完成前\",{\"1\":{\"1443\":2}}],[\"当前窗口的高度\",{\"1\":{\"1442\":2,\"1443\":3}}],[\"当前窗口大小\",{\"1\":{\"1312\":1}}],[\"当前请求的文件路径\",{\"1\":{\"1412\":1}}],[\"当前请求在root指令中指定的值\",{\"1\":{\"1412\":1}}],[\"当前线程会被挂起\",{\"1\":{\"1318\":1}}],[\"当前线程执行字节码的行号指示器\",{\"1\":{\"707\":1}}],[\"当前线程执行的字节码行号指示器\",{\"1\":{\"691\":1}}],[\"当前类的类加载器\",{\"1\":{\"745\":1}}],[\"当前总内存\",{\"1\":{\"694\":1}}],[\"当前版本号\",{\"1\":{\"676\":1}}],[\"当前页\",{\"1\":{\"1443\":1}}],[\"当前页码+1\",{\"1\":{\"1443\":2}}],[\"当前页第一条数据的下标\",{\"1\":{\"284\":1}}],[\"当前页要展示的数据\",{\"1\":{\"284\":1}}],[\"当前页数\",{\"1\":{\"284\":1}}],[\"当前服务器最后一次rdb持久化后数据变化总量\",{\"1\":{\"193\":1}}],[\"当前服务器最后一次rdb持久化的时间\",{\"1\":{\"193\":1}}],[\"当前连接slave总数\",{\"1\":{\"193\":1}}],[\"当前客户端连接总数\",{\"1\":{\"193\":1}}],[\"当前内存使用量\",{\"1\":{\"193\":1}}],[\"当前业务需求内存容量1t\",{\"1\":{\"183\":1}}],[\"当前业务ops已经达到10万\",{\"1\":{\"183\":1}}],[\"当前状态\",{\"1\":{\"165\":1,\"166\":1}}],[\"当前用户将被当作定义人\",{\"1\":{\"125\":1}}],[\"当前值\",{\"1\":{\"125\":1,\"676\":1}}],[\"当全局事务处于\",{\"1\":{\"125\":1}}],[\"当线程保持为全局读锁定时\",{\"1\":{\"125\":2}}],[\"当运行完这个命令后\",{\"1\":{\"115\":1}}],[\"63314\",{\"1\":{\"3282\":1}}],[\"6379>\",{\"1\":{\"1787\":3,\"1788\":1}}],[\"6379\",{\"1\":{\"219\":4,\"1367\":1,\"1600\":2,\"1601\":1,\"1786\":1,\"1787\":1,\"1788\":2}}],[\"67890\",{\"1\":{\"3190\":1}}],[\"6xx\",{\"1\":{\"3179\":1}}],[\"6849794470754667710l\",{\"1\":{\"2288\":1}}],[\"6+\",{\"1\":{\"2672\":1}}],[\"6+1+1\",{\"1\":{\"2269\":1}}],[\"6+推荐使用arraydeque\",{\"1\":{\"2506\":1}}],[\"6+推荐使用\",{\"1\":{\"2205\":1}}],[\"6与jdk\",{\"1\":{\"2246\":1}}],[\"6及之前\",{\"1\":{\"2246\":1,\"2357\":1}}],[\"6及之前会导致内存泄漏\",{\"1\":{\"1056\":1}}],[\"62m\",{\"1\":{\"1885\":1}}],[\"62\",{\"1\":{\"1885\":1}}],[\"66\",{\"1\":{\"1660\":4}}],[\"6d4c599606814867814f1a8eec7bfd1e\",{\"1\":{\"1478\":1}}],[\"693\",{\"1\":{\"1478\":1}}],[\"6后引入偏向锁\",{\"1\":{\"662\":1}}],[\"6前基于对象监视器\",{\"1\":{\"662\":1}}],[\"618\",{\"1\":{\"2455\":1}}],[\"61\",{\"1\":{\"280\":1,\"2112\":2}}],[\"6ed86be5f96fd2d5aa0adb4bc35d064d\",{\"1\":{\"279\":1}}],[\"64kb\",{\"1\":{\"2873\":1}}],[\"64位\",{\"1\":{\"1780\":1}}],[\"6443\",{\"1\":{\"1638\":1,\"3273\":1}}],[\"64是我当前环境的内核配置文件\",{\"1\":{\"1490\":1}}],[\"643px\",{\"1\":{\"1440\":1}}],[\"64\",{\"1\":{\"232\":5,\"792\":1,\"826\":1,\"860\":1,\"894\":1,\"1373\":1,\"1419\":1,\"1420\":3,\"1475\":1,\"1478\":2,\"1480\":1,\"1481\":6,\"1482\":2,\"1483\":8,\"1484\":3,\"1490\":1,\"1495\":3,\"1496\":2,\"1497\":1,\"1498\":8,\"1499\":8,\"1579\":1,\"1610\":2,\"1617\":1,\"1623\":1,\"1624\":3,\"1638\":1,\"1660\":4,\"1671\":2,\"1684\":5,\"1687\":2,\"1724\":4,\"1734\":2,\"1741\":2,\"1749\":1,\"1755\":1,\"1756\":1,\"1765\":4,\"1767\":1,\"1768\":1,\"1769\":1,\"1770\":1,\"1778\":1,\"3273\":2}}],[\"65535的整数\",{\"1\":{\"2853\":1}}],[\"65535\",{\"1\":{\"2099\":1}}],[\"65536\",{\"1\":{\"1610\":2,\"3218\":2}}],[\"65530\",{\"1\":{\"1513\":1}}],[\"65\",{\"1\":{\"216\":1,\"280\":1,\"1385\":1,\"1417\":1,\"1595\":1}}],[\"600\",{\"1\":{\"1503\":2,\"1661\":1,\"1698\":1,\"1764\":2}}],[\"60000\",{\"1\":{\"1094\":1}}],[\"60\",{\"1\":{\"625\":1,\"626\":1,\"2112\":1,\"2125\":1,\"3082\":1,\"3225\":1}}],[\"606ef3f987837f030f1b35fe\",{\"1\":{\"286\":2}}],[\"60秒\",{\"1\":{\"192\":1}}],[\"60=31536000秒\",{\"1\":{\"160\":1}}],[\"60f7a4b3e9a2c34567890123\",{\"1\":{\"37\":1}}],[\"6\",{\"0\":{\"204\":1,\"230\":1,\"243\":1,\"257\":1,\"276\":1,\"374\":1,\"446\":1,\"544\":1,\"669\":1,\"785\":1,\"819\":1,\"853\":1,\"887\":1,\"941\":1,\"1346\":1,\"1435\":1,\"1454\":1,\"1460\":1,\"1468\":1,\"1469\":1,\"1470\":1,\"1492\":1,\"1513\":1,\"1520\":1,\"1527\":1,\"1534\":1,\"1585\":1,\"1645\":1,\"1710\":1,\"1726\":1,\"1771\":1,\"1821\":1,\"1899\":1,\"1908\":1,\"1919\":1,\"2014\":1,\"2029\":1,\"2041\":1,\"2081\":1,\"2114\":1,\"2283\":1,\"2329\":1,\"2441\":1,\"2498\":1,\"2545\":1,\"2684\":1,\"2815\":1,\"2886\":1,\"3270\":1,\"3300\":1,\"3329\":1},\"1\":{\"115\":2,\"190\":2,\"191\":1,\"192\":1,\"246\":1,\"261\":1,\"285\":2,\"305\":1,\"543\":1,\"728\":2,\"999\":1,\"1003\":1,\"1041\":2,\"1162\":1,\"1392\":1,\"1419\":1,\"1420\":2,\"1443\":1,\"1458\":1,\"1462\":1,\"1469\":1,\"1513\":2,\"1527\":1,\"1536\":5,\"1548\":1,\"1551\":1,\"1552\":1,\"1613\":1,\"1637\":1,\"1673\":1,\"1724\":2,\"1734\":5,\"1736\":1,\"1744\":1,\"1778\":1,\"1779\":1,\"1780\":2,\"2126\":1,\"2169\":1,\"2170\":2,\"2181\":1,\"2214\":2,\"2217\":2,\"2231\":2,\"2265\":3,\"2325\":1,\"2326\":2,\"2329\":1,\"2369\":1,\"2434\":1,\"2463\":1,\"2491\":1,\"2520\":1,\"2549\":1,\"2651\":1,\"2660\":2,\"2742\":1,\"2914\":1,\"3023\":1,\"3232\":1,\"3245\":1,\"3246\":2}}],[\"7985nkpc48854kwmgh6pnfb7hcrkwhlcmx6wxq8tb4vszxn2qv9xdd\",{\"1\":{\"3273\":3}}],[\"77\",{\"1\":{\"3107\":1}}],[\"777\",{\"1\":{\"1504\":1,\"1510\":4,\"1528\":1,\"1569\":1,\"1577\":1,\"1578\":1,\"1586\":1,\"1901\":1}}],[\"7引入了nio\",{\"1\":{\"3120\":1}}],[\"7引入aio\",{\"1\":{\"3080\":1}}],[\"7引入的methodhandle提供了比反射更高的性能和更灵活的调用方式\",{\"1\":{\"3010\":1}}],[\"7引入的新io模型\",{\"1\":{\"1238\":1}}],[\"76\",{\"1\":{\"2905\":1}}],[\"769m\",{\"1\":{\"1885\":2}}],[\"769\",{\"1\":{\"1885\":1}}],[\"7使用头插法\",{\"1\":{\"2616\":1}}],[\"7使用数组+链表\",{\"1\":{\"2616\":1}}],[\"7及之前\",{\"1\":{\"2613\":1}}],[\"7及之后\",{\"1\":{\"2246\":1,\"2357\":1}}],[\"789\",{\"1\":{\"3002\":2}}],[\"789l\",{\"1\":{\"3002\":1}}],[\"78\",{\"1\":{\"2577\":2}}],[\"786432k\",{\"1\":{\"774\":2}}],[\"74a14482\",{\"1\":{\"2231\":1}}],[\"7位小数\",{\"1\":{\"2099\":1}}],[\"7命令行导出文件\",{\"1\":{\"1823\":1}}],[\"7版本\",{\"1\":{\"1821\":1}}],[\"7文件夹\",{\"1\":{\"1783\":1}}],[\"7文件夹更改目录\",{\"1\":{\"1783\":1}}],[\"7的目录\",{\"1\":{\"1782\":1}}],[\"7qiwitkm1e6qgq5fpa23dsjuyta=\",{\"1\":{\"1764\":1}}],[\"7qspzi\",{\"1\":{\"1649\":1,\"1688\":1}}],[\"75\",{\"1\":{\"2386\":2,\"2400\":4,\"2609\":1}}],[\"754标准的\",{\"1\":{\"2105\":1}}],[\"756>\",{\"1\":{\"1764\":1}}],[\"75f\",{\"1\":{\"1181\":1,\"1193\":2,\"2423\":1,\"2427\":1,\"2593\":1,\"2604\":1,\"2614\":1,\"2632\":1,\"2642\":1}}],[\"7e9lc8\",{\"1\":{\"1650\":1,\"1713\":1}}],[\"7xq5cc\",{\"1\":{\"1650\":1,\"1713\":1}}],[\"7之后不包含字体库\",{\"1\":{\"1557\":1}}],[\"7之后就开始支持中文了\",{\"1\":{\"1520\":1}}],[\"7kb\",{\"1\":{\"1527\":2}}],[\"715m\",{\"1\":{\"1885\":1}}],[\"715\",{\"1\":{\"1885\":1}}],[\"71\",{\"1\":{\"1503\":5,\"1504\":1,\"1813\":1}}],[\"7和jdk\",{\"0\":{\"1196\":1,\"2541\":1},\"1\":{\"1196\":1,\"2541\":1,\"2616\":2}}],[\"7+提供addsuppressed\",{\"1\":{\"2942\":1}}],[\"7+才提供\",{\"1\":{\"2513\":1}}],[\"7+中\",{\"1\":{\"2355\":1}}],[\"7+行为对比示例\",{\"1\":{\"2246\":1}}],[\"7+\",{\"1\":{\"1044\":1,\"2318\":1}}],[\"7<\",{\"1\":{\"999\":1,\"1003\":1}}],[\"73\",{\"1\":{\"249\":1}}],[\"700\",{\"1\":{\"3208\":1}}],[\"7006606872698421250\",{\"1\":{\"1764\":1}}],[\"70\",{\"1\":{\"166\":1,\"1094\":1,\"2125\":1,\"3180\":1,\"3190\":1}}],[\"70100\",{\"1\":{\"125\":1}}],[\"7以上版本中默认没有一个data目录\",{\"1\":{\"121\":1}}],[\"7升级小版本\",{\"0\":{\"117\":1,\"118\":1}}],[\"7安装初始化阶段\",{\"1\":{\"115\":1}}],[\"7\",{\"0\":{\"115\":1,\"205\":1,\"206\":1,\"207\":1,\"208\":1,\"244\":1,\"277\":1,\"545\":1,\"1436\":1,\"1495\":1,\"1535\":1,\"1646\":1,\"1711\":1,\"1727\":1,\"1772\":1,\"1822\":1,\"1909\":1,\"1920\":1,\"2042\":1,\"2115\":1,\"2565\":1,\"2685\":1,\"2898\":1,\"3271\":1,\"3301\":1,\"3330\":1},\"1\":{\"115\":2,\"118\":5,\"121\":1,\"190\":2,\"192\":1,\"306\":1,\"394\":1,\"456\":1,\"543\":1,\"728\":2,\"1161\":2,\"1162\":1,\"1182\":2,\"1196\":3,\"1197\":1,\"1371\":1,\"1372\":1,\"1373\":1,\"1392\":1,\"1420\":1,\"1443\":1,\"1458\":1,\"1462\":1,\"1469\":1,\"1474\":1,\"1478\":3,\"1484\":4,\"1495\":4,\"1508\":2,\"1512\":2,\"1513\":2,\"1515\":2,\"1518\":2,\"1522\":2,\"1526\":3,\"1577\":1,\"1578\":2,\"1579\":2,\"1586\":8,\"1613\":2,\"1638\":1,\"1673\":2,\"1724\":6,\"1734\":3,\"1736\":1,\"1744\":2,\"1767\":1,\"1768\":1,\"1769\":1,\"1770\":1,\"1778\":2,\"1779\":1,\"1780\":1,\"1781\":1,\"1782\":2,\"1783\":1,\"2169\":1,\"2170\":2,\"2196\":1,\"2214\":2,\"2217\":2,\"2369\":1,\"2434\":1,\"2520\":1,\"2541\":4,\"2596\":1,\"3025\":1,\"3086\":1,\"3245\":1,\"3246\":3,\"3262\":5,\"3263\":2}}],[\"验证响应\",{\"1\":{\"3238\":1}}],[\"验证sip请求中的认证信息\",{\"1\":{\"3238\":1}}],[\"验证nonce\",{\"1\":{\"3215\":1}}],[\"验证请求中的认证信息\",{\"1\":{\"3215\":1}}],[\"验证结果\",{\"1\":{\"3166\":1}}],[\"验证深拷贝是否成功\",{\"1\":{\"3007\":1}}],[\"验证失败的对象\",{\"1\":{\"3003\":1}}],[\"验证失败时应返回明确错误信息\",{\"1\":{\"2065\":1}}],[\"验证通过的对象\",{\"1\":{\"3003\":1}}],[\"验证器\",{\"1\":{\"3003\":1}}],[\"验证class对象唯一性\",{\"1\":{\"2980\":1}}],[\"验证三种方式获取的是同一个class对象\",{\"1\":{\"2965\":1}}],[\"验证操作是否成功\",{\"1\":{\"2908\":1}}],[\"验证优化效果\",{\"1\":{\"2728\":1}}],[\"验证规则在userrequest中定义\",{\"1\":{\"2065\":1}}],[\"验证异常处理机制\",{\"1\":{\"2047\":1}}],[\"验证代码符合设计规范\",{\"1\":{\"2047\":1}}],[\"验证正常业务场景\",{\"1\":{\"2047\":1}}],[\"验证安装是否成功\",{\"0\":{\"1513\":1}}],[\"验证配置文件是否正确\",{\"1\":{\"1424\":1,\"1428\":1}}],[\"验证一下\",{\"1\":{\"1374\":1}}],[\"验证是否验证成功\",{\"1\":{\"3245\":1}}],[\"验证是否是受信任的类进行反射调用\",{\"1\":{\"3011\":1}}],[\"验证是否生效\",{\"0\":{\"1355\":1,\"1360\":1}}],[\"验证是否安装成功\",{\"1\":{\"260\":1}}],[\"验证所有方式获取的是同一个class对象\",{\"1\":{\"1260\":1}}],[\"验证用户身份\",{\"1\":{\"3183\":1}}],[\"验证用户信息\",{\"1\":{\"1208\":2}}],[\"验证用户\",{\"1\":{\"456\":1}}],[\"验证token\",{\"1\":{\"279\":1}}],[\"验证\",{\"0\":{\"245\":1,\"1757\":1},\"1\":{\"114\":1,\"219\":1,\"741\":1,\"1146\":1,\"3003\":3}}],[\"同上\",{\"1\":{\"1887\":1}}],[\"同其他rsync组件进行远程连接\",{\"1\":{\"1503\":1}}],[\"同$query\",{\"1\":{\"1412\":1}}],[\"同一时间只能有一个线程访问\",{\"1\":{\"2356\":1}}],[\"同一接口可有多种实现\",{\"1\":{\"2331\":1}}],[\"同一对象操作\",{\"1\":{\"2202\":1}}],[\"同一包可以访问\",{\"1\":{\"2076\":1}}],[\"同一包或子类可以访问\",{\"1\":{\"2076\":1}}],[\"同一个类中\",{\"1\":{\"1205\":1,\"1216\":1}}],[\"同一个库被多次引入到项目中\",{\"1\":{\"1012\":1}}],[\"同一常量池对象\",{\"1\":{\"1041\":1,\"2248\":1}}],[\"同样使用大o符号表示\",{\"1\":{\"2703\":1}}],[\"同样不依赖cookie\",{\"1\":{\"306\":1}}],[\"同样地\",{\"1\":{\"114\":1}}],[\"同步io\",{\"1\":{\"3091\":1}}],[\"同步+确认\",{\"1\":{\"3070\":1}}],[\"同步控制等操作\",{\"1\":{\"3047\":1}}],[\"同步阻塞\",{\"1\":{\"2913\":1}}],[\"同步阻塞io\",{\"1\":{\"1314\":1}}],[\"同步代码块\",{\"1\":{\"2356\":1}}],[\"同步代码块可能导致大量线程阻塞\",{\"1\":{\"532\":1}}],[\"同步开销\",{\"1\":{\"2275\":1}}],[\"同步方法\",{\"1\":{\"2275\":1,\"2356\":2}}],[\"同步通信\",{\"1\":{\"2010\":1}}],[\"同步服务器时间\",{\"0\":{\"1843\":1},\"1\":{\"1835\":1}}],[\"同步到b服务器上的某个文件夹下\",{\"1\":{\"1501\":1}}],[\"同步和异步\",{\"1\":{\"1436\":1}}],[\"同步\",{\"1\":{\"1319\":1,\"1432\":1,\"1436\":1}}],[\"同步与异步\",{\"0\":{\"1319\":1}}],[\"同步序列编号\",{\"1\":{\"1311\":1,\"3070\":1}}],[\"同步非阻塞io\",{\"1\":{\"1315\":1}}],[\"同步非阻塞\",{\"1\":{\"1238\":1,\"2913\":1}}],[\"同步请求示例\",{\"1\":{\"471\":1}}],[\"同步保存数据到磁盘\",{\"1\":{\"207\":1}}],[\"同步时间越长\",{\"1\":{\"178\":1}}],[\"同步信息\",{\"1\":{\"167\":1}}],[\"同步的动作称为命令传播\",{\"1\":{\"167\":1}}],[\"同步过程如下\",{\"1\":{\"166\":1}}],[\"同时考虑成本与收益的平衡\",{\"1\":{\"3228\":1}}],[\"同时提供高层异常语义\",{\"1\":{\"2937\":1}}],[\"同时提供了良好的线程安全性\",{\"1\":{\"1197\":1}}],[\"同时提供了一些机制来提高一致性\",{\"1\":{\"43\":1}}],[\"同时在每个文件内容之间添加分隔符\",{\"1\":{\"2897\":1}}],[\"同时通过缓存减轻数据库压力\",{\"1\":{\"2728\":1}}],[\"同时通过head和tail指针实现高效的双端操作\",{\"1\":{\"2558\":1}}],[\"同时更新哈希表和堆\",{\"1\":{\"2588\":1}}],[\"同时更改文件夹名称为redis\",{\"1\":{\"1783\":1}}],[\"同时arraydeque实现性能更优\",{\"1\":{\"2564\":1}}],[\"同时实现了deque接口\",{\"1\":{\"2489\":1}}],[\"同时实现数据冗余备份\",{\"1\":{\"161\":1}}],[\"同时兼顾查找效率的场景\",{\"1\":{\"2391\":1}}],[\"同时列出该词语出现在文章的第几行\",{\"1\":{\"1871\":1}}],[\"同时也将bind注释\",{\"1\":{\"1786\":1}}],[\"同时也会在挂载的目录下生成相应数据文件\",{\"1\":{\"1573\":1}}],[\"同时也易于计算机解析和生成\",{\"1\":{\"1437\":1}}],[\"同时也要确保程序的正确性\",{\"1\":{\"1137\":1}}],[\"同时保留原始异常信息\",{\"1\":{\"2952\":1}}],[\"同时保证equals\",{\"1\":{\"2672\":1}}],[\"同时保证类信息的一致性\",{\"1\":{\"1279\":1}}],[\"同时保持代码的可读性和可维护性\",{\"1\":{\"533\":1}}],[\"同时又不改变其结构\",{\"1\":{\"1186\":1}}],[\"同时使用多个网络接口传输信令和媒体\",{\"1\":{\"1117\":1}}],[\"同时允许根据应用特性自定义\",{\"1\":{\"809\":1,\"843\":1,\"877\":1,\"911\":1}}],[\"同时允许自定义属性\",{\"1\":{\"733\":1}}],[\"同时清除标记的垃圾对象\",{\"1\":{\"777\":1}}],[\"同时标记所有可达对象\",{\"1\":{\"777\":1}}],[\"同时避免了线程安全问题\",{\"1\":{\"697\":1}}],[\"同时管理内存\",{\"1\":{\"689\":1}}],[\"同时利用npe增强特性快速定位意外出现的空指针问题\",{\"1\":{\"521\":1}}],[\"同时最大化其实用价值\",{\"1\":{\"514\":1}}],[\"同时移除了一些过时的功能\",{\"1\":{\"465\":1}}],[\"同时进行数据同步的slave数量\",{\"1\":{\"178\":1}}],[\"同时开启\",{\"1\":{\"142\":1}}],[\"同时能够满足查询的需求\",{\"1\":{\"75\":1}}],[\"同时\",{\"1\":{\"52\":1,\"488\":1,\"1783\":1,\"1966\":1,\"1979\":1,\"1992\":1,\"2557\":1}}],[\"同时每个页面包含\",{\"1\":{\"8\":1}}],[\"所在路径下执行该命令\",{\"1\":{\"3246\":1}}],[\"所在路径\",{\"1\":{\"3246\":1}}],[\"所需最小容量\",{\"1\":{\"2437\":2,\"2438\":1}}],[\"所需的最小容量\",{\"1\":{\"2437\":1,\"2438\":1}}],[\"所需容量\",{\"1\":{\"2272\":2}}],[\"所需要引入的\",{\"1\":{\"304\":1}}],[\"所使用目录需对应新增\",{\"1\":{\"1517\":1}}],[\"所使用的select语句有不同的列数\",{\"1\":{\"125\":1}}],[\"所使用的存储引擎不能为列\",{\"1\":{\"125\":1}}],[\"所使用的表类型不支持fulltext索引\",{\"1\":{\"125\":1}}],[\"所使用的表类型不支持auto\",{\"1\":{\"125\":1}}],[\"所使用的表类型不支持blob\",{\"1\":{\"125\":1}}],[\"所使用的命令在该mysql版本中不允许\",{\"1\":{\"125\":1}}],[\"所谓的库\",{\"1\":{\"1446\":1}}],[\"所用的长度长于键部分\",{\"1\":{\"125\":1}}],[\"所以会先计算b\",{\"1\":{\"2119\":1}}],[\"所以会创建一个满足value类型的数据结构放入到key对应的value中\",{\"1\":{\"283\":1}}],[\"所以一直是0\",{\"1\":{\"1887\":1}}],[\"所以一般不使用这种方式\",{\"1\":{\"219\":1}}],[\"所以ss执行的时候消耗资源以及消耗的时间都比netstat少很多\",{\"1\":{\"1880\":1}}],[\"所以只能看到工作负载中有容器\",{\"1\":{\"1713\":1}}],[\"所以与私有镜像交互时出现以下错误\",{\"1\":{\"1666\":1}}],[\"所以更改权限即可\",{\"1\":{\"1586\":1}}],[\"所以修改logstash安装目录下的配置文件logstash\",{\"1\":{\"1535\":1}}],[\"所以旧版本内核只能手动下载\",{\"1\":{\"1480\":1}}],[\"所以以下将介绍三种升级内核方式\",{\"1\":{\"1471\":1}}],[\"所以整体的一个过程就是先用第三方工具设置用户名\",{\"1\":{\"1418\":1}}],[\"所以漏桶算法能控制数据的传输速率\",{\"1\":{\"1399\":1}}],[\"所以此处版本号后缀必须带snapshot\",{\"1\":{\"999\":1}}],[\"所以不会计算b的值\",{\"1\":{\"2119\":1}}],[\"所以不会加载其他类中的bean\",{\"1\":{\"461\":1}}],[\"所以不要放置敏感信息\",{\"1\":{\"303\":1}}],[\"所以将\",{\"1\":{\"306\":1}}],[\"所以这里输入下面命令将目前在\",{\"1\":{\"1783\":1}}],[\"所以这部分会使用一个\",{\"1\":{\"303\":1}}],[\"所以这个票就给到了sentinel1\",{\"1\":{\"182\":1}}],[\"所以说他才是主流方案\",{\"1\":{\"138\":1}}],[\"所以我们可以考虑把数据库中的部分数据转移到缓存中去\",{\"1\":{\"129\":1}}],[\"所以\",{\"1\":{\"114\":1}}],[\"所有节点激活后状态\",{\"1\":{\"3273\":1}}],[\"所有节点的数据是均等的\",{\"1\":{\"1507\":1}}],[\"所有主机安装docker\",{\"1\":{\"3271\":1}}],[\"所有任何已经与\",{\"1\":{\"3250\":1}}],[\"所有sip消息和事件通过siplistener接口回调处理\",{\"1\":{\"3217\":1}}],[\"所有buffer都继承自java\",{\"1\":{\"3116\":1}}],[\"所有核心集合接口\",{\"1\":{\"3046\":1}}],[\"所有错误和异常的父类\",{\"1\":{\"2925\":1}}],[\"所有属性设为final\",{\"1\":{\"2779\":1}}],[\"所有可能输入的期望复杂度\",{\"1\":{\"2721\":1}}],[\"所有叶子节点\",{\"1\":{\"2650\":1}}],[\"所有方法都是同步的\",{\"1\":{\"2564\":1}}],[\"所有方法加synchronized\",{\"1\":{\"2429\":1}}],[\"所有修改方法\",{\"1\":{\"2395\":1}}],[\"所有修改方法都会创建新的string对象\",{\"1\":{\"2240\":1}}],[\"所有人名\",{\"1\":{\"2329\":1}}],[\"所有字段声明为private\",{\"1\":{\"2307\":1}}],[\"所有字段声明为final来创建不可变对象\",{\"1\":{\"596\":1}}],[\"所有外部输入必须进行验证\",{\"1\":{\"2065\":1}}],[\"所有业务逻辑代码必须编写单元测试\",{\"1\":{\"2045\":1}}],[\"所有版本下载路径\",{\"1\":{\"1755\":1}}],[\"所有\",{\"1\":{\"1734\":1,\"2299\":1}}],[\"所有实例共享\",{\"1\":{\"1037\":1}}],[\"所有jvm实现都必须支持\",{\"1\":{\"788\":1,\"822\":1,\"856\":1,\"890\":1}}],[\"所有依赖npe消息文本解析的工具可能需要更新\",{\"1\":{\"509\":1}}],[\"所有请求先经过认证服务\",{\"1\":{\"304\":1}}],[\"所有数据操作都通过缓冲区进行\",{\"1\":{\"2914\":1}}],[\"所有数据集server\",{\"1\":{\"157\":1}}],[\"所有数据均存放在内存中\",{\"1\":{\"147\":1}}],[\"所有分区必须有唯一的名称\",{\"1\":{\"125\":1}}],[\"所有的\",{\"1\":{\"1393\":1}}],[\"所有的槽将平均从每个来源的master处获取\",{\"1\":{\"186\":1}}],[\"所有的服务器都可以访问\",{\"1\":{\"130\":1}}],[\"所有的导出表必须有自己的别名\",{\"1\":{\"125\":1}}],[\"所有的merge表必须位于相同的数据库中\",{\"1\":{\"125\":1}}],[\"所有的刨根问底都将造成真实伤害\",{\"1\":{\"0\":1}}],[\"所有mysql重启就可以了\",{\"1\":{\"112\":1}}],[\"而网络中间节点\",{\"1\":{\"3220\":1}}],[\"而有状态事务管理确保了消息可靠传输\",{\"1\":{\"3220\":1}}],[\"而aio尝试实现proactor模式\",{\"1\":{\"3091\":1}}],[\"而aio更适合特定的大数据量异步处理场景\",{\"1\":{\"1238\":1}}],[\"而握手时服务器可以将syn和ack合并发送\",{\"1\":{\"3070\":1}}],[\"而泛型类型信息已被擦除\",{\"1\":{\"3035\":1}}],[\"而反射是运行期的特性\",{\"1\":{\"2975\":1}}],[\"而多态则在这两者的基础上实现了接口的统一和行为的多样化\",{\"1\":{\"2754\":1}}],[\"而treeset则是基于treemap实现的有序集合\",{\"1\":{\"2646\":1}}],[\"而timsort最坏情况仍是o\",{\"1\":{\"2357\":1}}],[\"而hashmap使用强引用\",{\"1\":{\"2687\":1}}],[\"而hashmap在并发修改时可能抛出concurrentmodificationexception\",{\"1\":{\"2426\":1}}],[\"而hashset则是基于hashmap实现的集合\",{\"1\":{\"2591\":1}}],[\"而linkedlist允许添加null元素\",{\"1\":{\"2563\":1}}],[\"而具体实现由linkedlist\",{\"1\":{\"2559\":1}}],[\"而具体实现类则提供不同的存储结构和性能特性\",{\"1\":{\"2412\":1}}],[\"而具体实现类则提供了不同的数据结构和性能特性\",{\"1\":{\"2375\":1}}],[\"而queue接口则提供了先进先出\",{\"1\":{\"2547\":1}}],[\"而某些操作不允许null\",{\"1\":{\"2419\":1}}],[\"而红黑树的查找性能为o\",{\"1\":{\"2394\":1}}],[\"而快速排序的空间效率更高\",{\"1\":{\"2357\":1}}],[\"而+buffers\",{\"1\":{\"1885\":1}}],[\"而大写的\",{\"1\":{\"1882\":1}}],[\"而本就不需要用https\",{\"1\":{\"1664\":1}}],[\"而无法通过服务关联资源和开放外网\",{\"1\":{\"1713\":1}}],[\"而无内网无法访问面板\",{\"1\":{\"1642\":1}}],[\"而无需手动进行类型转换\",{\"1\":{\"2899\":1}}],[\"而无需修改序列流的代码\",{\"1\":{\"2895\":1}}],[\"而无需修改使用map的代码\",{\"1\":{\"2412\":1}}],[\"而无需修改使用集合的代码\",{\"1\":{\"2375\":1}}],[\"而无需关心底层多个流的存在\",{\"1\":{\"2887\":1}}],[\"而无需暴露集合的内部实现\",{\"1\":{\"1185\":1}}],[\"而无需学习复杂的异步编程模型\",{\"1\":{\"531\":1}}],[\"而openjdk在1\",{\"1\":{\"1557\":1}}],[\"而编辑\",{\"1\":{\"1504\":1}}],[\"而直接调用在编译时就已确定\",{\"1\":{\"1264\":1}}],[\"而其他语言如python不需要\",{\"1\":{\"1254\":1}}],[\"而其他通知只在连接点的特定时刻执行\",{\"1\":{\"344\":1}}],[\"而错误\",{\"1\":{\"1243\":1}}],[\"而将媒体传输交给rtp\",{\"1\":{\"1099\":1}}],[\"而非通话建立\",{\"1\":{\"3196\":1}}],[\"而非重量级apm\",{\"1\":{\"3110\":1}}],[\"而非反射直接实现\",{\"1\":{\"2994\":1}}],[\"而非运行时处理\",{\"1\":{\"2931\":1}}],[\"而非字符串编码名\",{\"1\":{\"2884\":1}}],[\"而非引用本身\",{\"1\":{\"2790\":1}}],[\"而非自己实现\",{\"1\":{\"2356\":1}}],[\"而非size\",{\"1\":{\"2058\":1}}],[\"而非\",{\"1\":{\"2054\":1}}],[\"而非同步容器\",{\"1\":{\"2039\":1}}],[\"而非手动解析\",{\"1\":{\"1107\":1}}],[\"而非对象本身\",{\"1\":{\"1058\":1}}],[\"而非notify\",{\"1\":{\"667\":1}}],[\"而项目b又依赖项目c\",{\"1\":{\"926\":1}}],[\"而初始化阶段是根据程序中的赋值语句为静态变量赋值\",{\"1\":{\"756\":1}}],[\"而java内存模型\",{\"1\":{\"703\":1}}],[\"而value是强引用\",{\"1\":{\"618\":1}}],[\"而在多核cpu中\",{\"1\":{\"588\":1}}],[\"而在spring中\",{\"1\":{\"311\":1}}],[\"而并行则是指多个任务在同一时刻同时执行\",{\"1\":{\"588\":1}}],[\"而虚拟线程仍使用传统的并发控制机制\",{\"1\":{\"533\":1}}],[\"而goroutine是go语言\",{\"1\":{\"533\":1}}],[\"而平台线程\",{\"1\":{\"526\":1}}],[\"而过滤器可以处理所有的请求\",{\"1\":{\"387\":1}}],[\"而过滤器可以在请求到达servlet之前和响应离开servlet之后执行\",{\"1\":{\"387\":1}}],[\"而过滤器不能\",{\"1\":{\"387\":1}}],[\"而过滤器是servlet规范提供的\",{\"1\":{\"387\":1}}],[\"而springboot给我们提供的一个接口condition就用来判断bean的创建条件\",{\"1\":{\"459\":1}}],[\"而springboot的actuator\",{\"1\":{\"411\":1}}],[\"而springboot是基于spring的框架\",{\"1\":{\"398\":1}}],[\"而spring\",{\"1\":{\"344\":1}}],[\"而不直接使用它们\",{\"1\":{\"2085\":1}}],[\"而不需要提前知道这些类的具体信息\",{\"1\":{\"1273\":1}}],[\"而不需要在编译时确定所有细节\",{\"1\":{\"1273\":1}}],[\"而不需要等待每个命令的响应\",{\"1\":{\"212\":1}}],[\"而不会改变程序的正确性\",{\"1\":{\"1210\":1}}],[\"而不是数据读取本身\",{\"1\":{\"2895\":1}}],[\"而不是数据访问的细节\",{\"1\":{\"361\":1,\"371\":1}}],[\"而不是四舍五入\",{\"1\":{\"2118\":1}}],[\"而不是\",{\"1\":{\"1128\":1,\"1449\":1}}],[\"而不是手动配置\",{\"1\":{\"386\":1}}],[\"而不是web开发的细节\",{\"1\":{\"375\":1,\"385\":1}}],[\"而不是直接使用jdbc\",{\"1\":{\"372\":1}}],[\"而不是事务管理的细节\",{\"1\":{\"357\":1}}],[\"而不是对象的创建和管理\",{\"1\":{\"329\":1}}],[\"而di是实现ioc的一种方式\",{\"1\":{\"319\":1}}],[\"而依赖注入是实现控制反转的一种方式\",{\"1\":{\"317\":1}}],[\"而再也无法访问需要认证的接口\",{\"1\":{\"306\":1}}],[\"而每一个人的又都想当这个处理事故的人\",{\"1\":{\"182\":1}}],[\"而新元素会被放入队列\",{\"1\":{\"167\":1}}],[\"而命令的传播其实有4种\",{\"1\":{\"163\":1}}],[\"而子进程在执行后台的保存\",{\"1\":{\"138\":1}}],[\"而我们真正的信息是保存在硬盘中的\",{\"1\":{\"136\":1}}],[\"而\",{\"1\":{\"129\":1,\"304\":1,\"1064\":1,\"1430\":1}}],[\"而且多个事件还有先后顺序关系\",{\"1\":{\"1452\":1}}],[\"而且nginx内置的健康检查功能\",{\"1\":{\"1377\":1}}],[\"而且只支持方法级别的连接点\",{\"1\":{\"344\":1}}],[\"而且它不需要任何特殊的容器就可以运行\",{\"1\":{\"317\":1}}],[\"而且二进制日志功能已启用\",{\"1\":{\"125\":3}}],[\"而且上次修复失败\",{\"1\":{\"125\":1}}],[\"而且试图在不使用where的情况下更新使用了key列的表\",{\"1\":{\"125\":1}}],[\"而且必须将其定义为\",{\"1\":{\"125\":1}}],[\"而这两个父类又继承自同一个祖父类时\",{\"1\":{\"2753\":1}}],[\"而这个操作就是安装ssl的\",{\"1\":{\"115\":1}}],[\"而这给别有用心的人带来了可乘之机\",{\"1\":{\"114\":1}}],[\"而是专注于会话控制\",{\"1\":{\"3220\":1}}],[\"而是提供了一种灵活的机制\",{\"1\":{\"2975\":1}}],[\"而是作为装饰器包装其他基本流\",{\"1\":{\"2863\":1}}],[\"而是依赖于抽象类型\",{\"1\":{\"2754\":1}}],[\"而是arraylist的变体\",{\"1\":{\"2513\":1}}],[\"而是多个技术综合\",{\"1\":{\"1430\":1}}],[\"而是通过信令控制会话的建立和管理\",{\"1\":{\"3175\":1}}],[\"而是通过checkerror\",{\"1\":{\"2899\":1,\"2901\":1}}],[\"而是通过重写hashmap的newnode\",{\"1\":{\"2628\":1}}],[\"而是通过回调等方式被动通知\",{\"1\":{\"1319\":1}}],[\"而是通过invokedynamic指令和方法句柄\",{\"1\":{\"556\":1}}],[\"而是返回池中等待新任务\",{\"1\":{\"621\":1}}],[\"而是在其基础上添加缓冲功能\",{\"1\":{\"2871\":1}}],[\"而是在运行时动态生成调用点\",{\"1\":{\"556\":1}}],[\"而是在提交时检查是否有冲突\",{\"1\":{\"54\":1}}],[\"而是互补关系\",{\"1\":{\"521\":1}}],[\"而是涉及编译器和jvm层面的协同工作\",{\"1\":{\"503\":1}}],[\"而是等到下次访问该数据时才检查是否过期\",{\"1\":{\"212\":1}}],[\"而是允许数据结构随着应用的发展而演变\",{\"1\":{\"41\":1}}],[\"利用mbean暴露网络指标\",{\"1\":{\"3111\":1}}],[\"利用位操作替代算术运算\",{\"1\":{\"2727\":1}}],[\"利用linkedhashmap的访问顺序模式可以轻松实现lru\",{\"1\":{\"2632\":1}}],[\"利用lru数据删除策略\",{\"1\":{\"189\":1}}],[\"利用其key的唯一性来实现集合功能\",{\"1\":{\"2619\":1}}],[\"利用堆的特性实现元素的自动排序\",{\"1\":{\"2472\":1}}],[\"利用jvm的类验证机制\",{\"1\":{\"738\":1}}],[\"利用jfr进行性能分析和问题诊断\",{\"1\":{\"495\":1}}],[\"利用增强的npe消息验证异常处理逻辑\",{\"1\":{\"522\":1}}],[\"利用集合的toarray\",{\"1\":{\"495\":1}}],[\"利用分布式多服务器同时进行数据读取\",{\"1\":{\"189\":1}}],[\"利用之前的方式启动即可\",{\"1\":{\"178\":1}}],[\"利用过期数据占比的方式控制删除频度\",{\"1\":{\"153\":1}}],[\"利用rdb实现紧凑的数据持久化会使redis降的很低\",{\"1\":{\"142\":1}}],[\"利用永久性存储介质将数据进行保存\",{\"1\":{\"137\":1}}],[\"利用\",{\"1\":{\"130\":1}}],[\"利用对称密钥算法对传输的数据进行加密\",{\"1\":{\"114\":1}}],[\"利用数据加密\",{\"1\":{\"114\":1}}],[\"利用命令启动slave\",{\"0\":{\"111\":1}}],[\"或保持连接\",{\"1\":{\"3070\":1}}],[\"或instanceof判断泛型的具体类型\",{\"1\":{\"3035\":1}}],[\"或asm库获取参数名\",{\"1\":{\"3002\":1}}],[\"或atomicmarkablereference添加标记位\",{\"1\":{\"683\":1}}],[\"或重构代码避免频繁异常\",{\"1\":{\"2959\":1}}],[\"或重新设计类层次结构\",{\"1\":{\"2745\":1}}],[\"或重新命名变量\",{\"1\":{\"125\":1}}],[\"或升级jdk版本\",{\"1\":{\"2920\":1}}],[\"或format\",{\"1\":{\"2901\":1,\"2908\":1}}],[\"或实现简单的编码检测算法\",{\"1\":{\"2885\":1}}],[\"或输出\",{\"1\":{\"2877\":1}}],[\"或接口实现\",{\"1\":{\"2754\":1}}],[\"或o\",{\"1\":{\"2717\":1,\"2726\":1}}],[\"或null\",{\"1\":{\"2600\":1,\"2655\":1}}],[\"或notifyall\",{\"1\":{\"618\":1}}],[\"或remove\",{\"1\":{\"2476\":1}}],[\"或在需要强一致性时使用其他同步机制\",{\"1\":{\"2352\":1}}],[\"或其他打印方法\",{\"1\":{\"2230\":1}}],[\"或其他机制确保变量的可见性\",{\"1\":{\"1138\":1}}],[\"或有的是\",{\"1\":{\"1624\":1}}],[\"或更高的版本\",{\"1\":{\"1557\":1}}],[\"或列举用来驱动\",{\"1\":{\"1504\":1}}],[\"或直接端口做为传输端口\",{\"1\":{\"1501\":1}}],[\"或compact\",{\"1\":{\"1338\":1,\"2920\":1,\"3116\":1}}],[\"或反之\",{\"1\":{\"1266\":1}}],[\"或大写\",{\"1\":{\"1165\":1}}],[\"或通过自定义类加载器实现类隔离\",{\"1\":{\"755\":1}}],[\"或使用try\",{\"1\":{\"3090\":1}}],[\"或使用同步块确保迭代过程中不发生gc\",{\"1\":{\"2694\":1}}],[\"或使用专门的缓存框架如guava\",{\"1\":{\"2693\":1}}],[\"或使用collections\",{\"1\":{\"2643\":1}}],[\"或使用concurrenthashmap\",{\"1\":{\"2420\":1,\"2692\":1}}],[\"或使用comparator\",{\"1\":{\"2388\":1}}],[\"或使用change\",{\"1\":{\"125\":1}}],[\"或使用注释说明穿透意图\",{\"1\":{\"2062\":1}}],[\"或使用g1收集器替代\",{\"1\":{\"783\":1}}],[\"或使用静态threadlocal变量\",{\"1\":{\"618\":1}}],[\"或使用以下\",{\"1\":{\"264\":1}}],[\"或延迟过高时\",{\"1\":{\"169\":1}}],[\"或被删除的数据\",{\"1\":{\"147\":1}}],[\"或者它根本就没有网络\",{\"1\":{\"3256\":1}}],[\"或者重新抛出包装后的异常\",{\"1\":{\"2959\":1}}],[\"或者使用饱和策略\",{\"1\":{\"2539\":1}}],[\"或者使用可动态调整的容量策略\",{\"1\":{\"2539\":1}}],[\"或者使用增强型构建工具构建多平台架构\",{\"1\":{\"1793\":1}}],[\"或者需要实现双向迭代器的场景\",{\"1\":{\"2484\":1}}],[\"或者服务器压力过大导致丢包\",{\"1\":{\"1886\":1}}],[\"或者服务器自动下载\",{\"1\":{\"1781\":1}}],[\"或者yml格式的加入这个配置\",{\"1\":{\"1736\":1}}],[\"或者复制本段内容\",{\"1\":{\"1418\":1}}],[\"或者方法内部创建过大的局部变量\",{\"1\":{\"1154\":1}}],[\"或者更改\",{\"1\":{\"305\":1}}],[\"或者所有slave的延迟都大于等于8秒时\",{\"1\":{\"169\":1}}],[\"或者\",{\"1\":{\"130\":1,\"1353\":1,\"1355\":1,\"1359\":1,\"1364\":1,\"1482\":1,\"1501\":1,\"1557\":1,\"1667\":1,\"1671\":1,\"1714\":1,\"1763\":1,\"1798\":1,\"1892\":1,\"1907\":1,\"1908\":1,\"1923\":1,\"2534\":1,\"3246\":3}}],[\"或decimal\",{\"1\":{\"125\":1}}],[\"或不支持的命令\",{\"1\":{\"125\":1}}],[\"或视图的定义程序\",{\"1\":{\"125\":1}}],[\"或函数\",{\"1\":{\"125\":1}}],[\"或许仅应与set一起使用常量表达式\",{\"1\":{\"125\":1}}],[\"或许应使用\",{\"1\":{\"125\":1}}],[\"或存储引擎不支持唯一子键\",{\"1\":{\"125\":1}}],[\"或能被所有人读取\",{\"1\":{\"125\":1}}],[\"或增加交换空间的大小\",{\"1\":{\"125\":1}}],[\"或\",{\"0\":{\"1476\":1},\"1\":{\"113\":1,\"147\":1,\"172\":1,\"264\":2,\"537\":1,\"1432\":2,\"1435\":1,\"1436\":1,\"1580\":1,\"1613\":1,\"1673\":1,\"1744\":1,\"1882\":1,\"1903\":3,\"1911\":1,\"2099\":1,\"2836\":1}}],[\"重传\",{\"1\":{\"3227\":1}}],[\"重传间隔指数增长\",{\"1\":{\"3195\":1}}],[\"重传策略\",{\"1\":{\"1115\":1}}],[\"重试机制\",{\"1\":{\"3087\":1}}],[\"重试机制实现\",{\"1\":{\"2486\":1}}],[\"重定向服务器接收请求后\",{\"1\":{\"3185\":1}}],[\"重定向服务器\",{\"0\":{\"3185\":1}}],[\"重定向响应\",{\"1\":{\"3179\":1}}],[\"重定向system\",{\"1\":{\"2909\":2}}],[\"重定向标准输出流示例\",{\"1\":{\"2909\":1}}],[\"重定向的同时输出到屏幕\",{\"0\":{\"1870\":1},\"1\":{\"1835\":1}}],[\"重大优化\",{\"1\":{\"2596\":1}}],[\"重要特性\",{\"1\":{\"2434\":1,\"2491\":1}}],[\"重要业务操作\",{\"1\":{\"2070\":1}}],[\"重要程度\",{\"1\":{\"1034\":1}}],[\"重置超时时间\",{\"1\":{\"3087\":1}}],[\"重置position为0\",{\"1\":{\"2914\":1}}],[\"重置缓冲区以便下次尝试\",{\"1\":{\"2885\":1}}],[\"重置到标记位置\",{\"1\":{\"2849\":1,\"2869\":1}}],[\"重置头节点和尾节点为null\",{\"1\":{\"2496\":1}}],[\"重置元素数量为0\",{\"1\":{\"2440\":1,\"2496\":1}}],[\"重置自增序列\",{\"0\":{\"1828\":1}}],[\"重置连接状态\",{\"1\":{\"1326\":1}}],[\"重置状态\",{\"1\":{\"1325\":1}}],[\"重置慢查询日志\",{\"1\":{\"193\":1}}],[\"重载判断依据\",{\"1\":{\"2786\":1}}],[\"重载和重写的区别是什么\",{\"0\":{\"2752\":1}}],[\"重载实现多类型支持\",{\"1\":{\"1287\":1}}],[\"重载\",{\"1\":{\"1287\":1,\"2752\":1}}],[\"重用缓冲区\",{\"1\":{\"1238\":1}}],[\"重用线程来减少线程创建和销毁的开销\",{\"1\":{\"597\":1}}],[\"重点关注跨服务调用的网络延迟\",{\"1\":{\"3111\":1}}],[\"重点推荐\",{\"1\":{\"299\":1}}],[\"重点抽查\",{\"1\":{\"153\":1,\"154\":1}}],[\"重量级锁\",{\"1\":{\"645\":1,\"651\":1}}],[\"重量级\",{\"1\":{\"141\":1}}],[\"重写需满足\",{\"1\":{\"2737\":1}}],[\"重写writeobject\",{\"1\":{\"2641\":1}}],[\"重写equals方法\",{\"1\":{\"2605\":1}}],[\"重写equals和hashcode方法以支持去重\",{\"1\":{\"1182\":1}}],[\"重写removeeldestentry\",{\"1\":{\"2427\":1}}],[\"重写hashcode方法\",{\"1\":{\"2605\":1}}],[\"重写hashcode\",{\"1\":{\"2385\":1,\"2422\":1}}],[\"重写对象的tostring\",{\"1\":{\"2232\":1}}],[\"重写tostring\",{\"1\":{\"2224\":1,\"2232\":1}}],[\"重写父类方法\",{\"1\":{\"1204\":1,\"2736\":1,\"3136\":1}}],[\"重写父类方法后\",{\"1\":{\"1078\":1}}],[\"重写与重载\",{\"1\":{\"1034\":1}}],[\"重写findclass方法\",{\"1\":{\"746\":1}}],[\"重写可变的部分\",{\"1\":{\"291\":1}}],[\"重写\",{\"1\":{\"141\":1,\"2752\":1}}],[\"重组分区集合时\",{\"1\":{\"125\":1}}],[\"重组的分区数超过了已有的分区数\",{\"1\":{\"125\":1}}],[\"重复元素\",{\"1\":{\"2369\":1}}],[\"重复丢弃\",{\"1\":{\"1312\":1}}],[\"重复对象\",{\"1\":{\"1182\":1}}],[\"重复注解处理\",{\"1\":{\"3153\":1}}],[\"重复注解示例\",{\"1\":{\"1066\":1}}],[\"重复注解\",{\"1\":{\"1066\":1}}],[\"重复依赖\",{\"0\":{\"1012\":1}}],[\"重复使用stream\",{\"1\":{\"553\":1}}],[\"重复字符串n次\",{\"1\":{\"472\":1}}],[\"重复光标\",{\"1\":{\"125\":1}}],[\"重复条件\",{\"1\":{\"125\":1}}],[\"重复变量\",{\"1\":{\"125\":1}}],[\"重复参数\",{\"1\":{\"125\":1}}],[\"重复\",{\"1\":{\"125\":1}}],[\"重复键名称\",{\"1\":{\"125\":1}}],[\"重复列名\",{\"1\":{\"125\":1}}],[\"重命名\",{\"1\":{\"1624\":1}}],[\"重命名键\",{\"1\":{\"199\":1}}],[\"重命名为java\",{\"1\":{\"577\":1}}],[\"重命名为\",{\"1\":{\"125\":1}}],[\"重命名集合\",{\"1\":{\"82\":1}}],[\"重新发送请求\",{\"1\":{\"3215\":1}}],[\"重新测试并与基线对比\",{\"1\":{\"2728\":1}}],[\"重新设置最大连接数\",{\"1\":{\"1826\":1}}],[\"重新设置中断标志\",{\"1\":{\"610\":1}}],[\"重新加载配置\",{\"1\":{\"1923\":1}}],[\"重新加载配置文件\",{\"1\":{\"1624\":1}}],[\"重新加载daemon\",{\"0\":{\"1803\":1}}],[\"重新载入配置\",{\"1\":{\"1504\":1}}],[\"重新将请求提交到其他的节点上\",{\"1\":{\"1377\":1}}],[\"重新哈希并转移所有元素\",{\"1\":{\"1181\":1}}],[\"重新标记\",{\"1\":{\"777\":1}}],[\"重新生成新seata\",{\"0\":{\"242\":1}}],[\"重新启动容器\",{\"0\":{\"236\":1}}],[\"重新启动数据库\",{\"1\":{\"113\":1}}],[\"重新分配槽\",{\"1\":{\"186\":1}}],[\"重新分槽\",{\"1\":{\"186\":1}}],[\"重新定义标签\",{\"1\":{\"125\":1}}],[\"重新创建集群\",{\"1\":{\"1677\":1}}],[\"重新创建转储表\",{\"1\":{\"125\":1}}],[\"重新创建表\",{\"1\":{\"125\":1}}],[\"重新打开服务窗口\",{\"1\":{\"121\":1}}],[\"重启防火墙\",{\"1\":{\"1923\":1}}],[\"重启挂载不会掉\",{\"1\":{\"1918\":1}}],[\"重启网络\",{\"1\":{\"1918\":1}}],[\"重启网卡linux\",{\"0\":{\"1905\":1}}],[\"重启redis\",{\"1\":{\"1780\":1,\"1788\":1}}],[\"重启mongodb服务\",{\"1\":{\"1736\":1}}],[\"重启mysql服务\",{\"0\":{\"1777\":1},\"1\":{\"123\":1,\"1585\":1}}],[\"重启mysql服务并验证版本\",{\"0\":{\"123\":1}}],[\"重启mysql这个参数会失败\",{\"1\":{\"113\":1}}],[\"重启docker服务\",{\"0\":{\"1804\":1}}],[\"重启docker\",{\"1\":{\"1667\":1,\"1675\":1}}],[\"重启安装脚本\",{\"1\":{\"1630\":1}}],[\"重启kibana\",{\"1\":{\"1520\":1}}],[\"重启生效\",{\"1\":{\"1484\":1,\"1495\":1,\"1513\":1}}],[\"重启nginx并验证是否访问受限\",{\"0\":{\"1424\":1,\"1428\":1}}],[\"重启nginx\",{\"1\":{\"1417\":1}}],[\"重启服务\",{\"0\":{\"1359\":1,\"1364\":1,\"1824\":1},\"1\":{\"1424\":1,\"1428\":1,\"1504\":1,\"1788\":1}}],[\"重启服务器并再次尝试\",{\"1\":{\"125\":1}}],[\"重启\",{\"0\":{\"244\":1,\"1837\":1},\"1\":{\"1402\":1,\"1417\":1,\"1478\":1,\"1835\":1,\"1837\":1,\"1876\":1}}],[\"重启数据库后再次被瞬间流量放倒\",{\"1\":{\"190\":1}}],[\"重启应用服务器无效\",{\"1\":{\"190\":1}}],[\"重启后仍然面对缓存中无数据可用\",{\"1\":{\"190\":1}}],[\"重启后恢复该值\",{\"1\":{\"171\":1}}],[\"重启后\",{\"1\":{\"142\":1,\"171\":1,\"1787\":1}}],[\"重启后生效\",{\"1\":{\"113\":1}}],[\"重启时再重新执行aof文件中命令\",{\"1\":{\"139\":1}}],[\"wntz0f3sujbz0lcqurbtkjna3foa2lhoxcwqkfrc0zbrefttvjbd0rnwurwuvferxdkcmrxsmwkt\",{\"1\":{\"3273\":1}}],[\"wmx\",{\"1\":{\"1920\":1}}],[\"wq保存\",{\"1\":{\"1918\":1}}],[\"wq存盘退出\",{\"1\":{\"1504\":1}}],[\"wt\",{\"1\":{\"1887\":1}}],[\"wkb\",{\"1\":{\"1884\":1}}],[\"wchan\",{\"1\":{\"1882\":1}}],[\"wc\",{\"1\":{\"1838\":1,\"1860\":4}}],[\"wc命令\",{\"0\":{\"1860\":1},\"1\":{\"1835\":1}}],[\"wyh1791\",{\"1\":{\"1535\":1}}],[\"wurstmeister\",{\"1\":{\"1529\":1,\"1530\":1}}],[\"wbgbpphkqcs73sfjjig0\",{\"1\":{\"1527\":1}}],[\"wsx3edc\",{\"1\":{\"1357\":1}}],[\"wsastartup失败\",{\"1\":{\"125\":1}}],[\"wsas\",{\"1\":{\"125\":1}}],[\"w\",{\"1\":{\"1191\":1,\"1858\":1,\"1860\":1,\"1869\":1,\"1878\":1,\"1884\":1,\"2196\":1,\"3099\":1}}],[\"w3e4r\",{\"1\":{\"1578\":2,\"1607\":1}}],[\"w3\",{\"1\":{\"584\":1}}],[\"what\",{\"1\":{\"3282\":1}}],[\"which\",{\"1\":{\"1496\":1,\"1846\":1}}],[\"while和do\",{\"1\":{\"2138\":2}}],[\"whiledemo\",{\"1\":{\"2129\":1}}],[\"while循环的主要区别在于它们的语法和执行条件的检查时机\",{\"1\":{\"2138\":1}}],[\"while循环有什么区别\",{\"1\":{\"2138\":1}}],[\"while循环耗时\",{\"1\":{\"1043\":1}}],[\"while循环\",{\"1\":{\"1043\":1,\"2138\":2}}],[\"while循环适用场景\",{\"1\":{\"1043\":1}}],[\"while\",{\"0\":{\"2129\":1,\"2130\":1},\"1\":{\"286\":1,\"610\":1,\"642\":2,\"660\":1,\"710\":2,\"729\":1,\"746\":1,\"747\":1,\"1043\":1,\"1139\":1,\"1161\":1,\"1162\":1,\"1164\":1,\"1165\":3,\"1170\":1,\"1179\":1,\"1181\":3,\"1185\":1,\"1190\":1,\"1194\":1,\"1221\":2,\"1224\":2,\"1228\":2,\"1232\":1,\"1237\":1,\"1312\":2,\"1314\":2,\"1315\":2,\"1321\":1,\"1324\":2,\"1325\":3,\"1337\":1,\"1735\":2,\"2078\":4,\"2129\":1,\"2130\":1,\"2207\":1,\"2294\":1,\"2325\":3,\"2327\":1,\"2340\":1,\"2352\":1,\"2370\":1,\"2382\":1,\"2407\":1,\"2420\":1,\"2448\":1,\"2466\":1,\"2467\":1,\"2480\":1,\"2485\":2,\"2505\":1,\"2507\":2,\"2508\":1,\"2513\":1,\"2523\":1,\"2537\":2,\"2544\":2,\"2555\":4,\"2575\":1,\"2577\":1,\"2578\":1,\"2585\":1,\"2601\":1,\"2655\":2,\"2656\":1,\"2681\":2,\"2682\":1,\"2684\":1,\"2710\":1,\"2727\":1,\"2809\":1,\"2831\":1,\"2833\":1,\"2837\":1,\"2843\":1,\"2849\":1,\"2856\":1,\"2861\":1,\"2866\":1,\"2867\":1,\"2868\":2,\"2873\":1,\"2878\":2,\"2880\":1,\"2891\":1,\"2892\":1,\"2893\":1,\"2897\":1,\"2915\":1,\"2916\":2,\"2921\":4,\"2927\":1,\"2951\":1,\"3000\":1,\"3070\":1,\"3078\":1,\"3079\":2,\"3082\":1,\"3117\":2,\"3118\":2}}],[\"whereis\",{\"1\":{\"1779\":1}}],[\"where\",{\"1\":{\"366\":1,\"438\":3,\"439\":3,\"1575\":2,\"1775\":1,\"1821\":1,\"1827\":5,\"1831\":2,\"1833\":1,\"2066\":2,\"3005\":1,\"3052\":1,\"3103\":2,\"3164\":3,\"3276\":1}}],[\"when\",{\"1\":{\"125\":2,\"156\":1,\"1831\":2,\"3166\":1,\"3282\":2}}],[\"wednesday\",{\"1\":{\"2818\":1}}],[\"weekday\",{\"1\":{\"2818\":1,\"2819\":2,\"2820\":4}}],[\"wechatpay\",{\"1\":{\"2746\":1}}],[\"weak\",{\"1\":{\"2676\":1}}],[\"weakreference<>\",{\"1\":{\"2693\":1}}],[\"weakreference<v>>\",{\"1\":{\"2693\":1}}],[\"weakreference<k>\",{\"1\":{\"2680\":1}}],[\"weakreference\",{\"1\":{\"2675\":1,\"3011\":1}}],[\"weakhashmap通常用于存储临时对象\",{\"1\":{\"2696\":1}}],[\"weakhashmap在jdk\",{\"1\":{\"2696\":1}}],[\"weakhashmap在性能上有以下特点\",{\"1\":{\"2689\":1}}],[\"weakhashmap与hashmap的红黑树实现有何不同\",{\"0\":{\"2696\":1}}],[\"weakhashmap不是线程安全的\",{\"1\":{\"2692\":1}}],[\"weakhashmap也不会自动移除对应的条目\",{\"1\":{\"2691\":1}}],[\"weakhashmap采用懒清理策略\",{\"1\":{\"2688\":1}}],[\"weakhashmap维护一个引用队列\",{\"1\":{\"2687\":1}}],[\"weakhashmap的键被包装在weakreference中\",{\"1\":{\"2687\":1}}],[\"weakhashmap的核心设计思想是结合哈希表和弱引用机制\",{\"1\":{\"2687\":1}}],[\"weakhashmap<>\",{\"1\":{\"2685\":1,\"2691\":2,\"2692\":1,\"2693\":1,\"2697\":1}}],[\"weakhashmap<string\",{\"1\":{\"2685\":1,\"2691\":2}}],[\"weakhashmap<k\",{\"1\":{\"2679\":1,\"2693\":1,\"2697\":1}}],[\"weakhashmapcacheexample\",{\"1\":{\"2685\":3}}],[\"weakhashmap\",{\"0\":{\"2698\":1},\"1\":{\"2685\":1,\"2698\":2}}],[\"weakhashmap缓存示例\",{\"0\":{\"2685\":1}}],[\"weakhashmap首次被引入\",{\"1\":{\"2677\":1}}],[\"weakhashmap使用弱引用作为键\",{\"1\":{\"2676\":1}}],[\"weakhashmap是java集合框架中一种特殊的map实现\",{\"1\":{\"2675\":1}}],[\"weakhashmap源码\",{\"0\":{\"2673\":1}}],[\"weakly\",{\"1\":{\"2543\":1}}],[\"weat\",{\"1\":{\"463\":1}}],[\"weixin\",{\"1\":{\"1642\":1}}],[\"weighted\",{\"1\":{\"3086\":1}}],[\"weight=8\",{\"1\":{\"1405\":1}}],[\"weight=2\",{\"1\":{\"1405\":1}}],[\"weight的值越大分配\",{\"1\":{\"1405\":1}}],[\"weight\",{\"0\":{\"1405\":1},\"1\":{\"1407\":1}}],[\"weight2\",{\"1\":{\"204\":2}}],[\"weight1\",{\"1\":{\"204\":2}}],[\"weights\",{\"1\":{\"204\":2}}],[\"welcome\",{\"1\":{\"994\":1}}],[\"web界面访问\",{\"0\":{\"3281\":1}}],[\"webrtcsdp\",{\"1\":{\"3232\":2}}],[\"webrtcpeerconnection\",{\"1\":{\"3232\":1}}],[\"webrtcpeerconnectionfactory\",{\"1\":{\"3232\":1}}],[\"webrtcfactory\",{\"1\":{\"3232\":1}}],[\"webrtc提供浏览器端实时音视频能力\",{\"1\":{\"3232\":1}}],[\"webapps\",{\"1\":{\"1590\":2}}],[\"web可视化平台\",{\"1\":{\"1537\":1}}],[\"websvr\",{\"1\":{\"1660\":2}}],[\"websvr的node部署\",{\"1\":{\"1660\":1}}],[\"websvr1\",{\"1\":{\"1660\":4}}],[\"webservlet\",{\"1\":{\"1431\":2,\"1440\":1,\"1443\":2,\"1444\":2}}],[\"websecurityconfigureradapter\",{\"1\":{\"451\":1,\"456\":1}}],[\"websocket等协议交互\",{\"1\":{\"3107\":1}}],[\"websocket服务\",{\"1\":{\"1347\":1}}],[\"websocket\",{\"1\":{\"1347\":1,\"1650\":9,\"1656\":1,\"1711\":1,\"1713\":9}}],[\"web服务器\",{\"1\":{\"1238\":1}}],[\"webenvironment\",{\"1\":{\"450\":2}}],[\"web包含了web开发所需的所有依赖\",{\"1\":{\"398\":1}}],[\"web<\",{\"1\":{\"394\":1,\"416\":1}}],[\"webmvcconfigurer的addcorsmappings方法\",{\"1\":{\"434\":1}}],[\"webmvcconfigurer\",{\"1\":{\"382\":1,\"430\":1,\"434\":1}}],[\"webconfig\",{\"1\":{\"382\":1,\"430\":1,\"434\":1}}],[\"web开发是java应用程序开发中的重要部分\",{\"1\":{\"375\":1}}],[\"web开发\",{\"0\":{\"374\":1,\"424\":1}}],[\"web开发等\",{\"1\":{\"309\":1}}],[\"web模块\",{\"1\":{\"313\":1}}],[\"web\",{\"0\":{\"3307\":1},\"1\":{\"286\":2,\"303\":1,\"382\":1,\"3246\":1}}],[\"wget下载\",{\"1\":{\"264\":1}}],[\"wget\",{\"1\":{\"264\":3,\"1481\":3,\"1488\":1,\"1779\":1,\"1781\":1,\"3100\":1,\"3246\":2,\"3271\":1,\"3276\":1}}],[\"wwwauthheader\",{\"1\":{\"3215\":7}}],[\"wwwauthenticateheader\",{\"1\":{\"3215\":2}}],[\"www目录下文件\",{\"1\":{\"1389\":1,\"1390\":1}}],[\"www\",{\"1\":{\"216\":4,\"584\":1,\"996\":1,\"999\":1,\"1389\":3,\"1390\":2,\"1397\":1,\"1409\":1,\"1417\":5,\"1418\":1,\"1446\":1,\"1448\":1,\"1474\":2,\"1536\":1,\"1636\":1,\"1734\":1,\"1738\":1,\"1879\":2}}],[\"w取值=active\",{\"1\":{\"153\":1}}],[\"women\",{\"1\":{\"1459\":1}}],[\"words\",{\"1\":{\"2371\":3}}],[\"word\",{\"1\":{\"720\":1}}],[\"word变化\",{\"1\":{\"711\":1}}],[\"word实现\",{\"1\":{\"651\":1}}],[\"wora\",{\"1\":{\"574\":1,\"1046\":1}}],[\"world\",{\"1\":{\"283\":1,\"1041\":2,\"1058\":2,\"1164\":1,\"1270\":1,\"1667\":1,\"2191\":1,\"2196\":4,\"2197\":1,\"2239\":4,\"2265\":4,\"2785\":1,\"2891\":1,\"3024\":1,\"3041\":1}}],[\"workdir\",{\"1\":{\"1551\":2,\"3246\":1}}],[\"workqueue\",{\"1\":{\"622\":1}}],[\"workflows\",{\"1\":{\"2020\":1}}],[\"workflow\",{\"1\":{\"280\":1,\"1650\":9,\"1656\":1,\"1711\":1,\"1713\":9}}],[\"work\",{\"1\":{\"125\":1,\"1940\":1,\"2440\":2}}],[\"worker节点\",{\"1\":{\"3273\":1}}],[\"worker02\",{\"1\":{\"3265\":1,\"3266\":2,\"3267\":1,\"3273\":2}}],[\"worker01\",{\"1\":{\"3265\":1,\"3266\":2,\"3267\":1,\"3273\":2}}],[\"worker填入其他所有要参与到编排部署应用的机器\",{\"1\":{\"1677\":1}}],[\"worker进程的数量\",{\"1\":{\"1385\":1}}],[\"workergroup\",{\"1\":{\"1111\":4,\"1332\":3,\"3125\":3}}],[\"worker\",{\"1\":{\"113\":1,\"122\":1,\"216\":2,\"610\":3,\"1385\":2,\"1595\":2,\"1633\":1,\"1637\":1,\"1638\":4,\"3225\":1,\"3273\":6}}],[\"wont\",{\"1\":{\"125\":1}}],[\"wakeup\",{\"1\":{\"2916\":1}}],[\"wa\",{\"1\":{\"1887\":1}}],[\"wantedby=multi\",{\"1\":{\"1620\":1,\"1752\":1}}],[\"wants=network\",{\"1\":{\"1620\":1,\"1752\":1}}],[\"warranty\",{\"1\":{\"1578\":2}}],[\"warn\",{\"1\":{\"125\":15,\"1595\":1,\"1677\":2,\"2062\":1,\"2070\":1,\"3223\":1}}],[\"warning\",{\"1\":{\"122\":1,\"125\":1,\"1087\":1,\"1494\":1,\"3282\":2}}],[\"way\",{\"1\":{\"1569\":1}}],[\"watcher\",{\"1\":{\"1667\":2}}],[\"watch\",{\"1\":{\"206\":1}}],[\"was\",{\"1\":{\"125\":2,\"1569\":1,\"1677\":1}}],[\"wait|awk\",{\"1\":{\"1881\":1}}],[\"wait连接\",{\"1\":{\"1881\":1}}],[\"wait2\",{\"1\":{\"1881\":1}}],[\"wait1\",{\"1\":{\"1881\":1}}],[\"wait状态需要等待2msl\",{\"1\":{\"1311\":1}}],[\"wait状态\",{\"1\":{\"1311\":2}}],[\"waitforcondition\",{\"1\":{\"660\":1}}],[\"waitnotifyexample\",{\"1\":{\"660\":1}}],[\"waiting状态\",{\"1\":{\"609\":1}}],[\"waiting\",{\"1\":{\"605\":2,\"609\":2}}],[\"wait\",{\"0\":{\"660\":1,\"667\":1},\"1\":{\"125\":1,\"609\":1,\"618\":1,\"654\":1,\"660\":1,\"667\":1,\"1139\":1,\"1311\":1,\"1881\":2,\"2555\":2}}],[\"writable\",{\"1\":{\"1586\":1}}],[\"writes\",{\"1\":{\"1788\":4}}],[\"writesheet\",{\"1\":{\"269\":2,\"270\":2}}],[\"writevalueasstring\",{\"1\":{\"1439\":5,\"1440\":1,\"1443\":1,\"1444\":1}}],[\"writeandflush\",{\"1\":{\"1332\":1,\"3125\":1}}],[\"writeobject\",{\"1\":{\"1225\":1}}],[\"writeboolean\",{\"1\":{\"1222\":1,\"2845\":1}}],[\"writedouble\",{\"1\":{\"1222\":1,\"2845\":1}}],[\"writeint\",{\"1\":{\"1222\":1,\"2845\":1}}],[\"writeutf\",{\"1\":{\"1222\":1,\"2845\":1}}],[\"writelock\",{\"1\":{\"643\":4,\"2356\":4,\"2429\":2,\"2697\":4}}],[\"writer是所有输出字符流的超类\",{\"1\":{\"2854\":1}}],[\"writer抽象类\",{\"0\":{\"2854\":1},\"1\":{\"2835\":1}}],[\"writerare\",{\"1\":{\"2536\":1}}],[\"writersheet\",{\"1\":{\"269\":1}}],[\"writer\",{\"1\":{\"269\":2,\"658\":1,\"1221\":1,\"1314\":2,\"2854\":3,\"2883\":1,\"3162\":3}}],[\"write\",{\"1\":{\"125\":5,\"169\":1,\"171\":1,\"269\":3,\"286\":3,\"729\":1,\"746\":1,\"747\":1,\"1224\":3,\"1228\":1,\"1232\":1,\"1235\":2,\"1238\":3,\"1315\":1,\"1321\":1,\"1324\":1,\"1336\":2,\"1431\":2,\"1440\":1,\"1443\":1,\"1444\":1,\"1578\":1,\"2356\":2,\"2832\":2,\"2833\":1,\"2837\":2,\"2842\":3,\"2843\":1,\"2844\":1,\"2849\":1,\"2854\":5,\"2855\":1,\"2856\":1,\"2857\":3,\"2861\":1,\"2866\":1,\"2867\":1,\"2868\":3,\"2869\":1,\"2879\":2,\"2880\":1,\"2893\":1,\"2897\":1,\"2915\":1,\"2916\":1,\"2917\":2,\"2921\":2,\"3065\":2,\"3070\":1,\"3100\":1,\"3117\":1,\"3118\":2,\"3120\":2,\"3154\":1,\"3162\":1}}],[\"wrappedbuffer\",{\"1\":{\"3130\":1}}],[\"wrapperboolean\",{\"1\":{\"1040\":1}}],[\"wrapperint\",{\"1\":{\"1040\":2}}],[\"wrapperclassdemo\",{\"1\":{\"1040\":1}}],[\"wrap\",{\"1\":{\"1238\":1,\"1324\":1,\"1325\":1,\"2885\":1,\"2921\":1,\"3117\":1}}],[\"wrong\",{\"1\":{\"125\":41}}],[\"wdecki5qu43adj1rhrzmlfingzotmekqwzksvvhs2tjz0tannpls1z3eedrykptceovsk5yyww2n\",{\"1\":{\"3273\":1}}],[\"wd\",{\"1\":{\"125\":2}}],[\"wildcardlists\",{\"1\":{\"3035\":3}}],[\"will\",{\"1\":{\"28\":1,\"994\":1,\"1004\":1,\"1578\":1}}],[\"wiki等\",{\"1\":{\"1984\":1}}],[\"wikipedia\",{\"1\":{\"1507\":1}}],[\"wide\",{\"1\":{\"1660\":1}}],[\"width=\",{\"1\":{\"1467\":1}}],[\"width=device\",{\"1\":{\"1447\":1,\"1450\":1,\"1455\":1,\"1456\":1,\"1457\":1,\"1458\":1,\"1459\":1,\"1461\":1,\"1462\":1,\"1463\":1,\"1464\":1,\"1467\":1,\"1469\":1}}],[\"width\",{\"1\":{\"1209\":2,\"1440\":4,\"1447\":1,\"1450\":1,\"1455\":1,\"1456\":1,\"1457\":1,\"1458\":1,\"1459\":1,\"1461\":1,\"1462\":1,\"1463\":1,\"1464\":1,\"1467\":1,\"1469\":7,\"1470\":1,\"2742\":6,\"2745\":10}}],[\"wireshark抓包分析具体网络交互\",{\"1\":{\"3111\":1}}],[\"wireshark\",{\"1\":{\"3107\":1}}],[\"wire\",{\"1\":{\"1513\":1}}],[\"winter\",{\"1\":{\"2369\":1,\"2821\":1,\"2822\":1}}],[\"win版\",{\"1\":{\"1917\":1}}],[\"win出现全黑框表示通的\",{\"1\":{\"1916\":1}}],[\"windowheight\",{\"1\":{\"1443\":2}}],[\"window\",{\"1\":{\"1443\":3}}],[\"windows中使用弊端\",{\"1\":{\"3246\":1}}],[\"windows的iocp和linux的epoll实现差异大\",{\"1\":{\"3130\":1}}],[\"windows系统路径分隔符使用\",{\"1\":{\"2836\":1}}],[\"windows后台运行jar脚本\",{\"0\":{\"1896\":1}}],[\"windows本地hosts添加虚拟机ip地址对应的域名解析\",{\"1\":{\"1389\":1}}],[\"windowsize\",{\"1\":{\"1312\":6}}],[\"windows安装nvm包管理器\",{\"1\":{\"263\":1}}],[\"windows安装包管理器\",{\"0\":{\"263\":1}}],[\"windows环境\",{\"1\":{\"118\":1}}],[\"windows\",{\"0\":{\"118\":1},\"1\":{\"219\":2,\"1569\":1,\"1892\":1,\"1907\":3,\"2860\":1}}],[\"win\",{\"0\":{\"1892\":1},\"1\":{\"1384\":2}}],[\"wifi\",{\"1\":{\"1117\":1}}],[\"withname\",{\"1\":{\"3244\":2}}],[\"withdraw\",{\"1\":{\"2750\":1}}],[\"withdiscount\",{\"1\":{\"2046\":1}}],[\"withuser\",{\"1\":{\"451\":2}}],[\"withinitial\",{\"1\":{\"3007\":1}}],[\"withinvalidproductid\",{\"1\":{\"2047\":1}}],[\"within\",{\"1\":{\"340\":1,\"994\":1,\"1004\":1}}],[\"withexpiresat\",{\"1\":{\"307\":1}}],[\"withclaim\",{\"1\":{\"307\":2}}],[\"withcredentials\",{\"1\":{\"280\":2,\"1656\":2,\"1711\":2}}],[\"withscores\",{\"1\":{\"204\":2}}],[\"without\",{\"1\":{\"125\":3,\"1224\":1,\"1578\":2,\"2868\":3}}],[\"with\",{\"0\":{\"1247\":1,\"2951\":1},\"1\":{\"125\":7,\"229\":1,\"274\":1,\"490\":1,\"1044\":2,\"1059\":1,\"1224\":1,\"1234\":2,\"1247\":1,\"1336\":2,\"1416\":2,\"1578\":3,\"1607\":1,\"1633\":2,\"1637\":2,\"1677\":4,\"1779\":10,\"1819\":2,\"1821\":1,\"2020\":1,\"2040\":1,\"2831\":1,\"2832\":1,\"2835\":1,\"2836\":1,\"2848\":2,\"2860\":1,\"2868\":3,\"2872\":2,\"2884\":1,\"2896\":1,\"2897\":1,\"2908\":1,\"2920\":1,\"2930\":1,\"2951\":2,\"3069\":1,\"3090\":1,\"3237\":1,\"3276\":1}}],[\"并为安装脚本添加执行权限\",{\"1\":{\"3246\":1}}],[\"并解决实际应用中遇到的各种问题\",{\"1\":{\"3201\":1}}],[\"并采用确认重传\",{\"1\":{\"3061\":1}}],[\"并采用不同的回收策略\",{\"1\":{\"698\":1}}],[\"并分析异常处理的性能考量\",{\"1\":{\"2933\":1}}],[\"并分析各自的适用场景\",{\"1\":{\"2354\":1}}],[\"并分析各种方法的适用场景和性能特点\",{\"1\":{\"2209\":1}}],[\"并处理字符编码\",{\"1\":{\"2877\":1}}],[\"并处理版本冲突\",{\"1\":{\"922\":1}}],[\"并实现基本的读写方法\",{\"1\":{\"2873\":1}}],[\"并实现高效的缓冲读写功能\",{\"1\":{\"2873\":1}}],[\"并举例说明其应用场景\",{\"1\":{\"2849\":1}}],[\"并显示复制进度\",{\"1\":{\"2837\":1}}],[\"并设置append为true\",{\"1\":{\"2832\":1}}],[\"并通过实例展示泛型在框架开发中的最佳实践\",{\"1\":{\"3043\":1}}],[\"并通过访问控制修饰符限制对内部实现的直接访问\",{\"1\":{\"2732\":1}}],[\"并通过不同的实现类提供多样化的队列特性\",{\"1\":{\"2470\":1}}],[\"并添加到双向链表尾部\",{\"1\":{\"2628\":1}}],[\"并增加了两个指针用于维护双向链表\",{\"1\":{\"2623\":1}}],[\"并增加了编码标识\",{\"1\":{\"2289\":1}}],[\"并重新哈希所有节点\",{\"1\":{\"2609\":1}}],[\"并重新导入脚本\",{\"1\":{\"113\":1}}],[\"并调用siftup和siftdown调整堆结构\",{\"1\":{\"2588\":1}}],[\"并针对这些操作定义了两种行为模式\",{\"1\":{\"2459\":1}}],[\"并探讨为什么选择这种算法\",{\"1\":{\"2357\":1}}],[\"并探讨如何优化arraylist在频繁添加大量元素时的性能\",{\"1\":{\"2355\":1}}],[\"并探讨生态系统的设计思想与未来趋势\",{\"1\":{\"559\":1}}],[\"并存储在字符串常量池中\",{\"1\":{\"2238\":1}}],[\"并存储在复制缓冲区\",{\"1\":{\"167\":1}}],[\"并令其容量符合要求\",{\"1\":{\"1739\":1}}],[\"并提供可直接应用于项目的代码示例和最佳实践\",{\"1\":{\"2996\":1}}],[\"并提供了访问控制机制\",{\"1\":{\"2762\":1}}],[\"并提供大量有关耗时过长的操作信息\",{\"1\":{\"1739\":1}}],[\"并提供统一的管理方式\",{\"1\":{\"184\":1}}],[\"并替换掉容器中配置文件的对应默认配置\",{\"1\":{\"1530\":1}}],[\"并替换为发布到中央release仓库的插件\",{\"1\":{\"1003\":1}}],[\"并对数据进行过滤\",{\"1\":{\"1507\":1}}],[\"并对数据进入存储空间的顺序进行区分\",{\"1\":{\"134\":1}}],[\"并能在实际开发中做出更合理的技术选择\",{\"1\":{\"2284\":1}}],[\"并能将这三者结合起来\",{\"1\":{\"1507\":1}}],[\"并能动态操作类的属性\",{\"1\":{\"1259\":1}}],[\"并去掉原js中的方法\",{\"1\":{\"1444\":1}}],[\"并响应给客户端\",{\"1\":{\"1440\":1}}],[\"并有效的\",{\"1\":{\"1437\":1}}],[\"并把用户名和密码保存到指定文件中\",{\"1\":{\"1421\":1}}],[\"并指定字符编码格式\",{\"1\":{\"2875\":1}}],[\"并指定对应的硬盘中的目录\",{\"1\":{\"1402\":1}}],[\"并指定关注的事件\",{\"1\":{\"1228\":1,\"3118\":1}}],[\"并允许突发数据的发送\",{\"1\":{\"1400\":1}}],[\"并输入以下内容\",{\"1\":{\"1372\":1}}],[\"并关联缓冲区\",{\"1\":{\"1315\":1}}],[\"并在文件内添加以下内容\",{\"1\":{\"3246\":1}}],[\"并在使用后恢复\",{\"1\":{\"3010\":1}}],[\"并在访问顺序模式下移动节点到链表尾部\",{\"1\":{\"2629\":1}}],[\"并在代理对象中增强目标方法的功能\",{\"1\":{\"1267\":1}}],[\"并在该注解上添加\",{\"1\":{\"423\":1}}],[\"并附加缓冲区\",{\"1\":{\"1228\":1}}],[\"并返回其索引\",{\"1\":{\"1166\":1}}],[\"并比较它们的性能\",{\"1\":{\"1164\":1}}],[\"并使用二分查找法查找指定元素\",{\"1\":{\"1161\":1}}],[\"并使用set\",{\"1\":{\"125\":1}}],[\"并行是指多个任务在同一时间点同时执行\",{\"1\":{\"1123\":1}}],[\"并行构建\",{\"0\":{\"959\":1},\"1\":{\"959\":1,\"965\":1,\"967\":1}}],[\"并行gc线程数\",{\"1\":{\"797\":1,\"831\":1,\"865\":1,\"899\":1}}],[\"并行流的线程开销可能更高\",{\"1\":{\"553\":1}}],[\"并行流的过度使用\",{\"1\":{\"553\":1}}],[\"并行流并不总是比串行流快\",{\"1\":{\"553\":1}}],[\"并行流处理\",{\"1\":{\"543\":1}}],[\"并行友好\",{\"1\":{\"550\":1}}],[\"并行处理\",{\"1\":{\"543\":1}}],[\"并行写入\",{\"1\":{\"269\":1}}],[\"并记录相关变量名信息\",{\"1\":{\"504\":1}}],[\"并发用户数\",{\"1\":{\"3106\":1}}],[\"并发控制和异常处理等问题\",{\"1\":{\"3170\":1}}],[\"并发控制\",{\"1\":{\"3091\":1}}],[\"并发问题\",{\"0\":{\"2640\":1}}],[\"并发扩容\",{\"1\":{\"2527\":1}}],[\"并发级别\",{\"0\":{\"2519\":1}}],[\"并发机制\",{\"1\":{\"2518\":1}}],[\"并发集合的弱一致性\",{\"1\":{\"2543\":1}}],[\"并发集合的弱一致性实现原理\",{\"0\":{\"2543\":1}}],[\"并发集合的迭代器从不抛出concurrentmodificationexception\",{\"1\":{\"2530\":1}}],[\"并发集合的迭代器特性\",{\"1\":{\"2530\":1}}],[\"并发集合的迭代特性\",{\"0\":{\"2530\":1}}],[\"并发集合的并发度设计\",{\"1\":{\"2519\":1}}],[\"并发集合在实际项目中的应用示例\",{\"1\":{\"2525\":1}}],[\"并发集合在实际项目中的应用\",{\"0\":{\"2525\":1}}],[\"并发集合对比\",{\"0\":{\"2518\":1}}],[\"并发集合体系\",{\"0\":{\"2517\":1}}],[\"并发集合是java集合框架中专门为多线程环境设计的集合类\",{\"1\":{\"2516\":1}}],[\"并发集合概述\",{\"0\":{\"2516\":1}}],[\"并发集合\",{\"0\":{\"2514\":1}}],[\"并发集合功能增强\",{\"1\":{\"1198\":1}}],[\"并发队列性能对比\",{\"0\":{\"2524\":1}}],[\"并发队列设计\",{\"0\":{\"2473\":1}}],[\"并发队列\",{\"1\":{\"2465\":1}}],[\"并发且有序\",{\"1\":{\"2424\":1}}],[\"并发设计\",{\"0\":{\"2416\":1}}],[\"并发有序映射\",{\"1\":{\"2410\":1}}],[\"并发性\",{\"1\":{\"2897\":1}}],[\"并发性能更高\",{\"1\":{\"2541\":1}}],[\"并发性仍然受限\",{\"1\":{\"2356\":1}}],[\"并发性差\",{\"1\":{\"2356\":1}}],[\"并发修改异常\",{\"0\":{\"2340\":1,\"2448\":1,\"2507\":1}}],[\"并发修改异常处理\",{\"1\":{\"1175\":1}}],[\"并发能力有限\",{\"1\":{\"3078\":1}}],[\"并发能力强\",{\"1\":{\"1315\":1}}],[\"并发能力低\",{\"1\":{\"1314\":1}}],[\"并发处理到分布式通信逐步深入\",{\"1\":{\"3072\":1}}],[\"并发处理\",{\"1\":{\"1308\":1}}],[\"并发环境中异常处理有特殊挑战\",{\"1\":{\"1254\":1}}],[\"并发度由segment数量决定\",{\"1\":{\"2541\":1}}],[\"并发度\",{\"1\":{\"2541\":1}}],[\"并发度高\",{\"1\":{\"1197\":1}}],[\"并发度低\",{\"1\":{\"1197\":1}}],[\"并发示例\",{\"1\":{\"1123\":1}}],[\"并发基础概念\",{\"0\":{\"1121\":1}}],[\"并发容器是线程安全的\",{\"1\":{\"1131\":1}}],[\"并发容器和普通容器的区别是什么\",{\"0\":{\"1131\":1}}],[\"并发容器\",{\"0\":{\"1130\":1},\"1\":{\"1119\":1,\"2328\":1}}],[\"并发清除阶段用户线程分配内存速度超过gc回收速度\",{\"1\":{\"783\":1}}],[\"并发清除\",{\"1\":{\"777\":1}}],[\"并发收集\",{\"1\":{\"770\":1}}],[\"并发关键字概述\",{\"0\":{\"654\":1}}],[\"并发编程艺术\",{\"0\":{\"3299\":1}}],[\"并发编程规范\",{\"0\":{\"2038\":1}}],[\"并发编程题\",{\"1\":{\"1175\":1}}],[\"并发编程的核心设计思想是在保证线程安全的前提下\",{\"1\":{\"1137\":1}}],[\"并发编程的挑战\",{\"0\":{\"590\":1}}],[\"并发编程\",{\"0\":{\"1118\":1}}],[\"并发编程模型\",{\"0\":{\"595\":1}}],[\"并发是指多个任务在同一时间段内交替执行\",{\"1\":{\"588\":1,\"1123\":1}}],[\"并发与并行的区别\",{\"0\":{\"588\":1}}],[\"并发压缩\",{\"1\":{\"476\":1}}],[\"并发标记\",{\"1\":{\"476\":1,\"777\":1}}],[\"并发送给所有slave\",{\"1\":{\"171\":1}}],[\"并不会将所有配置文件中的bean都会加载\",{\"1\":{\"463\":1}}],[\"并不会扫描其他包\",{\"1\":{\"461\":1}}],[\"并\",{\"1\":{\"463\":1}}],[\"并自动加载配置类将所需bean注入到ioc容器中\",{\"1\":{\"463\":1}}],[\"并配置相应的密钥来实现敏感信息的加密\",{\"1\":{\"411\":1}}],[\"并支持配置的动态更新\",{\"1\":{\"411\":1}}],[\"并推荐使用\",{\"1\":{\"303\":1}}],[\"并zipentry中写入文件流\",{\"1\":{\"286\":1}}],[\"并集\",{\"0\":{\"281\":1},\"1\":{\"2372\":1}}],[\"并及时报警\",{\"1\":{\"192\":1}}],[\"并监控服务器的运行数据\",{\"1\":{\"190\":1}}],[\"并告知客户端新的服务器地址\",{\"1\":{\"177\":1}}],[\"并保存到\",{\"1\":{\"1747\":1}}],[\"并保存slave端口号\",{\"1\":{\"165\":1}}],[\"并保证数据是同步的\",{\"1\":{\"161\":1}}],[\"并根据需求的变化\",{\"1\":{\"162\":1}}],[\"并将错误信息做标准输出到日志中\",{\"1\":{\"1844\":1}}],[\"并将文件内容写入到自己本地的中继日志relay\",{\"1\":{\"1760\":1}}],[\"并将9200和9300端口映射到本机\",{\"1\":{\"1512\":1}}],[\"并将其存放于\",{\"1\":{\"1504\":1}}],[\"并将其放入缓存中\",{\"1\":{\"283\":2}}],[\"并将数据显示到联想框\",{\"1\":{\"1440\":1}}],[\"并将响应的数据显示到联想框\",{\"1\":{\"1440\":1}}],[\"并将rdb文件拷贝到远程机器中\",{\"1\":{\"138\":1}}],[\"并将结果传递给下一个阶段\",{\"1\":{\"95\":1}}],[\"并且准备运行\",{\"1\":{\"3245\":1}}],[\"并且这些对象不相等\",{\"1\":{\"2975\":1}}],[\"并且确保相等的对象具有相同的hashcode\",{\"1\":{\"2393\":1}}],[\"并且最多只能包含一个null元素\",{\"1\":{\"2361\":1}}],[\"并且有nohup\",{\"1\":{\"1844\":1}}],[\"并且删除老版本mysql的文件和库\",{\"1\":{\"1778\":1}}],[\"并且进行相应配置的设置\",{\"1\":{\"1632\":1}}],[\"并且将容器内的oracle目录\",{\"1\":{\"1569\":1}}],[\"并且版本为latest的镜像来启动\",{\"1\":{\"1530\":1}}],[\"并且设置了整个虚拟服务器同时最大并发数最多只能100个链接\",{\"1\":{\"1397\":1}}],[\"并且多台服务器可以平均分担负载\",{\"1\":{\"1383\":1}}],[\"并且给出修改示例\",{\"1\":{\"298\":1}}],[\"并且添加\",{\"1\":{\"267\":1}}],[\"并且数据已超时将不再写入文件\",{\"1\":{\"140\":1}}],[\"并且值是不允许重复的\",{\"1\":{\"135\":1}}],[\"并且\",{\"1\":{\"127\":1}}],[\"并按键分区\",{\"1\":{\"125\":1}}],[\"并需要\",{\"1\":{\"125\":1}}],[\"并用二进制日志取代\",{\"1\":{\"125\":2}}],[\"并再次尝试\",{\"1\":{\"125\":1}}],[\">443\",{\"1\":{\"3271\":2}}],[\">4gb\",{\"1\":{\"818\":1,\"852\":1,\"886\":1,\"920\":1}}],[\">80\",{\"1\":{\"3271\":2}}],[\">out\",{\"1\":{\"1844\":1}}],[\">删除<\",{\"1\":{\"1467\":4}}],[\">修改<\",{\"1\":{\"1467\":4}}],[\">专科<\",{\"1\":{\"1464\":1}}],[\">本科<\",{\"1\":{\"1464\":1}}],[\">男\",{\"1\":{\"1464\":1}}],[\">雄起<\",{\"1\":{\"1462\":1}}],[\">加油<\",{\"1\":{\"1462\":1}}],[\">深圳<\",{\"1\":{\"1462\":1}}],[\">广州<\",{\"1\":{\"1462\":1}}],[\">上海<\",{\"1\":{\"1462\":1}}],[\">上传\",{\"1\":{\"995\":1}}],[\">北京<\",{\"1\":{\"1462\":1}}],[\">女\",{\"1\":{\"1459\":1,\"1464\":1}}],[\">div3<\",{\"1\":{\"1455\":1}}],[\">div2<\",{\"1\":{\"1455\":1,\"1458\":1}}],[\">div1<\",{\"1\":{\"1455\":1}}],[\">databasescron\",{\"1\":{\"153\":1}}],[\">我是div<\",{\"1\":{\"1447\":1,\"1461\":1,\"1463\":1}}],[\"><br\",{\"1\":{\"1440\":1}}],[\"><\",{\"1\":{\"1431\":1,\"1433\":2,\"1434\":2,\"1435\":2,\"1440\":2,\"1447\":1,\"1450\":1,\"1455\":1,\"1456\":1,\"1457\":1,\"1458\":1,\"1459\":1,\"1461\":1,\"1462\":2,\"1463\":1,\"1464\":1,\"1467\":5,\"1469\":1}}],[\">用户名可用<\",{\"1\":{\"1431\":1}}],[\">用户名已注册<\",{\"1\":{\"1431\":1}}],[\">>header<<\",{\"1\":{\"3282\":1}}],[\">>=\",{\"1\":{\"2113\":1}}],[\">>\",{\"1\":{\"1426\":1,\"1610\":2,\"2112\":1,\"2318\":2,\"2355\":1,\"2438\":2,\"2495\":1,\"3086\":2}}],[\">>>=\",{\"1\":{\"2113\":1}}],[\">>>\",{\"1\":{\"1196\":1,\"2112\":1,\"2575\":1,\"2580\":1,\"2599\":1}}],[\">=19px\",{\"1\":{\"1442\":1}}],[\">=\",{\"1\":{\"1162\":2,\"1181\":1,\"1203\":1,\"1295\":2,\"1442\":1,\"1443\":2,\"2110\":1,\"2125\":4,\"2161\":1,\"2329\":1,\"2341\":1,\"2439\":1,\"2441\":2,\"2450\":1,\"2494\":1,\"2495\":1,\"2512\":1,\"2573\":1,\"2575\":1,\"2600\":1,\"2601\":2,\"2683\":1,\"2707\":2,\"2873\":2,\"2942\":1,\"3087\":2,\"3208\":3}}],[\">配置pom\",{\"1\":{\"995\":1}}],[\">配置settings\",{\"1\":{\"995\":1}}],[\">生成秘钥\",{\"1\":{\"995\":1}}],[\">gc后使用容量\",{\"1\":{\"774\":2}}],[\">131072k\",{\"1\":{\"774\":2}}],[\">65536k\",{\"1\":{\"774\":2}}],[\">maven\",{\"1\":{\"302\":1}}],[\">该集合与交集不同的部分\",{\"1\":{\"281\":1}}],[\">activeexpirecycle\",{\"1\":{\"153\":1}}],[\">\",{\"1\":{\"112\":4,\"113\":4,\"115\":1,\"156\":1,\"193\":1,\"223\":2,\"269\":2,\"270\":2,\"278\":2,\"282\":1,\"283\":5,\"284\":5,\"287\":2,\"288\":1,\"289\":2,\"290\":1,\"292\":1,\"377\":7,\"416\":2,\"438\":1,\"439\":9,\"440\":1,\"449\":1,\"451\":1,\"456\":1,\"468\":4,\"469\":3,\"473\":1,\"491\":1,\"502\":2,\"521\":1,\"526\":2,\"527\":3,\"529\":1,\"537\":6,\"538\":5,\"543\":7,\"544\":5,\"552\":2,\"553\":4,\"557\":6,\"567\":1,\"575\":2,\"583\":5,\"584\":2,\"609\":1,\"610\":1,\"625\":1,\"626\":2,\"675\":1,\"676\":2,\"677\":1,\"710\":1,\"729\":2,\"746\":2,\"747\":1,\"926\":2,\"936\":3,\"938\":1,\"949\":1,\"956\":1,\"962\":1,\"963\":2,\"998\":2,\"999\":16,\"1002\":1,\"1003\":4,\"1005\":2,\"1040\":2,\"1069\":2,\"1081\":3,\"1123\":2,\"1135\":1,\"1160\":1,\"1161\":1,\"1185\":1,\"1186\":1,\"1190\":1,\"1197\":2,\"1238\":1,\"1253\":1,\"1254\":4,\"1260\":4,\"1266\":1,\"1269\":1,\"1270\":1,\"1314\":1,\"1315\":1,\"1324\":1,\"1325\":2,\"1326\":1,\"1338\":1,\"1373\":1,\"1412\":23,\"1426\":1,\"1431\":6,\"1433\":6,\"1434\":6,\"1435\":6,\"1440\":10,\"1443\":2,\"1444\":2,\"1447\":4,\"1450\":5,\"1455\":3,\"1456\":5,\"1457\":6,\"1458\":3,\"1459\":4,\"1460\":1,\"1461\":5,\"1462\":12,\"1463\":8,\"1464\":8,\"1467\":8,\"1469\":12,\"1505\":3,\"1535\":3,\"1548\":1,\"1564\":26,\"1569\":1,\"1586\":1,\"1641\":1,\"1648\":1,\"1685\":1,\"1697\":1,\"1712\":8,\"1767\":1,\"1798\":2,\"1823\":2,\"1844\":1,\"1869\":2,\"1877\":1,\"1895\":1,\"1949\":1,\"1962\":1,\"2007\":1,\"2012\":2,\"2018\":1,\"2027\":1,\"2042\":5,\"2047\":1,\"2054\":1,\"2059\":1,\"2062\":5,\"2072\":4,\"2078\":2,\"2101\":2,\"2110\":1,\"2114\":1,\"2220\":2,\"2234\":1,\"2269\":1,\"2272\":1,\"2282\":1,\"2291\":1,\"2295\":1,\"2296\":1,\"2314\":3,\"2318\":2,\"2320\":1,\"2326\":1,\"2328\":1,\"2329\":3,\"2340\":1,\"2358\":3,\"2370\":3,\"2371\":1,\"2388\":1,\"2407\":1,\"2408\":5,\"2410\":1,\"2427\":1,\"2436\":1,\"2437\":1,\"2438\":2,\"2439\":1,\"2440\":2,\"2448\":1,\"2452\":1,\"2495\":1,\"2498\":1,\"2522\":2,\"2523\":2,\"2524\":2,\"2525\":2,\"2534\":2,\"2575\":1,\"2578\":1,\"2600\":1,\"2601\":2,\"2632\":1,\"2642\":1,\"2643\":1,\"2655\":2,\"2660\":1,\"2708\":1,\"2709\":1,\"2750\":2,\"2798\":1,\"2873\":2,\"2921\":3,\"2965\":3,\"2968\":4,\"2969\":3,\"2970\":1,\"2971\":1,\"2980\":2,\"2983\":3,\"2984\":1,\"2987\":1,\"2989\":1,\"2999\":5,\"3003\":3,\"3007\":2,\"3035\":2,\"3038\":1,\"3050\":1,\"3053\":9,\"3078\":1,\"3079\":2,\"3082\":1,\"3087\":1,\"3096\":1,\"3097\":2,\"3102\":8,\"3103\":1,\"3104\":1,\"3117\":1,\"3118\":1,\"3137\":1,\"3147\":1,\"3149\":1,\"3150\":3,\"3205\":1,\"3208\":1,\"3209\":1,\"3214\":1,\"3215\":2,\"3217\":3,\"3246\":1,\"3273\":1,\"3282\":1}}],[\"安装新harbor\",{\"0\":{\"3263\":1}}],[\"安装需要的软件包\",{\"1\":{\"3245\":1}}],[\"安装rpm\",{\"0\":{\"1904\":1}}],[\"安装rpm的执行命令\",{\"1\":{\"1636\":1}}],[\"安装根目录下的配置文件\",{\"1\":{\"1780\":1}}],[\"安装软件的路径\",{\"1\":{\"1779\":1}}],[\"安装tree指令\",{\"1\":{\"1779\":1}}],[\"安装服务端\",{\"0\":{\"1770\":1}}],[\"安装客户端\",{\"0\":{\"1769\":1}}],[\"安装包\",{\"1\":{\"1765\":1}}],[\"安装包下载\",{\"1\":{\"263\":1}}],[\"安装yum\",{\"1\":{\"1735\":2}}],[\"安装好相关环境\",{\"0\":{\"1682\":1}}],[\"安装前先安装好docker\",{\"1\":{\"1714\":1}}],[\"安装前可提前安装好所需插件\",{\"1\":{\"1677\":1}}],[\"安装前须知\",{\"0\":{\"1609\":1,\"1741\":1}}],[\"安装k8s\",{\"0\":{\"1637\":1}}],[\"安装k8s插件\",{\"0\":{\"1636\":1}}],[\"安装kafka\",{\"0\":{\"1528\":1}}],[\"安装失败回滚\",{\"0\":{\"1634\":1,\"1638\":1}}],[\"安装过程大概要20分钟左右\",{\"1\":{\"1632\":1}}],[\"安装harbor\",{\"0\":{\"1625\":1,\"1714\":1}}],[\"安装htpasswd工具\",{\"1\":{\"1420\":1}}],[\"安装最新版docker\",{\"1\":{\"1613\":1,\"1673\":1,\"1744\":1}}],[\"安装最新版本\",{\"1\":{\"265\":1}}],[\"安装docker\",{\"0\":{\"1613\":1,\"1673\":1,\"1740\":1,\"1744\":1,\"3248\":1},\"1\":{\"3245\":1}}],[\"安装顺序\",{\"1\":{\"1610\":1}}],[\"安装elasticsearch\",{\"0\":{\"1506\":1}}],[\"安装核心软件包\",{\"0\":{\"1486\":1}}],[\"安装内核\",{\"0\":{\"1482\":1,\"1494\":1}}],[\"安装生成密码工具\",{\"0\":{\"1420\":1}}],[\"安装的nginx路径\",{\"1\":{\"1416\":1}}],[\"安装稳定版本\",{\"1\":{\"265\":1}}],[\"安装你需要的版本的node\",{\"1\":{\"264\":1}}],[\"安装管理node版本工具\",{\"0\":{\"262\":1}}],[\"安装node版本\",{\"1\":{\"263\":1}}],[\"安装node环境\",{\"0\":{\"260\":1}}],[\"安装nginx镜像\",{\"0\":{\"215\":1}}],[\"安装mongodb的rpm包时会提示缺少依赖包\",{\"1\":{\"1738\":1}}],[\"安装mongodb\",{\"0\":{\"221\":1}}],[\"安装mysql服务\",{\"1\":{\"120\":1}}],[\"安装\",{\"0\":{\"218\":1,\"1521\":1,\"1582\":1,\"1785\":1},\"1\":{\"264\":2,\"1476\":2,\"1628\":1,\"1635\":1,\"1717\":1,\"1779\":1,\"3246\":1}}],[\"安装完成后\",{\"1\":{\"1747\":1}}],[\"安装完成后会提示访问地址是多少\",{\"1\":{\"1632\":1}}],[\"安装完成之后\",{\"1\":{\"112\":1}}],[\"安装完以后开启crontab服务\",{\"1\":{\"1504\":1}}],[\"安装完mysql服务后迫不及待的开启mysql服务\",{\"1\":{\"121\":1}}],[\"安全实现和性能优化等关键技术点\",{\"1\":{\"3230\":1}}],[\"安全机制以及java\",{\"1\":{\"3201\":1}}],[\"安全最佳实践\",{\"1\":{\"3010\":1}}],[\"安全检查\",{\"1\":{\"3009\":1}}],[\"安全管理器\",{\"1\":{\"2993\":1}}],[\"安全管理器对反射的限制示例\",{\"1\":{\"2990\":1}}],[\"安全管理器对反射的限制\",{\"0\":{\"2990\":1}}],[\"安全问题\",{\"1\":{\"2974\":1}}],[\"安全考虑\",{\"1\":{\"2960\":1}}],[\"安全的代码至关重要\",{\"1\":{\"3031\":1}}],[\"安全的反射调用示例\",{\"1\":{\"2993\":1}}],[\"安全的向下转型\",{\"1\":{\"2749\":1}}],[\"安全的应用\",{\"1\":{\"447\":1}}],[\"安全失败\",{\"1\":{\"2530\":1}}],[\"安全添加\",{\"1\":{\"2507\":1}}],[\"安全删除\",{\"1\":{\"2370\":1,\"2382\":1,\"2407\":1,\"2420\":1,\"2448\":1,\"2507\":2}}],[\"安全比较\",{\"1\":{\"2255\":1}}],[\"安全保障\",{\"1\":{\"2252\":1}}],[\"安全规约\",{\"0\":{\"2064\":1}}],[\"安全一点的方法就是修改防火墙规则\",{\"1\":{\"1788\":1}}],[\"安全访问\",{\"1\":{\"1560\":1}}],[\"安全风险防范\",{\"1\":{\"2993\":1}}],[\"安全风险\",{\"0\":{\"1275\":1}}],[\"安全集合大小\",{\"1\":{\"1186\":1}}],[\"安全\",{\"1\":{\"1046\":1,\"1501\":1,\"2207\":1,\"2275\":2}}],[\"安全等运行时环境\",{\"1\":{\"689\":1}}],[\"安全增强\",{\"0\":{\"481\":1}}],[\"安全第一\",{\"1\":{\"454\":1}}],[\"安全配置\",{\"1\":{\"451\":1,\"456\":1}}],[\"安全认证\",{\"0\":{\"451\":1}}],[\"安全认证和授权等\",{\"1\":{\"447\":1}}],[\"安全性原则\",{\"1\":{\"1959\":1,\"1972\":1,\"1985\":1}}],[\"安全性\",{\"1\":{\"1046\":1,\"1048\":1,\"1153\":1,\"1365\":1,\"2103\":1,\"2192\":1,\"2300\":1,\"2336\":1,\"3123\":1}}],[\"安全性增强\",{\"1\":{\"495\":1}}],[\"安全性高\",{\"1\":{\"114\":1,\"2356\":1}}],[\"安全性不高\",{\"1\":{\"114\":1}}],[\"安全套接字层\",{\"1\":{\"114\":1}}],[\"安全地执行mongodb的危险命令可以从以下几个方面入手\",{\"1\":{\"95\":1}}],[\"0vcqut4qkh3s0rfze5wcm1tu2jfzdzxatzzrfnxcklpzez5dfn5z1puvmk2cxfkymxxodzrq1y1u\",{\"1\":{\"3273\":1}}],[\"0为版本好\",{\"1\":{\"3262\":1}}],[\"0ms\",{\"1\":{\"3002\":1}}],[\"0x7fffffff\",{\"1\":{\"3086\":1}}],[\"0xff\",{\"1\":{\"2873\":1}}],[\"0xcafebabe\",{\"1\":{\"724\":1}}],[\"0命令行导出文件\",{\"1\":{\"1823\":1}}],[\"0该方式远程连不上\",{\"1\":{\"1819\":1}}],[\"0fdf2b4c26d3\",{\"1\":{\"1798\":1}}],[\"0表示关闭\",{\"1\":{\"1739\":1}}],[\"0表示使用默认值\",{\"1\":{\"232\":7,\"1684\":7}}],[\"0=``off`\",{\"1\":{\"1739\":1}}],[\"0=自动注册\",{\"1\":{\"1687\":1}}],[\"0=jdbc\",{\"1\":{\"235\":1}}],[\"0+\",{\"1\":{\"1578\":1}}],[\"0将oreclejdk打进去\",{\"1\":{\"1536\":1}}],[\"0不能用没有字体库\",{\"1\":{\"1536\":1}}],[\"0不是允许的值\",{\"1\":{\"125\":1}}],[\"0adf1765ac08\",{\"1\":{\"1513\":1}}],[\"0a000\",{\"1\":{\"125\":5}}],[\"09\",{\"1\":{\"1469\":1,\"1764\":1}}],[\"07\",{\"1\":{\"1469\":1}}],[\"05\",{\"1\":{\"1469\":1,\"1513\":1,\"1684\":24}}],[\"03\",{\"1\":{\"1469\":1,\"1617\":1,\"1618\":1,\"1687\":4,\"1749\":1,\"1750\":1,\"1793\":1,\"3256\":1}}],[\"0或http\",{\"1\":{\"1412\":1}}],[\"02x\",{\"1\":{\"3215\":1}}],[\"02t05\",{\"1\":{\"1698\":1}}],[\"02110\",{\"1\":{\"1578\":1}}],[\"02\",{\"1\":{\"774\":1,\"997\":8,\"1469\":1,\"1527\":1}}],[\"02000\",{\"1\":{\"125\":1}}],[\"0<\",{\"1\":{\"584\":1,\"926\":1,\"928\":1,\"936\":2,\"957\":1,\"999\":1,\"1003\":1,\"1016\":1,\"1017\":1,\"1018\":1,\"1564\":2,\"2018\":1}}],[\"0正式发布\",{\"1\":{\"580\":1}}],[\"0到servlet\",{\"1\":{\"578\":1}}],[\"0发布\",{\"1\":{\"574\":1,\"577\":1}}],[\"0123450\",{\"1\":{\"774\":2}}],[\"01t12\",{\"1\":{\"774\":1}}],[\"01\",{\"1\":{\"286\":1,\"545\":2,\"774\":2,\"1469\":2,\"1513\":1,\"3282\":1}}],[\"01000\",{\"1\":{\"125\":5}}],[\"0版本开始支持\",{\"1\":{\"1564\":1}}],[\"0版本\",{\"1\":{\"266\":2,\"1821\":1}}],[\"040088z\",{\"1\":{\"1513\":1}}],[\"04\",{\"1\":{\"249\":1,\"1469\":1,\"3246\":1}}],[\"0中默认策略\",{\"1\":{\"157\":1}}],[\"08\",{\"1\":{\"286\":1,\"1469\":1}}],[\"08s01\",{\"1\":{\"125\":20}}],[\"08004\",{\"1\":{\"125\":2}}],[\"0011\",{\"1\":{\"2112\":4}}],[\"001\",{\"1\":{\"1920\":1}}],[\"0001\",{\"1\":{\"2112\":1}}],[\"000\",{\"1\":{\"1250\":2,\"2524\":2,\"2986\":2}}],[\"0000\",{\"1\":{\"2112\":5}}],[\"000026\",{\"1\":{\"113\":1}}],[\"000022\",{\"1\":{\"110\":1}}],[\"000004\",{\"1\":{\"102\":1}}],[\"000003\",{\"1\":{\"102\":1}}],[\"00\",{\"1\":{\"121\":1,\"774\":2,\"1684\":36,\"1907\":1}}],[\"06\",{\"1\":{\"113\":1,\"1469\":1,\"1536\":1,\"1677\":3}}],[\"0\",{\"0\":{\"2644\":1,\"3333\":1},\"1\":{\"110\":1,\"113\":2,\"121\":1,\"125\":1,\"130\":1,\"153\":1,\"216\":1,\"232\":12,\"233\":1,\"234\":3,\"236\":2,\"242\":4,\"248\":2,\"249\":3,\"250\":5,\"263\":1,\"264\":2,\"266\":2,\"284\":5,\"285\":4,\"286\":4,\"288\":1,\"289\":1,\"294\":3,\"429\":1,\"439\":2,\"473\":1,\"502\":2,\"543\":1,\"552\":2,\"557\":1,\"567\":1,\"574\":1,\"575\":1,\"584\":8,\"585\":1,\"593\":1,\"625\":1,\"626\":2,\"658\":1,\"659\":1,\"663\":1,\"675\":3,\"676\":5,\"677\":2,\"693\":1,\"710\":1,\"724\":1,\"729\":2,\"746\":2,\"747\":2,\"773\":1,\"774\":2,\"936\":2,\"957\":1,\"999\":3,\"1003\":1,\"1016\":1,\"1017\":1,\"1018\":1,\"1037\":2,\"1041\":2,\"1043\":4,\"1044\":1,\"1053\":1,\"1055\":6,\"1056\":4,\"1087\":2,\"1092\":5,\"1094\":9,\"1095\":7,\"1123\":2,\"1125\":1,\"1126\":1,\"1139\":1,\"1150\":1,\"1151\":1,\"1160\":3,\"1161\":4,\"1162\":6,\"1164\":2,\"1165\":1,\"1166\":3,\"1170\":7,\"1179\":2,\"1181\":4,\"1186\":1,\"1191\":1,\"1193\":2,\"1194\":1,\"1203\":1,\"1209\":1,\"1221\":1,\"1224\":2,\"1228\":1,\"1232\":2,\"1237\":1,\"1238\":4,\"1243\":1,\"1250\":3,\"1253\":2,\"1264\":3,\"1280\":2,\"1295\":3,\"1301\":1,\"1315\":1,\"1321\":2,\"1324\":3,\"1326\":3,\"1332\":2,\"1337\":1,\"1338\":1,\"1355\":4,\"1360\":2,\"1369\":2,\"1371\":2,\"1372\":2,\"1373\":1,\"1390\":4,\"1405\":2,\"1406\":2,\"1432\":1,\"1440\":3,\"1443\":2,\"1444\":1,\"1447\":1,\"1449\":1,\"1450\":1,\"1453\":2,\"1455\":1,\"1456\":1,\"1457\":1,\"1458\":5,\"1459\":2,\"1461\":1,\"1462\":1,\"1463\":1,\"1464\":1,\"1467\":1,\"1469\":3,\"1474\":1,\"1478\":4,\"1483\":5,\"1484\":3,\"1490\":2,\"1495\":3,\"1498\":5,\"1499\":5,\"1511\":4,\"1513\":3,\"1516\":1,\"1517\":3,\"1520\":3,\"1523\":6,\"1526\":1,\"1527\":10,\"1530\":8,\"1532\":2,\"1533\":2,\"1535\":4,\"1536\":4,\"1548\":1,\"1551\":1,\"1552\":1,\"1557\":2,\"1559\":1,\"1560\":6,\"1564\":1,\"1569\":13,\"1577\":2,\"1578\":2,\"1579\":1,\"1581\":2,\"1582\":1,\"1583\":5,\"1586\":8,\"1599\":1,\"1600\":1,\"1610\":1,\"1638\":3,\"1641\":6,\"1642\":2,\"1644\":2,\"1648\":1,\"1660\":10,\"1667\":2,\"1672\":1,\"1684\":12,\"1685\":1,\"1687\":20,\"1714\":1,\"1724\":8,\"1731\":1,\"1734\":11,\"1763\":4,\"1764\":13,\"1780\":1,\"1781\":1,\"1782\":3,\"1783\":3,\"1787\":8,\"1788\":4,\"1794\":1,\"1799\":1,\"1833\":5,\"1851\":1,\"1857\":1,\"1875\":2,\"1877\":1,\"1885\":2,\"1887\":45,\"1895\":2,\"1897\":2,\"1907\":1,\"1916\":2,\"1949\":2,\"2012\":1,\"2035\":2,\"2039\":1,\"2042\":1,\"2058\":2,\"2078\":5,\"2079\":1,\"2099\":1,\"2105\":1,\"2109\":1,\"2113\":6,\"2115\":1,\"2128\":1,\"2129\":1,\"2130\":1,\"2132\":1,\"2133\":1,\"2134\":1,\"2144\":1,\"2146\":1,\"2147\":1,\"2158\":2,\"2159\":2,\"2161\":2,\"2167\":11,\"2169\":2,\"2170\":2,\"2173\":3,\"2174\":3,\"2180\":3,\"2181\":6,\"2183\":6,\"2196\":1,\"2202\":2,\"2205\":1,\"2207\":1,\"2212\":1,\"2214\":2,\"2228\":1,\"2234\":2,\"2240\":1,\"2265\":2,\"2269\":1,\"2271\":1,\"2272\":4,\"2276\":3,\"2280\":2,\"2282\":2,\"2288\":2,\"2289\":1,\"2291\":3,\"2292\":1,\"2294\":2,\"2295\":4,\"2296\":3,\"2311\":2,\"2318\":3,\"2324\":2,\"2325\":1,\"2327\":14,\"2328\":2,\"2329\":1,\"2341\":1,\"2348\":1,\"2356\":1,\"2386\":1,\"2400\":4,\"2409\":3,\"2423\":1,\"2427\":1,\"2436\":3,\"2437\":1,\"2438\":3,\"2439\":1,\"2440\":6,\"2441\":1,\"2449\":3,\"2450\":1,\"2452\":3,\"2466\":1,\"2468\":3,\"2490\":1,\"2494\":1,\"2495\":2,\"2496\":1,\"2498\":2,\"2505\":1,\"2506\":1,\"2509\":1,\"2512\":1,\"2513\":2,\"2522\":3,\"2524\":2,\"2534\":1,\"2536\":1,\"2549\":1,\"2555\":1,\"2573\":2,\"2574\":4,\"2575\":2,\"2599\":1,\"2600\":2,\"2601\":7,\"2604\":2,\"2614\":1,\"2632\":1,\"2642\":1,\"2655\":5,\"2684\":1,\"2704\":3,\"2707\":2,\"2708\":2,\"2709\":2,\"2710\":2,\"2711\":2,\"2712\":4,\"2715\":1,\"2716\":1,\"2721\":1,\"2724\":1,\"2727\":1,\"2750\":2,\"2809\":1,\"2819\":1,\"2831\":1,\"2833\":1,\"2837\":2,\"2843\":1,\"2844\":1,\"2849\":2,\"2855\":1,\"2856\":1,\"2857\":2,\"2866\":1,\"2867\":1,\"2868\":2,\"2873\":10,\"2878\":2,\"2885\":1,\"2892\":1,\"2893\":1,\"2897\":2,\"2909\":1,\"2916\":1,\"2917\":1,\"2921\":4,\"2942\":1,\"2947\":2,\"2986\":2,\"2999\":1,\"3002\":1,\"3003\":1,\"3005\":1,\"3007\":1,\"3017\":1,\"3023\":1,\"3024\":2,\"3025\":3,\"3035\":1,\"3039\":2,\"3046\":1,\"3065\":4,\"3066\":3,\"3070\":1,\"3079\":2,\"3086\":3,\"3087\":5,\"3097\":1,\"3104\":1,\"3117\":1,\"3118\":2,\"3126\":2,\"3134\":1,\"3136\":1,\"3145\":1,\"3165\":1,\"3180\":5,\"3190\":17,\"3205\":1,\"3206\":4,\"3212\":2,\"3215\":1,\"3218\":4,\"3237\":4,\"3246\":9,\"3248\":1,\"3262\":2,\"3263\":1,\"3267\":2,\"3269\":1,\"3270\":2,\"3271\":8,\"3275\":18,\"3276\":2,\"3282\":13}}],[\"八进制\",{\"1\":{\"2905\":1}}],[\"八\",{\"0\":{\"104\":1,\"112\":1,\"1647\":1,\"1788\":1}}],[\"七个阶段\",{\"1\":{\"741\":1}}],[\"七\",{\"0\":{\"103\":1,\"111\":1,\"1639\":1,\"1787\":1}}],[\"五月\",{\"1\":{\"2126\":1}}],[\"五\",{\"0\":{\"102\":1,\"110\":1,\"123\":1,\"463\":1,\"1424\":1,\"1553\":1,\"1602\":1,\"1625\":1,\"1675\":1,\"1714\":1,\"1785\":1,\"2390\":1,\"2425\":1,\"2453\":1,\"2482\":1,\"2510\":1,\"2540\":1,\"2564\":1,\"2588\":1,\"2616\":1,\"2643\":1,\"2672\":1}}],[\"四次挥手释放连接\",{\"1\":{\"3061\":1}}],[\"四次挥手过程\",{\"1\":{\"1311\":1,\"3070\":1}}],[\"四月\",{\"1\":{\"2126\":1}}],[\"四\",{\"0\":{\"101\":1,\"109\":1,\"122\":1,\"462\":1,\"994\":1,\"1365\":1,\"1423\":1,\"1496\":1,\"1528\":1,\"1549\":1,\"1597\":1,\"1622\":1,\"1674\":1,\"1713\":1,\"1754\":1,\"1784\":1,\"1902\":1,\"2380\":1,\"2417\":1,\"2447\":1,\"2474\":1,\"2504\":1,\"2531\":1,\"2560\":1,\"2583\":1,\"2611\":1,\"2638\":1,\"2667\":1},\"1\":{\"3246\":1}}],[\"刷新与关闭\",{\"1\":{\"2872\":1}}],[\"刷新此输出流并强制写出所有缓冲的输出字符\",{\"1\":{\"2854\":1}}],[\"刷新此输出流并强制写出所有缓冲的输出字节\",{\"1\":{\"2842\":1}}],[\"刷新字符编码集\",{\"0\":{\"1831\":1}}],[\"刷新配置\",{\"1\":{\"1620\":1,\"1621\":1,\"1752\":1,\"1753\":1}}],[\"刷新权限\",{\"0\":{\"230\":1,\"1820\":1},\"1\":{\"1821\":1}}],[\"刷新数据有效期\",{\"1\":{\"191\":1}}],[\"刷新\",{\"1\":{\"100\":2,\"108\":1,\"1775\":1}}],[\"三种通讯方式\",{\"0\":{\"3254\":1}}],[\"三大特性\",{\"0\":{\"2729\":1}}],[\"三月\",{\"1\":{\"2078\":1,\"2126\":1}}],[\"三次握手过程\",{\"1\":{\"1311\":1}}],[\"三个整数相加\",{\"1\":{\"2741\":1,\"2786\":1}}],[\"三个注解所修饰\",{\"1\":{\"463\":1}}],[\"三个阶段\",{\"0\":{\"164\":1}}],[\"三部分的内容都分别单独经过了\",{\"1\":{\"303\":1}}],[\"三部分组成\",{\"1\":{\"303\":1}}],[\"三\",{\"0\":{\"100\":1,\"108\":1,\"116\":1,\"121\":1,\"395\":1,\"408\":1,\"420\":1,\"431\":1,\"442\":1,\"453\":1,\"461\":1,\"993\":1,\"1361\":1,\"1422\":1,\"1428\":1,\"1485\":1,\"1504\":1,\"1521\":1,\"1548\":1,\"1587\":1,\"1592\":1,\"1616\":1,\"1673\":1,\"1689\":1,\"1698\":1,\"1699\":1,\"1704\":1,\"1748\":1,\"1783\":1,\"1900\":1,\"2374\":1,\"2411\":1,\"2442\":1,\"2469\":1,\"2499\":1,\"2526\":1,\"2556\":1,\"2579\":1,\"2606\":1,\"2633\":1,\"2662\":1,\"3250\":1,\"3257\":1},\"1\":{\"3246\":1}}],[\"gxxqullqzhmmuzsevhpavzen2ftctvodhnwec9qczbbuuo3r2dfcjmxqudrcmf4s2s0stvcn1hby\",{\"1\":{\"3273\":1}}],[\"g93dnvhzkm0ynr3zmhhudbpr295n1u2cjbjk0jzeaozzctuvdbec3zwovjwv1bdogzcdghpzmjqn\",{\"1\":{\"3273\":1}}],[\"gnyckx5yzjsr081rhkrsxrlm28wsxdrrefpqmdovkhroejbzjhfckjbtunbcvf3rhdzrfzsmfrbu\",{\"1\":{\"3273\":1}}],[\"gnotwpjdwppreuyturzmu9uvtbxagnotxpjd09erxpnrfkxt1rvmfdqqtdnund3r2dzrfzruutfe\",{\"1\":{\"3273\":1}}],[\"gnu\",{\"1\":{\"1578\":3}}],[\"gnupg<\",{\"1\":{\"998\":1}}],[\"gnupg\",{\"1\":{\"996\":1}}],[\"gb2312\",{\"1\":{\"2881\":1}}],[\"gbk编码文件写入成功\",{\"1\":{\"2879\":1}}],[\"gbk等\",{\"1\":{\"2877\":1}}],[\"gbk\",{\"1\":{\"2861\":2,\"2878\":2,\"2879\":2,\"2880\":2,\"2881\":1,\"2885\":1}}],[\"gbkfile\",{\"1\":{\"2861\":2}}],[\"g表示全局\",{\"1\":{\"1857\":1}}],[\"gssapi\",{\"1\":{\"1738\":1}}],[\"gg\",{\"1\":{\"1731\":1,\"1857\":1}}],[\"glue代码初始化\",{\"1\":{\"1687\":1}}],[\"glue更新时间\",{\"1\":{\"1687\":1}}],[\"glue备注\",{\"1\":{\"1687\":2}}],[\"glue源代码\",{\"1\":{\"1687\":2}}],[\"glue类型\",{\"1\":{\"1687\":2}}],[\"globalexceptionhandler\",{\"1\":{\"429\":1,\"2956\":2}}],[\"global来设置它\",{\"1\":{\"125\":1}}],[\"global一起使用\",{\"1\":{\"125\":1}}],[\"global\",{\"1\":{\"99\":1,\"112\":1,\"113\":1,\"115\":1,\"119\":1,\"125\":2,\"264\":2,\"327\":1,\"999\":2,\"1774\":2,\"1822\":1,\"1826\":1,\"3282\":1}}],[\"gid\",{\"1\":{\"1503\":1}}],[\"git管理\",{\"1\":{\"2029\":1}}],[\"gitlab\",{\"1\":{\"2024\":1}}],[\"gitee\",{\"1\":{\"1686\":1}}],[\"git<\",{\"1\":{\"999\":2}}],[\"github项目\",{\"1\":{\"3261\":1}}],[\"github等都基于它来构建自己的搜索引擎\",{\"1\":{\"1507\":1}}],[\"github提供免费个人域名io\",{\"1\":{\"992\":1}}],[\"githubusercontent\",{\"1\":{\"264\":3,\"3276\":1}}],[\"github\",{\"0\":{\"2020\":1},\"1\":{\"247\":1,\"264\":1,\"280\":1,\"992\":1,\"993\":3,\"994\":1,\"999\":6,\"1004\":1,\"1443\":1,\"1444\":2,\"1623\":1,\"1626\":1,\"1635\":2,\"1656\":1,\"1714\":2,\"1715\":1,\"1747\":1,\"1755\":2,\"1984\":1,\"2020\":1,\"2024\":1,\"3100\":1,\"3246\":2,\"3248\":1,\"3261\":1}}],[\"git\",{\"1\":{\"247\":2,\"264\":3,\"280\":2,\"999\":2,\"1486\":1,\"1656\":2,\"1711\":2}}],[\"gz文件和\",{\"1\":{\"1782\":1}}],[\"gz\",{\"1\":{\"1462\":1,\"1488\":1,\"1729\":1,\"1779\":3,\"1781\":1,\"1782\":1,\"1898\":2,\"3100\":2,\"3246\":3}}],[\"gzip\",{\"1\":{\"216\":1,\"1595\":1,\"1779\":1}}],[\"gpublic\",{\"1\":{\"2287\":1}}],[\"gpgcheck=0\",{\"1\":{\"3273\":3}}],[\"gpgcheck=1\",{\"1\":{\"3273\":2}}],[\"gpgkey=https\",{\"1\":{\"3273\":2}}],[\"gpg插件\",{\"1\":{\"999\":1}}],[\"gpg<\",{\"1\":{\"998\":1}}],[\"gpg\",{\"1\":{\"997\":7,\"998\":4,\"999\":1,\"1474\":1,\"3273\":4}}],[\"gpl\",{\"1\":{\"564\":1,\"1578\":1}}],[\"g1关注延迟\",{\"1\":{\"809\":1,\"843\":1,\"877\":1,\"911\":1}}],[\"g1收集器配置\",{\"0\":{\"805\":1,\"839\":1,\"873\":1,\"907\":1}}],[\"g1收集器目标最大停顿时间\",{\"1\":{\"797\":1,\"831\":1,\"865\":1,\"899\":1}}],[\"g1收集器的优势\",{\"1\":{\"784\":1}}],[\"g1收集器的region化内存布局\",{\"0\":{\"778\":1}}],[\"g1收集器与cms收集器相比有哪些优势\",{\"1\":{\"784\":1}}],[\"g1收集器将堆内存划分为多个大小相等的独立region\",{\"1\":{\"778\":1}}],[\"g1\",{\"1\":{\"770\":1,\"805\":1,\"839\":1,\"873\":1,\"907\":1}}],[\"gcm\",{\"1\":{\"3237\":1}}],[\"gcutil\",{\"1\":{\"3100\":1}}],[\"gc和编译情况\",{\"1\":{\"3100\":1}}],[\"gc策略\",{\"1\":{\"3091\":1}}],[\"gc可能回收键导致条目被移除\",{\"1\":{\"2694\":1}}],[\"gc可能会导致条目被移除\",{\"1\":{\"2689\":1}}],[\"gc影响\",{\"1\":{\"2689\":1}}],[\"gc后缓存中获取值\",{\"1\":{\"2685\":1}}],[\"gc后进行内存整理\",{\"1\":{\"783\":1}}],[\"gcc\",{\"1\":{\"1486\":1,\"1779\":1}}],[\"gccollectorinfo\",{\"1\":{\"772\":1}}],[\"gcdemo\",{\"1\":{\"1150\":1}}],[\"gc频率和耗时\",{\"1\":{\"810\":1,\"844\":1,\"878\":1,\"912\":1}}],[\"gctimeratio=<n>\",{\"1\":{\"797\":1,\"831\":1,\"865\":1,\"899\":1}}],[\"gctriggerdemo\",{\"1\":{\"773\":1}}],[\"gc调优参数\",{\"0\":{\"797\":1,\"831\":1,\"865\":1,\"899\":1}}],[\"gc日志参数\",{\"0\":{\"796\":1,\"830\":1,\"864\":1,\"898\":1}}],[\"gc日志示例分析\",{\"1\":{\"774\":1}}],[\"gc相关参数\",{\"0\":{\"794\":1,\"828\":1,\"862\":1,\"896\":1}}],[\"gc的频率\",{\"1\":{\"784\":1}}],[\"gc的主要战场\",{\"1\":{\"707\":1}}],[\"gc耗时\",{\"1\":{\"774\":1}}],[\"gc\",{\"0\":{\"780\":1},\"1\":{\"759\":1,\"762\":2,\"773\":1,\"774\":2,\"780\":1,\"784\":3,\"798\":1,\"805\":1,\"806\":1,\"818\":1,\"832\":1,\"839\":1,\"840\":1,\"852\":1,\"866\":1,\"873\":1,\"874\":1,\"886\":1,\"900\":1,\"907\":1,\"908\":1,\"920\":1,\"1558\":1,\"2440\":2,\"2497\":2,\"2685\":1}}],[\"gc分代年龄\",{\"1\":{\"720\":1}}],[\"gc前检查老年代最大可用连续空间是否大于新生代对象总大小\",{\"1\":{\"708\":1}}],[\"gauge\",{\"1\":{\"3097\":2}}],[\"gave\",{\"0\":{\"1666\":1}}],[\"gav信息\",{\"1\":{\"999\":1}}],[\"gapped\",{\"1\":{\"1609\":1}}],[\"garbage\",{\"0\":{\"476\":1},\"1\":{\"759\":1,\"770\":1,\"778\":1}}],[\"gateway=\",{\"1\":{\"3266\":4}}],[\"gateway网关服务\",{\"1\":{\"1559\":1}}],[\"gatewayapitestconfig\",{\"1\":{\"292\":2}}],[\"gateway\",{\"1\":{\"280\":8,\"285\":2,\"1548\":1,\"1559\":1,\"1650\":9,\"1656\":1,\"1711\":1,\"1713\":9,\"3256\":1}}],[\"gunzip\",{\"1\":{\"1779\":1}}],[\"guide\",{\"1\":{\"994\":3,\"995\":1}}],[\"guidelines使用\",{\"1\":{\"298\":1}}],[\"guidelines\",{\"0\":{\"296\":1},\"1\":{\"297\":1}}],[\"guava库提供的并发引用映射实现\",{\"1\":{\"2697\":1}}],[\"guava库初始化\",{\"1\":{\"1178\":1}}],[\"guava<\",{\"1\":{\"567\":1}}],[\"guava\",{\"1\":{\"490\":1,\"585\":2}}],[\"guest\",{\"1\":{\"257\":2}}],[\"gmt\",{\"1\":{\"232\":2,\"1684\":2}}],[\"go\",{\"1\":{\"2325\":1}}],[\"gonna\",{\"1\":{\"2013\":1}}],[\"gone\",{\"1\":{\"125\":1}}],[\"goharbor\",{\"1\":{\"1626\":1,\"1715\":1,\"3261\":2}}],[\"gov\",{\"1\":{\"1094\":1,\"1907\":1,\"3190\":1,\"3218\":4}}],[\"goals>\",{\"1\":{\"999\":3,\"1003\":1,\"1005\":1,\"2018\":1}}],[\"goal>\",{\"1\":{\"999\":3,\"1005\":1,\"2018\":1}}],[\"gosling选择的\",{\"1\":{\"738\":1}}],[\"google开发的二进制协议\",{\"1\":{\"3085\":1}}],[\"google开源项目guava中的ratelimiter使用的就是令牌桶控制算法\",{\"1\":{\"1400\":1}}],[\"google\",{\"1\":{\"490\":1,\"567\":1,\"585\":1,\"1849\":1}}],[\"goto可能导致代码流程混乱\",{\"1\":{\"2814\":1}}],[\"goto语句也可能会导致一些难以发现的错误\",{\"1\":{\"2138\":1}}],[\"goto语句可以跳转到程序的任何位置\",{\"1\":{\"2138\":1}}],[\"goto\",{\"1\":{\"125\":1,\"2081\":1,\"2136\":1}}],[\"got\",{\"1\":{\"125\":1,\"3282\":1}}],[\"grow\",{\"1\":{\"2318\":2,\"2437\":1,\"2438\":1,\"2573\":1}}],[\"groupedbycity\",{\"1\":{\"2329\":2}}],[\"group`\",{\"1\":{\"1687\":7}}],[\"group<\",{\"1\":{\"1016\":1,\"1017\":1,\"1018\":1}}],[\"groupid\",{\"1\":{\"924\":1,\"937\":2,\"993\":1}}],[\"groupid>\",{\"1\":{\"281\":1,\"307\":1,\"394\":3,\"416\":3,\"428\":1,\"438\":2,\"439\":2,\"440\":2,\"449\":1,\"451\":1,\"456\":1,\"567\":1,\"584\":2,\"711\":1,\"924\":1,\"926\":1,\"928\":2,\"936\":3,\"938\":1,\"941\":1,\"953\":2,\"954\":1,\"956\":1,\"957\":1,\"963\":2,\"999\":5,\"1003\":2,\"1005\":1,\"1016\":2,\"1017\":1,\"1018\":1,\"1564\":2,\"2018\":1,\"3097\":1,\"3104\":1,\"3147\":1}}],[\"groupingby\",{\"1\":{\"543\":1,\"2329\":1}}],[\"groupingbyconcurrent\",{\"1\":{\"269\":1,\"272\":1}}],[\"groups\",{\"1\":{\"125\":1,\"543\":1}}],[\"group列\",{\"1\":{\"125\":1}}],[\"group\",{\"1\":{\"122\":2,\"125\":6,\"232\":7,\"992\":1,\"1020\":1,\"1111\":1,\"1332\":1,\"1648\":6,\"1649\":6,\"1650\":6,\"1684\":7,\"1685\":6,\"1688\":6,\"1713\":6,\"1833\":2,\"1882\":1,\"3125\":1}}],[\"grpclogclientappender\",{\"1\":{\"1564\":1}}],[\"grpc\",{\"1\":{\"1564\":3,\"2010\":1}}],[\"grpc协议\",{\"1\":{\"1538\":1}}],[\"grpc等底层通信\",{\"1\":{\"1347\":1}}],[\"grub2\",{\"1\":{\"1477\":1,\"1478\":4,\"1484\":2,\"1495\":2}}],[\"greater\",{\"1\":{\"1949\":1}}],[\"grep\",{\"0\":{\"1871\":1},\"1\":{\"1475\":1,\"1483\":1,\"1498\":1,\"1499\":1,\"1504\":1,\"1610\":1,\"1671\":1,\"1723\":1,\"1741\":1,\"1773\":1,\"1780\":1,\"1786\":1,\"1811\":1,\"1835\":1,\"1838\":4,\"1840\":1,\"1856\":2,\"1871\":7,\"1892\":1,\"3096\":1,\"3099\":2,\"3255\":1,\"3282\":1}}],[\"green\",{\"1\":{\"1431\":1,\"1527\":4,\"2144\":1}}],[\"grafana大盘监控整体网络健康度\",{\"1\":{\"3111\":1}}],[\"grape\",{\"1\":{\"2408\":1,\"2660\":2}}],[\"gradle构建文件示例\",{\"1\":{\"585\":1}}],[\"gradle\",{\"0\":{\"585\":1},\"1\":{\"510\":1}}],[\"grants\",{\"1\":{\"125\":1,\"1817\":1}}],[\"grant的主机或用户参量过长\",{\"1\":{\"125\":1}}],[\"grant\",{\"1\":{\"100\":2,\"108\":1,\"125\":7,\"228\":1,\"1573\":1,\"1577\":1,\"1578\":1,\"1775\":1,\"1821\":2}}],[\"gt\",{\"1\":{\"1458\":2,\"2110\":1}}],[\"gtid\",{\"1\":{\"122\":1}}],[\"gtjy1\",{\"1\":{\"110\":1}}],[\"ge\",{\"1\":{\"2110\":1}}],[\"gender2\",{\"1\":{\"1464\":2}}],[\"gender1\",{\"1\":{\"1464\":1}}],[\"gender\",{\"1\":{\"1459\":2,\"1464\":2,\"2329\":5}}],[\"genericobjectpool<>\",{\"1\":{\"3241\":1}}],[\"genericobjectpool<sipconnection>\",{\"1\":{\"3241\":1}}],[\"genericclass\",{\"1\":{\"3034\":1}}],[\"genericclass<t>\",{\"1\":{\"3034\":1}}],[\"genericclass<integer>\",{\"1\":{\"3019\":1}}],[\"genericclass<>\",{\"1\":{\"3019\":2}}],[\"genericclass<string>\",{\"1\":{\"3019\":1}}],[\"genericmethoddemo\",{\"1\":{\"3023\":3}}],[\"generic\",{\"1\":{\"1677\":1}}],[\"generics\",{\"1\":{\"3016\":1}}],[\"genericswap\",{\"1\":{\"1295\":1}}],[\"genericsingleton<integer>\",{\"1\":{\"1294\":1}}],[\"genericsingleton<string>\",{\"1\":{\"1294\":1}}],[\"genericsingleton<>\",{\"1\":{\"1294\":1}}],[\"genericsingleton<t>\",{\"1\":{\"1294\":2}}],[\"genericsingleton\",{\"1\":{\"1294\":3}}],[\"generator<string>\",{\"1\":{\"3021\":1}}],[\"generator<t>\",{\"1\":{\"3021\":2}}],[\"generator\",{\"1\":{\"2320\":1}}],[\"generatewebrtcsdp\",{\"1\":{\"3232\":1}}],[\"generateopaque\",{\"1\":{\"3215\":2}}],[\"generatenonce\",{\"1\":{\"3215\":2}}],[\"generatekey\",{\"1\":{\"3170\":3}}],[\"generatebuildercodecontent\",{\"1\":{\"3162\":2}}],[\"generatebuildercode\",{\"1\":{\"3162\":2}}],[\"generate\",{\"1\":{\"3021\":3}}],[\"generateapidocument\",{\"1\":{\"1987\":1}}],[\"generated\",{\"1\":{\"544\":1,\"3021\":1}}],[\"generatedvalue\",{\"1\":{\"440\":1,\"578\":1,\"3165\":1}}],[\"generatetoken\",{\"1\":{\"456\":2}}],[\"generationtype\",{\"1\":{\"440\":1,\"578\":1,\"3165\":1}}],[\"general\",{\"1\":{\"122\":1,\"1578\":3,\"1640\":1,\"1771\":1,\"1825\":3,\"1831\":6}}],[\"gen\",{\"1\":{\"997\":1,\"1918\":1,\"3266\":4}}],[\"geom\",{\"1\":{\"1052\":1}}],[\"geometry\",{\"1\":{\"125\":1}}],[\"geospatial\",{\"1\":{\"131\":1}}],[\"getqop\",{\"1\":{\"3215\":1}}],[\"getqualifiedname\",{\"1\":{\"3162\":1}}],[\"getquantity\",{\"1\":{\"2007\":1}}],[\"getqueue\",{\"1\":{\"626\":1}}],[\"get方法实现\",{\"0\":{\"2629\":1,\"2682\":1}}],[\"get方法远程调用\",{\"1\":{\"285\":1}}],[\"get操作\",{\"1\":{\"2512\":1}}],[\"get等方法\",{\"1\":{\"2331\":1}}],[\"getgender\",{\"1\":{\"2329\":1}}],[\"getfiler\",{\"1\":{\"3162\":1}}],[\"getfield\",{\"1\":{\"2971\":2,\"2984\":1}}],[\"getfirstelement\",{\"1\":{\"3024\":3}}],[\"getfirst\",{\"1\":{\"2319\":1,\"2497\":1,\"2513\":1}}],[\"getfullname\",{\"1\":{\"2759\":1}}],[\"getfeedbackinfolist\",{\"1\":{\"270\":1}}],[\"getfeedbackinfofilename\",{\"1\":{\"270\":1}}],[\"getlocaltag\",{\"1\":{\"3209\":1}}],[\"getlogger\",{\"1\":{\"1068\":1,\"2956\":1}}],[\"getlinenumber\",{\"1\":{\"2936\":1}}],[\"getlastresponse\",{\"1\":{\"3222\":1}}],[\"getlastdownloadposition\",{\"1\":{\"2849\":2}}],[\"getlast\",{\"1\":{\"2319\":1,\"2497\":1}}],[\"getlasterror\",{\"1\":{\"1738\":2}}],[\"getlength\",{\"1\":{\"2234\":1,\"3007\":1,\"3066\":1}}],[\"getway网关服务\",{\"1\":{\"1559\":1}}],[\"getway插件\",{\"1\":{\"1559\":1}}],[\"getwriter\",{\"1\":{\"1431\":2,\"1440\":1,\"1443\":1,\"1444\":1}}],[\"getwidth\",{\"1\":{\"1209\":1}}],[\"get核心方法\",{\"1\":{\"1181\":1}}],[\"gethobbies\",{\"1\":{\"3007\":1}}],[\"gethostaddress\",{\"1\":{\"1104\":1}}],[\"getheight\",{\"1\":{\"1209\":1}}],[\"getheaders\",{\"1\":{\"3212\":1}}],[\"getheader\",{\"1\":{\"430\":1,\"456\":1,\"3205\":4,\"3208\":1,\"3215\":1,\"3238\":1}}],[\"getnoncecount\",{\"1\":{\"3215\":1}}],[\"getnonce\",{\"1\":{\"3215\":1,\"3238\":1}}],[\"getnode\",{\"1\":{\"2629\":1}}],[\"getnewservertransaction\",{\"1\":{\"3208\":1}}],[\"getnewclienttransaction\",{\"1\":{\"1094\":1,\"3190\":1,\"3199\":1}}],[\"getnewcallid\",{\"1\":{\"1094\":1,\"3190\":1}}],[\"getnamemethod\",{\"1\":{\"2970\":2}}],[\"getname\",{\"1\":{\"267\":2,\"286\":5,\"338\":4,\"366\":1,\"438\":2,\"441\":1,\"625\":1,\"1038\":1,\"1068\":1,\"1069\":2,\"1182\":2,\"1203\":1,\"1254\":1,\"1267\":2,\"1949\":2,\"1962\":2,\"2091\":1,\"2328\":1,\"2329\":2,\"2388\":2,\"2734\":1,\"2795\":1,\"2965\":3,\"2968\":4,\"2969\":4,\"2970\":3,\"2974\":1,\"2983\":1,\"3002\":2,\"3003\":4,\"3010\":2,\"3085\":1,\"3166\":1}}],[\"getkind\",{\"1\":{\"1087\":3,\"3162\":1}}],[\"getkeymanagers\",{\"1\":{\"3214\":1,\"3237\":1}}],[\"getkeystorepassword\",{\"1\":{\"3206\":1}}],[\"getkeystorepath\",{\"1\":{\"3206\":1}}],[\"getkey\",{\"1\":{\"283\":2,\"2059\":1,\"2407\":3,\"2408\":2,\"2420\":1,\"2615\":1,\"2660\":1,\"2680\":1,\"3007\":1,\"3020\":1}}],[\"gettrustmanagers\",{\"1\":{\"3214\":1,\"3237\":1}}],[\"gettruststorepath\",{\"1\":{\"3206\":1}}],[\"gettag\",{\"1\":{\"3205\":2}}],[\"gettable\",{\"1\":{\"2682\":2,\"2683\":1,\"2684\":1}}],[\"gettype\",{\"1\":{\"2999\":1}}],[\"getter\",{\"1\":{\"2771\":1,\"3007\":2}}],[\"getter和setter方法\",{\"1\":{\"2734\":1}}],[\"getter和setter\",{\"1\":{\"2065\":1,\"2969\":1}}],[\"getters\",{\"1\":{\"1182\":1,\"1249\":1,\"2329\":1,\"2388\":1,\"2938\":1}}],[\"getter方法\",{\"1\":{\"1181\":1,\"2051\":1}}],[\"getter等注解生成getter\",{\"1\":{\"1073\":1}}],[\"gettimestamp\",{\"1\":{\"1249\":1}}],[\"gettime\",{\"1\":{\"307\":2,\"1224\":4,\"2779\":2,\"3209\":2}}],[\"getendtime\",{\"1\":{\"3209\":1}}],[\"getenclosedelements\",{\"1\":{\"1087\":2}}],[\"getelementutils\",{\"1\":{\"3162\":1}}],[\"getelementbyid\",{\"1\":{\"1431\":3,\"1447\":1,\"1449\":1}}],[\"getelementsannotatedwith\",{\"1\":{\"1087\":1,\"3147\":1,\"3162\":1}}],[\"geterrorcode\",{\"1\":{\"1044\":2,\"1249\":1,\"2938\":1,\"2955\":2,\"2956\":1}}],[\"getexpiresat\",{\"1\":{\"307\":1}}],[\"getyears\",{\"1\":{\"545\":1}}],[\"getyear\",{\"1\":{\"545\":1}}],[\"get用于获取资源\",{\"1\":{\"433\":1}}],[\"getorder\",{\"1\":{\"2952\":1}}],[\"getorderid\",{\"1\":{\"2938\":1}}],[\"getoriginalfilename\",{\"1\":{\"434\":1}}],[\"getonlineusercount\",{\"1\":{\"2525\":1}}],[\"getobject\",{\"1\":{\"368\":1,\"3000\":1}}],[\"getoutputstream\",{\"1\":{\"269\":1,\"286\":1,\"1314\":1,\"1336\":2,\"3065\":2,\"3070\":1,\"3078\":1}}],[\"geturi\",{\"1\":{\"3212\":1,\"3215\":1,\"3238\":1}}],[\"getuppercasestrings\",{\"1\":{\"3041\":1}}],[\"getuserorders\",{\"1\":{\"3160\":1}}],[\"getuser\",{\"1\":{\"3052\":1,\"3154\":1}}],[\"getuserid\",{\"1\":{\"2955\":1,\"3235\":1}}],[\"getuserinput\",{\"1\":{\"2255\":1}}],[\"getusername\",{\"1\":{\"456\":2,\"2068\":1,\"2733\":1,\"2779\":1,\"3000\":1,\"3215\":1,\"3238\":1}}],[\"getusernamefromtoken\",{\"1\":{\"456\":2}}],[\"getuserlist\",{\"1\":{\"380\":1,\"381\":1}}],[\"getuserbyid\",{\"1\":{\"366\":1,\"380\":2,\"381\":2,\"427\":2,\"438\":1,\"439\":2,\"440\":1,\"449\":1,\"580\":1,\"1068\":1,\"1948\":1,\"1949\":1,\"1997\":1,\"2035\":1,\"3005\":3,\"3050\":1,\"3166\":2}}],[\"getunion\",{\"1\":{\"281\":1}}],[\"getitems\",{\"1\":{\"3160\":1}}],[\"getidlecount\",{\"1\":{\"1326\":1}}],[\"getid\",{\"1\":{\"307\":1,\"438\":1,\"2061\":1,\"2734\":1,\"2779\":1,\"2947\":1,\"2953\":1,\"2955\":1,\"3000\":1}}],[\"getint\",{\"1\":{\"1325\":1}}],[\"getinterfaces\",{\"1\":{\"1267\":1,\"2968\":1,\"3002\":1,\"3005\":1}}],[\"getintersection\",{\"1\":{\"281\":1}}],[\"getinputstream\",{\"1\":{\"1314\":1,\"3065\":2,\"3070\":1,\"3078\":1}}],[\"getinetaddress\",{\"1\":{\"1314\":1,\"3065\":1}}],[\"getinstance\",{\"1\":{\"307\":2,\"451\":1,\"613\":1,\"1094\":1,\"1294\":4,\"3190\":1,\"3206\":1,\"3214\":5,\"3215\":1,\"3218\":1,\"3237\":4}}],[\"getindexes\",{\"1\":{\"90\":1}}],[\"getcredential\",{\"1\":{\"3238\":1}}],[\"getcnonce\",{\"1\":{\"3215\":1}}],[\"getclienttransaction\",{\"1\":{\"3208\":2}}],[\"getclass\",{\"1\":{\"1069\":1,\"1182\":2,\"1260\":2,\"1267\":2,\"1269\":1,\"1270\":1,\"2234\":1,\"2436\":1,\"2605\":2,\"2965\":2,\"3002\":2,\"3003\":1,\"3005\":2,\"3007\":2,\"3035\":2,\"3137\":1,\"3149\":1}}],[\"getclassloader\",{\"1\":{\"745\":2,\"1260\":1,\"1267\":1,\"3002\":1,\"3005\":1}}],[\"getclassname\",{\"1\":{\"289\":1,\"2936\":1,\"2999\":1}}],[\"getchinesename\",{\"1\":{\"2821\":1}}],[\"getchars\",{\"1\":{\"2282\":1}}],[\"getchannel\",{\"1\":{\"1321\":2,\"2915\":2}}],[\"getchainfilters\",{\"1\":{\"293\":2}}],[\"getcallid\",{\"1\":{\"3205\":1,\"3209\":2,\"3235\":2}}],[\"getcallerclass\",{\"1\":{\"2987\":1}}],[\"getcache\",{\"1\":{\"3170\":2}}],[\"getcachemap\",{\"1\":{\"283\":2}}],[\"getcause\",{\"1\":{\"1254\":1}}],[\"getcomponenttype\",{\"1\":{\"3007\":1}}],[\"getcompletedtaskcount\",{\"1\":{\"626\":1}}],[\"getcolumnname\",{\"1\":{\"3000\":1}}],[\"getcolumncount\",{\"1\":{\"3000\":1}}],[\"getcode\",{\"1\":{\"2051\":1,\"2960\":1}}],[\"getcontent\",{\"1\":{\"3205\":1,\"3209\":3}}],[\"getcontentlength\",{\"1\":{\"3205\":2}}],[\"getcontext\",{\"1\":{\"456\":1}}],[\"getconstructor\",{\"1\":{\"2969\":1}}],[\"getconf\",{\"1\":{\"1838\":1}}],[\"getconnection\",{\"1\":{\"1326\":2,\"3005\":1}}],[\"getcorepoolsize\",{\"1\":{\"626\":1}}],[\"getcount\",{\"1\":{\"593\":1,\"663\":1,\"1125\":1}}],[\"getcity\",{\"1\":{\"501\":3,\"517\":2,\"2329\":2}}],[\"getpublicport\",{\"1\":{\"3224\":1}}],[\"getpublicaddress\",{\"1\":{\"1104\":1,\"3224\":3}}],[\"getport\",{\"1\":{\"3066\":1}}],[\"getproduct\",{\"1\":{\"3170\":1}}],[\"getproperty\",{\"1\":{\"286\":2,\"772\":3}}],[\"getprice\",{\"1\":{\"2007\":1}}],[\"getpackageof\",{\"1\":{\"3162\":1}}],[\"getparametername\",{\"1\":{\"3002\":2}}],[\"getparameter\",{\"1\":{\"1431\":1,\"1440\":1,\"1443\":2,\"1444\":2}}],[\"getparent\",{\"1\":{\"745\":2,\"1147\":2}}],[\"getpassword\",{\"1\":{\"307\":1,\"456\":1,\"2068\":1,\"3215\":2,\"3238\":1}}],[\"getpages\",{\"1\":{\"284\":1}}],[\"getpayload\",{\"1\":{\"279\":3}}],[\"getradius\",{\"1\":{\"1209\":2}}],[\"getrange\",{\"1\":{\"200\":1}}],[\"getruntime\",{\"1\":{\"694\":1,\"1111\":1,\"2921\":1,\"3225\":1,\"3240\":1}}],[\"getreplicas\",{\"1\":{\"3244\":1}}],[\"getrealm\",{\"1\":{\"3215\":1,\"3238\":1}}],[\"getremotetag\",{\"1\":{\"3209\":1}}],[\"getremoteaddress\",{\"1\":{\"1228\":3,\"1238\":1,\"1315\":1,\"2916\":3,\"2921\":2,\"3118\":2,\"3120\":1}}],[\"getrequest\",{\"1\":{\"3208\":2,\"3218\":1}}],[\"getrequesturi\",{\"1\":{\"3205\":1,\"3212\":1}}],[\"getrequestid\",{\"1\":{\"1249\":1,\"2960\":1}}],[\"getrequestattributes\",{\"1\":{\"286\":1}}],[\"getreference\",{\"1\":{\"676\":3,\"1139\":1}}],[\"getresponse\",{\"1\":{\"286\":4,\"1094\":1,\"3190\":1,\"3208\":1,\"3215\":1,\"3238\":1}}],[\"getbranchid\",{\"1\":{\"3208\":2}}],[\"getbirthday\",{\"1\":{\"2779\":1}}],[\"getbindingresult\",{\"1\":{\"429\":1}}],[\"getbalance\",{\"1\":{\"2750\":2,\"2947\":2}}],[\"getbyname\",{\"1\":{\"1104\":1,\"3066\":1}}],[\"getbytes\",{\"1\":{\"279\":2,\"307\":1,\"1228\":1,\"1235\":2,\"1238\":1,\"1315\":1,\"1324\":1,\"1336\":2,\"2832\":1,\"2844\":1,\"2891\":2,\"2892\":4,\"2897\":1,\"2914\":2,\"2916\":1,\"2917\":2,\"2921\":2,\"3065\":2,\"3066\":1,\"3070\":1,\"3116\":1,\"3117\":1,\"3118\":1,\"3120\":1,\"3215\":1}}],[\"getbean\",{\"1\":{\"290\":4,\"2999\":3}}],[\"getbody\",{\"1\":{\"285\":2,\"450\":2,\"456\":1}}],[\"getspec\",{\"1\":{\"3244\":2}}],[\"getsuperclass\",{\"1\":{\"2968\":1}}],[\"getsubject\",{\"1\":{\"456\":1}}],[\"getsubtract\",{\"1\":{\"281\":1}}],[\"getscore\",{\"1\":{\"2734\":1}}],[\"getservertransaction\",{\"1\":{\"3208\":1,\"3218\":1}}],[\"getseqnumber\",{\"1\":{\"3205\":1,\"3208\":1}}],[\"getseasoncode\",{\"1\":{\"2821\":1}}],[\"getsession\",{\"1\":{\"2525\":1,\"3235\":1}}],[\"getsendchannel\",{\"1\":{\"289\":1}}],[\"getsystemclassloader\",{\"1\":{\"745\":1,\"1147\":1}}],[\"getstarttime\",{\"1\":{\"3209\":1}}],[\"getstacktrace\",{\"1\":{\"2936\":2}}],[\"getstamp\",{\"1\":{\"676\":7,\"1139\":1}}],[\"getstatusline\",{\"1\":{\"1094\":1}}],[\"getstatuscode\",{\"1\":{\"450\":2,\"3190\":1,\"3208\":1}}],[\"getstatuscodevalue\",{\"1\":{\"285\":2}}],[\"getstate\",{\"1\":{\"609\":5,\"659\":1,\"3209\":1,\"3222\":1,\"3223\":2}}],[\"getsipprovider\",{\"1\":{\"3208\":1}}],[\"getsipversion\",{\"1\":{\"3205\":1}}],[\"getsimplename\",{\"1\":{\"267\":2,\"1087\":5,\"2968\":1,\"2999\":2,\"3147\":1,\"3162\":1}}],[\"getsignature\",{\"1\":{\"267\":2,\"338\":4,\"1068\":1}}],[\"getvalueoptimized\",{\"1\":{\"2942\":1}}],[\"getvalue\",{\"1\":{\"279\":1,\"289\":1,\"1290\":2,\"1303\":2,\"2059\":1,\"2407\":2,\"2408\":3,\"2615\":1,\"2660\":1,\"2680\":1,\"2942\":1,\"3007\":1,\"3020\":1,\"3034\":2,\"3036\":5}}],[\"getactivedialogs\",{\"1\":{\"3209\":1}}],[\"getactivecount\",{\"1\":{\"626\":1,\"1326\":1,\"3097\":1}}],[\"getamount\",{\"1\":{\"2955\":1}}],[\"getarea\",{\"1\":{\"1206\":1,\"1209\":4,\"2745\":1}}],[\"getargs\",{\"1\":{\"267\":1,\"1068\":1,\"3170\":2}}],[\"getaddress\",{\"1\":{\"501\":4,\"517\":2,\"1104\":1,\"3007\":1,\"3066\":1,\"3205\":2,\"3212\":1}}],[\"getallerrors\",{\"1\":{\"429\":1}}],[\"getallusers\",{\"1\":{\"380\":1,\"381\":1,\"427\":2,\"438\":1,\"439\":4,\"440\":1,\"449\":1}}],[\"getappname\",{\"1\":{\"407\":1}}],[\"getapplicationcontext\",{\"1\":{\"290\":1}}],[\"getage\",{\"1\":{\"366\":1,\"438\":2,\"1182\":2,\"1203\":1,\"2091\":1,\"2329\":6,\"2969\":4,\"2970\":1,\"2983\":1}}],[\"getannotations\",{\"1\":{\"2968\":1}}],[\"getannotation\",{\"1\":{\"267\":2,\"1069\":2,\"1081\":2,\"3002\":1,\"3003\":3,\"3005\":1,\"3137\":1,\"3149\":2,\"3150\":2}}],[\"getdialogid\",{\"1\":{\"3208\":2,\"3209\":2}}],[\"getdialog\",{\"1\":{\"3208\":2}}],[\"getdisjunction\",{\"1\":{\"281\":1}}],[\"getdynamicinput\",{\"1\":{\"2256\":1}}],[\"getdocumentbyid\",{\"1\":{\"1962\":1}}],[\"getdata\",{\"1\":{\"3019\":3,\"3066\":1}}],[\"getdatabase\",{\"1\":{\"91\":1}}],[\"getdays\",{\"1\":{\"545\":1}}],[\"getdayofmonth\",{\"1\":{\"545\":1}}],[\"getdefaultalgorithm\",{\"1\":{\"3214\":2,\"3237\":2}}],[\"getdefaultmessage\",{\"1\":{\"429\":1}}],[\"getdelay\",{\"1\":{\"2467\":1}}],[\"getdeclaredconstructor\",{\"1\":{\"2969\":1,\"2999\":1,\"3000\":1,\"3007\":3}}],[\"getdeclaredmethods获取声明的方法数量\",{\"1\":{\"2983\":1}}],[\"getdeclaredmethods\",{\"1\":{\"2983\":1,\"3137\":1,\"3149\":1}}],[\"getdeclaredmethod获取声明的方法\",{\"1\":{\"2983\":1}}],[\"getdeclaredmethod\",{\"1\":{\"1270\":2,\"2970\":1,\"2983\":2,\"2989\":1}}],[\"getdeclaredfield\",{\"1\":{\"1269\":2,\"2971\":2,\"2984\":2,\"2989\":1,\"2990\":1,\"3000\":1}}],[\"getdeclaredfields\",{\"1\":{\"1069\":1,\"2999\":1,\"3003\":1,\"3007\":1}}],[\"getdeclaringclass\",{\"1\":{\"267\":2}}],[\"getmiddleelement\",{\"1\":{\"3023\":3}}],[\"getmodifiers\",{\"1\":{\"1087\":3,\"2968\":1,\"3007\":1}}],[\"getmonths\",{\"1\":{\"545\":1}}],[\"getmonth\",{\"1\":{\"545\":1}}],[\"getmongocollection\",{\"1\":{\"288\":1}}],[\"getmongo\",{\"1\":{\"91\":1}}],[\"getmetadata\",{\"1\":{\"3000\":1}}],[\"getmethods获取公有方法数量\",{\"1\":{\"2983\":1}}],[\"getmethods\",{\"1\":{\"2983\":1}}],[\"getmethod获取公有方法\",{\"1\":{\"2983\":1}}],[\"getmethodname\",{\"1\":{\"2936\":1}}],[\"getmethod\",{\"1\":{\"267\":2,\"519\":1,\"729\":1,\"746\":1,\"1264\":1,\"2970\":4,\"2983\":2,\"2986\":1,\"2993\":2,\"3205\":2,\"3208\":2,\"3215\":1,\"3218\":2,\"3238\":1}}],[\"getmessager\",{\"1\":{\"1087\":1}}],[\"getmessage\",{\"1\":{\"429\":1,\"491\":1,\"518\":1,\"693\":1,\"746\":1,\"747\":1,\"1044\":5,\"1055\":1,\"1068\":1,\"1069\":2,\"1190\":1,\"1238\":1,\"1243\":1,\"2051\":1,\"2071\":1,\"2079\":2,\"2450\":1,\"2956\":2,\"2960\":1,\"2984\":1,\"2989\":1,\"2990\":1,\"3003\":2,\"3005\":2}}],[\"getmsgcontent\",{\"1\":{\"289\":1}}],[\"getmapping\",{\"1\":{\"270\":1,\"378\":1,\"380\":2,\"381\":2,\"427\":2,\"452\":2}}],[\"get\",{\"1\":{\"125\":5,\"165\":1,\"193\":1,\"200\":1,\"219\":1,\"261\":2,\"269\":1,\"279\":1,\"283\":1,\"284\":1,\"285\":2,\"286\":3,\"287\":1,\"289\":2,\"292\":1,\"429\":1,\"434\":1,\"450\":1,\"471\":1,\"538\":1,\"539\":2,\"544\":1,\"554\":1,\"574\":1,\"592\":1,\"643\":2,\"663\":1,\"675\":1,\"1043\":3,\"1069\":1,\"1126\":1,\"1132\":1,\"1179\":1,\"1181\":1,\"1228\":1,\"1232\":2,\"1238\":2,\"1254\":1,\"1269\":4,\"1280\":1,\"1301\":1,\"1315\":1,\"1324\":1,\"1325\":3,\"1326\":2,\"1338\":2,\"1431\":2,\"1432\":1,\"1433\":2,\"1435\":2,\"1436\":4,\"1449\":1,\"1454\":1,\"1513\":1,\"1563\":1,\"1633\":1,\"1634\":1,\"1658\":1,\"1660\":3,\"1677\":1,\"1787\":2,\"1790\":2,\"1898\":1,\"1931\":1,\"1940\":1,\"2053\":1,\"2161\":1,\"2234\":1,\"2314\":1,\"2324\":1,\"2325\":1,\"2327\":2,\"2341\":2,\"2348\":1,\"2356\":1,\"2407\":1,\"2409\":1,\"2419\":2,\"2427\":1,\"2429\":2,\"2439\":1,\"2450\":4,\"2456\":2,\"2485\":8,\"2495\":1,\"2505\":1,\"2506\":1,\"2512\":3,\"2513\":4,\"2522\":1,\"2525\":1,\"2534\":1,\"2544\":4,\"2605\":1,\"2612\":1,\"2615\":1,\"2629\":1,\"2632\":1,\"2669\":1,\"2680\":1,\"2682\":2,\"2683\":1,\"2684\":1,\"2685\":4,\"2697\":2,\"2712\":2,\"2715\":1,\"2881\":1,\"2914\":3,\"2916\":1,\"2917\":2,\"2921\":2,\"2942\":2,\"2971\":8,\"2989\":2,\"2999\":2,\"3003\":1,\"3005\":1,\"3007\":4,\"3017\":2,\"3046\":4,\"3079\":1,\"3086\":2,\"3087\":1,\"3107\":1,\"3116\":1,\"3117\":1,\"3118\":1,\"3120\":1,\"3170\":1,\"3198\":1,\"3209\":2,\"3212\":1,\"3223\":1,\"3224\":1,\"3235\":1,\"3240\":1,\"3244\":1,\"3246\":2,\"3273\":2,\"3276\":1,\"3278\":2}}],[\"g\",{\"1\":{\"112\":1,\"261\":1,\"264\":1,\"1687\":1,\"1857\":2,\"1868\":1,\"1903\":1,\"2195\":1}}],[\"进一步可以判断是主动发起的连接\",{\"1\":{\"1886\":1}}],[\"进去mongodb文件夹\",{\"1\":{\"1734\":1}}],[\"进阶\",{\"0\":{\"1006\":1,\"1980\":1,\"2030\":1,\"2943\":1,\"2995\":1,\"3042\":1,\"3112\":1,\"3155\":1,\"3229\":1}}],[\"进程相关命令\",{\"0\":{\"1889\":1}}],[\"进程阻塞\",{\"1\":{\"1887\":1}}],[\"进程状态\",{\"1\":{\"1882\":1}}],[\"进程使用的\",{\"1\":{\"1882\":1}}],[\"进程使用的虚拟内存中\",{\"1\":{\"1882\":1}}],[\"进程使用的虚拟内存总量\",{\"1\":{\"1882\":1}}],[\"进程使用的物理内存百分比\",{\"1\":{\"1882\":1}}],[\"进程使用的cpu时间总计\",{\"1\":{\"1882\":2}}],[\"进程所有者的组名\",{\"1\":{\"1882\":1}}],[\"进程所有者的用户名\",{\"1\":{\"1882\":1}}],[\"进程所有者的用户id\",{\"1\":{\"1882\":1}}],[\"进程id\",{\"1\":{\"1882\":1}}],[\"进程号\",{\"1\":{\"1852\":1,\"1854\":1,\"1892\":1}}],[\"进程的创建和销毁成本高\",{\"1\":{\"1122\":1}}],[\"进程间通信需要借助操作系统\",{\"1\":{\"1122\":1}}],[\"进程有自己的内存空间\",{\"1\":{\"1122\":1}}],[\"进程是资源分配的基本单位\",{\"1\":{\"1122\":1}}],[\"进程是程序的一次执行过程\",{\"1\":{\"1122\":1}}],[\"进程是操作系统进行资源分配的基本单位\",{\"1\":{\"589\":1}}],[\"进程内具有时效性的数据\",{\"1\":{\"140\":1}}],[\"进行操作\",{\"1\":{\"2911\":1}}],[\"进行字节与字符的转换\",{\"1\":{\"2877\":1}}],[\"进行充分的并发测试验证线程安全性\",{\"1\":{\"2544\":1}}],[\"进行充分的测试\",{\"1\":{\"2138\":1}}],[\"进行随机访问时性能低下\",{\"1\":{\"2505\":1}}],[\"进行输入校验\",{\"1\":{\"2065\":1}}],[\"进行空值检查\",{\"1\":{\"2054\":1}}],[\"进行单元测试\",{\"1\":{\"2048\":1,\"2055\":1,\"2063\":1}}],[\"进行比较\",{\"1\":{\"1165\":1}}],[\"进行docker编排\",{\"0\":{\"250\":1}}],[\"进行rdb持久化\",{\"1\":{\"171\":1}}],[\"进行部分复制时发现数据已经存在丢失的情况\",{\"1\":{\"166\":1}}],[\"进行引用\",{\"1\":{\"30\":1}}],[\"进入拥塞避免阶段\",{\"1\":{\"3075\":1}}],[\"进入线性增长阶段\",{\"1\":{\"3075\":1}}],[\"进入redis输入ping命令如果返回pong则网络通畅\",{\"1\":{\"1788\":1}}],[\"进入后输入ping测试\",{\"1\":{\"1787\":1}}],[\"进入cli\",{\"1\":{\"1787\":1}}],[\"进入close\",{\"1\":{\"1311\":1}}],[\"进入配置文件\",{\"1\":{\"1786\":1}}],[\"进入安装的ngin文件夹中可查看到conf\",{\"1\":{\"1779\":1}}],[\"进入解压后的nginx\",{\"1\":{\"1779\":1}}],[\"进入mongo输入\",{\"1\":{\"1764\":1}}],[\"进入mysql\",{\"1\":{\"99\":1,\"107\":1,\"123\":1}}],[\"进入到xshell控制台\",{\"1\":{\"1781\":1}}],[\"进入到\",{\"0\":{\"1730\":1}}],[\"进入oracle\",{\"1\":{\"1570\":1}}],[\"进入objs文件夹\",{\"1\":{\"1416\":1}}],[\"进入kafka所在目录\",{\"1\":{\"1531\":1}}],[\"进入kafka容器的命令行\",{\"1\":{\"1531\":1}}],[\"进入系统后使用命令fdisk\",{\"1\":{\"1500\":1}}],[\"进入内核目录并执行\",{\"1\":{\"1489\":1}}],[\"进入sbin文件夹\",{\"1\":{\"1779\":1}}],[\"进入sbin目录\",{\"1\":{\"1417\":1}}],[\"进入sqlplus\",{\"1\":{\"1570\":1}}],[\"进入syn\",{\"1\":{\"1311\":2}}],[\"进入nginx安装目录中的conf文件中\",{\"1\":{\"1417\":1}}],[\"进入nginx安装目录\",{\"1\":{\"1416\":1}}],[\"进入你的nginx解压后的目录\",{\"1\":{\"1416\":1}}],[\"进入目录\",{\"1\":{\"1402\":1}}],[\"进入页面\",{\"1\":{\"1360\":1}}],[\"进入docker\",{\"1\":{\"1354\":1,\"1607\":1}}],[\"进入time\",{\"1\":{\"1311\":1}}],[\"进入timed\",{\"1\":{\"609\":1}}],[\"进入last\",{\"1\":{\"1311\":1}}],[\"进入fin\",{\"1\":{\"1311\":1}}],[\"进入waiting状态\",{\"1\":{\"609\":1}}],[\"进入数据卷\",{\"0\":{\"243\":1}}],[\"进入容器内部\",{\"1\":{\"3245\":1}}],[\"进入容器内部修改root登录权限\",{\"1\":{\"1576\":1,\"1577\":1,\"1578\":1}}],[\"进入容器修改yml文件\",{\"0\":{\"235\":1}}],[\"进入容器创建密码\",{\"0\":{\"223\":1}}],[\"进入容器\",{\"1\":{\"219\":1}}],[\"进入命令传播阶段候\",{\"1\":{\"169\":1}}],[\"进入哪个expires\",{\"1\":{\"153\":1}}],[\"进而\",{\"1\":{\"129\":1}}],[\"二是接口通常定义了契约\",{\"1\":{\"2994\":1}}],[\"二叉堆数据结构\",{\"0\":{\"2580\":1}}],[\"二维游戏地图\",{\"1\":{\"2177\":1}}],[\"二维数组在内存中表现为数组引用的数组\",{\"1\":{\"2171\":1}}],[\"二维数组通过行索引和列索引访问元素\",{\"1\":{\"2168\":1}}],[\"二维数组初始化\",{\"0\":{\"2167\":1}}],[\"二维数组声明\",{\"0\":{\"2166\":1}}],[\"二维数组可以理解为每个元素都是一维数组的数组\",{\"1\":{\"2165\":1}}],[\"二维数组的适用场景\",{\"0\":{\"2177\":1}}],[\"二维数组的常用操作\",{\"0\":{\"2172\":1}}],[\"二维数组的内存结构\",{\"0\":{\"2171\":1}}],[\"二维数组的访问与遍历\",{\"0\":{\"2168\":1}}],[\"二维数组的定义与初始化\",{\"0\":{\"2165\":1}}],[\"二维数组的螺旋遍历\",{\"0\":{\"1162\":1}}],[\"二维数组常用于表示矩阵\",{\"1\":{\"2163\":1}}],[\"二维数组是数组的数组\",{\"1\":{\"2163\":1}}],[\"二维数组中各行长度可以不同的特性\",{\"1\":{\"1169\":1}}],[\"二维数组\",{\"0\":{\"2162\":1},\"1\":{\"1162\":1}}],[\"二月\",{\"1\":{\"2078\":1,\"2126\":1}}],[\"二者的\",{\"1\":{\"1449\":1}}],[\"二分查找\",{\"1\":{\"2150\":1,\"2326\":1,\"2702\":1}}],[\"二分查找仅适用于有序数组\",{\"1\":{\"1161\":1}}],[\"二分查找算法\",{\"1\":{\"1161\":1,\"2710\":1}}],[\"二进制包方式安装的\",{\"1\":{\"3249\":1}}],[\"二进制计算友好\",{\"1\":{\"2282\":1}}],[\"二进制数据处理差\",{\"1\":{\"3085\":1}}],[\"二进制数据用printstream\",{\"1\":{\"2909\":1}}],[\"二进制数据\",{\"1\":{\"1221\":1}}],[\"二进制型\",{\"1\":{\"1101\":1}}],[\"二进制兼容性\",{\"1\":{\"562\":1}}],[\"二进制日志将丢失其变化信息\",{\"1\":{\"125\":1}}],[\"二进制日志功能和复制功能禁止更改全局服务器\",{\"1\":{\"125\":1}}],[\"二级\",{\"1\":{\"294\":1}}],[\"二级缓存\",{\"1\":{\"191\":1}}],[\"二步操作完后\",{\"1\":{\"121\":1}}],[\"二\",{\"0\":{\"99\":1,\"107\":1,\"115\":1,\"120\":1,\"390\":1,\"401\":1,\"414\":1,\"426\":1,\"437\":1,\"448\":1,\"460\":1,\"992\":1,\"1163\":1,\"1356\":1,\"1417\":1,\"1421\":1,\"1427\":1,\"1479\":1,\"1503\":1,\"1514\":1,\"1543\":1,\"1576\":1,\"1579\":1,\"1611\":1,\"1672\":1,\"1677\":1,\"1686\":1,\"1695\":1,\"1697\":1,\"1701\":1,\"1742\":1,\"1762\":1,\"1782\":1,\"1893\":1,\"2368\":1,\"2405\":1,\"2435\":1,\"2464\":1,\"2492\":1,\"2521\":1,\"2550\":1,\"2570\":1,\"2597\":1,\"2625\":1,\"2652\":1,\"3249\":1,\"3256\":1},\"1\":{\"3246\":1,\"3282\":1}}],[\"添加master节点主机\",{\"1\":{\"3273\":1}}],[\"添加master到当前集群中\",{\"1\":{\"186\":1}}],[\"添加以下内容\",{\"1\":{\"3246\":2}}],[\"添加以下配置项到\",{\"1\":{\"1788\":1}}],[\"添加认证信息\",{\"1\":{\"3199\":1}}],[\"添加handler到pipeline\",{\"1\":{\"3125\":1}}],[\"添加查看结果树和聚合报告监听器\",{\"1\":{\"3106\":1}}],[\"添加tcp取样器\",{\"1\":{\"3106\":1}}],[\"添加takewhile\",{\"1\":{\"1198\":1}}],[\"添加节点\",{\"1\":{\"3086\":1}}],[\"添加打印和格式化功能\",{\"1\":{\"2907\":1}}],[\"添加分隔符输入流\",{\"1\":{\"2897\":1}}],[\"添加对象到缓存\",{\"1\":{\"2685\":1}}],[\"添加了of\",{\"1\":{\"2677\":1}}],[\"添加更多便捷方法\",{\"1\":{\"2651\":1}}],[\"添加删除元素不需要移动其他元素\",{\"1\":{\"2564\":1}}],[\"添加删除元素时可能需要扩容\",{\"1\":{\"2564\":1}}],[\"添加延迟任务\",{\"1\":{\"2467\":1}}],[\"添加n个元素的总时间复杂度为o\",{\"1\":{\"2455\":1}}],[\"添加失败\",{\"1\":{\"2369\":1,\"2477\":1}}],[\"添加操作\",{\"1\":{\"2354\":1}}],[\"添加10000个元素\",{\"1\":{\"2348\":1}}],[\"添加性能测试\",{\"1\":{\"2327\":1}}],[\"添加后长度\",{\"1\":{\"2271\":1}}],[\"添加后容量\",{\"1\":{\"2271\":1}}],[\"添加元素到尾部的流程\",{\"1\":{\"2500\":1}}],[\"添加元素核心方法\",{\"0\":{\"2437\":1,\"2494\":1}}],[\"添加元素后\",{\"1\":{\"2324\":1}}],[\"添加元素\",{\"1\":{\"2161\":1,\"2318\":1,\"2324\":1,\"2369\":1,\"2498\":1,\"2505\":1,\"2533\":1,\"2604\":1,\"2660\":1,\"3041\":1}}],[\"添加服务\",{\"0\":{\"1927\":1}}],[\"添加端口\",{\"0\":{\"1925\":1}}],[\"添加一些文件\",{\"1\":{\"3246\":1}}],[\"添加一行\",{\"1\":{\"1788\":1}}],[\"添加一个服务器为仲裁节点\",{\"1\":{\"1764\":1}}],[\"添加一个span到div\",{\"1\":{\"1462\":2}}],[\"添加如下内容\",{\"1\":{\"1771\":1}}],[\"添加账户\",{\"1\":{\"1736\":1}}],[\"添加可执行权限\",{\"1\":{\"1714\":1}}],[\"添加相关配置\",{\"1\":{\"1707\":1}}],[\"添加相应的任务\",{\"1\":{\"1504\":1}}],[\"添加存储卷\",{\"0\":{\"1693\":1}}],[\"添加第二个prod项目仓库\",{\"1\":{\"1642\":1}}],[\"添加第一个common项目仓库\",{\"1\":{\"1642\":1}}],[\"添加私服地址\",{\"1\":{\"1633\":1,\"1637\":1}}],[\"添加内容到文件末尾即可\",{\"1\":{\"1624\":1}}],[\"添加引用镜像中的agent目录到自定义镜像工作空间中\",{\"1\":{\"1551\":1}}],[\"添加文件输入流\",{\"1\":{\"2897\":1}}],[\"添加文件\",{\"1\":{\"1551\":1,\"3246\":1}}],[\"添加密码\",{\"1\":{\"1503\":1}}],[\"添加密码如下\",{\"1\":{\"219\":1}}],[\"添加到当前元素的后面\",{\"1\":{\"1462\":1,\"1465\":1}}],[\"添加到当前元素的前面\",{\"1\":{\"1462\":1,\"1465\":1}}],[\"添加到开机自启动\",{\"1\":{\"1374\":1}}],[\"添加成第一个子元素\",{\"1\":{\"1462\":2,\"1465\":1}}],[\"添加成最后一个子元素\",{\"1\":{\"1462\":2,\"1465\":1}}],[\"添加es账号和密码\",{\"0\":{\"1363\":1}}],[\"添加重试机制处理临时网络故障\",{\"1\":{\"1337\":1}}],[\"添加连接泄漏检测机制\",{\"1\":{\"1336\":1}}],[\"添加处理器到责任链\",{\"1\":{\"1332\":1}}],[\"添加长度前缀\",{\"1\":{\"1325\":1}}],[\"添加用户\",{\"0\":{\"1855\":1},\"1\":{\"1267\":1,\"1835\":1}}],[\"添加computeifabsent\",{\"1\":{\"1198\":1}}],[\"添加content\",{\"1\":{\"1094\":1,\"3190\":1}}],[\"添加contact头\",{\"1\":{\"1094\":1,\"3190\":1}}],[\"添加foreach\",{\"1\":{\"1198\":1}}],[\"添加\",{\"1\":{\"1190\":1,\"1876\":1,\"2059\":1,\"2332\":1,\"2340\":1,\"2349\":1,\"2354\":1,\"2382\":1,\"2610\":1,\"2994\":1,\"3273\":1}}],[\"添加新的实现类\",{\"1\":{\"2754\":1}}],[\"添加新的依赖即可\",{\"1\":{\"460\":1}}],[\"添加新节点到头部\",{\"1\":{\"2512\":1}}],[\"添加新节点\",{\"1\":{\"1181\":1}}],[\"添加键值对到映射中\",{\"1\":{\"2683\":1}}],[\"添加键值对\",{\"1\":{\"1181\":1}}],[\"添加测试数据\",{\"1\":{\"1179\":1}}],[\"添加业务处理器\",{\"1\":{\"1111\":1}}],[\"添加sdp响应\",{\"1\":{\"3208\":1}}],[\"添加sip消息编解码器\",{\"1\":{\"1111\":1}}],[\"添加slave\",{\"1\":{\"186\":1}}],[\"添加jvm参数打印gc日志\",{\"1\":{\"774\":1}}],[\"添加jwt的依赖\",{\"1\":{\"456\":1}}],[\"添加jetty依赖\",{\"1\":{\"416\":1}}],[\"添加依赖\",{\"1\":{\"428\":1,\"438\":1,\"439\":1,\"440\":1,\"449\":1,\"451\":1,\"456\":1}}],[\"添加zipentry\",{\"1\":{\"286\":1}}],[\"添加配置文件\",{\"0\":{\"98\":1}}],[\"添加多个文档\",{\"1\":{\"47\":1}}],[\"回写消息\",{\"1\":{\"3125\":1}}],[\"回写数据\",{\"1\":{\"2916\":1,\"3118\":1,\"3120\":1}}],[\"回车后输入\",{\"1\":{\"1780\":1}}],[\"回调函数\",{\"1\":{\"1433\":1,\"1434\":1}}],[\"回复客户端\",{\"1\":{\"1315\":1}}],[\"回复ack包\",{\"1\":{\"1311\":3}}],[\"回复syn+ack包\",{\"1\":{\"1311\":1}}],[\"回收频率低\",{\"1\":{\"776\":1}}],[\"回收频繁\",{\"1\":{\"713\":1,\"776\":1}}],[\"回收时将存活对象复制到另一块\",{\"1\":{\"765\":1}}],[\"回收这些对象占用的内存空间\",{\"1\":{\"759\":1}}],[\"回收较少\",{\"1\":{\"713\":1}}],[\"回滚了事务分支\",{\"1\":{\"125\":1}}],[\"回滚事务\",{\"1\":{\"71\":1,\"91\":1,\"3005\":1}}],[\"回答\",{\"1\":{\"95\":4,\"212\":4,\"398\":2,\"411\":2,\"423\":2,\"434\":2,\"445\":2,\"456\":2,\"494\":1,\"495\":1,\"521\":1,\"522\":1,\"556\":1,\"557\":1,\"570\":1,\"571\":1,\"932\":2,\"945\":2,\"967\":2,\"989\":2,\"1030\":2,\"1216\":3,\"2085\":3,\"2095\":3,\"2105\":3,\"2119\":3,\"2138\":3,\"2752\":1,\"2753\":1,\"2754\":1,\"2779\":1,\"2780\":1,\"2790\":1,\"2802\":1,\"2814\":1,\"2826\":1}}],[\"除null外\",{\"1\":{\"3038\":1}}],[\"除最后一个文件外\",{\"1\":{\"2897\":1}}],[\"除特定实现类外\",{\"1\":{\"2361\":1}}],[\"除法赋值\",{\"1\":{\"2113\":1}}],[\"除法\",{\"1\":{\"2109\":1}}],[\"除常见循环变量i\",{\"1\":{\"1998\":1}}],[\"除基本类型外\",{\"1\":{\"1046\":1}}],[\"除非使用时必须显式指定\",{\"1\":{\"3140\":1}}],[\"除非使用opens语句开放\",{\"1\":{\"1281\":1}}],[\"除非有明确的频繁头部操作需求\",{\"1\":{\"2511\":1}}],[\"除非有大量的首尾操作\",{\"1\":{\"2354\":1}}],[\"除非有特殊需求\",{\"1\":{\"932\":1}}],[\"除非同时被final修饰\",{\"1\":{\"2085\":1}}],[\"除非服务器部署额外的逻辑\",{\"1\":{\"305\":1}}],[\"除非对数据一致性要求很高\",{\"1\":{\"173\":1}}],[\"除非你确信它们的执行是安全的\",{\"1\":{\"94\":1}}],[\"除了缓冲功能外\",{\"1\":{\"2867\":1}}],[\"除了基本的collection操作外\",{\"1\":{\"2459\":1}}],[\"除了使用java提供的线程安全list实现\",{\"1\":{\"2356\":1}}],[\"除了私仓\",{\"1\":{\"1632\":1}}],[\"除了状态代理服务器\",{\"1\":{\"1100\":1}}],[\"除了aba问题\",{\"1\":{\"686\":1}}],[\"除了将指令执行\",{\"1\":{\"167\":1}}],[\"除了可以用作缓存之外\",{\"1\":{\"129\":1}}],[\"除了\",{\"1\":{\"90\":1}}],[\"内核主动完成io操作并通知应用程序\",{\"1\":{\"3091\":1}}],[\"内核通知io就绪事件\",{\"1\":{\"3091\":1}}],[\"内核的\",{\"1\":{\"1496\":2,\"1499\":1}}],[\"内核\",{\"0\":{\"1496\":1}}],[\"内核配置\",{\"0\":{\"1490\":1}}],[\"内置注解\",{\"0\":{\"3136\":1}}],[\"内置评审流程\",{\"1\":{\"2024\":1}}],[\"内置多种编解码器\",{\"1\":{\"1347\":1}}],[\"内置缓冲区\",{\"1\":{\"1221\":1}}],[\"内置连接池和超时设置\",{\"1\":{\"471\":1}}],[\"内置服务器的切换\",{\"0\":{\"416\":1}}],[\"内置tomcat\",{\"1\":{\"391\":1}}],[\"内置了延时队列\",{\"1\":{\"130\":1}}],[\"内置了多种优化过后的数据类型\",{\"1\":{\"128\":1}}],[\"内部辅助类\",{\"1\":{\"3205\":1}}],[\"内部辅助方法\",{\"1\":{\"2795\":1}}],[\"内部类可以访问外部类的private成员\",{\"1\":{\"2801\":1}}],[\"内部类权限问题\",{\"1\":{\"2801\":1}}],[\"内部使用的navigablemap实例\",{\"1\":{\"2649\":1}}],[\"内部使用的linkedhashmap实例\",{\"1\":{\"2622\":1}}],[\"内部使用的hashmap实例\",{\"1\":{\"2594\":1}}],[\"内部使用stringjoiner\",{\"1\":{\"2310\":1}}],[\"内部会将所有节点的引用置为null\",{\"1\":{\"2508\":1}}],[\"内部通过reentrantlock保证线程安全\",{\"1\":{\"2486\":1}}],[\"内部数组elementdata私有\",{\"1\":{\"2446\":1}}],[\"内部数组使用final修饰\",{\"1\":{\"2336\":1}}],[\"内部存储结构使用不可变数组\",{\"1\":{\"2395\":1}}],[\"内部存储结构使用final修饰\",{\"1\":{\"2358\":1}}],[\"内部字符数组的总长度\",{\"1\":{\"2271\":1}}],[\"内部访问\",{\"1\":{\"1940\":1}}],[\"内部\",{\"1\":{\"1940\":1}}],[\"内部封装了很多功能\",{\"1\":{\"1448\":1}}],[\"内部维护一个缓冲区数组\",{\"1\":{\"1224\":1}}],[\"内部也是使用字符数组实现\",{\"1\":{\"1164\":1}}],[\"内部构件可以从本地私服仓库获取\",{\"1\":{\"989\":1}}],[\"内部优化调整方案\",{\"1\":{\"171\":1}}],[\"内部指令\",{\"1\":{\"169\":2}}],[\"内部做了非常多的性能优化\",{\"1\":{\"128\":1}}],[\"内存字符流示例\",{\"1\":{\"2857\":1}}],[\"内存瓶颈\",{\"1\":{\"2728\":1}}],[\"内存\",{\"1\":{\"2728\":1,\"3111\":1,\"3228\":1}}],[\"内存开销大\",{\"1\":{\"2528\":1}}],[\"内存开销更大\",{\"1\":{\"2503\":1,\"2511\":1}}],[\"内存资源有限\",{\"1\":{\"2511\":1}}],[\"内存释放\",{\"1\":{\"2445\":1}}],[\"内存高效\",{\"1\":{\"2395\":1}}],[\"内存高效等优点\",{\"1\":{\"2378\":1}}],[\"内存占用更大\",{\"1\":{\"2672\":1}}],[\"内存占用问题\",{\"0\":{\"2536\":1}}],[\"内存占用较大\",{\"1\":{\"2513\":1}}],[\"内存占用大\",{\"1\":{\"2356\":1,\"2456\":1,\"2513\":1}}],[\"内存占用\",{\"1\":{\"2316\":1,\"2358\":1,\"2503\":1,\"2511\":1,\"2542\":1,\"2689\":1}}],[\"内存占用严重\",{\"1\":{\"154\":1}}],[\"内存效率高\",{\"1\":{\"2861\":1}}],[\"内存效率\",{\"1\":{\"2253\":1}}],[\"内存优化策略\",{\"0\":{\"2445\":1}}],[\"内存优化\",{\"1\":{\"2252\":1,\"3218\":1}}],[\"内存连续\",{\"1\":{\"2155\":1,\"2484\":1}}],[\"内存连续分配等特点\",{\"1\":{\"2140\":1}}],[\"内存总数\",{\"1\":{\"1885\":1}}],[\"内存使用\",{\"0\":{\"1887\":1},\"1\":{\"1835\":1}}],[\"内存使用情况\",{\"0\":{\"1885\":1},\"1\":{\"818\":1,\"852\":1,\"886\":1,\"920\":1,\"1835\":1}}],[\"内存消耗小\",{\"1\":{\"1377\":1}}],[\"内存池管理\",{\"1\":{\"1347\":1}}],[\"内存映射文件大小受限于可用虚拟内存\",{\"1\":{\"2920\":1}}],[\"内存映射文件陷阱\",{\"1\":{\"2920\":1}}],[\"内存映射文件测试数据\",{\"1\":{\"2917\":1}}],[\"内存映射文件示例\",{\"1\":{\"2917\":1}}],[\"内存映射文件\",{\"0\":{\"2917\":1}}],[\"内存映射\",{\"1\":{\"1238\":1}}],[\"内存结构\",{\"0\":{\"1143\":1},\"1\":{\"2484\":1}}],[\"内存自动管理\",{\"1\":{\"1046\":1}}],[\"内存大小调整并行线程数等参数\",{\"1\":{\"818\":1,\"852\":1,\"886\":1,\"920\":1}}],[\"内存过大\",{\"1\":{\"813\":1,\"847\":1,\"881\":1,\"915\":1}}],[\"内存过小\",{\"1\":{\"813\":1,\"847\":1,\"881\":1,\"915\":1}}],[\"内存与性能\",{\"1\":{\"809\":1,\"843\":1,\"877\":1,\"911\":1}}],[\"内存碎片\",{\"1\":{\"783\":1}}],[\"内存碎片率\",{\"1\":{\"193\":1}}],[\"内存利用率高\",{\"1\":{\"766\":1}}],[\"内存利用率低\",{\"1\":{\"765\":1}}],[\"内存分散\",{\"1\":{\"2484\":1}}],[\"内存分代思想在jvm参数中得到充分体现\",{\"1\":{\"810\":1,\"844\":1,\"878\":1,\"912\":1}}],[\"内存分代回收思想\",{\"0\":{\"713\":1}}],[\"内存分配优化\",{\"1\":{\"1151\":1}}],[\"内存分配担保机制是为了减少full\",{\"1\":{\"784\":1}}],[\"内存分配担保机制是指当新生代无法为新对象分配内存时\",{\"1\":{\"784\":1}}],[\"内存分配策略\",{\"0\":{\"708\":1}}],[\"内存区域oom异常演示\",{\"0\":{\"710\":1}}],[\"内存位置\",{\"1\":{\"673\":1}}],[\"内存泄漏风险\",{\"0\":{\"2451\":1,\"2508\":1}}],[\"内存泄漏风险源于threadlocalmap的entry是弱引用\",{\"1\":{\"618\":1}}],[\"内存泄露\",{\"1\":{\"150\":1}}],[\"内存指标\",{\"1\":{\"193\":1}}],[\"内存无压力\",{\"1\":{\"192\":1}}],[\"内存容量\",{\"1\":{\"190\":1}}],[\"内存单机容量达到256g\",{\"1\":{\"183\":1}}],[\"内存不足时才回收\",{\"1\":{\"2698\":1}}],[\"内存不足\",{\"1\":{\"161\":1}}],[\"内存定期随机清理\",{\"1\":{\"154\":1}}],[\"内存压力测试\",{\"1\":{\"477\":1}}],[\"内存压力不是很大\",{\"1\":{\"153\":1}}],[\"内存压力很大\",{\"1\":{\"152\":1}}],[\"内存中的数据可以通过ttl指令获取其状态\",{\"1\":{\"147\":1}}],[\"内存中的信息断电以后就消失了\",{\"1\":{\"136\":1}}],[\"内存产生额外消耗\",{\"1\":{\"139\":1}}],[\"内存的访问速度比磁盘快很多\",{\"1\":{\"128\":1,\"129\":1}}],[\"内存数据库\",{\"1\":{\"127\":1}}],[\"内存溢出会抛出outofmemoryerror异常\",{\"1\":{\"1155\":1}}],[\"内存溢出通常是由于创建过多的对象或堆大小设置过小导致的\",{\"1\":{\"1155\":1}}],[\"内存溢出发生在堆中\",{\"1\":{\"1155\":1}}],[\"内存溢出是指堆内存不足\",{\"1\":{\"1155\":1}}],[\"内存溢出\",{\"1\":{\"125\":2}}],[\"内存管理参数\",{\"0\":{\"791\":1,\"825\":1,\"859\":1,\"893\":1}}],[\"内存管理\",{\"1\":{\"94\":1,\"211\":1,\"1113\":1,\"1153\":1,\"1347\":1,\"3091\":1,\"3129\":1}}],[\"内容相同\",{\"1\":{\"2248\":3}}],[\"内容比较\",{\"1\":{\"2248\":1}}],[\"内容规范\",{\"1\":{\"1946\":1}}],[\"内容可变\",{\"1\":{\"1053\":1}}],[\"内容有两个\",{\"1\":{\"993\":1}}],[\"内容模版\",{\"1\":{\"289\":2}}],[\"内容分发网络\",{\"1\":{\"189\":1}}],[\"内容\",{\"1\":{\"14\":1,\"232\":1,\"1684\":1}}],[\"相较于传统bio\",{\"1\":{\"3113\":1}}],[\"相结合\",{\"1\":{\"2029\":1}}],[\"相连的数据节点只有一个是主节点\",{\"1\":{\"1764\":1}}],[\"相同字符串只存储一份\",{\"1\":{\"2308\":1}}],[\"相同点\",{\"1\":{\"668\":1,\"2672\":1,\"3198\":1}}],[\"相同类型的命令具有相似的格式和行为\",{\"1\":{\"93\":1,\"210\":1}}],[\"相比public\",{\"1\":{\"2824\":1}}],[\"相比数组\",{\"1\":{\"2314\":1}}],[\"相比char\",{\"1\":{\"2289\":1}}],[\"相比c++移除了指针\",{\"1\":{\"1046\":1}}],[\"相比之下\",{\"1\":{\"1254\":1}}],[\"相比之前的tls版本\",{\"1\":{\"482\":1}}],[\"相比成熟的第三方库\",{\"1\":{\"494\":1}}],[\"相当于中间路由器\",{\"1\":{\"3183\":1}}],[\"相当于\",{\"1\":{\"2438\":1}}],[\"相当于热备份\",{\"1\":{\"1760\":1}}],[\"相当于nginx的安装目录\",{\"1\":{\"1379\":1,\"1385\":1}}],[\"相当于设置了数据白名单\",{\"1\":{\"192\":1}}],[\"相当于随机\",{\"1\":{\"157\":1}}],[\"相关方法优化\",{\"1\":{\"2520\":1}}],[\"相关数据库配置\",{\"0\":{\"1684\":1}}],[\"相关日志\",{\"1\":{\"1527\":1}}],[\"相关配置\",{\"1\":{\"193\":1}}],[\"相关配置文档请见\",{\"1\":{\"2\":1}}],[\"相关文件\",{\"0\":{\"120\":1}}],[\"高吞吐量\",{\"1\":{\"2913\":1}}],[\"高吞吐量的网络编程场景\",{\"1\":{\"2911\":1}}],[\"高吞吐量的网络应用\",{\"1\":{\"1315\":1}}],[\"高空飞行\",{\"1\":{\"2748\":1}}],[\"高可靠\",{\"1\":{\"1507\":1}}],[\"高可用设计\",{\"1\":{\"3228\":1}}],[\"高可用基石\",{\"1\":{\"162\":1}}],[\"高可用\",{\"0\":{\"160\":1},\"1\":{\"160\":1,\"3121\":1}}],[\"高可用性\",{\"1\":{\"39\":1}}],[\"高可用性和易扩展性的数据库解决方案\",{\"1\":{\"35\":1}}],[\"高层模块不应该依赖低层模块\",{\"1\":{\"1212\":1}}],[\"高丢包和频繁切换特性对sip协议提出挑战\",{\"1\":{\"1114\":1}}],[\"高频调用场景需缓存解析结果\",{\"1\":{\"3169\":1}}],[\"高频调用方法中避免使用反射解析注解\",{\"1\":{\"1083\":1}}],[\"高频场景下性能差\",{\"1\":{\"2942\":1}}],[\"高频场景需优化\",{\"1\":{\"2941\":1}}],[\"高频查询场景\",{\"1\":{\"2717\":1}}],[\"高频复用的字符串适合intern\",{\"1\":{\"2256\":1}}],[\"高频面试题实现\",{\"0\":{\"1180\":1}}],[\"高频考点\",{\"1\":{\"1034\":1}}],[\"高优先级线程可能被低优先级线程阻塞\",{\"1\":{\"616\":1}}],[\"高级配置\",{\"0\":{\"1491\":1}}],[\"高级特性\",{\"1\":{\"1034\":1}}],[\"高级参数提供灵活调优\",{\"1\":{\"809\":1,\"843\":1,\"877\":1,\"911\":1}}],[\"高级参数\",{\"0\":{\"790\":1,\"824\":1,\"858\":1,\"892\":1}}],[\"高级功能较少\",{\"1\":{\"494\":1}}],[\"高级命令\",{\"0\":{\"88\":1,\"205\":1}}],[\"高峰期来临之前\",{\"1\":{\"191\":1}}],[\"高性能sip消息处理器\",{\"1\":{\"3240\":1}}],[\"高性能网络服务器设计要点\",{\"1\":{\"3091\":1}}],[\"高性能并发实现\",{\"1\":{\"2410\":1}}],[\"高性能线程安全可变字符串实现思路\",{\"1\":{\"2282\":1}}],[\"高性能的反向代理web服务器\",{\"1\":{\"1376\":1}}],[\"高性能服务器\",{\"1\":{\"1347\":1}}],[\"高性能累加器longadder\",{\"0\":{\"677\":1}}],[\"高性能\",{\"1\":{\"160\":1,\"1046\":1,\"3123\":1}}],[\"高\",{\"1\":{\"141\":2,\"1101\":2,\"1227\":1,\"2201\":1,\"2253\":1,\"2275\":1,\"2310\":1,\"2316\":1,\"2503\":1,\"2518\":4}}],[\"高效传输大文件\",{\"1\":{\"3130\":1}}],[\"高效紧凑\",{\"1\":{\"3085\":1}}],[\"高效字符串反转实现\",{\"1\":{\"2207\":1}}],[\"高效\",{\"1\":{\"2207\":1}}],[\"高效的管理容器\",{\"1\":{\"3246\":1}}],[\"高效的反射缓存策略设计要点\",{\"1\":{\"3011\":1}}],[\"高效的reactor线程模型\",{\"1\":{\"1347\":1}}],[\"高效的内部存储机制\",{\"1\":{\"135\":1}}],[\"高效性\",{\"1\":{\"93\":1,\"95\":1,\"210\":1,\"2663\":1}}],[\"高并发sip服务器架构示例\",{\"1\":{\"3218\":1}}],[\"高并发sip服务器设计\",{\"0\":{\"3218\":1}}],[\"高并发写\",{\"1\":{\"2542\":1}}],[\"高并发读\",{\"1\":{\"2542\":1}}],[\"高并发fifo队列\",{\"1\":{\"2518\":1}}],[\"高并发键值对存储\",{\"1\":{\"2518\":1}}],[\"高并发非阻塞场景\",{\"1\":{\"2461\":1}}],[\"高并发生产者\",{\"1\":{\"2461\":1}}],[\"高并发场景\",{\"1\":{\"2448\":1,\"2507\":1,\"2511\":1,\"2513\":1}}],[\"高并发场景下sip服务器容易出现性能瓶颈\",{\"1\":{\"3225\":1}}],[\"高并发场景下\",{\"1\":{\"1341\":1}}],[\"高并发连接\",{\"1\":{\"1377\":1}}],[\"高并发且允许最终一致性用longadder\",{\"1\":{\"686\":1}}],[\"高并发下性能好\",{\"1\":{\"686\":1}}],[\"高并发下性能优于atomiclong\",{\"1\":{\"672\":1}}],[\"高并发意思就很明确了\",{\"1\":{\"160\":1}}],[\"高并发\",{\"1\":{\"129\":1,\"160\":1,\"1315\":1,\"2424\":1,\"2913\":1,\"3121\":1}}],[\"只提供getter方法\",{\"1\":{\"2779\":1}}],[\"只负责订单管理\",{\"1\":{\"2770\":1}}],[\"只负责用户管理\",{\"1\":{\"2770\":1}}],[\"只要参数列表\",{\"1\":{\"2786\":1}}],[\"只要它们的参数列表不同\",{\"1\":{\"2741\":1}}],[\"只要更改创建容器时对外暴露的端口即可\",{\"1\":{\"1569\":1}}],[\"只序列化双向链表\",{\"1\":{\"2641\":1}}],[\"只锁定链表头节点或红黑树的根节点\",{\"1\":{\"2541\":1}}],[\"只输出a和b\",{\"1\":{\"2537\":1}}],[\"只保存数据\",{\"1\":{\"2508\":1}}],[\"只保存必要数据\",{\"1\":{\"2508\":1}}],[\"只保留最终数据的写入命令\",{\"1\":{\"140\":1}}],[\"只清空元素但不释放引用\",{\"1\":{\"2451\":1}}],[\"只注释关键部分\",{\"1\":{\"2094\":1}}],[\"只限于本地访问\",{\"1\":{\"1940\":1}}],[\"只参与投票\",{\"1\":{\"1764\":1}}],[\"只参与选举\",{\"1\":{\"69\":1}}],[\"只包含用户相关的属性和方法\",{\"1\":{\"1208\":1}}],[\"只暴露必要的接口来提高代码安全性和可维护性\",{\"1\":{\"2771\":1}}],[\"只暴露必要的接口\",{\"1\":{\"1203\":1,\"2085\":1}}],[\"只使用其中一半\",{\"1\":{\"1150\":1}}],[\"只使用常量池对象\",{\"1\":{\"1056\":1}}],[\"只引入项目真正需要的依赖\",{\"1\":{\"1024\":1,\"1029\":1,\"1030\":1}}],[\"只构建必要的模块和阶段\",{\"1\":{\"967\":1}}],[\"只构建必要的部分\",{\"1\":{\"965\":1}}],[\"只构建修改过的模块\",{\"1\":{\"967\":1}}],[\"只构建修改过的部分\",{\"1\":{\"965\":1}}],[\"只编译修改过的文件\",{\"1\":{\"951\":1}}],[\"只执行必要的构建阶段\",{\"1\":{\"949\":1}}],[\"只调整有明确优化目标的参数\",{\"1\":{\"815\":1,\"849\":1,\"883\":1,\"917\":1}}],[\"只需遵循框架定义的接口或注解规范\",{\"1\":{\"3009\":1}}],[\"只需关闭最外层流即可\",{\"1\":{\"2860\":1}}],[\"只需声明枚举常量即可实现单例\",{\"1\":{\"2826\":1}}],[\"只需遍历双向链表\",{\"1\":{\"2636\":1}}],[\"只需要在kibana\",{\"1\":{\"1520\":1}}],[\"只需要指定路径对应的目录\",{\"1\":{\"1402\":1}}],[\"只需要扩展新的形状类\",{\"1\":{\"1209\":1}}],[\"只需要更新直接依赖的版本\",{\"1\":{\"1030\":1}}],[\"只需要将服务端的\",{\"1\":{\"306\":1}}],[\"只需保证jvm能忽略不认识的属性即可\",{\"1\":{\"733\":1}}],[\"只与jvm规范相关\",{\"1\":{\"731\":1}}],[\"只在构建的时候使用的参数\",{\"1\":{\"3246\":1}}],[\"只在必要时才开放私有成员的访问权限\",{\"1\":{\"3010\":1}}],[\"只在必要的代码段上加锁\",{\"1\":{\"1138\":1}}],[\"只在有io事件发生时才进行处理\",{\"1\":{\"2919\":1}}],[\"只在admin数据库中可用\",{\"1\":{\"1736\":6}}],[\"只在测试时需要\",{\"1\":{\"925\":1,\"938\":1}}],[\"只在第一次获取锁时设置线程id\",{\"1\":{\"645\":1}}],[\"只在提交操作时检查是否有冲突\",{\"1\":{\"602\":1}}],[\"只是节点在哈希表中的结构变为红黑树\",{\"1\":{\"2643\":1}}],[\"只是提供解释信息\",{\"1\":{\"2093\":1}}],[\"只是把错误的信息延后\",{\"1\":{\"1558\":1}}],[\"只是建议jvm进行垃圾回收\",{\"1\":{\"780\":1}}],[\"只是每个用户都会产生一个session进行维护\",{\"1\":{\"304\":1}}],[\"只是不提供数据相关服务\",{\"1\":{\"177\":1}}],[\"只是不再接受master发送的数据\",{\"1\":{\"165\":1}}],[\"只有循环条件\",{\"1\":{\"2138\":1}}],[\"只有本类可以访问\",{\"1\":{\"2076\":1}}],[\"只有企业版mongodb\",{\"1\":{\"1738\":1}}],[\"只有无状态服务才可以\",{\"1\":{\"1692\":1}}],[\"只有在以下五种主动使用情况下才会触发类的初始化\",{\"1\":{\"743\":1}}],[\"只有在申请新的\",{\"1\":{\"306\":1}}],[\"只有当元素的延迟时间<=0时才能被取出\",{\"1\":{\"2486\":1}}],[\"只有当请求的header被服务器处理后\",{\"1\":{\"1397\":1}}],[\"只有当值和版本号都匹配时才会成功\",{\"1\":{\"1139\":1}}],[\"只有当值可能为null时才使用optional\",{\"1\":{\"554\":1}}],[\"只有当类被主动使用时才会触发加载\",{\"1\":{\"751\":1}}],[\"只有当父类加载器无法加载该类时\",{\"1\":{\"742\":1,\"1155\":1}}],[\"只有\",{\"1\":{\"125\":1}}],[\"只能读取文件\",{\"1\":{\"2885\":1}}],[\"只能按行分隔\",{\"1\":{\"2861\":1}}],[\"只能被继承\",{\"1\":{\"2761\":1}}],[\"只能被设置为被动节点\",{\"1\":{\"1764\":1}}],[\"只能被设置\",{\"1\":{\"125\":1}}],[\"只能存储相同类型的数据\",{\"1\":{\"2155\":1}}],[\"只能在localhost\",{\"1\":{\"1775\":1}}],[\"只能在局部变量声明中使用var\",{\"1\":{\"468\":1}}],[\"只能是非公平锁\",{\"1\":{\"1129\":1}}],[\"只能访问静态成员\",{\"1\":{\"1037\":1}}],[\"只能保证单个变量的原子操作\",{\"1\":{\"686\":2}}],[\"只能实现并发\",{\"1\":{\"588\":1}}],[\"只能依赖客户端删除掉本地存储的\",{\"1\":{\"304\":1}}],[\"只能运行arm64\",{\"1\":{\"224\":1}}],[\"只能有一个timestamp列\",{\"1\":{\"125\":1}}],[\"只能有1个auto列\",{\"1\":{\"125\":1}}],[\"只返回指定字段\",{\"1\":{\"85\":1}}],[\"李四\",{\"1\":{\"84\":1,\"1269\":1,\"1439\":9,\"2329\":1,\"2969\":1,\"2971\":1}}],[\"创建docker\",{\"1\":{\"3250\":1}}],[\"创建dockerfile目录\",{\"1\":{\"3246\":1}}],[\"创建db的目录和日志文件夹\",{\"1\":{\"1734\":1}}],[\"创建信任管理器\",{\"1\":{\"3237\":1}}],[\"创建密钥管理器\",{\"1\":{\"3237\":1}}],[\"创建webrtc对等连接\",{\"1\":{\"3232\":1}}],[\"创建webrtc连接\",{\"1\":{\"3232\":1}}],[\"创建www\",{\"1\":{\"3215\":1}}],[\"创建消息处理器\",{\"1\":{\"3218\":1}}],[\"创建401响应\",{\"1\":{\"3215\":1}}],[\"创建对话\",{\"1\":{\"3208\":1}}],[\"创建对象实例\",{\"1\":{\"3000\":1}}],[\"创建对象等\",{\"1\":{\"1263\":1}}],[\"创建对象\",{\"0\":{\"2969\":1},\"1\":{\"773\":1,\"1144\":1,\"1225\":1,\"3010\":1,\"3085\":1}}],[\"创建udp监听点\",{\"1\":{\"3206\":1,\"3218\":1}}],[\"创建expires头\",{\"1\":{\"3199\":1}}],[\"创建请求消息\",{\"1\":{\"3190\":1}}],[\"创建请求行\",{\"1\":{\"3190\":1,\"3199\":1}}],[\"创建请求uri\",{\"1\":{\"1094\":1}}],[\"创建java文件\",{\"1\":{\"3162\":1}}],[\"创建jwt的工具类\",{\"1\":{\"456\":1}}],[\"创建bytebuf的视图\",{\"1\":{\"3130\":1}}],[\"创建主从reactor线程组\",{\"1\":{\"3125\":1}}],[\"创建非阻塞socketchannel\",{\"1\":{\"3117\":1}}],[\"创建容量为1024字节的缓冲区\",{\"1\":{\"3116\":1}}],[\"创建容器\",{\"0\":{\"1590\":1,\"1595\":1,\"1600\":1,\"1606\":1,\"1692\":1}}],[\"创建泛型类实例时指定具体类型\",{\"1\":{\"3019\":1}}],[\"创建原始对象\",{\"1\":{\"3007\":1}}],[\"创建原容量2倍的新数组\",{\"1\":{\"2609\":1}}],[\"创建事务代理\",{\"1\":{\"3005\":1}}],[\"创建代理对象\",{\"1\":{\"3002\":1}}],[\"创建目标对象\",{\"1\":{\"3002\":1,\"3005\":1}}],[\"创建目录harbor\",{\"1\":{\"1626\":2,\"1715\":2}}],[\"创建目录\",{\"1\":{\"1402\":1,\"1569\":1}}],[\"创建订单\",{\"1\":{\"2955\":1}}],[\"创建处理器线程池\",{\"1\":{\"2921\":1}}],[\"创建服务器通道\",{\"1\":{\"2916\":1,\"2921\":1}}],[\"创建选择器\",{\"1\":{\"2916\":2,\"2921\":1}}],[\"创建后不可改变\",{\"1\":{\"2914\":1,\"3116\":1}}],[\"创建printwriter时使用new\",{\"1\":{\"2908\":1}}],[\"创建printwriter\",{\"1\":{\"2903\":1}}],[\"创建printstream\",{\"1\":{\"2902\":1}}],[\"创建多个文件输入流\",{\"1\":{\"2893\":1}}],[\"创建多个字节输入流\",{\"1\":{\"2892\":1}}],[\"创建多个线程同时操作列表\",{\"1\":{\"2328\":1}}],[\"创建两个字节输入流\",{\"1\":{\"2891\":1}}],[\"创建测试文件\",{\"1\":{\"2868\":1}}],[\"创建缓冲区\",{\"1\":{\"2843\":1,\"2914\":2,\"2915\":1,\"3066\":1}}],[\"创建流对象\",{\"1\":{\"2831\":1,\"2843\":1}}],[\"创建流水线\",{\"0\":{\"1654\":1,\"1704\":1}}],[\"创建流水线工程\",{\"0\":{\"1652\":1,\"1700\":1}}],[\"创建tls监听点\",{\"1\":{\"3206\":1,\"3237\":1}}],[\"创建tcp监听点\",{\"1\":{\"3206\":1,\"3218\":1}}],[\"创建treemap时提供comparator对象\",{\"1\":{\"2664\":1}}],[\"创建topic\",{\"0\":{\"1532\":1}}],[\"创建to头\",{\"1\":{\"1094\":1,\"3190\":1,\"3199\":1}}],[\"创建token\",{\"1\":{\"279\":1,\"307\":2}}],[\"创建根节点\",{\"1\":{\"2655\":1}}],[\"创建优化初始容量的hashmap\",{\"1\":{\"2604\":1}}],[\"创建高效的hashmap\",{\"1\":{\"2604\":1}}],[\"创建降序优先级队列\",{\"1\":{\"2578\":1}}],[\"创建线程组\",{\"1\":{\"3106\":1}}],[\"创建线程池\",{\"1\":{\"2522\":1,\"2523\":1,\"3218\":1}}],[\"创建线程安全的linkedlist\",{\"1\":{\"2513\":1}}],[\"创建线程的三种方式\",{\"0\":{\"592\":1}}],[\"创建生产者和消费者\",{\"1\":{\"2466\":1}}],[\"创建有界阻塞队列作为缓冲区\",{\"1\":{\"2466\":1}}],[\"创建arraylist时指定初始容量\",{\"1\":{\"2355\":1}}],[\"创建独立副本\",{\"1\":{\"2346\":1}}],[\"创建可变副本\",{\"1\":{\"2342\":1}}],[\"创建并发安全的双端队列\",{\"1\":{\"2513\":1}}],[\"创建并初始化列表\",{\"1\":{\"2326\":1}}],[\"创建并启动mysql服务容器\",{\"0\":{\"226\":1}}],[\"创建现有集合的不可变副本\",{\"1\":{\"2320\":1}}],[\"创建不可变list\",{\"1\":{\"2320\":1,\"2358\":1}}],[\"创建方式\",{\"1\":{\"2253\":1}}],[\"创建堆内存字符串对象\",{\"1\":{\"2245\":1}}],[\"创建网桥\",{\"0\":{\"1807\":1}}],[\"创建成功\",{\"1\":{\"1737\":1}}],[\"创建普通账户\",{\"1\":{\"1737\":1}}],[\"创建普通用户\",{\"0\":{\"1737\":1}}],[\"创建普通arraylist\",{\"1\":{\"1186\":1}}],[\"创建管理员账户\",{\"1\":{\"1736\":1}}],[\"创建存储卷\",{\"0\":{\"1691\":1}}],[\"创建nacos需连接的数据库\",{\"1\":{\"1684\":1}}],[\"创建nginx容器\",{\"0\":{\"216\":1}}],[\"创建项目管理\",{\"0\":{\"1680\":1}}],[\"创建企业空间\",{\"0\":{\"1679\":1}}],[\"创建所需凭证\",{\"0\":{\"1653\":1,\"1701\":1}}],[\"创建harbor仓库名\",{\"0\":{\"1642\":1}}],[\"创建http请求\",{\"1\":{\"471\":1}}],[\"创建http客户端\",{\"1\":{\"471\":1}}],[\"创建数据报包\",{\"1\":{\"3066\":1}}],[\"创建数据库\",{\"1\":{\"1640\":1}}],[\"创建数组\",{\"1\":{\"1144\":1}}],[\"创建第二台mysql\",{\"0\":{\"1578\":1}}],[\"创建第一台mysql\",{\"0\":{\"1577\":1}}],[\"创建配置文件\",{\"1\":{\"1577\":1,\"1578\":1}}],[\"创建配置文间\",{\"1\":{\"1576\":1}}],[\"创建相应目录\",{\"1\":{\"1576\":1,\"1577\":1,\"1578\":1}}],[\"创建表空间成功\",{\"1\":{\"1573\":1}}],[\"创建ling用户密码为meet0and1\",{\"1\":{\"1573\":1}}],[\"创建ling\",{\"1\":{\"1573\":1}}],[\"创建日志文件\",{\"1\":{\"1564\":1}}],[\"创建无状态服务\",{\"1\":{\"1539\":1}}],[\"创建挂载es配置\",{\"0\":{\"1511\":1}}],[\"创建挂载目录\",{\"0\":{\"1509\":1,\"1605\":1}}],[\"创建\",{\"1\":{\"1503\":1,\"3209\":1,\"3250\":1}}],[\"创建内核编译目录\",{\"0\":{\"1487\":1}}],[\"创建指定编码的printwriter\",{\"1\":{\"2903\":1}}],[\"创建指定元素\",{\"1\":{\"1462\":1,\"1465\":1}}],[\"创建指定日期\",{\"1\":{\"545\":1}}],[\"创建核心对象\",{\"1\":{\"1438\":1}}],[\"创建格式\",{\"1\":{\"1437\":1}}],[\"创建xmlhttprequest核心对象\",{\"1\":{\"1431\":1}}],[\"创建限制\",{\"1\":{\"1288\":1}}],[\"创建异步服务器通道\",{\"1\":{\"1238\":1,\"3120\":1}}],[\"创建大文件\",{\"1\":{\"1224\":1}}],[\"创建大量对象\",{\"1\":{\"1150\":1}}],[\"创建真正不可变的集合\",{\"1\":{\"1191\":1}}],[\"创建固定大小的线程池\",{\"1\":{\"1135\":1}}],[\"创建invite请求\",{\"1\":{\"1094\":1}}],[\"创建issue问题工单\",{\"0\":{\"992\":1}}],[\"创建mongo账户\",{\"0\":{\"1736\":1}}],[\"创建mongo配置文件\",{\"1\":{\"1734\":1}}],[\"创建max\",{\"1\":{\"1094\":1,\"3190\":1}}],[\"创建mysql\",{\"1\":{\"125\":1}}],[\"创建via头\",{\"1\":{\"1094\":1,\"3190\":1}}],[\"创建copyonwritearraylist\",{\"1\":{\"2513\":1}}],[\"创建cseq头\",{\"1\":{\"1094\":1,\"3190\":1}}],[\"创建call\",{\"1\":{\"1094\":1,\"3190\":1,\"3199\":1}}],[\"创建from头\",{\"1\":{\"1094\":1,\"3190\":1,\"3199\":1}}],[\"创建监听点\",{\"1\":{\"1094\":1,\"3190\":1,\"3218\":2}}],[\"创建地址\",{\"1\":{\"1094\":1,\"3190\":1}}],[\"创建了两个对象\",{\"1\":{\"1056\":1}}],[\"创建实例\",{\"1\":{\"1037\":1}}],[\"创建新对话\",{\"1\":{\"3209\":1}}],[\"创建新对象\",{\"1\":{\"2191\":2}}],[\"创建新会话\",{\"1\":{\"2525\":1}}],[\"创建新节点\",{\"1\":{\"2494\":2,\"2497\":1,\"2628\":1,\"2655\":1}}],[\"创建新字符串的逻辑\",{\"1\":{\"2299\":1}}],[\"创建新的服务器事务\",{\"1\":{\"3208\":1}}],[\"创建新的entry并添加到链表头部\",{\"1\":{\"2683\":1}}],[\"创建新的字符数组\",{\"1\":{\"2296\":1}}],[\"创建新的堆对象\",{\"1\":{\"2239\":1}}],[\"创建新的对象\",{\"1\":{\"2188\":1}}],[\"创建新的docker目录\",{\"1\":{\"1667\":1}}],[\"创建新的类加载器实例加载新版本的类\",{\"1\":{\"756\":1}}],[\"创建新连接\",{\"1\":{\"1326\":2}}],[\"创建新用户\",{\"1\":{\"125\":1}}],[\"创建自定义比较器\",{\"1\":{\"2660\":1}}],[\"创建自定义类加载器\",{\"1\":{\"746\":1}}],[\"创建自定义线程池\",{\"1\":{\"625\":1}}],[\"创建类的实例\",{\"1\":{\"743\":1}}],[\"创建optional对象\",{\"1\":{\"544\":1}}],[\"创建ssl上下文\",{\"1\":{\"3214\":2}}],[\"创建sshkey\",{\"1\":{\"1841\":1}}],[\"创建sdp内容\",{\"1\":{\"3190\":1}}],[\"创建socket\",{\"1\":{\"3065\":1}}],[\"创建stringbuilder对象\",{\"1\":{\"2265\":1}}],[\"创建stream\",{\"1\":{\"543\":2}}],[\"创建serversocket监听80端口\",{\"1\":{\"3070\":1}}],[\"创建serversocket\",{\"1\":{\"3065\":1}}],[\"创建serversocketchannel\",{\"1\":{\"1228\":1,\"1315\":1,\"3118\":1}}],[\"创建selector\",{\"1\":{\"1228\":2,\"1315\":1,\"3118\":2}}],[\"创建sip提供者并注册监听器\",{\"1\":{\"3190\":1}}],[\"创建sip提供者\",{\"1\":{\"1094\":1}}],[\"创建sheet配置\",{\"1\":{\"269\":1}}],[\"创建认证过滤器\",{\"1\":{\"456\":1}}],[\"创建语句\",{\"1\":{\"373\":1}}],[\"创建其子类对象指向父类对象\",{\"1\":{\"289\":1}}],[\"创建register请求\",{\"1\":{\"3199\":2}}],[\"创建resttemplate对象\",{\"1\":{\"285\":1}}],[\"创建rdb同步数据\",{\"1\":{\"166\":1}}],[\"创建时间\",{\"1\":{\"232\":6,\"1684\":6}}],[\"创建一个nginx服务\",{\"1\":{\"3250\":1}}],[\"创建一个新的entry节点\",{\"1\":{\"2680\":1}}],[\"创建一个空的linkedhashset\",{\"1\":{\"2631\":1}}],[\"创建一个空的linkedlist\",{\"1\":{\"2493\":1}}],[\"创建一个长度为5的int数组\",{\"1\":{\"1280\":1}}],[\"创建一个公开的仓库\",{\"1\":{\"993\":1}}],[\"创建一个名为\",{\"1\":{\"223\":1}}],[\"创建一个定时器\",{\"1\":{\"151\":1}}],[\"创建集群\",{\"1\":{\"186\":1,\"208\":1}}],[\"创建集合\",{\"1\":{\"82\":1}}],[\"创建索引\",{\"1\":{\"90\":1}}],[\"创建用户供从库使用\",{\"1\":{\"107\":1}}],[\"创建用户\",{\"0\":{\"99\":1,\"107\":1},\"1\":{\"81\":1,\"427\":1}}],[\"创建复合索引\",{\"1\":{\"68\":1,\"90\":1}}],[\"用处也不怎么大\",{\"1\":{\"3246\":1}}],[\"用处理器性能换取存储空间\",{\"1\":{\"151\":1}}],[\"用逗号分隔\",{\"1\":{\"3020\":1}}],[\"用static修饰\",{\"1\":{\"2767\":1}}],[\"用途\",{\"1\":{\"1958\":1,\"3198\":1}}],[\"用来标明dockerfile的标签\",{\"1\":{\"3246\":1}}],[\"用来标明这个dockerfile谁写的\",{\"1\":{\"3246\":1}}],[\"用来收集和发送数据到归集器\",{\"1\":{\"1537\":1}}],[\"用来展示落地的数据\",{\"1\":{\"1537\":1}}],[\"用xinetd超级进程启动\",{\"1\":{\"1503\":1}}],[\"用的端口也不一样\",{\"1\":{\"1414\":1}}],[\"用的镜像不对\",{\"1\":{\"237\":1}}],[\"用异常控制正常业务流程会严重影响性能和可读性\",{\"1\":{\"1253\":1}}],[\"用存储空间换取处理器性能\",{\"1\":{\"152\":1}}],[\"用专业术语来说可以说是日志\",{\"1\":{\"137\":1}}],[\"用法\",{\"1\":{\"125\":1}}],[\"用于后续请求\",{\"1\":{\"3211\":1}}],[\"用于后续重置\",{\"1\":{\"2914\":1}}],[\"用于除invite之外的所有请求方法\",{\"1\":{\"3208\":1}}],[\"用于发送invite请求\",{\"1\":{\"3190\":1}}],[\"用于排序请求\",{\"1\":{\"3180\":1}}],[\"用于排序的比较器\",{\"1\":{\"2648\":1}}],[\"用于响应消息的返回\",{\"1\":{\"3180\":1}}],[\"用于实际媒体数据的传输和质量控制\",{\"1\":{\"3176\":1}}],[\"用于实现文件的读取和写入功能\",{\"1\":{\"2828\":1}}],[\"用于描述会话的媒体类型\",{\"1\":{\"3176\":1}}],[\"用于描述person类\",{\"1\":{\"2091\":1}}],[\"用于编译时检查\",{\"1\":{\"3132\":1}}],[\"用于临时记录position\",{\"1\":{\"3116\":1}}],[\"用于在ip网络中建立\",{\"1\":{\"3175\":1}}],[\"用于在通道\",{\"1\":{\"3116\":1}}],[\"用于在后台与服务器交换数据\",{\"1\":{\"1432\":1}}],[\"用于日志集中管理和可视化\",{\"1\":{\"3103\":1}}],[\"用于监控java应用的网络活动和资源使用情况\",{\"1\":{\"3096\":1}}],[\"用于集合的排序\",{\"1\":{\"3047\":1}}],[\"用于udp通信\",{\"1\":{\"2915\":1}}],[\"用于tcp服务器\",{\"1\":{\"2915\":1}}],[\"用于tcp客户端\",{\"1\":{\"2915\":1}}],[\"用于文件读写\",{\"1\":{\"2915\":1}}],[\"用于向文件写入字符数据\",{\"1\":{\"2830\":1}}],[\"用于向文件写入字节数据\",{\"1\":{\"2830\":1}}],[\"用于定义固定数量的命名常量集合\",{\"1\":{\"2816\":1}}],[\"用于定义程序结构\",{\"1\":{\"2804\":1}}],[\"用于跟踪被回收的键\",{\"1\":{\"2687\":1}}],[\"用于解决哈希冲突\",{\"1\":{\"2672\":1}}],[\"用于解释下面的方法\",{\"1\":{\"2090\":1}}],[\"用于解释多行代码的功能\",{\"1\":{\"2090\":1}}],[\"用于解释单行代码的功能\",{\"1\":{\"2089\":1}}],[\"用于移除\",{\"1\":{\"2628\":1}}],[\"用于快速失败机制\",{\"1\":{\"2593\":1,\"2648\":1,\"2679\":1}}],[\"用于快速失败机制的修改计数器\",{\"1\":{\"2568\":1}}],[\"用于快速创建动态网页的技术\",{\"1\":{\"1430\":1}}],[\"用于元素排序\",{\"1\":{\"2568\":1}}],[\"用于检测并发修改\",{\"1\":{\"2441\":1}}],[\"用于从文件读取字符数据\",{\"1\":{\"2830\":1}}],[\"用于从文件读取字节数据\",{\"1\":{\"2830\":1}}],[\"用于从不同数据源创建字符串对象\",{\"1\":{\"2290\":1}}],[\"用于从www服务器传输超文本到本地浏览器的传输协议\",{\"1\":{\"1414\":1}}],[\"用于支持字符串拼接的特殊构造方法标记\",{\"1\":{\"2288\":1}}],[\"用于将字符串对象加入常量池并返回常量池中的引用\",{\"1\":{\"2244\":1}}],[\"用于表示文本数据\",{\"1\":{\"2185\":1}}],[\"用于表的引擎不支持\",{\"1\":{\"125\":1}}],[\"用于控制类的访问权限和行为特性\",{\"1\":{\"2761\":1}}],[\"用于控制类\",{\"1\":{\"2076\":1}}],[\"用于控制依赖在不同阶段的可见性\",{\"1\":{\"925\":1}}],[\"用于强制实施上述规范\",{\"1\":{\"2042\":1}}],[\"用于家庭网络\",{\"1\":{\"1940\":1}}],[\"用于工作区\",{\"1\":{\"1940\":1}}],[\"用于与skywalking\",{\"1\":{\"1538\":1}}],[\"用于agent上传数据\",{\"1\":{\"1538\":1}}],[\"用于docker文件映射\",{\"1\":{\"1517\":1}}],[\"用于计算当前展示数据是否浏览完毕\",{\"1\":{\"1443\":1}}],[\"用于显示联想的数据\",{\"1\":{\"1440\":1}}],[\"用于动态添加对象功能\",{\"1\":{\"1333\":1}}],[\"用于请求处理流程\",{\"1\":{\"1332\":1}}],[\"用于创建网络连接\",{\"1\":{\"1331\":1}}],[\"用于创建线程的工厂类\",{\"1\":{\"622\":1}}],[\"用于事件监听机制\",{\"1\":{\"1330\":1}}],[\"用于分布式追踪\",{\"1\":{\"1249\":1}}],[\"用于回收不再使用的对象内存\",{\"1\":{\"1148\":1}}],[\"用于建立\",{\"1\":{\"1091\":1}}],[\"用于标记方法需要记录日志\",{\"1\":{\"1068\":1}}],[\"用于修饰注解的注解\",{\"1\":{\"1063\":1}}],[\"用于提高访问速度\",{\"1\":{\"980\":1}}],[\"用于导入其他pom文件中的依赖管理配置\",{\"1\":{\"925\":1}}],[\"用于唯一标识一个依赖\",{\"1\":{\"924\":1}}],[\"用于高级调优和调试\",{\"1\":{\"790\":1,\"824\":1,\"858\":1,\"892\":1}}],[\"用于缓存等待执行的任务的阻塞队列\",{\"1\":{\"622\":1}}],[\"用于存储被回收的键\",{\"1\":{\"2679\":1}}],[\"用于存储不重复元素\",{\"1\":{\"2591\":1,\"2646\":1}}],[\"用于存储按顺序排列的元素\",{\"1\":{\"2459\":1}}],[\"用于存储键值对\",{\"1\":{\"2398\":1}}],[\"用于存储字符串常量\",{\"1\":{\"2241\":1}}],[\"用于存储对象实例和数组\",{\"1\":{\"1144\":1}}],[\"用于存储内部构件和第三方构件\",{\"1\":{\"977\":1}}],[\"用于存储从远程仓库下载的依赖和本地构建的构件\",{\"1\":{\"971\":1}}],[\"用于存储空指针异常的详细信息\",{\"1\":{\"505\":1}}],[\"用于存储服务器执行过的命令\",{\"1\":{\"167\":1}}],[\"用于诊断java应用程序\",{\"1\":{\"480\":1}}],[\"用于判断值是否为空\",{\"1\":{\"474\":1}}],[\"用于判定该节点是否下线或切换为从节点\",{\"1\":{\"186\":1}}],[\"用于bean的创建中\",{\"1\":{\"459\":1}}],[\"用于验证jwt\",{\"1\":{\"456\":1}}],[\"用于生成api文档\",{\"1\":{\"2091\":1}}],[\"用于生成和解析jwt\",{\"1\":{\"456\":1}}],[\"用于生成新值的supplier\",{\"1\":{\"283\":1}}],[\"用于简化spring应用的初始搭建以及开发过程\",{\"1\":{\"389\":1}}],[\"用于匹配带有特定注解的方法\",{\"1\":{\"340\":1}}],[\"用于匹配特定参数类型的方法\",{\"1\":{\"340\":1}}],[\"用于匹配特定目标类型的方法\",{\"1\":{\"340\":1}}],[\"用于匹配特定类型的bean的方法\",{\"1\":{\"340\":1}}],[\"用于匹配特定类型内的所有方法\",{\"1\":{\"340\":1}}],[\"用于匹配方法执行的连接点\",{\"1\":{\"340\":1}}],[\"用于匹配缓存映射中的键\",{\"1\":{\"283\":1}}],[\"用于同步各个节点的状态信息\",{\"1\":{\"180\":1}}],[\"用于对外提供接口\",{\"1\":{\"2798\":1}}],[\"用于对主从结构中的每台服务器进行监控\",{\"1\":{\"176\":1}}],[\"用于对方识别\",{\"1\":{\"167\":1}}],[\"用于保存master收到的所有指令\",{\"1\":{\"167\":1}}],[\"用于灾难恢复\",{\"1\":{\"138\":1}}],[\"用于确定数据分布的字段\",{\"1\":{\"70\":1}}],[\"用户凭据存储接口\",{\"1\":{\"3215\":1}}],[\"用户中心\",{\"1\":{\"3192\":1}}],[\"用户需要先向注册服务器注册\",{\"1\":{\"3187\":1}}],[\"用户代理是sip通信的端点\",{\"1\":{\"3182\":1}}],[\"用户代理\",{\"0\":{\"3182\":1}}],[\"用户定位\",{\"1\":{\"3175\":1}}],[\"用户mapper\",{\"1\":{\"3052\":1}}],[\"用户dao接口\",{\"1\":{\"3049\":1}}],[\"用户类\",{\"1\":{\"3003\":1}}],[\"用户信息\",{\"1\":{\"2903\":1}}],[\"用户信息对象\",{\"1\":{\"2035\":1}}],[\"用户服务\",{\"1\":{\"2770\":1}}],[\"用户服务类\",{\"1\":{\"2035\":1}}],[\"用户服务实现类\",{\"1\":{\"1949\":1}}],[\"用户服务接口\",{\"1\":{\"1948\":1}}],[\"用户对象\",{\"1\":{\"1948\":2}}],[\"用户对象不能为null\",{\"1\":{\"517\":1}}],[\"用户id\",{\"1\":{\"1948\":1,\"2035\":1,\"2525\":1}}],[\"用户id不能为空\",{\"1\":{\"1069\":1}}],[\"用户cpu时间\",{\"1\":{\"1887\":1}}],[\"用户可以随意\",{\"1\":{\"1584\":1}}],[\"用户的密码\",{\"1\":{\"1578\":1}}],[\"用户界面skywalking\",{\"1\":{\"1561\":1}}],[\"用户组\",{\"0\":{\"1864\":1},\"1\":{\"1503\":1,\"1835\":1}}],[\"用户无法自定义一个名为java\",{\"1\":{\"749\":1}}],[\"用户自定义的类加载器\",{\"1\":{\"742\":1}}],[\"用户不存在\",{\"1\":{\"521\":1,\"2054\":1,\"3050\":1}}],[\"用户地址信息未设置\",{\"1\":{\"517\":1}}],[\"用户名密码\",{\"1\":{\"3246\":1}}],[\"用户名只能包含字母\",{\"1\":{\"2065\":1}}],[\"用户名为\",{\"1\":{\"1426\":1}}],[\"用户名\",{\"1\":{\"1421\":1,\"1503\":2,\"1855\":3,\"1920\":1,\"3177\":1}}],[\"用户名长度必须在2\",{\"1\":{\"428\":1}}],[\"用户名不能为空\",{\"1\":{\"428\":1,\"1069\":1,\"2065\":1}}],[\"用户登出\",{\"1\":{\"306\":1}}],[\"用户登录后会生成新token\",{\"1\":{\"306\":1}}],[\"用户注册\",{\"1\":{\"306\":1,\"3179\":1}}],[\"用户就会在\",{\"1\":{\"306\":1}}],[\"用户量很大的情况下\",{\"1\":{\"304\":1}}],[\"用户列表\",{\"1\":{\"278\":1}}],[\"用户数据报协议\",{\"1\":{\"3062\":1}}],[\"用户数据\",{\"1\":{\"278\":1}}],[\"用户直接查询事先被预热的缓存数据\",{\"1\":{\"189\":1}}],[\"用户\",{\"1\":{\"125\":4,\"1365\":1,\"1503\":1,\"2071\":2,\"3246\":1}}],[\"用户管理命令\",{\"0\":{\"81\":1}}],[\"uznqu1cckfmohdiuvlevliwt0jcwuvgqkg4vzvbbmxkyvnrvxowsznobms1vm55mvnntuewr0ntc\",{\"1\":{\"3273\":1}}],[\"ufcem1mqwqwb0njuunlrwfnrkdba1zsunv1czllse1vrux6odl6vly5l096b3hvy1royna5amlbp\",{\"1\":{\"3273\":1}}],[\"ufw\",{\"1\":{\"1788\":3}}],[\"ugvqkfvd0f3ruivekfkqmdovkhrnevgz1fvnnzywxbrym9idxf0ulbus1frs3gkmjbszzjqmhddz\",{\"1\":{\"3273\":1}}],[\"ua发送register请求到注册服务器\",{\"1\":{\"3187\":1}}],[\"uas\",{\"1\":{\"3182\":2,\"3188\":1}}],[\"uac\",{\"1\":{\"3182\":2,\"3188\":1}}],[\"ua\",{\"0\":{\"3182\":1},\"1\":{\"3192\":1,\"3220\":1}}],[\"uk\",{\"1\":{\"1684\":2}}],[\"u985hw\",{\"1\":{\"1650\":2,\"1713\":2}}],[\"u01\",{\"1\":{\"1569\":2,\"1573\":1}}],[\"uuid=\",{\"1\":{\"3266\":4}}],[\"uuid=eef13cf9\",{\"1\":{\"1918\":1}}],[\"uuid\",{\"1\":{\"1513\":1,\"1527\":1,\"1962\":1,\"3215\":1}}],[\"uvh\",{\"1\":{\"1474\":1,\"1482\":1,\"1636\":1,\"1904\":1}}],[\"uwsgi相关参数文件\",{\"1\":{\"1384\":1}}],[\"uwsgi\",{\"1\":{\"1384\":3}}],[\"ubuntu13\",{\"1\":{\"3245\":1}}],[\"ubuntu\",{\"1\":{\"997\":2,\"2020\":1,\"3246\":10}}],[\"ul>\",{\"1\":{\"1462\":2}}],[\"ultimate\",{\"1\":{\"997\":1}}],[\"ulimit\",{\"1\":{\"125\":1,\"1347\":1,\"1847\":1}}],[\"ui面板\",{\"0\":{\"1562\":1}}],[\"ui连接平台后端查询数据展示\",{\"1\":{\"1561\":1}}],[\"ui配置sw\",{\"1\":{\"1538\":1}}],[\"ui通信\",{\"1\":{\"1538\":1}}],[\"ui\",{\"1\":{\"1517\":1,\"1520\":1,\"1536\":1,\"1537\":1,\"3104\":1}}],[\"uid\",{\"1\":{\"997\":1,\"1503\":1,\"1882\":1}}],[\"uit\",{\"1\":{\"997\":1}}],[\"u2类型\",{\"1\":{\"736\":1}}],[\"utf8file\",{\"1\":{\"2861\":2}}],[\"utf8mb4\",{\"1\":{\"1640\":2,\"1687\":1,\"1825\":2,\"1831\":6}}],[\"utf8\",{\"1\":{\"728\":22,\"1825\":4,\"1869\":1,\"2861\":1,\"2879\":1,\"2880\":1}}],[\"utf\",{\"1\":{\"269\":2,\"286\":2,\"294\":1,\"439\":1,\"1005\":1,\"1236\":1,\"1315\":2,\"1324\":2,\"1384\":2,\"1431\":2,\"1433\":1,\"1434\":1,\"1435\":1,\"1440\":2,\"1443\":1,\"1444\":1,\"1447\":1,\"1450\":1,\"1455\":1,\"1456\":1,\"1457\":1,\"1458\":1,\"1459\":1,\"1461\":1,\"1462\":1,\"1463\":1,\"1464\":1,\"1467\":1,\"1469\":1,\"1564\":1,\"1999\":1,\"2289\":1,\"2837\":1,\"2855\":2,\"2860\":1,\"2861\":1,\"2878\":2,\"2879\":1,\"2880\":1,\"2881\":2,\"2884\":2,\"2885\":2,\"2903\":1,\"2909\":1,\"2951\":1}}],[\"utils\",{\"1\":{\"270\":1,\"289\":1,\"1612\":1,\"1672\":1,\"1743\":1,\"3245\":1}}],[\"util\",{\"1\":{\"269\":5,\"279\":3,\"286\":6,\"289\":4,\"293\":2,\"471\":1,\"538\":1,\"1094\":1,\"1160\":1,\"1162\":2,\"1224\":1,\"1225\":1,\"1228\":2,\"1238\":1,\"1420\":1,\"1444\":1,\"1884\":1,\"2000\":1,\"2147\":1,\"2148\":1,\"2149\":1,\"2150\":1,\"2151\":1,\"2170\":1,\"2215\":1,\"2216\":1,\"2217\":1,\"2218\":1,\"2220\":1,\"2221\":2,\"2223\":1,\"2224\":1,\"2228\":1,\"2269\":1,\"2282\":1,\"2323\":4,\"2324\":2,\"2325\":4,\"2326\":4,\"2327\":3,\"2328\":5,\"2329\":4,\"2369\":2,\"2373\":5,\"2406\":2,\"2407\":2,\"2408\":2,\"2409\":3,\"2410\":6,\"2427\":2,\"2429\":4,\"2465\":4,\"2466\":4,\"2467\":3,\"2468\":2,\"2485\":1,\"2512\":1,\"2513\":5,\"2516\":1,\"2522\":5,\"2523\":6,\"2524\":2,\"2525\":4,\"2544\":3,\"2685\":1,\"2763\":1,\"2768\":3,\"2881\":1,\"2892\":2,\"2893\":2,\"2897\":2,\"2905\":1,\"2916\":2,\"2921\":4,\"3007\":1,\"3147\":1,\"3164\":1,\"3165\":1,\"3190\":1,\"3206\":1,\"3212\":1,\"3215\":1,\"3217\":2,\"3245\":1}}],[\"urandom\",{\"1\":{\"1548\":1,\"1697\":1,\"3246\":1}}],[\"uri\",{\"1\":{\"471\":5,\"529\":2,\"1095\":1,\"1408\":1,\"1412\":2,\"3103\":1,\"3190\":3,\"3199\":1,\"3211\":1,\"3212\":7,\"3215\":5,\"3238\":2}}],[\"url与实际网络位置绑定\",{\"1\":{\"3187\":1}}],[\"url标识\",{\"1\":{\"3177\":1}}],[\"url格式\",{\"0\":{\"3177\":1}}],[\"url>\",{\"1\":{\"981\":1,\"984\":1,\"985\":1,\"999\":5}}],[\"urls\",{\"1\":{\"529\":2}}],[\"url=$\",{\"1\":{\"2020\":1}}],[\"url=jdbc\",{\"1\":{\"403\":1,\"445\":2,\"1644\":2}}],[\"url=\",{\"1\":{\"285\":2}}],[\"urlencoder\",{\"1\":{\"269\":2,\"286\":1,\"294\":1}}],[\"url\",{\"0\":{\"1408\":1},\"1\":{\"235\":2,\"280\":1,\"285\":2,\"286\":5,\"294\":4,\"404\":1,\"406\":2,\"407\":1,\"529\":3,\"992\":2,\"1432\":2,\"1433\":2,\"1434\":2,\"1435\":2,\"1436\":2,\"1440\":1,\"1443\":1,\"1444\":1,\"1656\":1,\"1711\":1,\"2020\":1,\"3104\":1}}],[\"uroot\",{\"1\":{\"122\":1,\"1577\":1,\"1578\":1,\"1773\":1,\"1823\":2,\"3282\":1}}],[\"udtswizrfffqkn3vuekqtrjqkfrqme0wmtswmrinufcotnwaxhyouhnmeywyxdvzwdunkvsrgtrq\",{\"1\":{\"3273\":1}}],[\"udp+事务重传\",{\"1\":{\"3227\":1}}],[\"udpprovider\",{\"1\":{\"3218\":3}}],[\"udplisteningpoint\",{\"1\":{\"3218\":2}}],[\"udp传输不可靠\",{\"1\":{\"3195\":1}}],[\"udp和文件传输的编程\",{\"1\":{\"3123\":1}}],[\"udpreceiver\",{\"1\":{\"3066\":1}}],[\"udp接收端已启动\",{\"1\":{\"3066\":1}}],[\"udp接收端示例\",{\"1\":{\"3066\":1}}],[\"udp接收端代码\",{\"1\":{\"3066\":1}}],[\"udp数据发送成功\",{\"1\":{\"3066\":1}}],[\"udpsender\",{\"1\":{\"3066\":1}}],[\"udp发送端示例\",{\"1\":{\"3066\":1}}],[\"udp发送端代码\",{\"1\":{\"3066\":1}}],[\"udp通信通道\",{\"1\":{\"3117\":1}}],[\"udp通信不需要建立连接\",{\"1\":{\"3066\":1}}],[\"udp通信示例\",{\"0\":{\"3066\":1}}],[\"udp协议\",{\"0\":{\"3062\":1}}],[\"udp\",{\"1\":{\"1092\":1,\"1094\":2,\"3059\":1,\"3062\":1,\"3066\":1,\"3176\":1,\"3180\":1,\"3190\":3,\"3206\":2,\"3218\":2,\"3246\":1,\"3282\":1}}],[\"udf\",{\"1\":{\"125\":4}}],[\"udba\",{\"1\":{\"115\":1}}],[\"unusedvariable\",{\"1\":{\"3136\":1}}],[\"unused\",{\"1\":{\"3136\":1}}],[\"unpooled\",{\"1\":{\"3130\":1}}],[\"unnamed\",{\"1\":{\"2994\":1}}],[\"unnecessarystringcreation\",{\"1\":{\"1056\":1}}],[\"unmodifiable\",{\"1\":{\"2358\":2}}],[\"unmodifiablelist返回的列表不可修改\",{\"1\":{\"1191\":1}}],[\"unmodifiablelist\",{\"1\":{\"1191\":1,\"2358\":4}}],[\"unbantu系统指令\",{\"1\":{\"1788\":1}}],[\"unzip和zip包下载地址\",{\"1\":{\"1636\":1}}],[\"unzip\",{\"1\":{\"1636\":1,\"1863\":1}}],[\"unlinklast\",{\"1\":{\"2497\":2}}],[\"unlinkfirst\",{\"1\":{\"2497\":2}}],[\"unlink\",{\"1\":{\"2496\":4,\"2498\":1}}],[\"unlimited\",{\"1\":{\"1570\":1,\"1610\":2}}],[\"unloading\",{\"1\":{\"741\":1}}],[\"unlock\",{\"1\":{\"642\":2,\"643\":2,\"1129\":1,\"1570\":1,\"2282\":1,\"2356\":2,\"2429\":2,\"2456\":1,\"2513\":2,\"2544\":2,\"2697\":2}}],[\"unauthorized响应\",{\"1\":{\"3215\":1}}],[\"unauthorized需要重新发送带认证信息的请求\",{\"1\":{\"3196\":1}}],[\"unauthorized\",{\"1\":{\"1764\":1}}],[\"uname\",{\"1\":{\"1472\":1,\"1478\":1,\"1479\":1,\"1497\":1,\"1714\":4,\"1747\":2,\"1800\":1,\"1838\":1,\"3246\":2}}],[\"unable\",{\"0\":{\"1665\":1},\"1\":{\"264\":1,\"1005\":1}}],[\"underlinetocamel\",{\"1\":{\"3000\":2}}],[\"under\",{\"1\":{\"1578\":1}}],[\"undertow等服务器\",{\"1\":{\"391\":1}}],[\"undeclared\",{\"1\":{\"125\":1}}],[\"uncaughtexceptionhandler提供了一种集中处理线程中未捕获异常的机制\",{\"1\":{\"1254\":1}}],[\"uncaughtexceptionhandler捕获未处理异常\",{\"1\":{\"1254\":1}}],[\"uncaughtexceptionhandler的作用是什么\",{\"1\":{\"1254\":1}}],[\"unchanged\",{\"1\":{\"997\":1}}],[\"unchecked\",{\"1\":{\"283\":1,\"290\":2,\"1181\":2,\"2439\":1,\"2441\":1,\"2601\":1,\"2655\":1,\"2923\":1,\"2926\":1,\"3007\":1}}],[\"uncomparablekey\",{\"1\":{\"2668\":2}}],[\"uncompress\",{\"1\":{\"125\":2}}],[\"uncommitted\",{\"1\":{\"348\":1}}],[\"uncommitted事务期间\",{\"1\":{\"125\":1}}],[\"unwatch\",{\"1\":{\"206\":1}}],[\"unknow\",{\"1\":{\"125\":1}}],[\"unknown\",{\"1\":{\"125\":17,\"2885\":1}}],[\"unset\",{\"1\":{\"264\":2}}],[\"unsignedrightshift\",{\"1\":{\"2112\":1}}],[\"unsigned\",{\"1\":{\"232\":16,\"1684\":16}}],[\"unsafequeue\",{\"1\":{\"2478\":1}}],[\"unsafebuilder\",{\"1\":{\"2269\":3}}],[\"unsafecache\",{\"1\":{\"2039\":1}}],[\"unsafelist\",{\"1\":{\"1186\":2}}],[\"unsafe\",{\"1\":{\"125\":1}}],[\"unsupportedoperationexception\",{\"0\":{\"2342\":1},\"1\":{\"1191\":3,\"1194\":1,\"1210\":1,\"1211\":1,\"2358\":1}}],[\"unsupportedencodingexception\",{\"1\":{\"286\":1}}],[\"unsupported\",{\"1\":{\"125\":3,\"1974\":1,\"1987\":1}}],[\"until一起执行按步复制时\",{\"1\":{\"125\":1}}],[\"until\",{\"1\":{\"125\":3}}],[\"unicode\",{\"1\":{\"2903\":1}}],[\"unicode=true\",{\"1\":{\"1644\":1}}],[\"universalarrayprinter\",{\"1\":{\"2234\":1}}],[\"unix的聪明之处\",{\"1\":{\"1887\":1}}],[\"unix系统是用来存储\",{\"1\":{\"1887\":1}}],[\"unix\",{\"1\":{\"1880\":1}}],[\"unit\",{\"1\":{\"1620\":1,\"1752\":1,\"2462\":2,\"2467\":4,\"2539\":1}}],[\"uninit\",{\"1\":{\"125\":1}}],[\"unionpay\",{\"1\":{\"2746\":1}}],[\"union\",{\"1\":{\"125\":1,\"281\":3,\"2372\":2}}],[\"uniquepersons\",{\"1\":{\"1182\":2}}],[\"unique\",{\"1\":{\"125\":3,\"232\":10,\"1684\":10,\"1687\":2}}],[\"uniq\",{\"1\":{\"125\":1,\"1838\":2}}],[\"unexpected\",{\"1\":{\"125\":1}}],[\"unread\",{\"1\":{\"122\":1}}],[\"u\",{\"1\":{\"121\":1,\"123\":1,\"125\":3,\"227\":1,\"280\":1,\"1504\":1,\"1577\":1,\"1578\":1,\"1607\":1,\"1636\":1,\"1642\":2,\"1656\":1,\"1711\":1,\"1773\":1,\"1775\":1,\"1797\":1,\"1843\":1,\"1866\":1,\"1880\":1}}],[\"uppercaselist\",{\"1\":{\"553\":1}}],[\"uploadfile\",{\"1\":{\"434\":1}}],[\"upload\",{\"1\":{\"434\":1,\"1238\":1}}],[\"upstream\",{\"1\":{\"280\":1,\"1404\":1,\"1405\":1,\"1406\":1,\"1407\":1,\"1408\":1}}],[\"updatable\",{\"1\":{\"125\":1}}],[\"updatedialogstate\",{\"1\":{\"3209\":1,\"3223\":1}}],[\"updatetransactionstate\",{\"1\":{\"3208\":4}}],[\"updatetime\",{\"1\":{\"3053\":1}}],[\"updatetime`\",{\"1\":{\"1687\":2}}],[\"updateproduct\",{\"1\":{\"3170\":1}}],[\"updatename\",{\"1\":{\"2993\":1}}],[\"updates\",{\"1\":{\"1004\":1}}],[\"update>\",{\"1\":{\"439\":1}}],[\"update已被截短为set\",{\"1\":{\"125\":1}}],[\"update被忽略\",{\"1\":{\"125\":1}}],[\"update子句无效\",{\"1\":{\"125\":1}}],[\"update子句中\",{\"1\":{\"125\":1}}],[\"updateuser\",{\"1\":{\"81\":1,\"381\":2,\"427\":2,\"438\":1,\"439\":2,\"440\":1,\"1737\":1,\"2770\":2,\"3154\":1}}],[\"updatemany等\",{\"1\":{\"94\":1}}],[\"updatemany\",{\"1\":{\"49\":1,\"54\":1,\"86\":1}}],[\"updateone\",{\"1\":{\"49\":1,\"86\":1}}],[\"update\",{\"1\":{\"49\":4,\"122\":2,\"125\":9,\"366\":1,\"438\":4,\"439\":1,\"1790\":2,\"1796\":2,\"1814\":2,\"1821\":1,\"1827\":4,\"1833\":1,\"1834\":1,\"3053\":1,\"3164\":3,\"3170\":1,\"3245\":3,\"3246\":1,\"3250\":1}}],[\"upgrading\",{\"1\":{\"122\":1}}],[\"upgrade\",{\"1\":{\"122\":4,\"216\":3}}],[\"up\",{\"1\":{\"115\":2,\"250\":1,\"1004\":1,\"2020\":1,\"3246\":4,\"3250\":1,\"3271\":1,\"3273\":1}}],[\"us是用户cpu使用率\",{\"1\":{\"1887\":1}}],[\"us\",{\"1\":{\"1887\":3}}],[\"usa\",{\"1\":{\"1578\":1}}],[\"usage\",{\"1\":{\"125\":2,\"1642\":2,\"1809\":1}}],[\"uspan\",{\"1\":{\"1431\":2,\"1433\":2,\"1434\":2,\"1435\":2}}],[\"uslave\",{\"1\":{\"165\":1}}],[\"using\",{\"1\":{\"122\":1,\"125\":1,\"232\":2,\"282\":1,\"741\":1,\"1005\":1,\"1687\":2}}],[\"usr\",{\"0\":{\"1729\":1,\"1730\":1},\"1\":{\"113\":2,\"219\":1,\"998\":1,\"1354\":1,\"1369\":2,\"1371\":1,\"1372\":1,\"1384\":2,\"1402\":3,\"1416\":2,\"1417\":1,\"1503\":4,\"1510\":1,\"1512\":3,\"1518\":1,\"1526\":2,\"1548\":1,\"1586\":14,\"1590\":2,\"1595\":1,\"1619\":2,\"1620\":1,\"1624\":3,\"1634\":1,\"1638\":1,\"1661\":2,\"1667\":2,\"1675\":1,\"1677\":1,\"1697\":1,\"1714\":7,\"1728\":1,\"1729\":1,\"1730\":1,\"1731\":1,\"1734\":7,\"1738\":1,\"1747\":3,\"1751\":2,\"1752\":1,\"1756\":4,\"1764\":3,\"1779\":3,\"1783\":4,\"1784\":2,\"1785\":6,\"1786\":2,\"1787\":1,\"1839\":1,\"1873\":4,\"3246\":4,\"3248\":2,\"3249\":1}}],[\"usegeneratedkeys\",{\"1\":{\"3164\":1}}],[\"usegcoverheadlimit\",{\"1\":{\"1558\":1}}],[\"uses\",{\"1\":{\"2020\":2}}],[\"usessl=false\",{\"1\":{\"235\":2,\"1648\":1,\"1685\":1}}],[\"useful\",{\"1\":{\"1578\":1}}],[\"useincrementalcompilation>\",{\"1\":{\"956\":1}}],[\"useunicode=true\",{\"1\":{\"235\":1,\"1644\":1,\"1648\":1,\"1685\":1}}],[\"use`\",{\"1\":{\"232\":1,\"1684\":1}}],[\"used内存数\",{\"1\":{\"1885\":1}}],[\"used\",{\"1\":{\"125\":5,\"156\":1,\"193\":1,\"1642\":2,\"1885\":3,\"2512\":1}}],[\"userkey\",{\"1\":{\"3235\":2}}],[\"usercredential\",{\"1\":{\"3238\":1}}],[\"usercredentialstore\",{\"1\":{\"3215\":3,\"3238\":1}}],[\"usercontrollertest\",{\"1\":{\"450\":1}}],[\"usercontroller\",{\"1\":{\"380\":1,\"427\":1,\"428\":1,\"434\":1,\"452\":1}}],[\"userbuilder\",{\"1\":{\"3162\":1}}],[\"userproto\",{\"1\":{\"3085\":4}}],[\"user类初始化阶段执行静态代码块\",{\"1\":{\"2980\":2}}],[\"user类未加载\",{\"1\":{\"2980\":3}}],[\"user3\",{\"1\":{\"2969\":4}}],[\"userorderservice\",{\"1\":{\"2770\":1}}],[\"usermap\",{\"1\":{\"2059\":2}}],[\"usermapper\",{\"1\":{\"439\":5,\"3052\":4,\"3164\":1}}],[\"usernotfoundexception\",{\"1\":{\"2035\":2,\"2054\":1}}],[\"username`\",{\"1\":{\"1687\":1}}],[\"username=1305366530\",{\"1\":{\"1644\":1}}],[\"username=\",{\"1\":{\"1431\":2,\"1433\":1,\"1434\":1,\"1435\":1}}],[\"username=root\",{\"1\":{\"403\":1,\"445\":2,\"1644\":2}}],[\"username>\",{\"1\":{\"998\":1}}],[\"usernamevariable\",{\"1\":{\"280\":1,\"1656\":1,\"1711\":1}}],[\"usernamepasswordauthenticationfilter\",{\"1\":{\"456\":1}}],[\"usernamepasswordauthenticationtoken\",{\"1\":{\"456\":2}}],[\"usernamepassword\",{\"1\":{\"280\":1,\"1656\":1,\"1711\":1}}],[\"username\",{\"1\":{\"81\":3,\"232\":2,\"257\":1,\"280\":3,\"303\":1,\"404\":1,\"407\":1,\"456\":4,\"521\":3,\"578\":1,\"992\":1,\"1069\":1,\"1094\":3,\"1267\":3,\"1357\":1,\"1358\":1,\"1423\":1,\"1427\":1,\"1431\":7,\"1433\":5,\"1434\":5,\"1435\":4,\"1440\":11,\"1464\":3,\"1523\":1,\"1563\":1,\"1575\":1,\"1638\":1,\"1649\":1,\"1656\":2,\"1684\":6,\"1688\":1,\"1711\":3,\"1813\":1,\"1841\":1,\"1865\":2,\"1998\":1,\"2065\":1,\"2066\":5,\"2071\":2,\"2255\":5,\"2733\":7,\"2759\":5,\"2779\":5,\"3000\":1,\"3003\":6,\"3050\":1,\"3053\":2,\"3141\":2,\"3164\":1,\"3165\":1,\"3215\":7,\"3224\":1,\"3238\":4}}],[\"useradd\",{\"1\":{\"1855\":1}}],[\"useradmin\",{\"1\":{\"1736\":1}}],[\"useradminanydatabase\",{\"1\":{\"223\":1,\"1736\":2}}],[\"user>>\",{\"1\":{\"1439\":1}}],[\"user>\",{\"1\":{\"1439\":4,\"2059\":2}}],[\"user>转json\",{\"1\":{\"1439\":2}}],[\"user对象\",{\"1\":{\"1439\":1}}],[\"user对象转json\",{\"1\":{\"1439\":2}}],[\"uservalidator\",{\"1\":{\"1208\":1}}],[\"usereleaseprofile>\",{\"1\":{\"1003\":1}}],[\"userid=123\",{\"1\":{\"3002\":1}}],[\"userid=\",{\"1\":{\"3002\":1}}],[\"userid\",{\"1\":{\"521\":1,\"2007\":1,\"2035\":2,\"2525\":13,\"3002\":8,\"3160\":2}}],[\"user2\",{\"1\":{\"441\":3,\"1439\":2,\"2969\":3}}],[\"user1\",{\"1\":{\"441\":2,\"2969\":5}}],[\"userresultmap\",{\"1\":{\"3053\":1}}],[\"userresultmap继承泛型resultmap\",{\"1\":{\"3053\":1}}],[\"userrestcontroller\",{\"1\":{\"381\":1}}],[\"userrequest类\",{\"1\":{\"2065\":1}}],[\"userrequest\",{\"1\":{\"2065\":2,\"2068\":1}}],[\"userrepository\",{\"1\":{\"440\":8,\"441\":4,\"580\":7,\"1068\":1,\"1208\":1,\"2054\":1,\"2068\":1,\"3050\":4,\"3159\":2,\"3166\":4}}],[\"userdaoimpl\",{\"1\":{\"3005\":3}}],[\"userdao\",{\"1\":{\"324\":7,\"325\":7,\"326\":3,\"352\":3,\"354\":3,\"1949\":4,\"2999\":6,\"3005\":6,\"3049\":4}}],[\"user`\",{\"1\":{\"232\":4,\"1684\":4,\"1687\":2}}],[\"user=3\",{\"1\":{\"3246\":1}}],[\"user=0\",{\"1\":{\"774\":1}}],[\"user=guest\",{\"1\":{\"255\":1}}],[\"user=root\",{\"1\":{\"235\":1,\"1584\":1,\"1643\":1}}],[\"user=mysql\",{\"1\":{\"115\":1}}],[\"user=\",{\"1\":{\"102\":2,\"110\":1,\"1821\":1}}],[\"users集合写入\",{\"1\":{\"1736\":1}}],[\"userservletxxx\",{\"1\":{\"1435\":1}}],[\"userservlet\",{\"1\":{\"1431\":4,\"1433\":1,\"1434\":1,\"1440\":3}}],[\"userserviceimpl\",{\"1\":{\"1267\":2,\"1440\":1,\"1949\":1}}],[\"userservicetest\",{\"1\":{\"449\":1,\"3166\":1}}],[\"userservice\",{\"1\":{\"278\":1,\"324\":2,\"325\":1,\"326\":1,\"352\":1,\"354\":1,\"366\":1,\"380\":4,\"381\":7,\"427\":7,\"438\":1,\"439\":1,\"440\":1,\"441\":1,\"449\":4,\"580\":2,\"1068\":1,\"1266\":2,\"1267\":9,\"1440\":1,\"1948\":1,\"1949\":1,\"1996\":1,\"2035\":1,\"2065\":1,\"2068\":1,\"2770\":1,\"2999\":8,\"3049\":1,\"3050\":1,\"3052\":1,\"3154\":1,\"3159\":2,\"3166\":3}}],[\"users\",{\"1\":{\"81\":1,\"91\":1,\"122\":2,\"219\":2,\"232\":1,\"234\":2,\"270\":1,\"307\":1,\"380\":2,\"381\":1,\"427\":1,\"428\":1,\"434\":1,\"449\":2,\"450\":2,\"578\":1,\"998\":1,\"1440\":2,\"1503\":1,\"1575\":1,\"1644\":1,\"1684\":2,\"1764\":1,\"2057\":1,\"2058\":2,\"2059\":2,\"2065\":1,\"3000\":2,\"3005\":2,\"3273\":1,\"3282\":1}}],[\"user\",{\"1\":{\"81\":1,\"99\":2,\"107\":1,\"122\":6,\"125\":13,\"223\":1,\"228\":1,\"229\":1,\"232\":4,\"278\":1,\"307\":4,\"352\":3,\"354\":3,\"366\":8,\"380\":3,\"381\":12,\"427\":10,\"428\":5,\"438\":17,\"439\":14,\"440\":11,\"441\":2,\"449\":3,\"450\":7,\"451\":2,\"452\":4,\"456\":5,\"501\":7,\"517\":7,\"578\":1,\"580\":1,\"994\":1,\"997\":1,\"1068\":1,\"1069\":8,\"1203\":1,\"1208\":6,\"1225\":11,\"1363\":1,\"1411\":1,\"1412\":2,\"1423\":1,\"1427\":1,\"1439\":13,\"1563\":1,\"1570\":1,\"1573\":1,\"1575\":2,\"1578\":3,\"1595\":3,\"1607\":1,\"1620\":1,\"1638\":3,\"1648\":1,\"1649\":1,\"1684\":3,\"1685\":1,\"1688\":1,\"1736\":1,\"1737\":2,\"1752\":1,\"1775\":5,\"1816\":2,\"1819\":3,\"1821\":1,\"1872\":1,\"1873\":1,\"1882\":2,\"1948\":5,\"1949\":10,\"2007\":2,\"2012\":1,\"2032\":3,\"2035\":1,\"2054\":5,\"2059\":6,\"2066\":3,\"2068\":7,\"2266\":2,\"2733\":1,\"2759\":3,\"2770\":8,\"2795\":1,\"2965\":7,\"2968\":2,\"2969\":11,\"2970\":11,\"2971\":15,\"2974\":6,\"2980\":4,\"2983\":2,\"2984\":2,\"2986\":7,\"2989\":9,\"2990\":6,\"2993\":9,\"2999\":2,\"3000\":6,\"3002\":2,\"3003\":6,\"3005\":7,\"3010\":7,\"3049\":3,\"3050\":1,\"3052\":1,\"3053\":1,\"3085\":7,\"3141\":2,\"3154\":5,\"3159\":1,\"3162\":3,\"3164\":11,\"3165\":3,\"3166\":5,\"3177\":2,\"3235\":3,\"3238\":1,\"3246\":1,\"3273\":4}}],[\"use\",{\"1\":{\"80\":1,\"81\":1,\"113\":1,\"125\":5,\"235\":1,\"263\":1,\"266\":1,\"1569\":1,\"1640\":1,\"1736\":2,\"1737\":2,\"1763\":1,\"1764\":1,\"1825\":1,\"3135\":1}}],[\"选中本科\",{\"1\":{\"1464\":2}}],[\"选中女\",{\"1\":{\"1464\":2}}],[\"选中后点击上方的close\",{\"1\":{\"1004\":1}}],[\"选择支持docker\",{\"1\":{\"3110\":1}}],[\"选择内置工具\",{\"1\":{\"3110\":1}}],[\"选择o\",{\"1\":{\"2717\":1}}],[\"选择排序\",{\"1\":{\"2702\":1}}],[\"选择流程建议\",{\"1\":{\"2542\":1}}],[\"选择并发集合应考虑以下因素\",{\"1\":{\"2542\":1}}],[\"选择从头节点或尾节点开始遍历\",{\"1\":{\"2501\":1}}],[\"选择建议\",{\"1\":{\"2456\":1,\"2513\":1,\"2698\":1,\"2909\":1}}],[\"选择hashset或linkedhashset\",{\"1\":{\"2383\":1}}],[\"选择timsort的原因\",{\"1\":{\"2357\":1}}],[\"选择31作为乘数的原因\",{\"1\":{\"2295\":1}}],[\"选择集合框架\",{\"1\":{\"2156\":1}}],[\"选择数组\",{\"1\":{\"2156\":1}}],[\"选择web服务器的进程可以由进程或者线程的峰值一直下调\",{\"1\":{\"1887\":1}}],[\"选择标签为type\",{\"1\":{\"1660\":1}}],[\"选择el7下载\",{\"1\":{\"1636\":2}}],[\"选择es数据源\",{\"1\":{\"1542\":1}}],[\"选择自定义skywalking\",{\"1\":{\"1549\":1}}],[\"选择\",{\"0\":{\"1476\":1}}],[\"选择器\",{\"0\":{\"2916\":1},\"1\":{\"1227\":1,\"1455\":2,\"1460\":1,\"2911\":1}}],[\"选择合适的父类\",{\"1\":{\"2938\":1}}],[\"选择合适的初始容量可减少扩容次数\",{\"1\":{\"2639\":1}}],[\"选择合适的基础数据结构\",{\"1\":{\"2544\":1}}],[\"选择合适的文档自动化技术和方法\",{\"1\":{\"1992\":1}}],[\"选择合适的文档工具\",{\"1\":{\"1979\":1}}],[\"选择合适的文档存储方式和位置\",{\"1\":{\"1966\":1}}],[\"选择合适的存储方式和位置\",{\"1\":{\"1958\":1}}],[\"选择合适的docker版本\",{\"1\":{\"1617\":1,\"1623\":1,\"1749\":1,\"1755\":1}}],[\"选择合适的集合类型至关重要\",{\"1\":{\"1187\":1}}],[\"选择合适的垃圾回收器\",{\"1\":{\"1154\":1}}],[\"选择合适的分片键需要考虑以下几个因素\",{\"1\":{\"75\":1}}],[\"选择策略\",{\"1\":{\"1086\":1}}],[\"选择垃圾收集器应考虑\",{\"1\":{\"818\":1,\"852\":1,\"886\":1,\"920\":1}}],[\"选择团队成员熟悉的技术栈\",{\"1\":{\"568\":1}}],[\"选择m1适合的版本\",{\"0\":{\"248\":1}}],[\"选出新的master之后\",{\"1\":{\"182\":1}}],[\"选取一个slave作为master\",{\"1\":{\"177\":1}}],[\"选用rdb\",{\"1\":{\"142\":1}}],[\"选用aof\",{\"1\":{\"142\":1}}],[\"选项是执行的意思\",{\"1\":{\"1873\":1}}],[\"选项\",{\"1\":{\"125\":1}}],[\"选项卡\",{\"0\":{\"17\":1}}],[\"写线程修改完成\",{\"1\":{\"2523\":1}}],[\"写线程添加元素\",{\"1\":{\"2523\":1}}],[\"写线程\",{\"1\":{\"2523\":1}}],[\"写线程互斥访问\",{\"1\":{\"612\":1}}],[\"写时复制容器原理\",{\"0\":{\"2528\":1}}],[\"写时复制机制\",{\"1\":{\"2456\":1,\"2513\":1}}],[\"写时复制\",{\"1\":{\"2356\":1,\"2518\":1,\"2519\":1}}],[\"写操作频繁\",{\"1\":{\"2542\":1}}],[\"写操作时复制整个数组\",{\"1\":{\"2519\":1}}],[\"写操作\",{\"1\":{\"2513\":1}}],[\"写操作成本高\",{\"1\":{\"2356\":1,\"2456\":1,\"2513\":1}}],[\"写操作复制整个数组\",{\"1\":{\"2356\":1,\"2456\":1,\"2528\":1}}],[\"写操作仍需互斥\",{\"1\":{\"2356\":1}}],[\"写操作后插入storestore屏障和storeload屏障\",{\"1\":{\"668\":1}}],[\"写缓存等策略提升应用性能\",{\"1\":{\"1884\":1}}],[\"写模式\",{\"1\":{\"1338\":1}}],[\"写\",{\"1\":{\"1328\":1}}],[\"写数据\",{\"1\":{\"161\":2}}],[\"写是将redis进程内的数据转化为写命令同步到新aof文件的过程\",{\"1\":{\"140\":1}}],[\"写入builder类代码\",{\"1\":{\"3162\":1}}],[\"写入后状态\",{\"1\":{\"3116\":1}}],[\"写入后未调用force\",{\"1\":{\"2920\":1}}],[\"写入响应\",{\"1\":{\"2921\":1}}],[\"写入任何数据\",{\"1\":{\"2920\":1}}],[\"写入→flip\",{\"1\":{\"2920\":1}}],[\"写入等\",{\"1\":{\"2916\":1}}],[\"写入\",{\"1\":{\"2914\":1}}],[\"写入平台特定的换行符\",{\"1\":{\"2869\":1}}],[\"写入平台无关的换行符\",{\"1\":{\"2867\":1}}],[\"写入过程\",{\"1\":{\"2865\":1}}],[\"写入换行符\",{\"1\":{\"2856\":1,\"2901\":1}}],[\"写入行号和内容\",{\"1\":{\"2856\":1,\"2867\":1}}],[\"写入字符串的一部分\",{\"1\":{\"2869\":1}}],[\"写入字符串str的所有字符\",{\"1\":{\"2854\":1}}],[\"写入字符数组cbuf的所有字符\",{\"1\":{\"2854\":1}}],[\"写入单个字符\",{\"1\":{\"2854\":1}}],[\"写入基本数据类型\",{\"1\":{\"2845\":1}}],[\"写入的数据\",{\"1\":{\"2844\":1}}],[\"写入的频率等\",{\"1\":{\"75\":1}}],[\"写入指定的字节\",{\"1\":{\"2842\":1}}],[\"写入成功\",{\"1\":{\"2837\":1}}],[\"写入会覆盖文件原有内容\",{\"1\":{\"2832\":1}}],[\"写入数据到buffer\",{\"1\":{\"3116\":1}}],[\"写入数据到缓冲区\",{\"1\":{\"2914\":2}}],[\"写入数据后\",{\"1\":{\"2914\":1}}],[\"写入数据\",{\"1\":{\"2832\":1,\"2844\":1,\"2917\":1,\"3116\":1}}],[\"写入配置文件\",{\"1\":{\"1503\":1}}],[\"写入失败\",{\"1\":{\"1238\":1}}],[\"写入完成\",{\"1\":{\"1238\":2}}],[\"写入0字节\",{\"1\":{\"1235\":1}}],[\"写入时先写入缓冲区\",{\"1\":{\"1224\":1}}],[\"写入各种类型数据\",{\"1\":{\"1222\":1}}],[\"写入主连接时出现网络错误\",{\"1\":{\"125\":1}}],[\"写入通信信息包时出现超时\",{\"1\":{\"125\":1}}],[\"写入通信信息包时出错\",{\"1\":{\"125\":1}}],[\"写入文件时推荐使用printwriter并指定编码\",{\"1\":{\"2909\":1}}],[\"写入文件\",{\"1\":{\"125\":1}}],[\"写关注级别决定了写操作需要确认的节点数量\",{\"1\":{\"95\":1}}],[\"写关注级别控制了写操作的确认方式\",{\"1\":{\"75\":1}}],[\"写作日期为\",{\"1\":{\"29\":1}}],[\"读线程开始遍历\",{\"1\":{\"2523\":1}}],[\"读线程\",{\"1\":{\"2523\":1}}],[\"读高写低\",{\"1\":{\"2518\":1}}],[\"读多写少\",{\"1\":{\"2542\":1}}],[\"读多写少高并发场景\",{\"1\":{\"2456\":1}}],[\"读多写少场景使用copyonwritearraylist\",{\"1\":{\"2536\":1}}],[\"读多写少场景使用readwritelock提高并发性\",{\"1\":{\"649\":1}}],[\"读多写少场景下效率极高\",{\"1\":{\"2528\":1}}],[\"读多写少场景性能好\",{\"1\":{\"2429\":1}}],[\"读多写少场景\",{\"1\":{\"2345\":1,\"2373\":1,\"2389\":1,\"2513\":1,\"2518\":1}}],[\"读操作\",{\"1\":{\"2513\":1}}],[\"读操作性能极高\",{\"1\":{\"2456\":1}}],[\"读操作性能优异\",{\"1\":{\"2356\":1}}],[\"读操作无需加锁\",{\"1\":{\"2392\":1}}],[\"读操作无锁\",{\"1\":{\"2356\":1,\"2416\":1,\"2456\":1,\"2513\":1,\"2519\":1,\"2528\":1}}],[\"读操作可并发执行\",{\"1\":{\"2356\":1}}],[\"读操作前插入loadload屏障和loadstore屏障\",{\"1\":{\"668\":1}}],[\"读模式\",{\"1\":{\"1338\":1}}],[\"读\",{\"1\":{\"1328\":1}}],[\"读锁升级为写锁\",{\"1\":{\"651\":1}}],[\"读提交\",{\"1\":{\"348\":1}}],[\"读未提交\",{\"1\":{\"348\":1}}],[\"读写数据\",{\"1\":{\"3121\":1}}],[\"读写限制位置\",{\"1\":{\"2914\":1,\"3116\":1}}],[\"读写操作都可能抛出异常\",{\"1\":{\"2872\":1}}],[\"读写操作使用不同的锁\",{\"1\":{\"2519\":1}}],[\"读写文件时使用相同的字符编码\",{\"1\":{\"2860\":1}}],[\"读写均衡\",{\"1\":{\"2542\":1}}],[\"读写性能\",{\"1\":{\"2518\":1}}],[\"读写性能好\",{\"1\":{\"1197\":1}}],[\"读写锁实现\",{\"1\":{\"2429\":1}}],[\"读写锁\",{\"1\":{\"2356\":2,\"2697\":1}}],[\"读写锁优化并发读性能\",{\"0\":{\"643\":1}}],[\"读写量过大\",{\"1\":{\"1884\":1}}],[\"读写分离模式\",{\"1\":{\"612\":1}}],[\"读写分离\",{\"1\":{\"162\":1}}],[\"读写关注级别是控制mongodb读写操作的一致性和可用性的机制\",{\"1\":{\"75\":1}}],[\"读数据\",{\"1\":{\"161\":2}}],[\"读取响应\",{\"1\":{\"3117\":1}}],[\"读取后状态\",{\"1\":{\"3116\":1}}],[\"读取后未调用clear\",{\"1\":{\"2920\":1}}],[\"读取内容\",{\"1\":{\"3116\":1}}],[\"读取捕获的数据包\",{\"1\":{\"3099\":1}}],[\"读取请求\",{\"1\":{\"3070\":1}}],[\"读取http请求报文\",{\"1\":{\"3070\":1}}],[\"读取客户端数据\",{\"1\":{\"3065\":1}}],[\"读取\",{\"1\":{\"2916\":1}}],[\"读取和翻转等核心操作\",{\"1\":{\"2914\":1}}],[\"读取和写入文件时必须使用相同的字符编码\",{\"1\":{\"2884\":1}}],[\"读取分散存储的数据片段等\",{\"1\":{\"2897\":1}}],[\"读取序列流并写入到输出文件\",{\"1\":{\"2893\":1}}],[\"读取一行文本\",{\"1\":{\"2869\":1}}],[\"读取一个gbk编码的文本文件并转换为utf\",{\"1\":{\"2861\":1}}],[\"读取一个字节\",{\"1\":{\"2841\":1}}],[\"读取过程\",{\"1\":{\"2865\":1}}],[\"读取最多len个字符到缓冲区数组cbuf\",{\"1\":{\"2853\":1}}],[\"读取最多len个字节到缓冲区数组b\",{\"1\":{\"2841\":1}}],[\"读取多个字符到缓冲区数组cbuf\",{\"1\":{\"2853\":1}}],[\"读取多个字节到缓冲区数组b\",{\"1\":{\"2841\":1}}],[\"读取单个字符\",{\"1\":{\"2853\":1}}],[\"读取接下来的10个字节\",{\"1\":{\"2849\":1}}],[\"读取前5个字节\",{\"1\":{\"2849\":1}}],[\"读取基本数据类型\",{\"1\":{\"2845\":1}}],[\"读取并写入数据\",{\"1\":{\"2833\":1,\"2843\":1}}],[\"读取元素\",{\"1\":{\"2523\":1}}],[\"读取的可能是旧数据\",{\"1\":{\"2513\":1}}],[\"读取的数据\",{\"1\":{\"1222\":1,\"2844\":1,\"2845\":1,\"2914\":1}}],[\"读取到错误数据\",{\"1\":{\"1338\":1}}],[\"读取完成后调用clear\",{\"1\":{\"1338\":1}}],[\"读取消息内容\",{\"1\":{\"1325\":1}}],[\"读取消息长度\",{\"1\":{\"1325\":1}}],[\"读取操作\",{\"1\":{\"1234\":2}}],[\"读取时一次性从底层流读取多个字节\",{\"1\":{\"1224\":1}}],[\"读取数据处理器\",{\"1\":{\"2921\":1}}],[\"读取数据后\",{\"1\":{\"2914\":1}}],[\"读取数据到缓冲区\",{\"1\":{\"2866\":1}}],[\"读取数据时累计已复制字节数\",{\"1\":{\"2837\":1}}],[\"读取数据\",{\"1\":{\"1222\":1,\"1238\":1,\"2831\":1,\"2917\":2,\"3116\":1,\"3120\":1}}],[\"读取配置\",{\"0\":{\"407\":1}}],[\"读取配置server\",{\"1\":{\"153\":1}}],[\"读取日志索引文件时出现i\",{\"1\":{\"125\":1}}],[\"读取主连接时出现网络错误\",{\"1\":{\"125\":1}}],[\"读取通信信息包时出现超时\",{\"1\":{\"125\":1}}],[\"读取通信信息包时出错\",{\"1\":{\"125\":1}}],[\"读取文件内容\",{\"1\":{\"2927\":1}}],[\"读取文件操作\",{\"1\":{\"1044\":2}}],[\"读取文件\",{\"1\":{\"125\":2}}],[\"读关注级别决定了从哪个节点读取数据\",{\"1\":{\"95\":1}}],[\"读关注级别控制了读取的数据的新鲜度\",{\"1\":{\"75\":1}}],[\"读书\",{\"1\":{\"37\":1,\"47\":1,\"84\":1}}],[\"还需要细致的性能调优和架构设计\",{\"1\":{\"3228\":1}}],[\"还为框架提供了强大的灵活性和可扩展性\",{\"1\":{\"3043\":1}}],[\"还为后续java版本的演进奠定了基础\",{\"1\":{\"535\":1}}],[\"还会结合缓存机制\",{\"1\":{\"3011\":1}}],[\"还能帮助开发者优化反射性能\",{\"1\":{\"2977\":1}}],[\"还能建立长期的空值风险管理机制\",{\"1\":{\"522\":1}}],[\"还提供了便捷的按行读写方法\",{\"1\":{\"2867\":1}}],[\"还提供了依赖管理\",{\"1\":{\"934\":1}}],[\"还要易于理解和维护\",{\"1\":{\"2095\":1}}],[\"还可以看见实时速率\",{\"1\":{\"1867\":1}}],[\"还可以用于分布式锁\",{\"1\":{\"129\":1}}],[\"还可能引入新问题\",{\"1\":{\"815\":1,\"849\":1,\"883\":1,\"917\":1}}],[\"还引入了新的api和性能优化\",{\"1\":{\"465\":1}}],[\"还有助于避免常见的编程错误\",{\"1\":{\"1993\":1}}],[\"还有其他专门由于收集数据的轻量型数据采集器beats\",{\"1\":{\"1507\":1}}],[\"还有一个passphase\",{\"1\":{\"997\":1}}],[\"还有一种形式\",{\"1\":{\"137\":1}}],[\"还有串session的风险\",{\"1\":{\"304\":1}}],[\"还是被动接受的连接\",{\"1\":{\"1886\":1}}],[\"还是数据库服务器崩溃\",{\"1\":{\"191\":1}}],[\"还是启动不成功就执行mysqld\",{\"1\":{\"121\":1}}],[\"还是确保数据的一致性\",{\"1\":{\"73\":1}}],[\"还不会编写\",{\"1\":{\"12\":1}}],[\"执行构建动作\",{\"1\":{\"3246\":1}}],[\"执行后容器停止删除容器\",{\"1\":{\"3246\":1}}],[\"执行容器\",{\"1\":{\"3246\":1}}],[\"执行一段命令\",{\"1\":{\"3246\":1}}],[\"执行一些文件命令\",{\"1\":{\"3246\":1}}],[\"执行测试\",{\"1\":{\"3166\":1}}],[\"执行测试并验证结果\",{\"1\":{\"2047\":1}}],[\"执行会导致异常的操作\",{\"1\":{\"3005\":1}}],[\"执行有事务的读操作\",{\"1\":{\"3005\":1}}],[\"执行有事务的写操作\",{\"1\":{\"3005\":1}}],[\"执行sql\",{\"1\":{\"3005\":2}}],[\"执行原方法\",{\"1\":{\"3002\":1}}],[\"执行效率高\",{\"1\":{\"2986\":1}}],[\"执行上述代码会输出\",{\"1\":{\"2980\":1,\"3002\":1,\"3007\":1}}],[\"执行风险操作失败\",{\"1\":{\"2959\":1}}],[\"执行转账逻辑\",{\"1\":{\"2947\":1}}],[\"执行任务\",{\"1\":{\"2467\":1}}],[\"执行延迟任务\",{\"1\":{\"2467\":1}}],[\"执行该命令使其实时生效\",{\"1\":{\"1788\":1}}],[\"执行tree指令\",{\"1\":{\"1779\":1}}],[\"执行失败\",{\"1\":{\"1687\":1}}],[\"执行成功\",{\"1\":{\"1687\":1}}],[\"执行器id列表\",{\"1\":{\"1687\":1}}],[\"执行器名称\",{\"1\":{\"1687\":1}}],[\"执行器appname\",{\"1\":{\"1687\":1}}],[\"执行器地址列表\",{\"1\":{\"1687\":1}}],[\"执行器地址类型\",{\"1\":{\"1687\":1}}],[\"执行器地址\",{\"1\":{\"1687\":1}}],[\"执行器任务分片参数\",{\"1\":{\"1687\":1}}],[\"执行器任务参数\",{\"1\":{\"1687\":2}}],[\"执行器任务handler\",{\"1\":{\"1687\":2}}],[\"执行器路由策略\",{\"1\":{\"1687\":1}}],[\"执行器主键id\",{\"1\":{\"1687\":2}}],[\"执行nacos初始化sql\",{\"1\":{\"1684\":1}}],[\"执行添加命令\",{\"1\":{\"1658\":1}}],[\"执行安装k8s\",{\"1\":{\"1637\":1}}],[\"执行安装脚本\",{\"0\":{\"1628\":1,\"1717\":1}}],[\"执行以下代码后可以重新安装\",{\"1\":{\"1634\":1,\"1638\":1}}],[\"执行以下命令重启docker即可\",{\"1\":{\"1665\":1}}],[\"执行以下命令\",{\"1\":{\"264\":1}}],[\"执行工作目录\",{\"1\":{\"1551\":1}}],[\"执行启动命令\",{\"1\":{\"1548\":1,\"1697\":1}}],[\"执行的脚本路径\",{\"1\":{\"1504\":1}}],[\"执行的功能\",{\"1\":{\"1451\":1,\"1454\":1}}],[\"执行功能\",{\"1\":{\"1453\":4}}],[\"执行隐藏\",{\"1\":{\"1446\":1}}],[\"执行结束\",{\"1\":{\"1267\":1}}],[\"执行相应的操作\",{\"1\":{\"1263\":1}}],[\"执行代码\",{\"1\":{\"1139\":1}}],[\"执行校验\",{\"1\":{\"1069\":1}}],[\"执行目标方法\",{\"1\":{\"1068\":1,\"3005\":1}}],[\"执行引擎\",{\"1\":{\"690\":1}}],[\"执行aba操作\",{\"1\":{\"676\":1}}],[\"执行批量插入\",{\"1\":{\"288\":1}}],[\"执行事务\",{\"1\":{\"206\":1}}],[\"执行写操作时\",{\"1\":{\"161\":1}}],[\"执行时间到期\",{\"1\":{\"153\":1}}],[\"执行\",{\"1\":{\"153\":1,\"625\":1,\"1633\":1,\"1677\":1,\"1687\":3,\"2513\":1}}],[\"执行命令的时候\",{\"1\":{\"3246\":1}}],[\"执行命令df\",{\"1\":{\"1667\":1}}],[\"执行命令查看cnpm是否安装成功\",{\"1\":{\"261\":1}}],[\"执行命令\",{\"1\":{\"125\":1,\"1677\":1,\"3246\":1}}],[\"执行升级操作\",{\"0\":{\"122\":1}}],[\"执行操作\",{\"1\":{\"71\":1,\"91\":1}}],[\"执行聚合操作并返回单个结果\",{\"1\":{\"60\":1}}],[\"开销较大\",{\"1\":{\"3206\":1}}],[\"开销小的特点\",{\"1\":{\"3062\":1}}],[\"开销略高于hashmap\",{\"1\":{\"2636\":1}}],[\"开放包供反射访问\",{\"1\":{\"3010\":1}}],[\"开一个定时任务\",{\"1\":{\"1504\":1}}],[\"开\",{\"1\":{\"1273\":1,\"2973\":1}}],[\"开头那么是在上一条workdir的路径的相对路径\",{\"1\":{\"3246\":1}}],[\"开头或者\",{\"1\":{\"1873\":1}}],[\"开头\",{\"1\":{\"788\":1,\"790\":1,\"822\":1,\"824\":1,\"856\":1,\"858\":1,\"890\":1,\"892\":1,\"2089\":1,\"2090\":1,\"2091\":1}}],[\"开头的名字\",{\"1\":{\"543\":1}}],[\"开头的条目\",{\"1\":{\"283\":1}}],[\"开源分布式追踪系统\",{\"1\":{\"3104\":1}}],[\"开源免费的\",{\"1\":{\"1438\":1,\"1440\":1}}],[\"开源协议\",{\"1\":{\"999\":1}}],[\"开源许可证\",{\"1\":{\"564\":1}}],[\"开源与社区驱动\",{\"0\":{\"564\":1}}],[\"开闭原则\",{\"0\":{\"1209\":1,\"2746\":1},\"1\":{\"549\":1,\"1252\":1,\"2005\":1,\"2446\":1,\"2637\":1,\"2800\":1,\"2835\":1,\"2859\":1,\"2883\":1,\"2895\":1,\"2992\":1,\"3009\":1}}],[\"开箱即用\",{\"1\":{\"396\":1}}],[\"开发规范\",{\"0\":{\"3321\":1}}],[\"开发环境全采样\",{\"1\":{\"3104\":1}}],[\"开发调试信息\",{\"1\":{\"2070\":1}}],[\"开发文档\",{\"1\":{\"1961\":1,\"1971\":1}}],[\"开发\",{\"1\":{\"1507\":1}}],[\"开发思路\",{\"1\":{\"1447\":1}}],[\"开发测试环境\",{\"1\":{\"818\":1,\"852\":1,\"886\":1,\"920\":1}}],[\"开发工具\",{\"1\":{\"559\":1}}],[\"开发者能够更好地应对复杂网络环境下的sip应用开发挑战\",{\"1\":{\"3201\":1}}],[\"开发者只需定义接口即可自动获得crud功能\",{\"1\":{\"3050\":1}}],[\"开发者只需要声明直接依赖\",{\"1\":{\"1030\":1}}],[\"开发者可以表达代码背后的思想和设计理念\",{\"1\":{\"2095\":1}}],[\"开发者可以隐藏内部实现细节\",{\"1\":{\"2085\":1}}],[\"开发者可以通过文档自动化工具了解项目的进展和需求\",{\"1\":{\"1983\":1}}],[\"开发者可以通过文档生态系统了解项目的进展和需求\",{\"1\":{\"1970\":1}}],[\"开发者可以通过文档管理体系了解项目的进展和需求\",{\"1\":{\"1957\":1}}],[\"开发者可以通过api文档了解api的功能和使用方法\",{\"1\":{\"1944\":1}}],[\"开发者需要花费更多的时间和精力去手动创建\",{\"1\":{\"1992\":1}}],[\"开发者需要花费更多的时间和精力去创建\",{\"1\":{\"1979\":1}}],[\"开发者需要花费更多的时间和精力去查找和管理文档\",{\"1\":{\"1966\":1}}],[\"开发者需要花费更多的时间和精力去理解和使用api\",{\"1\":{\"1953\":1}}],[\"开发者根据需求定义的注解\",{\"1\":{\"1063\":1}}],[\"开发者信息\",{\"1\":{\"999\":1}}],[\"开发者体验优先\",{\"0\":{\"513\":1}}],[\"开发者也可以自己指定字段和内容\",{\"1\":{\"303\":1}}],[\"开发效率不如spring生态\",{\"1\":{\"1347\":1}}],[\"开发效率提升\",{\"1\":{\"495\":1}}],[\"开发效率高\",{\"1\":{\"43\":1,\"1086\":1}}],[\"开机自启\",{\"1\":{\"242\":1}}],[\"开始媒体传输\",{\"1\":{\"3188\":1}}],[\"开始的位置\",{\"1\":{\"2498\":1}}],[\"开始\",{\"1\":{\"1469\":1,\"2134\":1}}],[\"开始和结束按钮\",{\"1\":{\"1469\":1}}],[\"开始执行延迟任务\",{\"1\":{\"2467\":1}}],[\"开始执行\",{\"1\":{\"1267\":1}}],[\"开始索引\",{\"1\":{\"288\":1}}],[\"开始出现超时现象\",{\"1\":{\"190\":1}}],[\"开始事务\",{\"1\":{\"71\":1,\"91\":1,\"206\":1}}],[\"开启9090端口的访问\",{\"1\":{\"1876\":1}}],[\"开启防火墙\",{\"1\":{\"1788\":1}}],[\"开启分析器\",{\"1\":{\"1739\":1}}],[\"开启该功能时\",{\"1\":{\"1739\":1}}],[\"开启mongo审计功能\",{\"0\":{\"1738\":1}}],[\"开启认证\",{\"1\":{\"1734\":1,\"1764\":1}}],[\"开启自启\",{\"1\":{\"1620\":1,\"1621\":1,\"1752\":1,\"1753\":1}}],[\"开启自动配置\",{\"1\":{\"463\":3}}],[\"开启也很简单\",{\"1\":{\"1520\":1}}],[\"开启ssl\",{\"1\":{\"1417\":1}}],[\"开启高效传输模式\",{\"1\":{\"1385\":1}}],[\"开启10个nginx才占150m内存\",{\"1\":{\"1377\":1}}],[\"开启顺序\",{\"1\":{\"1368\":1}}],[\"开启模式\",{\"1\":{\"1368\":1}}],[\"开启密码\",{\"1\":{\"1352\":1}}],[\"开启\",{\"1\":{\"783\":1}}],[\"开启页面访问\",{\"0\":{\"256\":1}}],[\"开启后仅响应info\",{\"1\":{\"173\":1}}],[\"开启了客户端\",{\"1\":{\"125\":1}}],[\"仲裁节点\",{\"1\":{\"69\":1,\"1764\":1}}],[\"从性能优化到业务逻辑解耦\",{\"1\":{\"3156\":1}}],[\"从框架配置到代码生成\",{\"1\":{\"3156\":1}}],[\"从buffer读取数据\",{\"1\":{\"3116\":1}}],[\"从基础监控到业务监控的层次化设计\",{\"1\":{\"3109\":1}}],[\"从基础理论到实战应用\",{\"1\":{\"1308\":1}}],[\"从下到上分为\",{\"1\":{\"3058\":1}}],[\"从下到上遍历左边界\",{\"1\":{\"1162\":1}}],[\"从集合中取出元素时需要手动强制转换\",{\"1\":{\"3017\":1}}],[\"从集合中移除元素\",{\"1\":{\"203\":1,\"2602\":1}}],[\"从源通道读取数据到缓冲区\",{\"1\":{\"2915\":1}}],[\"从第一个输入流开始读取\",{\"1\":{\"2889\":1}}],[\"从缓冲区写入数据到目标通道\",{\"1\":{\"2915\":1}}],[\"从缓冲区读取数据\",{\"1\":{\"2873\":1,\"2914\":2}}],[\"从缓存获取对象\",{\"1\":{\"2685\":1}}],[\"从缓存中获取指定键对应的值\",{\"1\":{\"283\":1}}],[\"从底层流填充缓冲区\",{\"1\":{\"2873\":1}}],[\"从字符串str的偏移量off开始写入len个字符\",{\"1\":{\"2854\":1}}],[\"从偏移量off开始存储\",{\"1\":{\"2841\":1,\"2853\":1}}],[\"从严格到宽松依次为\",{\"1\":{\"2733\":1}}],[\"从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点\",{\"1\":{\"2650\":1}}],[\"从双向链表中移除该节点\",{\"1\":{\"2630\":1}}],[\"从尾节点开始遍历\",{\"1\":{\"2495\":1}}],[\"从尾部检索\",{\"1\":{\"1857\":1}}],[\"从头节点开始遍历\",{\"1\":{\"2495\":1}}],[\"从头检索\",{\"1\":{\"1857\":1}}],[\"从数据库获取商品信息\",{\"1\":{\"3170\":1}}],[\"从数据源读取数据到缓冲区\",{\"1\":{\"2865\":1}}],[\"从数据源\",{\"1\":{\"445\":1}}],[\"从数组cbuf的偏移量off开始写入len个字符\",{\"1\":{\"2854\":1}}],[\"从数组b的偏移量off开始写入len个字节\",{\"1\":{\"2842\":1}}],[\"从数学上证明\",{\"1\":{\"2455\":1}}],[\"从现有集合初始化\",{\"1\":{\"2323\":1}}],[\"从索引0到5\",{\"1\":{\"2196\":1}}],[\"从索引7开始到结束\",{\"1\":{\"2196\":1}}],[\"从小粒度单体开始\",{\"1\":{\"2014\":1}}],[\"从ttl第3跳跟踪\",{\"1\":{\"1879\":1}}],[\"从kafka收集消息\",{\"1\":{\"1505\":1}}],[\"从这里开始\",{\"1\":{\"1494\":1}}],[\"从reactor线程组\",{\"1\":{\"3125\":1}}],[\"从reactor\",{\"1\":{\"3083\":1,\"3121\":1}}],[\"从reactor处理io事件\",{\"1\":{\"1347\":1}}],[\"从reactor负责io事件处理\",{\"1\":{\"1328\":1}}],[\"从容应对各类泛型相关问题\",{\"1\":{\"1283\":1}}],[\"从o\",{\"1\":{\"1196\":1,\"2672\":1}}],[\"从右到左遍历下边界\",{\"1\":{\"1162\":1}}],[\"从上到下遍历右边界\",{\"1\":{\"1162\":1}}],[\"从左到右遍历上边界\",{\"1\":{\"1162\":1}}],[\"从等待状态中苏醒过来\",{\"1\":{\"1139\":1}}],[\"从低级别的synchronized到高级别的lock接口及其实现类\",{\"1\":{\"637\":1}}],[\"从servlet\",{\"1\":{\"578\":1}}],[\"从sql线程忽略了查询\",{\"1\":{\"125\":1}}],[\"从j2ee到jakarta\",{\"0\":{\"577\":1}}],[\"从java\",{\"1\":{\"486\":1}}],[\"从1995年诞生至今\",{\"1\":{\"559\":1}}],[\"从16g升级到64g\",{\"1\":{\"161\":1}}],[\"从而解决不同编码导致的乱码问题\",{\"1\":{\"2875\":1}}],[\"从而避免了菱形继承问题\",{\"1\":{\"2753\":1}}],[\"从而避免代码迁移的困难\",{\"1\":{\"2085\":1}}],[\"从而将最坏情况下的时间复杂度从o\",{\"1\":{\"2501\":1}}],[\"从而实现代码的参数化类型\",{\"1\":{\"3013\":1,\"3016\":1}}],[\"从而实现高效的插入和删除操作\",{\"1\":{\"2500\":1}}],[\"从而实现动静分离\",{\"1\":{\"1401\":1}}],[\"从而提高了io性能\",{\"1\":{\"2865\":1}}],[\"从而提高代码的灵活性和可扩展性\",{\"1\":{\"2754\":1}}],[\"从而提高代码的安全性\",{\"1\":{\"2085\":1}}],[\"从而提高cpu利用率\",{\"1\":{\"528\":1}}],[\"从而保证从节点的数据与主节点一致\",{\"1\":{\"1760\":1}}],[\"从而重新执行那些停机前没能够刷新到磁盘的写入操作\",{\"1\":{\"1739\":1}}],[\"从而在有限时间内获得最高的回收效率\",{\"1\":{\"778\":1}}],[\"从而打破了双亲委派模型的单向委派关系\",{\"1\":{\"756\":1}}],[\"从而形成一个自己熟悉且较为完备的知识体系\",{\"1\":{\"0\":1}}],[\"从根本上提高代码质量\",{\"1\":{\"522\":1}}],[\"从传统的类路径\",{\"1\":{\"490\":1}}],[\"从正在运行的jvm中\",{\"1\":{\"480\":1}}],[\"从业务逻辑中分离出来\",{\"1\":{\"311\":1,\"333\":1,\"342\":1}}],[\"从我还是小白时到现在这款插件已经陪伴了我几年光阴\",{\"1\":{\"297\":1}}],[\"从有序集合中移除元素\",{\"1\":{\"204\":1}}],[\"从具有槽的master中分配指定数量的槽到另一个master中\",{\"1\":{\"186\":1}}],[\"从客户端\",{\"1\":{\"161\":1}}],[\"从库\",{\"1\":{\"161\":1}}],[\"从64g升级到128g\",{\"1\":{\"161\":1}}],[\"从服务器的i\",{\"1\":{\"1760\":1}}],[\"从服务器\",{\"1\":{\"161\":1}}],[\"从服务器已停止\",{\"1\":{\"125\":1}}],[\"从服务器正在运行\",{\"1\":{\"125\":1}}],[\"从\",{\"1\":{\"125\":3,\"1775\":1}}],[\"从二进制日志读取数据时\",{\"1\":{\"125\":1}}],[\"从存储引擎中获得错误\",{\"1\":{\"125\":1}}],[\"从节点同步数据\",{\"1\":{\"1764\":1}}],[\"从节点second不参与选举\",{\"1\":{\"1764\":1}}],[\"从节点通过主节点的oplog文件\",{\"1\":{\"1764\":1}}],[\"从节点是通过数据的冗余来提高数据的可靠性\",{\"1\":{\"1764\":1}}],[\"从节点是通过复制主节点来实现数据的同步\",{\"1\":{\"1764\":1}}],[\"从节点备份数据\",{\"1\":{\"1763\":1}}],[\"从节点定期轮询主节点获取这些操作\",{\"1\":{\"1760\":1}}],[\"从节点\",{\"1\":{\"69\":1,\"161\":1,\"1763\":1,\"1764\":1}}],[\"针对高并发场景\",{\"1\":{\"3239\":1}}],[\"针对性优化\",{\"1\":{\"2728\":1}}],[\"针对性异常处理\",{\"1\":{\"1337\":1}}],[\"针对性地改进这些薄弱环节\",{\"1\":{\"522\":1}}],[\"针对开发者最常遇到的困惑点进行优化\",{\"1\":{\"515\":1}}],[\"针对过期数据要进行删除的时候都有哪些删除策略呢\",{\"1\":{\"150\":1}}],[\"针对表的存储引擎不支持二进制表转储\",{\"1\":{\"125\":1}}],[\"针对文本数据创建的索引\",{\"1\":{\"68\":1}}],[\"针对地理空间数据创建的索引\",{\"1\":{\"68\":1}}],[\"针对数组字段创建的索引\",{\"1\":{\"68\":1}}],[\"基类\",{\"1\":{\"1221\":1}}],[\"基准测试工具\",{\"0\":{\"3106\":1}}],[\"基准测试\",{\"1\":{\"818\":1,\"852\":1,\"886\":1,\"920\":1}}],[\"基础镜像\",{\"1\":{\"3246\":1}}],[\"基础流处理数据传输\",{\"1\":{\"2859\":1}}],[\"基础流\",{\"1\":{\"2835\":1}}],[\"基础循环打印法\",{\"0\":{\"2211\":1}}],[\"基础概念题\",{\"1\":{\"1175\":1}}],[\"基础信息\",{\"1\":{\"936\":1}}],[\"基础\",{\"0\":{\"933\":1,\"1941\":1,\"1993\":1,\"2922\":1,\"2961\":1,\"3012\":1,\"3054\":1,\"3131\":1,\"3171\":1}}],[\"基础变量空值提示\",{\"0\":{\"500\":1}}],[\"基础环境\",{\"1\":{\"246\":1}}],[\"基础命令\",{\"0\":{\"197\":1}}],[\"基数统计\",{\"1\":{\"131\":1}}],[\"基本枚举定义\",{\"1\":{\"2818\":1}}],[\"基本语法如下\",{\"1\":{\"2784\":1}}],[\"基本结构如下\",{\"1\":{\"2759\":1}}],[\"基本for循环\",{\"1\":{\"2128\":1}}],[\"基本数据类型直接存储值\",{\"1\":{\"2103\":1,\"2105\":1}}],[\"基本数据类型数量控制在合理范围内\",{\"1\":{\"2103\":1}}],[\"基本数据类型是java语言中内置的\",{\"1\":{\"2099\":1}}],[\"基本数据类型\",{\"0\":{\"2099\":1}}],[\"基本数据库命令\",{\"0\":{\"80\":1}}],[\"基本信任的网络\",{\"1\":{\"1940\":2}}],[\"基本操作示例\",{\"0\":{\"2465\":1}}],[\"基本操作方法\",{\"0\":{\"2265\":1}}],[\"基本操作\",{\"0\":{\"1836\":1},\"1\":{\"1835\":1,\"2314\":1}}],[\"基本选择器\",{\"0\":{\"1455\":1},\"1\":{\"1460\":1}}],[\"基本堆内存配置\",{\"0\":{\"804\":1,\"838\":1,\"872\":1,\"906\":1}}],[\"基本上没用\",{\"1\":{\"3246\":1}}],[\"基本上可以适应常规情况下对用户认证鉴权的精度要求\",{\"1\":{\"306\":1}}],[\"基本上会放弃使用redis\",{\"1\":{\"161\":1}}],[\"基本活动指标\",{\"1\":{\"193\":1}}],[\"基本表的字段没有默认值\",{\"1\":{\"125\":1}}],[\"基本类型未改变\",{\"1\":{\"2785\":1}}],[\"基本类型数组推荐使用arrays\",{\"1\":{\"2223\":1}}],[\"基本类型数组\",{\"0\":{\"2223\":1}}],[\"基本类型参数\",{\"1\":{\"1058\":1}}],[\"基本类型转字符串\",{\"1\":{\"1040\":1,\"2198\":1}}],[\"基本类型与包装类型混用可能导致自动装箱\",{\"1\":{\"2776\":1}}],[\"基本类型与包装类型混用\",{\"0\":{\"2776\":1}}],[\"基本类型与包装类对比示例\",{\"1\":{\"1040\":1}}],[\"基本类型与包装类\",{\"0\":{\"1040\":1}}],[\"基本类型与包装类区别\",{\"1\":{\"1034\":1}}],[\"基本类型原子类使用示例\",{\"0\":{\"675\":1}}],[\"基本类型原子类\",{\"1\":{\"672\":1}}],[\"基本类型\",{\"1\":{\"38\":1,\"1040\":3,\"2080\":1,\"2766\":1,\"2785\":1}}],[\"基于该镜像创建一个容器\",{\"1\":{\"3245\":1}}],[\"基于kubernetes实现自动扩缩容\",{\"1\":{\"3244\":1}}],[\"基于sip构建的企业电话系统架构\",{\"1\":{\"3243\":1}}],[\"基于selector\",{\"1\":{\"1315\":1}}],[\"基于selector的多路复用\",{\"1\":{\"1238\":1}}],[\"基于tcp的加密传输\",{\"1\":{\"3206\":1}}],[\"基于请求\",{\"1\":{\"3198\":1}}],[\"基于注解自动生成重复代码\",{\"1\":{\"3152\":1}}],[\"基于注解的事务管理\",{\"0\":{\"352\":1}}],[\"基于长度字段\",{\"1\":{\"3126\":1}}],[\"基于长度前缀的tcp粘包解决方案\",{\"1\":{\"1325\":1}}],[\"基于自定义分隔符\",{\"1\":{\"3126\":1}}],[\"基于换行符\",{\"1\":{\"3126\":1}}],[\"基于nio的多路复用\",{\"1\":{\"3123\":1}}],[\"基于责任链模式设计监控拦截器\",{\"1\":{\"3111\":1}}],[\"基于google\",{\"1\":{\"3104\":1}}],[\"基于字节流的传输层协议\",{\"1\":{\"3061\":1}}],[\"基于字符序列计算哈希值\",{\"1\":{\"2295\":1}}],[\"基于字符序列比较\",{\"1\":{\"2294\":1}}],[\"基于泛型的crud实现\",{\"1\":{\"3049\":1}}],[\"基于反射的通用深拷贝工具\",{\"1\":{\"3007\":1}}],[\"基于反射的注解验证框架\",{\"0\":{\"3003\":1},\"1\":{\"3003\":1}}],[\"基于异步io\",{\"1\":{\"2921\":1}}],[\"基于同步io\",{\"1\":{\"2921\":1}}],[\"基于事件而非轮询\",{\"1\":{\"3128\":1}}],[\"基于事件响应而非主动轮询\",{\"1\":{\"3089\":1}}],[\"基于事件模型\",{\"1\":{\"2919\":1}}],[\"基于事件驱动的并发处理模式\",{\"1\":{\"3083\":1}}],[\"基于事件驱动\",{\"1\":{\"1328\":1}}],[\"基于数组+链表实现\",{\"1\":{\"2596\":1}}],[\"基于数组的直接索引访问\",{\"1\":{\"2511\":1}}],[\"基于数组的有界阻塞队列\",{\"1\":{\"634\":1}}],[\"基于双向链表实现\",{\"1\":{\"2548\":1}}],[\"基于channel\",{\"1\":{\"3079\":1}}],[\"基于cas操作实现\",{\"1\":{\"2544\":1}}],[\"基于concurrenthashmap实现自定义线程安全hashset\",{\"1\":{\"2392\":1}}],[\"基于锁机制实现\",{\"1\":{\"2544\":1}}],[\"基于现有并发集合封装\",{\"1\":{\"2544\":1}}],[\"基于无锁算法\",{\"1\":{\"2513\":1}}],[\"基于单向链表实现\",{\"1\":{\"2473\":1}}],[\"基于单个字段创建的索引\",{\"1\":{\"68\":1}}],[\"基于红黑树实现\",{\"1\":{\"2391\":1}}],[\"基于哈希表+双向链表实现\",{\"1\":{\"2391\":1}}],[\"基于哈希表实现\",{\"1\":{\"2391\":1}}],[\"基于哈希函数创建的索引\",{\"1\":{\"68\":1}}],[\"基于角色的访问控制\",{\"1\":{\"2012\":1}}],[\"基于虚拟主机配置域名\",{\"0\":{\"1389\":1}}],[\"基于ip的虚拟主机\",{\"1\":{\"1388\":1}}],[\"基于端口的虚拟主机\",{\"0\":{\"1390\":1},\"1\":{\"1388\":1}}],[\"基于域名的虚拟主机\",{\"1\":{\"1388\":1}}],[\"基于回调机制实现完全异步的io操作\",{\"1\":{\"3080\":1}}],[\"基于回调机制\",{\"1\":{\"1316\":1}}],[\"基于回调的事件驱动\",{\"1\":{\"1238\":1}}],[\"基于集合的算法实现与优化\",{\"1\":{\"1175\":1}}],[\"基于region的内存布局\",{\"1\":{\"784\":1}}],[\"基于region的分代式垃圾收集器\",{\"1\":{\"770\":1}}],[\"基于这一法则\",{\"1\":{\"776\":1}}],[\"基于标记\",{\"1\":{\"770\":1,\"783\":1}}],[\"基于对象生命周期的不同\",{\"1\":{\"713\":1}}],[\"基于链表的可选有界阻塞队列\",{\"1\":{\"634\":1}}],[\"基于xml配置的构建工具\",{\"1\":{\"583\":1}}],[\"基于日期\",{\"1\":{\"545\":1}}],[\"基于时间\",{\"1\":{\"545\":1}}],[\"基于aop实现\",{\"1\":{\"350\":1}}],[\"基于阿里easyexcel框架\",{\"1\":{\"277\":1}}],[\"基于达到最大连接值的因素\",{\"1\":{\"193\":1}}],[\"基于阻塞操作\",{\"1\":{\"193\":1}}],[\"基于主从复制\",{\"1\":{\"162\":1}}],[\"基于主从结构\",{\"1\":{\"162\":1}}],[\"基于fork创建子进程\",{\"1\":{\"139\":1}}],[\"基于快照思想\",{\"1\":{\"139\":1}}],[\"基于\",{\"0\":{\"306\":1},\"1\":{\"128\":1,\"130\":1,\"1507\":1}}],[\"基于内存\",{\"1\":{\"128\":1,\"129\":1}}],[\"基于证书利用数字签名方法对服务器和客户端进行身份验证\",{\"1\":{\"114\":1}}],[\"基于多个字段创建的索引\",{\"1\":{\"68\":1}}],[\"单例业务逻辑\",{\"1\":{\"2824\":1}}],[\"单例实现\",{\"1\":{\"2824\":1}}],[\"单例性\",{\"1\":{\"2819\":1}}],[\"单一职责\",{\"1\":{\"2446\":1,\"2847\":1}}],[\"单一职责原则\",{\"0\":{\"1208\":1,\"2770\":1},\"1\":{\"2005\":1,\"2637\":1,\"2788\":1,\"2883\":1,\"2895\":1}}],[\"单字节\",{\"1\":{\"2289\":1}}],[\"单字段索引\",{\"1\":{\"68\":1}}],[\"单行注释以\",{\"1\":{\"2089\":1}}],[\"单行注释\",{\"0\":{\"2089\":1}}],[\"单词间用下划线分隔\",{\"1\":{\"1999\":1}}],[\"单选\",{\"1\":{\"1459\":1}}],[\"单独定义\",{\"1\":{\"1452\":2}}],[\"单击事件\",{\"1\":{\"1450\":1}}],[\"单台服务器不能满足用户的请求时\",{\"1\":{\"1383\":1}}],[\"单reactor多线程和主从reactor多线程三种实现\",{\"1\":{\"3083\":1}}],[\"单reactor多线程模型\",{\"1\":{\"1328\":1,\"3121\":1}}],[\"单reactor单线程模型\",{\"1\":{\"1328\":1,\"2921\":1,\"3121\":1}}],[\"单继承多实现\",{\"1\":{\"1046\":1}}],[\"单次gc时间过长\",{\"1\":{\"782\":1,\"813\":1,\"847\":1,\"881\":1,\"915\":1}}],[\"单线程管理多连接\",{\"1\":{\"3128\":1}}],[\"单线程或低并发场景使用普通arraylist\",{\"1\":{\"2536\":1}}],[\"单线程环境或可手动控制同步\",{\"1\":{\"2454\":1}}],[\"单线程环境下性能低于arraylist\",{\"1\":{\"2454\":1}}],[\"单线程环境下hashmap性能略优\",{\"1\":{\"2426\":1}}],[\"单线程大量拼接\",{\"1\":{\"2310\":1}}],[\"单线程大量字符串操作\",{\"1\":{\"2275\":1}}],[\"单线程大量字符串拼接\",{\"1\":{\"2201\":1}}],[\"单线程处理多个客户端连接\",{\"1\":{\"1315\":1}}],[\"单线程处理多个连接\",{\"1\":{\"1315\":1}}],[\"单线程标记\",{\"1\":{\"770\":1}}],[\"单线程收集\",{\"1\":{\"769\":1}}],[\"单线程的线程池\",{\"1\":{\"623\":1,\"1135\":1}}],[\"单文件程序启动\",{\"0\":{\"479\":1}}],[\"单元测试基本原则\",{\"0\":{\"2044\":1}}],[\"单元测试规范\",{\"0\":{\"2043\":1}}],[\"单元测试\",{\"0\":{\"449\":1},\"1\":{\"449\":1}}],[\"单纯使用\",{\"1\":{\"304\":1}}],[\"单变量\",{\"1\":{\"289\":1}}],[\"单方法入口\",{\"1\":{\"278\":1}}],[\"单位是毫秒\",{\"1\":{\"1884\":1}}],[\"单位kb\",{\"1\":{\"1882\":6}}],[\"单位1\",{\"1\":{\"1882\":1}}],[\"单位秒\",{\"1\":{\"1687\":1,\"1882\":1,\"3199\":1}}],[\"单位为字节\",{\"1\":{\"232\":4,\"1684\":4}}],[\"单位\",{\"1\":{\"193\":2}}],[\"单个selector处理过多连接会成为瓶颈\",{\"1\":{\"3090\":1}}],[\"单个安装\",{\"1\":{\"1904\":1}}],[\"单个线程同时监控多个io通道\",{\"1\":{\"1320\":1}}],[\"单个参数无返回值\",{\"1\":{\"537\":1}}],[\"单个聚合数据的子配置大小上限\",{\"1\":{\"232\":2,\"1684\":2}}],[\"单个配置大小上限\",{\"1\":{\"232\":2,\"1684\":2}}],[\"单个key高热数据\",{\"1\":{\"191\":1}}],[\"单个数据\",{\"1\":{\"132\":1}}],[\"单个服务器无法处理的场景\",{\"1\":{\"75\":1}}],[\"单主从\",{\"0\":{\"105\":1}}],[\"单目聚合函数是针对整个集合的聚合操作\",{\"1\":{\"60\":1}}],[\"单目聚合函数\",{\"0\":{\"60\":1},\"1\":{\"60\":1,\"89\":1}}],[\"索引j\",{\"1\":{\"2707\":1}}],[\"索引i\",{\"1\":{\"2707\":1}}],[\"索引访问优化\",{\"0\":{\"2501\":1}}],[\"索引超出范围\",{\"1\":{\"2450\":1}}],[\"索引1不存在\",{\"1\":{\"2341\":1}}],[\"索引越界异常\",{\"0\":{\"2341\":1}}],[\"索引从0开始\",{\"1\":{\"2145\":1}}],[\"索引\",{\"1\":{\"1449\":2,\"1454\":2}}],[\"索引命令\",{\"0\":{\"90\":1}}],[\"索引虽然可以提高查询性能\",{\"1\":{\"74\":1}}],[\"索引是提高查询性能的关键\",{\"1\":{\"68\":1}}],[\"索引优化\",{\"0\":{\"68\":1}}],[\"索引支持\",{\"1\":{\"39\":1}}],[\"复合操作\",{\"1\":{\"2513\":1}}],[\"复合索引\",{\"1\":{\"68\":1}}],[\"复选框被选中的元素\",{\"1\":{\"1459\":1}}],[\"复用tcp连接提高性能\",{\"1\":{\"3241\":1}}],[\"复用空数组\",{\"1\":{\"2445\":1}}],[\"复用性\",{\"1\":{\"2253\":1}}],[\"复用常量池中的同一对象\",{\"1\":{\"2239\":1}}],[\"复用常量池中的对象\",{\"1\":{\"2188\":1}}],[\"复用连接减少tcp握手开销\",{\"1\":{\"1343\":1}}],[\"复用sip连接\",{\"1\":{\"1111\":1}}],[\"复制三个service\",{\"1\":{\"3250\":1}}],[\"复制进度\",{\"1\":{\"2837\":1}}],[\"复制文件\",{\"1\":{\"3246\":1}}],[\"复制文件到进行中\",{\"1\":{\"3246\":1}}],[\"复制文件夹\",{\"1\":{\"1865\":1}}],[\"复制文本文件\",{\"1\":{\"2833\":1}}],[\"复制数组\",{\"1\":{\"2503\":1}}],[\"复制原数组元素到新数组\",{\"1\":{\"2438\":1}}],[\"复制字符串到永久代常量池\",{\"1\":{\"2246\":1}}],[\"复制指定范围\",{\"1\":{\"2151\":1}}],[\"复制整个数组\",{\"1\":{\"2151\":1}}],[\"复制并强制覆盖同名文件\",{\"1\":{\"1865\":1}}],[\"复制读写操作\",{\"1\":{\"1764\":1}}],[\"复制当前的内核配置文件\",{\"1\":{\"1490\":1}}],[\"复制index\",{\"1\":{\"1444\":1}}],[\"复制成本高\",{\"1\":{\"765\":1}}],[\"复制算法\",{\"0\":{\"765\":1},\"1\":{\"713\":1,\"767\":1,\"776\":1,\"1150\":1}}],[\"复制缓冲区过小\",{\"1\":{\"171\":1}}],[\"复制缓冲区内部工作原理\",{\"1\":{\"167\":1}}],[\"复制缓冲区默认数据存储空间大小是1m\",{\"1\":{\"167\":1}}],[\"复制缓冲区\",{\"1\":{\"167\":2}}],[\"复制缓冲区大小设定不合理\",{\"1\":{\"166\":1}}],[\"复制master中的所有数据到slave\",{\"1\":{\"166\":1}}],[\"复制\",{\"1\":{\"125\":1,\"698\":1,\"1865\":1}}],[\"复制表\",{\"1\":{\"125\":1}}],[\"复制主节点的数据\",{\"1\":{\"69\":1}}],[\"复制集配置\",{\"1\":{\"1764\":1}}],[\"复制集基本角色\",{\"1\":{\"1764\":1}}],[\"复制集适合处理需要高可用性但数据量不是特别大的场景\",{\"1\":{\"75\":1}}],[\"复制集是一组维护相同数据集的mongodb实例\",{\"1\":{\"75\":1}}],[\"复制集是一组mongodb实例\",{\"1\":{\"69\":1}}],[\"复制集和分片的主要区别是什么\",{\"1\":{\"75\":1}}],[\"复制集可以提供高可用性\",{\"1\":{\"74\":1}}],[\"复制集\",{\"0\":{\"69\":1},\"1\":{\"66\":1,\"1764\":1}}],[\"复杂并发控制需求\",{\"1\":{\"2456\":1}}],[\"复杂需求\",{\"1\":{\"2227\":1}}],[\"复杂格式化\",{\"1\":{\"2227\":1}}],[\"复杂的算法和逻辑\",{\"1\":{\"2095\":1}}],[\"复杂的事务和关联查询\",{\"1\":{\"43\":1}}],[\"复杂泛型场景使用辅助方法捕获类型参数\",{\"1\":{\"1302\":1}}],[\"复杂\",{\"1\":{\"1227\":1,\"2897\":1}}],[\"复杂配置\",{\"1\":{\"1086\":1}}],[\"复杂度可能为o\",{\"1\":{\"2726\":1}}],[\"复杂度的数据结构\",{\"1\":{\"2717\":1}}],[\"复杂度分析\",{\"1\":{\"2728\":1}}],[\"复杂度分析在系统设计中的应用\",{\"0\":{\"2717\":1}}],[\"复杂度分析实例\",{\"0\":{\"2706\":1}}],[\"复杂度优化策略\",{\"0\":{\"2714\":1}}],[\"复杂度o\",{\"1\":{\"2704\":2}}],[\"复杂度\",{\"1\":{\"1056\":2,\"1101\":1,\"2702\":1}}],[\"复杂逻辑仍需使用锁机制\",{\"1\":{\"684\":1}}],[\"复杂表达式中的空值来源模糊\",{\"1\":{\"515\":1}}],[\"复杂表达式中的npe\",{\"1\":{\"502\":1}}],[\"复杂表达式空值追踪\",{\"0\":{\"502\":1}}],[\"复杂场景下的类型推断\",{\"1\":{\"469\":1}}],[\"复杂业务场景\",{\"1\":{\"130\":1}}],[\"复杂类型\",{\"1\":{\"38\":1}}],[\"特定异常处理\",{\"1\":{\"2955\":1}}],[\"特定jvm实现支持的扩展参数\",{\"1\":{\"789\":1,\"823\":1,\"857\":1,\"891\":1}}],[\"特殊字符处理\",{\"1\":{\"2860\":1,\"2884\":1}}],[\"特殊关键字\",{\"0\":{\"2810\":1}}],[\"特殊场景\",{\"1\":{\"2511\":1}}],[\"特殊含义\",{\"1\":{\"2084\":1}}],[\"特殊分隔符\",{\"1\":{\"1325\":1,\"3069\":1}}],[\"特殊类型\",{\"1\":{\"38\":1}}],[\"特性对比\",{\"1\":{\"1175\":1}}],[\"特性\",{\"1\":{\"1101\":1,\"1221\":1,\"1227\":1,\"1288\":1,\"2253\":1,\"2275\":1,\"2358\":1,\"2503\":1,\"2666\":1,\"2861\":1,\"2885\":1,\"2897\":1,\"2909\":1,\"2913\":1}}],[\"特性已被禁止\",{\"1\":{\"125\":1}}],[\"特征\",{\"1\":{\"161\":1}}],[\"特点是每个连接对应一个线程\",{\"1\":{\"3078\":1}}],[\"特点\",{\"1\":{\"1174\":1,\"1314\":1,\"1315\":1,\"1316\":1,\"1501\":1,\"2357\":2,\"3080\":1,\"3206\":1}}],[\"特点2\",{\"1\":{\"153\":1}}],[\"特点1\",{\"1\":{\"153\":1}}],[\"特别适用于高并发\",{\"1\":{\"2911\":1}}],[\"特别适合导出百万级数据\",{\"1\":{\"271\":1}}],[\"特别是编译期注解处理器\",{\"1\":{\"3169\":1}}],[\"特别是禁止setaccessible\",{\"1\":{\"3011\":1}}],[\"特别是对私有成员的访问\",{\"1\":{\"3010\":1,\"3011\":1}}],[\"特别是对于大文件操作\",{\"1\":{\"2868\":1}}],[\"特别是对于那些只需要访问索引中包含的字段的操作\",{\"1\":{\"64\":1}}],[\"特别是私有成员访问\",{\"1\":{\"2993\":1}}],[\"特别是作为类成员变量时\",{\"1\":{\"2451\":1}}],[\"特别是大数据量时\",{\"1\":{\"2449\":1}}],[\"特别是读多写少场景\",{\"1\":{\"2426\":1}}],[\"特别是为路由器启用了伪装功能的外部网\",{\"1\":{\"1940\":1}}],[\"特别是当需要明确控制字符编码时\",{\"1\":{\"2875\":1}}],[\"特别是当您使用web托管服务时\",{\"1\":{\"1381\":1}}],[\"特别是当有多个拦截器时\",{\"1\":{\"386\":1}}],[\"特别是当有多个切面时\",{\"1\":{\"343\":1}}],[\"特别是短连接场景\",{\"1\":{\"1343\":1}}],[\"特别是在迭代过程中保留节点引用时\",{\"1\":{\"2508\":1}}],[\"特别是在频繁创建实例的场景\",{\"1\":{\"556\":1}}],[\"特别是在stream\",{\"1\":{\"539\":1}}],[\"特别是zgc的引入\",{\"1\":{\"487\":1}}],[\"特别注意\",{\"1\":{\"113\":1}}],[\"以什么为基础\",{\"1\":{\"3246\":1}}],[\"以操作系统为内核创建的一个虚拟的操作系统\",{\"1\":{\"3245\":1}}],[\"以用户为中心而非设备\",{\"1\":{\"3192\":1}}],[\"以开发者友好为目标\",{\"1\":{\"2907\":1}}],[\"以字符为单位处理数据\",{\"1\":{\"2830\":1}}],[\"以字节为单位处理数据\",{\"1\":{\"2830\":1,\"2839\":1}}],[\"以提高读写性能并提供更便捷的api\",{\"1\":{\"2880\":1}}],[\"以提高查找性能\",{\"1\":{\"2376\":1}}],[\"以提供特定实现\",{\"1\":{\"2737\":1}}],[\"以alice呼叫bob为例\",{\"1\":{\"3188\":1}}],[\"以arrayblockingqueue为例\",{\"1\":{\"2483\":1}}],[\"以av开头的\",{\"1\":{\"1393\":1}}],[\"以这种方式连接\",{\"1\":{\"1819\":1}}],[\"以免超过k8安装的超时时间\",{\"1\":{\"1632\":1}}],[\"以免安装过程中出问题能够补救\",{\"1\":{\"118\":1}}],[\"以root用户身份来运行\",{\"1\":{\"1504\":1}}],[\"以供之后读取和执行\",{\"1\":{\"1504\":1}}],[\"以模块组件方式实现文件同步\",{\"0\":{\"1503\":1}}],[\"以ssh方式连接需要密码\",{\"1\":{\"1502\":1}}],[\"以ssh\",{\"0\":{\"1502\":1}}],[\"以spring为例\",{\"1\":{\"1266\":1}}],[\"以centos为例\",{\"1\":{\"1501\":1}}],[\"以你要同步的文件为基准\",{\"1\":{\"1501\":1}}],[\"以指定启动列表中第x项为启动项\",{\"1\":{\"1478\":1}}],[\"以外\",{\"1\":{\"1438\":1}}],[\"以openssl为例\",{\"0\":{\"1425\":1}}],[\"以htpasswd为例\",{\"0\":{\"1419\":1}}],[\"以某个字符串开头\",{\"1\":{\"1392\":1,\"1393\":1}}],[\"以集合框架为例\",{\"1\":{\"1298\":1}}],[\"以验证仓库所有者是你\",{\"1\":{\"993\":1}}],[\"以获取最短回收停顿时间为目标\",{\"1\":{\"770\":1}}],[\"以获得更强大的aop功能\",{\"1\":{\"344\":1}}],[\"以ioc和aop为核心\",{\"1\":{\"580\":1}}],[\"以下附带标签的其他操作\",{\"1\":{\"1660\":1}}],[\"以下创建一个用户ling并授权\",{\"1\":{\"1573\":1}}],[\"以下创建一个ling\",{\"1\":{\"1573\":1}}],[\"以下采用docker\",{\"1\":{\"1535\":1}}],[\"以下是udp通信的简单实现\",{\"1\":{\"3066\":1}}],[\"以下是基于java的tcp通信示例\",{\"1\":{\"3065\":1}}],[\"以下是使用java\",{\"1\":{\"2921\":1}}],[\"以下是使用字节流进行文件复制的基础示例\",{\"1\":{\"2843\":1}}],[\"以下是一个sip消息解析的核心代码示例\",{\"1\":{\"3205\":1}}],[\"以下是一个简单的sip客户端示例\",{\"1\":{\"3190\":1}}],[\"以下是一个性能对比示例\",{\"1\":{\"2868\":1}}],[\"以下是一个基于读写锁的简单实现\",{\"1\":{\"2697\":1}}],[\"以下是一些典型应用\",{\"1\":{\"1266\":1}}],[\"以下是一些常用的stream操作示例\",{\"1\":{\"543\":1}}],[\"以下是常见数组类型的最佳打印实践\",{\"1\":{\"2222\":1}}],[\"以下是checkstyle配置示例\",{\"1\":{\"2042\":1}}],[\"以下是所需软件和服务器版本\",{\"1\":{\"1780\":1}}],[\"以下是在安装k8s的时候使用\",{\"1\":{\"1613\":1,\"1673\":1,\"1744\":1}}],[\"以下是我自己的实践的方案\",{\"1\":{\"1557\":1}}],[\"以下是数组与字符串相关的知识体系\",{\"1\":{\"1157\":1}}],[\"以下是sip面试知识体系\",{\"1\":{\"1089\":1}}],[\"以下是javap输出的部分常量池信息\",{\"1\":{\"728\":1}}],[\"以下是lambda表达式的几种常见用法\",{\"1\":{\"537\":1}}],[\"以下实践方案也是续签的一直思路\",{\"1\":{\"306\":1}}],[\"以非事务的方式执行\",{\"1\":{\"359\":2}}],[\"以后\",{\"1\":{\"305\":1}}],[\"以\",{\"1\":{\"303\":1,\"762\":1,\"788\":1,\"789\":1,\"790\":1,\"822\":1,\"823\":1,\"824\":1,\"856\":1,\"857\":1,\"858\":1,\"890\":1,\"891\":1,\"892\":1,\"1872\":1,\"2090\":1,\"2091\":1,\"3246\":1}}],[\"以给定前缀键\",{\"1\":{\"283\":1}}],[\"以电商为例\",{\"1\":{\"191\":1}}],[\"以上就是这篇文章的全部内容了\",{\"1\":{\"1739\":1}}],[\"以上方法由互联网提供\",{\"1\":{\"1557\":1}}],[\"以上\",{\"1\":{\"157\":1}}],[\"以独立日志的方式记录每次写命令\",{\"1\":{\"139\":1}}],[\"以及设计模式中的应用实践\",{\"1\":{\"3043\":1}}],[\"以及泛型带来的优势与基本限制\",{\"1\":{\"3013\":1}}],[\"以及它们的各种实现类\",{\"1\":{\"2839\":1,\"2851\":1}}],[\"以及它们的版本和质量\",{\"1\":{\"989\":1}}],[\"以及实战开发中的最佳实践\",{\"1\":{\"2782\":1}}],[\"以及使用场景\",{\"1\":{\"2358\":1}}],[\"以及可以对这些值进行什么样的操作\",{\"1\":{\"2097\":1}}],[\"以及总的各个状态的连接数\",{\"1\":{\"1881\":1}}],[\"以及服务器在运行过程中发生的任何异常信息\",{\"1\":{\"1739\":1}}],[\"以及过期时间存储在服务端的数据库中\",{\"1\":{\"306\":1}}],[\"以及后续若干天\",{\"1\":{\"191\":1}}],[\"以及\",{\"1\":{\"130\":1,\"1635\":1}}],[\"以了解正确的语法\",{\"1\":{\"125\":1}}],[\"以适应不同的使用场景\",{\"1\":{\"93\":1,\"210\":1}}],[\"以减少后续操作的数据量\",{\"1\":{\"63\":1}}],[\"以便在抛出异常时生成详细消息\",{\"1\":{\"504\":1}}],[\"以便该授权能起作用\",{\"1\":{\"125\":1}}],[\"以便\",{\"1\":{\"11\":1}}],[\"vblchznag5on1lyvglfn3lusgxvwaplns9rotj5y2fnrgvlnjlebhpvwepptlnzdezwymtasvn0o\",{\"1\":{\"3273\":1}}],[\"vvfqxhnsaphm1zpwlmxalluq0nbu0l3rffzsktvwklodmnoqvffqkjrqurnz0vqqurdq0frb0nnz\",{\"1\":{\"3273\":1}}],[\"vuyz0f3sujbz0lcqurbs0jnz3foa2ppuffrrefqqtdnund3r2dzrfzruutfee5rzvc1agjxbgoky\",{\"1\":{\"3273\":1}}],[\"vue路由模式为history需添加的配置\",{\"1\":{\"216\":1}}],[\"vue\",{\"1\":{\"31\":2,\"1851\":1}}],[\"vuepress\",{\"0\":{\"15\":1},\"1\":{\"11\":2,\"13\":2,\"14\":1,\"15\":2,\"16\":1,\"30\":1}}],[\"v参数\",{\"1\":{\"3246\":1}}],[\"v=\",{\"1\":{\"3205\":1}}],[\"v=0\",{\"1\":{\"1092\":1,\"3180\":1,\"3190\":1}}],[\"vl9p4\",{\"1\":{\"1808\":1}}],[\"v`\",{\"1\":{\"1687\":1}}],[\"v2\",{\"1\":{\"1687\":1,\"1779\":1,\"2294\":2,\"3100\":1,\"3245\":1,\"3263\":1,\"3271\":3,\"3273\":4}}],[\"v6eeyv\",{\"1\":{\"1650\":1,\"1713\":1}}],[\"v3\",{\"1\":{\"1609\":3,\"1633\":1,\"1635\":3,\"1637\":1,\"1638\":1,\"1677\":1,\"2020\":2,\"3246\":1}}],[\"v920\",{\"1\":{\"1579\":1}}],[\"v$session\",{\"1\":{\"1575\":2}}],[\"v$process\",{\"1\":{\"1575\":1}}],[\"v$parameter\",{\"1\":{\"1575\":1}}],[\"v$version\",{\"1\":{\"1575\":1}}],[\"v$instance\",{\"1\":{\"1575\":1}}],[\"vj\",{\"1\":{\"1527\":1}}],[\"vmstat\",{\"0\":{\"1887\":1},\"1\":{\"1835\":1,\"1887\":1}}],[\"vm\",{\"1\":{\"1513\":2,\"1610\":3,\"1788\":2}}],[\"v4\",{\"1\":{\"1488\":2,\"3276\":1}}],[\"v>\",{\"1\":{\"1181\":12,\"2427\":3,\"2429\":2,\"2512\":1,\"2600\":4,\"2601\":9,\"2623\":4,\"2628\":7,\"2629\":5,\"2630\":3,\"2632\":3,\"2654\":5,\"2655\":3,\"2656\":3,\"2657\":4,\"2679\":4,\"2680\":4,\"2681\":5,\"2682\":3,\"2683\":3,\"2684\":7,\"2692\":1,\"2697\":2,\"3020\":1,\"3046\":1}}],[\"vector<inputstream>\",{\"1\":{\"2897\":1}}],[\"vector<fileinputstream>\",{\"1\":{\"2893\":1}}],[\"vector<bytearrayinputstream>\",{\"1\":{\"2892\":1}}],[\"vector<>\",{\"1\":{\"2328\":1,\"2892\":1,\"2893\":1,\"2897\":1}}],[\"vector可通过capacityincrement参数调整\",{\"1\":{\"2454\":1}}],[\"vector提供了更多古老的方法\",{\"1\":{\"2454\":1}}],[\"vector的elements\",{\"1\":{\"2454\":1}}],[\"vector默认扩容为原来的2倍\",{\"1\":{\"2454\":1}}],[\"vector由于同步开销\",{\"1\":{\"2454\":1}}],[\"vector是线程安全的\",{\"1\":{\"2454\":1}}],[\"vector是\",{\"1\":{\"1174\":1}}],[\"vector\",{\"1\":{\"1174\":1,\"2316\":1,\"2320\":1,\"2328\":3,\"2892\":7,\"2893\":1,\"2897\":1}}],[\"verification\",{\"1\":{\"741\":1}}],[\"verify\",{\"1\":{\"279\":2,\"993\":2,\"3166\":1}}],[\"version8\",{\"1\":{\"1578\":1}}],[\"version和major\",{\"1\":{\"724\":1}}],[\"version=v1\",{\"1\":{\"1633\":1,\"1677\":1}}],[\"version=\",{\"1\":{\"439\":1,\"1551\":1,\"1564\":1}}],[\"version>5\",{\"1\":{\"932\":1}}],[\"version>\",{\"1\":{\"281\":1,\"307\":1,\"394\":1,\"456\":1,\"567\":1,\"584\":2,\"711\":1,\"924\":1,\"926\":1,\"928\":1,\"932\":1,\"936\":3,\"938\":1,\"941\":1,\"953\":1,\"954\":1,\"956\":1,\"957\":1,\"963\":1,\"999\":5,\"1003\":3,\"1005\":1,\"1016\":1,\"1017\":1,\"1018\":1,\"1564\":2,\"2018\":1,\"3097\":1,\"3147\":1}}],[\"version\",{\"1\":{\"121\":2,\"122\":3,\"123\":1,\"125\":1,\"248\":1,\"250\":1,\"264\":1,\"266\":1,\"724\":2,\"788\":1,\"801\":1,\"822\":1,\"835\":1,\"856\":1,\"869\":1,\"890\":1,\"903\":1,\"937\":2,\"999\":1,\"1095\":1,\"1363\":1,\"1513\":4,\"1535\":1,\"1551\":1,\"1578\":2,\"1624\":1,\"1638\":2,\"1648\":14,\"1649\":14,\"1650\":113,\"1660\":3,\"1661\":6,\"1685\":14,\"1688\":14,\"1698\":6,\"1713\":124,\"1714\":1,\"1722\":1,\"1725\":1,\"1738\":1,\"1747\":1,\"1757\":1,\"1838\":1,\"1903\":1,\"1934\":1,\"2020\":1,\"2035\":1,\"3205\":1,\"3246\":3,\"3248\":1,\"3250\":1,\"3260\":1,\"3273\":1,\"3282\":1}}],[\"vs\",{\"0\":{\"2253\":1,\"2275\":2},\"1\":{\"638\":3}}],[\"v1beta1\",{\"1\":{\"1648\":2,\"1649\":2,\"1650\":2,\"1685\":2,\"1688\":2,\"1713\":2}}],[\"v1alpha1\",{\"1\":{\"1638\":2}}],[\"v1\",{\"1\":{\"280\":8,\"1560\":2,\"1564\":4,\"1626\":4,\"1633\":1,\"1635\":5,\"1637\":2,\"1638\":1,\"1648\":17,\"1649\":17,\"1650\":143,\"1660\":8,\"1661\":9,\"1667\":1,\"1677\":1,\"1685\":17,\"1688\":17,\"1698\":8,\"1713\":157,\"1715\":4,\"1795\":1,\"1808\":1,\"2294\":2,\"3246\":8,\"3273\":4,\"3276\":1}}],[\"voip服务\",{\"1\":{\"3230\":1}}],[\"void\",{\"1\":{\"267\":3,\"269\":1,\"270\":1,\"283\":3,\"286\":5,\"287\":4,\"289\":2,\"290\":1,\"291\":8,\"293\":5,\"324\":1,\"325\":2,\"326\":1,\"338\":2,\"352\":1,\"354\":2,\"366\":1,\"381\":1,\"382\":1,\"392\":1,\"427\":1,\"430\":1,\"434\":1,\"440\":1,\"441\":1,\"449\":2,\"450\":2,\"451\":2,\"456\":2,\"471\":1,\"479\":3,\"500\":1,\"501\":1,\"502\":1,\"517\":2,\"541\":4,\"542\":1,\"554\":2,\"575\":1,\"592\":3,\"593\":1,\"609\":1,\"610\":1,\"625\":1,\"626\":1,\"641\":3,\"642\":1,\"643\":1,\"658\":2,\"659\":1,\"660\":2,\"663\":1,\"675\":2,\"676\":1,\"677\":1,\"693\":2,\"694\":1,\"710\":4,\"711\":1,\"727\":2,\"729\":1,\"745\":1,\"746\":1,\"772\":1,\"773\":1,\"781\":1,\"1037\":4,\"1038\":2,\"1040\":1,\"1041\":1,\"1043\":1,\"1044\":4,\"1052\":3,\"1053\":3,\"1055\":1,\"1056\":2,\"1058\":3,\"1066\":1,\"1069\":3,\"1078\":2,\"1087\":4,\"1094\":9,\"1095\":1,\"1111\":2,\"1125\":1,\"1144\":1,\"1145\":2,\"1147\":1,\"1150\":1,\"1151\":1,\"1160\":1,\"1161\":2,\"1162\":1,\"1164\":1,\"1165\":1,\"1166\":1,\"1178\":1,\"1179\":1,\"1181\":2,\"1182\":1,\"1185\":2,\"1186\":1,\"1190\":1,\"1191\":1,\"1193\":1,\"1194\":1,\"1203\":2,\"1204\":3,\"1205\":2,\"1206\":2,\"1208\":3,\"1210\":4,\"1211\":11,\"1212\":8,\"1221\":3,\"1222\":1,\"1224\":4,\"1225\":1,\"1228\":3,\"1232\":1,\"1238\":11,\"1243\":3,\"1246\":1,\"1247\":2,\"1250\":1,\"1253\":2,\"1260\":1,\"1264\":1,\"1267\":3,\"1269\":1,\"1270\":1,\"1280\":1,\"1287\":3,\"1290\":2,\"1295\":2,\"1296\":2,\"1312\":2,\"1314\":1,\"1315\":3,\"1321\":3,\"1324\":3,\"1326\":2,\"1332\":3,\"1336\":2,\"1337\":2,\"1338\":2,\"1431\":2,\"1439\":5,\"1440\":2,\"1443\":2,\"1444\":2,\"1974\":1,\"1987\":1,\"1997\":1,\"2027\":1,\"2033\":1,\"2046\":1,\"2047\":1,\"2054\":1,\"2061\":2,\"2077\":4,\"2078\":1,\"2079\":2,\"2089\":1,\"2091\":2,\"2100\":2,\"2101\":1,\"2109\":1,\"2110\":1,\"2111\":1,\"2112\":1,\"2113\":1,\"2114\":1,\"2115\":1,\"2123\":1,\"2125\":1,\"2126\":1,\"2128\":1,\"2129\":1,\"2130\":1,\"2132\":1,\"2133\":1,\"2134\":2,\"2161\":1,\"2212\":1,\"2213\":1,\"2214\":1,\"2216\":1,\"2217\":1,\"2218\":1,\"2220\":1,\"2221\":1,\"2223\":1,\"2224\":1,\"2228\":4,\"2239\":1,\"2243\":1,\"2245\":1,\"2246\":1,\"2248\":1,\"2249\":1,\"2265\":1,\"2266\":1,\"2269\":1,\"2271\":1,\"2272\":1,\"2276\":1,\"2282\":1,\"2292\":1,\"2303\":1,\"2304\":1,\"2311\":1,\"2314\":2,\"2318\":3,\"2323\":1,\"2324\":1,\"2325\":1,\"2326\":1,\"2327\":4,\"2328\":2,\"2329\":1,\"2369\":1,\"2370\":1,\"2371\":1,\"2372\":1,\"2373\":1,\"2406\":1,\"2407\":1,\"2408\":1,\"2409\":1,\"2410\":1,\"2427\":1,\"2437\":3,\"2438\":1,\"2439\":2,\"2440\":2,\"2441\":2,\"2451\":4,\"2465\":1,\"2466\":3,\"2467\":2,\"2468\":1,\"2485\":1,\"2494\":4,\"2495\":1,\"2496\":1,\"2497\":3,\"2498\":5,\"2508\":3,\"2512\":2,\"2522\":1,\"2523\":1,\"2524\":2,\"2525\":1,\"2544\":2,\"2555\":2,\"2575\":3,\"2577\":1,\"2604\":1,\"2628\":2,\"2629\":1,\"2630\":1,\"2632\":1,\"2656\":1,\"2657\":2,\"2660\":1,\"2661\":1,\"2681\":1,\"2684\":1,\"2685\":3,\"2704\":1,\"2707\":1,\"2709\":1,\"2712\":1,\"2727\":1,\"2733\":1,\"2734\":3,\"2736\":4,\"2737\":2,\"2738\":1,\"2742\":2,\"2745\":4,\"2746\":4,\"2748\":4,\"2749\":1,\"2750\":3,\"2759\":1,\"2761\":1,\"2770\":8,\"2784\":1,\"2785\":3,\"2795\":1,\"2796\":1,\"2797\":2,\"2808\":1,\"2809\":1,\"2810\":2,\"2819\":1,\"2822\":1,\"2824\":1,\"2831\":1,\"2832\":1,\"2833\":1,\"2837\":2,\"2841\":3,\"2842\":5,\"2843\":1,\"2844\":1,\"2845\":1,\"2849\":3,\"2853\":3,\"2854\":7,\"2855\":1,\"2856\":1,\"2857\":1,\"2861\":1,\"2866\":1,\"2867\":1,\"2868\":4,\"2869\":4,\"2873\":2,\"2878\":1,\"2879\":1,\"2880\":1,\"2881\":2,\"2885\":1,\"2891\":1,\"2892\":1,\"2893\":1,\"2897\":1,\"2902\":1,\"2903\":1,\"2904\":1,\"2905\":1,\"2909\":1,\"2914\":1,\"2915\":1,\"2916\":3,\"2917\":1,\"2921\":8,\"2927\":2,\"2935\":3,\"2936\":4,\"2937\":2,\"2947\":1,\"2948\":2,\"2953\":1,\"2965\":1,\"2968\":1,\"2969\":3,\"2970\":5,\"2971\":1,\"2974\":2,\"2980\":1,\"2983\":6,\"2984\":1,\"2986\":2,\"2989\":2,\"2990\":2,\"2993\":2,\"2999\":5,\"3000\":1,\"3002\":2,\"3003\":2,\"3005\":3,\"3007\":1,\"3010\":3,\"3023\":1,\"3024\":1,\"3025\":1,\"3034\":2,\"3035\":2,\"3038\":1,\"3040\":1,\"3041\":1,\"3049\":2,\"3065\":2,\"3066\":2,\"3085\":1,\"3086\":2,\"3087\":2,\"3097\":1,\"3116\":1,\"3117\":1,\"3118\":3,\"3120\":7,\"3125\":5,\"3134\":1,\"3136\":3,\"3137\":3,\"3149\":1,\"3154\":1,\"3159\":1,\"3160\":1,\"3162\":1,\"3166\":3,\"3170\":2,\"3190\":8,\"3199\":1,\"3208\":6,\"3209\":2,\"3214\":1,\"3215\":1,\"3217\":7,\"3218\":4,\"3222\":1,\"3223\":1,\"3232\":2,\"3235\":1,\"3237\":1,\"3240\":1,\"3241\":1,\"3244\":1}}],[\"vo\",{\"1\":{\"2763\":1}}],[\"volumebindingmode\",{\"1\":{\"3276\":1}}],[\"volumename\",{\"1\":{\"3246\":1}}],[\"volume路径是保存在虚拟机里面的\",{\"1\":{\"3246\":1}}],[\"volume\",{\"1\":{\"1661\":2,\"3246\":9,\"3263\":1,\"3278\":1}}],[\"volumemounts\",{\"1\":{\"1648\":1,\"1649\":1,\"1650\":10,\"1661\":2,\"1685\":1,\"1688\":1,\"1698\":1,\"1713\":11,\"3276\":1}}],[\"volumes\",{\"1\":{\"250\":1,\"1535\":2,\"1648\":1,\"1649\":1,\"1650\":10,\"1661\":2,\"1685\":1,\"1688\":1,\"1698\":1,\"1713\":11,\"3250\":1,\"3276\":1}}],[\"volatile可见性\",{\"1\":{\"2527\":1}}],[\"volatile通过内存屏障实现可见性和有序性\",{\"1\":{\"668\":1}}],[\"volatile关键字如何保证可见性和有序性\",{\"1\":{\"668\":1}}],[\"volatile关键字的正确使用\",{\"0\":{\"658\":1}}],[\"volatile关键字的局限性\",{\"0\":{\"600\":1}}],[\"volatile的误用\",{\"0\":{\"665\":1}}],[\"volatile保证可见性\",{\"1\":{\"659\":1}}],[\"volatile读\",{\"1\":{\"658\":1}}],[\"volatile写\",{\"1\":{\"658\":1}}],[\"volatileexample\",{\"1\":{\"658\":1}}],[\"volatile变量规则\",{\"1\":{\"656\":1}}],[\"volatile只能保证可见性和有序性\",{\"1\":{\"600\":1}}],[\"volatile\",{\"1\":{\"157\":5,\"613\":1,\"654\":1,\"655\":1,\"658\":1,\"659\":1,\"662\":1,\"1034\":1,\"1125\":1,\"1138\":1,\"1326\":1,\"2356\":1}}],[\"v0\",{\"1\":{\"264\":2,\"1667\":2}}],[\"visualvm\",{\"1\":{\"3096\":2}}],[\"visitnode\",{\"1\":{\"2027\":1}}],[\"violationseverity>\",{\"1\":{\"2018\":1}}],[\"virt=swap+res\",{\"1\":{\"1882\":1}}],[\"virt\",{\"1\":{\"1882\":1}}],[\"virtualthread\",{\"1\":{\"526\":1,\"527\":1}}],[\"virtual\",{\"1\":{\"526\":1,\"527\":2,\"1513\":1}}],[\"vi打开redis\",{\"1\":{\"1788\":1}}],[\"vip\",{\"1\":{\"1722\":1,\"1723\":1}}],[\"vixie\",{\"1\":{\"1504\":2}}],[\"vi\",{\"1\":{\"1369\":1,\"1370\":1,\"1371\":1,\"1372\":1,\"1373\":1,\"1503\":3,\"1504\":1,\"1517\":1,\"1520\":1,\"1523\":1,\"1524\":1,\"1578\":2,\"1620\":1,\"1621\":1,\"1624\":1,\"1627\":1,\"1666\":1,\"1667\":1,\"1669\":1,\"1752\":1,\"1753\":1,\"1771\":1,\"1907\":1,\"1918\":1}}],[\"via等头\",{\"1\":{\"3199\":1}}],[\"viaheaders\",{\"1\":{\"1094\":3,\"3190\":3,\"3199\":1}}],[\"viaheader\",{\"1\":{\"1094\":3,\"3190\":3}}],[\"via\",{\"1\":{\"1092\":1,\"3180\":2,\"3224\":1}}],[\"vim操作\",{\"0\":{\"1857\":1},\"1\":{\"1835\":1}}],[\"vim\",{\"1\":{\"235\":1,\"243\":1,\"1351\":1,\"1362\":2,\"1417\":1,\"1513\":1,\"1577\":1,\"1595\":1,\"1610\":2,\"1633\":1,\"1637\":1,\"1677\":1,\"1716\":1,\"1731\":1,\"1734\":1,\"1786\":1,\"1787\":1,\"1788\":2,\"1790\":3,\"1848\":1,\"1855\":1,\"3246\":1,\"3266\":4,\"3271\":1,\"3273\":2,\"3275\":2,\"3276\":1}}],[\"viewport\",{\"1\":{\"1447\":1,\"1450\":1,\"1455\":1,\"1456\":1,\"1457\":1,\"1458\":1,\"1459\":1,\"1461\":1,\"1462\":1,\"1463\":1,\"1464\":1,\"1467\":1,\"1469\":1}}],[\"view等组件实现了mvc设计模式\",{\"1\":{\"387\":1}}],[\"views\",{\"1\":{\"382\":1}}],[\"viewresolver\",{\"1\":{\"382\":6}}],[\"viewresolver等\",{\"1\":{\"377\":1}}],[\"view\",{\"1\":{\"125\":22,\"377\":1,\"387\":1,\"480\":1}}],[\"v\",{\"1\":{\"216\":3,\"219\":2,\"234\":2,\"242\":2,\"260\":2,\"261\":1,\"263\":1,\"264\":1,\"283\":2,\"544\":4,\"673\":1,\"727\":1,\"728\":7,\"1181\":4,\"1416\":2,\"1512\":3,\"1513\":1,\"1518\":1,\"1526\":4,\"1527\":1,\"1529\":3,\"1530\":4,\"1569\":2,\"1577\":3,\"1578\":6,\"1586\":1,\"1590\":2,\"1595\":5,\"1606\":1,\"1620\":1,\"1637\":1,\"1644\":2,\"1752\":1,\"1779\":1,\"1856\":1,\"1868\":1,\"1871\":2,\"1872\":1,\"1875\":2,\"2429\":3,\"2512\":5,\"2522\":2,\"2534\":4,\"2600\":5,\"2623\":1,\"2628\":1,\"2629\":1,\"2654\":1,\"2655\":2,\"2680\":5,\"2682\":1,\"2683\":3,\"2697\":3,\"3019\":1,\"3020\":2,\"3046\":3,\"3245\":1,\"3246\":3,\"3271\":1,\"3273\":6}}],[\"vcard\",{\"1\":{\"122\":2}}],[\"var关键字\",{\"1\":{\"1059\":1}}],[\"varmap\",{\"1\":{\"289\":5}}],[\"varchar\",{\"1\":{\"232\":54,\"1684\":54,\"1687\":28,\"1831\":1}}],[\"varcond\",{\"1\":{\"125\":1}}],[\"variabletypedemo\",{\"1\":{\"2080\":1}}],[\"variableelement\",{\"1\":{\"1087\":2}}],[\"variablemap\",{\"1\":{\"289\":4}}],[\"variable\",{\"1\":{\"115\":1,\"125\":6,\"280\":1,\"289\":3,\"1005\":1,\"1656\":1,\"1711\":1,\"3135\":1}}],[\"variables\",{\"1\":{\"113\":1,\"115\":1,\"119\":1,\"1578\":1,\"1818\":1,\"1822\":1,\"1826\":1,\"1830\":1}}],[\"var\",{\"1\":{\"113\":2,\"125\":10,\"216\":1,\"468\":3,\"469\":3,\"806\":2,\"840\":2,\"874\":2,\"908\":2,\"1503\":1,\"1504\":1,\"1523\":1,\"1535\":2,\"1569\":4,\"1577\":11,\"1578\":18,\"1586\":1,\"1595\":6,\"1606\":1,\"1610\":1,\"1632\":1,\"1634\":2,\"1638\":2,\"1667\":5,\"1671\":1,\"1675\":2,\"1741\":1,\"1764\":2,\"1773\":1,\"1778\":1,\"1910\":1,\"2921\":3,\"3246\":1,\"3271\":1,\"3273\":6}}],[\"validnonces\",{\"1\":{\"3215\":4}}],[\"validuser\",{\"1\":{\"3003\":3}}],[\"valid触发验证\",{\"1\":{\"2065\":1}}],[\"valid\",{\"1\":{\"428\":1,\"2007\":1,\"2065\":1}}],[\"validator\",{\"1\":{\"1069\":2,\"1697\":3,\"1698\":5,\"1711\":1,\"1713\":9,\"1808\":1,\"2065\":1,\"3003\":3}}],[\"validationdemo\",{\"1\":{\"1069\":1}}],[\"validationexception\",{\"1\":{\"1069\":7,\"3003\":9}}],[\"validation<\",{\"1\":{\"428\":1}}],[\"validation\",{\"1\":{\"289\":1,\"2051\":1,\"3003\":4}}],[\"validatenonce\",{\"1\":{\"3215\":2}}],[\"validaterequest\",{\"1\":{\"3215\":1,\"3238\":1}}],[\"validateorderrequest\",{\"1\":{\"2955\":1}}],[\"validateorder\",{\"1\":{\"1997\":1}}],[\"validatefield\",{\"1\":{\"1069\":2}}],[\"validatetoken\",{\"1\":{\"456\":2}}],[\"validate\",{\"1\":{\"99\":1,\"279\":1,\"1069\":2,\"1208\":2,\"1774\":2,\"3003\":3}}],[\"val\",{\"1\":{\"289\":3,\"1433\":1,\"1434\":1,\"1435\":1,\"1440\":1,\"2295\":2,\"2555\":2}}],[\"value数组是private的\",{\"1\":{\"2299\":1}}],[\"value数组引用不可变\",{\"1\":{\"2299\":1}}],[\"value`\",{\"1\":{\"1687\":2}}],[\"value=\",{\"1\":{\"1431\":1,\"1433\":1,\"1434\":1,\"1435\":1,\"1440\":1,\"1450\":1,\"1459\":4,\"1461\":2,\"1462\":7,\"1463\":5,\"1464\":4,\"1467\":3,\"1469\":2,\"1564\":2,\"2042\":3}}],[\"value注解\",{\"1\":{\"407\":1}}],[\"valueof\",{\"1\":{\"286\":1,\"1040\":2,\"2101\":1,\"2198\":2,\"2820\":2}}],[\"value赋值为18\",{\"1\":{\"283\":2}}],[\"value2\",{\"1\":{\"201\":1,\"202\":2}}],[\"value1\",{\"1\":{\"201\":1,\"202\":2}}],[\"value是过期时间\",{\"1\":{\"148\":1}}],[\"value\",{\"1\":{\"115\":1,\"125\":9,\"200\":5,\"201\":1,\"202\":2,\"267\":1,\"285\":1,\"289\":6,\"407\":1,\"428\":1,\"501\":1,\"544\":4,\"554\":4,\"574\":1,\"642\":6,\"643\":2,\"676\":14,\"1040\":1,\"1066\":1,\"1069\":7,\"1077\":2,\"1079\":3,\"1181\":9,\"1238\":1,\"1290\":10,\"1303\":1,\"1431\":1,\"1435\":2,\"1459\":3,\"1461\":3,\"1463\":4,\"1464\":3,\"1465\":4,\"1542\":3,\"1548\":2,\"1558\":1,\"1575\":1,\"1642\":2,\"1648\":7,\"1649\":10,\"1661\":2,\"1662\":1,\"1685\":7,\"1688\":10,\"1698\":1,\"2047\":1,\"2059\":1,\"2190\":1,\"2240\":3,\"2263\":2,\"2272\":4,\"2282\":3,\"2288\":1,\"2289\":1,\"2291\":15,\"2294\":4,\"2295\":3,\"2296\":4,\"2355\":1,\"2398\":1,\"2407\":9,\"2409\":1,\"2419\":3,\"2429\":2,\"2433\":2,\"2438\":4,\"2481\":1,\"2505\":3,\"2512\":11,\"2544\":7,\"2600\":10,\"2601\":2,\"2612\":4,\"2615\":2,\"2623\":2,\"2628\":2,\"2629\":1,\"2654\":1,\"2655\":6,\"2668\":2,\"2669\":5,\"2680\":6,\"2681\":1,\"2682\":1,\"2683\":7,\"2684\":2,\"2685\":5,\"2693\":1,\"2697\":2,\"3002\":2,\"3003\":12,\"3019\":1,\"3020\":5,\"3034\":10,\"3046\":2,\"3120\":1,\"3134\":3,\"3135\":1,\"3145\":1,\"3149\":4,\"3154\":3,\"3159\":2,\"3170\":6,\"3276\":3}}],[\"values值必须与分区函数具有相同的类型\",{\"1\":{\"125\":1}}],[\"values中的表达式必须是常量\",{\"1\":{\"125\":1}}],[\"values\",{\"1\":{\"59\":2,\"89\":2,\"125\":3,\"232\":2,\"269\":1,\"366\":1,\"438\":1,\"439\":1,\"1642\":10,\"1684\":2,\"1687\":4,\"2059\":1,\"2407\":1,\"2665\":1,\"2820\":2,\"3005\":1,\"3052\":1,\"3164\":1,\"3209\":1}}],[\"e5rzvc1agjxbgpir2x6cmrhvnvawel0yjnkbk1sc3dhuvlevlfrrev4smtlvzvoyldsamjhbhpkr\",{\"1\":{\"3273\":1}}],[\"eureka\",{\"1\":{\"3246\":6}}],[\"e覆盖\",{\"1\":{\"3246\":1}}],[\"ethernet\",{\"1\":{\"3266\":4}}],[\"eth0\",{\"1\":{\"3099\":1}}],[\"etconf\",{\"1\":{\"1903\":1}}],[\"etcp\",{\"1\":{\"1886\":1}}],[\"etc目录\",{\"1\":{\"1785\":1}}],[\"etcd填入主节点\",{\"1\":{\"1677\":1}}],[\"etcd\",{\"1\":{\"1633\":1,\"1634\":2,\"1637\":1,\"1638\":4,\"1675\":2,\"1677\":9,\"3273\":2}}],[\"etc下可以不写\",{\"1\":{\"1503\":1}}],[\"etc\",{\"1\":{\"98\":1,\"106\":1,\"216\":1,\"219\":2,\"1351\":1,\"1362\":2,\"1369\":1,\"1370\":1,\"1371\":1,\"1372\":1,\"1373\":1,\"1421\":1,\"1422\":1,\"1423\":1,\"1477\":1,\"1478\":1,\"1484\":1,\"1495\":1,\"1503\":9,\"1504\":4,\"1513\":1,\"1535\":4,\"1548\":2,\"1576\":1,\"1577\":1,\"1578\":3,\"1595\":5,\"1610\":6,\"1615\":2,\"1620\":2,\"1621\":1,\"1624\":3,\"1634\":4,\"1638\":4,\"1648\":2,\"1650\":20,\"1661\":6,\"1666\":1,\"1669\":1,\"1672\":2,\"1675\":6,\"1677\":8,\"1685\":2,\"1692\":1,\"1694\":3,\"1697\":2,\"1698\":2,\"1713\":22,\"1731\":1,\"1732\":1,\"1746\":2,\"1752\":2,\"1753\":1,\"1771\":1,\"1778\":2,\"1788\":4,\"1848\":1,\"1855\":1,\"1872\":1,\"1876\":4,\"1903\":2,\"1907\":2,\"1918\":1,\"1919\":1,\"3250\":1,\"3266\":8,\"3267\":1,\"3268\":1,\"3270\":1,\"3271\":3,\"3273\":9,\"3275\":4}}],[\"epoll而非bio\",{\"1\":{\"3091\":1}}],[\"epsilon是一个\",{\"1\":{\"477\":1}}],[\"epsilon垃圾收集器\",{\"0\":{\"477\":1}}],[\"e>\",{\"1\":{\"2314\":2,\"2434\":1,\"2436\":1,\"2491\":1,\"2493\":1,\"2571\":1}}],[\"eg\",{\"1\":{\"1885\":1,\"1887\":1}}],[\"egd=file\",{\"1\":{\"1548\":1,\"1697\":1,\"3246\":1}}],[\"eww\",{\"1\":{\"1852\":1}}],[\"ef\",{\"1\":{\"1786\":1,\"1892\":1}}],[\"ef|grep\",{\"1\":{\"1736\":1}}],[\"e10adc3949ba59abbe56e057f20f883e\",{\"1\":{\"1687\":1}}],[\"ebtables\",{\"1\":{\"1610\":1,\"1636\":1,\"1677\":1}}],[\"eba5d4c6\",{\"1\":{\"118\":1}}],[\"e配置是针对某个用户的\",{\"1\":{\"1504\":1}}],[\"equal\",{\"1\":{\"1949\":1,\"1962\":1}}],[\"equalsignorecase\",{\"1\":{\"2194\":2,\"3215\":1}}],[\"equals比较值\",{\"1\":{\"1040\":2}}],[\"equals\",{\"0\":{\"2294\":1},\"1\":{\"292\":1,\"430\":1,\"441\":1,\"456\":2,\"1040\":2,\"1181\":2,\"1182\":2,\"1190\":3,\"1314\":1,\"1315\":1,\"1431\":1,\"2194\":2,\"2204\":2,\"2205\":1,\"2247\":1,\"2248\":4,\"2255\":2,\"2294\":1,\"2314\":1,\"2340\":4,\"2382\":2,\"2407\":1,\"2440\":1,\"2448\":4,\"2496\":1,\"2507\":4,\"2508\":2,\"2600\":2,\"2605\":2,\"2680\":1,\"3208\":4,\"3215\":1,\"3218\":2,\"3238\":1}}],[\"eq\",{\"1\":{\"1458\":2,\"2110\":1,\"2682\":1,\"2683\":1}}],[\"esc\",{\"1\":{\"1787\":1}}],[\"established\",{\"1\":{\"1880\":2,\"1881\":1,\"3209\":3}}],[\"establishment\",{\"1\":{\"1104\":1}}],[\"estate\",{\"1\":{\"1711\":1}}],[\"es配置文件\",{\"1\":{\"1560\":1}}],[\"es7\",{\"1\":{\"1551\":1}}],[\"es最大虚拟内存至少262144\",{\"1\":{\"1513\":1}}],[\"es\",{\"1\":{\"1371\":1,\"1509\":1,\"1510\":4,\"1511\":2,\"1512\":5,\"1513\":1,\"1516\":1,\"1523\":1,\"1542\":1,\"1560\":4,\"1638\":1}}],[\"esac\",{\"1\":{\"1369\":2,\"1370\":1,\"1371\":1,\"1372\":1,\"1373\":1}}],[\"es设置密码\",{\"1\":{\"1349\":1}}],[\"edns\",{\"1\":{\"3282\":1}}],[\"edns0\",{\"1\":{\"1662\":1}}],[\"edgewatcheragent\",{\"1\":{\"1638\":1}}],[\"edgewatcher\",{\"1\":{\"1638\":1}}],[\"edge\",{\"1\":{\"1488\":1,\"1667\":2}}],[\"edu\",{\"1\":{\"1488\":2}}],[\"edit\",{\"1\":{\"993\":1}}],[\"eden与survivor比例等参数\",{\"1\":{\"811\":1,\"845\":1,\"879\":1,\"913\":1}}],[\"eden区与survivor区比例\",{\"1\":{\"792\":1,\"826\":1,\"860\":1,\"894\":1}}],[\"eden\",{\"1\":{\"707\":1,\"792\":2,\"826\":2,\"860\":2,\"894\":2}}],[\"ee\",{\"0\":{\"577\":1},\"1\":{\"577\":2}}],[\"ee功能\",{\"1\":{\"571\":1}}],[\"ec87533a\",{\"1\":{\"3266\":4}}],[\"ecdhe\",{\"1\":{\"3237\":1}}],[\"ecmascript\",{\"1\":{\"1437\":1}}],[\"eclipse\",{\"1\":{\"510\":1}}],[\"echo服务器启动\",{\"1\":{\"3125\":1}}],[\"echo服务器示例\",{\"1\":{\"3125\":1}}],[\"echoserverhandler\",{\"1\":{\"3125\":2}}],[\"echo\",{\"1\":{\"280\":1,\"1369\":2,\"1370\":1,\"1371\":1,\"1372\":1,\"1373\":1,\"1426\":1,\"1548\":1,\"1656\":1,\"1697\":1,\"1711\":1,\"1896\":1,\"3246\":4}}],[\"eagleye\",{\"1\":{\"1864\":2,\"1873\":1}}],[\"earliest\",{\"1\":{\"1535\":1}}],[\"each\",{\"1\":{\"1453\":8,\"1454\":2,\"1467\":1,\"2128\":1}}],[\"eafp\",{\"1\":{\"1254\":1}}],[\"eats小狗粮\",{\"1\":{\"2077\":1}}],[\"eats骨头\",{\"1\":{\"2077\":1,\"2100\":1}}],[\"eat\",{\"1\":{\"1204\":2,\"1211\":6,\"2077\":4,\"2100\":2,\"2736\":2,\"2737\":2,\"2738\":2,\"2740\":3,\"2797\":2}}],[\"eable\",{\"1\":{\"417\":1,\"461\":1}}],[\"easyexcel\",{\"1\":{\"269\":3}}],[\"eyjlehaioje1ndq1mte3ndmsimp0asi6ijyxymvmnjkylte4m2itngyxyy1hzje1lwuwmdm0mtcznzkxosj9\",{\"1\":{\"303\":1,\"307\":1}}],[\"eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9\",{\"1\":{\"303\":1,\"307\":1}}],[\"eldest\",{\"1\":{\"2427\":1,\"2628\":1,\"2632\":2,\"2642\":1}}],[\"el8\",{\"1\":{\"1581\":1,\"1582\":1,\"1583\":5,\"1660\":4}}],[\"elastcsearch存储消息\",{\"1\":{\"1505\":1,\"1535\":1}}],[\"elastic\",{\"1\":{\"1357\":1,\"1363\":1,\"1523\":1,\"1526\":1}}],[\"elastic是默认的用户组之一\",{\"1\":{\"1357\":1}}],[\"elasticsearchdatavolumesize\",{\"1\":{\"1638\":1}}],[\"elasticsearchmastervolumesize\",{\"1\":{\"1638\":1}}],[\"elasticsearch7\",{\"1\":{\"1542\":1}}],[\"elasticsearch集群\",{\"1\":{\"1536\":1}}],[\"elasticsearch启动时遇到的错误\",{\"1\":{\"1513\":1}}],[\"elasticsearch的默认端口是9200\",{\"1\":{\"1512\":1}}],[\"elasticsearch并输入以下内容\",{\"1\":{\"1371\":1}}],[\"elasticsearch端口\",{\"1\":{\"1367\":1}}],[\"elasticsearch\",{\"0\":{\"1351\":1,\"1353\":1,\"1371\":1},\"1\":{\"1351\":3,\"1353\":1,\"1354\":4,\"1357\":2,\"1358\":2,\"1362\":1,\"1363\":1,\"1371\":7,\"1507\":4,\"1508\":2,\"1510\":1,\"1511\":1,\"1512\":6,\"1513\":1,\"1516\":1,\"1517\":2,\"1520\":2,\"1523\":3,\"1524\":1,\"1535\":1,\"1660\":1,\"3103\":2,\"3104\":1}}],[\"elasticsearch安全认证\",{\"0\":{\"1350\":1}}],[\"elfutils\",{\"1\":{\"1486\":1}}],[\"elrepo\",{\"1\":{\"1472\":2,\"1474\":5,\"1475\":1,\"1478\":1,\"1480\":2,\"1481\":6,\"1482\":2,\"1483\":3,\"1484\":2,\"1495\":2,\"1496\":2,\"1497\":1,\"1498\":3,\"1499\":3}}],[\"ele\",{\"1\":{\"1453\":9}}],[\"elementdata和defaultcapacity\",{\"1\":{\"2445\":1}}],[\"elementdata\",{\"1\":{\"2318\":11,\"2433\":4,\"2436\":12,\"2437\":10,\"2438\":3,\"2439\":5,\"2440\":10,\"2441\":4,\"2445\":1}}],[\"elements\",{\"1\":{\"2161\":8,\"2355\":2,\"2892\":1,\"2893\":1,\"2897\":1}}],[\"elementkind\",{\"1\":{\"1087\":3,\"3162\":1}}],[\"element\",{\"1\":{\"1043\":5,\"1053\":1,\"1087\":8,\"1179\":5,\"1186\":1,\"1190\":7,\"1462\":6,\"1465\":4,\"2161\":2,\"2234\":2,\"2314\":2,\"2319\":2,\"2327\":6,\"2341\":2,\"2345\":1,\"2348\":1,\"2349\":1,\"2437\":3,\"2439\":3,\"2441\":2,\"2462\":1,\"2476\":4,\"2490\":2,\"2494\":4,\"2495\":3,\"2496\":2,\"2497\":4,\"2513\":8,\"2523\":2,\"2544\":8,\"2704\":2,\"2936\":4,\"3019\":1,\"3025\":2,\"3038\":2,\"3147\":4,\"3162\":4}}],[\"elementtype\",{\"1\":{\"267\":1,\"417\":1,\"423\":1,\"1064\":1,\"1068\":1,\"1069\":4,\"1078\":2,\"1087\":1,\"3002\":1,\"3003\":3,\"3005\":1,\"3135\":2,\"3137\":1,\"3141\":2,\"3154\":1,\"3162\":1,\"3170\":2}}],[\"el7\",{\"1\":{\"1419\":1,\"1420\":3,\"1474\":1,\"1478\":2,\"1480\":1,\"1481\":6,\"1482\":2,\"1483\":8,\"1484\":3,\"1490\":2,\"1495\":3,\"1496\":2,\"1497\":1,\"1498\":8,\"1499\":8,\"1581\":1,\"1724\":4,\"1765\":4,\"1767\":1,\"1768\":1,\"1769\":1,\"1770\":1,\"1778\":1,\"3273\":2,\"3282\":1}}],[\"elk日志收集技术\",{\"0\":{\"3303\":1}}],[\"elkprefix\",{\"1\":{\"1638\":1}}],[\"elk集成\",{\"1\":{\"1610\":1}}],[\"elk主要由elasticsearch\",{\"1\":{\"1507\":1}}],[\"elk的密码认证方式到此成功设置完毕\",{\"1\":{\"1364\":1}}],[\"elk体系有很多的用户组\",{\"1\":{\"1357\":1}}],[\"elk\",{\"1\":{\"1354\":1,\"1509\":1,\"1510\":4,\"1511\":1,\"1512\":3,\"1517\":1,\"1518\":1,\"1523\":2,\"1524\":1,\"1526\":4,\"1527\":1,\"1529\":3,\"1530\":3,\"1535\":5,\"3103\":1}}],[\"elk登录认证\",{\"0\":{\"1349\":1}}],[\"elk登录认证配置\",{\"0\":{\"1348\":1}}],[\"else嵌套\",{\"1\":{\"2061\":1}}],[\"else语句\",{\"0\":{\"2061\":1}}],[\"else体\",{\"1\":{\"2033\":1}}],[\"else++s\",{\"1\":{\"1881\":1}}],[\"else\",{\"0\":{\"2125\":1},\"1\":{\"289\":2,\"1055\":1,\"1068\":2,\"1161\":2,\"1203\":1,\"1209\":1,\"1315\":1,\"1324\":1,\"1325\":2,\"1338\":1,\"1431\":1,\"1444\":2,\"1831\":2,\"2033\":1,\"2061\":2,\"2078\":3,\"2125\":4,\"2327\":2,\"2407\":1,\"2436\":3,\"2440\":1,\"2450\":1,\"2485\":2,\"2494\":3,\"2495\":1,\"2496\":3,\"2497\":3,\"2498\":2,\"2536\":2,\"2554\":1,\"2573\":1,\"2575\":2,\"2600\":3,\"2601\":8,\"2628\":1,\"2629\":3,\"2630\":2,\"2655\":6,\"2656\":3,\"2657\":4,\"2660\":1,\"2681\":2,\"2684\":1,\"2710\":2,\"2749\":1,\"2809\":1,\"2849\":1,\"2873\":2,\"2921\":1,\"3000\":2,\"3007\":7,\"3079\":1,\"3087\":1,\"3118\":1,\"3120\":1,\"3154\":1,\"3170\":1,\"3205\":5,\"3208\":4,\"3215\":1,\"3218\":1,\"3223\":1,\"3224\":1,\"3241\":1}}],[\"evict\",{\"1\":{\"2600\":2,\"2628\":2}}],[\"evicted\",{\"1\":{\"193\":1}}],[\"ev\",{\"1\":{\"1778\":1}}],[\"eva\",{\"1\":{\"543\":1}}],[\"even\",{\"1\":{\"1458\":2,\"1460\":1,\"1578\":1}}],[\"eventloop线程安全\",{\"1\":{\"3129\":1}}],[\"eventloop线程池\",{\"1\":{\"3128\":1}}],[\"eventloop\",{\"1\":{\"3124\":1}}],[\"eventloopgroup\",{\"1\":{\"1111\":2,\"1332\":2,\"3125\":2}}],[\"eventtaskinterval=10\",{\"1\":{\"235\":1}}],[\"events\",{\"1\":{\"216\":1,\"1385\":1,\"1535\":1,\"1595\":1,\"1638\":1}}],[\"event\",{\"1\":{\"122\":1,\"125\":1,\"1328\":1,\"3240\":3}}],[\"everysec\",{\"1\":{\"140\":1}}],[\"em1\",{\"1\":{\"1851\":1,\"1878\":1}}],[\"email`\",{\"1\":{\"1687\":2}}],[\"email>\",{\"1\":{\"999\":1}}],[\"email\",{\"1\":{\"997\":1,\"1841\":1,\"2759\":1,\"3162\":2}}],[\"embedded\",{\"1\":{\"125\":1}}],[\"emptystackexception\",{\"1\":{\"2551\":1}}],[\"emptydir\",{\"1\":{\"1648\":1,\"1649\":1,\"1650\":10,\"1661\":1,\"1685\":1,\"1688\":1,\"1698\":1,\"1713\":11}}],[\"emptylist不可修改\",{\"1\":{\"1194\":1}}],[\"emptylist\",{\"1\":{\"1194\":4}}],[\"emptyoptional\",{\"1\":{\"544\":1}}],[\"empty\",{\"1\":{\"125\":1,\"474\":1,\"502\":1,\"544\":1,\"1095\":1,\"1462\":2,\"1962\":1,\"1975\":1,\"2318\":3,\"2408\":1,\"2433\":2,\"2436\":3,\"2437\":1,\"2445\":2,\"2708\":1}}],[\"emit\",{\"1\":{\"59\":1,\"89\":1}}],[\"eof\",{\"1\":{\"125\":3,\"1610\":2,\"1615\":2,\"1675\":2,\"1746\":2,\"3273\":1}}],[\"erasure\",{\"1\":{\"3029\":1,\"3034\":1}}],[\"erasuredemo\",{\"1\":{\"1290\":1}}],[\"erasuredemo<t\",{\"1\":{\"1290\":1}}],[\"err是printstream实例\",{\"1\":{\"2909\":1}}],[\"err到文件\",{\"1\":{\"2909\":1}}],[\"errfile\",{\"1\":{\"2909\":2}}],[\"err输出到文件\",{\"1\":{\"2909\":1}}],[\"erro\",{\"1\":{\"1677\":1}}],[\"errorresponse\",{\"1\":{\"2960\":2}}],[\"errorresult\",{\"1\":{\"429\":13}}],[\"errordecoder\",{\"1\":{\"2960\":1}}],[\"errordemo\",{\"1\":{\"1243\":1}}],[\"error字符串所在位置\",{\"1\":{\"1788\":1}}],[\"error定位到stop\",{\"1\":{\"1788\":1}}],[\"error值设置为no即可避免这种问题\",{\"1\":{\"1788\":1}}],[\"errors\",{\"1\":{\"1503\":2,\"1578\":1,\"3109\":2}}],[\"error示例\",{\"1\":{\"1243\":1}}],[\"errorcode\",{\"1\":{\"1044\":5,\"1249\":8,\"2051\":2,\"2938\":8}}],[\"error\",{\"0\":{\"1667\":2},\"1\":{\"91\":1,\"125\":88,\"156\":1,\"193\":1,\"216\":1,\"286\":4,\"441\":1,\"518\":1,\"1068\":1,\"1087\":2,\"1243\":1,\"1253\":1,\"1254\":2,\"1337\":2,\"1384\":1,\"1385\":1,\"1435\":2,\"1436\":1,\"1569\":1,\"1578\":2,\"1595\":2,\"1677\":4,\"1735\":2,\"1764\":1,\"1787\":1,\"1788\":2,\"2037\":2,\"2047\":1,\"2051\":1,\"2061\":4,\"2070\":1,\"2071\":2,\"2256\":3,\"2925\":1,\"2929\":1,\"2955\":1,\"2956\":2,\"2959\":2,\"2960\":4,\"2993\":2}}],[\"err\",{\"1\":{\"125\":4,\"491\":1,\"1044\":5,\"1238\":1,\"2450\":1,\"2902\":1,\"2909\":3}}],[\"errmsg\",{\"1\":{\"125\":4,\"1764\":2}}],[\"errno\",{\"1\":{\"125\":22}}],[\"er\",{\"1\":{\"125\":494}}],[\"ejabberd\",{\"1\":{\"122\":47}}],[\"extra\",{\"0\":{\"3291\":1}}],[\"extractdomain\",{\"1\":{\"3212\":2}}],[\"ext4\",{\"1\":{\"1500\":1}}],[\"extclassloader\",{\"1\":{\"745\":3}}],[\"ext目录\",{\"1\":{\"742\":1}}],[\"external\",{\"1\":{\"1660\":1,\"1940\":1,\"3273\":1,\"3276\":2}}],[\"externalelasticsearchport\",{\"1\":{\"1638\":1}}],[\"externalelasticsearchurl\",{\"1\":{\"1638\":1}}],[\"extern\",{\"1\":{\"286\":1}}],[\"extendwith\",{\"1\":{\"3166\":2}}],[\"extends=\",{\"1\":{\"3053\":1}}],[\"extends关键字实现继承\",{\"1\":{\"2808\":1}}],[\"extends\",{\"0\":{\"3039\":1},\"1\":{\"269\":1,\"271\":1,\"291\":1,\"440\":1,\"451\":1,\"456\":2,\"592\":1,\"729\":1,\"746\":1,\"747\":1,\"1038\":1,\"1044\":1,\"1078\":1,\"1087\":2,\"1204\":1,\"1205\":1,\"1209\":2,\"1210\":2,\"1249\":1,\"1290\":1,\"1296\":1,\"1332\":1,\"1431\":1,\"1440\":1,\"1443\":1,\"1444\":1,\"2007\":1,\"2027\":1,\"2077\":2,\"2263\":2,\"2314\":3,\"2427\":1,\"2436\":1,\"2493\":1,\"2623\":1,\"2632\":1,\"2642\":1,\"2679\":1,\"2680\":1,\"2736\":1,\"2737\":1,\"2738\":1,\"2745\":1,\"2748\":2,\"2797\":1,\"2808\":2,\"2873\":1,\"2890\":1,\"2937\":1,\"2938\":1,\"2984\":1,\"3003\":1,\"3021\":1,\"3025\":2,\"3029\":1,\"3034\":1,\"3036\":2,\"3039\":2,\"3041\":4,\"3046\":1,\"3049\":2,\"3050\":3,\"3052\":1,\"3125\":1,\"3145\":1,\"3147\":2,\"3162\":2}}],[\"extensions\",{\"1\":{\"1648\":2,\"1649\":2,\"1650\":2,\"1685\":2,\"1688\":2,\"1713\":2}}],[\"extensions>\",{\"1\":{\"999\":1,\"1003\":1}}],[\"extensionclassloader\",{\"1\":{\"1147\":3}}],[\"extension\",{\"1\":{\"125\":1,\"742\":1,\"3166\":1}}],[\"example<\",{\"1\":{\"584\":1,\"926\":1,\"928\":2,\"936\":1,\"1016\":1}}],[\"example\",{\"1\":{\"338\":3,\"368\":1,\"393\":2,\"439\":6,\"471\":2,\"490\":4,\"500\":2,\"529\":1,\"574\":1,\"746\":1,\"1087\":1,\"1092\":8,\"1094\":1,\"1221\":1,\"1266\":1,\"1281\":1,\"1841\":1,\"2232\":1,\"2796\":2,\"2831\":1,\"2849\":1,\"2965\":1,\"2980\":2,\"2999\":2,\"3010\":4,\"3053\":2,\"3085\":1,\"3107\":2,\"3147\":2,\"3162\":2,\"3177\":1,\"3180\":3,\"3215\":1,\"3224\":1}}],[\"exc\",{\"1\":{\"1238\":9,\"3120\":6}}],[\"excludedportrange\",{\"1\":{\"1569\":1}}],[\"excludepathpatterns\",{\"1\":{\"430\":1}}],[\"exclusions>\",{\"1\":{\"416\":1,\"928\":1,\"953\":1,\"1016\":1}}],[\"exclusion>\",{\"1\":{\"416\":1,\"928\":1,\"953\":1,\"1016\":1}}],[\"exchange\",{\"1\":{\"285\":2,\"450\":1}}],[\"exceeded｜\",{\"1\":{\"1558\":1}}],[\"excel表格数据\",{\"1\":{\"2177\":1}}],[\"exceltype\",{\"1\":{\"269\":1}}],[\"exceltypeenum\",{\"1\":{\"269\":2}}],[\"excelexporter\",{\"1\":{\"269\":1,\"270\":3,\"278\":1}}],[\"excelwriter\",{\"1\":{\"269\":2}}],[\"excel\",{\"1\":{\"269\":5}}],[\"excel导出工具类\",{\"0\":{\"268\":1}}],[\"exceptioncaught\",{\"1\":{\"3125\":1}}],[\"exceptionchainingdemo\",{\"1\":{\"2937\":1}}],[\"exceptions\",{\"1\":{\"2953\":5}}],[\"exceptiontabledemo\",{\"1\":{\"2935\":1}}],[\"exceptiontime\",{\"1\":{\"1250\":3}}],[\"exceptionbasicexample\",{\"1\":{\"2927\":1}}],[\"exceptionperformancedemo\",{\"1\":{\"1250\":1}}],[\"exceptiondemo\",{\"1\":{\"1243\":1}}],[\"exception示例\",{\"1\":{\"1243\":1}}],[\"exceptionevent\",{\"1\":{\"1094\":1,\"3190\":1}}],[\"exceptionhandlingdemo\",{\"1\":{\"1044\":1,\"2079\":1}}],[\"exceptionhandler\",{\"1\":{\"429\":2,\"2956\":3}}],[\"exceptionhandler注解来统一处理异常\",{\"1\":{\"429\":1}}],[\"exceptionally\",{\"1\":{\"491\":1}}],[\"exceptionutil\",{\"1\":{\"287\":3}}],[\"exception\",{\"0\":{\"2937\":1},\"1\":{\"71\":1,\"283\":1,\"286\":2,\"368\":1,\"429\":2,\"430\":1,\"451\":2,\"456\":2,\"471\":1,\"500\":2,\"592\":1,\"729\":1,\"746\":1,\"1044\":1,\"1068\":1,\"1094\":3,\"1104\":1,\"1111\":2,\"1243\":1,\"1246\":1,\"1249\":1,\"1264\":1,\"1269\":1,\"1270\":1,\"1332\":2,\"1337\":1,\"1439\":5,\"2012\":1,\"2037\":1,\"2079\":3,\"2524\":2,\"2923\":2,\"2925\":1,\"2926\":2,\"2929\":1,\"2935\":2,\"2936\":1,\"2937\":1,\"2938\":1,\"2948\":1,\"2953\":1,\"2956\":2,\"2959\":2,\"2960\":2,\"2969\":1,\"2970\":1,\"2971\":1,\"2980\":1,\"2983\":1,\"2984\":1,\"2986\":2,\"2989\":1,\"2990\":1,\"2993\":2,\"2999\":4,\"3000\":3,\"3002\":2,\"3003\":1,\"3005\":6,\"3007\":2,\"3085\":1,\"3087\":3,\"3125\":3,\"3160\":1,\"3190\":3,\"3199\":1,\"3206\":4,\"3208\":4,\"3212\":2,\"3214\":2,\"3215\":3,\"3217\":4,\"3218\":3,\"3222\":1,\"3224\":2,\"3232\":1,\"3237\":2,\"3238\":1,\"3241\":1}}],[\"ex\",{\"1\":{\"200\":1,\"491\":2,\"2441\":1}}],[\"expungestaleentries\",{\"1\":{\"2681\":2,\"2682\":1}}],[\"explanations\",{\"1\":{\"1578\":1}}],[\"explain\",{\"1\":{\"125\":2}}],[\"exposing\",{\"1\":{\"1569\":1}}],[\"expose\",{\"1\":{\"1548\":1,\"1697\":1,\"3246\":4,\"3250\":1}}],[\"exports\",{\"1\":{\"490\":1,\"3010\":1,\"3275\":2}}],[\"exportvalidreportingerrorlog\",{\"1\":{\"270\":2}}],[\"export\",{\"1\":{\"269\":1,\"270\":1,\"278\":1,\"1369\":2,\"1586\":1,\"1624\":1,\"1633\":1,\"1637\":1,\"1677\":1,\"1731\":3,\"1798\":1,\"3275\":1}}],[\"expectedresponse\",{\"1\":{\"3215\":2,\"3238\":2}}],[\"expectedresult\",{\"1\":{\"2046\":1}}],[\"expectedthroughput\",{\"1\":{\"2539\":2}}],[\"expectedmodcount\",{\"1\":{\"2441\":3,\"2498\":4}}],[\"expectedlength\",{\"1\":{\"2278\":2}}],[\"expectedseq\",{\"1\":{\"1312\":1}}],[\"expectedsize\",{\"1\":{\"1193\":4,\"2386\":2,\"2423\":2,\"2604\":4,\"2614\":2}}],[\"expert\",{\"1\":{\"312\":1}}],[\"expiration\",{\"1\":{\"456\":2}}],[\"expiresheader\",{\"1\":{\"3199\":3}}],[\"expires=1653884153\",{\"1\":{\"286\":2}}],[\"expires\",{\"1\":{\"157\":1,\"279\":1,\"997\":2}}],[\"expire\",{\"1\":{\"113\":3,\"153\":1,\"199\":1,\"3170\":3}}],[\"exp\",{\"1\":{\"303\":1}}],[\"expression\",{\"1\":{\"537\":1}}],[\"expr\",{\"1\":{\"125\":2}}],[\"existing\",{\"1\":{\"1232\":1,\"2600\":1,\"3244\":1}}],[\"existent\",{\"1\":{\"125\":1}}],[\"exist\",{\"1\":{\"125\":4}}],[\"exists\",{\"1\":{\"125\":8,\"199\":1,\"286\":3,\"1640\":1,\"1825\":1}}],[\"exited\",{\"1\":{\"1507\":1,\"1677\":2}}],[\"exits\",{\"1\":{\"125\":2}}],[\"exit\",{\"1\":{\"121\":1,\"1314\":1,\"1315\":1,\"1896\":1}}],[\"execreload=\",{\"1\":{\"1620\":1,\"1752\":1}}],[\"execstart=\",{\"1\":{\"1620\":1,\"1752\":1}}],[\"exec\",{\"1\":{\"125\":1,\"206\":1,\"219\":1,\"223\":1,\"227\":1,\"256\":1,\"1354\":1,\"1520\":1,\"1531\":1,\"1570\":1,\"1577\":1,\"1578\":1,\"1607\":1,\"1615\":1,\"1621\":2,\"1666\":1,\"1669\":1,\"1675\":1,\"1677\":1,\"1746\":1,\"1753\":2,\"1873\":2,\"3245\":1}}],[\"executableelement\",{\"1\":{\"1087\":2}}],[\"executable>\",{\"1\":{\"998\":2}}],[\"executors创建的线程池可能存在以下问题\",{\"1\":{\"631\":1}}],[\"executors\",{\"1\":{\"527\":1,\"529\":1,\"592\":1,\"625\":1,\"626\":1,\"1135\":1,\"1186\":1,\"1254\":1,\"2466\":2,\"2522\":2,\"2523\":2,\"2524\":1,\"2921\":2,\"3217\":2,\"3218\":2,\"3240\":2}}],[\"executorservice\",{\"1\":{\"527\":1,\"529\":1,\"592\":1,\"1135\":1,\"1186\":1,\"1254\":1,\"2466\":2,\"2522\":2,\"2523\":2,\"2524\":1,\"2921\":2,\"3082\":1,\"3217\":7,\"3218\":2,\"3225\":1,\"3240\":1}}],[\"executor\",{\"1\":{\"527\":2,\"529\":2,\"592\":3,\"625\":3,\"626\":7,\"1135\":3,\"1186\":4,\"1254\":3,\"1687\":1,\"2466\":5,\"2522\":4,\"2523\":5,\"2524\":7,\"2539\":1,\"3240\":2}}],[\"executetime\",{\"1\":{\"2467\":5}}],[\"executequery\",{\"1\":{\"2066\":1}}],[\"execute\",{\"1\":{\"354\":1,\"632\":2,\"3087\":1}}],[\"executed\",{\"1\":{\"122\":1}}],[\"executions>\",{\"1\":{\"999\":3,\"1005\":1,\"2018\":1}}],[\"execution>\",{\"1\":{\"999\":3,\"1005\":1,\"2018\":1}}],[\"executionexception\",{\"1\":{\"471\":1,\"592\":1,\"1254\":1}}],[\"execution\",{\"1\":{\"338\":3,\"340\":1,\"1687\":1,\"3002\":3}}],[\"executing\",{\"1\":{\"125\":1,\"3002\":1,\"3005\":2}}],[\"exe\",{\"1\":{\"122\":1,\"219\":1,\"1601\":1}}],[\"enldng5qtu1uufbl29fszbvbkdacklisjq5del4awp1tnmwnfvirwxvvuzpwjlmckdbqu9sk3lva\",{\"1\":{\"3273\":1}}],[\"ens33\",{\"1\":{\"3266\":16}}],[\"ensurecapacity\",{\"1\":{\"2344\":1,\"2355\":1,\"2449\":1}}],[\"ensurecapacityinternal\",{\"1\":{\"2272\":1,\"2282\":2,\"2318\":2,\"2437\":3}}],[\"ensureexplicitcapacity\",{\"1\":{\"2318\":2,\"2437\":2}}],[\"enqueue\",{\"1\":{\"2485\":1}}],[\"enum提供的核心方法\",{\"1\":{\"2820\":1}}],[\"enumdemo\",{\"1\":{\"2819\":1}}],[\"enum的类\",{\"1\":{\"2818\":1}}],[\"enumeration<inputstream>\",{\"1\":{\"2897\":1}}],[\"enumeration<fileinputstream>\",{\"1\":{\"2893\":1}}],[\"enumeration<bytearrayinputstream>\",{\"1\":{\"2892\":1}}],[\"enumeration<\",{\"1\":{\"2890\":1}}],[\"enumeration\",{\"1\":{\"2816\":1,\"2892\":3,\"2893\":3,\"2897\":3}}],[\"enum\",{\"1\":{\"1961\":1,\"2051\":1,\"2369\":1,\"2816\":1,\"2818\":1,\"2821\":1,\"2824\":1,\"3087\":1,\"3209\":1}}],[\"enumset\",{\"1\":{\"2363\":1,\"2369\":2}}],[\"enums\",{\"1\":{\"289\":1}}],[\"enxxx\",{\"1\":{\"1918\":1}}],[\"enjoy\",{\"1\":{\"1569\":1}}],[\"encapsulation\",{\"1\":{\"2730\":1}}],[\"enclosedelement\",{\"1\":{\"1087\":6}}],[\"encodings\",{\"1\":{\"2885\":2}}],[\"encodingdetector\",{\"1\":{\"2885\":1}}],[\"encodingconversionexample\",{\"1\":{\"2861\":1}}],[\"encoding\",{\"1\":{\"1005\":2,\"1999\":1,\"2885\":4}}],[\"encoding>\",{\"1\":{\"956\":1}}],[\"encoding=\",{\"1\":{\"439\":1,\"1564\":1}}],[\"encoded\",{\"1\":{\"2855\":1,\"2878\":1}}],[\"encoder>\",{\"1\":{\"1564\":3,\"2072\":1,\"3102\":1}}],[\"encoder\",{\"1\":{\"1564\":3}}],[\"encode\",{\"1\":{\"269\":1,\"286\":1,\"294\":1,\"2068\":1}}],[\"encodefilename\",{\"1\":{\"269\":2}}],[\"en\",{\"1\":{\"439\":1,\"1431\":1,\"1433\":1,\"1434\":1,\"1435\":1,\"1440\":1,\"1447\":1,\"1450\":1,\"1455\":1,\"1456\":1,\"1457\":1,\"1458\":1,\"1459\":1,\"1461\":1,\"1462\":1,\"1463\":1,\"1464\":1,\"1467\":1,\"1469\":1,\"1578\":1}}],[\"enterprise才有审计功能\",{\"1\":{\"1738\":1}}],[\"enterprise\",{\"1\":{\"1579\":1,\"1738\":1}}],[\"entries\",{\"1\":{\"289\":2}}],[\"entrypont执行的时候的用户\",{\"1\":{\"3246\":1}}],[\"entrypoint\",{\"1\":{\"1528\":1,\"1548\":1,\"1697\":1,\"3246\":4,\"3271\":1}}],[\"entry接口实现\",{\"1\":{\"2680\":1}}],[\"entry接口的spliterator\",{\"1\":{\"2677\":1}}],[\"entry节点实现\",{\"0\":{\"2680\":1}}],[\"entry<object\",{\"1\":{\"2642\":1,\"3007\":1}}],[\"entry<>\",{\"1\":{\"1181\":1,\"2655\":2,\"2683\":1}}],[\"entry<k\",{\"1\":{\"1181\":11,\"2427\":1,\"2623\":2,\"2628\":5,\"2629\":3,\"2630\":2,\"2632\":1,\"2654\":5,\"2655\":3,\"2656\":3,\"2657\":4,\"2679\":1,\"2680\":4,\"2681\":5,\"2682\":3,\"2683\":3,\"2684\":7}}],[\"entry<string\",{\"1\":{\"289\":2,\"2059\":1,\"2407\":3,\"2408\":2,\"2420\":2,\"2615\":1,\"2660\":1}}],[\"entryset遍历键值对\",{\"1\":{\"2615\":1}}],[\"entryset\",{\"1\":{\"283\":1,\"289\":1,\"2059\":2,\"2407\":2,\"2408\":4,\"2420\":1,\"2615\":1,\"2621\":1,\"2660\":1,\"2665\":1,\"2688\":1,\"3007\":1}}],[\"entry\",{\"1\":{\"125\":3,\"283\":3,\"289\":3,\"1181\":24,\"2059\":3,\"2407\":7,\"2408\":9,\"2420\":2,\"2615\":3,\"2623\":1,\"2643\":1,\"2660\":3,\"2680\":1,\"2684\":1,\"3007\":3}}],[\"entity\",{\"1\":{\"285\":2,\"289\":2,\"439\":4,\"440\":1,\"578\":1,\"1642\":4,\"2763\":1,\"3049\":1,\"3050\":1,\"3052\":3,\"3053\":2,\"3165\":1}}],[\"entity=new\",{\"1\":{\"285\":2}}],[\"enablefreemonitoring\",{\"1\":{\"1764\":1}}],[\"enableconfigsubstitution\",{\"1\":{\"1656\":1,\"1711\":1}}],[\"enablemultilogin\",{\"1\":{\"1638\":1}}],[\"enablemyfeature注解就可以加载myservice这个bean了\",{\"1\":{\"423\":1}}],[\"enablemyfeature\",{\"1\":{\"417\":1,\"423\":1}}],[\"enable=true\",{\"1\":{\"1535\":1,\"1644\":1}}],[\"enablerepo=elrepo\",{\"1\":{\"1476\":2}}],[\"enablerepo=\",{\"1\":{\"1475\":1}}],[\"enablewebsecurity\",{\"1\":{\"451\":1,\"456\":1,\"2012\":1}}],[\"enablewebmvc\",{\"1\":{\"382\":1}}],[\"enableautoconfiguration又被\",{\"1\":{\"463\":1}}],[\"enableautoconfiguration\",{\"1\":{\"461\":1,\"463\":3}}],[\"enableautoconfiguration注解导入autoconfigurationimportselector类\",{\"1\":{\"423\":1}}],[\"enableautoconfiguration注解表示自动配置\",{\"1\":{\"419\":1,\"463\":1}}],[\"enableautoconfiguration注解\",{\"0\":{\"419\":1,\"463\":1}}],[\"enableaspectjautoproxy\",{\"1\":{\"267\":1,\"339\":1}}],[\"enable注解原理\",{\"0\":{\"417\":1}}],[\"enable注解原理等\",{\"1\":{\"413\":1}}],[\"enabletransactionmanagement\",{\"1\":{\"353\":1}}],[\"enable\",{\"0\":{\"1665\":1},\"1\":{\"256\":1,\"570\":1,\"1585\":1,\"1614\":1,\"1620\":1,\"1667\":1,\"1674\":1,\"1745\":1,\"1752\":1,\"1788\":1,\"1909\":1,\"1936\":1,\"3271\":1,\"3275\":1}}],[\"enabled=1\",{\"1\":{\"3273\":2}}],[\"enabled>\",{\"1\":{\"984\":2,\"985\":2}}],[\"enabled\",{\"1\":{\"186\":1,\"232\":1,\"1352\":2,\"1459\":2,\"1517\":1,\"1520\":1,\"1560\":3,\"1638\":15,\"1648\":3,\"1649\":3,\"1650\":21,\"1661\":1,\"1684\":2,\"1685\":3,\"1688\":3,\"1698\":1,\"1713\":23,\"1734\":3,\"1736\":1,\"1764\":2,\"1938\":1}}],[\"envsubst\",{\"1\":{\"1656\":13,\"1711\":13}}],[\"environment环境变量要改一下\",{\"1\":{\"1711\":1}}],[\"environment环境变量需要调整\",{\"1\":{\"1656\":1}}],[\"environment\",{\"1\":{\"250\":2,\"280\":1,\"1005\":1,\"1535\":1,\"1656\":1,\"1711\":1,\"1731\":1,\"3246\":1}}],[\"enviction\",{\"1\":{\"157\":1}}],[\"env\",{\"1\":{\"234\":1,\"280\":2,\"1542\":1,\"1548\":1,\"1551\":2,\"1558\":1,\"1648\":1,\"1649\":1,\"1656\":1,\"1661\":1,\"1685\":1,\"1688\":1,\"1697\":1,\"1698\":1,\"1711\":1,\"1838\":1,\"1868\":1,\"3246\":3,\"3276\":1}}],[\"endswith\",{\"1\":{\"2195\":2}}],[\"endsession\",{\"1\":{\"91\":1}}],[\"endpoint\",{\"1\":{\"1638\":1}}],[\"endpointips\",{\"1\":{\"1638\":1}}],[\"endpoints中的\",{\"1\":{\"411\":1}}],[\"endpoints来实现配置的热更新\",{\"1\":{\"411\":1}}],[\"endindex\",{\"1\":{\"288\":3,\"2296\":7}}],[\"endtime\",{\"1\":{\"270\":3,\"1224\":4,\"2866\":2,\"2868\":4,\"3002\":2,\"3209\":1}}],[\"end\",{\"1\":{\"200\":1,\"267\":1,\"289\":10,\"338\":1,\"1831\":2,\"1872\":1,\"1881\":2,\"2854\":1}}],[\"engine分配给这个容器一个虚拟的ip地址\",{\"1\":{\"3245\":1}}],[\"engineer\",{\"1\":{\"2605\":1}}],[\"engine=innodb\",{\"1\":{\"232\":9,\"1684\":9,\"1687\":8}}],[\"engine\",{\"1\":{\"122\":1,\"125\":1,\"1610\":1,\"1620\":1,\"1671\":1,\"1741\":1,\"1752\":1,\"1793\":1}}],[\"enhancer\",{\"1\":{\"710\":7}}],[\"enhance\",{\"1\":{\"16\":1}}],[\"e\",{\"1\":{\"71\":1,\"119\":4,\"120\":3,\"121\":2,\"122\":1,\"123\":1,\"216\":1,\"226\":1,\"234\":4,\"242\":4,\"255\":2,\"283\":2,\"286\":8,\"429\":4,\"456\":1,\"518\":3,\"609\":2,\"610\":1,\"625\":2,\"626\":4,\"676\":4,\"693\":2,\"710\":2,\"746\":2,\"747\":2,\"997\":2,\"1005\":1,\"1040\":1,\"1044\":12,\"1055\":3,\"1068\":4,\"1069\":4,\"1186\":2,\"1190\":2,\"1191\":3,\"1194\":4,\"1221\":4,\"1222\":4,\"1225\":4,\"1228\":2,\"1232\":2,\"1234\":6,\"1237\":1,\"1238\":7,\"1243\":2,\"1246\":1,\"1247\":6,\"1250\":1,\"1253\":5,\"1254\":4,\"1314\":4,\"1315\":1,\"1326\":4,\"1332\":2,\"1337\":7,\"1431\":2,\"1443\":2,\"1502\":2,\"1504\":1,\"1512\":2,\"1530\":15,\"1569\":1,\"1577\":1,\"1578\":2,\"1606\":1,\"1643\":9,\"1644\":2,\"1677\":1,\"1724\":4,\"1764\":1,\"1778\":1,\"1909\":1,\"2037\":6,\"2071\":3,\"2079\":4,\"2188\":1,\"2292\":1,\"2314\":7,\"2318\":3,\"2319\":10,\"2328\":1,\"2345\":1,\"2349\":2,\"2356\":14,\"2392\":6,\"2437\":5,\"2439\":6,\"2440\":2,\"2441\":2,\"2450\":2,\"2456\":7,\"2462\":4,\"2466\":2,\"2490\":2,\"2494\":13,\"2495\":4,\"2496\":3,\"2497\":20,\"2498\":12,\"2513\":4,\"2523\":2,\"2524\":5,\"2551\":4,\"2552\":5,\"2573\":6,\"2574\":5,\"2575\":7,\"2600\":11,\"2601\":16,\"2602\":4,\"2628\":2,\"2629\":7,\"2630\":2,\"2631\":4,\"2655\":4,\"2658\":14,\"2681\":10,\"2682\":7,\"2683\":10,\"2684\":10,\"2685\":2,\"2831\":4,\"2832\":2,\"2833\":2,\"2837\":4,\"2843\":4,\"2844\":2,\"2845\":4,\"2849\":4,\"2855\":4,\"2856\":2,\"2857\":4,\"2861\":2,\"2866\":2,\"2867\":2,\"2868\":6,\"2878\":4,\"2879\":4,\"2880\":2,\"2885\":3,\"2890\":1,\"2891\":2,\"2892\":2,\"2893\":2,\"2897\":2,\"2902\":2,\"2903\":4,\"2905\":1,\"2909\":2,\"2915\":2,\"2916\":2,\"2917\":2,\"2921\":8,\"2927\":2,\"2935\":5,\"2936\":3,\"2937\":2,\"2942\":1,\"2952\":2,\"2953\":2,\"2955\":2,\"2956\":7,\"2959\":7,\"2960\":1,\"2984\":2,\"2989\":2,\"2990\":2,\"2993\":6,\"3000\":1,\"3003\":5,\"3005\":9,\"3019\":1,\"3023\":1,\"3046\":3,\"3065\":8,\"3066\":4,\"3078\":2,\"3087\":2,\"3100\":1,\"3120\":7,\"3208\":4,\"3215\":1,\"3217\":4,\"3246\":1,\"3275\":1}}],[\"合并多个数据源\",{\"1\":{\"2897\":1}}],[\"合并多个文本文件\",{\"1\":{\"2893\":1}}],[\"合并相同键的值\",{\"1\":{\"59\":1}}],[\"合适的大容量值\",{\"1\":{\"2438\":1}}],[\"合理配置线程池和内存使用\",{\"1\":{\"3228\":1}}],[\"合理配置线程池大小\",{\"1\":{\"3225\":1}}],[\"合理使用反射可以在不破坏整体设计的前提下实现高级功能\",{\"1\":{\"2975\":1}}],[\"合理使用关键字使代码自文档化\",{\"1\":{\"2812\":1}}],[\"合理使用intern\",{\"0\":{\"2311\":1}}],[\"合理使用线程池而非手动创建线程\",{\"1\":{\"2041\":1}}],[\"合理的容量管理对性能至关重要\",{\"1\":{\"2270\":1}}],[\"合理拆分模块\",{\"1\":{\"967\":1}}],[\"合理设置接收缓冲区大小\",{\"1\":{\"3129\":1}}],[\"合理设置采样率\",{\"1\":{\"3110\":1}}],[\"合理设置映射大小\",{\"1\":{\"2920\":1}}],[\"合理设置初始容量可以减少扩容次数\",{\"1\":{\"2587\":1}}],[\"合理设置初始容量和负载因子\",{\"1\":{\"2385\":1}}],[\"合理设置缓冲区大小\",{\"0\":{\"1342\":1},\"1\":{\"2836\":1,\"2848\":1,\"2884\":1}}],[\"合理设置堆大小\",{\"1\":{\"1154\":1}}],[\"合理设置堆内存大小\",{\"0\":{\"782\":1}}],[\"合理设置过期时间\",{\"1\":{\"212\":1}}],[\"合理设计消息格式\",{\"1\":{\"3091\":1}}],[\"合理设计数据模型\",{\"1\":{\"95\":1}}],[\"合理设计索引\",{\"1\":{\"42\":1}}],[\"合理安排管道阶段的顺序\",{\"1\":{\"64\":1}}],[\"展开数组\",{\"1\":{\"58\":1}}],[\"展示读多写少场景下的并发安全\",{\"1\":{\"2523\":1}}],[\"展示高并发环境下的安全读写操作\",{\"1\":{\"2522\":1}}],[\"展示双端队列的灵活性\",{\"1\":{\"2468\":1}}],[\"展示arrayblockingqueue在并发场景下的应用\",{\"1\":{\"2466\":1}}],[\"展示不同类型队列的创建和常用api\",{\"1\":{\"2465\":1}}],[\"展示不同map实现类的创建方式和常用api\",{\"1\":{\"2406\":1}}],[\"展示四种线程安全map的使用场景和特性\",{\"1\":{\"2410\":1}}],[\"展示按键\",{\"1\":{\"2408\":1}}],[\"展示5种常见的map遍历方法及其适用场景\",{\"1\":{\"2407\":1}}],[\"展示存储在\",{\"1\":{\"1507\":1}}],[\"展示发送窗口如何根据接收窗口动态调整\",{\"1\":{\"1312\":1}}],[\"展示\",{\"0\":{\"11\":1}}],[\"计数器自增\",{\"1\":{\"1469\":2}}],[\"计数器为0的对象可回收\",{\"1\":{\"761\":1}}],[\"计算目标副本数\",{\"1\":{\"3244\":1}}],[\"计算响应值\",{\"1\":{\"3215\":1}}],[\"计算digest响应值\",{\"1\":{\"3215\":1}}],[\"计算期望的响应值\",{\"1\":{\"3215\":1,\"3238\":1}}],[\"计算数字列表的总和\",{\"1\":{\"3039\":1}}],[\"计算数组中元素的总和\",{\"1\":{\"3025\":1}}],[\"计算结果\",{\"1\":{\"2970\":1}}],[\"计算并显示进度\",{\"1\":{\"2837\":1}}],[\"计算并显示复制进度百分比\",{\"1\":{\"2837\":1}}],[\"计算初始容量\",{\"1\":{\"2604\":1}}],[\"计算新的扩容阈值\",{\"1\":{\"2601\":1,\"2684\":1}}],[\"计算新元素的hashcode值\",{\"1\":{\"2393\":1}}],[\"计算索引并检查是否为空\",{\"1\":{\"2600\":1}}],[\"计算后的哈希值\",{\"1\":{\"2599\":1}}],[\"计算后的容量\",{\"1\":{\"2437\":1}}],[\"计算键的哈希值\",{\"1\":{\"2599\":1}}],[\"计算键的哈希值并映射到数组索引\",{\"1\":{\"1181\":1}}],[\"计算耗时\",{\"1\":{\"2524\":1}}],[\"计算需要移动的元素数量\",{\"1\":{\"2440\":2}}],[\"计算所需容量\",{\"1\":{\"2437\":1}}],[\"计算平均年龄\",{\"1\":{\"2329\":1}}],[\"计算一下该字串出现的次数\",{\"1\":{\"1871\":1}}],[\"计算当前展示数据是否浏览完毕\",{\"1\":{\"1443\":2}}],[\"计算哈希值和索引\",{\"1\":{\"1181\":1}}],[\"计算中间索引时使用left\",{\"1\":{\"1161\":1}}],[\"计算文件的哈希值并与可信哈希值比对\",{\"1\":{\"738\":1}}],[\"计算文档数量\",{\"1\":{\"60\":1}}],[\"计算日期间隔\",{\"1\":{\"545\":1}}],[\"计算两个有序集合的并集\",{\"1\":{\"204\":1}}],[\"计算两个有序集合的交集\",{\"1\":{\"204\":1}}],[\"计算两个集合的差集\",{\"1\":{\"203\":1}}],[\"计算两个集合的并集\",{\"1\":{\"203\":1}}],[\"计算两个集合的交集\",{\"1\":{\"203\":1}}],[\"计算出key应该保存的位置\",{\"1\":{\"185\":1}}],[\"计算机中的数据全部都是二进制\",{\"1\":{\"137\":1}}],[\"计算等\",{\"1\":{\"56\":1}}],[\"计划\",{\"1\":{\"21\":2}}],[\"筛选\",{\"1\":{\"56\":1}}],[\"聚合多个异常并抛出\",{\"1\":{\"2953\":1}}],[\"聚合\",{\"1\":{\"2329\":1}}],[\"聚合等操作\",{\"1\":{\"543\":1}}],[\"聚合子配置最大个数\",{\"1\":{\"232\":2,\"1684\":2}}],[\"聚合命令\",{\"0\":{\"89\":1}}],[\"聚合管道的优势包括\",{\"1\":{\"95\":1}}],[\"聚合管道的顺序很重要\",{\"1\":{\"63\":1}}],[\"聚合管道适合处理中等规模的数据和复杂的查询\",{\"1\":{\"64\":1}}],[\"聚合管道是一系列的操作\",{\"1\":{\"58\":1,\"64\":1}}],[\"聚合管道\",{\"0\":{\"58\":1},\"1\":{\"58\":1,\"89\":1}}],[\"聚合管道和mapreduce的主要区别是什么\",{\"1\":{\"64\":1}}],[\"聚合管道和mapreduce\",{\"1\":{\"56\":1}}],[\"聚合操作是mongodb中的高级查询功能\",{\"1\":{\"56\":1}}],[\"聚合操作\",{\"0\":{\"55\":1}}],[\"聚合框架\",{\"1\":{\"39\":1}}],[\"因线程不安全\",{\"1\":{\"2269\":1}}],[\"因\",{\"1\":{\"1480\":1}}],[\"因而需要一定费用\",{\"1\":{\"1414\":1}}],[\"因而until选项被忽略\",{\"1\":{\"125\":1}}],[\"因为是它是运行在单机环境下\",{\"1\":{\"3250\":1}}],[\"因为很多时候\",{\"1\":{\"3246\":1}}],[\"因为数组在运行时需要知道其元素类型\",{\"1\":{\"3035\":1}}],[\"因为需要动态解析类信息\",{\"1\":{\"2974\":1}}],[\"因为需要创建weakreference包装键\",{\"1\":{\"2689\":1}}],[\"因为接口只定义方法签名\",{\"1\":{\"2753\":1}}],[\"因为字符串拼接每次都会创建新对象\",{\"1\":{\"2723\":1}}],[\"因为字符集大小固定\",{\"1\":{\"1166\":1}}],[\"因为不再使用的键值对会被自动回收\",{\"1\":{\"2689\":1}}],[\"因为重写了hashcode和equals\",{\"1\":{\"2605\":1}}],[\"因为在元素数量较少的情况下\",{\"1\":{\"2394\":1}}],[\"因为null无法参与比较\",{\"1\":{\"2366\":1}}],[\"因为基本类型排序不需要稳定性\",{\"1\":{\"2357\":1}}],[\"因为金融计算通常需要精确到小数点后几位\",{\"1\":{\"2105\":1}}],[\"因为频繁的装箱和拆箱会创建大量的临时对象\",{\"1\":{\"2105\":1}}],[\"因为harbor本身自带docker\",{\"1\":{\"1629\":1,\"1718\":1}}],[\"因为他的事件处理机制\",{\"1\":{\"1378\":1}}],[\"因为异常捕获基于运行时类型\",{\"1\":{\"1291\":1}}],[\"因为\",{\"1\":{\"1271\":1}}],[\"因为线程中的异常无法跨线程传播\",{\"1\":{\"1254\":1}}],[\"因为较新的版本通常包含更多的\",{\"1\":{\"945\":1}}],[\"因为启动类加载器会优先加载核心类库中的string类\",{\"1\":{\"749\":1}}],[\"因为普通写不具有volatile的内存语义\",{\"1\":{\"658\":1}}],[\"因为可能导致死锁\",{\"1\":{\"651\":1}}],[\"因为cpu一直处于忙碌状态\",{\"1\":{\"529\":1}}],[\"因为这些场景下的方法调用是动态生成的\",{\"1\":{\"519\":1}}],[\"因为这会导致数据库连接被长时间占用\",{\"1\":{\"358\":1}}],[\"因为它依赖系统默认编码\",{\"1\":{\"2885\":1}}],[\"因为它避免了节点创建和回收的开销\",{\"1\":{\"2564\":1}}],[\"因为它可以帮助其他开发者理解代码的功能\",{\"1\":{\"2095\":1}}],[\"因为它可以确保依赖对象在实例化时就被注入\",{\"1\":{\"330\":1}}],[\"因为它们可能会随时变化\",{\"1\":{\"931\":1,\"988\":1}}],[\"因为它们的状态在创建后不会改变\",{\"1\":{\"596\":1}}],[\"因为它处理了jdbc的样板代码\",{\"1\":{\"373\":1}}],[\"因为它更加简洁\",{\"1\":{\"358\":1}}],[\"因为它会遍历所有键\",{\"1\":{\"211\":1}}],[\"因为它会给你生成一些其他的文件\",{\"1\":{\"136\":1}}],[\"因为过于智能\",{\"1\":{\"298\":1}}],[\"因为你所有的操作过程我都保存了\",{\"1\":{\"137\":1}}],[\"因为mongodb需要跳过大量的文档\",{\"1\":{\"54\":1}}],[\"因此只需三次\",{\"1\":{\"3070\":1}}],[\"因此需要先发送ack确认\",{\"1\":{\"3070\":1}}],[\"因此需要谨慎使用\",{\"1\":{\"2975\":1}}],[\"因此如果静态方法需要使用泛型能力\",{\"1\":{\"3024\":1}}],[\"因此getdeclaredfield只能找到当前类声明的字段\",{\"1\":{\"2984\":1}}],[\"因此严格来说仍是值传递\",{\"1\":{\"2790\":1}}],[\"因此双向链表的维护方式与普通节点相同\",{\"1\":{\"2643\":1}}],[\"因此兼具列表和双端队列的特性\",{\"1\":{\"2489\":1}}],[\"因此字符串对象创建后内容不可修改\",{\"1\":{\"2190\":1}}],[\"因此我们一般定期打开分析器来获取信息\",{\"1\":{\"1739\":1}}],[\"因此一旦服务器突然停机\",{\"1\":{\"1739\":1}}],[\"因此加密的详细内容就需要ssl\",{\"1\":{\"1414\":1}}],[\"因此可以作为双端队列使用\",{\"1\":{\"2319\":1}}],[\"因此可以借助于\",{\"1\":{\"14\":1}}],[\"因此可能会带来安全风险和性能开销\",{\"1\":{\"1263\":1}}],[\"因此无法在使用过程中废止某个\",{\"1\":{\"305\":1}}],[\"因此数据同步需要根据业务需求\",{\"1\":{\"166\":1}}],[\"因此读写速度非常快\",{\"1\":{\"127\":1}}],[\"因此不能执行该语句\",{\"1\":{\"125\":1}}],[\"因此不进行锁操作\",{\"1\":{\"54\":1}}],[\"因此\",{\"1\":{\"11\":1,\"1277\":1,\"1401\":1,\"2105\":1,\"2393\":1}}],[\"等查询方法时\",{\"1\":{\"2688\":1}}],[\"等静态工厂方法\",{\"1\":{\"2677\":1}}],[\"等价于hash\",{\"1\":{\"2599\":1}}],[\"等价于\",{\"1\":{\"2580\":1}}],[\"等价于addfirst\",{\"1\":{\"2465\":1}}],[\"等原子操作方法\",{\"1\":{\"2541\":1}}],[\"等批量操作方法\",{\"1\":{\"2434\":1}}],[\"等函数式方法\",{\"1\":{\"2320\":1}}],[\"等同于\",{\"1\":{\"2304\":1}}],[\"等于容量×负载因子\",{\"1\":{\"2593\":1}}],[\"等于\",{\"1\":{\"2110\":1}}],[\"等于索引选择器\",{\"1\":{\"1458\":1}}],[\"等启动完\",{\"1\":{\"1655\":1,\"1710\":1}}],[\"等内部通信\",{\"1\":{\"1347\":1}}],[\"等方法时\",{\"1\":{\"2688\":1}}],[\"等方法创建不可变集合\",{\"1\":{\"2358\":1}}],[\"等方法使用不当导致数据错误\",{\"1\":{\"1338\":1}}],[\"等方法\",{\"1\":{\"1198\":2,\"2434\":1,\"2491\":1}}],[\"等方法动态调整参数\",{\"1\":{\"634\":1}}],[\"等默认方法\",{\"1\":{\"1198\":1}}],[\"等显式锁\",{\"1\":{\"1125\":1}}],[\"等安全方法\",{\"1\":{\"554\":1}}],[\"等的支持\",{\"1\":{\"361\":1}}],[\"等组件\",{\"1\":{\"304\":1}}],[\"等待服务器关闭\",{\"1\":{\"3125\":1}}],[\"等待事件就绪\",{\"1\":{\"3118\":1}}],[\"等待连接中\",{\"1\":{\"3117\":1}}],[\"等待队列长度\",{\"1\":{\"3111\":1}}],[\"等待数据\",{\"1\":{\"3066\":1}}],[\"等待客户端连接\",{\"1\":{\"3065\":1}}],[\"等待完成\",{\"1\":{\"2524\":1}}],[\"等待读线程开始遍历\",{\"1\":{\"2523\":1}}],[\"等待io\",{\"1\":{\"1887\":1}}],[\"等待确认\",{\"1\":{\"1881\":1}}],[\"等待下载完成\",{\"1\":{\"1781\":1}}],[\"等待到的连接不可用\",{\"1\":{\"1326\":1}}],[\"等待可用连接\",{\"1\":{\"1326\":1}}],[\"等待2msl后关闭\",{\"1\":{\"1311\":1}}],[\"等待所有线程完成\",{\"1\":{\"2269\":1,\"2328\":1}}],[\"等待所有分组死掉\",{\"1\":{\"1881\":2}}],[\"等待所有块写入完成\",{\"1\":{\"1238\":1}}],[\"等待所有任务执行完毕后关闭\",{\"1\":{\"633\":1}}],[\"等待邮件回复\",{\"1\":{\"992\":1}}],[\"等待\",{\"1\":{\"605\":1}}],[\"等待子类实现\",{\"1\":{\"291\":3}}],[\"等待某人释放一些空间\",{\"1\":{\"125\":1}}],[\"等下次访问该数据时\",{\"1\":{\"152\":1}}],[\"等\",{\"1\":{\"54\":1,\"542\":1,\"654\":1,\"1064\":1,\"1126\":1,\"1198\":1,\"1660\":1,\"2358\":1,\"2454\":1,\"2861\":1,\"3019\":1}}],[\"它基于主从reactor模型\",{\"1\":{\"3123\":1}}],[\"它基于mvc设计模式\",{\"1\":{\"377\":1}}],[\"它带来了哪些优势和局限\",{\"1\":{\"3029\":1}}],[\"它带来了多项重要更新\",{\"1\":{\"465\":1}}],[\"它为框架设计\",{\"1\":{\"2996\":1}}],[\"它涉及类加载\",{\"1\":{\"2977\":1}}],[\"它涉及异常的合理抛出\",{\"1\":{\"2944\":1}}],[\"它描述了在最坏情况下算法执行步骤的数量级\",{\"1\":{\"2701\":1}}],[\"它根据元素的自然顺序或构造时提供的comparator进行排序\",{\"1\":{\"2567\":1}}],[\"它与priorityqueue有什么关系\",{\"1\":{\"2588\":1}}],[\"它与普通queue有何区别\",{\"1\":{\"2564\":1}}],[\"它与面向对象编程有什么关系\",{\"1\":{\"1216\":1}}],[\"它维持元素的无序性\",{\"1\":{\"2361\":1}}],[\"它利用了数据可能已部分排序的特点\",{\"1\":{\"2357\":1}}],[\"它有多种声明和初始化方式\",{\"1\":{\"2165\":1}}],[\"它有什么作用\",{\"1\":{\"989\":1}}],[\"它有什么优缺点\",{\"1\":{\"932\":1,\"967\":1,\"1030\":1,\"1155\":1}}],[\"它有什么优点\",{\"1\":{\"373\":1,\"1216\":1}}],[\"它有什么优势\",{\"1\":{\"54\":1,\"95\":1,\"2119\":1}}],[\"它按照代码的书写顺序依次执行\",{\"1\":{\"2123\":1}}],[\"它决定了程序中的语句按照什么顺序执行\",{\"1\":{\"2121\":1}}],[\"它决定了变量可以存储什么样的值\",{\"1\":{\"2097\":1}}],[\"它会被表示为一个近似值\",{\"1\":{\"2105\":1}}],[\"它会不会干扰到主进程的执行吗\",{\"1\":{\"138\":1}}],[\"它用于解释代码的功能\",{\"1\":{\"2087\":1}}],[\"它由文档\",{\"1\":{\"1968\":1}}],[\"它负责从表中移除那些键已经被回收的条目\",{\"1\":{\"2681\":1}}],[\"它负责组织\",{\"1\":{\"1955\":1}}],[\"它负责将java字节码转换为机器码并执行\",{\"1\":{\"1141\":1}}],[\"它保证了数据库服务器在意外断电\",{\"1\":{\"1739\":1}}],[\"它记录着mongodb启动和停止的操作\",{\"1\":{\"1739\":1}}],[\"它记录你所有的操作过程\",{\"1\":{\"137\":1}}],[\"它充当互联网云和web服务器之间的中间层\",{\"1\":{\"1381\":1}}],[\"它使得框架可以与任意用户自定义类协同工作\",{\"1\":{\"1273\":1}}],[\"它使用指定的charset将字符编码为字节\",{\"1\":{\"2879\":1}}],[\"它使用指定的charset读取字节并将其解码为字符\",{\"1\":{\"2878\":1}}],[\"它使用弱引用\",{\"1\":{\"2675\":1}}],[\"它使用http方法来表示对资源的操作\",{\"1\":{\"427\":1}}],[\"它使用http方法来操作资源\",{\"1\":{\"378\":1}}],[\"它使用\",{\"1\":{\"389\":1}}],[\"它使用类似json的bson格式来存储数据\",{\"1\":{\"35\":1}}],[\"它要求将对象的状态信息隐藏在对象内部\",{\"1\":{\"1271\":1}}],[\"它代表一个类的字节码文件\",{\"1\":{\"1260\":1,\"2965\":1}}],[\"它需要我们掌握面向对象编程的核心概念和设计原则\",{\"1\":{\"1216\":1}}],[\"它强调封装\",{\"1\":{\"1214\":1}}],[\"它隐藏了对象的内部实现细节\",{\"1\":{\"1203\":1}}],[\"它首先将请求委托给父类加载器\",{\"1\":{\"1155\":1}}],[\"它采用客户端\",{\"1\":{\"1091\":1,\"3172\":1}}],[\"它也会自动依赖该项目的依赖\",{\"1\":{\"1030\":1}}],[\"它说好的\",{\"1\":{\"990\":1}}],[\"它不转发请求\",{\"1\":{\"3185\":1}}],[\"它不负责传输媒体数据\",{\"1\":{\"3175\":1}}],[\"它不保证数据的可靠传输和顺序到达\",{\"1\":{\"3062\":1}}],[\"它不仅提升了代码的类型安全性和可读性\",{\"1\":{\"3043\":1}}],[\"它不仅简化了项目构建过程\",{\"1\":{\"934\":1}}],[\"它不允许插入null元素\",{\"1\":{\"2366\":1}}],[\"它不记录你的数据\",{\"1\":{\"137\":1}}],[\"它能够搜索\",{\"1\":{\"1507\":1}}],[\"它能够自动解决项目所需的依赖库\",{\"1\":{\"922\":1}}],[\"它能够根据引入的依赖自动配置spring应用\",{\"1\":{\"413\":1}}],[\"它在内存中以行优先的方式存储\",{\"1\":{\"2163\":1}}],[\"它在java中有哪些实现方式\",{\"1\":{\"1216\":1}}],[\"它在垃圾回收中起到什么作用\",{\"1\":{\"784\":1}}],[\"它在聚合操作中有什么作用\",{\"1\":{\"64\":1}}],[\"它的生成依赖于jvm的类加载机制\",{\"1\":{\"2979\":1}}],[\"它的内部结构与hashmap类似\",{\"1\":{\"2687\":1}}],[\"它的主要目的是控制数据注入到网络的速率\",{\"1\":{\"1399\":1}}],[\"它的作用是避免多线程竞争\",{\"1\":{\"720\":1}}],[\"它的作用是什么\",{\"1\":{\"720\":1}}],[\"它的优势是减少网络传输次数\",{\"1\":{\"54\":1}}],[\"它仅保证可见性和有序性\",{\"1\":{\"665\":1}}],[\"它如何保证多线程的内存可见性\",{\"1\":{\"602\":1}}],[\"它捕获的变量是词法作用域的\",{\"1\":{\"556\":1}}],[\"它封装了一个可能为null的值\",{\"1\":{\"544\":1}}],[\"它是一个用于定义和运行多容器\",{\"1\":{\"3246\":1}}],[\"它是一种自平衡的二叉查找树\",{\"1\":{\"2377\":1}}],[\"它是一种连续存储相同数据类型元素的容器\",{\"1\":{\"2140\":1}}],[\"它是软件开发中不可或缺的一部分\",{\"1\":{\"1952\":1,\"1965\":1,\"1978\":1,\"1991\":1}}],[\"它是开发者之间沟通的桥梁\",{\"1\":{\"1942\":1}}],[\"它是非安全系统与安全系统之间的缓冲区\",{\"1\":{\"1940\":1}}],[\"它是基于\",{\"1\":{\"1437\":1}}],[\"它是面向对象编程的经验总结\",{\"1\":{\"1216\":1}}],[\"它是如何打破双亲委派模型的\",{\"1\":{\"756\":1}}],[\"它是java跨平台特性的核心\",{\"1\":{\"689\":1}}],[\"它是lambda表达式的目标类型\",{\"1\":{\"538\":1}}],[\"它是自动装配的入口\",{\"1\":{\"422\":1}}],[\"它是redis中最基本\",{\"1\":{\"132\":1}}],[\"它定义了一组约束条件和原则\",{\"1\":{\"378\":1}}],[\"它可以独立于类而存在\",{\"1\":{\"3023\":1}}],[\"它可以是实例成员也可以是类成员\",{\"1\":{\"2085\":1}}],[\"它可以被修改\",{\"1\":{\"2085\":1}}],[\"它可以帮助开发者减少手动操作\",{\"1\":{\"1992\":1}}],[\"它可以帮助开发者自动创建\",{\"1\":{\"1981\":1}}],[\"它可以帮助开发者快速创建\",{\"1\":{\"1979\":1}}],[\"它可以帮助开发者快速找到所需的文档\",{\"1\":{\"1966\":1}}],[\"它可以使浏览器更加高效\",{\"1\":{\"1414\":1}}],[\"它可以标记变量是否被修改过\",{\"1\":{\"1139\":1}}],[\"它可以记录变量的版本号\",{\"1\":{\"1139\":1}}],[\"它可以简化代码\",{\"1\":{\"537\":1}}],[\"它可以在代码中添加标记\",{\"1\":{\"3132\":1}}],[\"它可以在请求到达servlet之前和响应离开servlet之后执行\",{\"1\":{\"383\":1}}],[\"它可以在请求处理之前和之后执行\",{\"1\":{\"383\":1}}],[\"它可以在连接点执行之前和之后执行\",{\"1\":{\"336\":1,\"344\":1}}],[\"它可以重用数据库连接\",{\"1\":{\"369\":1,\"373\":1}}],[\"它支持命名参数\",{\"1\":{\"363\":1}}],[\"它简化了spring应用的初始搭建和开发过程\",{\"1\":{\"398\":1}}],[\"它简化了jdbc的使用\",{\"1\":{\"363\":1}}],[\"它简化了企业级应用程序的开发\",{\"1\":{\"309\":1}}],[\"它确保了数据的一致性和完整性\",{\"1\":{\"346\":1}}],[\"它只记录了访问顺序但没有时间戳\",{\"1\":{\"2643\":1}}],[\"它只分配内存但不回收内存\",{\"1\":{\"477\":1}}],[\"它只支持运行时织入\",{\"1\":{\"344\":1}}],[\"它只是定义了一种基于\",{\"1\":{\"303\":1}}],[\"它提供了一种通过键快速查找值的机制\",{\"1\":{\"2398\":1}}],[\"它提供了一种高效且易于使用的处理数据的方式\",{\"1\":{\"543\":1}}],[\"它提供了获取数据库连接的方法\",{\"1\":{\"369\":1}}],[\"它提供了更强大的aop功能\",{\"1\":{\"344\":1}}],[\"它提供了全面的基础设施支持\",{\"1\":{\"309\":1}}],[\"它和spring\",{\"1\":{\"344\":1}}],[\"它允许在定义类\",{\"1\":{\"3013\":1}}],[\"它允许在运行时创建目标类的代理对象\",{\"1\":{\"1267\":1}}],[\"它允许将多个输入流逻辑上串联起来\",{\"1\":{\"2887\":1}}],[\"它允许将横切关注点\",{\"1\":{\"333\":1}}],[\"它允许程序在运行时适应变化\",{\"1\":{\"1273\":1}}],[\"它允许程序在运行时而非编译时获取类的完整信息\",{\"1\":{\"1259\":1}}],[\"它允许程序在运行时动态获取类的信息并操作类的属性\",{\"1\":{\"1256\":1,\"2962\":1}}],[\"它允许父类加载器请求子类加载器加载类\",{\"1\":{\"756\":1}}],[\"它允许我们直接引用已存在的方法\",{\"1\":{\"539\":1}}],[\"它允许我们将函数作为参数传递\",{\"1\":{\"537\":1}}],[\"它允许我们通过一系列的阶段来处理数据\",{\"1\":{\"95\":1}}],[\"它允许我们通过组合简单的操作来构建复杂的查询\",{\"1\":{\"62\":1}}],[\"它允许我们对数据进行复杂的处理和分析\",{\"1\":{\"56\":1}}],[\"它通过jvm的支持实现元数据的存储与访问\",{\"1\":{\"3143\":1}}],[\"它通过三次握手建立连接\",{\"1\":{\"3061\":1}}],[\"它通过预写式的redo日志为mongodb增加了额外的可靠性保障\",{\"1\":{\"1739\":1}}],[\"它通过提供清晰\",{\"1\":{\"1951\":1,\"1964\":1,\"1977\":1,\"1990\":1}}],[\"它通过提供spring\",{\"1\":{\"385\":1}}],[\"它通过提供模板类\",{\"1\":{\"371\":1}}],[\"它通过提供声明式事务管理\",{\"1\":{\"357\":1}}],[\"它通过将横切关注点\",{\"1\":{\"342\":1}}],[\"它通过将对象的创建和管理从应用程序转移到框架\",{\"1\":{\"329\":1}}],[\"它通过构造函数\",{\"1\":{\"317\":1,\"319\":1}}],[\"它通过以下方式实现\",{\"1\":{\"315\":1}}],[\"它将\",{\"1\":{\"3250\":1}}],[\"它将现实世界中的事物抽象成对象\",{\"1\":{\"1216\":1}}],[\"它将应用程序分为三个部分\",{\"1\":{\"387\":1}}],[\"它将对象的创建和管理从应用程序转移到框架\",{\"1\":{\"317\":1,\"319\":1}}],[\"它将数据分布在多个服务器上\",{\"1\":{\"70\":1}}],[\"它就会创建啊rdb文件把它存起来\",{\"1\":{\"138\":1}}],[\"它加载到内存中这个过程\",{\"1\":{\"136\":1}}],[\"它比较类似于\",{\"1\":{\"130\":1}}],[\"它们如何协同工作保证消息可靠传输\",{\"0\":{\"3227\":1}}],[\"它们各自的使用场景是什么\",{\"1\":{\"3029\":1}}],[\"它们提供了一系列重载的print\",{\"1\":{\"2899\":1}}],[\"它们充当字节流与字符流之间的桥梁\",{\"1\":{\"2875\":1}}],[\"它们是所有io操作的基础\",{\"1\":{\"2828\":1}}],[\"它们通过精细的同步机制或无锁算法\",{\"1\":{\"2516\":1}}],[\"它们可以用于操作变量和值\",{\"1\":{\"2107\":1}}],[\"它们可以引用复杂的对象\",{\"1\":{\"2105\":1}}],[\"它们使用二进制表示十进制小数\",{\"1\":{\"2105\":1}}],[\"它们的getclass\",{\"1\":{\"2975\":1}}],[\"它们的缺点是可能会带来性能问题\",{\"1\":{\"2105\":1}}],[\"它们的优点是简化了代码\",{\"1\":{\"2105\":1}}],[\"它们的区别是什么\",{\"0\":{\"1122\":1}}],[\"它们存储的是对象的地址而不是对象本身\",{\"1\":{\"2100\":1}}],[\"它们直接存储值而不是引用\",{\"1\":{\"2099\":1}}],[\"它们不能被用作标识符\",{\"1\":{\"2074\":1}}],[\"它们不仅帮助减少团队沟通成本\",{\"1\":{\"1993\":1}}],[\"它们都应该依赖抽象\",{\"1\":{\"1212\":1}}],[\"它们有什么优缺点\",{\"1\":{\"2105\":1}}],[\"它们有什么区别\",{\"1\":{\"1155\":1}}],[\"它们有什么作用\",{\"1\":{\"75\":1}}],[\"它们能互相替代吗\",{\"0\":{\"521\":1}}],[\"它们将被消息值取代\",{\"1\":{\"125\":1}}],[\"它们必须连续\",{\"1\":{\"125\":1}}],[\"它们维护相同的数据集\",{\"1\":{\"69\":1}}],[\"它包含了原仓库中的所有构件\",{\"1\":{\"989\":1}}],[\"它包含了本地仓库\",{\"1\":{\"969\":1}}],[\"它包含了项目的所有信息\",{\"1\":{\"936\":1}}],[\"它包含了某个功能所需的所有依赖\",{\"1\":{\"398\":1}}],[\"它包含了通知和切点\",{\"1\":{\"335\":1}}],[\"它包含了查询所需的所有字段\",{\"1\":{\"64\":1}}],[\"它包含的数据大于输入列中的数据\",{\"1\":{\"125\":1}}],[\"它包括两个主要阶段\",{\"1\":{\"59\":1}}],[\"它假设冲突很少发生\",{\"1\":{\"54\":1}}],[\"要想删除则需要对service进行操作\",{\"1\":{\"3250\":1}}],[\"要想使用\",{\"1\":{\"1448\":1}}],[\"要想使其工作\",{\"1\":{\"125\":1}}],[\"要查找的键\",{\"1\":{\"2682\":1}}],[\"要查找耗内存进程解决掉\",{\"1\":{\"1887\":1}}],[\"要比较的元素\",{\"1\":{\"2658\":2}}],[\"要检查的元素\",{\"1\":{\"2602\":1,\"2631\":1}}],[\"要检查的索引\",{\"1\":{\"2439\":2,\"2494\":1,\"2495\":1}}],[\"要移除的元素\",{\"1\":{\"2602\":1,\"2631\":1}}],[\"要移除的键\",{\"1\":{\"283\":1}}],[\"要入栈的元素\",{\"1\":{\"2551\":1}}],[\"要设置的元素\",{\"1\":{\"2498\":1}}],[\"要设置的新元素\",{\"1\":{\"2439\":1,\"2495\":1}}],[\"要解除链接的节点\",{\"1\":{\"2496\":1}}],[\"要解封一个ip\",{\"1\":{\"1876\":1}}],[\"要获取的节点索引\",{\"1\":{\"2495\":1}}],[\"要获取的元素索引\",{\"1\":{\"2439\":1,\"2495\":1}}],[\"要判断的索引\",{\"1\":{\"2494\":1,\"2495\":1}}],[\"要链接的元素\",{\"1\":{\"2494\":2,\"2497\":1}}],[\"要么是黑色\",{\"1\":{\"2650\":1}}],[\"要么返回特殊值\",{\"1\":{\"2459\":1}}],[\"要么全部不执行\",{\"1\":{\"1126\":1}}],[\"要么全部执行完成\",{\"1\":{\"1126\":1}}],[\"要么全部执行失败\",{\"1\":{\"348\":1}}],[\"要么全部执行成功\",{\"1\":{\"348\":1}}],[\"要删除的元素\",{\"1\":{\"2440\":1,\"2496\":1}}],[\"要删除的元素索引\",{\"1\":{\"2440\":2,\"2496\":1}}],[\"要修改的元素索引\",{\"1\":{\"2439\":1,\"2495\":1}}],[\"要插入的元素\",{\"1\":{\"2437\":1,\"2494\":1,\"2573\":1}}],[\"要插入元素的位置\",{\"1\":{\"2437\":1,\"2494\":1}}],[\"要添加的元素\",{\"1\":{\"2437\":1,\"2494\":1,\"2497\":2,\"2498\":1,\"2552\":1,\"2602\":1,\"2631\":1,\"2658\":1}}],[\"要测试的列表\",{\"1\":{\"2327\":2}}],[\"要及时更新文档自动化机制\",{\"1\":{\"1991\":1}}],[\"要及时更新文档生态机制\",{\"1\":{\"1978\":1}}],[\"要及时更新文档管理机制\",{\"1\":{\"1965\":1}}],[\"要及时更新文档\",{\"1\":{\"1952\":1}}],[\"要考虑调低线程或者进程的数目\",{\"1\":{\"1887\":1}}],[\"要封停一个ip\",{\"1\":{\"1876\":1}}],[\"要加multi\",{\"0\":{\"1814\":1}}],[\"要安装并使用\",{\"1\":{\"1793\":1}}],[\"要安装或更新\",{\"1\":{\"264\":1}}],[\"要注意填写12800端口\",{\"1\":{\"1538\":1}}],[\"要保存在哪个文件夹路径下\",{\"1\":{\"1503\":1}}],[\"要同步的文件在a服务器\",{\"1\":{\"1501\":1}}],[\"要执行的功能\",{\"1\":{\"1452\":4}}],[\"要确保你的nginx安装了ssl模块\",{\"1\":{\"1416\":1}}],[\"要归还的连接\",{\"1\":{\"1326\":1}}],[\"要允许反射访问java\",{\"1\":{\"1281\":1}}],[\"要调用私有方法\",{\"1\":{\"1270\":1}}],[\"要通过反射获取和设置私有字段的值\",{\"1\":{\"1269\":1}}],[\"要使用apt\",{\"1\":{\"3147\":1}}],[\"要使用\",{\"1\":{\"305\":1}}],[\"要使用此布局\",{\"1\":{\"2\":1}}],[\"要进行分页的数据列表\",{\"1\":{\"284\":1}}],[\"要带上版本号\",{\"1\":{\"233\":1}}],[\"要对redis的相关指标进行监控\",{\"1\":{\"193\":1}}],[\"要求网络资源越高\",{\"1\":{\"178\":1}}],[\"要实现这些功能\",{\"1\":{\"176\":1}}],[\"要牺牲掉一些性能\",{\"1\":{\"138\":1}}],[\"要谨慎使用\",{\"1\":{\"74\":1}}],[\"要合理设计索引\",{\"1\":{\"74\":1}}],[\"要小心谨慎\",{\"1\":{\"53\":1}}],[\"使开发者可以用相同的方式编写跨平台的网络应用\",{\"1\":{\"3068\":1}}],[\"使异常处理更加结构化\",{\"1\":{\"2931\":1}}],[\"使它们可以独立变化\",{\"1\":{\"2883\":1}}],[\"使不兼容的接口可以一起工作\",{\"1\":{\"2883\":1}}],[\"使其在io操作中广泛应用\",{\"1\":{\"2901\":1}}],[\"使其变为最近使用\",{\"1\":{\"2632\":1}}],[\"使其对外呈现单机的服务效果\",{\"1\":{\"184\":1}}],[\"使哈希值分布均匀\",{\"1\":{\"2422\":1}}],[\"使配置生效\",{\"1\":{\"1417\":1}}],[\"使网络传输减少\",{\"1\":{\"1414\":1}}],[\"使每个url定向到同一个后端服务器\",{\"1\":{\"1408\":1}}],[\"使来自同一个ip的访客固定访问一台后端服务器\",{\"1\":{\"1406\":1}}],[\"使团队协作更加容易\",{\"1\":{\"945\":1}}],[\"使线程进入就绪状态\",{\"1\":{\"615\":1}}],[\"使代码更加简洁优雅\",{\"1\":{\"544\":1}}],[\"使代码更加健壮\",{\"1\":{\"544\":1}}],[\"使代码更易读\",{\"1\":{\"495\":1}}],[\"使集合转换为数组更加方便\",{\"1\":{\"473\":1}}],[\"使所有slave认为还是之前的master\",{\"1\":{\"171\":1}}],[\"使master能够识别slave\",{\"1\":{\"165\":1}}],[\"使得用户对单个对象和组合对象的使用具有一致性\",{\"1\":{\"2895\":1}}],[\"使得基本操作\",{\"1\":{\"2650\":1}}],[\"使得代码难以理解和维护\",{\"1\":{\"2138\":1}}],[\"使得代码更具有可读性和可维护性\",{\"1\":{\"2095\":1}}],[\"使得代码更加易于维护\",{\"1\":{\"1216\":1}}],[\"使得代码更加清晰\",{\"1\":{\"333\":1,\"342\":1}}],[\"使得代码可以操作多种数据类型而无需重复编写\",{\"1\":{\"1286\":1}}],[\"使得接口可以在不影响实现类的情况下进行扩展\",{\"1\":{\"549\":1}}],[\"使得java集合框架能够在不破坏现有代码的情况下添加新方法\",{\"1\":{\"542\":1}}],[\"使得现有代码可以轻松迁移\",{\"1\":{\"531\":1}}],[\"使得该注解可以动态加载自己特有的bean\",{\"1\":{\"461\":1}}],[\"使得开发者可以更方便地在基本数据类型和包装类之间进行转换\",{\"1\":{\"2105\":1}}],[\"使得开发者可以专注于sql查询和结果处理\",{\"1\":{\"373\":1}}],[\"使得开发者可以专注于业务逻辑\",{\"1\":{\"357\":1,\"361\":1,\"371\":1,\"375\":1,\"385\":1}}],[\"使得开发者不需要手动捕获和处理sql异常\",{\"1\":{\"373\":1}}],[\"使得应用程序更加关注业务逻辑\",{\"1\":{\"329\":1}}],[\"使得服务端认证鉴权业务可以方便扩展\",{\"1\":{\"304\":1}}],[\"使得其可以防止\",{\"1\":{\"304\":1}}],[\"使得我们可以在多个文档上执行原子操作\",{\"1\":{\"71\":1}}],[\"使得它可以适应各种复杂的业务场景\",{\"1\":{\"66\":1,\"73\":1}}],[\"使得mongodb不需要读取文档就可以返回查询结果\",{\"1\":{\"64\":1}}],[\"使得操作更加灵活\",{\"1\":{\"52\":1}}],[\"使用docker\",{\"0\":{\"3250\":1},\"1\":{\"3250\":1}}],[\"使用disruptor实现无锁并发处理\",{\"1\":{\"3240\":1}}],[\"使用deque接口声明队列\",{\"1\":{\"2506\":1}}],[\"使用deque接口声明栈\",{\"1\":{\"2506\":1}}],[\"使用deletemany\",{\"1\":{\"50\":1}}],[\"使用deleteone\",{\"1\":{\"50\":1}}],[\"使用分布式缓存实现会话状态共享\",{\"1\":{\"3235\":1}}],[\"使用分布式缓存\",{\"1\":{\"3228\":1}}],[\"使用分段锁\",{\"1\":{\"2541\":1}}],[\"使用高性能sip协议栈\",{\"1\":{\"3228\":1}}],[\"使用注解标记实体类与数据库表的映射关系\",{\"1\":{\"3141\":1}}],[\"使用注解\",{\"1\":{\"3134\":1,\"3137\":1}}],[\"使用注解和properties\",{\"1\":{\"391\":1}}],[\"使用二进制协议\",{\"1\":{\"3091\":1}}],[\"使用直接内存\",{\"1\":{\"3091\":1}}],[\"使用反射和动态代理实现事务管理\",{\"1\":{\"3005\":1}}],[\"使用反射时需要特别注意以下问题\",{\"1\":{\"2993\":1}}],[\"使用反射时需要注意以下问题\",{\"1\":{\"2974\":1}}],[\"使用私有构造创建对象\",{\"1\":{\"2969\":1}}],[\"使用有参构造创建对象\",{\"1\":{\"2969\":1}}],[\"使用无状态设计便于水平扩展\",{\"1\":{\"3228\":1}}],[\"使用无参构造创建对象\",{\"1\":{\"2969\":1}}],[\"使用无锁队列传递任务\",{\"1\":{\"1347\":1}}],[\"使用状态码代替异常传递错误信息\",{\"1\":{\"2942\":1}}],[\"使用平台默认编码\",{\"1\":{\"2909\":1}}],[\"使用序列流组合所有输入流\",{\"1\":{\"2893\":1}}],[\"使用第二个构造方法通过enumeration组合多个输入流\",{\"1\":{\"2892\":1}}],[\"使用第一个构造方法组合两个输入流并读取数据\",{\"1\":{\"2891\":1}}],[\"使用utf\",{\"1\":{\"2878\":1,\"2879\":1}}],[\"使用upper\",{\"1\":{\"1999\":1}}],[\"使用updatemany\",{\"1\":{\"49\":1}}],[\"使用updateone\",{\"1\":{\"49\":1}}],[\"使用适中的缓冲区大小\",{\"1\":{\"2873\":1}}],[\"使用2的幂次方值\",{\"1\":{\"2872\":1}}],[\"使用绝对路径可避免相对路径带来的问题\",{\"1\":{\"2836\":1}}],[\"使用组合而非继承\",{\"1\":{\"2745\":1}}],[\"使用多网卡和负载均衡分散流量\",{\"1\":{\"3228\":1}}],[\"使用多态\",{\"1\":{\"2742\":1}}],[\"使用多线程并发上传\",{\"1\":{\"1238\":1}}],[\"使用工具识别瓶颈位置\",{\"1\":{\"2728\":1}}],[\"使用工具类或短路判断\",{\"1\":{\"2205\":1}}],[\"使用工具类处理可能为null的情况\",{\"1\":{\"2058\":1}}],[\"使用双指针技术实现o\",{\"1\":{\"2727\":1}}],[\"使用双指针从两端向中间遍历\",{\"1\":{\"1165\":1}}],[\"使用两个指针遍历数据\",{\"1\":{\"2727\":1}}],[\"使用两个线程共享一个计数器\",{\"1\":{\"618\":1}}],[\"使用迭代或增加尾递归优化\",{\"1\":{\"2724\":1}}],[\"使用迭代器遍历\",{\"1\":{\"2505\":1}}],[\"使用迭代器遍历集合\",{\"1\":{\"1185\":1}}],[\"使用迭代器的remove\",{\"1\":{\"2340\":1,\"2382\":1,\"2448\":1,\"2507\":1}}],[\"使用迭代器的remove方法\",{\"1\":{\"1190\":1}}],[\"使用迭代器\",{\"1\":{\"1190\":1,\"2420\":1}}],[\"使用key访问map\",{\"1\":{\"2694\":1}}],[\"使用弱引用包装值\",{\"1\":{\"2693\":1}}],[\"使用weakhashmap实现简单缓存\",{\"1\":{\"2685\":1}}],[\"使用不可比较的对象作为键\",{\"1\":{\"2668\":1}}],[\"使用不可变对象减少同步需求\",{\"1\":{\"2041\":1}}],[\"使用自然排序时\",{\"1\":{\"2668\":1}}],[\"使用自然排序\",{\"1\":{\"2655\":1}}],[\"使用自定义比较器创建treemap\",{\"1\":{\"2660\":1}}],[\"使用自定义比较器的treemap示例\",{\"1\":{\"2660\":1}}],[\"使用自定义比较器查找插入位置\",{\"1\":{\"2655\":1}}],[\"使用自定义函数式接口\",{\"1\":{\"538\":1}}],[\"使用哈希表记录元素在堆中的索引\",{\"1\":{\"2588\":1}}],[\"使用比较器向上调整\",{\"1\":{\"2575\":1}}],[\"使用queue实现生产者\",{\"0\":{\"2555\":1}}],[\"使用循环数组实现\",{\"1\":{\"2548\":1}}],[\"使用原子方法\",{\"1\":{\"2534\":1}}],[\"使用原子类\",{\"1\":{\"1125\":1,\"2039\":1}}],[\"使用原子类或数组\",{\"1\":{\"552\":1}}],[\"使用显式锁\",{\"1\":{\"2513\":1}}],[\"使用显式锁对象\",{\"1\":{\"2456\":1}}],[\"使用hashmap提供o\",{\"1\":{\"2512\":1}}],[\"使用hashtable\",{\"1\":{\"2429\":1}}],[\"使用带参数的toarray\",{\"1\":{\"2509\":1}}],[\"使用增强for循环\",{\"1\":{\"2505\":1}}],[\"使用增强for循环遍历\",{\"1\":{\"2341\":1}}],[\"使用特殊值代替null\",{\"1\":{\"2481\":1}}],[\"使用阻塞队列\",{\"1\":{\"2478\":1}}],[\"使用阻塞队列实现生产者\",{\"1\":{\"2466\":1}}],[\"使用线程安全的数据结构存储对话\",{\"1\":{\"3223\":1}}],[\"使用线程安全的实现类\",{\"1\":{\"2478\":1}}],[\"使用线程上下文类加载器\",{\"1\":{\"754\":1}}],[\"使用可变对象作为键\",{\"1\":{\"2612\":1,\"2669\":1}}],[\"使用可重入锁实现同步\",{\"1\":{\"2456\":1,\"2513\":1}}],[\"使用可靠的\",{\"1\":{\"1030\":1}}],[\"使用可靠的依赖\",{\"0\":{\"1026\":1}}],[\"使用专门的基本类型集合库\",{\"1\":{\"2452\":1}}],[\"使用前检查索引\",{\"1\":{\"2450\":1}}],[\"使用前需要检查\",{\"1\":{\"2104\":1}}],[\"使用静态空数组实例\",{\"1\":{\"2445\":1}}],[\"使用默认构造函数\",{\"1\":{\"3007\":2}}],[\"使用默认值\",{\"1\":{\"2601\":1}}],[\"使用默认空数组\",{\"1\":{\"2436\":1}}],[\"使用默认端口\",{\"0\":{\"1541\":1,\"1545\":1}}],[\"使用读写锁\",{\"1\":{\"2429\":1}}],[\"使用链表和红黑树解决冲突\",{\"1\":{\"2413\":1}}],[\"使用链表存储相同哈希值的元素\",{\"1\":{\"2376\":1}}],[\"使用并发工具类加锁\",{\"1\":{\"2670\":1}}],[\"使用并发集合\",{\"1\":{\"2382\":1}}],[\"使用并发容器\",{\"1\":{\"1125\":1}}],[\"使用归并排序将多个run合并成最终有序数组\",{\"1\":{\"2357\":1}}],[\"使用归并排序\",{\"1\":{\"2357\":1}}],[\"使用什么排序算法\",{\"1\":{\"2357\":1}}],[\"使用细粒度的同步代码块\",{\"1\":{\"2356\":1}}],[\"使用合适的数据结构\",{\"1\":{\"2355\":1}}],[\"使用合适的索引\",{\"1\":{\"64\":1}}],[\"使用volatile变量保证节点引用的可见性\",{\"1\":{\"2543\":1}}],[\"使用volatile变量保证可见性\",{\"1\":{\"2473\":1}}],[\"使用volatile变量存储头节点和尾节点\",{\"1\":{\"2485\":1}}],[\"使用vector\",{\"1\":{\"2351\":1,\"2454\":1}}],[\"使用var关键字减少样板代码\",{\"1\":{\"495\":1}}],[\"使用var的好处\",{\"1\":{\"468\":1}}],[\"使用匿名内部类\",{\"1\":{\"2323\":1}}],[\"使用建议\",{\"1\":{\"2311\":1,\"2861\":1,\"2885\":1}}],[\"使用常量池中的对象\",{\"1\":{\"2303\":1}}],[\"使用简单\",{\"1\":{\"2227\":1}}],[\"使用extends关键字指定类型参数必须是某个类的子类或实现某个接口\",{\"1\":{\"3025\":1}}],[\"使用executorservice\",{\"1\":{\"527\":1}}],[\"使用ensurecapacity\",{\"1\":{\"2344\":1,\"2355\":1,\"2449\":1}}],[\"使用equals\",{\"1\":{\"2204\":1,\"2255\":1}}],[\"使用==比较字符串内容\",{\"1\":{\"2204\":1}}],[\"使用+号拼接\",{\"1\":{\"2197\":1}}],[\"使用当前行的长度\",{\"1\":{\"2181\":1}}],[\"使用稀疏矩阵存储节省空间\",{\"1\":{\"2178\":1}}],[\"使用安全的模板引擎\",{\"1\":{\"2067\":1}}],[\"使用正则表达式或验证框架\",{\"1\":{\"2065\":1}}],[\"使用实现类声明\",{\"1\":{\"2057\":1}}],[\"使用接口而非实现类声明集合变量\",{\"1\":{\"2057\":1}}],[\"使用空集合替代\",{\"1\":{\"2054\":1}}],[\"使用空过滤器\",{\"1\":{\"50\":1}}],[\"使用内存数据库\",{\"1\":{\"2048\":1,\"2055\":1,\"2063\":1}}],[\"使用本地缓存减少远程调用\",{\"1\":{\"2041\":1}}],[\"使用4个空格进行缩进\",{\"1\":{\"2032\":1}}],[\"使用4个线程\",{\"1\":{\"959\":1}}],[\"使用者\",{\"1\":{\"1971\":1}}],[\"使用者必须清楚所有的策略类及其用途\",{\"1\":{\"292\":1}}],[\"使用和维护项目文档的重要机制\",{\"1\":{\"1992\":1}}],[\"使用和维护文档\",{\"1\":{\"1970\":1,\"1979\":2,\"1981\":1,\"1983\":1,\"1992\":1}}],[\"使用和维护\",{\"1\":{\"1968\":1,\"1970\":1,\"1979\":1,\"1983\":1,\"1992\":1}}],[\"使用条件\",{\"1\":{\"1945\":1}}],[\"使用示例\",{\"1\":{\"1945\":1,\"2328\":1,\"2577\":1,\"2605\":1,\"2999\":1,\"3000\":1,\"3002\":1,\"3003\":1,\"3005\":1,\"3007\":1,\"3019\":1,\"3020\":1,\"3046\":1,\"3050\":1,\"3052\":1,\"3154\":1,\"3162\":1,\"3170\":1}}],[\"使用下面这条命令\",{\"1\":{\"1876\":1}}],[\"使用yum卸载安装的mysql\",{\"1\":{\"1778\":1}}],[\"使用yield返回值\",{\"1\":{\"1059\":1}}],[\"使用配置文件形式构建流水线\",{\"0\":{\"1711\":1}}],[\"使用指定的字符编码\",{\"1\":{\"2877\":1}}],[\"使用指定编码写入的文本\",{\"1\":{\"2903\":1}}],[\"使用指定编码写入文件\",{\"1\":{\"2855\":1}}],[\"使用指定编码读取文件\",{\"1\":{\"2855\":1}}],[\"使用指定初始容量和比较器创建优先级队列\",{\"1\":{\"2571\":1}}],[\"使用指定库\",{\"1\":{\"1640\":1}}],[\"使用指南\",{\"1\":{\"29\":2},\"2\":{\"4\":1,\"6\":1,\"25\":1,\"32\":1,\"33\":1}}],[\"使用外部机器连接redis\",{\"1\":{\"1601\":1}}],[\"使用外部机器访问nginx\",{\"1\":{\"1596\":1}}],[\"使用外部机器访问tomcat\",{\"1\":{\"1591\":1}}],[\"使用promql或kql进行多维度聚合分析\",{\"1\":{\"3111\":1}}],[\"使用printstream\",{\"1\":{\"2909\":1}}],[\"使用printf\",{\"1\":{\"2904\":1}}],[\"使用println\",{\"1\":{\"2904\":1}}],[\"使用poll\",{\"1\":{\"2585\":1}}],[\"使用peek\",{\"1\":{\"2476\":1}}],[\"使用pascalcase命名法\",{\"1\":{\"1996\":1}}],[\"使用parnew\",{\"1\":{\"795\":2,\"829\":2,\"863\":2,\"897\":2}}],[\"使用parallel\",{\"1\":{\"774\":1,\"795\":1,\"829\":1,\"863\":1,\"897\":1}}],[\"使用pl\",{\"1\":{\"1571\":1}}],[\"使用它可以很方便的用图表\",{\"1\":{\"1507\":1}}],[\"使用方式与字节流类似\",{\"1\":{\"2833\":1}}],[\"使用方式与普通arraylist相同\",{\"1\":{\"2456\":1}}],[\"使用方式\",{\"1\":{\"2513\":3}}],[\"使用方法\",{\"1\":{\"2259\":1}}],[\"使用方法及实际应用价值\",{\"1\":{\"497\":1}}],[\"使用方便\",{\"1\":{\"1501\":1}}],[\"使用命令mkdir\",{\"1\":{\"1500\":1}}],[\"使用命令mkfs\",{\"1\":{\"1500\":1}}],[\"使用过程中\",{\"1\":{\"1471\":1}}],[\"使用过滤器来限制返回的文档数量\",{\"1\":{\"53\":1}}],[\"使用浏览器测试\",{\"1\":{\"1447\":1}}],[\"使用已完善的ajax3项目\",{\"1\":{\"1444\":1}}],[\"使用已废弃的api\",{\"1\":{\"566\":1}}],[\"使用端口来区分\",{\"1\":{\"1390\":1}}],[\"使用50x\",{\"1\":{\"1385\":1}}],[\"使用new创建的字符串对象\",{\"1\":{\"2691\":1}}],[\"使用null作为hashmap的键或值\",{\"1\":{\"2419\":1}}],[\"使用nginx转发请求\",{\"1\":{\"1387\":1}}],[\"使用nginx的话还能\",{\"1\":{\"1377\":1}}],[\"使用nio提高i\",{\"1\":{\"3225\":1}}],[\"使用nio通道\",{\"1\":{\"3125\":1}}],[\"使用nio而非bio\",{\"0\":{\"1341\":1}}],[\"使用nio的零拷贝示例\",{\"1\":{\"1321\":1}}],[\"使用nio的非阻塞模式\",{\"1\":{\"1238\":1,\"1339\":1}}],[\"使用nio\",{\"1\":{\"1238\":1,\"3091\":1}}],[\"使用负载均衡分散流量\",{\"1\":{\"1347\":1}}],[\"使用对象池复用缓冲区和临时对象\",{\"1\":{\"1347\":1}}],[\"使用对象池和直接内存\",{\"1\":{\"1113\":1}}],[\"使用连接池\",{\"0\":{\"1343\":1}}],[\"使用连续的内存空间存储相同类型的数据\",{\"1\":{\"1168\":1}}],[\"使用feign等客户端时\",{\"1\":{\"2960\":1}}],[\"使用fast\",{\"1\":{\"2428\":1}}],[\"使用future获取线程执行结果和异常\",{\"1\":{\"1254\":1}}],[\"使用filewriter写入中文时出现乱码如何解决\",{\"1\":{\"2837\":1}}],[\"使用filechannel\",{\"1\":{\"1238\":1,\"3130\":1}}],[\"使用final修饰集合\",{\"1\":{\"2395\":1}}],[\"使用final修饰确保不可变性\",{\"1\":{\"2288\":1}}],[\"使用final修饰\",{\"1\":{\"2287\":1}}],[\"使用findone\",{\"1\":{\"48\":1}}],[\"使用find\",{\"1\":{\"48\":1}}],[\"使用系统默认编码\",{\"1\":{\"1236\":1,\"2885\":1}}],[\"使用零拷贝技术\",{\"0\":{\"1345\":1}}],[\"使用零拷贝技术传输数据\",{\"1\":{\"1232\":1}}],[\"使用零拷贝技术复制文件\",{\"1\":{\"1232\":1}}],[\"使用零拷贝技术和内存池减少gc压力\",{\"1\":{\"1111\":1}}],[\"使用缓冲区提高效率\",{\"1\":{\"2836\":1}}],[\"使用缓冲流复制\",{\"1\":{\"2868\":1}}],[\"使用缓冲流复制文件\",{\"1\":{\"1224\":1}}],[\"使用缓冲流可以显著提升io性能\",{\"1\":{\"2868\":1}}],[\"使用缓冲流耗时\",{\"1\":{\"1224\":1,\"2868\":1}}],[\"使用缓存避免重复反射解析注解\",{\"1\":{\"1081\":1}}],[\"使用字节码生成技术\",{\"1\":{\"3010\":1}}],[\"使用字节流读取文件\",{\"1\":{\"1221\":1}}],[\"使用字节流读取\",{\"1\":{\"1221\":2}}],[\"使用字符流读取文件\",{\"1\":{\"1221\":1}}],[\"使用字符流读取\",{\"1\":{\"1221\":2}}],[\"使用字符数组反转\",{\"1\":{\"1164\":1}}],[\"使用装饰器模式包装为线程安全集合\",{\"1\":{\"1186\":1}}],[\"使用数组长度控制循环\",{\"1\":{\"2158\":1}}],[\"使用数组统计每个字符出现的次数\",{\"1\":{\"1170\":1}}],[\"使用数组作为哈希表\",{\"1\":{\"1166\":1}}],[\"使用递归反转\",{\"1\":{\"1164\":1}}],[\"使用四个边界变量控制遍历范围\",{\"1\":{\"1162\":1}}],[\"使用成熟的sip库\",{\"1\":{\"1107\":1}}],[\"使用时在目标元素前添加\",{\"1\":{\"3134\":1}}],[\"使用时必须指定所有无默认值的属性\",{\"1\":{\"1079\":1}}],[\"使用时应该再次对用户进行认证\",{\"1\":{\"305\":1}}],[\"使用校验注解\",{\"1\":{\"1069\":1}}],[\"使用日志注解\",{\"1\":{\"1068\":1}}],[\"使用重复注解\",{\"1\":{\"1066\":1}}],[\"使用branch参数识别重传消息\",{\"1\":{\"3222\":1}}],[\"使用break语句在适当的时候跳出循环\",{\"1\":{\"2138\":1}}],[\"使用bufferedwriter\",{\"1\":{\"2860\":1}}],[\"使用bytearrayinputstream读取内存中的数据\",{\"1\":{\"2844\":1}}],[\"使用bytearrayoutputstream写入数据到内存\",{\"1\":{\"2844\":1}}],[\"使用bigdecimal\",{\"1\":{\"1055\":1}}],[\"使用bson格式存储\",{\"1\":{\"37\":1}}],[\"使用ide工具\",{\"0\":{\"1021\":1}}],[\"使用interface定义清晰的功能边界\",{\"1\":{\"2812\":1}}],[\"使用intern\",{\"1\":{\"2311\":2}}],[\"使用instanceof关键字进行类型检查\",{\"1\":{\"2749\":1}}],[\"使用instanceof检查\",{\"1\":{\"1055\":1}}],[\"使用insertmany\",{\"1\":{\"47\":1}}],[\"使用insertone\",{\"1\":{\"47\":1}}],[\"使用info命令输出监控信息\",{\"1\":{\"157\":1}}],[\"使用依赖管理统一管理依赖版本\",{\"1\":{\"988\":1}}],[\"使用依赖管理统一管理版本\",{\"1\":{\"966\":1}}],[\"使用构建缓存插件\",{\"1\":{\"967\":1}}],[\"使用稳定的插件版本\",{\"1\":{\"966\":1}}],[\"使用<exclusions>标签排除冲突的依赖\",{\"1\":{\"1029\":1,\"1030\":1}}],[\"使用<exclusions>标签排除不需要的依赖\",{\"1\":{\"945\":1}}],[\"使用<dependencymanagement>标签统一管理依赖的版本\",{\"1\":{\"1023\":1}}],[\"使用<dependencymanagement>标签统一管理依赖版本\",{\"1\":{\"931\":1,\"945\":1,\"1029\":1,\"1030\":1}}],[\"使用<dependencymanagement>标签在父pom文件中统一管理依赖版本\",{\"1\":{\"932\":1}}],[\"使用属性\",{\"1\":{\"932\":1}}],[\"使用gbk编码写入另一个文件\",{\"1\":{\"2879\":1}}],[\"使用gbk编码读取同一文件\",{\"1\":{\"2878\":1}}],[\"使用get\",{\"1\":{\"2505\":1}}],[\"使用g1收集器\",{\"1\":{\"795\":1,\"829\":1,\"863\":1,\"897\":1}}],[\"使用groovy\",{\"1\":{\"585\":1}}],[\"使用元空间\",{\"1\":{\"793\":1,\"827\":1,\"861\":1,\"895\":1}}],[\"使用opens语句允许反射访问未导出包\",{\"1\":{\"2994\":1}}],[\"使用optional或空对象模式\",{\"1\":{\"2419\":1}}],[\"使用optional避免npe\",{\"1\":{\"2054\":1}}],[\"使用optional类包装可能为null的返回值\",{\"1\":{\"2054\":1}}],[\"使用optional类可以避免显式的null检查\",{\"1\":{\"544\":1}}],[\"使用optional类设计更安全的api\",{\"1\":{\"521\":1}}],[\"使用optional\",{\"1\":{\"495\":1}}],[\"使用objectinputstream和objectoutputstream进行序列化\",{\"1\":{\"3085\":1}}],[\"使用objects\",{\"1\":{\"2054\":1}}],[\"使用objectoutputstream和objectinputstream进行序列化\",{\"1\":{\"1225\":1}}],[\"使用oauth\",{\"1\":{\"2012\":1}}],[\"使用osgi等模块化框架\",{\"1\":{\"755\":1}}],[\"使用完类加载器后及时清除引用\",{\"1\":{\"753\":1}}],[\"使用完threadlocal后调用remove\",{\"1\":{\"618\":1}}],[\"使用标准编译器\",{\"1\":{\"737\":1}}],[\"使用micrometer监控网络连接数\",{\"1\":{\"3097\":1}}],[\"使用methodhandle替代反射\",{\"1\":{\"3010\":1}}],[\"使用methodhandle提高反射性能\",{\"1\":{\"2974\":1}}],[\"使用methodhandle\",{\"1\":{\"2974\":1,\"2993\":1}}],[\"使用mappedbytebuffer进行内存映射\",{\"1\":{\"1238\":1}}],[\"使用mat分析堆转储中的socket对象\",{\"1\":{\"3100\":1}}],[\"使用mat\",{\"1\":{\"784\":1}}],[\"使用mat工具\",{\"1\":{\"700\":1}}],[\"使用mvn\",{\"1\":{\"567\":1,\"931\":1,\"944\":1,\"945\":1}}],[\"使用aspectj等工具在编译期或类加载期对敏感方法添加保护逻辑\",{\"1\":{\"3011\":1}}],[\"使用available\",{\"1\":{\"2848\":1}}],[\"使用arraydeque实现栈和队列\",{\"1\":{\"2468\":1}}],[\"使用arrays\",{\"1\":{\"2147\":1,\"2170\":1,\"2230\":1,\"2231\":2,\"2355\":1}}],[\"使用addall\",{\"1\":{\"2355\":1}}],[\"使用atomicstampedreference添加版本号\",{\"1\":{\"683\":1}}],[\"使用atomicreference存储不可变对象的引用\",{\"1\":{\"681\":1}}],[\"使用aborttransaction\",{\"1\":{\"71\":1}}],[\"使用lengthfieldbasedframedecoder示例\",{\"1\":{\"3126\":1}}],[\"使用linkedlist维护元素的访问顺序\",{\"1\":{\"2512\":1}}],[\"使用linux的fork函数创建一个子进程\",{\"1\":{\"138\":1}}],[\"使用listiterator的add\",{\"1\":{\"2507\":1}}],[\"使用locksupport中断线程\",{\"1\":{\"648\":1}}],[\"使用chararrayreader读取内存中的字符数据\",{\"1\":{\"2857\":1}}],[\"使用chararraywriter写入字符数据到内存\",{\"1\":{\"2857\":1}}],[\"使用condition等待直到有元素延迟到期\",{\"1\":{\"2486\":1}}],[\"使用concurrentskiplistmap\",{\"1\":{\"2672\":1}}],[\"使用concurrentskiplistset\",{\"1\":{\"2389\":1}}],[\"使用concurrentlinkeddeque\",{\"1\":{\"2513\":1}}],[\"使用concurrentlinkedqueue\",{\"1\":{\"2351\":1}}],[\"使用concurrenthashmap等线程安全的容器\",{\"1\":{\"3011\":1}}],[\"使用concurrenthashmap等线程安全的缓存机制\",{\"1\":{\"3010\":1}}],[\"使用concurrenthashmap实现线程安全的linkedhashmap功能\",{\"1\":{\"2640\":1}}],[\"使用concurrenthashmap\",{\"1\":{\"2429\":1,\"2613\":1}}],[\"使用copyonwritearrayset\",{\"1\":{\"2389\":1,\"2392\":1}}],[\"使用copyonwritearraylist\",{\"1\":{\"2340\":1,\"2351\":1,\"2448\":1,\"2456\":1,\"2507\":1,\"2513\":1}}],[\"使用comparator实现降序排序\",{\"0\":{\"2578\":1}}],[\"使用comparator时性能提升\",{\"1\":{\"2569\":1}}],[\"使用comparator排序\",{\"1\":{\"2326\":1}}],[\"使用committransaction\",{\"1\":{\"71\":1}}],[\"使用collectors\",{\"0\":{\"2221\":1}}],[\"使用collection\",{\"1\":{\"2058\":1}}],[\"使用collections\",{\"1\":{\"1197\":1,\"2328\":1,\"2351\":1,\"2373\":1,\"2389\":1,\"2392\":1,\"2429\":1,\"2456\":1,\"2478\":1,\"2513\":1,\"2613\":1,\"2640\":1,\"2670\":1,\"2672\":1,\"2692\":1,\"2697\":1}}],[\"使用camelcase命名法\",{\"1\":{\"1997\":1,\"1998\":1}}],[\"使用cas操作实现无锁入队和出队\",{\"1\":{\"2529\":1}}],[\"使用cas+synchronized实现同步\",{\"1\":{\"2541\":1}}],[\"使用cas+synchronized实现更细粒度的同步\",{\"1\":{\"2527\":1}}],[\"使用cas+synchronized实现并发控制\",{\"1\":{\"2416\":1}}],[\"使用cas+synchronized替代分段锁\",{\"1\":{\"2520\":1}}],[\"使用cas\",{\"1\":{\"663\":1}}],[\"使用callable和future\",{\"1\":{\"592\":1}}],[\"使用新的类实例替换旧的实例\",{\"1\":{\"756\":1}}],[\"使用新的http客户端替换httpurlconnection或老旧的第三方库\",{\"1\":{\"495\":1}}],[\"使用新api\",{\"1\":{\"566\":1}}],[\"使用tcp\",{\"1\":{\"3227\":1}}],[\"使用tcp协议代替udp\",{\"1\":{\"1105\":1}}],[\"使用targetdata\",{\"1\":{\"2508\":1}}],[\"使用timsort算法\",{\"1\":{\"2357\":1}}],[\"使用test\",{\"1\":{\"2046\":1}}],[\"使用trimtosize\",{\"1\":{\"2451\":1}}],[\"使用treeset存储自定义对象时\",{\"1\":{\"2388\":1}}],[\"使用treeset时确保元素不为null\",{\"1\":{\"2383\":1}}],[\"使用try\",{\"1\":{\"1234\":1,\"1336\":2,\"2450\":1,\"2832\":1,\"2872\":1,\"2884\":1,\"2896\":1,\"2920\":1,\"2930\":1}}],[\"使用trylock\",{\"1\":{\"648\":1}}],[\"使用transactiontemplate或platformtransactionmanager手动管理事务\",{\"1\":{\"349\":1}}],[\"使用threadlocal传递追踪上下文\",{\"1\":{\"3111\":1}}],[\"使用thread\",{\"1\":{\"527\":2,\"1254\":1}}],[\"使用场景及高级应用\",{\"1\":{\"2816\":1}}],[\"使用场景及最佳实践\",{\"1\":{\"2792\":1}}],[\"使用场景\",{\"1\":{\"521\":1,\"2358\":1,\"2795\":1,\"2796\":1,\"3038\":1,\"3039\":1,\"3040\":1}}],[\"使用单文件程序启动简化小型工具和脚本的开发\",{\"1\":{\"495\":1}}],[\"使用java\",{\"1\":{\"1324\":1}}],[\"使用javap等工具分析类结构\",{\"1\":{\"738\":1}}],[\"使用javap命令分析类文件\",{\"1\":{\"727\":1}}],[\"使用jain\",{\"1\":{\"1094\":1,\"3190\":1}}],[\"使用jdk版本中已废弃或移除的参数\",{\"1\":{\"817\":1,\"851\":1,\"885\":1,\"919\":1}}],[\"使用jdbctemplate\",{\"1\":{\"438\":1}}],[\"使用jconsole或jvisualvm连接java进程\",{\"1\":{\"807\":1,\"841\":1,\"875\":1,\"909\":1}}],[\"使用jlink创建自定义运行时镜像\",{\"1\":{\"495\":1}}],[\"使用着色指针和读屏障技术\",{\"1\":{\"476\":1}}],[\"使用泛型的情况\",{\"1\":{\"3017\":1}}],[\"使用泛型\",{\"1\":{\"276\":1}}],[\"使用量\",{\"1\":{\"232\":2,\"1684\":2}}],[\"使用管道\",{\"1\":{\"212\":1}}],[\"使用布隆过滤器\",{\"1\":{\"192\":1}}],[\"使用了装饰器模式\",{\"1\":{\"2337\":1}}],[\"使用了cdn\",{\"1\":{\"189\":1}}],[\"使用了该mysql版本中不存在的扩展\",{\"1\":{\"125\":1}}],[\"使用脚本程序固定触发数据预热过程\",{\"1\":{\"189\":1}}],[\"使用集群的方式可以快速解决上述问题\",{\"1\":{\"183\":1}}],[\"使用readline\",{\"1\":{\"2860\":1}}],[\"使用read\",{\"1\":{\"2831\":1}}],[\"使用reentrantlock或synchronized块保护访问\",{\"1\":{\"2670\":1}}],[\"使用reentrantlock自定义实现\",{\"1\":{\"2513\":1}}],[\"使用reentrantlock实现细粒度同步\",{\"1\":{\"2456\":1}}],[\"使用reentrantlock手动加锁\",{\"1\":{\"1197\":1}}],[\"使用reentrantreadwritelock分离读写操作\",{\"1\":{\"2356\":1,\"2697\":1}}],[\"使用redis实现集群节点间状态同步\",{\"1\":{\"3235\":1}}],[\"使用redis\",{\"1\":{\"1786\":1}}],[\"使用redis等存储会话状态\",{\"1\":{\"1112\":1}}],[\"使用replaceone\",{\"1\":{\"49\":1}}],[\"使用runid相同的策略生成\",{\"1\":{\"171\":1}}],[\"使用心跳机制进行维护\",{\"1\":{\"169\":1}}],[\"使用\",{\"0\":{\"1020\":1,\"1381\":1},\"1\":{\"125\":1,\"186\":1,\"271\":1,\"274\":1,\"459\":1,\"570\":1,\"718\":1,\"735\":1,\"741\":1,\"967\":1,\"1059\":1,\"1125\":4,\"1126\":1,\"1128\":1,\"1129\":1,\"1132\":1,\"1138\":1,\"1139\":3,\"1169\":1,\"1294\":1,\"1447\":1,\"1487\":1,\"3041\":2,\"3246\":1}}],[\"使用的shell\",{\"1\":{\"3246\":1}}],[\"使用的是绝对地址\",{\"1\":{\"3246\":1}}],[\"使用的延迟线程过多\",{\"1\":{\"125\":1}}],[\"使用的键部分不是字符串\",{\"1\":{\"125\":1}}],[\"使用密码\",{\"1\":{\"125\":1}}],[\"使用投影查询来减少返回的数据量\",{\"1\":{\"95\":1}}],[\"使用索引来加速查询\",{\"1\":{\"95\":1}}],[\"使用索引来提高查询性能\",{\"1\":{\"94\":1}}],[\"使用批量命令减少网络开销\",{\"1\":{\"212\":1}}],[\"使用批量命令\",{\"1\":{\"94\":1}}],[\"使用事务来确保操作的原子性\",{\"1\":{\"95\":1}}],[\"使用事务\",{\"1\":{\"71\":1}}],[\"使用skywalking或zipkin的服务依赖图\",{\"1\":{\"3111\":1}}],[\"使用skip\",{\"1\":{\"48\":1}}],[\"使用spring的\",{\"1\":{\"2956\":1}}],[\"使用scanner更方便\",{\"1\":{\"2861\":1}}],[\"使用securitymanager\",{\"1\":{\"3011\":1}}],[\"使用securitymanager限制反射权限\",{\"1\":{\"3010\":1}}],[\"使用selector实现非阻塞io\",{\"1\":{\"2921\":1}}],[\"使用select\",{\"1\":{\"2920\":1}}],[\"使用sequenceinputstream组合多个流\",{\"1\":{\"2892\":1}}],[\"使用sequenceinputstream组合两个流\",{\"1\":{\"2891\":1}}],[\"使用setaccessible\",{\"1\":{\"1264\":1}}],[\"使用serial\",{\"1\":{\"795\":1,\"829\":1,\"863\":1,\"897\":1}}],[\"使用serviceloader加载服务时需要在module\",{\"1\":{\"490\":1}}],[\"使用sublist时的注意事项\",{\"1\":{\"1194\":1}}],[\"使用standardcharsets类中的常量\",{\"1\":{\"2860\":1}}],[\"使用stack实现括号匹配\",{\"0\":{\"2554\":1}}],[\"使用startsession\",{\"1\":{\"71\":1}}],[\"使用stream\",{\"0\":{\"2220\":1},\"1\":{\"1190\":1,\"2221\":1,\"2340\":1,\"2448\":1}}],[\"使用stringwriter和stringreader\",{\"1\":{\"2857\":1}}],[\"使用stringbuffer\",{\"1\":{\"2279\":1}}],[\"使用stringbuffer或手动同步\",{\"1\":{\"2279\":1}}],[\"使用stringbuilder避免重复创建对象\",{\"1\":{\"2723\":1}}],[\"使用stringbuilder或stringbuffer\",{\"1\":{\"2257\":1}}],[\"使用stringbuilder反转\",{\"1\":{\"1164\":1}}],[\"使用stringbuilder而不是string拼接\",{\"1\":{\"1151\":1}}],[\"使用stringbuilder\",{\"1\":{\"1056\":1,\"2207\":1}}],[\"使用string\",{\"1\":{\"2197\":1}}],[\"使用string增强方法简化字符串处理代码\",{\"1\":{\"495\":1}}],[\"使用stun获取公网地址示例\",{\"1\":{\"3224\":1}}],[\"使用stun服务器获取公网地址\",{\"1\":{\"3224\":1}}],[\"使用stun服务器获取公网地址示例\",{\"1\":{\"1104\":1}}],[\"使用stun\",{\"1\":{\"1104\":1,\"3194\":1}}],[\"使用ssl\",{\"1\":{\"114\":1}}],[\"使用sort\",{\"1\":{\"48\":1}}],[\"使用查询过滤器\",{\"1\":{\"48\":1}}],[\"删除原harbor\",{\"0\":{\"3262\":1}}],[\"删除二进制文件即可\",{\"1\":{\"3249\":1}}],[\"删除没有使用的volume\",{\"1\":{\"3246\":1}}],[\"删除容器\",{\"1\":{\"3245\":2}}],[\"删除最少访问的元素\",{\"1\":{\"2512\":1}}],[\"删除linkedlist尾部元素\",{\"1\":{\"2512\":1}}],[\"删除并返回尾部元素\",{\"1\":{\"2497\":1}}],[\"删除并返回头部元素\",{\"1\":{\"2497\":1}}],[\"删除并重新建立一个新的名为system\",{\"1\":{\"1739\":1}}],[\"删除首次出现的指定元素\",{\"1\":{\"2496\":1}}],[\"删除时\",{\"1\":{\"2472\":1}}],[\"删除当前元素\",{\"1\":{\"2441\":1,\"2498\":2}}],[\"删除当前数据库\",{\"1\":{\"80\":1}}],[\"删除后map\",{\"1\":{\"2407\":1}}],[\"删除和检查操作\",{\"1\":{\"2459\":1}}],[\"删除和查找性能为o\",{\"1\":{\"2391\":1}}],[\"删除和查找操作的时间复杂度为o\",{\"1\":{\"2377\":1}}],[\"删除和管理用户\",{\"1\":{\"1736\":1}}],[\"删除年龄小于25岁后\",{\"1\":{\"2329\":1}}],[\"删除年龄小于25岁的人\",{\"1\":{\"2329\":1}}],[\"删除性能测试\",{\"1\":{\"2327\":1}}],[\"删除尾部元素\",{\"1\":{\"2319\":1}}],[\"删除头部元素\",{\"1\":{\"2319\":1}}],[\"删除操作\",{\"1\":{\"2265\":1,\"2354\":1,\"2484\":1}}],[\"删除红色划线部分\",{\"0\":{\"1724\":1}}],[\"删除标签\",{\"1\":{\"1660\":1}}],[\"删除镜像\",{\"0\":{\"1801\":1},\"1\":{\"1610\":1,\"1671\":1,\"1741\":1,\"3245\":1,\"3262\":1}}],[\"删除安装包\",{\"1\":{\"1610\":1,\"1671\":1,\"1741\":1}}],[\"删除表空间\",{\"1\":{\"1575\":1}}],[\"删除元素时将不再使用的数组位置置为null\",{\"1\":{\"2445\":1}}],[\"删除元素操作\",{\"0\":{\"2440\":1,\"2496\":1}}],[\"删除元素\",{\"1\":{\"1190\":1,\"2059\":1,\"2324\":1,\"2340\":1,\"2369\":1,\"2382\":1,\"2448\":1,\"2507\":1,\"2610\":1}}],[\"删除指定服务的容器\",{\"1\":{\"3246\":1}}],[\"删除指定位置的元素\",{\"1\":{\"2440\":1,\"2496\":1}}],[\"删除指定内核\",{\"0\":{\"1499\":1}}],[\"删除指定元素\",{\"1\":{\"1462\":1,\"1465\":1,\"2440\":1}}],[\"删除指定文件\",{\"1\":{\"286\":1}}],[\"删除指定路径的文件\",{\"1\":{\"286\":1}}],[\"删除某个版本\",{\"1\":{\"265\":1}}],[\"删除哈希中的字段\",{\"1\":{\"201\":1}}],[\"删除键\",{\"1\":{\"199\":1}}],[\"删除节点后回调\",{\"1\":{\"2630\":1}}],[\"删除节点\",{\"0\":{\"1659\":1},\"1\":{\"186\":1}}],[\"删除策略对比\",{\"0\":{\"154\":1}}],[\"删除策略就是针对已过期数据的处理策略\",{\"1\":{\"147\":1}}],[\"删除key\",{\"1\":{\"153\":1}}],[\"删除\",{\"1\":{\"125\":1,\"152\":1,\"1736\":1,\"1739\":1,\"1876\":1,\"2354\":1,\"2409\":2,\"2462\":1,\"2503\":3,\"2650\":1,\"2663\":1}}],[\"删除5张表\",{\"1\":{\"113\":1}}],[\"删除savlue\",{\"1\":{\"113\":1}}],[\"删除所有任务调度工作\",{\"1\":{\"1504\":1}}],[\"删除所有索引\",{\"1\":{\"90\":1}}],[\"删除所有文档\",{\"1\":{\"50\":1}}],[\"删除索引5\",{\"1\":{\"2265\":1}}],[\"删除索引\",{\"1\":{\"90\":1}}],[\"删除文档\",{\"0\":{\"87\":1}}],[\"删除集合\",{\"1\":{\"82\":1}}],[\"删除用户\",{\"1\":{\"81\":1,\"427\":1}}],[\"删除多个文档\",{\"1\":{\"50\":2,\"87\":1}}],[\"删除单个文档\",{\"1\":{\"50\":2,\"87\":1}}],[\"删除数据时\",{\"1\":{\"53\":1}}],[\"删除数据\",{\"0\":{\"50\":1}}],[\"4m35s\",{\"1\":{\"3273\":2}}],[\"4aa0\",{\"1\":{\"3266\":4}}],[\"4xx\",{\"1\":{\"3179\":1}}],[\"4引入的异步非阻塞io模型\",{\"1\":{\"3113\":1}}],[\"4引入的新io模型\",{\"1\":{\"1227\":1,\"2911\":1}}],[\"4引入nio\",{\"1\":{\"3079\":1}}],[\"4=d\",{\"1\":{\"2427\":1,\"2632\":1}}],[\"4字节\",{\"1\":{\"2099\":2}}],[\"4字节长度\",{\"1\":{\"1325\":1}}],[\"4位数字\",{\"1\":{\"2050\":1}}],[\"43h\",{\"1\":{\"1660\":5}}],[\"43692950\",{\"1\":{\"1536\":1}}],[\"43\",{\"1\":{\"1528\":1,\"1698\":1,\"3273\":2,\"3282\":4}}],[\"49172\",{\"1\":{\"3180\":1,\"3190\":1}}],[\"49170\",{\"1\":{\"1092\":1}}],[\"49\",{\"1\":{\"1483\":1,\"1498\":1,\"1499\":1,\"2112\":1}}],[\"4启动\",{\"1\":{\"1478\":1}}],[\"4内核启动\",{\"1\":{\"1478\":1}}],[\"46px\",{\"1\":{\"1440\":1}}],[\"46239275\",{\"1\":{\"281\":1}}],[\"4gi\",{\"1\":{\"1638\":1}}],[\"4g\",{\"1\":{\"1117\":1,\"3264\":4}}],[\"456\",{\"1\":{\"3002\":3}}],[\"4554617c\",{\"1\":{\"2231\":1}}],[\"45019350\",{\"1\":{\"1642\":1}}],[\"453294371e0a38d70216b1e527edc1d957e41325\",{\"1\":{\"997\":4}}],[\"45\",{\"1\":{\"286\":1,\"1586\":2}}],[\"451\",{\"1\":{\"115\":1}}],[\"44\",{\"1\":{\"286\":1}}],[\"443端口需要在安全组开发端口\",{\"1\":{\"1417\":1}}],[\"443\",{\"1\":{\"286\":2,\"1417\":1,\"3271\":4}}],[\"47g\",{\"1\":{\"3275\":1}}],[\"476f\",{\"1\":{\"1918\":1}}],[\"47\",{\"1\":{\"280\":1,\"1667\":2,\"1711\":1}}],[\"486\",{\"1\":{\"3196\":1}}],[\"487z\",{\"1\":{\"1698\":1}}],[\"48\",{\"1\":{\"249\":1}}],[\"4小时27分15秒+11分36秒+2分16秒=4小时41分7秒=16867秒\",{\"1\":{\"160\":1}}],[\"4k\",{\"1\":{\"129\":1}}],[\"42\",{\"1\":{\"2845\":1,\"3282\":1}}],[\"421m\",{\"1\":{\"1885\":1}}],[\"421\",{\"1\":{\"1885\":1}}],[\"42s12\",{\"1\":{\"125\":1}}],[\"42s21\",{\"1\":{\"125\":1}}],[\"42s22\",{\"1\":{\"125\":2}}],[\"42s02\",{\"1\":{\"125\":3}}],[\"42s01\",{\"1\":{\"125\":1}}],[\"42000\",{\"1\":{\"125\":111}}],[\"4e1b\",{\"1\":{\"118\":1}}],[\"40ab\",{\"1\":{\"3278\":3}}],[\"40px\",{\"1\":{\"1440\":1}}],[\"4096\",{\"1\":{\"1321\":1,\"2849\":1,\"3282\":1}}],[\"403\",{\"1\":{\"1005\":1,\"1393\":1,\"1410\":1}}],[\"400mi\",{\"1\":{\"1638\":1}}],[\"400px\",{\"1\":{\"1469\":4,\"1470\":2}}],[\"400\",{\"1\":{\"429\":2,\"1005\":1,\"1044\":1,\"1393\":1}}],[\"40001\",{\"1\":{\"125\":1}}],[\"401\",{\"1\":{\"306\":1,\"430\":1,\"3196\":1,\"3215\":1}}],[\"404\",{\"1\":{\"216\":1,\"2256\":1,\"2956\":1,\"3283\":1}}],[\"40\",{\"1\":{\"50\":1,\"87\":1,\"2146\":1,\"2150\":1,\"2661\":4}}],[\"4\",{\"0\":{\"50\":1,\"65\":1,\"71\":1,\"87\":1,\"88\":1,\"89\":1,\"90\":1,\"91\":1,\"153\":1,\"183\":1,\"184\":1,\"185\":1,\"186\":1,\"194\":1,\"202\":1,\"228\":1,\"235\":1,\"251\":1,\"274\":1,\"327\":1,\"340\":1,\"345\":1,\"351\":1,\"369\":1,\"383\":1,\"394\":1,\"407\":1,\"418\":1,\"424\":1,\"430\":1,\"441\":1,\"452\":1,\"474\":1,\"478\":1,\"479\":1,\"480\":1,\"529\":1,\"540\":1,\"541\":1,\"542\":1,\"582\":1,\"586\":1,\"599\":1,\"600\":1,\"601\":1,\"603\":1,\"615\":1,\"616\":1,\"617\":1,\"619\":1,\"631\":1,\"632\":1,\"633\":1,\"635\":2,\"648\":1,\"649\":1,\"650\":1,\"652\":1,\"665\":1,\"666\":1,\"667\":1,\"669\":1,\"683\":1,\"684\":1,\"685\":1,\"700\":1,\"701\":1,\"702\":1,\"717\":1,\"718\":1,\"719\":1,\"735\":1,\"736\":1,\"737\":1,\"739\":1,\"753\":1,\"754\":1,\"755\":1,\"767\":1,\"768\":1,\"769\":1,\"770\":1,\"780\":1,\"781\":1,\"782\":1,\"783\":2,\"798\":1,\"813\":1,\"814\":1,\"815\":1,\"816\":2,\"817\":1,\"832\":1,\"847\":1,\"848\":1,\"849\":1,\"850\":2,\"851\":1,\"866\":1,\"881\":1,\"882\":1,\"883\":1,\"884\":2,\"885\":1,\"900\":1,\"915\":1,\"916\":1,\"917\":1,\"918\":2,\"919\":1,\"927\":1,\"939\":1,\"958\":1,\"980\":1,\"1017\":1,\"1022\":1,\"1023\":1,\"1024\":1,\"1025\":1,\"1026\":2,\"1051\":1,\"1052\":1,\"1053\":1,\"1054\":1,\"1055\":1,\"1056\":1,\"1066\":1,\"1074\":1,\"1130\":1,\"1131\":1,\"1132\":1,\"1151\":1,\"1189\":1,\"1190\":1,\"1191\":1,\"1192\":1,\"1193\":1,\"1194\":1,\"1206\":1,\"1211\":1,\"1237\":1,\"1268\":1,\"1269\":1,\"1270\":1,\"1271\":1,\"1321\":1,\"1333\":1,\"1339\":1,\"1344\":1,\"1354\":1,\"1360\":1,\"1407\":1,\"1433\":1,\"1440\":1,\"1441\":1,\"1442\":1,\"1443\":1,\"1444\":2,\"1452\":1,\"1458\":1,\"1461\":1,\"1462\":1,\"1463\":1,\"1464\":2,\"1465\":1,\"1477\":1,\"1483\":1,\"1489\":1,\"1511\":1,\"1518\":1,\"1525\":1,\"1532\":1,\"1547\":1,\"1583\":1,\"1591\":1,\"1596\":1,\"1601\":1,\"1606\":1,\"1629\":1,\"1643\":1,\"1682\":1,\"1693\":1,\"1708\":1,\"1718\":1,\"1724\":1,\"1738\":1,\"1769\":1,\"1819\":1,\"1897\":1,\"1906\":1,\"1917\":1,\"1947\":1,\"1960\":1,\"1973\":1,\"1986\":1,\"1999\":1,\"2002\":1,\"2011\":1,\"2012\":1,\"2025\":1,\"2026\":1,\"2027\":1,\"2038\":1,\"2039\":1,\"2047\":1,\"2068\":1,\"2079\":1,\"2112\":1,\"2131\":1,\"2132\":1,\"2133\":1,\"2134\":1,\"2152\":1,\"2172\":1,\"2173\":1,\"2174\":1,\"2197\":1,\"2198\":1,\"2222\":1,\"2223\":1,\"2224\":1,\"2235\":1,\"2247\":1,\"2248\":1,\"2249\":1,\"2270\":1,\"2271\":1,\"2272\":1,\"2297\":1,\"2298\":1,\"2299\":1,\"2300\":1,\"2317\":1,\"2318\":1,\"2319\":1,\"2327\":1,\"2336\":1,\"2339\":1,\"2340\":1,\"2341\":1,\"2342\":1,\"2343\":1,\"2344\":1,\"2345\":1,\"2346\":1,\"2347\":1,\"2348\":1,\"2349\":1,\"2350\":2,\"2351\":2,\"2352\":2,\"2364\":1,\"2365\":1,\"2366\":1,\"2372\":1,\"2378\":1,\"2381\":1,\"2382\":1,\"2383\":1,\"2384\":1,\"2385\":1,\"2386\":1,\"2387\":1,\"2388\":1,\"2389\":2,\"2401\":1,\"2402\":1,\"2403\":1,\"2409\":1,\"2415\":1,\"2418\":1,\"2419\":1,\"2420\":1,\"2421\":1,\"2422\":1,\"2423\":1,\"2424\":1,\"2430\":1,\"2439\":1,\"2446\":1,\"2448\":1,\"2449\":1,\"2450\":1,\"2451\":2,\"2452\":1,\"2457\":1,\"2462\":1,\"2468\":1,\"2473\":1,\"2475\":1,\"2476\":1,\"2477\":1,\"2478\":1,\"2479\":1,\"2480\":1,\"2481\":1,\"2496\":1,\"2503\":1,\"2505\":1,\"2506\":1,\"2507\":1,\"2508\":2,\"2509\":1,\"2519\":1,\"2525\":1,\"2530\":1,\"2532\":1,\"2533\":1,\"2534\":1,\"2535\":1,\"2536\":1,\"2537\":1,\"2538\":1,\"2539\":1,\"2561\":1,\"2562\":1,\"2563\":1,\"2584\":1,\"2585\":1,\"2586\":1,\"2587\":2,\"2610\":1,\"2612\":1,\"2613\":1,\"2614\":1,\"2615\":2,\"2624\":1,\"2630\":1,\"2637\":1,\"2639\":1,\"2640\":1,\"2641\":1,\"2642\":2,\"2644\":1,\"2651\":1,\"2657\":1,\"2666\":1,\"2668\":1,\"2669\":1,\"2670\":1,\"2671\":2,\"2673\":1,\"2682\":1,\"2691\":1,\"2692\":1,\"2693\":1,\"2694\":2,\"2699\":1,\"2704\":1,\"2710\":1,\"2719\":1,\"2720\":1,\"2721\":1,\"2722\":1,\"2723\":1,\"2724\":1,\"2729\":1,\"2755\":1,\"2772\":1,\"2776\":1,\"2781\":1,\"2791\":2,\"2797\":1,\"2803\":1,\"2815\":1,\"2821\":1,\"2833\":1,\"2844\":1,\"2856\":1,\"2862\":1,\"2868\":1,\"2880\":1,\"2892\":1,\"2904\":1,\"2916\":1,\"2938\":1,\"2971\":1,\"2988\":1,\"2989\":1,\"2990\":1,\"3006\":1,\"3007\":1,\"3041\":1,\"3084\":1,\"3085\":1,\"3086\":1,\"3087\":1,\"3105\":1,\"3106\":1,\"3107\":1,\"3126\":1,\"3137\":1,\"3150\":1,\"3166\":1,\"3185\":1,\"3186\":1,\"3187\":1,\"3188\":1,\"3189\":1,\"3213\":1,\"3214\":1,\"3215\":1,\"3225\":1,\"3239\":1,\"3268\":1,\"3299\":1,\"3327\":1},\"1\":{\"116\":1,\"129\":1,\"178\":1,\"189\":1,\"190\":4,\"191\":2,\"192\":2,\"219\":1,\"238\":1,\"239\":1,\"242\":1,\"248\":2,\"250\":4,\"269\":1,\"285\":2,\"305\":1,\"307\":1,\"459\":1,\"462\":1,\"463\":3,\"537\":1,\"539\":1,\"543\":1,\"575\":1,\"584\":3,\"585\":1,\"625\":1,\"626\":1,\"728\":1,\"738\":1,\"792\":1,\"826\":1,\"860\":1,\"894\":1,\"959\":1,\"1069\":1,\"1160\":1,\"1162\":1,\"1178\":1,\"1191\":1,\"1194\":1,\"1295\":2,\"1325\":2,\"1332\":2,\"1392\":1,\"1414\":1,\"1416\":1,\"1419\":1,\"1420\":2,\"1431\":2,\"1432\":1,\"1439\":1,\"1440\":1,\"1443\":2,\"1444\":2,\"1456\":1,\"1458\":1,\"1459\":1,\"1462\":1,\"1463\":1,\"1469\":1,\"1478\":2,\"1481\":6,\"1482\":4,\"1483\":5,\"1484\":3,\"1488\":3,\"1489\":2,\"1495\":2,\"1496\":6,\"1497\":1,\"1498\":3,\"1499\":4,\"1501\":1,\"1503\":2,\"1507\":1,\"1563\":1,\"1564\":1,\"1576\":1,\"1577\":1,\"1578\":1,\"1613\":1,\"1633\":1,\"1635\":1,\"1637\":1,\"1650\":4,\"1660\":8,\"1667\":1,\"1673\":1,\"1677\":2,\"1682\":1,\"1685\":1,\"1687\":4,\"1734\":3,\"1736\":1,\"1739\":1,\"1744\":1,\"1764\":2,\"1778\":1,\"1779\":1,\"1780\":2,\"1787\":1,\"1788\":1,\"1881\":1,\"2042\":1,\"2057\":1,\"2065\":1,\"2109\":1,\"2126\":1,\"2128\":1,\"2147\":2,\"2149\":2,\"2167\":2,\"2169\":1,\"2170\":2,\"2181\":1,\"2188\":1,\"2194\":1,\"2198\":1,\"2212\":2,\"2214\":2,\"2216\":2,\"2217\":2,\"2220\":2,\"2231\":2,\"2291\":1,\"2294\":1,\"2320\":1,\"2323\":1,\"2325\":1,\"2326\":2,\"2329\":1,\"2346\":4,\"2369\":1,\"2370\":1,\"2371\":4,\"2372\":1,\"2404\":1,\"2406\":1,\"2408\":1,\"2410\":1,\"2427\":1,\"2434\":1,\"2465\":1,\"2491\":1,\"2513\":1,\"2524\":1,\"2596\":1,\"2624\":1,\"2632\":1,\"2660\":2,\"2704\":1,\"2742\":1,\"2766\":2,\"2821\":1,\"2826\":1,\"2903\":1,\"2914\":1,\"2970\":1,\"2983\":1,\"3023\":2,\"3025\":1,\"3047\":3,\"3065\":2,\"3107\":1,\"3126\":3,\"3218\":1,\"3232\":1,\"3245\":2,\"3246\":4,\"3264\":5,\"3282\":3}}],[\"5jtsf\",{\"1\":{\"3273\":2}}],[\"5分钟\",{\"1\":{\"3215\":1}}],[\"5xx\",{\"1\":{\"3179\":1}}],[\"5之前的非泛型代码的兼容性\",{\"1\":{\"3034\":1}}],[\"5引入的核心特性\",{\"1\":{\"3013\":1}}],[\"5引入的语法糖\",{\"1\":{\"1049\":1}}],[\"5是黄金分割比例的近似值\",{\"1\":{\"2455\":1}}],[\"5是斐波那契数列比例\",{\"1\":{\"2455\":1}}],[\"5还是2\",{\"1\":{\"2455\":1}}],[\"5+\",{\"1\":{\"2328\":1,\"2351\":1}}],[\"5f8f5b6f9f\",{\"1\":{\"1808\":1}}],[\"57\",{\"1\":{\"1677\":3}}],[\"5qxqpy\",{\"1\":{\"1661\":1,\"1713\":1}}],[\"55552296\",{\"1\":{\"1586\":2}}],[\"5level\",{\"1\":{\"1564\":2,\"2072\":1,\"3102\":1}}],[\"52460d7f\",{\"1\":{\"3278\":3}}],[\"524288k\",{\"1\":{\"774\":4}}],[\"52\",{\"1\":{\"1535\":2}}],[\"512\",{\"1\":{\"1684\":1,\"1687\":2}}],[\"512m\",{\"1\":{\"1638\":2}}],[\"51\",{\"1\":{\"1534\":1,\"1535\":1,\"1578\":1}}],[\"56\",{\"1\":{\"1764\":1,\"1765\":4,\"3097\":1}}],[\"5601\",{\"1\":{\"1360\":1,\"1367\":1,\"1518\":2,\"1519\":1}}],[\"5672\",{\"1\":{\"255\":2}}],[\"5gi\",{\"1\":{\"3278\":2}}],[\"5g\",{\"1\":{\"1117\":1}}],[\"5注解示例\",{\"1\":{\"574\":1}}],[\"5泛型示例\",{\"1\":{\"574\":1}}],[\"5发布\",{\"1\":{\"574\":1}}],[\"5<\",{\"1\":{\"394\":1,\"999\":1}}],[\"58\",{\"1\":{\"286\":1}}],[\"535px\",{\"1\":{\"1440\":1}}],[\"530px\",{\"1\":{\"1440\":1}}],[\"5386933\",{\"1\":{\"1417\":2}}],[\"53\",{\"1\":{\"286\":1,\"3282\":1}}],[\"59\",{\"1\":{\"286\":2}}],[\"5ms\",{\"1\":{\"2986\":1}}],[\"5mb\",{\"1\":{\"1238\":1}}],[\"5m\",{\"1\":{\"216\":1}}],[\"5倍既能满足性能需求\",{\"1\":{\"2455\":1}}],[\"5倍作为扩容因子主要基于时间和空间效率的权衡\",{\"1\":{\"2455\":1}}],[\"5倍而不是2倍或其他倍数\",{\"0\":{\"2455\":1}}],[\"5倍容量\",{\"1\":{\"2445\":1}}],[\"5倍扩容可以使新分配的数组空间与旧空间的重叠概率最小\",{\"1\":{\"2455\":1}}],[\"5倍扩容在内存利用率上更优\",{\"1\":{\"2455\":1}}],[\"5倍扩容的重分配次数略多于2倍扩容\",{\"1\":{\"2455\":1}}],[\"5倍扩容\",{\"1\":{\"2316\":1,\"2318\":2,\"2355\":1}}],[\"5倍\",{\"1\":{\"192\":1,\"2161\":1,\"2438\":1,\"2454\":1,\"2581\":1}}],[\"50g\",{\"1\":{\"3275\":1}}],[\"5061\",{\"1\":{\"3177\":1,\"3237\":1}}],[\"5060端口\",{\"1\":{\"1105\":1}}],[\"5060>\",{\"1\":{\"1092\":1,\"3180\":1}}],[\"5060\",{\"1\":{\"1092\":1,\"1094\":1,\"3180\":1,\"3190\":5,\"3218\":2}}],[\"50a7299fbe21\",{\"1\":{\"1918\":1}}],[\"50m\",{\"1\":{\"1573\":1,\"1578\":1}}],[\"50px\",{\"1\":{\"1469\":4}}],[\"50x\",{\"1\":{\"216\":2,\"1384\":1,\"1385\":2}}],[\"5044\",{\"1\":{\"1367\":1,\"1524\":1,\"1526\":4}}],[\"504\",{\"1\":{\"216\":1}}],[\"503\",{\"1\":{\"216\":1}}],[\"502\",{\"1\":{\"216\":1}}],[\"500mi\",{\"1\":{\"1698\":1}}],[\"500m\",{\"1\":{\"1698\":1}}],[\"500px\",{\"1\":{\"1469\":1}}],[\"500502503504\",{\"1\":{\"1385\":1}}],[\"500\",{\"1\":{\"216\":1,\"232\":1,\"429\":2,\"610\":1,\"1044\":1,\"1411\":1,\"1684\":1,\"1739\":1,\"2256\":1,\"2523\":1,\"2956\":1}}],[\"5000\",{\"1\":{\"193\":1,\"1339\":1,\"1431\":1,\"3246\":1}}],[\"5000次请求对应的性能\",{\"1\":{\"193\":1}}],[\"500错误页面出现\",{\"1\":{\"190\":1}}],[\"50个连接\",{\"1\":{\"193\":1}}],[\"50倍\",{\"1\":{\"192\":1}}],[\"50\",{\"1\":{\"166\":1,\"232\":8,\"1684\":4,\"1687\":10,\"1811\":1,\"1899\":1,\"1949\":2,\"1962\":2,\"2109\":1,\"2150\":1,\"2216\":1,\"2661\":3,\"3165\":1,\"3218\":1}}],[\"5w+\",{\"1\":{\"129\":1}}],[\"54321\",{\"1\":{\"3199\":1}}],[\"5432\",{\"1\":{\"1606\":2}}],[\"54\",{\"1\":{\"110\":1}}],[\"5\",{\"0\":{\"76\":1,\"154\":1,\"203\":1,\"229\":1,\"236\":1,\"242\":1,\"256\":1,\"275\":1,\"355\":1,\"360\":1,\"419\":1,\"435\":1,\"481\":1,\"482\":1,\"483\":1,\"543\":1,\"652\":1,\"687\":1,\"704\":1,\"721\":1,\"739\":1,\"757\":2,\"785\":1,\"817\":1,\"819\":1,\"851\":1,\"853\":1,\"885\":1,\"887\":1,\"919\":1,\"928\":1,\"940\":1,\"961\":1,\"983\":1,\"1018\":1,\"1133\":1,\"1134\":1,\"1135\":1,\"1212\":1,\"1345\":1,\"1355\":1,\"1408\":1,\"1434\":1,\"1453\":1,\"1459\":1,\"1465\":1,\"1466\":1,\"1467\":1,\"1478\":1,\"1484\":1,\"1490\":1,\"1512\":1,\"1519\":1,\"1526\":1,\"1533\":1,\"1584\":1,\"1607\":1,\"1630\":1,\"1644\":1,\"1694\":1,\"1709\":1,\"1719\":1,\"1725\":1,\"1739\":1,\"1770\":1,\"1820\":1,\"1898\":1,\"1907\":1,\"1918\":1,\"2000\":1,\"2013\":1,\"2028\":1,\"2040\":1,\"2048\":1,\"2055\":1,\"2080\":1,\"2113\":1,\"2258\":1,\"2301\":1,\"2302\":1,\"2303\":1,\"2304\":1,\"2320\":1,\"2328\":1,\"2337\":1,\"2367\":1,\"2373\":1,\"2379\":1,\"2404\":1,\"2410\":1,\"2416\":1,\"2440\":1,\"2452\":1,\"2463\":1,\"2487\":1,\"2497\":1,\"2509\":1,\"2514\":1,\"2520\":1,\"2683\":1,\"2798\":1,\"2803\":1,\"2822\":1,\"2827\":1,\"2838\":1,\"2845\":1,\"2850\":1,\"2857\":1,\"2862\":1,\"2869\":1,\"2874\":2,\"2881\":1,\"2886\":1,\"2893\":1,\"2898\":1,\"2905\":1,\"2910\":1,\"2917\":1,\"3190\":1,\"3216\":1,\"3217\":1,\"3218\":1,\"3242\":1,\"3269\":1,\"3272\":1,\"3273\":1,\"3328\":1},\"1\":{\"48\":1,\"85\":1,\"115\":2,\"118\":2,\"121\":1,\"122\":1,\"130\":1,\"131\":1,\"189\":1,\"190\":4,\"191\":2,\"192\":1,\"285\":2,\"305\":1,\"468\":2,\"500\":2,\"543\":3,\"553\":2,\"557\":1,\"566\":2,\"575\":1,\"625\":1,\"626\":1,\"642\":1,\"675\":1,\"728\":2,\"1003\":1,\"1053\":1,\"1056\":1,\"1135\":1,\"1160\":3,\"1161\":1,\"1162\":1,\"1178\":1,\"1182\":3,\"1186\":1,\"1238\":1,\"1280\":1,\"1392\":1,\"1420\":1,\"1431\":1,\"1439\":1,\"1440\":1,\"1443\":1,\"1444\":2,\"1458\":1,\"1462\":1,\"1463\":1,\"1469\":1,\"1496\":2,\"1497\":1,\"1498\":2,\"1499\":3,\"1501\":1,\"1513\":1,\"1527\":1,\"1535\":1,\"1576\":1,\"1577\":1,\"1578\":2,\"1599\":1,\"1600\":1,\"1667\":1,\"1724\":2,\"1734\":1,\"1736\":1,\"1764\":2,\"1765\":8,\"1767\":1,\"1768\":1,\"1769\":1,\"1770\":1,\"1778\":2,\"1779\":1,\"1780\":2,\"1781\":1,\"1782\":3,\"1783\":3,\"1788\":1,\"1850\":1,\"1851\":1,\"1873\":1,\"2027\":1,\"2078\":10,\"2109\":2,\"2110\":1,\"2114\":2,\"2126\":1,\"2128\":2,\"2129\":1,\"2130\":1,\"2132\":1,\"2133\":1,\"2134\":1,\"2144\":1,\"2147\":2,\"2149\":2,\"2169\":1,\"2170\":2,\"2181\":1,\"2195\":1,\"2196\":1,\"2212\":2,\"2214\":2,\"2216\":5,\"2217\":2,\"2220\":2,\"2231\":2,\"2265\":2,\"2295\":1,\"2320\":1,\"2323\":1,\"2325\":1,\"2326\":3,\"2329\":1,\"2346\":2,\"2369\":1,\"2370\":1,\"2371\":4,\"2372\":1,\"2404\":1,\"2406\":1,\"2408\":1,\"2434\":1,\"2463\":1,\"2466\":1,\"2491\":1,\"2520\":1,\"2523\":1,\"2549\":1,\"2555\":1,\"2569\":1,\"2660\":3,\"2742\":1,\"2849\":1,\"2902\":1,\"2903\":1,\"2914\":2,\"3005\":1,\"3023\":1,\"3024\":4,\"3025\":4,\"3047\":2,\"3065\":1,\"3082\":1,\"3086\":1,\"3232\":1,\"3245\":2,\"3246\":6,\"3271\":5,\"3273\":4,\"3282\":2}}],[\"$file\",{\"1\":{\"3276\":1}}],[\"$name\",{\"1\":{\"3246\":1}}],[\"$nf\",{\"1\":{\"1881\":2}}],[\"$nin\",{\"1\":{\"1738\":2}}],[\"$5\",{\"1\":{\"1872\":1,\"1881\":1}}],[\"$0\",{\"1\":{\"1870\":1,\"1872\":1}}],[\"$clustertime\",{\"1\":{\"1764\":1}}],[\"$content\",{\"1\":{\"1412\":1}}],[\"$contentlength\",{\"1\":{\"1412\":1}}],[\"$in\",{\"1\":{\"1738\":1}}],[\"$inc\",{\"1\":{\"49\":2,\"86\":1}}],[\"$mainpid\",{\"1\":{\"1620\":1,\"1752\":1}}],[\"$match\",{\"1\":{\"58\":2,\"89\":1}}],[\"$time\",{\"1\":{\"1595\":1}}],[\"$tz\",{\"1\":{\"1548\":2,\"1697\":2}}],[\"$oracle\",{\"1\":{\"1570\":1}}],[\"$body\",{\"1\":{\"1595\":1}}],[\"$base\",{\"1\":{\"1551\":1}}],[\"$binary\",{\"1\":{\"1395\":1,\"1396\":1,\"1397\":1}}],[\"$2\",{\"1\":{\"1477\":1,\"1478\":1,\"1484\":1,\"1495\":1,\"1856\":1,\"1875\":1}}],[\"$2a$10$euwpzhzz32djn7jexm34moeyirddfazm2kuwj7veojhhzkdrxfvuu\",{\"1\":{\"232\":1,\"1684\":1}}],[\"$uri不包含主机名\",{\"1\":{\"1412\":1}}],[\"$uri\",{\"1\":{\"1412\":1}}],[\"$unwind\",{\"1\":{\"58\":1}}],[\"$document\",{\"1\":{\"1412\":2}}],[\"$docker\",{\"1\":{\"280\":2,\"1656\":2,\"1711\":2}}],[\"$kibana\",{\"1\":{\"1373\":1}}],[\"$es\",{\"1\":{\"1371\":1}}],[\"$env\",{\"1\":{\"280\":8}}],[\"$1==\",{\"1\":{\"1477\":1,\"1478\":1,\"1484\":1,\"1495\":1}}],[\"$1\",{\"1\":{\"1369\":2,\"1370\":1,\"1371\":1,\"1372\":1,\"1373\":1}}],[\"$var\",{\"1\":{\"289\":1}}],[\"$http\",{\"1\":{\"216\":1,\"1411\":1,\"1412\":2,\"1595\":3}}],[\"$host$1\",{\"1\":{\"1417\":1}}],[\"$host\",{\"1\":{\"216\":1,\"1412\":1}}],[\"$registry\",{\"1\":{\"280\":1,\"1656\":1,\"1711\":1}}],[\"$remote\",{\"1\":{\"216\":2,\"1410\":1,\"1412\":3,\"1595\":2}}],[\"$request\",{\"1\":{\"216\":1,\"1408\":1,\"1412\":3,\"1595\":1}}],[\"$\",{\"1\":{\"216\":1,\"235\":4,\"264\":1,\"289\":2,\"407\":1,\"1393\":1,\"1417\":1,\"1433\":5,\"1434\":5,\"1435\":5,\"1436\":3,\"1440\":6,\"1443\":11,\"1444\":5,\"1447\":1,\"1448\":1,\"1449\":3,\"1450\":3,\"1451\":3,\"1452\":12,\"1453\":12,\"1454\":2,\"1455\":7,\"1456\":8,\"1457\":4,\"1458\":16,\"1459\":8,\"1460\":13,\"1461\":5,\"1462\":24,\"1463\":10,\"1464\":8,\"1465\":1,\"1467\":8,\"1469\":4,\"1470\":5,\"1548\":1,\"1551\":1,\"1660\":6,\"1697\":1,\"1714\":4,\"1731\":4,\"1747\":2,\"1796\":1,\"1801\":1,\"1857\":1,\"1881\":1,\"2065\":1,\"3052\":2,\"3159\":1,\"3245\":1,\"3246\":2}}],[\"$apr1$\",{\"1\":{\"1422\":1}}],[\"$args\",{\"1\":{\"1412\":1}}],[\"$age\",{\"1\":{\"58\":1}}],[\"$avg\",{\"1\":{\"58\":1}}],[\"$address\",{\"1\":{\"58\":1,\"89\":1}}],[\"$push\",{\"1\":{\"1814\":1,\"1833\":1,\"1834\":1}}],[\"$push等\",{\"1\":{\"49\":1}}],[\"$path\",{\"1\":{\"1624\":1}}],[\"$pwd\",{\"1\":{\"1578\":3,\"1590\":2,\"1595\":5}}],[\"$proxy\",{\"1\":{\"216\":1}}],[\"$project\",{\"1\":{\"58\":1}}],[\"$ls\",{\"1\":{\"1372\":2}}],[\"$lookup\",{\"1\":{\"58\":1}}],[\"$limit\",{\"1\":{\"58\":1,\"1412\":1}}],[\"$lt\",{\"1\":{\"49\":1,\"86\":1}}],[\"$status\",{\"1\":{\"1595\":1}}],[\"$scheme\",{\"1\":{\"1412\":1}}],[\"$server\",{\"1\":{\"1397\":1,\"1412\":4}}],[\"$set\",{\"1\":{\"49\":1,\"86\":1,\"1814\":1}}],[\"$sum\",{\"1\":{\"58\":1,\"89\":1}}],[\"$skip\",{\"1\":{\"58\":1}}],[\"$sort\",{\"1\":{\"58\":2,\"89\":1}}],[\"$group\",{\"1\":{\"58\":2,\"89\":1}}],[\"$gt\",{\"1\":{\"48\":1,\"50\":1,\"58\":1,\"85\":2,\"87\":1,\"89\":1}}],[\"$$\",{\"1\":{\"20\":2}}],[\"插件\",{\"0\":{\"3292\":1}}],[\"插件版本\",{\"1\":{\"966\":1}}],[\"插件配置优化可以提高构建效率和灵活性\",{\"1\":{\"955\":1}}],[\"插件配置优化\",{\"0\":{\"955\":1}}],[\"插件机制\",{\"1\":{\"943\":1}}],[\"插件系统\",{\"0\":{\"941\":1}}],[\"插件来实现\",{\"1\":{\"14\":1}}],[\"插入后修复红黑树平衡\",{\"1\":{\"2655\":1,\"2656\":1}}],[\"插入节点后回调\",{\"1\":{\"2628\":1}}],[\"插入方式\",{\"1\":{\"2616\":1}}],[\"插入元素\",{\"1\":{\"2575\":1}}],[\"插入位置\",{\"1\":{\"2575\":1}}],[\"插入时\",{\"1\":{\"2472\":1}}],[\"插入成功\",{\"1\":{\"2465\":1}}],[\"插入和删除操作需要同时维护哈希表和双向链表\",{\"1\":{\"2636\":1}}],[\"插入和删除时间复杂度为o\",{\"1\":{\"1168\":1}}],[\"插入和查找性能略低于hashset\",{\"1\":{\"2391\":1}}],[\"插入和查找性能为o\",{\"1\":{\"2391\":1}}],[\"插入null会抛出nullpointerexception\",{\"1\":{\"2383\":1}}],[\"插入顺序\",{\"1\":{\"2363\":2,\"2400\":1,\"2406\":1,\"2461\":2,\"2635\":1}}],[\"插入性能\",{\"1\":{\"2363\":1,\"2689\":1}}],[\"插入删除操作较少\",{\"1\":{\"2511\":1}}],[\"插入删除操作\",{\"1\":{\"2511\":1}}],[\"插入删除无需移动大量元素\",{\"1\":{\"2335\":1}}],[\"插入删除\",{\"1\":{\"2316\":1}}],[\"插入删除效率低\",{\"1\":{\"2155\":1}}],[\"插入操作\",{\"1\":{\"2265\":1}}],[\"插入\",{\"1\":{\"1739\":1,\"2391\":1,\"2409\":2,\"2462\":1,\"2650\":1,\"2663\":1}}],[\"插入选择器\",{\"1\":{\"1660\":1}}],[\"插入文档\",{\"0\":{\"84\":1}}],[\"插入多个文档\",{\"1\":{\"47\":2,\"84\":1}}],[\"插入单个文档\",{\"1\":{\"47\":2,\"84\":1}}],[\"插入数据时\",{\"1\":{\"53\":1}}],[\"插入数据\",{\"0\":{\"47\":1}}],[\"本次密码为kubemsb123\",{\"1\":{\"3272\":1}}],[\"本次执行的地址\",{\"1\":{\"1687\":1}}],[\"本类\",{\"1\":{\"2794\":1,\"2807\":1}}],[\"本包\",{\"1\":{\"2794\":1}}],[\"本包及子类可见\",{\"1\":{\"2733\":1}}],[\"本包可见\",{\"1\":{\"2733\":1}}],[\"本文以centos\",{\"1\":{\"1670\":1}}],[\"本文是基于已有数据库以及项目上传到镜像仓库的前提下进行操作~\",{\"1\":{\"1647\":1}}],[\"本文采用的是yml的方式进行自制应用的构建\",{\"1\":{\"1647\":1}}],[\"本专题将深入解析反射的核心概念\",{\"1\":{\"1256\":1}}],[\"本专题将系统梳理io流相关的经典面试题\",{\"1\":{\"1218\":1}}],[\"本专题将系统梳理面试中常见的jvm原理问题\",{\"1\":{\"1141\":1}}],[\"本地标签和远程标签唯一标识\",{\"1\":{\"3209\":1}}],[\"本地联系地址\",{\"1\":{\"3190\":1}}],[\"本地实现\",{\"1\":{\"2987\":1}}],[\"本地文件\",{\"1\":{\"1920\":1}}],[\"本地文件同步类似拷贝命令cp\",{\"1\":{\"1501\":1}}],[\"本地的目录\",{\"1\":{\"1661\":1}}],[\"本地可直接引用下载包中的jar\",{\"1\":{\"1563\":1}}],[\"本地生产文件日志\",{\"1\":{\"1535\":1}}],[\"本地仓库缓存远程仓库的构件\",{\"1\":{\"987\":1}}],[\"本地仓库默认位置\",{\"1\":{\"972\":1}}],[\"本地仓库位于用户主目录下的\",{\"1\":{\"972\":1}}],[\"本地仓库的位置\",{\"0\":{\"972\":1}}],[\"本地仓库是位于开发者本地机器上的仓库\",{\"1\":{\"971\":1}}],[\"本地仓库\",{\"0\":{\"971\":1},\"1\":{\"939\":1}}],[\"本地方法栈中jni引用的对象\",{\"1\":{\"762\":1}}],[\"本地方法栈\",{\"1\":{\"691\":1,\"706\":1,\"707\":1}}],[\"本地方法栈和程序计数器\",{\"1\":{\"690\":1}}],[\"本地方法接口\",{\"1\":{\"690\":1}}],[\"本地docker版本\",{\"1\":{\"246\":1}}],[\"本身就是源集合\",{\"1\":{\"2358\":1}}],[\"本身不是一种新技术\",{\"1\":{\"1430\":1}}],[\"本身包含了认证信息\",{\"1\":{\"305\":1}}],[\"本身没有定义任何技术实现\",{\"1\":{\"303\":1}}],[\"本机\",{\"1\":{\"1898\":2}}],[\"本机局域网ip\",{\"1\":{\"249\":1}}],[\"本机保存上次runid\",{\"1\":{\"171\":1}}],[\"本质是继承java\",{\"1\":{\"3145\":1}}],[\"本质是一种特殊的接口\",{\"1\":{\"3134\":1}}],[\"本质区别在于io操作的发起者不同\",{\"1\":{\"3091\":1}}],[\"本质上虽然也是\",{\"1\":{\"1449\":1}}],[\"本质\",{\"1\":{\"161\":2}}],[\"本章节汇总了java并发编程艺术中常见的面试问题及解答\",{\"1\":{\"1119\":1}}],[\"本章节将从网络模型\",{\"1\":{\"3055\":1}}],[\"本章节将从泛型的基本概念入手\",{\"1\":{\"3013\":1}}],[\"本章节将深入剖析nio的底层原理\",{\"1\":{\"3113\":1}}],[\"本章节将深入解析反射的底层原理\",{\"1\":{\"2962\":1}}],[\"本章节将深入探讨依赖冲突的原因\",{\"1\":{\"1007\":1}}],[\"本章节将深入探讨maven仓库生态系统的构成\",{\"1\":{\"969\":1}}],[\"本章节将深入探讨maven构建优化的核心策略和实践技巧\",{\"1\":{\"947\":1}}],[\"本章节将深入探讨maven的依赖管理机制\",{\"1\":{\"922\":1}}],[\"本章节将系统介绍java网络应用开发中常用的监控工具\",{\"1\":{\"3093\":1}}],[\"本章节将系统梳理java中的流程控制分类及核心用法\",{\"1\":{\"2121\":1}}],[\"本章节将系统梳理java中的运算符分类及核心用法\",{\"1\":{\"2107\":1}}],[\"本章节将系统梳理java中的数据类型分类及核心用法\",{\"1\":{\"2097\":1}}],[\"本章节将系统梳理java中的注释类型及使用规范\",{\"1\":{\"2087\":1}}],[\"本章节将系统梳理java中的关键字分类及核心用法\",{\"1\":{\"2074\":1}}],[\"本章节将系统梳理java生态从诞生到jdk8的演进历程\",{\"1\":{\"559\":1}}],[\"本章节将系统梳理网络编程面试高频考点\",{\"1\":{\"1308\":1}}],[\"本章节将系统讲解面向对象的核心概念\",{\"1\":{\"1200\":1}}],[\"本章节将带你深入了解maven的核心概念\",{\"1\":{\"934\":1}}],[\"本章节将详细解析这一增强特性的实现原理\",{\"1\":{\"497\":1}}],[\"本章节将详细解释springboot的自动装配原理\",{\"1\":{\"413\":1}}],[\"本章节将详细介绍java\",{\"1\":{\"465\":1}}],[\"本章节将详细介绍springboot的测试和安全相关知识\",{\"1\":{\"447\":1}}],[\"本章节将详细介绍springboot的数据访问相关知识\",{\"1\":{\"436\":1}}],[\"本章节将详细介绍springboot的web开发相关知识\",{\"1\":{\"425\":1}}],[\"本章节将详细介绍springboot的配置方式\",{\"1\":{\"400\":1}}],[\"本章节将详细介绍redis的常用命令\",{\"1\":{\"195\":1}}],[\"本章节将详细介绍mongodb的常用命令\",{\"1\":{\"77\":1}}],[\"本章将从sip的基本概念\",{\"1\":{\"3172\":1}}],[\"本章将从协议细节\",{\"1\":{\"3072\":1}}],[\"本章将从实践角度出发\",{\"1\":{\"2996\":1}}],[\"本章将从jvm视角详细剖析反射机制的完整执行流程\",{\"1\":{\"2977\":1}}],[\"本章将从jvm层面解析异常处理原理\",{\"1\":{\"2933\":1}}],[\"本章将从面试角度梳理异常处理的核心知识点\",{\"1\":{\"1240\":1}}],[\"本章将详细讲解枚举的定义语法\",{\"1\":{\"2816\":1}}],[\"本章将详细讲解java中的四种权限修饰符\",{\"1\":{\"2792\":1}}],[\"本章将详细介绍mongodb中的crud操作\",{\"1\":{\"45\":1}}],[\"本章将深入剖析sip的底层实现原理\",{\"1\":{\"3201\":1}}],[\"本章将深入剖析泛型在核心类库\",{\"1\":{\"3043\":1}}],[\"本章将深入探讨sip在实践中的高级应用\",{\"1\":{\"3230\":1}}],[\"本章将深入探讨注解在实际项目中的典型应用场景\",{\"1\":{\"3156\":1}}],[\"本章将深入探讨泛型的类型擦除机制\",{\"1\":{\"3031\":1}}],[\"本章将深入探讨字符串常量的内存模型\",{\"1\":{\"2236\":1}}],[\"本章将深入jdk源码\",{\"1\":{\"2284\":1}}],[\"本章将深入讲解可变字符串的实现原理\",{\"1\":{\"2259\":1}}],[\"本章将系统介绍异常处理的设计原则\",{\"1\":{\"2944\":1}}],[\"本章将系统介绍java中打印数组的多种方式\",{\"1\":{\"2209\":1}}],[\"本章将系统讲解方法的定义规范\",{\"1\":{\"2782\":1}}],[\"本章将系统梳理java中的53个关键字\",{\"1\":{\"2804\":1}}],[\"本章将系统梳理泛型面试中的核心问题\",{\"1\":{\"1283\":1}}],[\"本章将系统梳理注解相关的面试重点\",{\"1\":{\"1061\":1}}],[\"本章将介绍mongodb的一些高级用法\",{\"1\":{\"66\":1}}],[\"本页面就是一个示例\",{\"1\":{\"5\":1}}],[\"如增大缓冲区\",{\"1\":{\"3228\":1}}],[\"如增加媒体流\",{\"1\":{\"3175\":1}}],[\"如语音通话建立\",{\"1\":{\"3227\":1}}],[\"如注册\",{\"1\":{\"3227\":1}}],[\"如包含大量sdp属性\",{\"1\":{\"3227\":1}}],[\"如voip通话\",{\"1\":{\"3206\":1}}],[\"如媒体类型\",{\"1\":{\"3175\":1}}],[\"如web服务器\",{\"1\":{\"3091\":1}}],[\"如集合框架\",{\"1\":{\"3043\":1}}],[\"如集合元素的写入\",{\"1\":{\"3040\":1}}],[\"如集合元素的读取\",{\"1\":{\"3039\":1}}],[\"如<\",{\"1\":{\"3034\":2}}],[\"如<spring\",{\"1\":{\"932\":1}}],[\"如t\",{\"1\":{\"3019\":1}}],[\"如thymeleaf自动转义\",{\"1\":{\"2067\":1}}],[\"如获取class对象\",{\"1\":{\"3011\":1}}],[\"如框架开发\",{\"1\":{\"2975\":1}}],[\"如方法签名修改\",{\"1\":{\"2974\":1}}],[\"如方法的执行\",{\"1\":{\"335\":1}}],[\"如空指针\",{\"1\":{\"2931\":1}}],[\"如文件服务器\",{\"1\":{\"3091\":1}}],[\"如文件操作\",{\"1\":{\"2931\":1}}],[\"如文件传输\",{\"1\":{\"1238\":1,\"3130\":1}}],[\"如nio的selector\",{\"1\":{\"3089\":1}}],[\"如nullpointerexception\",{\"1\":{\"2926\":1}}],[\"如new\",{\"1\":{\"2909\":1,\"3028\":1}}],[\"如连接\",{\"1\":{\"2916\":1}}],[\"如生产者\",{\"1\":{\"2897\":1}}],[\"如合并多个文件\",{\"1\":{\"2897\":1}}],[\"如utf\",{\"1\":{\"2877\":1,\"2884\":1}}],[\"如4096\",{\"1\":{\"2872\":1}}],[\"如64kb或128kb\",{\"1\":{\"2872\":1}}],[\"如缓冲\",{\"1\":{\"2847\":1}}],[\"如缓存\",{\"1\":{\"2356\":1}}],[\"如缓存更新\",{\"1\":{\"602\":1}}],[\"如星期\",{\"1\":{\"2824\":1}}],[\"如getuserinfo\",{\"1\":{\"2784\":1}}],[\"如goto\",{\"1\":{\"2085\":1}}],[\"如响应时间\",{\"1\":{\"2728\":1}}],[\"如高斯求和公式\",{\"1\":{\"2727\":1}}],[\"如链表反转\",{\"1\":{\"2727\":1}}],[\"如原地排序\",{\"1\":{\"2727\":1}}],[\"如递归嵌套或循环变量按指数增长\",{\"1\":{\"2726\":1}}],[\"如for\",{\"1\":{\"2726\":2}}],[\"如fileinputstream\",{\"1\":{\"1222\":1,\"2835\":1}}],[\"如斐波那契数列的迭代实现\",{\"1\":{\"2716\":1}}],[\"如哈希表的使用\",{\"1\":{\"2715\":1}}],[\"如keyset\",{\"1\":{\"2688\":1}}],[\"如kubernetes\",{\"1\":{\"1660\":1}}],[\"如锁粒度控制\",{\"1\":{\"2544\":1}}],[\"如定时执行的任务队列\",{\"1\":{\"2486\":1}}],[\"如queue\",{\"1\":{\"2463\":1}}],[\"如elementat\",{\"1\":{\"2454\":1}}],[\"如elasticsearch\",{\"1\":{\"1984\":1}}],[\"如eclipse\",{\"1\":{\"2452\":1}}],[\"如添加\",{\"1\":{\"2448\":1,\"2507\":1}}],[\"如配置信息\",{\"1\":{\"2395\":1}}],[\"如配置项\",{\"1\":{\"2358\":1}}],[\"如需存储可能为null的元素\",{\"1\":{\"2383\":1}}],[\"如需远程连接redis\",{\"1\":{\"1788\":1}}],[\"如实现队列\",{\"1\":{\"2354\":1}}],[\"如数据去重\",{\"1\":{\"2361\":1}}],[\"如数据存储\",{\"1\":{\"2354\":1}}],[\"如数据库表名\",{\"1\":{\"2311\":1}}],[\"如数据库更新\",{\"1\":{\"602\":1}}],[\"如五子棋\",{\"1\":{\"2177\":1}}],[\"如碰撞检测\",{\"1\":{\"2119\":1}}],[\"如对称加密\",{\"1\":{\"2119\":1}}],[\"如对hibernate\",{\"1\":{\"371\":1}}],[\"如位图\",{\"1\":{\"2119\":1}}],[\"如操作系统\",{\"1\":{\"2119\":1}}],[\"如opensips\",{\"1\":{\"3228\":1}}],[\"如outofmemoryerror\",{\"1\":{\"2925\":1}}],[\"如owasp\",{\"1\":{\"2067\":1}}],[\"如okhttp\",{\"0\":{\"494\":1}}],[\"如必须使用应严格过滤输入内容\",{\"1\":{\"2066\":1}}],[\"如bob的软电话\",{\"1\":{\"3182\":1}}],[\"如bcrypt\",{\"1\":{\"2068\":1}}],[\"如b\",{\"1\":{\"2050\":1}}],[\"如bufferedinputstream\",{\"1\":{\"1222\":1}}],[\"如protobuf\",{\"1\":{\"3091\":1}}],[\"如pandoc\",{\"1\":{\"1984\":1}}],[\"如public\",{\"1\":{\"724\":1}}],[\"如希望分析器运行更长时间\",{\"1\":{\"1739\":1}}],[\"如索引创建\",{\"1\":{\"1736\":1}}],[\"如有zip文件\",{\"1\":{\"1636\":1}}],[\"如无法访问进容器检查配置是否生效\",{\"1\":{\"1519\":1}}],[\"如无限递归\",{\"1\":{\"701\":1}}],[\"如上例\",{\"1\":{\"1405\":1}}],[\"如游戏服务器\",{\"1\":{\"1347\":1}}],[\"如为io流添加缓冲\",{\"1\":{\"1333\":1}}],[\"如字段名\",{\"1\":{\"1277\":1}}],[\"如前所述\",{\"1\":{\"1276\":1}}],[\"如聊天服务器\",{\"1\":{\"1238\":1,\"3130\":1}}],[\"如5mb\",{\"1\":{\"1238\":1}}],[\"如封装\",{\"1\":{\"1216\":1}}],[\"如吞吐量优先或响应时间优先\",{\"1\":{\"1154\":1}}],[\"如使用integer而非int\",{\"1\":{\"3028\":1}}],[\"如使用管道流\",{\"1\":{\"2897\":1}}],[\"如使用异或进行交换\",{\"1\":{\"2727\":1}}],[\"如使用apt在编译期处理注解生成代码\",{\"1\":{\"1082\":1}}],[\"如使用阿里云等云服务器时要注意此现象\",{\"1\":{\"173\":1}}],[\"如lru缓存\",{\"1\":{\"2637\":1}}],[\"如linkedblockingqueue的takelock和putlock\",{\"1\":{\"2519\":1}}],[\"如linkedlist\",{\"1\":{\"2478\":1}}],[\"如list而非list<\",{\"1\":{\"3028\":1}}],[\"如list\",{\"1\":{\"1198\":1,\"2520\":1}}],[\"如list<list<integer>>\",{\"1\":{\"2178\":1}}],[\"如list<\",{\"1\":{\"1066\":1}}],[\"如lpushlist1\",{\"1\":{\"140\":1}}],[\"如频繁full\",{\"1\":{\"818\":1,\"852\":1,\"886\":1,\"920\":1}}],[\"如两个对象互相引用但都不再被其他对象引用\",{\"1\":{\"761\":1}}],[\"如rt\",{\"1\":{\"742\":1}}],[\"如redis\",{\"1\":{\"3228\":1}}],[\"如readwritelock的读锁\",{\"1\":{\"638\":1}}],[\"如reentrantlock\",{\"1\":{\"638\":1}}],[\"如required\",{\"1\":{\"355\":1}}],[\"如concurrenthashmap早期版本\",{\"1\":{\"2519\":1}}],[\"如confluence\",{\"1\":{\"1984\":1}}],[\"如computeifabsent\",{\"1\":{\"2428\":1}}],[\"如copyonwritearrayset\",{\"1\":{\"2382\":1}}],[\"如copyonwritearraylist\",{\"1\":{\"2356\":1,\"2519\":1}}],[\"如code\",{\"1\":{\"724\":1,\"733\":1}}],[\"如cas\",{\"1\":{\"638\":1}}],[\"如动态代理\",{\"1\":{\"719\":1}}],[\"如动态生成类或框架使用不当\",{\"1\":{\"702\":1}}],[\"如几mb的数组\",{\"1\":{\"718\":1}}],[\"如长字符串\",{\"1\":{\"708\":1}}],[\"如内存泄漏或内存需求超过\",{\"1\":{\"700\":1}}],[\"如标记\",{\"1\":{\"698\":1}}],[\"如中断\",{\"1\":{\"649\":1}}],[\"如alice的软电话\",{\"1\":{\"3182\":1}}],[\"如add\",{\"1\":{\"2331\":1}}],[\"如arraylist\",{\"1\":{\"2156\":1}}],[\"如atomicinteger\",{\"1\":{\"646\":1,\"663\":1}}],[\"如actor模型\",{\"1\":{\"595\":1}}],[\"如sip扩展协议\",{\"1\":{\"3220\":1}}],[\"如socketread0\",{\"1\":{\"3096\":1}}],[\"如socketchannel\",{\"1\":{\"3079\":1}}],[\"如standardcharsets\",{\"1\":{\"2860\":1,\"2884\":1}}],[\"如string\",{\"1\":{\"1275\":1}}],[\"如submap\",{\"1\":{\"2671\":1}}],[\"如spring可以管理任何标注了\",{\"1\":{\"2992\":1}}],[\"如spring\",{\"1\":{\"1266\":1,\"2996\":1,\"3011\":1,\"3027\":1,\"3043\":1}}],[\"如spring的依赖注入\",{\"1\":{\"2973\":1,\"3143\":1}}],[\"如spring的\",{\"1\":{\"1065\":1,\"1071\":1,\"1072\":1}}],[\"如selector空轮询bug\",{\"1\":{\"1347\":1}}],[\"如select指令虽然不更改数据\",{\"1\":{\"140\":1}}],[\"如serial\",{\"1\":{\"765\":1,\"766\":1}}],[\"如synchronized和reentrantlock\",{\"1\":{\"638\":1}}],[\"如synchronized\",{\"1\":{\"638\":1}}],[\"如json框架\",{\"1\":{\"3006\":1}}],[\"如jackson\",{\"1\":{\"3085\":1}}],[\"如jain\",{\"1\":{\"1107\":1}}],[\"如javadoc\",{\"1\":{\"1984\":1}}],[\"如javac\",{\"1\":{\"735\":1}}],[\"如java\",{\"1\":{\"570\":1,\"595\":1}}],[\"如jdeprscan\",{\"1\":{\"570\":1}}],[\"如jdk动态代理\",{\"1\":{\"2992\":1}}],[\"如jdk8使用permsize\",{\"1\":{\"817\":1,\"851\":1,\"885\":1,\"919\":1}}],[\"如jdk\",{\"1\":{\"566\":1,\"724\":1}}],[\"如jdbc加载驱动时打破双亲委派\",{\"1\":{\"754\":1}}],[\"如jdbc\",{\"1\":{\"563\":1}}],[\"如jdbctemplate\",{\"1\":{\"371\":1,\"372\":1}}],[\"如io操作\",{\"1\":{\"2931\":1}}],[\"如io操作需要大量try\",{\"1\":{\"1254\":1}}],[\"如ioexception\",{\"1\":{\"2926\":1}}],[\"如iso\",{\"1\":{\"2884\":1}}],[\"如ip地址\",{\"1\":{\"2119\":1}}],[\"如i++\",{\"1\":{\"600\":1,\"665\":1}}],[\"如iterable\",{\"1\":{\"542\":1}}],[\"如invite\",{\"1\":{\"1092\":1}}],[\"如intellij\",{\"1\":{\"510\":1,\"1021\":1}}],[\"如insertmany\",{\"1\":{\"54\":1,\"94\":1}}],[\"如网络请求\",{\"1\":{\"529\":1}}],[\"如图片\",{\"1\":{\"1221\":1}}],[\"如图\",{\"1\":{\"459\":1}}],[\"如密码\",{\"1\":{\"410\":1}}],[\"如创建连接\",{\"1\":{\"373\":1}}],[\"如h2\",{\"1\":{\"2048\":1,\"2055\":1,\"2063\":1}}],[\"如http\",{\"1\":{\"1360\":1,\"1412\":1}}],[\"如hibernate\",{\"1\":{\"361\":1,\"2065\":1}}],[\"如hmset\",{\"1\":{\"211\":1}}],[\"如国际化支持\",{\"1\":{\"321\":1}}],[\"如日志收集\",{\"1\":{\"3130\":1}}],[\"如日志\",{\"1\":{\"311\":1,\"333\":1,\"342\":1,\"3009\":1,\"3152\":1}}],[\"如\",{\"1\":{\"264\":1,\"386\":1,\"1049\":1,\"1063\":2,\"1065\":1,\"1072\":3,\"1221\":1,\"1347\":1,\"1412\":2,\"1788\":1,\"1916\":1,\"2358\":1,\"2513\":1,\"2994\":1}}],[\"如能够有效避免过期时间集中\",{\"1\":{\"190\":1}}],[\"如能承受数分钟以内的数据丢失\",{\"1\":{\"142\":1}}],[\"如进行全量复制周期太长\",{\"1\":{\"166\":1}}],[\"如下命令\",{\"1\":{\"1781\":1}}],[\"如下\",{\"1\":{\"1402\":1}}],[\"如下代码是\",{\"1\":{\"283\":2}}],[\"如下图所示\",{\"1\":{\"182\":1}}],[\"如下图\",{\"1\":{\"160\":1}}],[\"如下所示\",{\"1\":{\"157\":1}}],[\"如不对称\",{\"1\":{\"2671\":1}}],[\"如不能达到内存清理的要求\",{\"1\":{\"156\":1}}],[\"如不能承受数分钟以内的数据丢失\",{\"1\":{\"142\":1}}],[\"如不然\",{\"1\":{\"125\":1}}],[\"如doctest\",{\"1\":{\"1984\":1}}],[\"如dubbo\",{\"1\":{\"1347\":1}}],[\"如default生命周期包含compile\",{\"1\":{\"940\":1}}],[\"如del\",{\"1\":{\"140\":1}}],[\"如dropdatabase\",{\"1\":{\"94\":1}}],[\"如何通过监控工具快速定位跨服务网络调用的性能瓶颈\",{\"1\":{\"3111\":1}}],[\"如何通过反射创建数组\",{\"0\":{\"1280\":1}}],[\"如何通过反射调用私有方法\",{\"0\":{\"1270\":1}}],[\"如何通过反射获取和设置私有字段的值\",{\"0\":{\"1269\":1}}],[\"如何防止反射机制被恶意利用来绕过访问控制\",{\"1\":{\"3011\":1}}],[\"如何保证异常信息在服务间传递的完整性和安全性\",{\"1\":{\"2960\":1}}],[\"如何重定向system\",{\"1\":{\"2909\":1}}],[\"如何检测一个文本文件的字符编码\",{\"1\":{\"2885\":1}}],[\"如何检测一个输入流是否支持mark\",{\"1\":{\"2849\":1}}],[\"如何使用java\",{\"1\":{\"2921\":1}}],[\"如何使用序列流实现多个文件的合并\",{\"1\":{\"2897\":1}}],[\"如何使用字节流实现文件的断点续传功能\",{\"1\":{\"2849\":1}}],[\"如何使用文件流实现大文件的复制\",{\"1\":{\"2837\":1}}],[\"如何理解泛型中的通配符\",{\"1\":{\"3029\":1}}],[\"如何理解\",{\"0\":{\"2754\":1}}],[\"如何评估一个系统的性能瓶颈并进行优化\",{\"0\":{\"2728\":1}}],[\"如何分析嵌套循环的时间复杂度\",{\"0\":{\"2726\":1}}],[\"如何利用linkedhashmap实现一个简单的fifo\",{\"1\":{\"2643\":1}}],[\"如何利用java\",{\"0\":{\"495\":1}}],[\"如何选择合适的并发集合\",{\"0\":{\"2542\":1}}],[\"如何选择合适的分片键\",{\"1\":{\"75\":1}}],[\"如何自己实现一个线程安全的list\",{\"1\":{\"2356\":1}}],[\"如何自定义拒绝策略\",{\"1\":{\"634\":1}}],[\"如何自定义一个enable注解\",{\"1\":{\"423\":1}}],[\"如何处理大型二维数组以提高性能\",{\"1\":{\"2182\":1}}],[\"如何将二维数组转换为一维数组\",{\"1\":{\"2182\":1}}],[\"如何找出数组中出现次数最多的元素\",{\"1\":{\"2160\":1}}],[\"如何找到两个字符串的最长公共前缀\",{\"1\":{\"1170\":1}}],[\"如何平衡代码中的注释数量\",{\"1\":{\"2095\":1}}],[\"如何平衡代码规范性和性能优化需求\",{\"1\":{\"2041\":1}}],[\"如何平衡服务粒度和系统复杂性\",{\"1\":{\"2014\":1}}],[\"如何确保不同团队遵循统一的编码规范\",{\"1\":{\"2029\":1}}],[\"如何确定当前显示的数据已经浏览完毕\",{\"1\":{\"1442\":1}}],[\"如何确定适合特定应用的参数配置\",{\"1\":{\"818\":1,\"852\":1,\"886\":1,\"920\":1}}],[\"如何编写一份良好的api文档\",{\"1\":{\"1953\":1}}],[\"如何用nginx解决前端跨域问题\",{\"0\":{\"1387\":1}}],[\"如何正确处理线程中的异常\",{\"1\":{\"1254\":1}}],[\"如何设计跨服务的异常处理策略\",{\"1\":{\"2960\":1}}],[\"如何设计一个支持百万级并发会话的sip服务器架构\",{\"0\":{\"3228\":1}}],[\"如何设计一个支持泛型的缓存框架\",{\"1\":{\"1304\":1}}],[\"如何设计一个基于注解的缓存框架\",{\"1\":{\"3170\":1}}],[\"如何设计一个低侵入式的java网络监控系统\",{\"1\":{\"3111\":1}}],[\"如何设计一个高性能的java网络服务器\",{\"1\":{\"3091\":1}}],[\"如何设计一个高效的反射缓存策略\",{\"1\":{\"3011\":1}}],[\"如何设计一个高效的文件上传系统\",{\"1\":{\"1238\":1}}],[\"如何设计一个自定义大小的缓冲区\",{\"1\":{\"2873\":1}}],[\"如何设计一个不可变对象\",{\"0\":{\"2779\":1}}],[\"如何设计一个良好的文档自动化工具\",{\"1\":{\"1992\":1}}],[\"如何设计一个良好的文档生态系统\",{\"1\":{\"1979\":1}}],[\"如何设计一个良好的文档管理体系\",{\"1\":{\"1966\":1}}],[\"如何设计一个能够支撑百万级并发连接的服务器架构\",{\"1\":{\"1347\":1}}],[\"如何设计自定义异常\",{\"0\":{\"1249\":1}}],[\"如何判断两个字符串是否互为变位词\",{\"1\":{\"1170\":1}}],[\"如何判断一个class文件是否被篡改过\",{\"1\":{\"738\":1}}],[\"如何顺时针螺旋遍历一个二维数组\",{\"1\":{\"1162\":1}}],[\"如何初始化一个int数组并进行遍历\",{\"1\":{\"1160\":1}}],[\"如何解决\",{\"1\":{\"2994\":1}}],[\"如何解决aba问题\",{\"1\":{\"1139\":1}}],[\"如何解决sip协议在移动网络环境下的可靠性问题\",{\"0\":{\"1114\":1}}],[\"如何解决maven中的依赖冲突\",{\"1\":{\"945\":1}}],[\"如何避免\",{\"1\":{\"2873\":1}}],[\"如何避免内存溢出和性能问题\",{\"1\":{\"2233\":1}}],[\"如何避免内存泄漏\",{\"1\":{\"618\":1}}],[\"如何避免死循环\",{\"1\":{\"2138\":1}}],[\"如何避免死锁\",{\"0\":{\"1128\":1}}],[\"如何避免虚假唤醒\",{\"1\":{\"1139\":1}}],[\"如何避免maven依赖冲突\",{\"1\":{\"1030\":1}}],[\"如何统一管理项目中的依赖版本\",{\"1\":{\"932\":1}}],[\"如何根据应用特点选择合适的垃圾收集器\",{\"1\":{\"818\":1,\"852\":1,\"886\":1,\"920\":1}}],[\"如何排查和解决jvm内存泄漏问题\",{\"1\":{\"784\":1}}],[\"如何合理配置线程池参数\",{\"1\":{\"602\":1}}],[\"如何充分利用npe增强特性改进代码质量\",{\"0\":{\"522\":1}}],[\"如何加载其他类中的bean\",{\"1\":{\"461\":1}}],[\"如何加密配置文件中的敏感信息\",{\"1\":{\"411\":1}}],[\"如何配置数据库连接池\",{\"1\":{\"445\":1}}],[\"如何实现矩阵乘法\",{\"1\":{\"2182\":1}}],[\"如何实现\",{\"1\":{\"1501\":1}}],[\"如何实现线程安全的hashmap\",{\"0\":{\"2429\":1}}],[\"如何实现线程安全\",{\"0\":{\"1125\":1}}],[\"如何实现线程池的动态参数调整\",{\"1\":{\"634\":1}}],[\"如何实现一个基于注解的权限验证框架\",{\"1\":{\"3154\":1}}],[\"如何实现一个简单的orm框架\",{\"1\":{\"3141\":1}}],[\"如何实现一个功能\",{\"1\":{\"2861\":1}}],[\"如何实现一个延迟队列\",{\"1\":{\"2588\":1}}],[\"如何实现一个支持动态修改优先级的优先级队列\",{\"1\":{\"2588\":1}}],[\"如何实现一个自定义的hashmap\",{\"1\":{\"2616\":1}}],[\"如何实现一个自定义的并发安全集合\",{\"0\":{\"2544\":1}}],[\"如何实现一个自定义的lru缓存\",{\"0\":{\"2427\":1}}],[\"如何实现一个自定义的线程安全且高性能的可变字符串类\",{\"1\":{\"2281\":1}}],[\"如何实现一个线程安全的weakhashmap\",{\"0\":{\"2697\":1}}],[\"如何实现一个线程安全的treemap\",{\"1\":{\"2672\":1}}],[\"如何实现一个线程安全的lru缓存\",{\"1\":{\"2643\":1}}],[\"如何实现一个线程安全的list\",{\"0\":{\"2356\":1}}],[\"如何实现一个线程安全的非阻塞队列\",{\"0\":{\"2485\":1},\"1\":{\"2564\":1}}],[\"如何实现一个线程安全的arraylist\",{\"0\":{\"2456\":1}}],[\"如何实现一个线程安全的hashset\",{\"0\":{\"2392\":1}}],[\"如何实现一个线程安全的hashmap\",{\"0\":{\"1197\":1}}],[\"如何实现一个通用的数组打印工具类\",{\"1\":{\"2233\":1}}],[\"如何实现一个高效的字符串反转算法\",{\"1\":{\"2206\":1}}],[\"如何实现一个动态数组\",{\"1\":{\"2160\":1}}],[\"如何实现一个注解处理器\",{\"0\":{\"1087\":1}}],[\"如何实现一个热部署类加载器\",{\"1\":{\"756\":1}}],[\"如何实现两个线程交替打印奇偶数\",{\"1\":{\"618\":1}}],[\"如何实现测试覆盖率的统计\",{\"1\":{\"456\":1}}],[\"如何实现基于jwt的认证\",{\"1\":{\"456\":1}}],[\"如何实现多数据源\",{\"1\":{\"445\":1}}],[\"如何实现文件上传\",{\"1\":{\"434\":1}}],[\"如何实现跨域访问\",{\"1\":{\"434\":1}}],[\"如何在treemap中实现自定义排序\",{\"1\":{\"2672\":1}}],[\"如何在运行时获取泛型的具体类型信息\",{\"1\":{\"1304\":1}}],[\"如何在不使用额外空间的情况下优化时间复杂度\",{\"0\":{\"2727\":1}}],[\"如何在不使用额外空间的情况下\",{\"1\":{\"1170\":1}}],[\"如何在java中实现一个简单的sip注册客户端\",{\"0\":{\"3199\":1}}],[\"如何在java中实现一个简单的http服务器\",{\"1\":{\"3070\":1}}],[\"如何在java\",{\"0\":{\"557\":1}}],[\"如何在springboot中实现配置的热更新\",{\"1\":{\"411\":1}}],[\"如何在mongodb中实现分页查询\",{\"1\":{\"54\":1}}],[\"如何给数据设置它的失效周期呢\",{\"1\":{\"148\":1}}],[\"如何安全地执行mongodb的危险命令\",{\"1\":{\"95\":1}}],[\"如何优化频繁异常场景的性能\",{\"1\":{\"2942\":1}}],[\"如何优化\",{\"0\":{\"1264\":1}}],[\"如何优化大型多模块项目的构建时间\",{\"1\":{\"967\":1}}],[\"如何优化redis的命令执行效率\",{\"1\":{\"212\":1}}],[\"如何优化mongodb的查询性能\",{\"1\":{\"95\":1}}],[\"如何优化聚合操作的性能\",{\"1\":{\"64\":1}}],[\"如果服务器要求\",{\"1\":{\"3199\":1}}],[\"如果既需要生产又需要消费\",{\"1\":{\"3041\":1}}],[\"如果只需要向集合中添加元素\",{\"1\":{\"3041\":1}}],[\"如果只需要从集合中获取元素\",{\"1\":{\"3041\":1}}],[\"如果单例bean已存在\",{\"1\":{\"2999\":1}}],[\"如果动态生成的代理类已经继承了proxy类\",{\"1\":{\"2994\":1}}],[\"如果读取文件时发生错误\",{\"1\":{\"2927\":1}}],[\"如果文件不存在\",{\"1\":{\"2927\":1}}],[\"如果缓冲区已读完\",{\"1\":{\"2873\":1}}],[\"如果缓存已满\",{\"1\":{\"2512\":1}}],[\"如果祖父类的方法被子类重写\",{\"1\":{\"2753\":1}}],[\"如果值对象很大且生命周期长\",{\"1\":{\"2693\":1}}],[\"如果值为null会抛出异常\",{\"1\":{\"554\":1}}],[\"如果键对象仍然被强引用\",{\"1\":{\"2691\":1}}],[\"如果键不存在或已被回收则返回null\",{\"1\":{\"2682\":1}}],[\"如果键已存在\",{\"1\":{\"2512\":1}}],[\"如果传入非2的幂次方的初始容量\",{\"1\":{\"2616\":2}}],[\"如果包含则返回true\",{\"1\":{\"2602\":1,\"2631\":1}}],[\"如果元素存在且移除成功则返回true\",{\"1\":{\"2602\":1,\"2631\":1}}],[\"如果元素不存在且添加成功则返回true\",{\"1\":{\"2602\":1,\"2631\":1,\"2658\":1}}],[\"如果大致知道元素数量\",{\"1\":{\"2587\":1}}],[\"如果大于0\",{\"1\":{\"1887\":1}}],[\"如果大于\",{\"1\":{\"784\":1}}],[\"如果初始容量小于1\",{\"1\":{\"2571\":1}}],[\"如果初始容量为负数\",{\"1\":{\"2436\":1}}],[\"如果括号匹配则返回true\",{\"1\":{\"2554\":1}}],[\"如果队列为空则返回null\",{\"1\":{\"2552\":1,\"2574\":1}}],[\"如果指定\",{\"1\":{\"3246\":1}}],[\"如果指定元素为null\",{\"1\":{\"2552\":1,\"2573\":1}}],[\"如果指定的集合为null\",{\"1\":{\"2436\":1,\"2493\":1}}],[\"如果栈为空\",{\"1\":{\"2551\":1}}],[\"如果还有前一个元素则返回true\",{\"1\":{\"2498\":1}}],[\"如果还有元素则返回true\",{\"1\":{\"2441\":1,\"2498\":2}}],[\"如果链表为空\",{\"1\":{\"2497\":4}}],[\"如果后继为null\",{\"1\":{\"2496\":1,\"2497\":1}}],[\"如果后端某个服务器宕机\",{\"1\":{\"1404\":1}}],[\"如果前驱为null\",{\"1\":{\"2496\":1,\"2497\":1}}],[\"如果pred为null\",{\"1\":{\"2494\":1}}],[\"如果ping运行正确\",{\"1\":{\"1917\":1}}],[\"如果原链表为空\",{\"1\":{\"2494\":1,\"2497\":1}}],[\"如果原仓库不可用\",{\"1\":{\"989\":1}}],[\"如果索引在0到size\",{\"1\":{\"2495\":1}}],[\"如果索引在0到size之间则返回true\",{\"1\":{\"2494\":1}}],[\"如果索引在后半部分\",{\"1\":{\"2495\":1}}],[\"如果索引在前半部分\",{\"1\":{\"2495\":1}}],[\"如果索引等于元素数量\",{\"1\":{\"2494\":1}}],[\"如果索引超出范围\",{\"1\":{\"2437\":1,\"2439\":4,\"2440\":1,\"2494\":2,\"2495\":3,\"2496\":1}}],[\"如果尾节点的next为null\",{\"1\":{\"2485\":1}}],[\"如果修改次数不匹配\",{\"1\":{\"2441\":1,\"2498\":1}}],[\"如果检测到并发修改\",{\"1\":{\"2441\":2,\"2498\":5}}],[\"如果检查到我们redis服务没有开启我们可以设置守护进程后台运行的方式将配置文件中的daemonize设置为yes\",{\"1\":{\"1786\":1}}],[\"如果列表包含指定元素则返回true\",{\"1\":{\"2440\":1,\"2496\":1}}],[\"如果所需容量超过max\",{\"1\":{\"2438\":1}}],[\"如果所需容量大于当前数组长度\",{\"1\":{\"2437\":1}}],[\"如果mincapacity超过integer\",{\"1\":{\"2438\":1}}],[\"如果master带宽不足\",{\"1\":{\"166\":1}}],[\"如果master数据量巨大\",{\"1\":{\"166\":1}}],[\"如果新容量超过最大数组容量\",{\"1\":{\"2438\":1}}],[\"如果新容量仍然小于所需容量\",{\"1\":{\"2438\":1}}],[\"如果equals返回false\",{\"1\":{\"2393\":1}}],[\"如果equals返回true\",{\"1\":{\"2393\":1}}],[\"如果同时修改集合结构\",{\"1\":{\"2382\":1}}],[\"如果用作队列\",{\"1\":{\"2351\":1}}],[\"如果用户是采用本地localhost或者sock连接数据库\",{\"1\":{\"115\":1}}],[\"如果用户的传输不是通过ssl的方式\",{\"1\":{\"114\":1}}],[\"如果常量池中已存在该字符串\",{\"1\":{\"2297\":1}}],[\"如果太高\",{\"1\":{\"1887\":1}}],[\"如果这个值大于0\",{\"1\":{\"1887\":2}}],[\"如果这个数值大于1\",{\"1\":{\"1884\":1}}],[\"如果这个数值过大\",{\"1\":{\"1884\":1}}],[\"如果运行队列过大\",{\"1\":{\"1887\":1}}],[\"如果显示的是逻辑设备的数据\",{\"1\":{\"1884\":1}}],[\"如果显式声明了某个版本\",{\"1\":{\"927\":1}}],[\"如果到达100\",{\"1\":{\"1884\":1}}],[\"如果多次可以加上\",{\"1\":{\"1877\":1}}],[\"如果多个直接依赖引入了同一个库的不同版本\",{\"1\":{\"1010\":1}}],[\"如果第五域有user则输出该行\",{\"1\":{\"1872\":1}}],[\"如果做性能测试\",{\"1\":{\"1867\":1}}],[\"如果要安装其他模块支持执行\",{\"1\":{\"1779\":1}}],[\"如果系统之前⾃带\",{\"1\":{\"1765\":1}}],[\"如果开启了分析器而system\",{\"1\":{\"1739\":1}}],[\"如果开启了nginx先进入sbin中停掉nginx服务\",{\"1\":{\"1416\":1}}],[\"如果安装过程出现意外需要回滚\",{\"1\":{\"1634\":1,\"1638\":1}}],[\"如果安装mysql57时没有运行过mysql\",{\"1\":{\"116\":1}}],[\"如果一个类被不同的类加载器加载\",{\"1\":{\"2975\":1}}],[\"如果一个节点是红色\",{\"1\":{\"2650\":1}}],[\"如果一定要部署\",{\"1\":{\"1632\":1}}],[\"如果一轮中删除的key的数量≤w\",{\"1\":{\"153\":1}}],[\"如果一轮中删除的key的数量>w\",{\"1\":{\"153\":1}}],[\"如果现在不设置\",{\"1\":{\"1632\":1}}],[\"如果现在我要你给我保存一组数据的话\",{\"1\":{\"137\":1}}],[\"如果挂了总是会重启\",{\"1\":{\"1530\":1}}],[\"如果操作系统版本不是很新不要安装最新版本docker\",{\"1\":{\"1507\":1}}],[\"如果操作的数据量过大\",{\"1\":{\"63\":1}}],[\"如果提示未安装请自行安装\",{\"1\":{\"1504\":1}}],[\"如果在\",{\"1\":{\"1503\":1}}],[\"如果在通过supplier生成新值时发生异常\",{\"1\":{\"283\":1}}],[\"如果点击的是next\",{\"1\":{\"1444\":1}}],[\"如果点击的是prev\",{\"1\":{\"1444\":1}}],[\"如果访问的ip地址为192\",{\"1\":{\"1410\":1}}],[\"如果令牌消耗速率小于生产令牌的速度\",{\"1\":{\"1400\":1}}],[\"如果水流过大也就是突发流量过大就会直接溢出\",{\"1\":{\"1399\":1}}],[\"如果突发流量超出请求被拒绝处理\",{\"1\":{\"1396\":1}}],[\"如果nginx这时还有别人的请求没有处理完\",{\"1\":{\"1395\":1}}],[\"如果a为false\",{\"1\":{\"2119\":1}}],[\"如果a服务需要依赖b服务启动\",{\"1\":{\"1368\":1}}],[\"如果activeexpirecycle\",{\"1\":{\"153\":1}}],[\"如果消息内容已读取完成\",{\"1\":{\"1325\":1}}],[\"如果长度字段已读取完成\",{\"1\":{\"1325\":1}}],[\"如果类的结构发生变化\",{\"1\":{\"1277\":1}}],[\"如果存在则替换值\",{\"1\":{\"2683\":1}}],[\"如果存在相等的相邻元素\",{\"1\":{\"1170\":1}}],[\"如果存在问题\",{\"1\":{\"1004\":1}}],[\"如果条件不满足\",{\"1\":{\"1139\":1}}],[\"如果条件允许\",{\"1\":{\"189\":1}}],[\"如果两个依赖的路径长度相同\",{\"1\":{\"1015\":1}}],[\"如果依赖路径长度相同\",{\"1\":{\"927\":1}}],[\"如果项目a依赖项目b\",{\"1\":{\"926\":1}}],[\"如果项目已经使用了第三方http客户端且工作良好\",{\"1\":{\"494\":1}}],[\"如果允许外部类使用protected\",{\"1\":{\"2802\":1}}],[\"如果允许\",{\"1\":{\"784\":1}}],[\"如果小于\",{\"1\":{\"784\":1}}],[\"如果为null则删除null元素\",{\"1\":{\"2440\":1,\"2496\":1}}],[\"如果为null会抛出nosuchelementexception\",{\"1\":{\"544\":1}}],[\"如果为空\",{\"1\":{\"1440\":2}}],[\"如果为分区函数选择了二进制校对\",{\"1\":{\"125\":1}}],[\"如果追求更高的性能和更简洁的并发编程模型\",{\"1\":{\"533\":1}}],[\"如果团队熟悉java线程模型且需要兼容现有代码\",{\"1\":{\"533\":1}}],[\"如果username后续被意外设为null\",{\"1\":{\"521\":1}}],[\"如果是invite的2xx响应\",{\"1\":{\"3208\":1}}],[\"如果是使用无参构造创建的空数组\",{\"1\":{\"2437\":1}}],[\"如果是则递归调用\",{\"1\":{\"2234\":1}}],[\"如果是\",{\"1\":{\"1879\":1}}],[\"如果是运行在32bit下也不代表cpu不支持64bit\",{\"1\":{\"1838\":1}}],[\"如果是云服务器\",{\"1\":{\"1576\":1}}],[\"如果是谷歌浏览器返回500\",{\"1\":{\"1411\":1}}],[\"如果是私有成员\",{\"1\":{\"1263\":1}}],[\"如果是新项目或希望减少依赖\",{\"1\":{\"494\":1}}],[\"如果是slave\",{\"1\":{\"112\":1}}],[\"如果有env\",{\"1\":{\"3246\":1}}],[\"如果有其他引用\",{\"1\":{\"2508\":1}}],[\"如果有错\",{\"1\":{\"1504\":1}}],[\"如果有出现红框中的信息\",{\"1\":{\"1416\":1}}],[\"如果有一个服务器宕机\",{\"1\":{\"1377\":1}}],[\"如果有\",{\"1\":{\"738\":1,\"1463\":1,\"2393\":1}}],[\"如果有值则返回\",{\"1\":{\"544\":3}}],[\"如果有值则消费\",{\"1\":{\"544\":1}}],[\"如果有加载该全路径类名\",{\"1\":{\"459\":1}}],[\"如果有对应的key且value有值\",{\"1\":{\"283\":1}}],[\"如果被\",{\"1\":{\"459\":1}}],[\"如果当前大小超过容量则返回true\",{\"1\":{\"2632\":1}}],[\"如果当前要部署的服务是springcloud\",{\"1\":{\"1559\":1}}],[\"如果当前值为expect\",{\"1\":{\"675\":1}}],[\"如果当前有事务\",{\"1\":{\"359\":6}}],[\"如果当前没有事务\",{\"1\":{\"359\":4}}],[\"如果携带\",{\"1\":{\"306\":1}}],[\"如果\",{\"1\":{\"306\":3}}],[\"如果此参数为null\",{\"1\":{\"283\":1}}],[\"如果没有创建则自动创建\",{\"1\":{\"3246\":1}}],[\"如果没有事务注解\",{\"1\":{\"3005\":1}}],[\"如果没有注解\",{\"1\":{\"3002\":1}}],[\"如果没有则返回null\",{\"1\":{\"2683\":1}}],[\"如果没有则新建\",{\"1\":{\"1841\":1}}],[\"如果没有下一个元素\",{\"1\":{\"2441\":1,\"2498\":2}}],[\"如果没有更多元素\",{\"1\":{\"2441\":1,\"2498\":2}}],[\"如果没有\",{\"1\":{\"2393\":1}}],[\"如果没有文档自动化工具\",{\"1\":{\"1992\":1}}],[\"如果没有文档生态系统\",{\"1\":{\"1979\":1}}],[\"如果没有文档管理体系\",{\"1\":{\"1966\":1}}],[\"如果没有api文档\",{\"1\":{\"1953\":1}}],[\"如果没有样式类名\",{\"1\":{\"1463\":1}}],[\"如果没有交换\",{\"1\":{\"1161\":1,\"2709\":1}}],[\"如果没有对应的key\",{\"1\":{\"283\":1}}],[\"如果没有group\",{\"1\":{\"125\":1}}],[\"如果已过期则删除\",{\"1\":{\"212\":1}}],[\"如果其中一个命令失败\",{\"1\":{\"211\":1}}],[\"如果删除的节点是master\",{\"1\":{\"186\":1}}],[\"如果redis的master宕机了\",{\"1\":{\"176\":1}}],[\"如果somemethod内部发生npe\",{\"1\":{\"519\":1}}],[\"如果slave延迟过大\",{\"1\":{\"173\":1}}],[\"如果select正常\",{\"1\":{\"125\":1}}],[\"如果想两次操作均对同一台服务器进行\",{\"1\":{\"167\":1}}],[\"如果内存不满足新\",{\"1\":{\"156\":1}}],[\"如果内存不足怎么办\",{\"1\":{\"156\":1}}],[\"如果key超时\",{\"1\":{\"153\":1}}],[\"如果未实现comparable接口且未提供comparator\",{\"1\":{\"2388\":1}}],[\"如果未初始化子数组就访问元素\",{\"1\":{\"2180\":1}}],[\"如果未过期\",{\"1\":{\"152\":1}}],[\"如果未出现内存溢出\",{\"1\":{\"125\":1}}],[\"如果你是四核的机器\",{\"1\":{\"1493\":1}}],[\"如果你是一个新手\",{\"1\":{\"12\":1}}],[\"如果你不想将用户id和密码放在kibana\",{\"1\":{\"1358\":1}}],[\"如果你使用的是nvm\",{\"1\":{\"266\":1}}],[\"如果你已经安装了n\",{\"1\":{\"266\":1}}],[\"如果你还没有安装homebrew\",{\"1\":{\"264\":1}}],[\"如果你要使用的是word\",{\"1\":{\"136\":1}}],[\"如果你用的是笔记本电脑还好\",{\"1\":{\"136\":1}}],[\"如果不是\",{\"1\":{\"3246\":1}}],[\"如果不是程序内存泄露的原因\",{\"1\":{\"1887\":1}}],[\"如果不需要弱引用特性\",{\"1\":{\"2692\":1}}],[\"如果不等\",{\"1\":{\"2444\":1}}],[\"如果不指定\",{\"1\":{\"1635\":1}}],[\"如果不指定事件名称\",{\"1\":{\"1451\":1}}],[\"如果不为空\",{\"1\":{\"1440\":2}}],[\"如果不想引入某个传递依赖\",{\"1\":{\"928\":1}}],[\"如果不想自己写\",{\"1\":{\"130\":1}}],[\"如果不允许\",{\"1\":{\"784\":1}}],[\"如果不存在返回null\",{\"1\":{\"2512\":2}}],[\"如果不存在\",{\"1\":{\"283\":3,\"1166\":1,\"2297\":1}}],[\"如果不存在则创建\",{\"1\":{\"80\":1,\"2525\":1}}],[\"如果不成功则反复执行\",{\"1\":{\"156\":1}}],[\"如果更新了非事务性表\",{\"1\":{\"125\":1}}],[\"如果发生未预料的从服务器mysqld重启\",{\"1\":{\"125\":1}}],[\"如果启动了具备ssl功能的mysql\",{\"1\":{\"125\":1}}],[\"如果需要在运行时解析注解\",{\"1\":{\"3140\":1}}],[\"如果需要高性能的大容量弱引用映射\",{\"1\":{\"2696\":1}}],[\"如果需要最新数据\",{\"1\":{\"2537\":1}}],[\"如果需要随机访问\",{\"1\":{\"2505\":1}}],[\"如果需要更多空间预分配\",{\"1\":{\"2455\":1}}],[\"如果需要频繁添加大量元素\",{\"1\":{\"2355\":1}}],[\"如果需要恢复到传统的npe消息格式\",{\"1\":{\"508\":1}}],[\"如果需要禁用用户\",{\"1\":{\"304\":1}}],[\"如果需要为null的关键字\",{\"1\":{\"125\":1}}],[\"如果需要\",{\"1\":{\"125\":1}}],[\"如果客户端连接服务器获取数据不是使用ssl连接\",{\"1\":{\"114\":1}}],[\"如计数\",{\"1\":{\"60\":1}}],[\"如分组\",{\"1\":{\"56\":1}}],[\"如$set\",{\"1\":{\"49\":1}}],[\"如读写关注级别\",{\"1\":{\"43\":1}}],[\"关联分析错误日志和慢请求日志\",{\"1\":{\"3111\":1}}],[\"关联日志与追踪id\",{\"1\":{\"3110\":1}}],[\"关机\",{\"1\":{\"1837\":1}}],[\"关键代码示例\",{\"1\":{\"3199\":1}}],[\"关键头域说明\",{\"1\":{\"3180\":1}}],[\"关键实现\",{\"1\":{\"3111\":1}}],[\"关键技术点有哪些\",{\"1\":{\"3111\":1}}],[\"关键网络调用必须添加追踪埋点\",{\"1\":{\"3110\":1}}],[\"关键优化点有哪些\",{\"1\":{\"3091\":1}}],[\"关键数据写入后调用force\",{\"1\":{\"2920\":1}}],[\"关键特性\",{\"1\":{\"2287\":1,\"3106\":1}}],[\"关键指标监控\",{\"0\":{\"2026\":1},\"1\":{\"3091\":1}}],[\"关键在于判断异常是否可恢复以及是否需要强制处理\",{\"1\":{\"1244\":1}}],[\"关键要点\",{\"1\":{\"1160\":1,\"1161\":1,\"1162\":1,\"1165\":1,\"1166\":1,\"2831\":1,\"2832\":1,\"2833\":1}}],[\"关键考点\",{\"1\":{\"1064\":1}}],[\"关键参数\",{\"1\":{\"1064\":1}}],[\"关键是确保旧的类加载器和类实例可以被gc回收\",{\"1\":{\"756\":1}}],[\"关键字分类与特性\",{\"0\":{\"2806\":1}}],[\"关键字存储等\",{\"1\":{\"2361\":1}}],[\"关键字误用\",{\"1\":{\"2084\":1,\"2813\":1}}],[\"关键字数量控制在合理范围内\",{\"1\":{\"2083\":1}}],[\"关键字是java语言中具有特殊含义的保留单词\",{\"1\":{\"2074\":1}}],[\"关键字使用误区\",{\"0\":{\"1051\":1}}],[\"关键字应用场景\",{\"0\":{\"1036\":1}}],[\"关键字的含义和用法保持一致\",{\"1\":{\"2083\":1}}],[\"关键字的底层实现\",{\"0\":{\"662\":1}}],[\"关键字的内存语义\",{\"0\":{\"655\":1}}],[\"关键字\",{\"0\":{\"652\":1,\"2073\":1,\"2803\":1},\"1\":{\"1034\":1,\"1125\":2,\"3246\":1}}],[\"关键点\",{\"1\":{\"293\":1,\"1108\":1}}],[\"关注的事件类型\",{\"1\":{\"3118\":1}}],[\"关注接受连接事件\",{\"1\":{\"2916\":1}}],[\"关注回复\",{\"1\":{\"1851\":1}}],[\"关注本质\",{\"1\":{\"1206\":1}}],[\"关注瓶颈\",{\"1\":{\"818\":1,\"852\":1,\"886\":1,\"920\":1}}],[\"关注吞吐量\",{\"1\":{\"769\":1}}],[\"关注\",{\"1\":{\"566\":1}}],[\"关注点分离\",{\"1\":{\"550\":1,\"2859\":1,\"2958\":1,\"3152\":1}}],[\"关注点在数据的操作过程\",{\"1\":{\"137\":1}}],[\"关注点在数据\",{\"1\":{\"137\":1}}],[\"关系运算符用于比较两个值的关系\",{\"1\":{\"2110\":1}}],[\"关系运算符\",{\"0\":{\"2110\":1}}],[\"关系\",{\"1\":{\"1216\":1,\"1885\":1,\"2748\":2}}],[\"关系到是否进行碎片整理\",{\"1\":{\"193\":1}}],[\"关系型数据库适合处理结构化数据\",{\"1\":{\"43\":1}}],[\"关于内核种类\",{\"1\":{\"1472\":1}}],[\"关于\",{\"1\":{\"125\":2}}],[\"关于这些扩展\",{\"1\":{\"15\":1}}],[\"关闭k8s集群节点swap\",{\"1\":{\"3270\":1}}],[\"关闭swap\",{\"0\":{\"3270\":1}}],[\"关闭slave\",{\"1\":{\"103\":1,\"111\":1}}],[\"关闭执行器服务\",{\"1\":{\"3217\":1}}],[\"关闭速率\",{\"1\":{\"3111\":1}}],[\"关闭资源\",{\"1\":{\"3065\":2}}],[\"关闭资源使用try\",{\"1\":{\"2040\":1}}],[\"关闭通道\",{\"1\":{\"3117\":1}}],[\"关闭通道后映射内存依然可访问\",{\"1\":{\"2920\":1}}],[\"关闭通道前未确保缓冲区数据已写入\",{\"1\":{\"2920\":1}}],[\"关闭打印流会自动关闭其包装的底层输出流\",{\"1\":{\"2908\":1}}],[\"关闭外层缓冲流会自动关闭内层被包装的流\",{\"1\":{\"2872\":1}}],[\"关闭此输出流并释放相关资源\",{\"1\":{\"2842\":1,\"2854\":1}}],[\"关闭此输入流并释放相关资源\",{\"1\":{\"2841\":1,\"2853\":1}}],[\"关闭流操作应放在finally块中\",{\"1\":{\"2836\":1}}],[\"关闭流资源\",{\"1\":{\"2831\":1,\"2843\":1}}],[\"关闭流失败\",{\"1\":{\"1044\":1}}],[\"关闭等关键事件\",{\"1\":{\"2070\":1}}],[\"关闭自动重启\",{\"0\":{\"1796\":1},\"1\":{\"3245\":1}}],[\"关闭防火墙\",{\"1\":{\"1788\":1}}],[\"关闭防火墙即可\",{\"1\":{\"1788\":1}}],[\"关闭redis\",{\"1\":{\"1780\":1}}],[\"关闭linux系统防火墙\",{\"0\":{\"1776\":1}}],[\"关闭服务器\",{\"1\":{\"3218\":1}}],[\"关闭服务\",{\"1\":{\"1504\":1}}],[\"关闭顺序应与创建顺序相反\",{\"1\":{\"2848\":1}}],[\"关闭顺序\",{\"1\":{\"1368\":1}}],[\"关闭连接池\",{\"1\":{\"1326\":1}}],[\"关闭连接\",{\"1\":{\"1326\":1,\"3070\":1}}],[\"关闭连接等\",{\"1\":{\"373\":1}}],[\"关闭访问检查\",{\"1\":{\"1264\":1,\"2986\":1}}],[\"关闭线程池并等待完成\",{\"1\":{\"2522\":1}}],[\"关闭线程池\",{\"1\":{\"1135\":1,\"2523\":1}}],[\"关闭完成\",{\"1\":{\"125\":1}}],[\"关闭\",{\"1\":{\"125\":1,\"1876\":1}}],[\"关闭并删除mysql服务\",{\"0\":{\"119\":1}}],[\"关闭mysql服务\",{\"1\":{\"116\":1}}],[\"关闭会话\",{\"1\":{\"91\":1}}],[\"注释的数量应该适中\",{\"1\":{\"2095\":1}}],[\"注释是代码的\",{\"1\":{\"2095\":1}}],[\"注释是java代码中不可或缺的一部分\",{\"1\":{\"2087\":1}}],[\"注释应该提供额外的信息\",{\"1\":{\"2094\":1}}],[\"注释不会影响代码的执行\",{\"1\":{\"2093\":1}}],[\"注释\",{\"0\":{\"2086\":1}}],[\"注释规范\",{\"0\":{\"2034\":1}}],[\"注释掉htps的配置内容\",{\"1\":{\"3263\":1}}],[\"注释掉\",{\"1\":{\"1788\":1}}],[\"注释掉即可\",{\"1\":{\"1664\":1}}],[\"注释之前的内容被视为文章摘要\",{\"1\":{\"27\":1}}],[\"注入依赖\",{\"1\":{\"1266\":1}}],[\"注入的对象\",{\"1\":{\"282\":1}}],[\"注册有效期\",{\"1\":{\"3199\":1}}],[\"注册有有效期\",{\"1\":{\"3199\":1}}],[\"注册流程\",{\"0\":{\"3187\":1}}],[\"注册服务器等\",{\"1\":{\"3192\":1}}],[\"注册服务器更新位置服务数据库\",{\"1\":{\"3187\":1}}],[\"注册服务器验证用户身份\",{\"1\":{\"3187\":1}}],[\"注册服务器接收并处理register请求\",{\"1\":{\"3184\":1}}],[\"注册服务器\",{\"0\":{\"3184\":1}}],[\"注册可读事件\",{\"1\":{\"3118\":1}}],[\"注册bean定义\",{\"1\":{\"2999\":2}}],[\"注册接受事件\",{\"1\":{\"2921\":1}}],[\"注册接受连接事件\",{\"1\":{\"1228\":1,\"3118\":1}}],[\"注册通道到选择器\",{\"1\":{\"2916\":2}}],[\"注册\",{\"1\":{\"1431\":1,\"1433\":1,\"1434\":1,\"1435\":1}}],[\"注册read事件\",{\"1\":{\"1315\":1}}],[\"注册accept事件\",{\"1\":{\"1315\":1}}],[\"注册读事件和处理器\",{\"1\":{\"2921\":1}}],[\"注册读事件\",{\"1\":{\"1228\":1,\"2916\":1}}],[\"注册jira账号\",{\"0\":{\"991\":1}}],[\"注册账号\",{\"1\":{\"990\":1}}],[\"注册监听器但未注销\",{\"1\":{\"781\":1}}],[\"注解滥用\",{\"1\":{\"3169\":1}}],[\"注解实践体现了多种设计模式和编程思想\",{\"1\":{\"3168\":1}}],[\"注解驱动的测试框架\",{\"0\":{\"3166\":1}}],[\"注解技术极大提升了开发效率和代码质量\",{\"1\":{\"3156\":1}}],[\"注解设计体现了java的\",{\"1\":{\"3152\":1}}],[\"注解与反射的性能影响\",{\"0\":{\"3150\":1}}],[\"注解与xml配置相比有哪些优缺点\",{\"0\":{\"1086\":1}}],[\"注解在现代java开发中应用广泛\",{\"1\":{\"3156\":1}}],[\"注解在实践中的应用\",{\"0\":{\"3155\":1}}],[\"注解在编译期有两种处理方式\",{\"1\":{\"3146\":1}}],[\"注解在编译后会生成class文件\",{\"1\":{\"3145\":1}}],[\"注解在框架开发中扮演关键角色\",{\"1\":{\"3143\":1}}],[\"注解本质是一种特殊的接口\",{\"1\":{\"3143\":1}}],[\"注解本质是继承java\",{\"1\":{\"1063\":1}}],[\"注解继承陷阱\",{\"1\":{\"3153\":1}}],[\"注解继承\",{\"1\":{\"3140\":1}}],[\"注解体现了java的元数据编程思想\",{\"1\":{\"3139\":1}}],[\"注解体现了元数据驱动开发\",{\"1\":{\"1071\":1}}],[\"注解元素必须提供默认值\",{\"1\":{\"3140\":1}}],[\"注解元素默认值\",{\"1\":{\"3140\":1}}],[\"注解元素\",{\"1\":{\"3134\":1}}],[\"注解名即可\",{\"1\":{\"3134\":1}}],[\"注解通过\",{\"1\":{\"3134\":1}}],[\"注解不会直接影响代码的执行\",{\"1\":{\"3132\":1}}],[\"注解基础\",{\"0\":{\"3131\":1}}],[\"注解处理逻辑需要充分测试\",{\"1\":{\"3169\":1}}],[\"注解处理器\",{\"1\":{\"3002\":1,\"3162\":1}}],[\"注解处理\",{\"1\":{\"2996\":1}}],[\"注解等\",{\"1\":{\"2968\":1,\"2992\":1}}],[\"注解表达能力有限\",{\"1\":{\"1086\":1}}],[\"注解属性没有默认值且使用时未指定\",{\"1\":{\"1079\":1}}],[\"注解属性默认值问题\",{\"0\":{\"1079\":1}}],[\"注解标记替代xml配置\",{\"1\":{\"1074\":1}}],[\"注解是\",{\"1\":{\"1074\":1}}],[\"注解是java面试中的高频考点\",{\"1\":{\"1061\":1}}],[\"注解常与aop结合实现横切关注点\",{\"1\":{\"1072\":1}}],[\"注解使代码具有自解释性\",{\"1\":{\"1071\":1}}],[\"注解的运行时解析机制\",{\"0\":{\"3149\":1}}],[\"注解的编译期处理\",{\"0\":{\"3146\":1}}],[\"注解的属性在编译时会被转换为接口方法\",{\"1\":{\"3145\":1}}],[\"注解的底层实现原理\",{\"0\":{\"3145\":1}}],[\"注解的定义与使用\",{\"0\":{\"3134\":1}}],[\"注解的缺点\",{\"1\":{\"1086\":1}}],[\"注解的优点\",{\"1\":{\"1086\":1}}],[\"注解的生命周期\",{\"0\":{\"1065\":1}}],[\"注解的本质与分类\",{\"0\":{\"1063\":1}}],[\"注解原理\",{\"1\":{\"1034\":1}}],[\"注解\",{\"0\":{\"1060\":1,\"3333\":1},\"1\":{\"574\":1,\"3132\":1}}],[\"注解被\",{\"1\":{\"463\":1}}],[\"注解用于动态加载bean\",{\"1\":{\"417\":1,\"461\":1}}],[\"注\",{\"1\":{\"113\":1}}],[\"注意flip\",{\"1\":{\"3090\":1}}],[\"注意线程安全\",{\"1\":{\"2942\":1}}],[\"注意线程池的配置\",{\"1\":{\"1138\":1}}],[\"注意包装类型的null值处理\",{\"1\":{\"2776\":1}}],[\"注意处理并发修改和快速失败机制\",{\"1\":{\"2588\":1}}],[\"注意处理单行或单列的特殊情况\",{\"1\":{\"1162\":1}}],[\"注意switch\",{\"1\":{\"2137\":1}}],[\"注意循环的边界条件\",{\"1\":{\"2137\":1}}],[\"注意循环条件\",{\"1\":{\"2137\":1}}],[\"注意不同jdk版本对注解特性的支持差异\",{\"1\":{\"3169\":1}}],[\"注意不同java版本中关键字的变化\",{\"1\":{\"2084\":1}}],[\"注意不同操作系统换行符的差异\",{\"1\":{\"2860\":1}}],[\"注意不同类型之间的运算可能导致的类型转换问题\",{\"1\":{\"2118\":1}}],[\"注意算术运算可能导致的溢出问题\",{\"1\":{\"2118\":1}}],[\"注意逻辑运算符的短路特性\",{\"1\":{\"2118\":1}}],[\"注意运算符的优先级\",{\"1\":{\"2118\":1}}],[\"注意整数除法会截断小数部分\",{\"1\":{\"2118\":1}}],[\"注意整数类型的范围\",{\"1\":{\"2104\":1}}],[\"注意自动装箱\",{\"1\":{\"2104\":1}}],[\"注意自己所处的目录\",{\"1\":{\"1786\":1}}],[\"注意浮点类型的精度限制\",{\"1\":{\"2104\":1}}],[\"注意redis\",{\"1\":{\"1786\":1}}],[\"注意环境变量需要自己在保存后的面板上\",{\"1\":{\"1707\":1}}],[\"注意修改\",{\"1\":{\"1685\":1,\"1688\":1,\"1713\":1}}],[\"注意挂载的my\",{\"1\":{\"1576\":1}}],[\"注意事项及编程最佳实践\",{\"1\":{\"2804\":1}}],[\"注意事项\",{\"0\":{\"1472\":1},\"1\":{\"1945\":1,\"2358\":1,\"2513\":1}}],[\"注意事务的隔离级别和传播行为的选择\",{\"1\":{\"358\":1}}],[\"注意事务的边界\",{\"1\":{\"358\":1,\"372\":1}}],[\"注意其版本兼容性\",{\"1\":{\"1277\":1}}],[\"注意关闭资源\",{\"1\":{\"1154\":1}}],[\"注意可见性问题\",{\"1\":{\"1138\":1}}],[\"注意nio直接内存使用\",{\"1\":{\"718\":1}}],[\"注意threadlocal的使用\",{\"1\":{\"532\":1}}],[\"注意日志系统对npe消息的处理\",{\"0\":{\"518\":1}}],[\"注意拦截器的执行顺序\",{\"1\":{\"386\":1}}],[\"注意请求映射的精度\",{\"1\":{\"386\":1}}],[\"注意连接池的配置\",{\"1\":{\"372\":1}}],[\"注意通知的执行顺序\",{\"1\":{\"343\":1}}],[\"注意切点表达式的精度\",{\"1\":{\"343\":1}}],[\"注意bean的作用域\",{\"1\":{\"330\":1}}],[\"注意版本兼容性问题\",{\"1\":{\"316\":1}}],[\"注意要在启动类扫描这个class\",{\"1\":{\"267\":1}}],[\"注意使用树状结构时\",{\"1\":{\"166\":1}}],[\"注意是value那一部分是一个字符串\",{\"1\":{\"132\":1}}],[\"注意初始化后你的数据库相当于重置了\",{\"1\":{\"121\":1}}],[\"注意\",{\"1\":{\"115\":1,\"118\":1,\"121\":1,\"138\":1,\"142\":2,\"156\":1,\"157\":1,\"177\":1,\"185\":1,\"186\":2,\"191\":1,\"219\":1,\"999\":2,\"1392\":1,\"1417\":1,\"1499\":1,\"1528\":1,\"1654\":1,\"1656\":1,\"1697\":1,\"1704\":1,\"1737\":1,\"1738\":2,\"1925\":1,\"2101\":1,\"2357\":1,\"2508\":1,\"2741\":1,\"2797\":1}}],[\"注意master\",{\"1\":{\"102\":1,\"110\":1}}],[\"注意聚合操作的内存限制\",{\"1\":{\"63\":1}}],[\"注意数据一致性问题\",{\"1\":{\"42\":1}}],[\"避免内核态到用户态的数据拷贝\",{\"1\":{\"3130\":1}}],[\"避免内存泄漏\",{\"0\":{\"781\":1},\"1\":{\"756\":1,\"1154\":1,\"2675\":1,\"3007\":1,\"3011\":1}}],[\"避免内存碎片\",{\"1\":{\"720\":1}}],[\"避免内存溢出\",{\"1\":{\"94\":1,\"211\":1,\"271\":1,\"1154\":1,\"2355\":1}}],[\"避免记录敏感信息\",{\"1\":{\"3110\":1}}],[\"避免监控工具本身成为系统瓶颈\",{\"1\":{\"3110\":1}}],[\"避免程序无限阻塞\",{\"1\":{\"3069\":1}}],[\"避免整个应用崩溃\",{\"1\":{\"3010\":1}}],[\"避免反射对象的重复创建\",{\"1\":{\"3010\":1}}],[\"避免暴露敏感信息\",{\"1\":{\"2974\":1}}],[\"避免单个异常导致整个操作失败\",{\"1\":{\"2953\":1}}],[\"避免单个文件过大\",{\"1\":{\"2072\":1}}],[\"避免模糊不清的描述\",{\"1\":{\"2947\":1}}],[\"避免捕获exception基类\",{\"1\":{\"2930\":1}}],[\"避免捕获通用异常\",{\"1\":{\"2037\":1}}],[\"避免组合过多流导致的性能开销\",{\"1\":{\"2896\":1}}],[\"避免组合空的输入流\",{\"1\":{\"2896\":1}}],[\"避免\",{\"1\":{\"2873\":5}}],[\"避免一次性读取全部内容到内存\",{\"1\":{\"2860\":1}}],[\"避免一次性加载整个文件到内存\",{\"1\":{\"1238\":1}}],[\"避免继承\",{\"1\":{\"2825\":1}}],[\"避免常见误区\",{\"1\":{\"3031\":1}}],[\"避免常见的使用误区\",{\"1\":{\"2284\":1}}],[\"避免常量值错误赋值\",{\"1\":{\"2819\":1}}],[\"避免外部直接访问和修改\",{\"1\":{\"2795\":1}}],[\"避免传递不需要修改的对象\",{\"1\":{\"2788\":1}}],[\"避免传统poi的内存问题\",{\"1\":{\"277\":1}}],[\"避免类级别定义仅方法内使用的变量\",{\"1\":{\"2774\":1,\"2777\":1}}],[\"避免类的重复加载\",{\"1\":{\"1155\":1}}],[\"避免oom\",{\"1\":{\"3129\":1}}],[\"避免o\",{\"1\":{\"2717\":1}}],[\"避免意外的强引用\",{\"1\":{\"2691\":1}}],[\"避免异常发生\",{\"1\":{\"2942\":1}}],[\"避免异常抛出\",{\"1\":{\"2562\":1}}],[\"避免异常导致线程静默终止而不被察觉\",{\"1\":{\"1254\":1}}],[\"避免抛出过于宽泛的异常类型\",{\"1\":{\"2948\":1}}],[\"避免抛出concurrentmodificationexception\",{\"1\":{\"2543\":1}}],[\"避免抛出异常\",{\"1\":{\"2349\":1}}],[\"避免手动索引\",{\"1\":{\"2341\":1}}],[\"避免手动修改class文件\",{\"1\":{\"737\":1}}],[\"避免对长字符串使用intern\",{\"1\":{\"2311\":1}}],[\"避免对不稳定的类使用反射\",{\"1\":{\"1277\":1}}],[\"避免对不需要同步的代码加锁\",{\"1\":{\"650\":1}}],[\"避免被继承\",{\"1\":{\"2307\":1}}],[\"避免相同字符串的重复创建\",{\"1\":{\"2252\":1}}],[\"避免空指针\",{\"1\":{\"2204\":1,\"2255\":1}}],[\"避免将关键字用作标识符\",{\"1\":{\"2813\":1}}],[\"避免将数组引用置为null\",{\"1\":{\"2159\":1}}],[\"避免将不必要的操作包含在事务中\",{\"1\":{\"358\":1,\"372\":1}}],[\"避免死循环的方法主要有\",{\"1\":{\"2138\":1}}],[\"避免死锁的方法包括\",{\"1\":{\"1128\":1}}],[\"避免死锁的方法\",{\"1\":{\"648\":1}}],[\"避免多线程下的死循环问题\",{\"1\":{\"2596\":1}}],[\"避免多执行或少执行一次\",{\"1\":{\"2137\":1}}],[\"避免多次扩容\",{\"1\":{\"1193\":1,\"2449\":1}}],[\"避免无限等待\",{\"1\":{\"3087\":1}}],[\"避免无限循环\",{\"1\":{\"2137\":1}}],[\"避免无意义的缩写或拼音\",{\"1\":{\"1994\":1}}],[\"避免依赖不稳定的api\",{\"1\":{\"3010\":1}}],[\"避免依赖私有api\",{\"1\":{\"2993\":1}}],[\"避免依赖平台默认编码\",{\"1\":{\"2909\":1}}],[\"避免依赖系统默认编码\",{\"1\":{\"2860\":1,\"2884\":1}}],[\"避免依赖精确计数\",{\"1\":{\"2533\":1}}],[\"避免依赖未执行的代码\",{\"1\":{\"2118\":1}}],[\"避免依赖冲突\",{\"1\":{\"966\":1,\"967\":1}}],[\"避免因优先级问题导致的错误\",{\"1\":{\"2118\":1,\"2119\":1}}],[\"避免因数据库连接过多而导致的数据库服务器崩溃\",{\"1\":{\"373\":1}}],[\"避免精度丢失\",{\"1\":{\"2104\":1}}],[\"避免添加与代码重复的注释\",{\"1\":{\"2094\":1}}],[\"避免误导其他开发者\",{\"1\":{\"2094\":1}}],[\"避免误删数据\",{\"1\":{\"53\":1}}],[\"避免超过3层的if\",{\"1\":{\"2061\":1}}],[\"避免npe\",{\"1\":{\"2058\":1}}],[\"避免语义过载\",{\"1\":{\"2051\":1}}],[\"避免语法变更影响现有代码\",{\"1\":{\"562\":1}}],[\"避免规范成为负担\",{\"1\":{\"2028\":1}}],[\"避免服务间紧耦合\",{\"1\":{\"2013\":1}}],[\"避免分布式事务\",{\"1\":{\"2009\":1}}],[\"避免分散配置\",{\"1\":{\"409\":1}}],[\"避免数据在用户空间和内核空间之间来回拷贝\",{\"1\":{\"1321\":1}}],[\"避免接收方缓冲区溢出\",{\"1\":{\"1312\":1}}],[\"避免泛型类型的无意识绕开\",{\"0\":{\"1301\":1}}],[\"避免阻塞线程\",{\"1\":{\"1238\":1}}],[\"避免用户空间拷贝\",{\"1\":{\"1238\":1}}],[\"避免扩容\",{\"1\":{\"1193\":1}}],[\"避免溢出\",{\"1\":{\"1161\":1,\"2104\":1,\"2710\":1}}],[\"避免递归调用过深\",{\"1\":{\"1154\":1}}],[\"避免栈溢出\",{\"1\":{\"1154\":1,\"2789\":1}}],[\"避免虚假唤醒的方法是在条件判断中使用循环而不是if语句\",{\"1\":{\"1139\":1}}],[\"避免资源泄漏\",{\"1\":{\"2831\":1,\"2951\":1}}],[\"避免资源耗尽\",{\"1\":{\"1134\":1}}],[\"避免资源浪费\",{\"1\":{\"373\":1}}],[\"避免网络拥塞\",{\"1\":{\"1115\":1,\"1312\":1}}],[\"避免运行时classcastexception\",{\"1\":{\"1286\":1}}],[\"避免运行时反射开销\",{\"1\":{\"1073\":1,\"1082\":1}}],[\"避免运行时动态调整堆大小\",{\"1\":{\"717\":1}}],[\"避免版本不一致导致的冲突\",{\"1\":{\"1023\":1}}],[\"避免版本冲突\",{\"1\":{\"394\":1}}],[\"避免泄露到外部\",{\"1\":{\"989\":1}}],[\"避免重复处理\",{\"1\":{\"3195\":1}}],[\"避免重复缓冲\",{\"1\":{\"2873\":1}}],[\"避免重复存储\",{\"1\":{\"2253\":1}}],[\"避免重复日志\",{\"1\":{\"2071\":1}}],[\"避免重复构建\",{\"1\":{\"965\":1,\"967\":1}}],[\"避免重量级锁的系统调用\",{\"1\":{\"645\":1}}],[\"避免长生命周期的对象持有短生命周期对象的引用\",{\"1\":{\"1154\":1}}],[\"避免长期持有\",{\"1\":{\"753\":1}}],[\"避免长时间运行的计算任务\",{\"1\":{\"532\":1}}],[\"避免jvm加载非class文件\",{\"1\":{\"738\":1}}],[\"避免频繁的字符与字节转换操作\",{\"1\":{\"2884\":1}}],[\"避免频繁的小数据量写入\",{\"1\":{\"2872\":1}}],[\"避免频繁扩容\",{\"1\":{\"2057\":1,\"2604\":1}}],[\"避免频繁分配和释放内存\",{\"1\":{\"1347\":1}}],[\"避免频繁创建buffer\",{\"1\":{\"3090\":1}}],[\"避免频繁创建销毁线程的开销\",{\"1\":{\"3082\":1}}],[\"避免频繁创建新对象带来的性能开销\",{\"1\":{\"2259\":1}}],[\"避免频繁创建和关闭连接的开销\",{\"1\":{\"1326\":1}}],[\"避免频繁创建和卸载类\",{\"1\":{\"719\":1}}],[\"避免频繁创建对象\",{\"1\":{\"1151\":1}}],[\"避免频繁地创建和关闭连接\",{\"1\":{\"369\":1,\"373\":2}}],[\"避免directmemoryoom\",{\"1\":{\"718\":1}}],[\"避免创建过长的异常链\",{\"1\":{\"2941\":1}}],[\"避免创建过多的大对象\",{\"1\":{\"1154\":1}}],[\"避免创建过多的对象\",{\"1\":{\"1151\":1}}],[\"避免创建过多的索引导致写性能下降\",{\"1\":{\"42\":1}}],[\"避免创建过大对象\",{\"1\":{\"718\":1}}],[\"避免线程阻塞\",{\"1\":{\"2513\":1}}],[\"避免线程切换开销\",{\"1\":{\"1347\":1}}],[\"避免线程局部变量泄漏\",{\"1\":{\"1138\":1}}],[\"避免线程饥饿\",{\"1\":{\"667\":1}}],[\"避免线程优先级反转\",{\"0\":{\"616\":1}}],[\"避免同步空对象或null\",{\"1\":{\"666\":1}}],[\"避免同步string常量或基本类型包装类对象\",{\"1\":{\"666\":1}}],[\"避免方法\",{\"1\":{\"618\":1}}],[\"避免使用原始类型\",{\"1\":{\"3028\":1}}],[\"避免使用filereader\",{\"1\":{\"2885\":1}}],[\"避免使用read\",{\"1\":{\"2848\":1}}],[\"避免使用单个字节\",{\"1\":{\"2836\":1}}],[\"避免使用单字母变量\",{\"1\":{\"1998\":1}}],[\"避免使用静态变量共享对象状态\",{\"1\":{\"2775\":1}}],[\"避免使用通配符\",{\"1\":{\"2768\":1}}],[\"避免使用copyonwrite容器\",{\"1\":{\"2542\":1}}],[\"避免使用常量hashcode\",{\"1\":{\"2385\":1}}],[\"避免使用过于复杂的循环条件\",{\"1\":{\"2138\":1}}],[\"避免使用过时api\",{\"1\":{\"566\":1}}],[\"避免使用动态sql\",{\"1\":{\"2066\":1}}],[\"避免使用java关键字作为标识符\",{\"1\":{\"2001\":1}}],[\"避免使用全局锁\",{\"1\":{\"1138\":1}}],[\"避免使用非正式的\",{\"1\":{\"1026\":1,\"1030\":1}}],[\"避免使用快照版本\",{\"1\":{\"932\":1}}],[\"避免使用synchronized关键字带来的性能开销\",{\"1\":{\"671\":1}}],[\"避免使用stop\",{\"1\":{\"617\":1}}],[\"避免使用executors创建线程池\",{\"0\":{\"631\":1}}],[\"避免使用optional\",{\"1\":{\"554\":1}}],[\"避免破坏现有代码\",{\"1\":{\"514\":1}}],[\"避免不必要的依赖被引入\",{\"1\":{\"1024\":1,\"1030\":1}}],[\"避免不必要的计算\",{\"1\":{\"550\":1,\"2119\":1}}],[\"避免不必要的计算等\",{\"1\":{\"64\":1}}],[\"避免不必要的资源消耗\",{\"1\":{\"421\":1}}],[\"避免出现空的语句块\",{\"1\":{\"2137\":1}}],[\"避免出现模糊的请求映射\",{\"1\":{\"386\":1}}],[\"避免出现并发问题\",{\"1\":{\"358\":1}}],[\"避免连接池过小或过大\",{\"1\":{\"372\":1}}],[\"避免了udp的分片问题\",{\"1\":{\"3227\":1}}],[\"避免了sip事务处理乱序问题\",{\"1\":{\"3227\":1}}],[\"避免了运行时异常\",{\"1\":{\"3017\":1}}],[\"避免了多线程下的死循环\",{\"1\":{\"2616\":1}}],[\"避免了linkedlist的节点创建开销\",{\"1\":{\"2558\":1}}],[\"避免了\",{\"1\":{\"2136\":1}}],[\"避免了头插法可能导致的并发问题\",{\"1\":{\"1196\":1}}],[\"避免了脏读\",{\"1\":{\"355\":1}}],[\"避免了在遍历过程中直接修改集合可能导致的并发修改异常\",{\"1\":{\"283\":1}}],[\"避免拦截不必要的方法\",{\"1\":{\"343\":1}}],[\"避免过多的类型\",{\"1\":{\"2103\":1}}],[\"避免过多的保留单词\",{\"1\":{\"2083\":1}}],[\"避免过多服务间调用导致的性能损耗\",{\"1\":{\"2014\":1}}],[\"避免过长或冗余的命名\",{\"1\":{\"1994\":1}}],[\"避免过度自动化\",{\"1\":{\"2028\":1}}],[\"避免过度缩写\",{\"1\":{\"2001\":1}}],[\"避免过度同步\",{\"1\":{\"1138\":1}}],[\"避免过度同步导致的性能问题\",{\"1\":{\"1137\":1}}],[\"避免过度使用注解导致代码可读性下降\",{\"1\":{\"3169\":1}}],[\"避免过度使用setaccessible\",{\"1\":{\"3010\":1}}],[\"避免过度使用try\",{\"1\":{\"2959\":1}}],[\"避免过度使用异常\",{\"1\":{\"2941\":1}}],[\"避免过度使用无界通配符\",{\"1\":{\"1302\":1}}],[\"避免过度使用volatile\",{\"1\":{\"665\":1}}],[\"避免过度使用aop\",{\"1\":{\"343\":1}}],[\"避免过度设计\",{\"1\":{\"568\":1,\"2013\":1}}],[\"避免过短或过长的过期时间\",{\"1\":{\"211\":1}}],[\"避免循环依赖\",{\"1\":{\"330\":1}}],[\"避免存储\",{\"1\":{\"304\":1}}],[\"避免并发修改异常\",{\"1\":{\"283\":1}}],[\"避免造成master阻塞\",{\"1\":{\"166\":1}}],[\"避免在高频调用的代码中使用反射解析注解\",{\"1\":{\"3153\":1}}],[\"避免在高峰时段执行危险命令\",{\"1\":{\"95\":1}}],[\"避免在生产环境使用高开销的监控工具\",{\"1\":{\"3110\":1}}],[\"避免在生产环境中过度使用反射\",{\"1\":{\"1275\":1}}],[\"避免在生产环境中使用某些危险命令\",{\"1\":{\"94\":1}}],[\"避免在性能敏感的代码中频繁使用反射\",{\"1\":{\"2974\":1}}],[\"避免在后续处理中丢失上下文信息\",{\"1\":{\"2949\":1}}],[\"避免在序列流关闭后再次使用被组合的流\",{\"1\":{\"2896\":1}}],[\"避免在循环中使用反射\",{\"1\":{\"2993\":1}}],[\"避免在循环中频繁使用包装类型作为方法参数\",{\"1\":{\"2789\":1}}],[\"避免在循环中创建对象\",{\"1\":{\"2040\":1}}],[\"避免在循环体中修改循环条件相关的变量\",{\"1\":{\"2138\":1}}],[\"避免在遍历过程中修改集合结构\",{\"1\":{\"2059\":1}}],[\"避免在代码中生成过多字符串常量\",{\"1\":{\"736\":1}}],[\"避免在非静态方法上使用synchronized\",{\"1\":{\"599\":1}}],[\"避免在控制器中包含过多的业务逻辑\",{\"1\":{\"386\":1}}],[\"避免在数据访问层中包含业务逻辑\",{\"1\":{\"372\":1}}],[\"避免在事务中执行耗时的操作\",{\"1\":{\"358\":1}}],[\"避免在多线程环境下使用不正确的作用域\",{\"1\":{\"330\":1}}],[\"避免在xml配置文件中放入过多的配置\",{\"1\":{\"316\":1}}],[\"避免在redis中执行复杂的计算\",{\"1\":{\"212\":1}}],[\"避免在用户请求的时候\",{\"1\":{\"189\":1}}],[\"避免全表扫描\",{\"1\":{\"94\":1,\"95\":1}}],[\"避坑指南\",{\"0\":{\"42\":1,\"53\":1,\"63\":1,\"74\":1,\"94\":1,\"211\":1,\"316\":1,\"330\":1,\"343\":1,\"358\":1,\"372\":1,\"386\":1,\"397\":1,\"410\":1,\"422\":1,\"433\":1,\"444\":1,\"455\":1,\"489\":1,\"516\":1,\"532\":1,\"551\":1,\"565\":1,\"598\":1,\"614\":1,\"630\":1,\"647\":1,\"664\":1,\"682\":1,\"699\":1,\"716\":1,\"734\":1,\"752\":1,\"779\":1,\"812\":1,\"846\":1,\"880\":1,\"914\":1,\"931\":1,\"944\":1,\"966\":1,\"988\":1,\"1029\":1,\"1050\":1,\"1075\":1,\"1102\":1,\"1138\":1,\"1154\":1,\"1169\":1,\"1188\":1,\"1215\":1,\"1233\":1,\"1253\":1,\"1274\":1,\"1300\":1,\"1334\":1,\"1952\":1,\"1965\":1,\"1978\":1,\"1991\":1,\"2001\":1,\"2013\":1,\"2028\":1,\"2040\":1,\"2084\":1,\"2094\":1,\"2104\":1,\"2118\":1,\"2137\":1,\"2157\":1,\"2179\":1,\"2203\":1,\"2229\":1,\"2254\":1,\"2277\":1,\"2338\":1,\"2380\":1,\"2417\":1,\"2447\":1,\"2474\":1,\"2504\":1,\"2531\":1,\"2560\":1,\"2583\":1,\"2611\":1,\"2638\":1,\"2667\":1,\"2690\":1,\"2718\":1,\"2747\":1,\"2773\":1,\"2789\":1,\"2801\":1,\"2813\":1,\"2825\":1,\"2836\":1,\"2848\":1,\"2860\":1,\"2872\":1,\"2884\":1,\"2896\":1,\"2908\":1,\"2920\":1,\"2930\":1,\"2941\":1,\"2959\":1,\"2974\":1,\"2993\":1,\"3010\":1,\"3028\":1,\"3069\":1,\"3090\":1,\"3110\":1,\"3129\":1,\"3140\":1,\"3153\":1,\"3169\":1,\"3193\":1,\"3221\":1}}],[\"不维护状态\",{\"1\":{\"3212\":1}}],[\"不重传\",{\"1\":{\"3195\":1}}],[\"不映射到数据库字段\",{\"1\":{\"3165\":1}}],[\"不跨语言\",{\"1\":{\"3085\":1}}],[\"不适用于高并发场景\",{\"1\":{\"3078\":1}}],[\"不适合\",{\"1\":{\"2861\":1}}],[\"不适合缓存\",{\"1\":{\"2698\":1}}],[\"不适合长字符串\",{\"1\":{\"1164\":1}}],[\"不导出或开放内部包\",{\"1\":{\"3011\":1}}],[\"不设置会抛出illegalaccessexception\",{\"1\":{\"2989\":1}}],[\"不设置收集的数据源默认保存至h2数据库\",{\"1\":{\"1542\":1}}],[\"不检查访问修饰符\",{\"1\":{\"2983\":1}}],[\"不继续执行\",{\"1\":{\"2949\":1}}],[\"不抛出ioexception\",{\"1\":{\"2901\":1}}],[\"不符合java强调的安全性和可读性设计哲学\",{\"1\":{\"2814\":1}}],[\"不符合驼峰命名规范\",{\"1\":{\"1087\":2}}],[\"不对外暴露的实现类\",{\"1\":{\"2796\":1}}],[\"不提供setter方法\",{\"1\":{\"2779\":1}}],[\"不提供修改内部状态的方法\",{\"1\":{\"2307\":1}}],[\"不好的设计\",{\"1\":{\"2750\":1}}],[\"不常使用但内存占用大的对象\",{\"1\":{\"2698\":1}}],[\"不传递\",{\"1\":{\"2671\":1}}],[\"不等则抛出concurrentmodificationexception\",{\"1\":{\"2610\":1}}],[\"不等于\",{\"1\":{\"2110\":1}}],[\"不保存状态\",{\"1\":{\"3183\":1}}],[\"不保存节点\",{\"1\":{\"2508\":1}}],[\"不保留节点引用\",{\"1\":{\"2508\":1}}],[\"不保证实时一致性\",{\"1\":{\"2356\":1}}],[\"不保证原子性\",{\"1\":{\"655\":1}}],[\"不直观\",{\"1\":{\"2506\":1}}],[\"不负责线程安全\",{\"1\":{\"2446\":1}}],[\"不负责存放数据\",{\"1\":{\"1764\":1}}],[\"不返回被删除元素\",{\"1\":{\"2440\":1}}],[\"不进行边界检查\",{\"1\":{\"2440\":1}}],[\"不当的hashcode\",{\"1\":{\"2422\":1}}],[\"不反映迭代过程中的修改\",{\"1\":{\"2352\":1}}],[\"不改变原有流的其他功能\",{\"1\":{\"2883\":1}}],[\"不改变原有流的接口\",{\"1\":{\"2871\":1}}],[\"不改变原有类\",{\"1\":{\"2337\":1}}],[\"不改变异常语义\",{\"1\":{\"514\":1}}],[\"不安全\",{\"1\":{\"2275\":1}}],[\"不安全的类型转换\",{\"1\":{\"1303\":1}}],[\"不规则数组的空指针问题\",{\"0\":{\"2180\":1}}],[\"不规则数组\",{\"1\":{\"2167\":1}}],[\"不规范注释\",{\"1\":{\"2094\":1}}],[\"不及格\",{\"1\":{\"2125\":1}}],[\"不影响旧迭代器\",{\"1\":{\"2543\":1}}],[\"不影响主流程但需关注的异常情况\",{\"1\":{\"2070\":1}}],[\"不影响原引用\",{\"1\":{\"1058\":1}}],[\"不暴露系统实现细节\",{\"1\":{\"2065\":1}}],[\"不忽略异常\",{\"1\":{\"2037\":1}}],[\"不使用通配符\",{\"1\":{\"3041\":1}}],[\"不使用额外变量交换元素\",{\"1\":{\"2727\":1}}],[\"不使用快速失败机制\",{\"1\":{\"2543\":1}}],[\"不使用intern\",{\"1\":{\"2311\":1}}],[\"不使用tab\",{\"1\":{\"2032\":1}}],[\"不使用缓冲流复制\",{\"1\":{\"2868\":1}}],[\"不使用缓冲流复制文件\",{\"1\":{\"1224\":1}}],[\"不使用缓冲流耗时\",{\"1\":{\"1224\":1,\"2868\":1}}],[\"不完整的文档自动化机制\",{\"1\":{\"1991\":1}}],[\"不完整的文档生态机制\",{\"1\":{\"1978\":1}}],[\"不完整的文档管理机制\",{\"1\":{\"1965\":1}}],[\"不完整的api文档\",{\"1\":{\"1952\":1}}],[\"不受原数组修改影响\",{\"1\":{\"2292\":1}}],[\"不受环境影响\",{\"1\":{\"2044\":1}}],[\"不受任何限制\",{\"1\":{\"1940\":1}}],[\"不受密码保护的方式\",{\"1\":{\"1503\":1}}],[\"不计较大小写的不同\",{\"1\":{\"1871\":1}}],[\"不输出任何日志\",{\"1\":{\"1844\":1}}],[\"不这样操作则只要回到linux控制台则redis服务会自动关闭\",{\"1\":{\"1786\":1}}],[\"不然就是io过于频繁\",{\"1\":{\"1887\":1}}],[\"不然我每次启动都得在redis\",{\"1\":{\"1786\":1}}],[\"不然会出现kibana无法显示web页面\",{\"1\":{\"1507\":1}}],[\"不知道的越多系列\",{\"1\":{\"1733\":1}}],[\"不知道大家有没有遇见过\",{\"1\":{\"136\":1}}],[\"不建议\",{\"1\":{\"1707\":1}}],[\"不建议使用\",{\"1\":{\"140\":1}}],[\"不用切换用户即可保存的方式\",{\"0\":{\"1858\":1},\"1\":{\"1835\":1}}],[\"不用关心存储底层做了啥\",{\"1\":{\"1661\":1}}],[\"不用再登录https\",{\"1\":{\"302\":1}}],[\"不一定所有程序都支持最新内核版本\",{\"1\":{\"1471\":1}}],[\"不带请求参数的当前uri\",{\"1\":{\"1412\":1}}],[\"不包括继承的方法\",{\"1\":{\"2983\":1}}],[\"不包括b的子级\",{\"1\":{\"1456\":1}}],[\"不包括blob\",{\"1\":{\"125\":1}}],[\"不包含6\",{\"1\":{\"2265\":1}}],[\"不包含5\",{\"1\":{\"2196\":1}}],[\"不包含主机名\",{\"1\":{\"1412\":1}}],[\"不区分大小写不匹配的正则\",{\"1\":{\"1392\":1}}],[\"不区分大小写的正则匹配\",{\"1\":{\"1392\":1,\"1393\":1}}],[\"不便于集中管理\",{\"1\":{\"1086\":1}}],[\"不必要的tostring\",{\"0\":{\"2280\":1}}],[\"不必要的字符串创建\",{\"1\":{\"1056\":1}}],[\"不必要的依赖\",{\"1\":{\"931\":1}}],[\"不需要显式处理异常\",{\"1\":{\"2861\":1}}],[\"不需要设置accessorder=true\",{\"1\":{\"2643\":1}}],[\"不需要随机访问元素\",{\"1\":{\"2511\":1}}],[\"不需要手动指定es6还是7\",{\"1\":{\"1555\":1}}],[\"不需要再重复定义\",{\"1\":{\"1446\":1}}],[\"不需要修改这个方法\",{\"1\":{\"1209\":1}}],[\"不需要声明间接依赖\",{\"1\":{\"1030\":1}}],[\"不需要预定义表结构\",{\"1\":{\"39\":1}}],[\"不稳定的依赖\",{\"1\":{\"1026\":1,\"1030\":1}}],[\"不开启gc日志\",{\"1\":{\"816\":1,\"850\":1,\"884\":1,\"918\":1}}],[\"不属于jvm运行时数据区\",{\"1\":{\"706\":1}}],[\"不同jdk版本反射行为可能不同\",{\"1\":{\"2993\":1}}],[\"不同环境可能有差异\",{\"1\":{\"2986\":1}}],[\"不同层级的异常处理策略\",{\"0\":{\"2954\":1}}],[\"不同\",{\"1\":{\"2911\":1}}],[\"不同即可\",{\"1\":{\"2786\":1}}],[\"不同类可以实现相同接口并提供不同实现\",{\"1\":{\"2742\":1}}],[\"不同类型的数组需要采用不同的打印策略\",{\"1\":{\"2222\":1}}],[\"不同类型参数共享同一静态变量\",{\"1\":{\"1291\":1}}],[\"不同集合的常见操作复杂度对比\",{\"1\":{\"2712\":1}}],[\"不同遍历方式性能差异较大\",{\"1\":{\"2615\":1}}],[\"不同于普通队列的fifo原则\",{\"1\":{\"2567\":1}}],[\"不同并发队列的性能对比测试\",{\"1\":{\"2524\":1}}],[\"不同内存区域\",{\"1\":{\"2248\":1}}],[\"不同堆对象\",{\"1\":{\"2245\":1,\"2248\":1}}],[\"不同对象\",{\"1\":{\"2191\":1}}],[\"不同方式在内存分配和性能上存在差异\",{\"1\":{\"2187\":1}}],[\"不同网卡修改不同文件\",{\"1\":{\"1918\":1}}],[\"不同架构\",{\"1\":{\"1617\":1}}],[\"不同版本不一样\",{\"1\":{\"1576\":1}}],[\"不同版本的库可能会有api的变化\",{\"1\":{\"1011\":1}}],[\"不同版本的spring可能有不同的api\",{\"1\":{\"316\":1}}],[\"不同的工作方式\",{\"1\":{\"2911\":1}}],[\"不同的运算符按照一定的顺序进行计算\",{\"1\":{\"2119\":1}}],[\"不同的级别代表不同的意义\",{\"1\":{\"1739\":1}}],[\"不同的项目只需要修改企业空间\",{\"1\":{\"1647\":1}}],[\"不同的io操作实现不同的策略\",{\"1\":{\"1231\":1}}],[\"不同的类实现同一个接口的方法\",{\"1\":{\"1216\":1}}],[\"不同的类加载器可以加载相同名称的类\",{\"1\":{\"750\":1}}],[\"不同框架版本对注解的处理可能存在差异\",{\"1\":{\"1084\":1}}],[\"不同循环结构的性能对比\",{\"1\":{\"1043\":1}}],[\"不同代有独立的gc参数和收集器选择\",{\"1\":{\"810\":1,\"844\":1,\"878\":1,\"912\":1}}],[\"不同模块依赖同一类的不同版本\",{\"1\":{\"755\":1}}],[\"不同点\",{\"1\":{\"668\":1,\"2672\":1,\"3198\":1}}],[\"不应作为唯一标识符\",{\"1\":{\"532\":1}}],[\"不应该使用\",{\"1\":{\"305\":1}}],[\"不仅仅局限于当前build上下文\",{\"1\":{\"3246\":1}}],[\"不仅有助于掌握其底层实现原理\",{\"1\":{\"2977\":1}}],[\"不仅无法提升性能\",{\"1\":{\"815\":1,\"849\":1,\"883\":1,\"917\":1}}],[\"不仅能解决现有空值问题\",{\"1\":{\"522\":1}}],[\"不仅可以用于认证\",{\"1\":{\"305\":1}}],[\"不推荐在生产环境使用\",{\"0\":{\"773\":1}}],[\"不推荐\",{\"0\":{\"3255\":1,\"3256\":1},\"1\":{\"517\":1,\"554\":1,\"1056\":1,\"1246\":1,\"1253\":1,\"2039\":1,\"2057\":1,\"2058\":1,\"2061\":1,\"2066\":1,\"2071\":1,\"2143\":1,\"2166\":1,\"2256\":1,\"2278\":1,\"2280\":1,\"2323\":1,\"2351\":1,\"2410\":1,\"2615\":1,\"2948\":1,\"2959\":2}}],[\"不推荐初级开发使用\",{\"1\":{\"298\":1}}],[\"不足\",{\"1\":{\"494\":1}}],[\"不停止应用线程\",{\"1\":{\"476\":1}}],[\"不分代设计\",{\"1\":{\"476\":1}}],[\"不分时段占用cpu资源\",{\"1\":{\"154\":1}}],[\"不满足则不会创建\",{\"1\":{\"463\":1}}],[\"不满足则报错无法加载bean\",{\"1\":{\"459\":1}}],[\"不满足则返回false\",{\"1\":{\"459\":1}}],[\"不要用于非mac版docker的生产环境\",{\"1\":{\"3256\":1}}],[\"不要用异常控制正常业务流程\",{\"1\":{\"2941\":1}}],[\"不要调用我们\",{\"1\":{\"3009\":1}}],[\"不要提供错误的信息\",{\"1\":{\"2094\":1}}],[\"不要提供模糊\",{\"1\":{\"1952\":1,\"1965\":1,\"1978\":1,\"1991\":1}}],[\"不要为每个代码行都添加注释\",{\"1\":{\"2094\":1}}],[\"不要为了复用少量代码而创建深层次的继承关系\",{\"1\":{\"1215\":1}}],[\"不要为了优化而优化\",{\"1\":{\"966\":1}}],[\"不要尝试使用关键字作为标识符\",{\"1\":{\"2084\":1}}],[\"不要直接暴露对象的内部状态\",{\"1\":{\"1215\":1}}],[\"不要创建包含太多方法的接口\",{\"1\":{\"1215\":1}}],[\"不要自作聪明改它名字\",{\"1\":{\"999\":1}}],[\"不要依赖volatile解决线程安全问题\",{\"1\":{\"665\":1}}],[\"不要依赖线程id\",{\"1\":{\"532\":1}}],[\"不要将volatile用于复合操作\",{\"1\":{\"665\":1}}],[\"不要将optional作为方法参数\",{\"1\":{\"554\":1}}],[\"不要同步string常量或基本类型的包装类对象\",{\"1\":{\"599\":1}}],[\"不要过度依赖system\",{\"0\":{\"780\":1}}],[\"不要过度依赖线程优先级\",{\"1\":{\"616\":1}}],[\"不要过度依赖npe消息\",{\"0\":{\"517\":1}}],[\"不要过度使用optional\",{\"1\":{\"554\":1}}],[\"不要过度使用同步代码块\",{\"1\":{\"532\":1}}],[\"不要过度使用spring的特性\",{\"1\":{\"316\":1}}],[\"不要过度使用嵌套文档\",{\"1\":{\"42\":1}}],[\"不要使用拼音与英文混合命名\",{\"1\":{\"2001\":1}}],[\"不要使用过于复杂的语言和结构\",{\"1\":{\"1952\":1,\"1965\":1,\"1978\":1,\"1991\":1}}],[\"不要使用弱密码\",{\"1\":{\"455\":1}}],[\"不要使用相同的配置键在不同的配置文件中\",{\"1\":{\"410\":1}}],[\"不要随意修改不可变对象\",{\"1\":{\"1275\":1}}],[\"不要随意修改meta\",{\"1\":{\"422\":1}}],[\"不要随意修改springboot父项目的版本\",{\"1\":{\"397\":1}}],[\"不要忘记更新和维护文档自动化工具\",{\"1\":{\"1991\":1}}],[\"不要忘记更新和维护文档生态系统\",{\"1\":{\"1978\":1}}],[\"不要忘记更新和维护文档管理体系\",{\"1\":{\"1965\":1}}],[\"不要忘记更新api文档\",{\"1\":{\"1952\":1}}],[\"不要忘记关闭数据库连接\",{\"1\":{\"444\":1}}],[\"不要忘记处理异常\",{\"1\":{\"433\":1}}],[\"不要忘记\",{\"1\":{\"422\":1}}],[\"不要忘记在生产环境中关闭开发环境的配置\",{\"1\":{\"410\":1}}],[\"不要忘记添加break\",{\"1\":{\"2137\":1}}],[\"不要忘记添加\",{\"1\":{\"397\":1}}],[\"不要忽略异常\",{\"1\":{\"2930\":1,\"2959\":1}}],[\"不要忽略文档自动化工具的重要性\",{\"1\":{\"1991\":1}}],[\"不要忽略文档生态系统的重要性\",{\"1\":{\"1978\":1}}],[\"不要忽略文档管理体系的重要性\",{\"1\":{\"1965\":1}}],[\"不要忽略api文档的重要性\",{\"1\":{\"1952\":1}}],[\"不要忽略application\",{\"1\":{\"397\":1}}],[\"不要忽略安全配置\",{\"1\":{\"455\":1}}],[\"不要忽略测试\",{\"1\":{\"455\":1}}],[\"不要忽略数据库连接池的配置\",{\"1\":{\"444\":1}}],[\"不要忽略事务的隔离级别和传播特性\",{\"1\":{\"444\":1}}],[\"不要忽略http方法的正确使用\",{\"1\":{\"433\":1}}],[\"不要忽略参数校验\",{\"1\":{\"433\":1}}],[\"不要忽略\",{\"1\":{\"422\":1}}],[\"不要忽略配置文件的缩进\",{\"1\":{\"410\":1}}],[\"不要在eventloop线程中执行耗时操作\",{\"1\":{\"3129\":1}}],[\"不要在循环内部使用try\",{\"1\":{\"2959\":1}}],[\"不要在finally中使用return\",{\"1\":{\"2930\":1}}],[\"不要在构造方法中使用synchronized\",{\"1\":{\"666\":1}}],[\"不要在生产环境中禁用安全措施\",{\"1\":{\"455\":1}}],[\"不要在非公共方法上使用\",{\"1\":{\"444\":1}}],[\"不要在拦截器中做过重的操作\",{\"1\":{\"433\":1}}],[\"不要在同一应用中使用多个冲突的enable注解\",{\"1\":{\"422\":1}}],[\"不要在配置文件中硬编码敏感信息\",{\"1\":{\"410\":1}}],[\"不要在主启动类所在包的上层放置其他类\",{\"1\":{\"397\":1}}],[\"不可靠\",{\"1\":{\"3206\":1}}],[\"不可靠的传输层协议\",{\"1\":{\"3062\":1}}],[\"不可能\",{\"1\":{\"2358\":1}}],[\"不可再分的数据类型\",{\"1\":{\"2099\":1}}],[\"不可修改\",{\"1\":{\"2077\":1,\"2085\":1}}],[\"不可用元素选择器\",{\"1\":{\"1459\":1}}],[\"不可恢复的配置或环境错误\",{\"1\":{\"1244\":1}}],[\"不可被继承\",{\"1\":{\"1038\":1}}],[\"不可被子类重写\",{\"1\":{\"1038\":1}}],[\"不可重写\",{\"1\":{\"1038\":1}}],[\"不可重复读和幻读等问题\",{\"1\":{\"355\":1}}],[\"不可达的对象即为可回收对象\",{\"1\":{\"762\":1}}],[\"不可变设计\",{\"1\":{\"2812\":1}}],[\"不可变标记\",{\"1\":{\"2808\":1}}],[\"不可变内部存储\",{\"1\":{\"2415\":1}}],[\"不可变map\",{\"1\":{\"2406\":1}}],[\"不可变set相比普通set具有线程安全\",{\"1\":{\"2395\":1}}],[\"不可变set的实现原理及应用场景\",{\"0\":{\"2395\":1}}],[\"不可变list的实现原理\",{\"1\":{\"2336\":1}}],[\"不可变list示例\",{\"1\":{\"2320\":1}}],[\"不可变模式的适用场景\",{\"1\":{\"2307\":1}}],[\"不可变字符串适合作为哈希表键和参数传递\",{\"1\":{\"2252\":1}}],[\"不可变保证参数不被修改\",{\"1\":{\"2207\":1}}],[\"不可变\",{\"1\":{\"1288\":1,\"2201\":1,\"2275\":2,\"2819\":1}}],[\"不可变集合的equals\",{\"1\":{\"2358\":1}}],[\"不可变集合不允许null元素\",{\"1\":{\"2358\":1}}],[\"不可变集合设计\",{\"0\":{\"2336\":1,\"2378\":1,\"2415\":1}}],[\"不可变集合支持增强\",{\"1\":{\"1198\":1}}],[\"不可变集合\",{\"1\":{\"1178\":1,\"2369\":1}}],[\"不可变集合工厂方法\",{\"1\":{\"1059\":1}}],[\"不可变性机制\",{\"0\":{\"2298\":1}}],[\"不可变性机制以及字符串常量池的工作原理\",{\"1\":{\"2284\":1}}],[\"不可变性的实现方式\",{\"0\":{\"2299\":1}}],[\"不可变性的底层实现\",{\"0\":{\"2240\":1}}],[\"不可变性的好处\",{\"0\":{\"2192\":1,\"2300\":1}}],[\"不可变性的表现\",{\"0\":{\"2191\":1}}],[\"不可变性保证参数不被修改\",{\"1\":{\"1048\":1}}],[\"不可变性\",{\"1\":{\"1041\":1}}],[\"不可变特性使得字符串可以安全地被共享\",{\"1\":{\"703\":1}}],[\"不可变对象更适合作为map的key\",{\"1\":{\"2395\":1}}],[\"不可变对象天然线程安全\",{\"1\":{\"1048\":1,\"2192\":1,\"2300\":1,\"2336\":1}}],[\"不可变对象天生是线程安全的\",{\"1\":{\"596\":1}}],[\"不可变对象设计模式\",{\"0\":{\"2307\":1}}],[\"不可变对象设计\",{\"0\":{\"596\":1}}],[\"不可剥夺条件\",{\"1\":{\"648\":1}}],[\"不可更新视图\",{\"1\":{\"125\":1}}],[\"不可更新\",{\"1\":{\"125\":1}}],[\"不过\",{\"1\":{\"344\":1,\"1660\":1,\"2975\":1}}],[\"不加密的情况下\",{\"1\":{\"305\":1}}],[\"不依赖未公开的内部api和私有方法\",{\"1\":{\"3010\":1}}],[\"不依赖外部资源和其他测试用例\",{\"1\":{\"2044\":1}}],[\"不依赖\",{\"1\":{\"304\":1,\"2666\":1}}],[\"不做复杂业务逻辑\",{\"1\":{\"1347\":1}}],[\"不做任何操作\",{\"1\":{\"283\":1}}],[\"不做处理\",{\"1\":{\"152\":1}}],[\"不再扩容\",{\"1\":{\"2601\":1}}],[\"不再执行value中的方法\",{\"1\":{\"283\":1}}],[\"不再强制要求数据符合固定的\",{\"1\":{\"41\":1}}],[\"不会创建新实例\",{\"1\":{\"2825\":1}}],[\"不会创建新线程\",{\"1\":{\"615\":1}}],[\"不会被回收\",{\"1\":{\"2691\":1}}],[\"不会抛出ioexception\",{\"1\":{\"2899\":1}}],[\"不会抛出concurrentmodificationexception\",{\"1\":{\"2513\":1}}],[\"不会抛出异常中断迭代\",{\"1\":{\"2543\":1}}],[\"不会抛出异常\",{\"1\":{\"2340\":1,\"2420\":1}}],[\"不会输出\",{\"1\":{\"2352\":1}}],[\"不会复制字符串\",{\"1\":{\"2297\":1}}],[\"不会计算b的值\",{\"1\":{\"2111\":2}}],[\"不会递归\",{\"1\":{\"1859\":1}}],[\"不会进行任何记录\",{\"1\":{\"1739\":1}}],[\"不会应为某台服务器负载高宕机而某台服务器闲置的情况\",{\"1\":{\"1383\":1}}],[\"不会导致数据不一致或其他异常情况\",{\"1\":{\"1125\":1}}],[\"不会产生大量内存碎片\",{\"1\":{\"784\":1}}],[\"不会释放锁\",{\"1\":{\"618\":1}}],[\"不会给应用程序带来额外的负担\",{\"1\":{\"311\":1}}],[\"不会对业务接口的响应时间造成影响\",{\"1\":{\"306\":1}}],[\"不会在客户端请求业务接口时验证\",{\"1\":{\"306\":1}}],[\"不会执行value中的操作\",{\"1\":{\"283\":1}}],[\"不会一次性加载所有数据到内存\",{\"1\":{\"271\":1}}],[\"不会删除已有数据\",{\"1\":{\"165\":1}}],[\"不立即删除\",{\"1\":{\"212\":1}}],[\"不在线的out\",{\"1\":{\"182\":1}}],[\"不在group\",{\"1\":{\"125\":1}}],[\"不断的检查master和slave是否正常运行\",{\"1\":{\"177\":1}}],[\"不写全数据\",{\"1\":{\"139\":1}}],[\"不支持显式指定\",{\"1\":{\"2909\":1}}],[\"不支持并发\",{\"1\":{\"2897\":1}}],[\"不支持快速失败\",{\"1\":{\"2454\":1}}],[\"不支持修改操作\",{\"1\":{\"2415\":1}}],[\"不支持操作异常\",{\"0\":{\"2342\":1}}],[\"不支持监控springcloud\",{\"1\":{\"1559\":1}}],[\"不支持\",{\"1\":{\"1288\":1,\"2518\":1,\"2666\":1}}],[\"不支持直接编码转换\",{\"1\":{\"1221\":1}}],[\"不支持撤销分区\",{\"1\":{\"125\":1}}],[\"不支持subselect值\",{\"1\":{\"125\":1}}],[\"不良sqlstate\",{\"1\":{\"125\":1}}],[\"不良握手\",{\"1\":{\"125\":1}}],[\"不是linkedlist实现\",{\"1\":{\"2513\":1}}],[\"不是独立副本\",{\"1\":{\"2346\":1}}],[\"不是从终端启动的进程则显示为\",{\"1\":{\"1882\":1}}],[\"不是很建议使用本方案\",{\"1\":{\"1632\":1}}],[\"不是nginx安装目录\",{\"1\":{\"1416\":1}}],[\"不是所有的bean都会创建\",{\"1\":{\"463\":1}}],[\"不是一个key的保存空间\",{\"1\":{\"185\":1}}],[\"不是\",{\"1\":{\"125\":1}}],[\"不是变量组分\",{\"1\":{\"125\":1}}],[\"不被支持\",{\"1\":{\"125\":1}}],[\"不允许添加元素\",{\"1\":{\"3038\":1}}],[\"不允许添加非string类型\",{\"1\":{\"3017\":1}}],[\"不允许存储null元素\",{\"1\":{\"2358\":1,\"2395\":1}}],[\"不允许安全漏洞\",{\"1\":{\"2021\":1}}],[\"不允许阻断性bug\",{\"1\":{\"2021\":1}}],[\"不允许谷歌浏览器访问\",{\"1\":{\"1411\":1}}],[\"不允许外部程序直接访问\",{\"1\":{\"1271\":1}}],[\"不允许上传构件\",{\"1\":{\"976\":1}}],[\"不允许使用blob字段\",{\"1\":{\"125\":1}}],[\"不允许分区中的句柄组合\",{\"1\":{\"125\":1}}],[\"不允许将方案从\",{\"1\":{\"125\":1}}],[\"不允许将主机\",{\"1\":{\"125\":1}}],[\"不允许以这类递归方式执行预处理语句\",{\"1\":{\"125\":1}}],[\"不允许递归存储子程序\",{\"1\":{\"125\":1}}],[\"不允许显式或隐式提交\",{\"1\":{\"125\":1}}],[\"不允许从存储函数或触发程序设置autocommit\",{\"1\":{\"125\":1}}],[\"不允许从\",{\"1\":{\"125\":1}}],[\"不允许用grant创建用户\",{\"1\":{\"125\":1}}],[\"不允许更新\",{\"1\":{\"125\":1}}],[\"不允许\",{\"1\":{\"125\":2,\"1053\":2,\"2358\":1}}],[\"不允许create\",{\"1\":{\"125\":1}}],[\"不允许drop\",{\"1\":{\"125\":1}}],[\"不允许在事务中执行该命令\",{\"1\":{\"125\":1}}],[\"不允许匿名用户更改密码\",{\"1\":{\"125\":1}}],[\"不允许任何路径\",{\"1\":{\"125\":1}}],[\"不正确的fetch变量数目\",{\"1\":{\"125\":1}}],[\"不正确的目录名\",{\"1\":{\"125\":1}}],[\"不正确的索引名\",{\"1\":{\"125\":1}}],[\"不正确的参数或参数组合\",{\"1\":{\"125\":1}}],[\"不正确的\",{\"1\":{\"125\":3}}],[\"不正确的列名\",{\"1\":{\"125\":1}}],[\"不正确的表名\",{\"1\":{\"125\":1}}],[\"不正确的表定义\",{\"1\":{\"125\":3}}],[\"不正确的数据库名\",{\"1\":{\"125\":1}}],[\"不正确的子部分键\",{\"1\":{\"125\":1}}],[\"不能直接创建泛型数组\",{\"1\":{\"3035\":1}}],[\"不能简单依赖异常\",{\"1\":{\"2920\":1}}],[\"不能再继承其他类\",{\"1\":{\"2825\":1}}],[\"不能通过父类实例直接访问\",{\"1\":{\"2801\":1}}],[\"不能通过套接字\",{\"1\":{\"125\":1}}],[\"不能实例化\",{\"1\":{\"2761\":1}}],[\"不能抛出更多checked异常\",{\"1\":{\"2752\":1}}],[\"不能抛出比父类更多的\",{\"1\":{\"2737\":1}}],[\"不能被继承\",{\"1\":{\"2287\":1,\"2761\":1}}],[\"不能被读取\",{\"1\":{\"125\":1}}],[\"不能重新发起请求\",{\"1\":{\"1443\":2}}],[\"不能访问其他子类实例的protected成员\",{\"1\":{\"2797\":1}}],[\"不能访问外部类的实例成员\",{\"1\":{\"1037\":1}}],[\"不能访问实例变量\",{\"1\":{\"1037\":1}}],[\"不能保证原子性\",{\"1\":{\"600\":1}}],[\"不能互相替代\",{\"1\":{\"521\":1}}],[\"不能\",{\"1\":{\"461\":1,\"1129\":2}}],[\"不能控制连接点的执行\",{\"1\":{\"344\":1}}],[\"不能将秘密数据写入\",{\"1\":{\"305\":1}}],[\"不能将请求事件发送到服务器\",{\"1\":{\"125\":1}}],[\"不能将系统\",{\"1\":{\"125\":1}}],[\"不能打开共享内存\",{\"1\":{\"125\":9}}],[\"不能打开共享库\",{\"1\":{\"125\":1}}],[\"不能为非字符串\",{\"1\":{\"125\":1}}],[\"不能为空\",{\"1\":{\"125\":1}}],[\"不能创建泛型数组\",{\"1\":{\"1288\":1,\"3028\":1}}],[\"不能创建tcp\",{\"1\":{\"125\":1}}],[\"不能创建unix套接字\",{\"1\":{\"125\":1}}],[\"不能连接到\",{\"1\":{\"125\":1}}],[\"不能舍弃分区\",{\"1\":{\"125\":1}}],[\"不能删除所有分区\",{\"1\":{\"125\":1}}],[\"不能删除或更新父行\",{\"1\":{\"125\":1}}],[\"不能独立使用分区功能\",{\"1\":{\"125\":1}}],[\"不能添加或更新子行\",{\"1\":{\"125\":1}}],[\"不能执行该预处理语句\",{\"1\":{\"125\":1}}],[\"不能执行命令\",{\"1\":{\"125\":1}}],[\"不能执行给定的命令\",{\"1\":{\"125\":1}}],[\"不能从发送给geometry字段的数据中获取几何对象\",{\"1\":{\"125\":1}}],[\"不能从具有固定大小行的文件中将值加载到变量\",{\"1\":{\"125\":1}}],[\"不能从联合视图\",{\"1\":{\"125\":1}}],[\"不能从另一个存储子程序中创建\",{\"1\":{\"125\":1}}],[\"不能清除\",{\"1\":{\"125\":1}}],[\"不能是fulltext索引的一部分\",{\"1\":{\"125\":1}}],[\"不能用作标识符\",{\"1\":{\"2084\":1}}],[\"不能用作xxxx\",{\"1\":{\"125\":1}}],[\"不能用alter\",{\"1\":{\"125\":1}}],[\"不能在存储函数\",{\"1\":{\"125\":1}}],[\"不能在没有字段列表的情况下插入联合视图\",{\"1\":{\"125\":1}}],[\"不能在这里使用视图合并算法\",{\"1\":{\"125\":1}}],[\"不能在\",{\"1\":{\"125\":1}}],[\"不能在from子句中制定要更新的目标表\",{\"1\":{\"125\":1}}],[\"不能设置为值\",{\"1\":{\"125\":1}}],[\"不能回滚某些非事务性已变动表\",{\"1\":{\"125\":1}}],[\"不能reset\",{\"1\":{\"125\":1}}],[\"不能写入到表\",{\"1\":{\"125\":1}}],[\"不能发现库中的符号\",{\"1\":{\"125\":1}}],[\"不能有默认值\",{\"1\":{\"125\":1}}],[\"不能更新\",{\"1\":{\"125\":1}}],[\"不能生成唯一的日志文件名\",{\"1\":{\"125\":1}}],[\"不能撤销\",{\"1\":{\"125\":1}}],[\"不能与该过程一起使用order子句\",{\"1\":{\"125\":1}}],[\"不能与set\",{\"1\":{\"125\":1}}],[\"不能与blob一起使用固定行长度\",{\"1\":{\"125\":1}}],[\"不能与已使用的表类型用在\",{\"1\":{\"125\":1}}],[\"不明确\",{\"1\":{\"125\":1}}],[\"不存储\",{\"1\":{\"2393\":1}}],[\"不存储元素的阻塞队列\",{\"1\":{\"634\":1}}],[\"不存储值\",{\"1\":{\"135\":1}}],[\"不存储数据\",{\"1\":{\"69\":1}}],[\"不存在则返回null\",{\"1\":{\"2629\":1,\"2658\":2}}],[\"不存在则满足条件创建bean\",{\"1\":{\"415\":1,\"459\":1}}],[\"不存在返回\",{\"1\":{\"1166\":1}}],[\"不存在\",{\"1\":{\"125\":3}}],[\"可写事件\",{\"1\":{\"3118\":1}}],[\"可读事件\",{\"1\":{\"3118\":1}}],[\"可读性优先\",{\"1\":{\"2093\":1}}],[\"可读性提升\",{\"1\":{\"1286\":1}}],[\"可读性\",{\"1\":{\"1216\":1,\"2083\":1,\"2117\":1,\"2136\":1}}],[\"可读性较差\",{\"1\":{\"1086\":1}}],[\"可读性好\",{\"1\":{\"292\":1,\"1086\":1,\"3085\":1}}],[\"可详细解析网络数据包内容\",{\"1\":{\"3107\":1}}],[\"可模拟高并发网络请求\",{\"1\":{\"3106\":1}}],[\"可配置网络相关日志\",{\"1\":{\"3102\":1}}],[\"可配置的io线程数\",{\"1\":{\"1347\":1}}],[\"可集成多种监控系统\",{\"1\":{\"3097\":1}}],[\"可靠传输\",{\"1\":{\"3206\":1}}],[\"可靠的\",{\"1\":{\"3061\":1}}],[\"可靠性\",{\"1\":{\"1347\":1,\"3123\":1}}],[\"可将多个异常关联到一个主异常\",{\"1\":{\"2942\":1}}],[\"可包装任何inputstream\",{\"1\":{\"2885\":1}}],[\"可显式指定字符编码\",{\"1\":{\"2885\":1}}],[\"可自定义分隔符\",{\"1\":{\"2861\":1}}],[\"可自定义锁对象\",{\"1\":{\"2356\":1}}],[\"可确保数据及时写入\",{\"1\":{\"2860\":1}}],[\"可动态扩容\",{\"1\":{\"2541\":1}}],[\"可动态调整新生代和老年代大小\",{\"1\":{\"784\":1}}],[\"可高效实现\",{\"1\":{\"2511\":1}}],[\"可高效实现栈\",{\"1\":{\"2335\":1}}],[\"可中断锁获取\",{\"1\":{\"2513\":1}}],[\"可中断\",{\"1\":{\"2456\":1}}],[\"可根据需求灵活控制同步粒度\",{\"1\":{\"2456\":1}}],[\"可根据具体场景选择\",{\"1\":{\"1086\":1}}],[\"可叠加多个装饰器\",{\"1\":{\"2337\":1}}],[\"可共享内部数据结构\",{\"1\":{\"2336\":1}}],[\"可替换性\",{\"1\":{\"2331\":1}}],[\"可适当使用\",{\"1\":{\"2311\":1}}],[\"可链式操作\",{\"1\":{\"2227\":1}}],[\"可被缓冲流等装饰\",{\"1\":{\"2835\":1}}],[\"可被缓存和共享\",{\"1\":{\"2207\":1}}],[\"可被任何包访问\",{\"1\":{\"2761\":1}}],[\"可被共享\",{\"1\":{\"2192\":1}}],[\"可接受的\",{\"1\":{\"1940\":1}}],[\"可见\",{\"1\":{\"1885\":1}}],[\"可见性和有序性\",{\"1\":{\"655\":1}}],[\"可执行代码以外的部分\",{\"1\":{\"1882\":1}}],[\"可执行代码占用的物理内存大小\",{\"1\":{\"1882\":1}}],[\"可执行程序文件\",{\"1\":{\"1779\":1}}],[\"可扩展和与现有网络协议兼容的特点\",{\"1\":{\"3172\":1}}],[\"可扩展新的流类型\",{\"1\":{\"2835\":1}}],[\"可扩展到的最大空间\",{\"1\":{\"1833\":1}}],[\"可扩展性原则\",{\"1\":{\"1959\":1,\"1972\":1,\"1985\":1}}],[\"可扩展性\",{\"1\":{\"39\":1,\"95\":1,\"432\":1,\"443\":1,\"1216\":1,\"3123\":1}}],[\"可查看\",{\"1\":{\"1780\":1}}],[\"可使用udp\",{\"1\":{\"3227\":1}}],[\"可使用arraylist替代\",{\"1\":{\"3028\":1}}],[\"可使用构造方法fileoutputstream\",{\"1\":{\"2832\":1}}],[\"可使用volume配置形式挂载\",{\"1\":{\"1661\":1}}],[\"可使用这些参数\",{\"1\":{\"125\":1}}],[\"可视化规则\",{\"1\":{\"2037\":1}}],[\"可视化界面创建\",{\"0\":{\"1655\":1}}],[\"可视化化平台\",{\"1\":{\"1507\":1}}],[\"可不配\",{\"1\":{\"1621\":1,\"1753\":1}}],[\"可在常量池中共享相同字符串\",{\"1\":{\"2300\":1}}],[\"可在启动时对日志进行重放\",{\"1\":{\"1739\":1}}],[\"可在cmd中执行以下命令查看哪些端口被禁用tcp协议\",{\"1\":{\"1569\":1}}],[\"可在持有写锁时获取读锁再释放写锁\",{\"1\":{\"651\":1}}],[\"可实现本地文件的拷贝\",{\"1\":{\"1501\":1}}],[\"可实现http服务器\",{\"1\":{\"1382\":1}}],[\"可实现高并发连接\",{\"1\":{\"1382\":1}}],[\"可实现动态加载bean\",{\"1\":{\"462\":1}}],[\"可考虑spring\",{\"1\":{\"1347\":1}}],[\"可存储子类型元素\",{\"1\":{\"1288\":1}}],[\"可变参数必须作为方法最后一个参数\",{\"1\":{\"2789\":1}}],[\"可变参数陷阱\",{\"1\":{\"2789\":1}}],[\"可变字符序列\",{\"1\":{\"2310\":2}}],[\"可变字符串内部通过字符数组存储数据\",{\"1\":{\"2270\":1}}],[\"可变字符串核心类\",{\"0\":{\"2261\":1}}],[\"可变字符串允许在原有对象上进行修改操作\",{\"1\":{\"2259\":1}}],[\"可变字符串是java中用于处理动态字符串内容的重要工具\",{\"1\":{\"2259\":1}}],[\"可变字符串\",{\"0\":{\"2258\":1}}],[\"可变\",{\"1\":{\"1288\":1,\"2201\":2,\"2275\":2}}],[\"可变性\",{\"1\":{\"1288\":1,\"2201\":1,\"2275\":1}}],[\"可预见且应处理的业务异常\",{\"1\":{\"1244\":1}}],[\"可预测的停顿时间\",{\"1\":{\"784\":1}}],[\"可序列化的user类\",{\"1\":{\"1225\":1}}],[\"可灵活控制锁定粒度\",{\"1\":{\"2513\":1}}],[\"可灵活控制锁粒度\",{\"1\":{\"1197\":1}}],[\"可灵活设置表头样式\",{\"1\":{\"273\":1}}],[\"可达性分析\",{\"1\":{\"1149\":1}}],[\"可达性分析算法\",{\"0\":{\"762\":1}}],[\"可提前解析并缓存结果\",{\"1\":{\"1083\":1}}],[\"可添加更多注解的校验逻辑\",{\"1\":{\"1069\":1}}],[\"可添加其他配置\",{\"1\":{\"278\":1}}],[\"可缓存hashcode\",{\"1\":{\"1048\":1}}],[\"可缓存的线程池\",{\"1\":{\"623\":1,\"1135\":1}}],[\"可移植\",{\"1\":{\"1046\":1}}],[\"可修改\",{\"1\":{\"1041\":1}}],[\"可修饰类\",{\"1\":{\"1038\":1}}],[\"可观测性三支柱\",{\"1\":{\"3109\":1}}],[\"可观测性\",{\"1\":{\"1028\":1}}],[\"可与cms配合使用\",{\"1\":{\"769\":1}}],[\"可解决循环引用问题\",{\"1\":{\"762\":1}}],[\"可分析http\",{\"1\":{\"3107\":1}}],[\"可分块处理\",{\"1\":{\"718\":1}}],[\"可分为新生代\",{\"1\":{\"707\":1}}],[\"可通过反射api获取\",{\"1\":{\"3149\":1}}],[\"可通过反射获取\",{\"1\":{\"1065\":1}}],[\"可通过asm等字节码操作库在编译后修改class文件\",{\"1\":{\"3148\":1}}],[\"可通过设置so\",{\"1\":{\"3069\":1}}],[\"可通过selector实现多路复用\",{\"1\":{\"2913\":1}}],[\"可通过构造函数指定\",{\"1\":{\"2609\":1}}],[\"可通过capacityincrement设置增量\",{\"1\":{\"2454\":1}}],[\"可通过以下方式平衡规范性和性能\",{\"1\":{\"2041\":1}}],[\"可通过tree指令查看nignx的目录结构\",{\"1\":{\"1779\":1}}],[\"可通过tail\",{\"1\":{\"1738\":1}}],[\"可通过yum的方式安装所需的依赖包\",{\"1\":{\"1738\":1}}],[\"可通过上面步骤的\",{\"1\":{\"998\":1}}],[\"可通过\",{\"1\":{\"717\":2}}],[\"可用于分析网络相关线程阻塞问题\",{\"1\":{\"3096\":1}}],[\"可用于表示任意类型的泛型实例\",{\"1\":{\"3038\":1}}],[\"可用于泛型\",{\"1\":{\"1066\":1}}],[\"可用字符集总数\",{\"1\":{\"2881\":1}}],[\"可用元素选择器\",{\"1\":{\"1459\":1}}],[\"可用内存\",{\"1\":{\"694\":1}}],[\"可用性=\",{\"1\":{\"160\":1}}],[\"可用性\",{\"1\":{\"43\":1,\"160\":1}}],[\"可重新读取数据\",{\"1\":{\"2914\":1}}],[\"可重复性\",{\"1\":{\"2314\":1}}],[\"可重复执行\",{\"1\":{\"2044\":1}}],[\"可重复读\",{\"1\":{\"348\":1}}],[\"可重入锁\",{\"1\":{\"638\":1}}],[\"可组合性\",{\"1\":{\"550\":1}}],[\"可定制性\",{\"1\":{\"454\":1}}],[\"可维护代码的规则集合\",{\"1\":{\"1993\":1}}],[\"可维护性和可重用性\",{\"1\":{\"2085\":1}}],[\"可维护性\",{\"1\":{\"1216\":1,\"2136\":1}}],[\"可维护和可扩展的代码\",{\"1\":{\"1214\":1,\"1216\":1,\"2730\":1}}],[\"可维护\",{\"1\":{\"333\":1,\"342\":1}}],[\"可测试性\",{\"1\":{\"311\":1,\"1216\":1}}],[\"可针对各个版本直接拷贝依赖\",{\"1\":{\"302\":1}}],[\"可复用\",{\"1\":{\"292\":1}}],[\"可调整\",{\"1\":{\"272\":1}}],[\"可选参数\",{\"1\":{\"3135\":1}}],[\"可选有界\",{\"1\":{\"2461\":1}}],[\"可选择相应服务查看对应系统图\",{\"1\":{\"1562\":1}}],[\"可选特性\",{\"1\":{\"570\":1}}],[\"可选重写默认方法\",{\"1\":{\"541\":1}}],[\"可选\",{\"0\":{\"1365\":1,\"1607\":1,\"1711\":1},\"1\":{\"242\":2,\"261\":1,\"263\":1,\"264\":2,\"759\":1,\"1610\":8,\"1675\":1,\"1741\":1,\"3177\":1,\"3180\":1,\"3214\":1}}],[\"可能还有数据未发送完成\",{\"1\":{\"3070\":1}}],[\"可能出现数据粘包\",{\"1\":{\"3069\":1}}],[\"可能的安全管理器检查\",{\"1\":{\"2986\":1}}],[\"可能的编码\",{\"1\":{\"2885\":1}}],[\"可能阻塞\",{\"1\":{\"2921\":1}}],[\"可能返回0\",{\"1\":{\"2920\":1}}],[\"可能产生乱码\",{\"1\":{\"2878\":1}}],[\"可能不合适\",{\"1\":{\"2748\":1}}],[\"可能不是最新值\",{\"1\":{\"2533\":1}}],[\"可能为null或错误值\",{\"1\":{\"2669\":1}}],[\"可能读取到过期数据\",{\"1\":{\"2543\":1}}],[\"可能看不到迭代过程中的修改\",{\"1\":{\"2543\":1}}],[\"可能看不到后续修改\",{\"1\":{\"2530\":1}}],[\"可能有性能问题\",{\"1\":{\"2861\":1}}],[\"可能有未使用的容量\",{\"1\":{\"2511\":1}}],[\"可能有冗余容量\",{\"1\":{\"2503\":1}}],[\"可能输出\",{\"1\":{\"2480\":1}}],[\"可能输出0\",{\"1\":{\"658\":1}}],[\"可能存在未使用的数组空间\",{\"1\":{\"2318\":1}}],[\"可能存在重复对象\",{\"1\":{\"2253\":1}}],[\"可能小于80\",{\"1\":{\"2269\":1}}],[\"可能性较大\",{\"1\":{\"1788\":1}}],[\"可能需要考虑第三方库或自定义实现\",{\"1\":{\"2696\":1}}],[\"可能需要更大的空间记录更多的操作\",{\"1\":{\"1739\":1}}],[\"可能需要一段时间来熟悉这些约定\",{\"1\":{\"945\":1}}],[\"可能被遗忘\",{\"1\":{\"1234\":1}}],[\"可能抛出异常的结束字节码索引\",{\"1\":{\"2935\":1}}],[\"可能抛出异常的起始字节码索引\",{\"1\":{\"2935\":1}}],[\"可能抛出异常的代码\",{\"1\":{\"2079\":1}}],[\"可能抛出异常的操作\",{\"1\":{\"1044\":1,\"2935\":1}}],[\"可能抛出io异常的代码\",{\"1\":{\"2037\":1}}],[\"可能抛出npe的代码\",{\"1\":{\"518\":1}}],[\"可能是硬件设备已经饱和\",{\"1\":{\"1884\":1}}],[\"可能是硬件设备遇到了瓶颈或者出现故障\",{\"1\":{\"1884\":1}}],[\"可能是你的帐号不允许从远程登陆\",{\"1\":{\"1775\":1}}],[\"可能是想要上传的版本号在maven仓库中已存在了\",{\"1\":{\"1005\":1}}],[\"可能是因为group\",{\"1\":{\"1005\":1}}],[\"可能随时移除\",{\"1\":{\"790\":1,\"824\":1,\"858\":1,\"892\":1}}],[\"可能在不同版本间变化\",{\"1\":{\"789\":1,\"823\":1,\"857\":1,\"891\":1}}],[\"可能增加内存开销\",{\"1\":{\"685\":1}}],[\"可能影响性能\",{\"1\":{\"433\":1,\"444\":1,\"665\":1}}],[\"可能导致跨平台字符问题\",{\"1\":{\"2908\":1}}],[\"可能导致跨平台问题\",{\"1\":{\"2833\":1}}],[\"可能导致之前未检测到的错误被发现\",{\"1\":{\"2908\":1}}],[\"可能导致频繁的内存页交换\",{\"1\":{\"2873\":1}}],[\"可能导致中文乱码\",{\"1\":{\"2837\":1}}],[\"可能导致classcastexception\",{\"1\":{\"2749\":1}}],[\"可能导致gc压力\",{\"1\":{\"2513\":1}}],[\"可能导致类型转换异常\",{\"1\":{\"2509\":1}}],[\"可能导致更多缓存失效\",{\"1\":{\"2484\":1}}],[\"可能导致线程竞争和阻塞\",{\"1\":{\"2513\":1}}],[\"可能导致线程竞争\",{\"1\":{\"2456\":1}}],[\"可能导致常量池膨胀\",{\"1\":{\"2311\":1}}],[\"可能导致多次扩容\",{\"1\":{\"2278\":1}}],[\"可能导致多线程环境下的循环链表问题\",{\"1\":{\"1196\":1}}],[\"可能导致外部无法访问内部ip和端口\",{\"1\":{\"1104\":1}}],[\"可能导致性能问题和nullpointerexception\",{\"1\":{\"1049\":1}}],[\"可能导致缓存失效\",{\"1\":{\"703\":1}}],[\"可能导致活锁\",{\"1\":{\"686\":1}}],[\"可能导致aba问题\",{\"1\":{\"686\":1}}],[\"可能导致oom\",{\"1\":{\"631\":2}}],[\"可能导致死锁\",{\"1\":{\"599\":1}}],[\"可能导致内存泄漏\",{\"1\":{\"532\":1,\"601\":1,\"2508\":1}}],[\"可能导致安全风险\",{\"1\":{\"455\":1}}],[\"可能导致安全漏洞\",{\"1\":{\"455\":1}}],[\"可能导致未授权访问\",{\"1\":{\"455\":1}}],[\"可能导致应用存在潜在的bug\",{\"1\":{\"455\":1}}],[\"可能导致应用崩溃\",{\"1\":{\"433\":1}}],[\"可能导致资源泄漏\",{\"1\":{\"444\":1}}],[\"可能导致事务不生效\",{\"1\":{\"444\":1}}],[\"可能导致数据不一致\",{\"1\":{\"433\":1,\"444\":1}}],[\"可能导致bean无法创建\",{\"1\":{\"422\":1}}],[\"可能导致优先级问题\",{\"1\":{\"410\":1}}],[\"可能导致扫描不到\",{\"1\":{\"397\":1}}],[\"可能导致依赖冲突\",{\"1\":{\"397\":1}}],[\"可能导致redis服务器阻塞\",{\"1\":{\"211\":1}}],[\"可能会被垃圾回收器回收\",{\"1\":{\"2676\":1}}],[\"可能会影响io性能\",{\"1\":{\"1884\":1}}],[\"可能会引起性能问题\",{\"1\":{\"1884\":1}}],[\"可能会引入不必要的依赖\",{\"1\":{\"932\":1,\"967\":1,\"1030\":1}}],[\"可能会导致类加载错误\",{\"1\":{\"1012\":1}}],[\"可能会导致构建失败\",{\"1\":{\"945\":1}}],[\"可能会导致依赖冲突\",{\"1\":{\"932\":1,\"967\":1,\"1030\":1}}],[\"可能会导致性能问题或失败\",{\"1\":{\"63\":1}}],[\"可能会遇到以下问题\",{\"1\":{\"490\":1}}],[\"可能会产生如下报错fatal\",{\"1\":{\"264\":1}}],[\"可能会过期的数据集server\",{\"1\":{\"157\":1}}],[\"可忽略\",{\"1\":{\"161\":1}}],[\"可清除的日志正在使用\",{\"1\":{\"125\":1}}],[\"可以轻松\",{\"1\":{\"3246\":1}}],[\"可以轻松添加新的实现类\",{\"1\":{\"2331\":1}}],[\"可以来源于远程服务\",{\"1\":{\"3246\":1}}],[\"可以设计\",{\"1\":{\"3154\":1,\"3170\":1}}],[\"可以设置能处理的超过设置的请求数外能额外处理的请求数\",{\"1\":{\"1396\":1}}],[\"可以设置超时\",{\"1\":{\"1129\":1}}],[\"可以定义\",{\"1\":{\"3141\":1}}],[\"可以省略大括号\",{\"1\":{\"3140\":1}}],[\"可以执行其他任务\",{\"1\":{\"3117\":1}}],[\"可以基于serversocket实现简单的http服务器\",{\"1\":{\"3070\":1}}],[\"可以接收integer及其父类的list\",{\"1\":{\"3040\":1}}],[\"可以接收number及其子类的list\",{\"1\":{\"3039\":1}}],[\"可以接收任意泛型类型的list\",{\"1\":{\"3038\":1}}],[\"可以向集合中添加任意类型的对象\",{\"1\":{\"3017\":1}}],[\"可以缓存class对象\",{\"1\":{\"3011\":1}}],[\"可以缓存异常对象\",{\"1\":{\"2942\":1}}],[\"可以直接输出基本数据类型\",{\"1\":{\"2899\":1}}],[\"可以直接查看收集到的信息\",{\"1\":{\"1349\":1}}],[\"可以灵活添加新的输入流类型\",{\"1\":{\"2895\":1}}],[\"可以灵活地存储不同结构的数据\",{\"1\":{\"39\":1}}],[\"可以是电话号码或邮箱地址\",{\"1\":{\"3177\":1}}],[\"可以是两个独立流或一个包含多个流的enumeration枚举\",{\"1\":{\"2889\":1}}],[\"可以是键值对形式\",{\"1\":{\"1435\":1,\"1436\":1}}],[\"可以适当增大缓冲区\",{\"1\":{\"2872\":1}}],[\"可以添加tls监听点\",{\"1\":{\"3218\":1}}],[\"可以添加对话统计信息收集等逻辑\",{\"1\":{\"3209\":1}}],[\"可以添加状态变更监听器等逻辑\",{\"1\":{\"3208\":1}}],[\"可以添加任意类型\",{\"1\":{\"3017\":1}}],[\"可以添加验证逻辑\",{\"1\":{\"2733\":1}}],[\"可以添加浏览器本地缓存\",{\"1\":{\"1377\":1}}],[\"可以替代finalize\",{\"1\":{\"2698\":1}}],[\"可以被回收\",{\"1\":{\"2691\":1}}],[\"可以被多个线程同时访问\",{\"1\":{\"1131\":1}}],[\"可以完全替代hashmap\",{\"1\":{\"2637\":1}}],[\"可以看作是具有行和列的表格结构\",{\"1\":{\"2163\":1}}],[\"可以看到us接近100\",{\"1\":{\"1887\":1}}],[\"可以看到搜索结果中的\",{\"1\":{\"1568\":1}}],[\"可以看到文件同步完毕\",{\"1\":{\"1503\":1}}],[\"可以提高代码的执行效率\",{\"1\":{\"2119\":1}}],[\"可以提高代码的可读性和可维护性\",{\"1\":{\"2095\":1}}],[\"可以作为代码审查的依据之一\",{\"1\":{\"2095\":1}}],[\"可以作为备份机制\",{\"1\":{\"1760\":1}}],[\"可以规范地描述类\",{\"1\":{\"2095\":1}}],[\"可以更好地满足不同的编程需求\",{\"1\":{\"2085\":1}}],[\"可以检验本地或目标网络的延迟\",{\"1\":{\"1917\":1}}],[\"可以利用诸如预读取\",{\"1\":{\"1884\":1}}],[\"可以参照io操作平均等待时间\",{\"1\":{\"1884\":1}}],[\"可以转换为该系统下的文件格式\",{\"1\":{\"1869\":1}}],[\"可以每执行一次\",{\"1\":{\"1867\":1}}],[\"可以但不安全当然开发时可以这样关\",{\"1\":{\"1788\":1}}],[\"可以先卸载之\",{\"1\":{\"1765\":1}}],[\"可以先对数组进行排序\",{\"1\":{\"1170\":1}}],[\"可以让从节点接替主节点\",{\"1\":{\"1763\":1}}],[\"可以运行以下命令来验证\",{\"1\":{\"1747\":1}}],[\"可以找指定数据库里创建\",{\"1\":{\"1736\":1}}],[\"可以尝试下面的命令\",{\"1\":{\"1677\":1}}],[\"可以复制一份改名\",{\"1\":{\"1627\":1}}],[\"可以永久关闭selinux\",{\"1\":{\"1610\":1,\"1672\":1}}],[\"可以方便的从宿主机\",{\"1\":{\"1530\":1}}],[\"可以方便地扩展现有代码\",{\"1\":{\"1216\":1}}],[\"可以用作性能测试\",{\"0\":{\"1867\":1},\"1\":{\"1835\":1}}],[\"可以用来做读写分离\",{\"1\":{\"1760\":1}}],[\"可以用于全文检索\",{\"1\":{\"1507\":1}}],[\"可以用密钥再加密一次\",{\"1\":{\"305\":1}}],[\"可以帮助开发者更好地理解和使用代码\",{\"1\":{\"2095\":1}}],[\"可以帮助我们获取元素\",{\"1\":{\"1455\":1,\"1460\":1}}],[\"可以帮助你可视化地查看和分析依赖冲突\",{\"1\":{\"1021\":1}}],[\"可以大大简化我们的\",{\"1\":{\"1448\":1}}],[\"可以进行其他操作\",{\"1\":{\"1436\":1}}],[\"可以进行复杂的数据处理\",{\"1\":{\"39\":1}}],[\"可以进一步提高后端缓存服务器的效率\",{\"1\":{\"1408\":1}}],[\"可以做网页静态服务器\",{\"1\":{\"1383\":1}}],[\"可以不暴露正式的服务器ip地址\",{\"1\":{\"1382\":1}}],[\"可以修改开启模式为2345\",{\"1\":{\"1368\":1}}],[\"可以修改\",{\"1\":{\"1365\":1}}],[\"可以将查询结果自动映射到泛型实体类或包含泛型的复杂对象\",{\"1\":{\"3053\":1}}],[\"可以将进程按照相应的列进行排序\",{\"1\":{\"1882\":1}}],[\"可以将\",{\"1\":{\"1438\":1,\"1440\":1}}],[\"可以将它们存储在密钥库中\",{\"1\":{\"1358\":1}}],[\"可以将多个简单的函数式接口组合成复杂的逻辑\",{\"1\":{\"557\":1}}],[\"可以发送窗口内的所有数据\",{\"1\":{\"1312\":1}}],[\"可以创建具体类型数组\",{\"1\":{\"1288\":1}}],[\"可以限制反射对私有成员的访问\",{\"1\":{\"1271\":1}}],[\"可以扩展新的异常类型而不修改现有代码\",{\"1\":{\"1252\":1}}],[\"可以处理\",{\"1\":{\"1243\":1}}],[\"可以处理大量的数据\",{\"1\":{\"95\":1}}],[\"可以以第一个字符串为基准\",{\"1\":{\"1170\":1}}],[\"可以中断\",{\"1\":{\"1129\":1}}],[\"可以实现通用的crud操作\",{\"1\":{\"3052\":1}}],[\"可以实现在一台服务器虚拟出多个网站\",{\"1\":{\"1383\":1}}],[\"可以实现公平锁\",{\"1\":{\"1129\":1}}],[\"可以实现一个注解处理器\",{\"1\":{\"1087\":1}}],[\"可以实现并行\",{\"1\":{\"588\":1}}],[\"可以访问静态和实例成员\",{\"1\":{\"1037\":1}}],[\"可以显著减少重复创建和验证的开销\",{\"1\":{\"3011\":1}}],[\"可以显著提高访问速度\",{\"1\":{\"989\":1}}],[\"可以显式地处理null情况\",{\"1\":{\"544\":1}}],[\"可以在启动的容器的时候\",{\"1\":{\"3246\":1}}],[\"可以在这里实现日志记录逻辑\",{\"1\":{\"3137\":1}}],[\"可以在应用启动时进行预热\",{\"1\":{\"3010\":1}}],[\"可以在不修改核心协议的情况下添加新功能\",{\"1\":{\"3220\":1}}],[\"可以在不修改原有代码的情况下\",{\"1\":{\"3009\":1}}],[\"可以在不重新加载整个网页的情况下\",{\"1\":{\"1432\":1}}],[\"可以在保证异常信息完整性的同时\",{\"1\":{\"2960\":1}}],[\"可以在保持应用稳定性的同时\",{\"1\":{\"495\":1}}],[\"可以在任何需要list的地方使用arraylist\",{\"1\":{\"2446\":1}}],[\"可以在shell中运行db\",{\"1\":{\"1739\":1}}],[\"可以在settings\",{\"1\":{\"973\":1,\"981\":1}}],[\"可以在函数中编写我们的逻辑代码\",{\"1\":{\"1433\":1,\"1434\":1,\"1436\":1}}],[\"可以在pom文件中直接声明依赖的版本\",{\"1\":{\"1018\":1}}],[\"可以在pom文件中配置远程仓库\",{\"1\":{\"984\":1}}],[\"可以像其他数据类型一样传递和操作\",{\"1\":{\"548\":1}}],[\"可以考虑异步编程或其他语言如go\",{\"1\":{\"533\":1}}],[\"可以考虑使用asm\",{\"1\":{\"3010\":1}}],[\"可以考虑使用其他方式\",{\"1\":{\"74\":1}}],[\"可以考虑使用基于游标的分页方式来优化\",{\"1\":{\"54\":1}}],[\"可以从以下几个方面利用java\",{\"1\":{\"495\":1}}],[\"可以继续使用\",{\"1\":{\"494\":1}}],[\"可以测试整个应用的功能\",{\"1\":{\"450\":1}}],[\"可以通过下面命令自动下载适应版本的\",{\"1\":{\"3246\":1}}],[\"可以通过system\",{\"1\":{\"2909\":1}}],[\"可以通过spring\",{\"1\":{\"411\":1}}],[\"可以通过自定义inputstream包装类在每个文件内容之间添加分隔符\",{\"1\":{\"2897\":1}}],[\"可以通过封装一个字节数组作为缓冲区\",{\"1\":{\"2873\":1}}],[\"可以通过组合使用inputstreamreader和outputstreamwriter并指定不同编码来实现\",{\"1\":{\"2861\":1}}],[\"可以通过使用自定义双向链表并维护节点引用\",{\"1\":{\"2512\":1}}],[\"可以通过ensurecapacity\",{\"1\":{\"2455\":1}}],[\"可以通过原始集合修改\",{\"1\":{\"2358\":1}}],[\"可以通过javadoc工具生成api文档\",{\"1\":{\"2095\":1}}],[\"可以通过jvm参数禁用\",{\"1\":{\"508\":1}}],[\"可以通过网络设备的吞吐量\",{\"1\":{\"1886\":1}}],[\"可以通过db\",{\"1\":{\"1739\":1}}],[\"可以通过docker\",{\"1\":{\"1629\":1,\"1718\":1}}],[\"可以通过命令lsblk查看使用信息\",{\"1\":{\"1500\":1}}],[\"可以通过array类的newinstance\",{\"1\":{\"1280\":1}}],[\"可以通过application\",{\"1\":{\"445\":1}}],[\"可以通过mongod\",{\"1\":{\"1759\":1}}],[\"可以通过methodhandle进行优化\",{\"1\":{\"1264\":1}}],[\"可以通过multipartfile接口来实现文件上传\",{\"1\":{\"434\":1}}],[\"可以通过不可变对象\",{\"1\":{\"650\":1}}],[\"可以通过threadpoolexecutor的setcorepoolsize\",{\"1\":{\"634\":1}}],[\"可以通过设置适当的锁超时或使用lock接口避免\",{\"1\":{\"616\":1}}],[\"可以通过将类声明为final\",{\"1\":{\"596\":1}}],[\"可以通过以下步骤实现带进度显示的大文件复制\",{\"1\":{\"2837\":1}}],[\"可以通过以下步骤实现基于jwt的认证\",{\"1\":{\"456\":1}}],[\"可以通过以下步骤判断\",{\"1\":{\"1170\":1}}],[\"可以通过以下方式判断class文件是否被篡改\",{\"1\":{\"738\":1}}],[\"可以通过以下策略充分利用npe增强特性\",{\"1\":{\"522\":1}}],[\"可以通过配置多个datasource来实现多数据源\",{\"1\":{\"445\":1}}],[\"可以通过\",{\"1\":{\"434\":1}}],[\"可以通过创建一个注解\",{\"1\":{\"423\":1}}],[\"可以根据判断加载对应的字节码创建对应的bean\",{\"1\":{\"459\":1}}],[\"可以根据需要选择使用\",{\"1\":{\"311\":1}}],[\"可以根据文件结构将它们转换为不同的页面\",{\"1\":{\"11\":1}}],[\"可以降低服务器查询数据库的次数\",{\"1\":{\"305\":1}}],[\"可以导出任意类型的对象列表\",{\"1\":{\"276\":1}}],[\"可以有效解决雪崩现象的\",{\"1\":{\"190\":1}}],[\"可以查看节点的runid\",{\"1\":{\"167\":1}}],[\"可以组合多个阶段来构建复杂的查询\",{\"1\":{\"95\":1}}],[\"可以使用label代替maintainer\",{\"1\":{\"3246\":1}}],[\"可以使用linkedhashmap实现lru\",{\"1\":{\"2427\":1}}],[\"可以使用limit\",{\"1\":{\"1397\":1}}],[\"可以使用通配符创建泛型数组\",{\"1\":{\"3035\":1}}],[\"可以使用类名+字段名作为键\",{\"1\":{\"3011\":1}}],[\"可以使用类名+方法名+参数类型组合作为键\",{\"1\":{\"3011\":1}}],[\"可以使用parameter\",{\"1\":{\"3002\":1}}],[\"可以使用marksupported\",{\"1\":{\"2849\":1}}],[\"可以使用mvn\",{\"1\":{\"1020\":1}}],[\"可以使用try\",{\"1\":{\"2848\":1}}],[\"可以使用cas\",{\"1\":{\"2485\":1}}],[\"可以使用kubernetes\",{\"1\":{\"1660\":1}}],[\"可以使用正则表达式匹配\",{\"1\":{\"1402\":1}}],[\"可以使用默认的用户\",{\"1\":{\"1357\":1}}],[\"可以使用varhandle替代部分反射操作\",{\"1\":{\"1264\":1}}],[\"可以使用<dependencymanagement>标签锁定依赖的版本\",{\"1\":{\"1017\":1}}],[\"可以使用<exclusions>标签排除特定的依赖\",{\"1\":{\"1016\":1}}],[\"可以使用<exclusions>元素来排除它\",{\"1\":{\"928\":1}}],[\"可以使用离线模式\",{\"1\":{\"960\":1}}],[\"可以使用jacoco插件来实现测试覆盖率的统计\",{\"1\":{\"456\":1}}],[\"可以使用synchronized关键字\",{\"1\":{\"618\":1}}],[\"可以使用springboot的encryption\",{\"1\":{\"411\":1}}],[\"可以使用skip\",{\"1\":{\"54\":1}}],[\"可以使用n或nvm这两种工具\",{\"1\":{\"266\":1}}],[\"可以使用\",{\"1\":{\"264\":1,\"950\":1,\"1129\":1,\"1281\":1}}],[\"可以使用事务或读写关注级别\",{\"1\":{\"94\":1}}],[\"可以满足各种复杂的数据处理需求\",{\"1\":{\"62\":1}}],[\"可以满足各种复杂的业务需求\",{\"1\":{\"52\":1}}],[\"提取认证参数\",{\"1\":{\"3215\":1,\"3238\":1}}],[\"提取\",{\"1\":{\"3212\":1}}],[\"提取uri中的域名\",{\"1\":{\"3212\":1}}],[\"提取媒体信息\",{\"1\":{\"3209\":1}}],[\"提取标准头域和扩展头域\",{\"1\":{\"3205\":1}}],[\"提取方法\",{\"1\":{\"3205\":1}}],[\"提取所有人名\",{\"1\":{\"2329\":1}}],[\"提取码\",{\"1\":{\"1418\":1}}],[\"提升map等集合性能\",{\"1\":{\"2300\":1}}],[\"提升用户体验\",{\"1\":{\"1942\":1,\"1944\":1,\"1953\":1}}],[\"提升网络传输效率\",{\"1\":{\"1437\":1}}],[\"提升了开发效率\",{\"1\":{\"1299\":1}}],[\"提升到o\",{\"1\":{\"1196\":1,\"2616\":1,\"2672\":1}}],[\"提交消息到处理队列\",{\"1\":{\"3240\":1}}],[\"提交到线程池处理\",{\"1\":{\"2921\":1}}],[\"提交增量任务\",{\"1\":{\"2522\":1}}],[\"提交工单\",{\"1\":{\"990\":1}}],[\"提交任务\",{\"1\":{\"625\":1,\"626\":1,\"1135\":1,\"2524\":1}}],[\"提交事务\",{\"1\":{\"71\":1,\"91\":1,\"3005\":1}}],[\"提出的网络通信参考模型\",{\"1\":{\"3058\":1}}],[\"提出\",{\"1\":{\"574\":1}}],[\"提前设置访问权限\",{\"1\":{\"2993\":1}}],[\"提前扩容到至少1000容量\",{\"1\":{\"2344\":1}}],[\"提前扩容\",{\"1\":{\"2344\":1,\"2355\":1}}],[\"提前将每台服务器命名\",{\"1\":{\"1637\":1}}],[\"提前将相关的缓存数据直接加载到缓存系统\",{\"1\":{\"189\":1}}],[\"提前预判可能的错误\",{\"1\":{\"1252\":1}}],[\"提前预热各种分类数据id对应的bitmaps\",{\"1\":{\"192\":1}}],[\"提速数据加载过程\",{\"1\":{\"189\":1}}],[\"提醒调用方处理异常\",{\"1\":{\"274\":1}}],[\"提醒\",{\"1\":{\"177\":1}}],[\"提示找不到相关配置\",{\"1\":{\"1764\":1}}],[\"提示400\",{\"1\":{\"1005\":1}}],[\"提示403\",{\"1\":{\"1005\":1}}],[\"提示\",{\"1\":{\"122\":1,\"1304\":1}}],[\"提高cpu利用率\",{\"1\":{\"3128\":1}}],[\"提高哈希冲突严重时的查询性能\",{\"1\":{\"2672\":1}}],[\"提高查询效率\",{\"1\":{\"2607\":1}}],[\"提高查询性能\",{\"1\":{\"39\":1,\"2428\":1}}],[\"提高内存利用率\",{\"1\":{\"2455\":1}}],[\"提高内部构件的复用性\",{\"1\":{\"978\":1,\"989\":1}}],[\"提高比较效率\",{\"1\":{\"2252\":1}}],[\"提高map等容器的性能\",{\"1\":{\"2192\":1}}],[\"提高运行效率\",{\"1\":{\"2117\":1}}],[\"提高访问效率\",{\"1\":{\"2103\":1}}],[\"提高访问速度\",{\"1\":{\"987\":1,\"989\":1}}],[\"提高大文件传输性能\",{\"1\":{\"1345\":1}}],[\"提高io效率\",{\"1\":{\"1321\":1}}],[\"提高io性能\",{\"1\":{\"140\":1}}],[\"提高系统可用性和吞吐量\",{\"1\":{\"3086\":1}}],[\"提高系统稳定性和性能\",{\"1\":{\"1993\":1}}],[\"提高系统吞吐量\",{\"1\":{\"1320\":1,\"3089\":1,\"3128\":1}}],[\"提高系统性能\",{\"1\":{\"597\":1,\"3170\":1}}],[\"提高并发读性能\",{\"1\":{\"2697\":1}}],[\"提高并发性\",{\"1\":{\"2356\":1}}],[\"提高并发性能\",{\"1\":{\"646\":1,\"1138\":1,\"2651\":1}}],[\"提高并发处理能力\",{\"1\":{\"1238\":1,\"1328\":1,\"2919\":1,\"3082\":1}}],[\"提高程序的执行效率和吞吐量\",{\"1\":{\"1137\":1}}],[\"提高线程的复用率\",{\"1\":{\"1134\":1}}],[\"提高代码复用性和类型安全性\",{\"1\":{\"3013\":1}}],[\"提高代码可靠性\",{\"1\":{\"2931\":1}}],[\"提高代码可读性\",{\"1\":{\"2178\":1}}],[\"提高代码可读性和可维护性\",{\"1\":{\"548\":1,\"2958\":1}}],[\"提高代码的可读性和可维护性\",{\"1\":{\"2087\":1}}],[\"提高代码的可读性\",{\"1\":{\"2083\":1}}],[\"提高代码健壮性\",{\"1\":{\"1254\":1}}],[\"提高代码质量和团队协作效率\",{\"1\":{\"1087\":1}}],[\"提高hashmap等容器的性能\",{\"1\":{\"1048\":1}}],[\"提高项目的稳定性和安全性\",{\"1\":{\"989\":1}}],[\"提高可用性\",{\"1\":{\"989\":1}}],[\"提高可读性和可维护性\",{\"1\":{\"537\":1,\"2788\":1}}],[\"提高可读性\",{\"1\":{\"468\":1,\"495\":1,\"539\":1}}],[\"提高构建速度\",{\"1\":{\"978\":1,\"989\":1}}],[\"提高回收效率\",{\"1\":{\"767\":1,\"776\":1}}],[\"提高开发效率和代码质量\",{\"1\":{\"1951\":1,\"1964\":1,\"1977\":1,\"1990\":1}}],[\"提高开发效率\",{\"1\":{\"759\":1,\"1944\":1,\"1957\":1,\"1966\":1,\"1970\":1,\"1979\":1,\"1981\":1,\"1983\":2,\"1992\":1}}],[\"提高了系统的可扩展性\",{\"1\":{\"3220\":1}}],[\"提高了系统的可扩展性和容错能力\",{\"1\":{\"1100\":1}}],[\"提高了系统的灵活性和可维护性\",{\"1\":{\"3009\":1}}],[\"提高了代码的可读性和可维护性\",{\"1\":{\"3154\":1}}],[\"提高了代码的灵活性和可维护性\",{\"1\":{\"3139\":1}}],[\"提高了代码健壮性\",{\"1\":{\"2931\":1}}],[\"提高了代码复用性\",{\"1\":{\"2379\":1}}],[\"提高了依赖的复用性\",{\"1\":{\"1030\":1}}],[\"提高了jvm的启动速度\",{\"1\":{\"751\":1}}],[\"提高了内存利用率\",{\"1\":{\"732\":1}}],[\"提高对象分配效率\",{\"1\":{\"720\":1}}],[\"提高资源利用率\",{\"1\":{\"612\":1}}],[\"提高处理效率\",{\"1\":{\"550\":1}}],[\"提高处理大数据量的效率\",{\"1\":{\"543\":1}}],[\"提高性能\",{\"1\":{\"373\":1,\"1193\":1,\"1224\":1,\"2587\":1,\"2871\":1,\"2919\":1}}],[\"提高吞吐量\",{\"1\":{\"212\":1,\"3240\":1}}],[\"提高ping指令发送的频度\",{\"1\":{\"172\":1}}],[\"提高服务器的读写负载能力\",{\"1\":{\"162\":1}}],[\"提高数据恢复效率\",{\"1\":{\"140\":1}}],[\"提高持久化效率\",{\"1\":{\"140\":1}}],[\"提高磁盘利用率\",{\"1\":{\"140\":1}}],[\"提高操作效率\",{\"1\":{\"54\":1}}],[\"提供启动容器时候的默认命令\",{\"1\":{\"3246\":1}}],[\"提供yum\",{\"1\":{\"3245\":1}}],[\"提供面向连接的可靠字节流传输\",{\"1\":{\"3227\":1}}],[\"提供面向切面编程的支持\",{\"1\":{\"313\":1}}],[\"提供完整的多媒体通信解决方案\",{\"1\":{\"3220\":1}}],[\"提供发送者的实际联系地址\",{\"1\":{\"3180\":1}}],[\"提供网络性能指标和监控能力\",{\"1\":{\"3097\":1}}],[\"提供可视化界面监控jvm网络连接\",{\"1\":{\"3096\":1}}],[\"提供合理的降级策略\",{\"1\":{\"3010\":1}}],[\"提供降级策略\",{\"1\":{\"2993\":1}}],[\"提供有意义的异常消息\",{\"1\":{\"2930\":1,\"2938\":1}}],[\"提供write\",{\"1\":{\"2909\":2}}],[\"提供直观的api设计\",{\"1\":{\"2907\":1}}],[\"提供简单易用的接口\",{\"1\":{\"2907\":1}}],[\"提供简洁api\",{\"1\":{\"1347\":1}}],[\"提供简洁的api和函数式编程接口\",{\"1\":{\"471\":1}}],[\"提供print\",{\"1\":{\"2901\":1}}],[\"提供字符流接口\",{\"1\":{\"2877\":1}}],[\"提供字符序列操作\",{\"1\":{\"2287\":1}}],[\"提供缓冲功能\",{\"1\":{\"2866\":1}}],[\"提供丰富的解析方法\",{\"1\":{\"2861\":1}}],[\"提供丰富的开箱即用的编解码器\",{\"1\":{\"1347\":1}}],[\"提供无参构造方法\",{\"1\":{\"2734\":1}}],[\"提供公共的getter\",{\"1\":{\"2734\":1}}],[\"提供公共方法来访问和修改私有属性\",{\"1\":{\"1203\":1}}],[\"提供适当的性能优化\",{\"1\":{\"2544\":1}}],[\"提供o\",{\"1\":{\"2512\":1,\"2634\":1}}],[\"提供该方法允许手动将容量调整为元素数量\",{\"1\":{\"2445\":1}}],[\"提供comparator比较器\",{\"1\":{\"2388\":1}}],[\"提供channelpipeline责任链模式\",{\"1\":{\"1347\":1}}],[\"提供不同的数据结构实现\",{\"1\":{\"2331\":1}}],[\"提供类型安全\",{\"1\":{\"2314\":1}}],[\"提供更强的可靠性\",{\"1\":{\"3227\":1}}],[\"提供更好性能\",{\"1\":{\"2987\":1}}],[\"提供更高效的双端队列实现\",{\"1\":{\"2549\":1}}],[\"提供更灵活的功能\",{\"1\":{\"2105\":1}}],[\"提供更加丰富的写作功能\",{\"1\":{\"16\":1}}],[\"提供多种注释类型\",{\"1\":{\"2093\":1}}],[\"提供多种策略解决依赖冲突\",{\"1\":{\"930\":1}}],[\"提供文档的各种操作\",{\"1\":{\"1974\":1}}],[\"提供文档的crud操作\",{\"1\":{\"1962\":1}}],[\"提供便捷的文档检索方式\",{\"1\":{\"1966\":1}}],[\"提供便捷的检索方式\",{\"1\":{\"1958\":1}}],[\"提供实用的使用示例\",{\"1\":{\"1953\":1}}],[\"提供用户的crud操作\",{\"1\":{\"1948\":1}}],[\"提供api的使用示例\",{\"1\":{\"1945\":1}}],[\"提供的包内有unzip\",{\"1\":{\"1636\":1}}],[\"提供的包内有k8s\",{\"1\":{\"1636\":1}}],[\"提供的数据结构\",{\"1\":{\"130\":1}}],[\"提供的数据持久化仍然有数据丢失的风险\",{\"1\":{\"128\":1}}],[\"提供服务的域名主机名\",{\"1\":{\"1379\":1,\"1385\":1}}],[\"提供服务的端口\",{\"1\":{\"1379\":1,\"1385\":1}}],[\"提供服务实现\",{\"1\":{\"490\":1}}],[\"提供统一的首尾元素操作\",{\"1\":{\"1198\":1}}],[\"提供任务排队和管理的机制\",{\"1\":{\"1134\":1}}],[\"提供依赖注入和上下文管理\",{\"1\":{\"578\":1}}],[\"提供工具\",{\"1\":{\"570\":1}}],[\"提供强大的安全认证和授权机制\",{\"1\":{\"454\":1}}],[\"提供强大的聚合功能\",{\"1\":{\"39\":1}}],[\"提供一致的编程模型\",{\"1\":{\"443\":1}}],[\"提供一个统一的编程模型\",{\"1\":{\"315\":1}}],[\"提供各种\",{\"1\":{\"396\":1}}],[\"提供指标\",{\"1\":{\"391\":1}}],[\"提供与其他框架的集成支持\",{\"1\":{\"313\":1}}],[\"提供对第三方框架的集成支持\",{\"1\":{\"315\":1}}],[\"提供对web开发的支持\",{\"1\":{\"313\":1}}],[\"提供对jdbc\",{\"1\":{\"313\":1}}],[\"提供声明式事务管理的支持\",{\"1\":{\"313\":1}}],[\"提供了标准的\",{\"1\":{\"3250\":1}}],[\"提供了真正的异步io\",{\"1\":{\"3120\":1}}],[\"提供了类型安全的下限\",{\"1\":{\"3040\":1}}],[\"提供了类型安全的上限\",{\"1\":{\"3039\":1}}],[\"提供了类型安全的常量定义方式\",{\"1\":{\"2816\":1}}],[\"提供了setaccessible\",{\"1\":{\"2989\":1}}],[\"提供了对数据的结构化访问和维护读写位置的机制\",{\"1\":{\"2914\":1}}],[\"提供了与传统io\",{\"1\":{\"2911\":1}}],[\"提供了统一的遍历方式\",{\"1\":{\"2332\":1}}],[\"提供了高效的首尾操作\",{\"1\":{\"2319\":1}}],[\"提供了结构化的流程控制语句\",{\"1\":{\"2136\":1}}],[\"提供了丰富的功能和灵活的扩展机制\",{\"1\":{\"3123\":1}}],[\"提供了丰富的字符串修改方法\",{\"1\":{\"2264\":1}}],[\"提供了丰富的流程控制语句\",{\"1\":{\"2136\":1}}],[\"提供了丰富的运算符\",{\"1\":{\"2117\":1}}],[\"提供了丰富的命令集来操作数据\",{\"1\":{\"195\":1}}],[\"提供了ngx\",{\"1\":{\"1418\":1}}],[\"提供了一个队列\",{\"1\":{\"1378\":1}}],[\"提供了依赖树等工具\",{\"1\":{\"1028\":1}}],[\"提供了多种冲突解决策略\",{\"1\":{\"1028\":1}}],[\"提供了同步和异步两种编程模型\",{\"1\":{\"471\":1}}],[\"提供了自动装配\",{\"1\":{\"398\":1}}],[\"提供了ioc和aop等核心特性\",{\"1\":{\"398\":1}}],[\"提供了更多的功能\",{\"1\":{\"321\":1}}],[\"提供了获取bean\",{\"1\":{\"321\":1}}],[\"提供了服务端禁用用户\",{\"1\":{\"306\":1}}],[\"提供数据方\",{\"1\":{\"161\":1}}],[\"提供高可用性和数据冗余\",{\"1\":{\"69\":1}}],[\"分级存储\",{\"1\":{\"3111\":1}}],[\"分发处理\",{\"1\":{\"3079\":1}}],[\"分发事件到对应的处理器\",{\"1\":{\"2921\":1}}],[\"分配容量为1024字节\",{\"1\":{\"2914\":1}}],[\"分配槽位\",{\"1\":{\"208\":1}}],[\"分为用户代理客户端\",{\"1\":{\"3182\":1}}],[\"分为单reactor单线程\",{\"1\":{\"3083\":1}}],[\"分为error和exception两大分支\",{\"1\":{\"2923\":1}}],[\"分为字节文件流和字符文件流\",{\"1\":{\"2830\":1}}],[\"分为布尔型参数和键值对参数\",{\"1\":{\"790\":1,\"824\":1,\"858\":1,\"892\":1}}],[\"分裂比较器和比较逻辑\",{\"1\":{\"2655\":1}}],[\"分层与关注点分离\",{\"1\":{\"3089\":1}}],[\"分层抽象\",{\"1\":{\"3068\":2}}],[\"分层设计\",{\"1\":{\"2859\":1}}],[\"分层规范体系\",{\"1\":{\"2029\":1}}],[\"分层架构设计\",{\"0\":{\"2006\":1}}],[\"分层架构\",{\"1\":{\"1112\":1}}],[\"分内容进行局部更新\",{\"1\":{\"1436\":1}}],[\"分号后面就是密码\",{\"1\":{\"1422\":1}}],[\"分块上传\",{\"1\":{\"1238\":1}}],[\"分支结构根据条件决定执行哪一段代码\",{\"1\":{\"2124\":1}}],[\"分支结构\",{\"0\":{\"2124\":1},\"1\":{\"1034\":1}}],[\"分代思想在参数中的体现\",{\"0\":{\"810\":1,\"844\":1,\"878\":1,\"912\":1}}],[\"分代回收基于对象存活周期的经验法则\",{\"1\":{\"776\":1}}],[\"分代回收的设计理念\",{\"0\":{\"776\":1}}],[\"分代收集算法\",{\"0\":{\"767\":1}}],[\"分离锁\",{\"1\":{\"2519\":1}}],[\"分离io线程和业务线程\",{\"1\":{\"1347\":1}}],[\"分离信令处理\",{\"1\":{\"1112\":1}}],[\"分离\",{\"1\":{\"550\":1,\"2929\":1,\"3152\":1}}],[\"分\",{\"1\":{\"545\":1,\"1504\":1}}],[\"分组\",{\"1\":{\"2329\":1}}],[\"分组统计\",{\"1\":{\"543\":1}}],[\"分组文档\",{\"1\":{\"58\":1}}],[\"分析每个服务节点的耗时分布\",{\"1\":{\"3111\":1}}],[\"分析网络调用\",{\"1\":{\"3100\":1}}],[\"分析网络相关对象内存占用\",{\"1\":{\"3100\":1}}],[\"分析时需关注循环条件和迭代步长\",{\"1\":{\"2726\":1}}],[\"分析算法时需明确说明是哪种情况的复杂度\",{\"1\":{\"2721\":1}}],[\"分析各自适用的场景\",{\"1\":{\"2672\":1}}],[\"分析linkedhashmap的迭代器实现\",{\"1\":{\"2643\":1}}],[\"分析其实现原理\",{\"1\":{\"2358\":1,\"2996\":1}}],[\"分析其时间复杂度和空间复杂度\",{\"1\":{\"2357\":1}}],[\"分析以下代码的性能瓶颈及优化方案\",{\"1\":{\"2281\":1}}],[\"分析报错\",{\"1\":{\"1655\":1,\"1710\":1}}],[\"分析\",{\"1\":{\"1507\":1}}],[\"分析和实现\",{\"0\":{\"1467\":1}}],[\"分析jvm参数配置\",{\"0\":{\"807\":1,\"841\":1,\"875\":1,\"909\":1}}],[\"分析泄漏对象的引用链\",{\"1\":{\"784\":1}}],[\"分析gc日志\",{\"0\":{\"774\":1}}],[\"分析空值出现的高频场景和原因\",{\"1\":{\"522\":1}}],[\"分析启动类上的注解\",{\"1\":{\"461\":1}}],[\"分钟\",{\"1\":{\"306\":1}}],[\"分批插入\",{\"1\":{\"288\":1}}],[\"分批插入数据\",{\"0\":{\"288\":1}}],[\"分段锁实现\",{\"1\":{\"2697\":1}}],[\"分段锁\",{\"1\":{\"283\":1,\"1197\":1,\"2518\":1,\"2519\":1}}],[\"分4个并行组\",{\"1\":{\"269\":1}}],[\"分隔符\",{\"1\":{\"2861\":1,\"3090\":1}}],[\"分隔\",{\"1\":{\"186\":1}}],[\"分槽是从具有槽的master中划分一部分给其他master\",{\"1\":{\"186\":1}}],[\"分槽\",{\"1\":{\"186\":1}}],[\"分散单台服务器的存储压力\",{\"1\":{\"184\":1}}],[\"分散单台服务器的访问压力\",{\"1\":{\"184\":1}}],[\"分布式系统中常用的容错机制包括\",{\"1\":{\"3087\":1}}],[\"分布式通信设计\",{\"0\":{\"3084\":1}}],[\"分布式追踪定位异常调用链\",{\"1\":{\"3111\":1}}],[\"分布式追踪实践\",{\"1\":{\"3110\":1}}],[\"分布式追踪系统\",{\"0\":{\"3104\":1}}],[\"分布式追踪\",{\"1\":{\"2960\":1}}],[\"分布式搜索引擎\",{\"1\":{\"1507\":1}}],[\"分布式存储\",{\"1\":{\"987\":1,\"1112\":1}}],[\"分布式\",{\"1\":{\"130\":1,\"1046\":1}}],[\"分布式锁\",{\"1\":{\"130\":1,\"191\":1}}],[\"分区列表中的错误出现变化\",{\"1\":{\"125\":1}}],[\"分类\",{\"1\":{\"167\":1}}],[\"分类内存溢出\",{\"1\":{\"125\":1}}],[\"分类失败\",{\"1\":{\"125\":1}}],[\"分类为\",{\"1\":{\"29\":1}}],[\"分别工作在应用层和传输层\",{\"1\":{\"3227\":1}}],[\"分别适用于什么场景\",{\"1\":{\"3091\":1}}],[\"分别适用于单线程和多线程环境\",{\"1\":{\"1168\":1}}],[\"分别对应ioexception和sqlexception的捕获范围\",{\"1\":{\"2935\":1}}],[\"分别对应字节缓冲流和字符缓冲流\",{\"1\":{\"2863\":1}}],[\"分别表示每秒读写次数和每秒读写数据量\",{\"1\":{\"1884\":1}}],[\"分别是系统日志\",{\"1\":{\"1739\":1}}],[\"分别是20\",{\"1\":{\"1405\":1}}],[\"分别上传你项目的snapshot和release版本至指定地址\",{\"1\":{\"994\":1}}],[\"分别运行以下方法观察不同oom异常\",{\"1\":{\"710\":1}}],[\"分别如下\",{\"1\":{\"163\":1}}],[\"分别利用命令启动slave\",{\"0\":{\"103\":1}}],[\"分别切换master\",{\"1\":{\"102\":1}}],[\"分别重启服务\",{\"0\":{\"101\":1,\"109\":1}}],[\"分别给用户授予复制权限\",{\"0\":{\"100\":1,\"108\":1}}],[\"分别为二台master创建各种的用户供对方使用\",{\"1\":{\"99\":1}}],[\"分别到\",{\"1\":{\"98\":1}}],[\"分片适合处理数据量非常大\",{\"1\":{\"75\":1}}],[\"分片虽然可以提供水平扩展\",{\"1\":{\"74\":1}}],[\"分片策略\",{\"1\":{\"70\":1}}],[\"分片集群\",{\"1\":{\"70\":1}}],[\"分片键\",{\"1\":{\"70\":1}}],[\"分片是一种水平扩展方式\",{\"1\":{\"70\":1,\"75\":1}}],[\"分片\",{\"0\":{\"70\":1},\"1\":{\"66\":1}}],[\"分页案例原始环境\",{\"1\":{\"1441\":1}}],[\"分页函数\",{\"1\":{\"284\":1}}],[\"分页查询时使用合适的策略\",{\"1\":{\"95\":1}}],[\"分页\",{\"1\":{\"48\":1,\"58\":1,\"85\":1}}],[\"分页等\",{\"1\":{\"39\":1}}],[\"查阅对应jdk版本的官方文档\",{\"1\":{\"817\":1,\"851\":1,\"885\":1,\"919\":1}}],[\"查找可能的连接泄漏\",{\"1\":{\"3100\":1}}],[\"查找网络相关阻塞线程\",{\"1\":{\"3096\":1}}],[\"查找方法\",{\"1\":{\"3010\":1}}],[\"查找数组中的最大值\",{\"1\":{\"2708\":1}}],[\"查找是否已存在该键\",{\"1\":{\"2683\":1}}],[\"查找节点耗时\",{\"1\":{\"2503\":1}}],[\"查找符合条件的元素\",{\"1\":{\"2408\":1}}],[\"查找最大值\",{\"1\":{\"2408\":1}}],[\"查找最大值和最小值\",{\"1\":{\"2326\":1}}],[\"查找操作的时间复杂度均为o\",{\"1\":{\"2663\":1}}],[\"查找操作\",{\"1\":{\"2371\":1}}],[\"查找性能\",{\"1\":{\"2363\":1}}],[\"查找为主的场景\",{\"1\":{\"2354\":1}}],[\"查找元素\",{\"1\":{\"2326\":1}}],[\"查找元素索引\",{\"1\":{\"2324\":1}}],[\"查找较多time\",{\"1\":{\"1881\":1}}],[\"查找不包含xxx的内容\",{\"1\":{\"1871\":1}}],[\"查找requirepass\",{\"1\":{\"1787\":1}}],[\"查找之前老版本mysql的目录\",{\"1\":{\"1778\":1}}],[\"查找\",{\"1\":{\"1480\":1,\"2148\":1,\"2512\":1,\"2650\":1,\"3047\":1}}],[\"查找版本\",{\"0\":{\"1480\":1}}],[\"查找对应的成员信息\",{\"1\":{\"1263\":1}}],[\"查找子串位置\",{\"1\":{\"1041\":1}}],[\"查找java进程id\",{\"1\":{\"802\":1,\"836\":1,\"870\":1,\"904\":1,\"3096\":1}}],[\"查找镜像\",{\"0\":{\"253\":1}}],[\"查找指定字段的不同值\",{\"1\":{\"60\":1}}],[\"查看nginx服务\",{\"1\":{\"3250\":1}}],[\"查看node标签\",{\"1\":{\"1660\":1}}],[\"查看持久化路径\",{\"1\":{\"3246\":1}}],[\"查看持久化信息\",{\"1\":{\"207\":1}}],[\"查看volume是否存在\",{\"1\":{\"3246\":1}}],[\"查看volume文件\",{\"1\":{\"3246\":1}}],[\"查看volume路径\",{\"1\":{\"3246\":1}}],[\"查看volume\",{\"1\":{\"3246\":1}}],[\"查看运行中的容器\",{\"1\":{\"3245\":1}}],[\"查看默认域\",{\"1\":{\"1940\":1}}],[\"查看帮助信息\",{\"0\":{\"1935\":1}}],[\"查看操作系统日志\",{\"0\":{\"1910\":1}}],[\"查看文件内容\",{\"1\":{\"3246\":1}}],[\"查看文件\",{\"1\":{\"3246\":1}}],[\"查看文件大小\",{\"0\":{\"1908\":1}}],[\"查看文件里有多少行\",{\"1\":{\"1860\":1}}],[\"查看已执行命令历史\",{\"0\":{\"1906\":1}}],[\"查看32还是64\",{\"1\":{\"1903\":1}}],[\"查看最后五十行日志\",{\"1\":{\"1899\":1}}],[\"查看最大连接数\",{\"0\":{\"1826\":1}}],[\"查看iptables状态\",{\"1\":{\"1876\":1}}],[\"查看特定端口占用情况\",{\"1\":{\"3099\":1}}],[\"查看特定依赖的路径\",{\"1\":{\"1020\":1}}],[\"查看特殊字符\",{\"1\":{\"1868\":1}}],[\"查看目录及子目录大小\",{\"1\":{\"1859\":1}}],[\"查看是否激活swarm模式\",{\"1\":{\"3250\":1}}],[\"查看是否通过rpm安装了该软件\",{\"1\":{\"1840\":1}}],[\"查看是否开启binglog日志\",{\"0\":{\"1830\":1}}],[\"查看有几颗cpu\",{\"1\":{\"1838\":1}}],[\"查看有几个逻辑cpu\",{\"1\":{\"1838\":1}}],[\"查看网络吞吐状态\",{\"0\":{\"1886\":1},\"1\":{\"1835\":1}}],[\"查看什么进程使用了该端口\",{\"0\":{\"1874\":1},\"1\":{\"1835\":1}}],[\"查看磁盘占用情况\",{\"1\":{\"1908\":1}}],[\"查看磁盘分区信息\",{\"1\":{\"1859\":1}}],[\"查看磁盘挂载情况\",{\"1\":{\"1859\":1}}],[\"查看磁盘\",{\"0\":{\"1859\":1},\"1\":{\"1835\":1}}],[\"查看域名路由表\",{\"0\":{\"1849\":1},\"1\":{\"1835\":1}}],[\"查看命令路径\",{\"0\":{\"1846\":1},\"1\":{\"1835\":1}}],[\"查看表空间存储位置\",{\"1\":{\"1833\":1}}],[\"查看表空间信息\",{\"0\":{\"1833\":1},\"1\":{\"1833\":1}}],[\"查看相关连接参数\",{\"0\":{\"1818\":1}}],[\"查看\",{\"0\":{\"1809\":1,\"1868\":1},\"1\":{\"1835\":1,\"2349\":1}}],[\"查看k8s详细信息\",{\"0\":{\"1808\":1}}],[\"查看docker版本\",{\"1\":{\"3245\":1}}],[\"查看docker服务状态\",{\"0\":{\"1805\":1}}],[\"查看docker容器日志\",{\"0\":{\"1791\":1}}],[\"查看配置文件信息\",{\"1\":{\"1788\":1}}],[\"查看配置信息\",{\"1\":{\"1764\":1}}],[\"查看防火墙状态\",{\"1\":{\"1788\":1,\"1923\":1}}],[\"查看进程\",{\"1\":{\"1892\":1}}],[\"查看进程及端口\",{\"0\":{\"1892\":1}}],[\"查看进程内存中加载的东西\",{\"1\":{\"1852\":1}}],[\"查看进程内加载的环境变量\",{\"0\":{\"1852\":1},\"1\":{\"1835\":1}}],[\"查看进程启动路径\",{\"0\":{\"1854\":1},\"1\":{\"1835\":1}}],[\"查看进程树找到服务器进程\",{\"0\":{\"1853\":1},\"1\":{\"1835\":1}}],[\"查看进程所有打开最大fd数\",{\"0\":{\"1847\":1},\"1\":{\"1835\":1}}],[\"查看进程redis检查后台进程是否正在运行有两种方式\",{\"1\":{\"1786\":1}}],[\"查看进程jvm参数\",{\"0\":{\"802\":1,\"836\":1,\"870\":1,\"904\":1}}],[\"查看redis密码\",{\"1\":{\"1780\":1}}],[\"查看redis是否在运行\",{\"1\":{\"1780\":1}}],[\"查看安装是否成功\",{\"1\":{\"3246\":1}}],[\"查看安装的位置\",{\"1\":{\"1779\":1}}],[\"查看安装版本\",{\"1\":{\"260\":1}}],[\"查看副本集主节点\",{\"1\":{\"1764\":1}}],[\"查看副本集状态\",{\"1\":{\"1764\":2}}],[\"查看统计或访问system\",{\"1\":{\"1736\":1}}],[\"查看centos中自带的jdk\",{\"0\":{\"1723\":1}}],[\"查看crontab服务状态\",{\"1\":{\"1504\":1}}],[\"查看容器ip\",{\"1\":{\"3255\":1}}],[\"查看容器ip信息\",{\"0\":{\"1806\":1}}],[\"查看容器进程\",{\"1\":{\"3245\":1}}],[\"查看容器的\",{\"1\":{\"1806\":1}}],[\"查看容器组日志\",{\"1\":{\"1688\":1}}],[\"查看容器启动日志\",{\"1\":{\"1569\":1}}],[\"查看tomcat实时日志\",{\"0\":{\"1891\":1}}],[\"查看topic\",{\"0\":{\"1533\":1}}],[\"查看type=websvr标签的node\",{\"1\":{\"1660\":1}}],[\"查看服务日志输出\",{\"1\":{\"3246\":1}}],[\"查看服务下所有容器的的日志\",{\"1\":{\"1655\":1,\"1710\":1}}],[\"查看服务系统性能\",{\"1\":{\"1562\":1}}],[\"查看启动日志\",{\"1\":{\"1646\":1}}],[\"查看启动顺序\",{\"1\":{\"1484\":1,\"1495\":1}}],[\"查看pod描述\",{\"1\":{\"1634\":1}}],[\"查看pod创建进度\",{\"1\":{\"1634\":1}}],[\"查看监听状态\",{\"1\":{\"1574\":1}}],[\"查看oracle版本\",{\"1\":{\"1575\":1}}],[\"查看oracle\",{\"1\":{\"1569\":1}}],[\"查看项目中是否有大量的死循环或有使用大内存的代码\",{\"1\":{\"1558\":1}}],[\"查看调度任务\",{\"1\":{\"1504\":2}}],[\"查看模块下绑定文件夹中的文件\",{\"1\":{\"1503\":1}}],[\"查看模块\",{\"1\":{\"1503\":1}}],[\"查看到的\",{\"1\":{\"1500\":1}}],[\"查看系统版本\",{\"0\":{\"1903\":1}}],[\"查看系统内核版本\",{\"1\":{\"1838\":1}}],[\"查看系统内核信息\",{\"1\":{\"1838\":1}}],[\"查看系统日志\",{\"0\":{\"1883\":1},\"1\":{\"1835\":1}}],[\"查看系统\",{\"0\":{\"1838\":1},\"1\":{\"1835\":1}}],[\"查看系统架构\",{\"1\":{\"1800\":1}}],[\"查看系统是否安装了该工具\",{\"1\":{\"1501\":1}}],[\"查看系统中全部内核\",{\"0\":{\"1498\":1}}],[\"查看系统当前内核版本\",{\"0\":{\"1497\":1}}],[\"查看内核启动序号\",{\"1\":{\"1478\":1}}],[\"查看内存配置是否符合预期\",{\"1\":{\"807\":1,\"841\":1,\"875\":1,\"909\":1}}],[\"查看现有内核启动顺序\",{\"0\":{\"1477\":1}}],[\"查看可安装的软件包\",{\"0\":{\"1475\":1}}],[\"查看zookeeper状态\",{\"1\":{\"1374\":1}}],[\"查看依赖树\",{\"1\":{\"1020\":1}}],[\"查看公钥\",{\"1\":{\"997\":1}}],[\"查看指定进程的jvm参数\",{\"1\":{\"802\":1,\"836\":1,\"870\":1,\"904\":1}}],[\"查看java进程打开的文件描述符\",{\"1\":{\"3099\":1}}],[\"查看java核心类的类加载器\",{\"1\":{\"745\":1}}],[\"查看jvm默认参数\",{\"0\":{\"801\":1,\"835\":1,\"869\":1,\"903\":1}}],[\"查看jvm默认垃圾收集器\",{\"0\":{\"772\":1}}],[\"查看jvm参数\",{\"0\":{\"800\":1,\"834\":1,\"868\":1,\"902\":1}}],[\"查看jvm内存结构示例\",{\"0\":{\"693\":1}}],[\"查看类文件结构\",{\"0\":{\"727\":1},\"1\":{\"727\":1}}],[\"查看记录文件\",{\"1\":{\"480\":1}}],[\"查看初始npm源\",{\"1\":{\"261\":1}}],[\"查看镜像版本\",{\"1\":{\"3245\":1}}],[\"查看镜像架构\",{\"0\":{\"1800\":1}}],[\"查看镜像\",{\"0\":{\"255\":1,\"1629\":1,\"1718\":1}}],[\"查看日志\",{\"0\":{\"1899\":1},\"1\":{\"245\":1,\"1655\":1,\"1710\":1}}],[\"查看密码文件\",{\"0\":{\"1422\":1}}],[\"查看密码\",{\"1\":{\"219\":1}}],[\"查看节点状态\",{\"1\":{\"1764\":1}}],[\"查看节点\",{\"1\":{\"1658\":1}}],[\"查看节点列表\",{\"1\":{\"208\":1}}],[\"查看节点信息\",{\"1\":{\"208\":1}}],[\"查看aof日志重写进度\",{\"1\":{\"207\":1}}],[\"查看哈希中是否存在指定字段\",{\"1\":{\"201\":1}}],[\"查看键的剩余生存时间\",{\"1\":{\"199\":2}}],[\"查看键的类型\",{\"1\":{\"199\":1}}],[\"查看所有持久化文件\",{\"1\":{\"3246\":1}}],[\"查看所有容器id\",{\"1\":{\"3245\":1}}],[\"查看所有tcp连接\",{\"1\":{\"3099\":1}}],[\"查看所有键\",{\"1\":{\"199\":1}}],[\"查看所有数据库\",{\"1\":{\"80\":1}}],[\"查看集群节点\",{\"1\":{\"3250\":2}}],[\"查看集群节点信息\",{\"1\":{\"186\":1}}],[\"查看集合的最大容量\",{\"1\":{\"1739\":1}}],[\"查看集合中的元素\",{\"1\":{\"203\":1}}],[\"查看集合统计信息\",{\"1\":{\"82\":1}}],[\"查看数据库当前的并发连接数\",{\"1\":{\"1575\":1}}],[\"查看数据库当前会话的连接数\",{\"1\":{\"1575\":1}}],[\"查看数据库允许的最大连接数\",{\"1\":{\"1575\":1}}],[\"查看数据库\",{\"1\":{\"123\":1}}],[\"查看数据库统计信息\",{\"1\":{\"80\":1}}],[\"查看版本信息\",{\"1\":{\"1779\":1,\"3248\":1}}],[\"查看版本\",{\"0\":{\"1722\":1,\"1934\":1},\"1\":{\"123\":1,\"263\":1,\"264\":1,\"1620\":1,\"1714\":1,\"1752\":1,\"3261\":1}}],[\"查看mysql某个用户的权限\",{\"0\":{\"1817\":1}}],[\"查看mysql服务当前状态\",{\"1\":{\"1585\":1}}],[\"查看mysql版本\",{\"1\":{\"121\":1}}],[\"查看mysql\",{\"1\":{\"119\":1}}],[\"查看mysql安装路径\",{\"1\":{\"119\":1}}],[\"查看ssl是否安装成功\",{\"1\":{\"1416\":1}}],[\"查看ssl开启情况\",{\"1\":{\"115\":1}}],[\"查看slave状态\",{\"1\":{\"112\":1}}],[\"查看二进制文件名称还有pos位置\",{\"1\":{\"101\":1,\"109\":1}}],[\"查看当前文件大小\",{\"1\":{\"1908\":1}}],[\"查看当前文件总大小\",{\"1\":{\"1908\":1}}],[\"查看当前目录下各个文件\",{\"1\":{\"1859\":1}}],[\"查看当前cpu运行在32bit还是64bit模式下\",{\"1\":{\"1838\":1}}],[\"查看当前用户环境变量\",{\"1\":{\"1838\":1}}],[\"查看当前用户的角色\",{\"1\":{\"1575\":1}}],[\"查看当前redis有没有设置密码\",{\"1\":{\"1787\":1}}],[\"查看当前node\",{\"1\":{\"1660\":1}}],[\"查看当前连接数\",{\"1\":{\"1575\":1}}],[\"查看当前的用户和表空间\",{\"1\":{\"1575\":1}}],[\"查看当前的日志保存天数\",{\"1\":{\"113\":1}}],[\"查看当前类的类加载器\",{\"1\":{\"745\":1}}],[\"查看当前数据库中的key数量\",{\"1\":{\"198\":1}}],[\"查看当前数据库中的所有集合\",{\"1\":{\"82\":1}}],[\"查看当前使用的数据库\",{\"1\":{\"80\":1}}],[\"查看用户连接权限\",{\"0\":{\"1816\":1}}],[\"查看用户\",{\"1\":{\"81\":1}}],[\"查看索引\",{\"1\":{\"68\":1,\"90\":1,\"1513\":1}}],[\"查看详情\",{\"1\":{\"17\":1,\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"22\":1,\"23\":1}}],[\"查询服务器能力\",{\"1\":{\"3179\":1}}],[\"查询文件位置\",{\"0\":{\"1890\":1}}],[\"查询文档\",{\"0\":{\"85\":1}}],[\"查询以abc开头的行\",{\"1\":{\"1871\":1}}],[\"查询剩余的安装包rpm\",{\"1\":{\"1778\":1}}],[\"查询docker安装过的包\",{\"1\":{\"1610\":1,\"1671\":1,\"1741\":1}}],[\"查询docker状态\",{\"1\":{\"1610\":2,\"1741\":2}}],[\"查询是否已安装mariadb\",{\"1\":{\"1580\":1}}],[\"查询实例名\",{\"1\":{\"1575\":1}}],[\"查询所有容器\",{\"1\":{\"3245\":1}}],[\"查询所有的表空间\",{\"1\":{\"1575\":1}}],[\"查询所有文档\",{\"1\":{\"48\":2,\"85\":1}}],[\"查询当前页的数据\",{\"1\":{\"1444\":1}}],[\"查询当前页的下一页数据\",{\"1\":{\"1444\":1}}],[\"查询当前页的上一页数据\",{\"1\":{\"1444\":1}}],[\"查询发布公钥是否成功\",{\"1\":{\"997\":1}}],[\"查询结果\",{\"1\":{\"997\":1}}],[\"查询依赖了\",{\"1\":{\"302\":1}}],[\"查询平均响应时间\",{\"1\":{\"190\":1}}],[\"查询\",{\"1\":{\"169\":1,\"2409\":2}}],[\"查询缓存\",{\"1\":{\"157\":1}}],[\"查询过程中丢失了与mysql服务器的连接\",{\"1\":{\"125\":1}}],[\"查询执行被中断\",{\"1\":{\"125\":1}}],[\"查询高速缓冲设置大小\",{\"1\":{\"125\":1}}],[\"查询为空\",{\"1\":{\"125\":1}}],[\"查询性能更优\",{\"1\":{\"1196\":1}}],[\"查询性能\",{\"1\":{\"94\":1,\"2616\":1,\"2689\":1}}],[\"查询的频率\",{\"1\":{\"75\":1}}],[\"查询单个文档\",{\"1\":{\"48\":1,\"85\":1}}],[\"查询数据时\",{\"1\":{\"53\":1}}],[\"查询数据\",{\"0\":{\"48\":1},\"1\":{\"45\":1}}],[\"查询和索引设计更加复杂\",{\"1\":{\"43\":1}}],[\"查询能力\",{\"1\":{\"39\":1}}],[\"3i3ste5bdbrni9vwwq0bwhralpmutdqdglraepmqxpwruftwlvza0hzskrtdwp6bzjkmujll0jxb\",{\"1\":{\"3273\":1}}],[\"3xx\",{\"1\":{\"3179\":1}}],[\"3=c\",{\"1\":{\"2427\":2,\"2632\":2}}],[\"3行4列的二维数组\",{\"1\":{\"2167\":1}}],[\"3t\",{\"1\":{\"1887\":1}}],[\"3kb\",{\"1\":{\"1667\":1}}],[\"3edc\",{\"1\":{\"1643\":1,\"1644\":1}}],[\"35m\",{\"1\":{\"3273\":1}}],[\"35\",{\"1\":{\"1586\":2,\"1735\":1,\"2329\":1}}],[\"3600\",{\"1\":{\"3170\":1,\"3199\":1,\"3235\":1}}],[\"3600000\",{\"1\":{\"456\":1}}],[\"369a1376f78c\",{\"1\":{\"1811\":2}}],[\"36\",{\"1\":{\"1564\":2,\"1578\":1,\"2072\":1,\"3102\":1}}],[\"3万并发连接数\",{\"1\":{\"1376\":1,\"1377\":1}}],[\"3459425649bbd5c5e379085ec8a009ea\",{\"1\":{\"3260\":1}}],[\"3478\",{\"1\":{\"3224\":1}}],[\"3499732\",{\"1\":{\"1887\":1}}],[\"3499708\",{\"1\":{\"1887\":2}}],[\"3499584\",{\"1\":{\"1887\":1}}],[\"3499840\",{\"1\":{\"1887\":1}}],[\"34\",{\"1\":{\"728\":1,\"1661\":1,\"2271\":1}}],[\"3307\",{\"1\":{\"1578\":1}}],[\"3306\",{\"1\":{\"226\":2,\"235\":2,\"367\":1,\"403\":1,\"404\":1,\"406\":2,\"445\":2,\"1367\":1,\"1577\":3,\"1578\":7,\"1644\":2,\"1648\":1,\"1649\":1,\"1685\":1,\"1688\":1,\"1916\":1}}],[\"333\",{\"1\":{\"1557\":1}}],[\"332\",{\"1\":{\"1557\":1}}],[\"33\",{\"1\":{\"728\":2}}],[\"3提高网络传输安全性\",{\"1\":{\"495\":1}}],[\"3提供了\",{\"1\":{\"482\":1}}],[\"3的支持\",{\"1\":{\"482\":1}}],[\"3支持\",{\"0\":{\"482\":1}}],[\"3<\",{\"1\":{\"307\":1,\"1003\":1}}],[\"3819660\",{\"1\":{\"1887\":5}}],[\"3888\",{\"1\":{\"1529\":2}}],[\"38f\",{\"1\":{\"1440\":1}}],[\"380规范的参数校验\",{\"1\":{\"428\":1}}],[\"38\",{\"1\":{\"286\":1}}],[\"3d\",{\"1\":{\"286\":2}}],[\"3d000\",{\"1\":{\"125\":1}}],[\"39f5b723d1b8\",{\"1\":{\"1794\":1}}],[\"391\",{\"1\":{\"497\":1}}],[\"39\",{\"1\":{\"264\":2,\"286\":1}}],[\"32666\",{\"1\":{\"3282\":3}}],[\"32406\",{\"1\":{\"3273\":1}}],[\"320ms\",{\"1\":{\"2986\":1}}],[\"32000\",{\"1\":{\"1610\":2}}],[\"32767\",{\"1\":{\"2099\":1}}],[\"32768\",{\"1\":{\"2099\":1}}],[\"32位\",{\"1\":{\"2065\":1}}],[\"32位指针表示64位地址\",{\"1\":{\"798\":1,\"832\":1,\"866\":1,\"900\":1}}],[\"323\",{\"1\":{\"1101\":1}}],[\"323协议相比\",{\"1\":{\"1101\":1}}],[\"32\",{\"1\":{\"232\":5,\"728\":2,\"1534\":1,\"1535\":3,\"1684\":5,\"1764\":1,\"2065\":1}}],[\"3主3从\",{\"1\":{\"186\":1}}],[\"3collations\",{\"1\":{\"125\":1}}],[\"37\",{\"1\":{\"121\":1}}],[\"37请看\",{\"1\":{\"118\":1}}],[\"31m\",{\"1\":{\"3273\":1}}],[\"31是一个奇素数\",{\"1\":{\"2295\":1}}],[\"31^\",{\"1\":{\"2295\":2}}],[\"315836\",{\"1\":{\"1887\":5}}],[\"31536000\",{\"1\":{\"160\":2}}],[\"31t03\",{\"1\":{\"1661\":1}}],[\"31368\",{\"1\":{\"1563\":2}}],[\"3128\",{\"1\":{\"1408\":2}}],[\"314159\",{\"1\":{\"1092\":1,\"3180\":1}}],[\"31\",{\"1\":{\"49\":1,\"86\":2,\"118\":1,\"249\":1,\"728\":2,\"1687\":4,\"2295\":3}}],[\"3\",{\"0\":{\"39\":1,\"43\":1,\"49\":1,\"54\":1,\"55\":1,\"60\":1,\"64\":1,\"70\":1,\"75\":1,\"83\":1,\"84\":1,\"85\":1,\"86\":2,\"87\":1,\"91\":1,\"95\":1,\"152\":1,\"155\":1,\"156\":1,\"157\":1,\"162\":1,\"167\":1,\"169\":1,\"170\":1,\"171\":1,\"172\":1,\"173\":2,\"174\":1,\"175\":1,\"176\":1,\"177\":1,\"178\":1,\"179\":2,\"180\":2,\"181\":2,\"182\":3,\"186\":1,\"187\":1,\"201\":1,\"208\":1,\"212\":1,\"223\":1,\"227\":1,\"234\":1,\"240\":1,\"250\":1,\"255\":1,\"273\":1,\"313\":1,\"323\":1,\"332\":1,\"337\":1,\"350\":1,\"365\":1,\"379\":1,\"393\":1,\"398\":1,\"406\":1,\"411\":1,\"412\":1,\"417\":1,\"423\":1,\"429\":1,\"434\":1,\"440\":1,\"445\":1,\"451\":1,\"456\":1,\"473\":1,\"475\":1,\"476\":1,\"477\":1,\"488\":1,\"492\":1,\"493\":1,\"502\":1,\"506\":1,\"507\":1,\"508\":1,\"509\":1,\"510\":2,\"515\":1,\"519\":1,\"520\":1,\"528\":1,\"539\":1,\"550\":1,\"554\":1,\"555\":1,\"564\":1,\"568\":1,\"569\":1,\"579\":1,\"585\":1,\"590\":1,\"595\":1,\"596\":1,\"597\":2,\"601\":1,\"607\":1,\"612\":1,\"613\":1,\"617\":1,\"619\":1,\"623\":1,\"628\":1,\"629\":1,\"633\":1,\"639\":1,\"643\":1,\"645\":1,\"646\":1,\"650\":1,\"656\":1,\"660\":1,\"662\":1,\"663\":1,\"667\":1,\"673\":1,\"677\":1,\"679\":1,\"680\":1,\"681\":2,\"685\":1,\"691\":1,\"696\":1,\"697\":1,\"698\":2,\"702\":1,\"708\":1,\"713\":1,\"714\":1,\"715\":2,\"719\":1,\"721\":1,\"725\":1,\"729\":1,\"731\":1,\"732\":1,\"733\":2,\"737\":1,\"743\":1,\"747\":1,\"749\":1,\"750\":1,\"751\":2,\"755\":1,\"763\":1,\"764\":1,\"765\":1,\"766\":2,\"767\":1,\"774\":1,\"776\":1,\"777\":1,\"778\":2,\"782\":1,\"790\":1,\"794\":1,\"795\":1,\"796\":1,\"797\":2,\"806\":1,\"807\":1,\"809\":1,\"810\":1,\"811\":2,\"815\":1,\"824\":1,\"828\":1,\"829\":1,\"830\":1,\"831\":2,\"840\":1,\"841\":1,\"843\":1,\"844\":1,\"845\":2,\"849\":1,\"858\":1,\"862\":1,\"863\":1,\"864\":1,\"865\":2,\"874\":1,\"875\":1,\"877\":1,\"878\":1,\"879\":2,\"883\":1,\"892\":1,\"896\":1,\"897\":1,\"898\":1,\"899\":2,\"908\":1,\"909\":1,\"911\":1,\"912\":1,\"913\":2,\"917\":1,\"926\":1,\"938\":1,\"955\":1,\"977\":1,\"1012\":1,\"1016\":1,\"1019\":1,\"1020\":1,\"1021\":1,\"1025\":1,\"1042\":1,\"1043\":1,\"1044\":1,\"1046\":1,\"1047\":1,\"1048\":1,\"1049\":1,\"1065\":1,\"1073\":1,\"1084\":1,\"1100\":1,\"1113\":1,\"1117\":1,\"1127\":1,\"1128\":1,\"1129\":1,\"1148\":1,\"1162\":1,\"1166\":1,\"1175\":1,\"1184\":1,\"1185\":1,\"1186\":1,\"1187\":1,\"1205\":1,\"1210\":1,\"1226\":1,\"1227\":1,\"1228\":1,\"1236\":1,\"1248\":1,\"1249\":1,\"1250\":1,\"1261\":1,\"1265\":1,\"1266\":1,\"1267\":1,\"1271\":1,\"1277\":1,\"1278\":1,\"1288\":1,\"1296\":1,\"1303\":1,\"1316\":1,\"1317\":1,\"1318\":1,\"1319\":1,\"1320\":2,\"1321\":1,\"1326\":1,\"1332\":1,\"1338\":1,\"1343\":1,\"1353\":1,\"1359\":1,\"1364\":1,\"1397\":1,\"1406\":1,\"1432\":1,\"1439\":1,\"1443\":1,\"1448\":1,\"1451\":1,\"1455\":1,\"1456\":1,\"1457\":2,\"1458\":1,\"1459\":1,\"1460\":1,\"1463\":1,\"1470\":1,\"1476\":1,\"1482\":1,\"1488\":1,\"1499\":1,\"1510\":1,\"1517\":1,\"1524\":1,\"1531\":1,\"1542\":1,\"1546\":1,\"1582\":1,\"1590\":1,\"1595\":1,\"1600\":1,\"1605\":1,\"1628\":1,\"1638\":1,\"1642\":1,\"1650\":1,\"1681\":1,\"1692\":1,\"1707\":1,\"1717\":1,\"1723\":1,\"1736\":1,\"1768\":1,\"1818\":1,\"1892\":1,\"1896\":1,\"1905\":1,\"1916\":1,\"1946\":1,\"1959\":1,\"1972\":1,\"1985\":1,\"1998\":1,\"2001\":1,\"2008\":1,\"2009\":1,\"2010\":1,\"2022\":1,\"2023\":1,\"2024\":1,\"2036\":1,\"2037\":1,\"2046\":1,\"2059\":1,\"2067\":1,\"2072\":1,\"2078\":1,\"2091\":1,\"2101\":1,\"2111\":1,\"2127\":1,\"2128\":1,\"2129\":1,\"2130\":2,\"2134\":1,\"2148\":1,\"2149\":1,\"2150\":1,\"2151\":2,\"2154\":1,\"2155\":1,\"2156\":1,\"2157\":1,\"2158\":1,\"2159\":1,\"2160\":2,\"2171\":1,\"2176\":1,\"2177\":1,\"2178\":1,\"2179\":1,\"2180\":1,\"2181\":1,\"2182\":2,\"2193\":1,\"2194\":1,\"2195\":1,\"2196\":2,\"2197\":1,\"2200\":1,\"2201\":1,\"2202\":1,\"2203\":1,\"2204\":1,\"2205\":1,\"2206\":2,\"2208\":1,\"2214\":1,\"2218\":1,\"2219\":1,\"2220\":1,\"2221\":1,\"2226\":1,\"2227\":1,\"2228\":1,\"2229\":1,\"2230\":1,\"2231\":1,\"2232\":2,\"2233\":2,\"2244\":1,\"2245\":1,\"2246\":1,\"2251\":1,\"2252\":1,\"2253\":1,\"2254\":1,\"2255\":1,\"2256\":1,\"2257\":2,\"2267\":1,\"2268\":1,\"2269\":1,\"2274\":1,\"2275\":1,\"2276\":1,\"2277\":1,\"2278\":1,\"2279\":1,\"2280\":2,\"2281\":2,\"2289\":1,\"2293\":1,\"2294\":1,\"2295\":1,\"2296\":2,\"2297\":1,\"2304\":1,\"2306\":1,\"2307\":1,\"2308\":1,\"2309\":1,\"2310\":1,\"2311\":1,\"2312\":1,\"2316\":1,\"2326\":1,\"2331\":1,\"2332\":1,\"2333\":2,\"2336\":1,\"2337\":1,\"2342\":1,\"2346\":1,\"2347\":1,\"2348\":1,\"2349\":1,\"2359\":1,\"2363\":1,\"2371\":1,\"2375\":1,\"2376\":1,\"2377\":2,\"2378\":1,\"2379\":1,\"2387\":1,\"2388\":1,\"2396\":2,\"2400\":1,\"2408\":1,\"2412\":1,\"2413\":1,\"2414\":2,\"2415\":1,\"2416\":1,\"2424\":1,\"2430\":1,\"2434\":1,\"2438\":1,\"2443\":1,\"2444\":1,\"2445\":2,\"2446\":1,\"2450\":1,\"2457\":1,\"2461\":1,\"2467\":1,\"2470\":1,\"2471\":1,\"2472\":2,\"2473\":1,\"2479\":1,\"2480\":1,\"2481\":1,\"2487\":1,\"2491\":1,\"2495\":1,\"2500\":1,\"2501\":1,\"2502\":2,\"2503\":1,\"2507\":1,\"2514\":1,\"2518\":1,\"2524\":1,\"2527\":1,\"2528\":1,\"2529\":2,\"2530\":1,\"2538\":1,\"2539\":1,\"2545\":1,\"2549\":1,\"2553\":1,\"2554\":1,\"2555\":1,\"2557\":1,\"2558\":1,\"2559\":2,\"2563\":1,\"2565\":1,\"2569\":1,\"2575\":1,\"2576\":1,\"2577\":1,\"2578\":1,\"2580\":1,\"2581\":1,\"2582\":2,\"2586\":1,\"2589\":1,\"2595\":1,\"2601\":1,\"2603\":1,\"2604\":1,\"2605\":1,\"2607\":1,\"2608\":1,\"2609\":2,\"2610\":1,\"2614\":1,\"2617\":1,\"2623\":1,\"2629\":1,\"2632\":1,\"2634\":1,\"2635\":1,\"2636\":2,\"2637\":1,\"2641\":1,\"2650\":1,\"2656\":1,\"2659\":1,\"2660\":1,\"2661\":1,\"2663\":1,\"2664\":1,\"2665\":2,\"2666\":1,\"2670\":1,\"2677\":1,\"2681\":1,\"2687\":1,\"2688\":1,\"2689\":2,\"2693\":1,\"2703\":1,\"2709\":1,\"2712\":1,\"2714\":1,\"2715\":1,\"2716\":1,\"2717\":1,\"2738\":1,\"2739\":1,\"2740\":1,\"2741\":1,\"2742\":2,\"2744\":1,\"2745\":1,\"2746\":1,\"2747\":1,\"2748\":1,\"2749\":1,\"2750\":2,\"2751\":2,\"2761\":1,\"2764\":1,\"2766\":1,\"2767\":1,\"2768\":1,\"2769\":1,\"2770\":1,\"2771\":2,\"2772\":1,\"2773\":1,\"2774\":1,\"2775\":2,\"2776\":1,\"2777\":1,\"2778\":2,\"2781\":1,\"2786\":1,\"2796\":1,\"2809\":1,\"2820\":1,\"2832\":1,\"2843\":1,\"2850\":1,\"2855\":1,\"2867\":1,\"2879\":1,\"2891\":1,\"2903\":1,\"2915\":1,\"2927\":1,\"2937\":1,\"2949\":1,\"2953\":1,\"2954\":1,\"2955\":1,\"2956\":1,\"2970\":1,\"2985\":1,\"2986\":1,\"2987\":1,\"3004\":1,\"3005\":1,\"3021\":1,\"3022\":1,\"3023\":1,\"3024\":1,\"3025\":2,\"3029\":1,\"3036\":1,\"3040\":1,\"3051\":1,\"3052\":1,\"3053\":1,\"3063\":1,\"3064\":1,\"3065\":1,\"3066\":2,\"3080\":1,\"3081\":1,\"3082\":1,\"3083\":1,\"3087\":1,\"3101\":1,\"3102\":1,\"3103\":1,\"3104\":2,\"3118\":1,\"3122\":1,\"3123\":1,\"3124\":1,\"3125\":2,\"3126\":1,\"3136\":1,\"3149\":1,\"3163\":1,\"3164\":1,\"3165\":1,\"3177\":1,\"3181\":1,\"3182\":1,\"3183\":1,\"3184\":2,\"3185\":1,\"3189\":1,\"3196\":1,\"3206\":1,\"3210\":1,\"3211\":1,\"3212\":1,\"3224\":1,\"3236\":1,\"3267\":1,\"3297\":1,\"3326\":1},\"1\":{\"114\":1,\"116\":1,\"121\":1,\"128\":1,\"129\":1,\"131\":1,\"140\":1,\"150\":1,\"154\":1,\"157\":1,\"171\":2,\"178\":1,\"189\":1,\"190\":4,\"191\":3,\"192\":1,\"219\":1,\"233\":1,\"234\":3,\"250\":1,\"264\":1,\"283\":1,\"285\":2,\"291\":1,\"292\":2,\"305\":1,\"307\":1,\"439\":2,\"459\":2,\"462\":1,\"463\":3,\"472\":3,\"537\":1,\"539\":1,\"543\":3,\"557\":1,\"575\":1,\"578\":1,\"728\":1,\"738\":1,\"756\":1,\"924\":1,\"932\":1,\"936\":1,\"938\":1,\"953\":1,\"954\":1,\"963\":1,\"1040\":1,\"1053\":1,\"1055\":2,\"1068\":1,\"1069\":1,\"1095\":1,\"1160\":2,\"1161\":1,\"1162\":1,\"1178\":2,\"1179\":1,\"1182\":3,\"1191\":1,\"1194\":1,\"1222\":1,\"1246\":1,\"1295\":3,\"1296\":2,\"1337\":1,\"1349\":1,\"1388\":1,\"1392\":1,\"1400\":1,\"1414\":1,\"1416\":1,\"1417\":1,\"1431\":1,\"1432\":1,\"1433\":2,\"1434\":2,\"1435\":2,\"1439\":1,\"1440\":4,\"1443\":2,\"1444\":2,\"1447\":2,\"1450\":2,\"1455\":3,\"1456\":3,\"1457\":2,\"1458\":3,\"1459\":3,\"1461\":2,\"1462\":3,\"1463\":3,\"1464\":2,\"1467\":2,\"1469\":3,\"1478\":1,\"1483\":5,\"1484\":1,\"1490\":2,\"1495\":1,\"1498\":5,\"1499\":5,\"1500\":1,\"1501\":1,\"1503\":4,\"1504\":1,\"1507\":1,\"1535\":1,\"1538\":1,\"1563\":1,\"1576\":1,\"1577\":1,\"1578\":1,\"1581\":1,\"1607\":1,\"1630\":1,\"1636\":1,\"1641\":1,\"1642\":9,\"1658\":1,\"1660\":1,\"1667\":1,\"1669\":1,\"1677\":1,\"1682\":1,\"1685\":1,\"1687\":2,\"1714\":1,\"1736\":1,\"1739\":1,\"1763\":4,\"1764\":6,\"1778\":1,\"1779\":1,\"1780\":1,\"1787\":1,\"1788\":4,\"1790\":1,\"1819\":2,\"1873\":1,\"1879\":1,\"1999\":1,\"2078\":2,\"2080\":3,\"2099\":2,\"2100\":1,\"2101\":1,\"2109\":1,\"2115\":1,\"2126\":2,\"2128\":1,\"2134\":1,\"2144\":3,\"2147\":3,\"2149\":2,\"2151\":4,\"2158\":1,\"2161\":1,\"2167\":4,\"2169\":1,\"2170\":3,\"2180\":2,\"2181\":1,\"2188\":1,\"2194\":1,\"2195\":1,\"2198\":3,\"2212\":2,\"2214\":2,\"2216\":2,\"2217\":2,\"2220\":2,\"2223\":2,\"2230\":2,\"2231\":2,\"2291\":1,\"2294\":1,\"2323\":2,\"2324\":1,\"2325\":1,\"2326\":2,\"2328\":1,\"2329\":1,\"2346\":2,\"2369\":1,\"2370\":1,\"2371\":10,\"2372\":1,\"2373\":1,\"2406\":2,\"2408\":1,\"2410\":1,\"2427\":2,\"2465\":3,\"2466\":1,\"2467\":1,\"2468\":5,\"2480\":3,\"2513\":1,\"2578\":2,\"2632\":2,\"2660\":1,\"2798\":1,\"2821\":1,\"2826\":1,\"2845\":1,\"2902\":1,\"2903\":1,\"2905\":3,\"2914\":1,\"2969\":1,\"2970\":1,\"2971\":1,\"2983\":1,\"2994\":1,\"3003\":2,\"3023\":1,\"3024\":1,\"3025\":3,\"3035\":1,\"3040\":1,\"3047\":3,\"3065\":2,\"3066\":2,\"3085\":1,\"3086\":1,\"3165\":1,\"3208\":1,\"3212\":1,\"3218\":1,\"3232\":1,\"3245\":2,\"3246\":6,\"3250\":2,\"3264\":1}}],[\"300\",{\"1\":{\"3208\":1}}],[\"30004\",{\"1\":{\"1638\":1}}],[\"30003\",{\"1\":{\"1638\":1}}],[\"30002\",{\"1\":{\"1638\":1}}],[\"30001\",{\"1\":{\"1638\":1}}],[\"300000\",{\"1\":{\"3215\":1}}],[\"30000000000000004而非0\",{\"1\":{\"1055\":1}}],[\"30000\",{\"1\":{\"1638\":1}}],[\"3000\",{\"1\":{\"1339\":1,\"1660\":1,\"3069\":1}}],[\"305\",{\"1\":{\"1660\":4}}],[\"30880\",{\"1\":{\"1638\":1}}],[\"30px\",{\"1\":{\"1463\":1}}],[\"30\",{\"1\":{\"37\":1,\"47\":1,\"49\":1,\"84\":2,\"86\":1,\"91\":1,\"113\":2,\"728\":2,\"1004\":1,\"1182\":1,\"1362\":1,\"1513\":1,\"1661\":1,\"1698\":1,\"1764\":1,\"2146\":1,\"2150\":2,\"2224\":2,\"2329\":1,\"2406\":2,\"2407\":1,\"2605\":2,\"2661\":9,\"2969\":1,\"3005\":1,\"3007\":1,\"3100\":1,\"3162\":1}}],[\"b09e\",{\"1\":{\"3278\":3}}],[\"b0002\",{\"1\":{\"2051\":1}}],[\"b0001\",{\"1\":{\"2050\":1,\"2051\":1}}],[\"b1ac620ec7189f47265243bc1a28e91e\",{\"1\":{\"3263\":1}}],[\"b13\",{\"1\":{\"1724\":2}}],[\"b8e0e1036a32364285c732f71ef18665\",{\"1\":{\"3260\":1}}],[\"bw\",{\"1\":{\"2856\":3,\"2861\":3,\"2867\":3,\"2880\":3}}],[\"b和c\",{\"1\":{\"2537\":1}}],[\"b中\",{\"1\":{\"2119\":1}}],[\"b2\",{\"1\":{\"2101\":1}}],[\"b开头\",{\"1\":{\"2051\":1}}],[\"bz\",{\"1\":{\"1843\":1}}],[\"b5wakrsmorwm6ri\",{\"1\":{\"1527\":1}}],[\"b5bf\",{\"1\":{\"118\":1}}],[\"b服务器就是目标服务器\",{\"1\":{\"1501\":1}}],[\"bcols\",{\"1\":{\"2183\":3}}],[\"bcryptpasswordencoder\",{\"1\":{\"2068\":1}}],[\"bcde测试原则\",{\"0\":{\"2047\":1}}],[\"bc\",{\"1\":{\"1486\":1,\"2249\":1}}],[\"b91f945269084aa98e8257311ee713c5\",{\"1\":{\"1484\":1,\"1495\":1}}],[\"bk\",{\"1\":{\"1464\":2}}],[\"bj\",{\"1\":{\"1462\":1}}],[\"b>\",{\"1\":{\"1461\":1}}],[\"bt\",{\"1\":{\"1867\":1}}],[\"btn7\",{\"1\":{\"1462\":2}}],[\"btn6\",{\"1\":{\"1462\":2}}],[\"btn5\",{\"1\":{\"1462\":2,\"1463\":2}}],[\"btn4\",{\"1\":{\"1462\":2,\"1463\":2,\"1464\":2}}],[\"btn3\",{\"1\":{\"1462\":2,\"1463\":2,\"1464\":2}}],[\"btn2\",{\"1\":{\"1451\":1,\"1461\":2,\"1462\":2,\"1463\":2,\"1464\":2}}],[\"btn1\",{\"1\":{\"1451\":2,\"1461\":2,\"1462\":2,\"1463\":2,\"1464\":2}}],[\"btn\",{\"1\":{\"1450\":2,\"1453\":4}}],[\"btree\",{\"1\":{\"232\":2,\"1687\":2}}],[\"bbs\",{\"1\":{\"1389\":2}}],[\"bbs目录下文件\",{\"1\":{\"1389\":1}}],[\"bbs目录\",{\"1\":{\"1389\":1}}],[\"bbbb\",{\"1\":{\"2050\":2}}],[\"bbb\",{\"1\":{\"293\":1,\"1827\":4}}],[\"bd2\",{\"1\":{\"1055\":2}}],[\"bd1\",{\"1\":{\"1055\":2}}],[\"bdcqzh=\",{\"1\":{\"285\":1}}],[\"bdcdyh=\",{\"1\":{\"285\":1}}],[\"b依赖c\",{\"1\":{\"926\":1}}],[\"b又依赖于a\",{\"1\":{\"331\":1}}],[\"brows\",{\"1\":{\"2183\":2}}],[\"browser\",{\"1\":{\"1918\":1,\"3266\":4}}],[\"brokerip1=\",{\"1\":{\"249\":1}}],[\"brokerid\",{\"1\":{\"249\":1}}],[\"brokerrole\",{\"1\":{\"249\":1}}],[\"broker\",{\"1\":{\"249\":1,\"250\":5,\"1530\":4,\"1534\":2,\"1834\":1}}],[\"brokername\",{\"1\":{\"249\":1}}],[\"brokerclustername\",{\"1\":{\"249\":1}}],[\"bridge\",{\"0\":{\"3036\":1},\"1\":{\"1610\":8}}],[\"br\",{\"1\":{\"1221\":2,\"1236\":2,\"1247\":6,\"1610\":1,\"2856\":2,\"2861\":2,\"2867\":2,\"2880\":2,\"2951\":2}}],[\"brave\",{\"1\":{\"3273\":1}}],[\"braceadjustment\",{\"1\":{\"2042\":1}}],[\"brackets\",{\"0\":{\"299\":1}}],[\"branches\",{\"1\":{\"2020\":2}}],[\"branch=z9hg4bk776asdhds\",{\"1\":{\"1092\":1,\"3180\":1}}],[\"branch\",{\"1\":{\"280\":1,\"1656\":1,\"1711\":2,\"3190\":1}}],[\"breed\",{\"1\":{\"291\":3,\"2736\":1}}],[\"brew\",{\"1\":{\"264\":2}}],[\"breaker\",{\"1\":{\"3087\":1}}],[\"break用于跳出循环\",{\"1\":{\"2137\":1}}],[\"break和continue的区别\",{\"1\":{\"2137\":1}}],[\"breakdemo\",{\"1\":{\"2132\":1}}],[\"break与continue\",{\"1\":{\"1034\":1}}],[\"breakparentdelegateclassloader\",{\"1\":{\"747\":2}}],[\"break\",{\"0\":{\"2132\":1},\"1\":{\"125\":1,\"216\":1,\"610\":1,\"1095\":1,\"1161\":1,\"1314\":1,\"1325\":2,\"1337\":2,\"2062\":3,\"2078\":5,\"2126\":6,\"2132\":1,\"2508\":1,\"2575\":1,\"2600\":2,\"2709\":1,\"2809\":3,\"2822\":4,\"2873\":1,\"3154\":1}}],[\"busy\",{\"1\":{\"3196\":1}}],[\"businessoperation\",{\"1\":{\"2937\":1}}],[\"businesshandler\",{\"1\":{\"1332\":2}}],[\"businessexception\",{\"1\":{\"1044\":6,\"1249\":3,\"2037\":1,\"2047\":1,\"2937\":5,\"2956\":2}}],[\"business\",{\"1\":{\"280\":1}}],[\"builtinannotations\",{\"1\":{\"3136\":1}}],[\"build的时候添加文件到image中\",{\"1\":{\"3246\":1}}],[\"build的时候复制文件到image中\",{\"1\":{\"3246\":1}}],[\"buildx\",{\"1\":{\"1793\":2}}],[\"buildinfo\",{\"1\":{\"1738\":1}}],[\"build>\",{\"1\":{\"936\":1,\"941\":1,\"999\":1,\"3147\":1}}],[\"builderclassname\",{\"1\":{\"3162\":4}}],[\"builderconcat\",{\"1\":{\"1041\":1}}],[\"builderprocessor\",{\"1\":{\"3162\":1}}],[\"builder\",{\"1\":{\"456\":1,\"527\":2,\"3097\":2,\"3162\":4}}],[\"build\",{\"1\":{\"248\":4,\"269\":2,\"280\":1,\"438\":1,\"445\":2,\"471\":2,\"529\":1,\"957\":1,\"994\":1,\"999\":3,\"1005\":3,\"1513\":5,\"1551\":1,\"1552\":1,\"1656\":1,\"1711\":1,\"1793\":2,\"2012\":1,\"3085\":1,\"3162\":1,\"3225\":1,\"3246\":7}}],[\"buddy实现无侵入埋点\",{\"1\":{\"3111\":1}}],[\"bundle\",{\"1\":{\"1581\":2,\"1582\":1,\"1767\":1,\"1768\":1}}],[\"but\",{\"0\":{\"1664\":1},\"1\":{\"1578\":1,\"1788\":1,\"3282\":1}}],[\"button\",{\"1\":{\"1440\":2,\"1450\":1,\"1461\":2,\"1462\":7,\"1463\":5,\"1464\":4,\"1467\":3,\"1469\":2}}],[\"butterknife\",{\"1\":{\"1073\":1}}],[\"burst=5\",{\"1\":{\"1396\":2}}],[\"bubblesort\",{\"1\":{\"1161\":2,\"2709\":1}}],[\"bug\",{\"1\":{\"945\":1}}],[\"bugs\",{\"1\":{\"283\":1}}],[\"buff\",{\"1\":{\"1887\":2}}],[\"buffer泄漏\",{\"1\":{\"3129\":1}}],[\"buffer操作流程\",{\"1\":{\"3116\":1}}],[\"buffer操作顺序问题\",{\"1\":{\"2920\":1}}],[\"buffer类\",{\"1\":{\"3116\":1}}],[\"buffer是nio中数据存储的基本单元\",{\"1\":{\"3116\":1}}],[\"buffer是nio中用于存储数据的容器\",{\"1\":{\"2914\":1}}],[\"buffer缓冲区\",{\"0\":{\"3116\":1}}],[\"buffer池化复用\",{\"1\":{\"3091\":1}}],[\"buffer管理不当\",{\"1\":{\"3090\":1}}],[\"buffer和selector实现非阻塞io操作\",{\"1\":{\"3079\":1}}],[\"buffer的核心方法\",{\"1\":{\"2914\":1}}],[\"buffer的核心属性\",{\"1\":{\"2914\":1,\"3116\":1}}],[\"bufferexample\",{\"1\":{\"2914\":1}}],[\"bufferedbytestreamexample\",{\"1\":{\"2866\":1}}],[\"buffered\",{\"1\":{\"2863\":1}}],[\"bufferedcharstreamexample\",{\"1\":{\"2856\":1,\"2867\":1}}],[\"bufferedwriter\",{\"1\":{\"1224\":1,\"2856\":3,\"2860\":1,\"2861\":2,\"2867\":3,\"2869\":1,\"2880\":3}}],[\"bufferedreader和bufferedwriter用于包装字符流\",{\"1\":{\"2867\":1}}],[\"bufferedreader和bufferedwriter\",{\"1\":{\"2863\":1}}],[\"bufferedreader和bufferedwriter提供缓冲功能\",{\"1\":{\"2856\":1}}],[\"bufferedreader是更好的选择\",{\"1\":{\"2861\":1}}],[\"bufferedreader\",{\"1\":{\"1221\":2,\"1224\":1,\"1236\":4,\"1247\":4,\"1314\":2,\"2856\":3,\"2860\":1,\"2861\":3,\"2867\":3,\"2869\":1,\"2880\":3,\"2951\":2,\"3070\":2}}],[\"bufferedinputstream和bufferedoutputstream用于包装字节流\",{\"1\":{\"2866\":1}}],[\"bufferedinputstream包装fileinputstream添加缓冲功能\",{\"1\":{\"1231\":1}}],[\"bufferedinputstream\",{\"1\":{\"1221\":2,\"1222\":2,\"1224\":3,\"2849\":3,\"2866\":3,\"2868\":2}}],[\"bufferedoutputstream\",{\"1\":{\"286\":2,\"1222\":2,\"1224\":5,\"2863\":1,\"2866\":3,\"2868\":2,\"2893\":2,\"2897\":2}}],[\"buffer基本操作示例\",{\"1\":{\"2914\":1}}],[\"buffer本质上是一个数组\",{\"1\":{\"2914\":1}}],[\"bufferperformancecomparison\",{\"1\":{\"2868\":1}}],[\"bufferperformanceexample\",{\"1\":{\"1224\":1}}],[\"buffersize\",{\"1\":{\"2873\":2,\"3240\":2}}],[\"buffers\",{\"1\":{\"1885\":8}}],[\"buffer\",{\"0\":{\"2914\":1},\"1\":{\"125\":1,\"286\":3,\"720\":1,\"729\":3,\"746\":3,\"747\":3,\"1221\":3,\"1224\":5,\"1227\":1,\"1228\":9,\"1235\":7,\"1238\":18,\"1315\":12,\"1321\":3,\"1324\":5,\"1325\":9,\"1338\":12,\"1885\":1,\"1887\":1,\"2037\":1,\"2466\":16,\"2831\":4,\"2833\":3,\"2837\":3,\"2843\":3,\"2844\":3,\"2849\":3,\"2855\":3,\"2857\":6,\"2866\":7,\"2868\":9,\"2873\":5,\"2878\":6,\"2885\":3,\"2892\":3,\"2893\":3,\"2897\":3,\"2911\":2,\"2913\":1,\"2914\":18,\"2915\":5,\"2916\":9,\"2917\":5,\"2921\":14,\"3065\":6,\"3066\":3,\"3079\":5,\"3116\":11,\"3117\":7,\"3118\":9,\"3120\":21,\"3218\":1}}],[\"buf\",{\"1\":{\"125\":1}}],[\"black\",{\"1\":{\"2654\":1,\"2656\":7}}],[\"blackberry\",{\"1\":{\"2324\":4}}],[\"blankstr\",{\"1\":{\"472\":2}}],[\"blueberry\",{\"1\":{\"2324\":3}}],[\"blue\",{\"1\":{\"1452\":3,\"1463\":1,\"2144\":1}}],[\"blur\",{\"1\":{\"1433\":1,\"1434\":1,\"1435\":1,\"1450\":1}}],[\"blpop等\",{\"1\":{\"193\":1}}],[\"block\",{\"1\":{\"1687\":2,\"1809\":1,\"1940\":1,\"2027\":1}}],[\"blocking\",{\"0\":{\"1314\":1,\"1315\":1},\"1\":{\"2913\":1,\"3113\":1}}],[\"blockingqueue<integer>\",{\"1\":{\"2466\":5}}],[\"blockingqueue<string>\",{\"1\":{\"2465\":1,\"2478\":1,\"2539\":3}}],[\"blockingqueue<socket>\",{\"1\":{\"1326\":1}}],[\"blockingqueue\",{\"1\":{\"1132\":1,\"2465\":6,\"2466\":1}}],[\"blockcount\",{\"1\":{\"1238\":4}}],[\"blocksize\",{\"1\":{\"1238\":5}}],[\"blocklock\",{\"1\":{\"641\":1}}],[\"blocked\",{\"1\":{\"125\":1,\"193\":1,\"605\":1}}],[\"blog\",{\"1\":{\"281\":1,\"1536\":1,\"1642\":1,\"1738\":1}}],[\"blobs\",{\"1\":{\"125\":1}}],[\"blob列\",{\"1\":{\"125\":1}}],[\"blob\",{\"1\":{\"125\":6}}],[\"b类80分钟\",{\"1\":{\"190\":1}}],[\"bgrewriteaof\",{\"1\":{\"140\":1,\"207\":1}}],[\"bgsave\",{\"1\":{\"138\":1,\"207\":1,\"1788\":4}}],[\"bgsave指令每次运行要执行fork操作创建子进程\",{\"1\":{\"138\":1}}],[\"bgsave指令\",{\"1\":{\"138\":1}}],[\"bg其实是background的意思\",{\"1\":{\"138\":1}}],[\"b\",{\"1\":{\"125\":1,\"140\":2,\"303\":1,\"473\":1,\"502\":2,\"537\":4,\"538\":3,\"539\":1,\"673\":1,\"729\":3,\"1040\":3,\"1111\":3,\"1145\":1,\"1185\":1,\"1190\":3,\"1191\":2,\"1194\":2,\"1205\":4,\"1270\":2,\"1295\":2,\"1456\":4,\"1458\":1,\"1460\":2,\"1501\":1,\"1637\":1,\"1827\":8,\"1887\":2,\"2062\":1,\"2080\":1,\"2090\":2,\"2099\":1,\"2100\":1,\"2101\":2,\"2109\":8,\"2110\":7,\"2111\":5,\"2112\":4,\"2113\":12,\"2114\":6,\"2115\":2,\"2119\":1,\"2174\":2,\"2183\":4,\"2198\":1,\"2223\":2,\"2249\":4,\"2304\":3,\"2320\":1,\"2323\":1,\"2326\":2,\"2340\":6,\"2342\":2,\"2352\":1,\"2358\":1,\"2369\":2,\"2372\":4,\"2382\":1,\"2406\":1,\"2410\":1,\"2427\":1,\"2448\":5,\"2450\":1,\"2465\":4,\"2477\":2,\"2506\":3,\"2507\":5,\"2509\":1,\"2537\":1,\"2578\":2,\"2629\":5,\"2630\":5,\"2632\":1,\"2711\":4,\"2716\":5,\"2741\":8,\"2784\":2,\"2786\":6,\"2798\":3,\"2832\":1,\"2841\":2,\"2842\":3,\"2868\":3,\"2873\":4,\"2903\":1,\"2970\":2,\"3023\":1,\"3125\":3,\"3215\":2}}],[\"borrowobject\",{\"1\":{\"3241\":1}}],[\"borrowconnection\",{\"1\":{\"3241\":1}}],[\"boringssl\",{\"1\":{\"3097\":1}}],[\"border=\",{\"1\":{\"1467\":1}}],[\"border\",{\"1\":{\"1440\":3,\"1463\":2,\"1469\":2}}],[\"bo就要大于0\",{\"1\":{\"1887\":1}}],[\"bo\",{\"1\":{\"1887\":2}}],[\"boxed\",{\"1\":{\"2452\":1}}],[\"box\",{\"1\":{\"1443\":1,\"1444\":1}}],[\"bottom\",{\"1\":{\"1162\":7,\"1443\":2}}],[\"boston\",{\"1\":{\"1578\":1,\"3007\":2}}],[\"bos\",{\"1\":{\"1222\":2,\"1224\":4,\"2866\":3,\"2868\":2}}],[\"bossgroup\",{\"1\":{\"1111\":4,\"1332\":3,\"3125\":3}}],[\"bosh\",{\"1\":{\"122\":1}}],[\"bob返回200\",{\"1\":{\"3189\":1}}],[\"bob接听后\",{\"1\":{\"3188\":1}}],[\"bob的ua\",{\"1\":{\"3188\":1}}],[\"bob\",{\"1\":{\"469\":1,\"543\":1,\"575\":1,\"1092\":3,\"1094\":1,\"1182\":1,\"2167\":1,\"2217\":2,\"2224\":2,\"2232\":1,\"2577\":2,\"3180\":3,\"3190\":1}}],[\"boolvalue\",{\"1\":{\"2845\":2}}],[\"boolarray\",{\"1\":{\"2223\":2}}],[\"bool\",{\"1\":{\"2080\":1,\"2099\":1}}],[\"boolstr\",{\"1\":{\"1040\":1,\"2198\":1}}],[\"boolean>\",{\"1\":{\"469\":1,\"2544\":1}}],[\"boolean\",{\"1\":{\"232\":1,\"279\":1,\"287\":2,\"289\":1,\"307\":1,\"430\":1,\"456\":1,\"472\":1,\"538\":1,\"544\":1,\"545\":1,\"658\":1,\"660\":1,\"676\":1,\"1040\":4,\"1068\":2,\"1087\":1,\"1161\":1,\"1165\":1,\"1170\":2,\"1182\":1,\"1208\":1,\"1222\":1,\"1253\":2,\"1312\":1,\"1326\":1,\"1684\":1,\"1974\":1,\"1975\":1,\"1987\":1,\"1988\":1,\"1997\":1,\"2080\":1,\"2099\":1,\"2110\":6,\"2111\":7,\"2115\":1,\"2194\":3,\"2195\":3,\"2198\":2,\"2213\":1,\"2223\":1,\"2294\":1,\"2314\":10,\"2318\":1,\"2324\":1,\"2327\":2,\"2356\":4,\"2369\":1,\"2372\":1,\"2392\":2,\"2427\":1,\"2437\":1,\"2440\":1,\"2441\":1,\"2456\":2,\"2465\":1,\"2477\":1,\"2494\":2,\"2495\":1,\"2496\":1,\"2498\":3,\"2513\":1,\"2544\":4,\"2552\":1,\"2554\":1,\"2573\":1,\"2600\":2,\"2602\":3,\"2605\":1,\"2627\":1,\"2628\":1,\"2631\":3,\"2632\":1,\"2642\":1,\"2654\":1,\"2658\":1,\"2680\":1,\"2709\":1,\"2759\":1,\"2766\":1,\"2832\":1,\"2841\":1,\"2845\":1,\"2853\":2,\"2959\":3,\"2986\":1,\"2989\":1,\"2999\":1,\"3000\":1,\"3002\":2,\"3005\":2,\"3007\":1,\"3046\":1,\"3137\":1,\"3141\":1,\"3147\":1,\"3154\":3,\"3162\":1,\"3170\":1,\"3215\":2,\"3238\":1}}],[\"bootproto=\",{\"1\":{\"3266\":4}}],[\"bootproto=dhcp\",{\"1\":{\"1918\":1}}],[\"boot内置服务器\",{\"1\":{\"1347\":1}}],[\"boot尚未出现\",{\"1\":{\"580\":1}}],[\"boot\",{\"1\":{\"394\":3,\"398\":1,\"416\":3,\"428\":1,\"438\":2,\"439\":2,\"440\":2,\"449\":2,\"451\":2,\"571\":1,\"1490\":1,\"3275\":1}}],[\"boot<\",{\"1\":{\"394\":3,\"416\":3,\"428\":1,\"438\":1,\"439\":1,\"440\":1,\"449\":1,\"451\":1}}],[\"bootstrapclassloader\",{\"1\":{\"745\":2,\"1147\":2}}],[\"bootstrap\",{\"1\":{\"270\":1,\"280\":1,\"742\":1,\"1332\":3,\"1532\":2,\"1533\":1,\"1535\":3,\"1661\":1,\"3124\":1}}],[\"boundedtypedemo\",{\"1\":{\"3025\":1}}],[\"boundary\",{\"1\":{\"2047\":1}}],[\"bound\",{\"1\":{\"125\":1,\"3278\":2}}],[\"body><\",{\"1\":{\"2921\":1}}],[\"body>\",{\"1\":{\"1431\":1,\"1433\":1,\"1434\":1,\"1435\":1,\"1440\":1,\"1447\":1,\"1450\":1,\"1455\":1,\"1456\":1,\"1457\":1,\"1458\":1,\"1459\":1,\"1461\":1,\"1462\":1,\"1463\":1,\"1464\":1,\"1467\":1,\"1469\":1}}],[\"bodypublishers\",{\"1\":{\"471\":1}}],[\"bodyhandlers\",{\"1\":{\"471\":3,\"491\":2,\"529\":1}}],[\"body=responseentity\",{\"1\":{\"285\":2}}],[\"body\",{\"1\":{\"125\":1,\"216\":1,\"429\":2,\"471\":2,\"491\":2,\"1384\":1,\"2007\":1,\"2065\":1,\"2960\":1}}],[\"biconsumer\",{\"1\":{\"2407\":1}}],[\"bi和bo一般都要接近0\",{\"1\":{\"1887\":1}}],[\"bi\",{\"1\":{\"1887\":2}}],[\"bitoperatordemo\",{\"1\":{\"2112\":1}}],[\"bit\",{\"1\":{\"1579\":1,\"1838\":1,\"1903\":1,\"2112\":1}}],[\"bitmap\",{\"1\":{\"130\":1,\"131\":1}}],[\"bio是java最早的io模型\",{\"1\":{\"3078\":1}}],[\"bio服务器端示例\",{\"1\":{\"3078\":1}}],[\"bio服务器启动\",{\"1\":{\"1314\":1}}],[\"bio服务器示例\",{\"1\":{\"1314\":1}}],[\"bioserver\",{\"1\":{\"1314\":1}}],[\"bio\",{\"0\":{\"1314\":1,\"3078\":1},\"1\":{\"1227\":1,\"1238\":1,\"2913\":1}}],[\"bison\",{\"1\":{\"1486\":1}}],[\"bis\",{\"1\":{\"1221\":2,\"1222\":2,\"1224\":2,\"2849\":7,\"2866\":2,\"2868\":2}}],[\"bird\",{\"1\":{\"1205\":1,\"1210\":4,\"2738\":2,\"2740\":1,\"2748\":3}}],[\"birthday=\",{\"1\":{\"1225\":1}}],[\"birthday\",{\"1\":{\"545\":3,\"1225\":5,\"2779\":5}}],[\"bifunction\",{\"1\":{\"469\":1}}],[\"bifunction<integer\",{\"1\":{\"469\":1}}],[\"bigdecimal\",{\"1\":{\"1055\":5,\"2007\":4,\"2947\":2}}],[\"bigint\",{\"1\":{\"232\":13,\"1684\":13,\"1687\":3}}],[\"bigger\",{\"1\":{\"125\":1}}],[\"big\",{\"1\":{\"125\":10,\"1469\":1,\"1470\":2}}],[\"bincount\",{\"1\":{\"2600\":2}}],[\"bin目录下\",{\"1\":{\"1786\":1}}],[\"bin目录\",{\"1\":{\"1619\":1,\"1751\":1,\"1785\":1}}],[\"bindata\",{\"1\":{\"1764\":1}}],[\"bindip\",{\"1\":{\"1734\":2,\"1764\":1}}],[\"bind\",{\"1\":{\"1111\":1,\"1228\":1,\"1238\":1,\"1315\":1,\"1324\":1,\"1332\":1,\"1569\":1,\"1734\":1,\"1764\":1,\"2916\":1,\"2921\":2,\"3079\":1,\"3118\":1,\"3120\":1,\"3125\":1}}],[\"bindview生成视图绑定代码\",{\"1\":{\"1073\":1}}],[\"binlog已关闭\",{\"1\":{\"125\":1}}],[\"binlog\",{\"1\":{\"122\":1,\"125\":9}}],[\"bin>mysql\",{\"1\":{\"121\":1,\"122\":1,\"123\":1}}],[\"bin>mysqld\",{\"1\":{\"119\":1}}],[\"bin>cd\",{\"1\":{\"119\":1}}],[\"bin\",{\"1\":{\"98\":4,\"102\":2,\"106\":2,\"110\":1,\"113\":1,\"115\":2,\"119\":1,\"120\":1,\"121\":1,\"125\":3,\"219\":2,\"232\":9,\"264\":1,\"998\":1,\"999\":1,\"1005\":1,\"1354\":3,\"1358\":3,\"1369\":4,\"1370\":3,\"1371\":2,\"1372\":4,\"1373\":2,\"1503\":2,\"1520\":1,\"1531\":1,\"1532\":2,\"1533\":2,\"1534\":1,\"1535\":2,\"1570\":2,\"1607\":1,\"1619\":1,\"1620\":2,\"1624\":3,\"1634\":1,\"1638\":1,\"1675\":1,\"1677\":2,\"1684\":9,\"1714\":7,\"1731\":1,\"1734\":3,\"1736\":1,\"1747\":3,\"1751\":1,\"1752\":2,\"1756\":4,\"1760\":1,\"1764\":1,\"1786\":2,\"1787\":1,\"3246\":4,\"3248\":2,\"3249\":1}}],[\"binarysearch\",{\"1\":{\"1161\":2,\"2150\":1,\"2326\":1,\"2710\":1,\"3047\":1}}],[\"binaryoperator<integer>\",{\"1\":{\"537\":1}}],[\"binary\",{\"1\":{\"38\":1,\"125\":1}}],[\"bais\",{\"1\":{\"2844\":2}}],[\"balance\",{\"1\":{\"2750\":10}}],[\"banana\",{\"1\":{\"2144\":1,\"2197\":1,\"2213\":2,\"2216\":2,\"2218\":2,\"2220\":2,\"2221\":2,\"2324\":3,\"2369\":2,\"2370\":1,\"2371\":2,\"2406\":2,\"2407\":2,\"2408\":1,\"2660\":2}}],[\"bankaccount\",{\"1\":{\"2750\":2}}],[\"bank\",{\"1\":{\"1656\":1,\"1711\":1}}],[\"bak的文件\",{\"1\":{\"1873\":1}}],[\"bak\",{\"1\":{\"1869\":1,\"1873\":1}}],[\"back\",{\"1\":{\"3005\":1}}],[\"backingmap\",{\"1\":{\"2544\":5}}],[\"backend\",{\"1\":{\"1548\":1,\"3104\":1}}],[\"background\",{\"1\":{\"1440\":1,\"1452\":6,\"1463\":2,\"1467\":3,\"1469\":1}}],[\"backserver\",{\"1\":{\"1404\":1,\"1405\":1,\"1406\":1,\"1407\":1,\"1408\":1,\"1409\":1}}],[\"backlog\",{\"1\":{\"166\":1,\"171\":1,\"1111\":1,\"3125\":1}}],[\"bar\",{\"1\":{\"1412\":2}}],[\"bark\",{\"1\":{\"1204\":1,\"2736\":1,\"2749\":1,\"2797\":1}}],[\"barrier\",{\"1\":{\"186\":1,\"662\":1}}],[\"babe\",{\"1\":{\"738\":1}}],[\"baos\",{\"1\":{\"729\":3,\"746\":3,\"747\":3,\"2844\":3,\"2904\":6}}],[\"batchprocessingexception\",{\"1\":{\"2953\":1}}],[\"batchprocess\",{\"1\":{\"2953\":1}}],[\"batchindex\",{\"1\":{\"288\":4}}],[\"batch\",{\"1\":{\"288\":8}}],[\"bash\",{\"1\":{\"219\":1,\"227\":1,\"256\":1,\"264\":3,\"1354\":1,\"1369\":2,\"1370\":1,\"1371\":1,\"1372\":1,\"1373\":1,\"1520\":1,\"1531\":1,\"1570\":1,\"1577\":1,\"1578\":1,\"1842\":1,\"3246\":2}}],[\"basicbytestreamexample\",{\"1\":{\"2843\":1}}],[\"basicdatatypedemo\",{\"1\":{\"2099\":1}}],[\"basicoffset\",{\"1\":{\"2042\":1}}],[\"basicauth\",{\"1\":{\"1638\":1}}],[\"basicnpeexample\",{\"1\":{\"500\":1}}],[\"basic\",{\"1\":{\"193\":1,\"1418\":1,\"1423\":2,\"1427\":2}}],[\"baseurl=https\",{\"1\":{\"3273\":2}}],[\"baseentity<t>\",{\"1\":{\"3053\":1}}],[\"baseresultmap\",{\"1\":{\"3053\":2}}],[\"basemapper<user>\",{\"1\":{\"3052\":1}}],[\"basemapper<t>\",{\"1\":{\"3052\":1}}],[\"base基础镜像引用\",{\"1\":{\"1551\":1}}],[\"base基础镜像版本\",{\"1\":{\"1551\":1}}],[\"base模块中的java\",{\"1\":{\"1281\":1}}],[\"base64urlencode\",{\"1\":{\"303\":2}}],[\"base64\",{\"1\":{\"303\":2,\"1764\":1}}],[\"basedao<order>\",{\"1\":{\"3049\":1}}],[\"basedao<user>\",{\"1\":{\"3049\":1}}],[\"basedao<t>\",{\"1\":{\"3049\":2}}],[\"basedaoimpl<t>\",{\"1\":{\"3049\":1}}],[\"basedept8023\",{\"1\":{\"280\":1}}],[\"basedir=\",{\"1\":{\"583\":1}}],[\"basedir\",{\"1\":{\"119\":1,\"957\":1}}],[\"base\",{\"1\":{\"248\":1,\"1551\":2,\"1831\":1,\"2994\":1,\"3104\":1}}],[\"basepath\",{\"1\":{\"119\":1}}],[\"badlrucache\",{\"1\":{\"2642\":2}}],[\"badprocessorder\",{\"1\":{\"2061\":1}}],[\"badusers\",{\"1\":{\"2057\":1}}],[\"badaodechengxvyuan\",{\"1\":{\"1794\":1}}],[\"badstatement\",{\"1\":{\"125\":1}}],[\"badselect\",{\"1\":{\"125\":1}}],[\"badreturn\",{\"1\":{\"125\":1}}],[\"bad\",{\"1\":{\"125\":13,\"1005\":1}}],[\"b75e3be1f18b\",{\"1\":{\"118\":1}}],[\"bytedata\",{\"1\":{\"2844\":3}}],[\"bytearray\",{\"1\":{\"2844\":1}}],[\"bytearraystreamexample\",{\"1\":{\"2844\":1}}],[\"bytearrayinputstream\",{\"1\":{\"2844\":3,\"2891\":5,\"2892\":9,\"2897\":1}}],[\"bytearrayoutputstream\",{\"1\":{\"729\":2,\"746\":2,\"747\":2,\"2844\":3,\"2904\":3}}],[\"bytes\",{\"1\":{\"1315\":3,\"1324\":3,\"1595\":1,\"1833\":3,\"2188\":2}}],[\"bytesread\",{\"1\":{\"286\":3,\"729\":3,\"746\":3,\"747\":3,\"1221\":3,\"1224\":3,\"1228\":2,\"1238\":2,\"1315\":3,\"1321\":3,\"1324\":2,\"1338\":2,\"2837\":4,\"2843\":3,\"2844\":2,\"2849\":4,\"2866\":3,\"2868\":3,\"2873\":5,\"2885\":2,\"2892\":3,\"2893\":3,\"2897\":3,\"2916\":2,\"2921\":6,\"3117\":3,\"3118\":4,\"3120\":3}}],[\"bytebufferdemo\",{\"1\":{\"3116\":1}}],[\"bytebuffer基本操作示例\",{\"1\":{\"3116\":1}}],[\"bytebuffer使用示例\",{\"1\":{\"3116\":1}}],[\"bytebuffer>\",{\"1\":{\"1238\":2,\"3120\":2}}],[\"bytebuffer\",{\"1\":{\"1228\":4,\"1235\":4,\"1238\":13,\"1315\":4,\"1324\":4,\"1325\":8,\"1338\":4,\"2885\":6,\"2914\":3,\"2915\":3,\"2916\":4,\"2921\":7,\"3079\":2,\"3116\":2,\"3117\":2,\"3118\":2,\"3120\":6}}],[\"byte\",{\"1\":{\"286\":6,\"729\":4,\"746\":4,\"747\":4,\"1221\":2,\"1224\":4,\"1228\":2,\"1238\":3,\"1315\":2,\"1321\":2,\"1324\":2,\"1325\":5,\"1338\":4,\"2080\":1,\"2099\":1,\"2101\":3,\"2188\":1,\"2289\":2,\"2766\":1,\"2831\":3,\"2832\":2,\"2837\":2,\"2841\":2,\"2842\":2,\"2843\":2,\"2844\":3,\"2848\":2,\"2849\":8,\"2866\":2,\"2868\":4,\"2873\":3,\"2885\":2,\"2891\":2,\"2892\":2,\"2893\":2,\"2897\":2,\"2909\":1,\"2914\":4,\"2916\":2,\"2917\":2,\"2921\":4,\"3007\":1,\"3065\":4,\"3066\":3,\"3079\":2,\"3085\":1,\"3111\":1,\"3116\":2,\"3117\":2,\"3118\":2,\"3120\":2,\"3215\":2}}],[\"by子句\",{\"1\":{\"125\":1}}],[\"by中\",{\"1\":{\"125\":1}}],[\"bye等\",{\"1\":{\"1092\":1,\"3198\":1}}],[\"bye\",{\"1\":{\"121\":1,\"3179\":1,\"3208\":1}}],[\"by\",{\"0\":{\"1669\":1},\"1\":{\"99\":2,\"100\":2,\"107\":1,\"108\":1,\"125\":2,\"228\":1,\"229\":1,\"1510\":1,\"1569\":1,\"1573\":1,\"1577\":1,\"1578\":4,\"1677\":1,\"1775\":1,\"1819\":3,\"1821\":1,\"1833\":4,\"2522\":1,\"3103\":2}}],[\"beijing\",{\"1\":{\"3276\":1}}],[\"bejgi2\",{\"1\":{\"1650\":1,\"1698\":1,\"1713\":1}}],[\"been\",{\"1\":{\"994\":1,\"1005\":1,\"1764\":1}}],[\"between\",{\"1\":{\"545\":1,\"3003\":1}}],[\"beta1\",{\"1\":{\"1513\":1}}],[\"betaips\",{\"1\":{\"232\":1,\"1684\":1}}],[\"beta`\",{\"1\":{\"232\":1,\"1684\":1}}],[\"beta\",{\"1\":{\"232\":2,\"1660\":1,\"1684\":2}}],[\"because\",{\"1\":{\"500\":1,\"501\":1,\"502\":1,\"504\":1}}],[\"beat\",{\"1\":{\"1363\":1}}],[\"bearer\",{\"1\":{\"456\":1}}],[\"bean定义类\",{\"1\":{\"2999\":1}}],[\"beanclass\",{\"1\":{\"2999\":7}}],[\"beanname\",{\"1\":{\"2999\":8}}],[\"beandefinition\",{\"1\":{\"2999\":11}}],[\"beandefinitions\",{\"1\":{\"2999\":3}}],[\"beandefinition>\",{\"1\":{\"2999\":1}}],[\"bean是如何被创建的\",{\"1\":{\"458\":1}}],[\"bean的创建与条件判断\",{\"0\":{\"415\":1}}],[\"bean的作用域\",{\"0\":{\"327\":1}}],[\"beanpropertyrowmapper<>\",{\"1\":{\"366\":1,\"438\":2}}],[\"beanfactory\",{\"1\":{\"321\":1}}],[\"beansexception\",{\"1\":{\"290\":4}}],[\"beans\",{\"1\":{\"290\":1,\"3159\":2}}],[\"beantomap\",{\"1\":{\"279\":1}}],[\"beanutil\",{\"1\":{\"279\":3,\"289\":2}}],[\"bean\",{\"1\":{\"279\":1,\"282\":1,\"289\":1,\"353\":2,\"367\":2,\"368\":1,\"382\":1,\"423\":1,\"438\":1,\"445\":2,\"451\":1,\"459\":1,\"1444\":1,\"1687\":1,\"2012\":1,\"2999\":7}}],[\"beginindex\",{\"1\":{\"2240\":1,\"2296\":9}}],[\"beginning\",{\"1\":{\"1535\":2}}],[\"begin\",{\"1\":{\"289\":9}}],[\"begintime\",{\"1\":{\"270\":3}}],[\"beforeeach\",{\"1\":{\"3166\":2}}],[\"before于线程的终止检测\",{\"1\":{\"656\":1}}],[\"before于线程中的任何操作\",{\"1\":{\"656\":1}}],[\"before于后续对同一字段的读操作\",{\"1\":{\"656\":1}}],[\"before于后续对同一锁的加锁操作\",{\"1\":{\"656\":1}}],[\"before于该线程中后续的操作\",{\"1\":{\"656\":1}}],[\"before规则定义了操作之间的可见性关系\",{\"1\":{\"656\":1}}],[\"before规则\",{\"0\":{\"656\":1}}],[\"before规则来保证多线程的内存可见性\",{\"1\":{\"602\":1}}],[\"before\",{\"1\":{\"267\":2,\"279\":1,\"307\":1,\"336\":1,\"338\":2,\"1462\":2,\"1465\":1,\"2623\":1,\"2628\":1,\"2629\":3,\"2630\":3}}],[\"benchmark\",{\"1\":{\"193\":4}}],[\"be\",{\"1\":{\"28\":1,\"122\":1,\"125\":2,\"283\":1,\"994\":1,\"1004\":1,\"1578\":1,\"1586\":1,\"1949\":4,\"1962\":4,\"1974\":1,\"1975\":2,\"1987\":1,\"1988\":1,\"2291\":1,\"2512\":1,\"2708\":1,\"2937\":3,\"3003\":5,\"3005\":1}}],[\"n堆栈跟踪元素\",{\"1\":{\"2936\":1}}],[\"n的字符串不会触发自动刷新\",{\"1\":{\"2908\":1}}],[\"n文件内容\",{\"1\":{\"2878\":1}}],[\"n文件下载完成\",{\"1\":{\"2849\":1}}],[\"n文件复制完成\",{\"1\":{\"2837\":1}}],[\"n×m\",{\"1\":{\"2726\":1}}],[\"n³\",{\"1\":{\"2702\":1}}],[\"n^2\",{\"1\":{\"2505\":1}}],[\"n方式5\",{\"1\":{\"2407\":1}}],[\"n方式4\",{\"1\":{\"2407\":1}}],[\"n方式3\",{\"1\":{\"2407\":1}}],[\"n方式2\",{\"1\":{\"2407\":1}}],[\"nlistiterator反向遍历\",{\"1\":{\"2325\":1}}],[\"nlistiterator正向遍历\",{\"1\":{\"2325\":1}}],[\"nline\",{\"1\":{\"472\":2}}],[\"n增强for循环\",{\"1\":{\"2325\":1}}],[\"n增强for循环遍历\",{\"1\":{\"1160\":1}}],[\"n为字符串长度\",{\"1\":{\"2294\":1}}],[\"n++\",{\"1\":{\"2078\":1}}],[\"n20\",{\"1\":{\"1881\":1}}],[\"n|grep\",{\"1\":{\"1881\":1}}],[\"n=split\",{\"1\":{\"1881\":1}}],[\"n===\",{\"1\":{\"1221\":1,\"2327\":2}}],[\"nr\",{\"1\":{\"1872\":1}}],[\"ntpdata\",{\"1\":{\"1907\":2}}],[\"ntpdate\",{\"1\":{\"1843\":1,\"1907\":2,\"3269\":1}}],[\"ntp\",{\"1\":{\"1843\":1,\"1907\":1}}],[\"ndrt\",{\"1\":{\"1882\":1}}],[\"ndots\",{\"1\":{\"1662\":1}}],[\"ndb\",{\"1\":{\"122\":1}}],[\"n68t1b\",{\"1\":{\"1650\":1,\"1713\":1}}],[\"nfsdir\",{\"1\":{\"3276\":2,\"3282\":1}}],[\"nfs\",{\"1\":{\"3275\":2,\"3276\":14,\"3278\":2}}],[\"nfsserver\",{\"1\":{\"3275\":10,\"3278\":1}}],[\"nfs服务\",{\"0\":{\"3275\":1}}],[\"nforeach\",{\"1\":{\"2325\":1}}],[\"nflt\",{\"1\":{\"1882\":1}}],[\"nf\",{\"1\":{\"1610\":4,\"1881\":1}}],[\"n<=2\",{\"1\":{\"1881\":1}}],[\"n<\",{\"1\":{\"1564\":1,\"2072\":1,\"3102\":1}}],[\"nc可以当做服务器\",{\"1\":{\"1877\":1}}],[\"nc\",{\"1\":{\"1877\":3,\"1912\":1,\"3215\":5}}],[\"nc命令\",{\"0\":{\"1877\":1},\"1\":{\"1835\":1}}],[\"nconfig\",{\"1\":{\"1491\":2}}],[\"ncollations\",{\"1\":{\"125\":1}}],[\"ncurses\",{\"1\":{\"1486\":1,\"1491\":2}}],[\"nbsp\",{\"1\":{\"1462\":18,\"1463\":10,\"1464\":2}}],[\"n元素\",{\"1\":{\"1161\":1}}],[\"nslookup\",{\"0\":{\"1849\":1},\"1\":{\"1835\":1,\"1849\":1}}],[\"ns\",{\"1\":{\"1738\":1}}],[\"nstream流\",{\"1\":{\"2325\":1}}],[\"nstream\",{\"1\":{\"1160\":1}}],[\"nsecure\",{\"1\":{\"122\":1}}],[\"n²\",{\"0\":{\"2709\":1},\"1\":{\"1056\":1,\"1161\":1,\"2348\":1,\"2357\":1,\"2702\":1,\"2709\":1,\"2717\":1,\"2723\":1,\"2726\":2}}],[\"n调度\",{\"1\":{\"533\":1}}],[\"n调度模型\",{\"1\":{\"528\":1}}],[\"nproc\",{\"1\":{\"1610\":2}}],[\"npe防护措施\",{\"0\":{\"2054\":1}}],[\"npe防护规范\",{\"0\":{\"2052\":1}}],[\"npe增强适用于所有可能发生npe的场景\",{\"1\":{\"521\":1}}],[\"npe增强特性专注于发生空指针异常后提供更精确的调试信息\",{\"1\":{\"521\":1}}],[\"npe增强特性的设计基于大量真实项目中的空指针异常分析\",{\"1\":{\"515\":1}}],[\"npe增强特性体现了java语言设计中对开发者体验的重视\",{\"1\":{\"513\":1}}],[\"npedemo\",{\"1\":{\"500\":4}}],[\"npe错误消息的革命性改进\",{\"0\":{\"499\":1}}],[\"npm\",{\"1\":{\"260\":1,\"261\":5,\"264\":1}}],[\"npm是一个nodejs包管理和分发工具\",{\"1\":{\"260\":1}}],[\"n或nvm\",{\"1\":{\"264\":1}}],[\"nvm\",{\"1\":{\"263\":3,\"264\":9,\"266\":1}}],[\"ngin\",{\"1\":{\"1416\":1}}],[\"nginz\",{\"1\":{\"1383\":1}}],[\"nginx技术\",{\"0\":{\"3305\":1}}],[\"nginxdemos\",{\"1\":{\"1667\":2}}],[\"nginx服务器上一般自带了\",{\"1\":{\"1425\":1}}],[\"nginx密码访问所需离线包\",{\"1\":{\"1418\":1}}],[\"nginx已经安装了该模块\",{\"1\":{\"1418\":1}}],[\"nginx会同时监听443端口和80端口\",{\"1\":{\"1417\":1}}],[\"nginx接受上游服务器\",{\"1\":{\"1409\":1}}],[\"nginx接收一个请求后\",{\"1\":{\"1379\":1}}],[\"nginx发送给上游服务器\",{\"1\":{\"1409\":1}}],[\"nginx与上游服务器\",{\"1\":{\"1409\":1}}],[\"nginx负载均衡实现的策略有以下五种\",{\"1\":{\"1403\":1}}],[\"nginx负载均衡的算法怎么实现的\",{\"0\":{\"1403\":1}}],[\"nginx怎么判断别ip不可访问\",{\"0\":{\"1410\":1}}],[\"nginx怎么做的动静分离\",{\"0\":{\"1402\":1}}],[\"nginx怎么处理请求的\",{\"0\":{\"1379\":1}}],[\"nginx是当下最热的web容器\",{\"1\":{\"1401\":1}}],[\"nginx是一个http服务可以独立提供http服务\",{\"1\":{\"1383\":1}}],[\"nginx是一个\",{\"1\":{\"1376\":1}}],[\"nginx中的ngx\",{\"1\":{\"1397\":1}}],[\"nginx中使用ngx\",{\"1\":{\"1395\":1}}],[\"nginx提供burst参数结合nodelay参数可以解决流量突发的问题\",{\"1\":{\"1396\":1}}],[\"nginx就会拒绝处理该用户请求\",{\"1\":{\"1395\":1}}],[\"nginx限流就是限制用户请求速度\",{\"1\":{\"1394\":1}}],[\"nginx虚拟主机怎么配置\",{\"0\":{\"1388\":1}}],[\"nginx静态资源\",{\"0\":{\"1386\":1}}],[\"nginx支持的媒体类型库文件\",{\"1\":{\"1385\":1}}],[\"nginx配置访问密码\",{\"0\":{\"1418\":1}}],[\"nginx配置https\",{\"0\":{\"1413\":1,\"1415\":1}}],[\"nginx配置代码\",{\"1\":{\"1409\":1}}],[\"nginx配置高可用性怎么配置\",{\"0\":{\"1409\":1}}],[\"nginx配置文件nginx\",{\"0\":{\"1385\":1}}],[\"nginx配置简单\",{\"1\":{\"1382\":1}}],[\"nginx的安装可分为两种\",{\"1\":{\"1779\":1}}],[\"nginx的安装目录sbin下输入\",{\"1\":{\"1416\":1}}],[\"nginx的静态处理能力很强\",{\"1\":{\"1401\":1}}],[\"nginx的限流都是基于漏桶流算法\",{\"1\":{\"1394\":1}}],[\"nginx的启动命令\",{\"1\":{\"1384\":1}}],[\"nginx的优缺点\",{\"0\":{\"1382\":1}}],[\"nginx命令目录\",{\"1\":{\"1384\":1}}],[\"nginx进程启动后\",{\"1\":{\"1384\":1}}],[\"nginx日志目录\",{\"1\":{\"1384\":1}}],[\"nginx默认站点目录\",{\"1\":{\"1384\":1}}],[\"nginx主配置文件\",{\"1\":{\"1384\":1}}],[\"nginx所有配置文件的目录\",{\"1\":{\"1384\":1}}],[\"nginx目录结构有哪些\",{\"0\":{\"1384\":1}}],[\"nginx应用场景\",{\"0\":{\"1383\":1}}],[\"nginx反向代理服务器接收到之后\",{\"1\":{\"1380\":1}}],[\"nginx处理静态文件好\",{\"1\":{\"1377\":1,\"1382\":1}}],[\"nginx详情介绍\",{\"0\":{\"1375\":1}}],[\"nginx\",{\"1\":{\"215\":1,\"216\":13,\"1384\":6,\"1402\":2,\"1416\":7,\"1417\":9,\"1421\":1,\"1422\":1,\"1423\":1,\"1424\":2,\"1427\":1,\"1428\":2,\"1593\":1,\"1594\":1,\"1595\":25,\"1661\":3,\"1779\":11,\"3245\":2,\"3246\":6,\"3250\":8}}],[\"nginx缓存+redis缓存+ehcache缓存\",{\"1\":{\"190\":1}}],[\"ng\",{\"1\":{\"250\":1}}],[\"navigablekeyset\",{\"1\":{\"2658\":1,\"2665\":1}}],[\"navigablemap\",{\"1\":{\"2366\":1}}],[\"nanotime\",{\"1\":{\"2524\":2}}],[\"nat\",{\"0\":{\"3194\":1}}],[\"nat穿透问题\",{\"0\":{\"1104\":1,\"3224\":1}}],[\"nativemethodaccessorimpl\",{\"1\":{\"2987\":1}}],[\"native\",{\"1\":{\"229\":1,\"1578\":2,\"1615\":1,\"1621\":1,\"1666\":1,\"1669\":1,\"1675\":1,\"1746\":1,\"1753\":1,\"1819\":2,\"2297\":1}}],[\"nacos访问nacos\",{\"1\":{\"1696\":1}}],[\"nacos部署\",{\"0\":{\"1683\":1}}],[\"nacos2\",{\"1\":{\"234\":1}}],[\"nacos\",{\"0\":{\"1641\":1,\"1648\":1},\"1\":{\"232\":10,\"233\":2,\"234\":7,\"235\":12,\"236\":2,\"1367\":1,\"1610\":1,\"1640\":1,\"1641\":6,\"1643\":3,\"1648\":24,\"1678\":1,\"1682\":1,\"1684\":10,\"1685\":24,\"1799\":1}}],[\"name+\",{\"1\":{\"1440\":1}}],[\"name指令匹配server模块\",{\"1\":{\"1379\":1}}],[\"namefield\",{\"1\":{\"1269\":5,\"2971\":5,\"2989\":5}}],[\"name>\",{\"1\":{\"981\":1,\"984\":1,\"985\":1,\"999\":3}}],[\"nameandtype\",{\"1\":{\"728\":4}}],[\"name=kubernetes\",{\"1\":{\"3273\":2}}],[\"name=dockername\",{\"1\":{\"3246\":1}}],[\"name=demo\",{\"1\":{\"403\":1}}],[\"name=value\",{\"1\":{\"3246\":1}}],[\"name=mysql5\",{\"1\":{\"3257\":1}}],[\"name=my\",{\"1\":{\"3104\":1}}],[\"name=enp2s1\",{\"1\":{\"1918\":1}}],[\"name=nacos\",{\"1\":{\"1643\":1}}],[\"name=postgresql\",{\"1\":{\"1606\":1}}],[\"name=com\",{\"1\":{\"1644\":1}}],[\"name=c\",{\"1\":{\"1590\":1,\"1595\":1,\"1600\":1}}],[\"name=10\",{\"1\":{\"1535\":1}}],[\"name=zknode\",{\"1\":{\"1529\":1}}],[\"name=\",{\"1\":{\"583\":2,\"1225\":1,\"1439\":5,\"1447\":1,\"1450\":1,\"1455\":1,\"1456\":1,\"1457\":1,\"1458\":1,\"1459\":5,\"1461\":1,\"1462\":1,\"1463\":1,\"1464\":3,\"1467\":1,\"1469\":1,\"1564\":5,\"1577\":1,\"1578\":1,\"2042\":5,\"2072\":1,\"2232\":3,\"3005\":1,\"3007\":3,\"3102\":4,\"3266\":4}}],[\"namedparameterjdbctemplate\",{\"1\":{\"363\":1}}],[\"namedpipesetstate\",{\"1\":{\"125\":1}}],[\"namedpipeopen\",{\"1\":{\"125\":1}}],[\"namedpipewait\",{\"1\":{\"125\":1}}],[\"namedpipe\",{\"1\":{\"125\":1}}],[\"nameservers\",{\"1\":{\"1662\":1}}],[\"names=1\",{\"1\":{\"1577\":1,\"1578\":2,\"1771\":1}}],[\"names\",{\"1\":{\"469\":2,\"543\":2,\"575\":2,\"1440\":3,\"1687\":1,\"2143\":1,\"2167\":5,\"2217\":2,\"2329\":2,\"3271\":1,\"3273\":1}}],[\"namespace=\",{\"1\":{\"439\":1}}],[\"namespace\",{\"1\":{\"280\":1,\"1638\":1,\"1648\":4,\"1649\":4,\"1650\":22,\"1661\":1,\"1680\":1,\"1685\":4,\"1688\":4,\"1698\":1,\"1711\":1,\"1713\":24,\"1808\":3,\"3244\":3,\"3276\":2}}],[\"namesrvxxxxxxxxxx\",{\"1\":{\"1834\":1}}],[\"namesrvaddr=namesrv\",{\"1\":{\"250\":1}}],[\"namesrvaddr=127\",{\"1\":{\"249\":1}}],[\"namesrv\",{\"1\":{\"250\":4}}],[\"name`\",{\"1\":{\"232\":8,\"1684\":8,\"1687\":5}}],[\"name\",{\"1\":{\"37\":1,\"47\":1,\"49\":1,\"50\":1,\"68\":1,\"84\":3,\"85\":1,\"86\":3,\"87\":1,\"90\":2,\"91\":1,\"115\":1,\"122\":1,\"125\":8,\"178\":4,\"216\":2,\"219\":2,\"222\":1,\"226\":1,\"232\":5,\"234\":2,\"235\":1,\"239\":1,\"242\":2,\"250\":3,\"255\":1,\"269\":2,\"279\":3,\"286\":2,\"288\":1,\"290\":2,\"366\":1,\"404\":1,\"407\":1,\"428\":1,\"438\":2,\"439\":4,\"440\":3,\"469\":2,\"471\":1,\"527\":1,\"543\":2,\"575\":2,\"578\":1,\"746\":3,\"747\":3,\"997\":1,\"1038\":5,\"1094\":1,\"1182\":9,\"1203\":5,\"1208\":2,\"1225\":5,\"1269\":7,\"1379\":1,\"1385\":1,\"1389\":2,\"1390\":2,\"1397\":1,\"1402\":1,\"1409\":1,\"1412\":1,\"1417\":2,\"1435\":2,\"1439\":5,\"1463\":2,\"1464\":2,\"1465\":2,\"1511\":1,\"1512\":1,\"1513\":2,\"1517\":1,\"1518\":1,\"1520\":1,\"1526\":2,\"1529\":1,\"1530\":3,\"1531\":1,\"1535\":2,\"1542\":3,\"1548\":3,\"1558\":1,\"1560\":1,\"1569\":1,\"1575\":3,\"1578\":1,\"1586\":2,\"1638\":5,\"1642\":4,\"1643\":1,\"1644\":2,\"1648\":31,\"1649\":30,\"1650\":167,\"1660\":4,\"1661\":18,\"1662\":2,\"1684\":5,\"1685\":31,\"1688\":30,\"1698\":12,\"1711\":2,\"1713\":183,\"1778\":1,\"1808\":1,\"1831\":10,\"1833\":11,\"1838\":1,\"1869\":1,\"1873\":5,\"1882\":1,\"1890\":1,\"1949\":1,\"1962\":1,\"2020\":5,\"2077\":6,\"2091\":10,\"2100\":1,\"2224\":5,\"2232\":2,\"2329\":6,\"2388\":1,\"2524\":2,\"2577\":5,\"2605\":7,\"2734\":8,\"2736\":5,\"2737\":2,\"2738\":2,\"2795\":5,\"2797\":2,\"2810\":6,\"2819\":1,\"2820\":3,\"2832\":1,\"2881\":3,\"2903\":1,\"2965\":1,\"2968\":1,\"2969\":11,\"2970\":10,\"2971\":5,\"2980\":1,\"2983\":7,\"2984\":2,\"2986\":4,\"2989\":5,\"2990\":2,\"2993\":6,\"3000\":2,\"3005\":4,\"3007\":5,\"3010\":5,\"3085\":1,\"3134\":1,\"3137\":1,\"3141\":5,\"3162\":2,\"3164\":5,\"3165\":4,\"3190\":1,\"3205\":4,\"3206\":1,\"3208\":1,\"3212\":2,\"3215\":1,\"3218\":1,\"3238\":1,\"3245\":1,\"3246\":1,\"3260\":1,\"3271\":1,\"3273\":7,\"3275\":1,\"3276\":9,\"3278\":2}}],[\"n\",{\"0\":{\"2708\":1,\"2710\":1},\"1\":{\"186\":1,\"193\":2,\"250\":1,\"264\":6,\"265\":3,\"266\":1,\"280\":8,\"472\":1,\"543\":8,\"557\":8,\"575\":2,\"792\":2,\"826\":2,\"860\":2,\"894\":2,\"997\":1,\"1056\":1,\"1092\":17,\"1095\":4,\"1161\":1,\"1164\":2,\"1166\":1,\"1168\":1,\"1170\":2,\"1196\":2,\"1324\":5,\"1347\":1,\"1426\":1,\"1443\":6,\"1444\":6,\"1491\":1,\"1564\":1,\"1634\":1,\"1677\":1,\"1834\":1,\"1847\":1,\"1850\":1,\"1871\":3,\"1881\":7,\"1886\":2,\"1899\":1,\"2078\":5,\"2155\":1,\"2220\":2,\"2294\":4,\"2295\":3,\"2316\":4,\"2348\":1,\"2354\":6,\"2357\":10,\"2363\":6,\"2377\":1,\"2391\":1,\"2394\":2,\"2414\":2,\"2455\":1,\"2489\":1,\"2501\":2,\"2503\":4,\"2505\":2,\"2511\":4,\"2512\":4,\"2524\":1,\"2588\":4,\"2600\":4,\"2616\":2,\"2636\":1,\"2643\":1,\"2650\":1,\"2663\":1,\"2666\":2,\"2672\":3,\"2702\":5,\"2704\":1,\"2708\":1,\"2710\":1,\"2711\":15,\"2712\":7,\"2715\":2,\"2716\":6,\"2717\":1,\"2721\":2,\"2723\":2,\"2724\":6,\"2726\":1,\"2727\":1,\"2728\":2,\"2841\":1,\"2853\":1,\"2860\":2,\"2881\":1,\"2897\":2,\"2901\":1,\"2902\":1,\"2903\":1,\"2904\":2,\"2905\":6,\"2921\":5,\"2942\":1,\"3070\":3,\"3190\":7,\"3205\":1,\"3273\":1,\"3278\":1}}],[\"niterator迭代器\",{\"1\":{\"2325\":1}}],[\"nice值\",{\"1\":{\"1882\":1}}],[\"ni\",{\"1\":{\"1882\":1}}],[\"nignx\",{\"1\":{\"1367\":1}}],[\"nist\",{\"1\":{\"1094\":1,\"1907\":1,\"3190\":1,\"3218\":4}}],[\"nisamchk\",{\"1\":{\"125\":1}}],[\"nio经过长期验证\",{\"1\":{\"3130\":1}}],[\"nio给予开发者更多底层控制\",{\"1\":{\"3130\":1}}],[\"nio存在selector\",{\"1\":{\"3129\":1}}],[\"nio存在selector空轮询bug\",{\"1\":{\"1237\":1}}],[\"nio空轮询问题\",{\"1\":{\"3129\":1}}],[\"nio空轮询bug\",{\"1\":{\"3090\":1}}],[\"nio核心组件\",{\"0\":{\"3115\":1}}],[\"nio核心组件与应用\",{\"0\":{\"1226\":1}}],[\"nio支持单线程处理多个连接\",{\"1\":{\"3113\":1}}],[\"nio实现的是reactor模式\",{\"1\":{\"3091\":1}}],[\"nio实现简单http服务器的核心代码\",{\"1\":{\"2921\":1}}],[\"nio实现reactor模式示例\",{\"1\":{\"2921\":1}}],[\"nio实现一个简单的http服务器\",{\"1\":{\"1324\":1,\"2921\":1}}],[\"nio中如何实现reactor模式\",{\"1\":{\"2921\":1}}],[\"nio中的零拷贝\",{\"1\":{\"1232\":1}}],[\"nio的reactor模型性能优于aio\",{\"1\":{\"3130\":1}}],[\"nio的reactor模式和proactor模式有什么区别\",{\"1\":{\"2921\":1}}],[\"nio的典型应用模式\",{\"1\":{\"3079\":1}}],[\"nio的selector就是reactor模式的实现\",{\"1\":{\"2921\":1}}],[\"nio的设计体现了以下核心思想\",{\"1\":{\"2919\":1}}],[\"nio的多路复用机制比bio的多线程模型更高效\",{\"1\":{\"1341\":1}}],[\"nio提供了内存映射文件\",{\"1\":{\"2917\":1}}],[\"nio相比传统io\",{\"1\":{\"2913\":1}}],[\"nio与aio适用场景对比\",{\"1\":{\"3130\":1}}],[\"nio与异步编程体现的核心设计思想\",{\"1\":{\"3128\":1}}],[\"nio与异步编程\",{\"0\":{\"3112\":1}}],[\"nio与传统io的主要区别\",{\"0\":{\"2913\":1}}],[\"nio与bio的本质区别\",{\"0\":{\"1227\":1}}],[\"nio是面向缓冲区\",{\"1\":{\"2911\":1}}],[\"nio旨在提高io操作的效率\",{\"1\":{\"2911\":1}}],[\"nio流\",{\"0\":{\"2910\":1}}],[\"nio缓冲区flip\",{\"1\":{\"1338\":1}}],[\"niozerocopy\",{\"1\":{\"1321\":2}}],[\"nio零拷贝耗时\",{\"1\":{\"1321\":1}}],[\"nio零拷贝\",{\"1\":{\"1321\":2}}],[\"nio服务器端示例\",{\"1\":{\"3079\":1}}],[\"nio服务器示例\",{\"1\":{\"1315\":1}}],[\"nio服务器启动\",{\"1\":{\"1228\":1,\"1315\":1}}],[\"nio三大核心组件\",{\"1\":{\"1315\":1}}],[\"nio已经能够满足需求\",{\"1\":{\"1238\":1}}],[\"nioserver\",{\"1\":{\"1315\":1}}],[\"nioserversocketchannel\",{\"1\":{\"1111\":1,\"1332\":1,\"3125\":1}}],[\"nioselectorserver\",{\"1\":{\"1228\":1}}],[\"nioeventloopgroup\",{\"1\":{\"1111\":2,\"1332\":2,\"3125\":2}}],[\"nio\",{\"0\":{\"1315\":1,\"3079\":1,\"3120\":1},\"1\":{\"269\":1,\"1227\":2,\"1228\":7,\"1232\":3,\"1238\":16,\"1321\":1,\"1510\":1,\"2837\":1,\"2855\":1,\"2861\":1,\"2878\":1,\"2879\":1,\"2880\":1,\"2881\":1,\"2885\":4,\"2903\":1,\"2911\":1,\"2913\":1,\"2914\":2,\"2915\":2,\"2916\":5,\"2917\":4,\"2921\":9,\"3100\":1,\"3102\":1,\"3113\":1,\"3116\":2,\"3117\":1,\"3130\":1}}],[\"nil\",{\"1\":{\"135\":1,\"2650\":1}}],[\"nyi\",{\"1\":{\"125\":1}}],[\"nu\",{\"1\":{\"1857\":1}}],[\"numvalue\",{\"1\":{\"3003\":4}}],[\"nummap\",{\"1\":{\"2715\":4}}],[\"nummoved\",{\"1\":{\"2440\":6}}],[\"numstr\",{\"1\":{\"2198\":1}}],[\"nums\",{\"1\":{\"1170\":5,\"2715\":5}}],[\"num\",{\"1\":{\"235\":1,\"539\":1,\"1040\":1,\"1055\":3,\"1058\":2,\"1160\":4,\"1161\":2,\"1170\":2,\"1222\":2,\"2089\":3,\"2128\":3,\"2147\":2,\"2170\":2,\"2198\":1,\"2480\":2,\"2585\":2,\"2785\":3,\"2809\":2,\"3039\":2}}],[\"num=$\",{\"1\":{\"235\":1}}],[\"numkeys\",{\"1\":{\"204\":2}}],[\"numberofreplicas\",{\"1\":{\"3086\":6}}],[\"numbergenerator\",{\"1\":{\"3021\":1}}],[\"numbergenerator<t\",{\"1\":{\"3021\":1}}],[\"numberlong\",{\"1\":{\"1764\":1}}],[\"number>\",{\"1\":{\"1290\":1,\"3021\":1,\"3025\":1,\"3034\":1,\"3039\":1}}],[\"numberformatexception\",{\"1\":{\"1055\":1}}],[\"numberset\",{\"1\":{\"1182\":2}}],[\"numbers\",{\"1\":{\"543\":5,\"575\":2,\"1182\":2,\"2143\":1,\"2147\":5,\"2170\":6,\"2212\":4,\"2216\":2,\"2220\":2,\"2230\":3,\"2326\":21,\"2371\":2,\"2661\":14,\"3047\":4}}],[\"number表示参与投票的哨兵数量\",{\"1\":{\"178\":1}}],[\"number\",{\"1\":{\"125\":1,\"178\":2,\"186\":1,\"280\":9,\"724\":1,\"997\":1,\"1069\":2,\"1253\":4,\"1290\":3,\"1513\":1,\"3003\":2,\"3034\":1,\"3039\":1,\"3097\":2}}],[\"null表示自然排序\",{\"1\":{\"2568\":1,\"2571\":1,\"2648\":1}}],[\"null表示由c++实现\",{\"1\":{\"745\":1}}],[\"null元素\",{\"0\":{\"2481\":1},\"1\":{\"2358\":1}}],[\"null拒绝\",{\"1\":{\"2358\":1}}],[\"nullinteger\",{\"1\":{\"1040\":2}}],[\"nullpointerexception\",{\"0\":{\"2383\":1,\"2419\":1},\"1\":{\"500\":2,\"504\":1,\"518\":1,\"544\":1,\"1040\":2,\"1044\":1,\"1169\":1,\"1948\":1,\"1949\":1,\"1962\":2,\"1974\":2,\"1975\":2,\"1987\":2,\"1988\":2,\"2436\":1,\"2493\":1,\"2552\":1,\"2573\":2,\"2655\":1,\"2873\":1}}],[\"nullpointerexception的错误消息通常只能告诉你发生了空指针异常\",{\"1\":{\"499\":1}}],[\"nullableoptional\",{\"1\":{\"544\":4}}],[\"nullable注解\",{\"1\":{\"522\":1}}],[\"nullable\",{\"1\":{\"469\":1,\"578\":1,\"1831\":1,\"3165\":1}}],[\"null列\",{\"1\":{\"125\":1}}],[\"null值使用无效\",{\"1\":{\"125\":1}}],[\"null\",{\"1\":{\"38\":1,\"125\":10,\"232\":91,\"269\":1,\"283\":1,\"285\":1,\"286\":2,\"289\":1,\"292\":1,\"293\":1,\"430\":1,\"440\":1,\"450\":1,\"456\":3,\"491\":1,\"500\":2,\"501\":1,\"502\":2,\"504\":2,\"517\":2,\"519\":1,\"544\":2,\"554\":1,\"613\":2,\"729\":1,\"745\":1,\"746\":1,\"747\":1,\"1040\":1,\"1044\":2,\"1068\":1,\"1069\":3,\"1094\":1,\"1161\":2,\"1162\":1,\"1164\":3,\"1165\":1,\"1166\":1,\"1170\":1,\"1181\":11,\"1182\":1,\"1221\":1,\"1234\":2,\"1238\":3,\"1247\":1,\"1295\":1,\"1314\":1,\"1325\":1,\"1326\":3,\"1440\":1,\"1469\":1,\"1661\":1,\"1684\":91,\"1687\":66,\"1814\":1,\"1831\":3,\"1844\":1,\"1949\":6,\"1962\":6,\"1974\":3,\"1975\":3,\"1987\":3,\"1988\":2,\"2027\":1,\"2032\":1,\"2047\":1,\"2054\":1,\"2061\":2,\"2159\":1,\"2205\":3,\"2207\":4,\"2228\":7,\"2234\":2,\"2255\":1,\"2268\":1,\"2392\":1,\"2419\":3,\"2440\":5,\"2451\":1,\"2481\":2,\"2485\":6,\"2494\":3,\"2496\":14,\"2497\":16,\"2498\":7,\"2508\":2,\"2512\":2,\"2544\":4,\"2573\":1,\"2574\":2,\"2575\":2,\"2599\":1,\"2600\":10,\"2601\":16,\"2602\":1,\"2605\":1,\"2612\":1,\"2628\":3,\"2629\":6,\"2630\":3,\"2631\":1,\"2655\":8,\"2656\":1,\"2657\":6,\"2658\":1,\"2681\":3,\"2682\":2,\"2683\":2,\"2684\":5,\"2685\":4,\"2708\":2,\"2709\":1,\"2710\":1,\"2727\":1,\"2733\":1,\"2810\":1,\"2831\":2,\"2843\":4,\"2856\":1,\"2861\":1,\"2867\":1,\"2873\":1,\"2880\":1,\"2881\":1,\"2921\":2,\"2927\":3,\"2949\":2,\"2951\":1,\"2968\":1,\"2970\":1,\"2971\":3,\"2987\":1,\"2999\":1,\"3000\":1,\"3002\":1,\"3003\":5,\"3007\":2,\"3023\":2,\"3024\":2,\"3036\":1,\"3038\":1,\"3065\":6,\"3086\":1,\"3120\":2,\"3170\":1,\"3190\":1,\"3199\":1,\"3208\":4,\"3209\":3,\"3212\":2,\"3215\":3,\"3222\":2,\"3223\":1,\"3238\":2}}],[\"negative\",{\"1\":{\"3005\":1}}],[\"negate\",{\"1\":{\"557\":1}}],[\"near\",{\"1\":{\"2291\":1}}],[\"ne\",{\"1\":{\"2110\":1}}],[\"nexusurl>\",{\"1\":{\"999\":1,\"1003\":1}}],[\"nexus\",{\"1\":{\"979\":1,\"1003\":1}}],[\"nexthop\",{\"1\":{\"3212\":3}}],[\"nexthopuri\",{\"1\":{\"3212\":2}}],[\"nextuppercase\",{\"1\":{\"3000\":4}}],[\"nextdouble\",{\"1\":{\"2861\":1}}],[\"nextline\",{\"1\":{\"2861\":1}}],[\"next10bytes\",{\"1\":{\"2849\":3}}],[\"nextindex++\",{\"1\":{\"2498\":2}}],[\"nextindex\",{\"1\":{\"2498\":9}}],[\"nextint\",{\"1\":{\"269\":1,\"2861\":1,\"3215\":1}}],[\"nextseq++\",{\"1\":{\"1312\":1}}],[\"nextseq\",{\"1\":{\"1312\":4}}],[\"next\",{\"1\":{\"1179\":1,\"1181\":10,\"1185\":1,\"1190\":1,\"1194\":1,\"1228\":1,\"1315\":1,\"1324\":1,\"1444\":1,\"1687\":1,\"2319\":4,\"2325\":2,\"2340\":1,\"2352\":1,\"2370\":1,\"2382\":1,\"2407\":1,\"2420\":1,\"2441\":2,\"2448\":1,\"2485\":5,\"2490\":4,\"2494\":2,\"2495\":1,\"2496\":14,\"2497\":7,\"2498\":16,\"2505\":1,\"2507\":2,\"2508\":1,\"2513\":1,\"2523\":1,\"2537\":2,\"2544\":5,\"2600\":2,\"2601\":9,\"2623\":2,\"2680\":5,\"2681\":7,\"2682\":1,\"2683\":1,\"2684\":5,\"2916\":1,\"2921\":2,\"3000\":1,\"3079\":1,\"3118\":1,\"3240\":1}}],[\"nextweek\",{\"1\":{\"545\":1}}],[\"nestedmethod\",{\"1\":{\"1037\":2}}],[\"nested\",{\"1\":{\"359\":1,\"1037\":2}}],[\"never\",{\"1\":{\"359\":1}}],[\"needcreate\",{\"1\":{\"307\":1}}],[\"need\",{\"1\":{\"125\":3,\"307\":1,\"2013\":1}}],[\"needed\",{\"1\":{\"122\":2}}],[\"net相关指标\",{\"1\":{\"3096\":1}}],[\"net下面的统计信息\",{\"1\":{\"1880\":1}}],[\"netmask\",{\"1\":{\"1851\":1}}],[\"netsarang\",{\"1\":{\"1898\":2}}],[\"netstat是遍历\",{\"1\":{\"1880\":1}}],[\"netstat\",{\"0\":{\"1881\":1},\"1\":{\"1786\":1,\"1835\":1,\"1881\":3,\"1892\":3,\"3099\":3}}],[\"netsh\",{\"1\":{\"1569\":1}}],[\"netfilter\",{\"1\":{\"1610\":1}}],[\"networks\",{\"1\":{\"3190\":1,\"3246\":2}}],[\"networksettings\",{\"1\":{\"1516\":1}}],[\"networkpolicy\",{\"1\":{\"1638\":1}}],[\"network\",{\"1\":{\"1511\":1,\"1560\":1,\"1638\":2,\"1643\":1,\"1807\":1,\"1905\":1,\"1918\":2,\"1919\":1,\"3097\":2,\"3099\":2,\"3100\":1,\"3104\":1,\"3246\":4,\"3266\":8}}],[\"networkexception\",{\"1\":{\"1337\":1}}],[\"netty选择nio的原因\",{\"1\":{\"3130\":1}}],[\"netty线程模型\",{\"1\":{\"3129\":1}}],[\"netty通过设置超时时间和自旋次数解决\",{\"1\":{\"3129\":1}}],[\"netty提供了多种解码器解决\",{\"1\":{\"3126\":1}}],[\"netty粘包\",{\"0\":{\"3126\":1}}],[\"nettyechoserver\",{\"1\":{\"3125\":3}}],[\"netty服务端示例\",{\"0\":{\"3125\":1}}],[\"netty服务器启动\",{\"1\":{\"1332\":1}}],[\"netty核心组件\",{\"0\":{\"3124\":1}}],[\"netty是一个高性能\",{\"1\":{\"3123\":1}}],[\"netty简介\",{\"0\":{\"3123\":1}}],[\"netty框架实战\",{\"0\":{\"3122\":1}}],[\"netty吞吐量测试工具\",{\"1\":{\"3107\":1}}],[\"netty自带性能测试工具\",{\"1\":{\"3107\":1}}],[\"netty<\",{\"1\":{\"3097\":1}}],[\"netty的事件驱动模型与nio更契合\",{\"1\":{\"3130\":1}}],[\"netty的零拷贝主要通过以下方式实现\",{\"1\":{\"3130\":1}}],[\"netty的零拷贝机制是如何实现的\",{\"1\":{\"3130\":1}}],[\"netty的fileregion实现零拷贝传输\",{\"1\":{\"3128\":1}}],[\"netty的核心优势\",{\"1\":{\"3123\":1}}],[\"netty的本地传输库\",{\"1\":{\"3097\":1}}],[\"netty的channelpipeline就是责任链模式的典型应用\",{\"1\":{\"1332\":1}}],[\"netty等框架通过nio模拟了proactor模式的效果\",{\"1\":{\"3091\":1}}],[\"netty不适合的场景\",{\"1\":{\"1347\":1}}],[\"netty相比jdk原生nio的优势\",{\"1\":{\"1347\":1}}],[\"netty相比jdk原生nio有哪些优势\",{\"1\":{\"1347\":1}}],[\"nettypipelinedemo\",{\"1\":{\"1332\":1}}],[\"netty责任链模式示例\",{\"1\":{\"1332\":1}}],[\"netty中的channelfactory就是工厂模式的应用\",{\"1\":{\"1331\":1}}],[\"netty采用此模型\",{\"1\":{\"1328\":1}}],[\"netty\",{\"1\":{\"1111\":1,\"3097\":1,\"3102\":1,\"3107\":2,\"3125\":2}}],[\"net=host\",{\"1\":{\"216\":1,\"3273\":3}}],[\"net\",{\"1\":{\"121\":1,\"125\":12,\"269\":1,\"281\":1,\"286\":2,\"471\":5,\"490\":1,\"1228\":1,\"1238\":1,\"1397\":1,\"1480\":1,\"1481\":3,\"1536\":1,\"1610\":4,\"1636\":1,\"1642\":1,\"1644\":1,\"1734\":2,\"1735\":1,\"1738\":2,\"1764\":1,\"1809\":1,\"2916\":1,\"2921\":2,\"3064\":2,\"3065\":3,\"3066\":5,\"3102\":1,\"3206\":3,\"3214\":5,\"3271\":2}}],[\"newmap\",{\"1\":{\"3007\":8}}],[\"newdecoder\",{\"1\":{\"2885\":1}}],[\"newtab\",{\"1\":{\"2601\":7}}],[\"newtable\",{\"1\":{\"1181\":4,\"2684\":4}}],[\"newthr\",{\"1\":{\"2601\":6}}],[\"newtop\",{\"1\":{\"2544\":3}}],[\"newnode\",{\"1\":{\"2485\":3,\"2494\":8,\"2497\":4,\"2512\":3,\"2544\":3,\"2600\":2,\"2628\":1}}],[\"newvalue\",{\"1\":{\"2408\":2,\"2680\":1}}],[\"newvirtualthreadpertaskexecutor\",{\"1\":{\"527\":1,\"529\":1}}],[\"newarray\",{\"1\":{\"2356\":3,\"2704\":3}}],[\"newarraylist\",{\"1\":{\"1178\":1}}],[\"newline\",{\"1\":{\"2856\":1,\"2860\":1,\"2861\":1,\"2867\":1,\"2869\":1,\"2880\":1}}],[\"newlist\",{\"1\":{\"539\":1,\"1190\":2,\"2448\":1}}],[\"newlen\",{\"1\":{\"2356\":3}}],[\"newer\",{\"1\":{\"1496\":1}}],[\"newentry\",{\"1\":{\"1181\":2}}],[\"newstate\",{\"1\":{\"3223\":4}}],[\"newsserviceimpl\",{\"1\":{\"1443\":2,\"1444\":2}}],[\"newsservice\",{\"1\":{\"1443\":2,\"1444\":2}}],[\"newsservlet2\",{\"1\":{\"1444\":3}}],[\"newsservlet\",{\"1\":{\"1443\":3}}],[\"news\",{\"1\":{\"1443\":1,\"1444\":2}}],[\"newsinglethreadscheduledexecutor\",{\"1\":{\"626\":1}}],[\"newsinglethreadexecutor\",{\"1\":{\"592\":1,\"1254\":1}}],[\"newproxyinstance\",{\"1\":{\"1267\":1,\"2994\":1,\"3002\":1,\"3005\":1}}],[\"newpassword\",{\"1\":{\"81\":1}}],[\"newbufferedreader\",{\"1\":{\"1231\":1}}],[\"newbuilder\",{\"1\":{\"471\":2,\"529\":1,\"3085\":1}}],[\"newinputstream\",{\"1\":{\"1231\":1}}],[\"newindex\",{\"1\":{\"1181\":3}}],[\"newinstance\",{\"1\":{\"289\":4,\"729\":1,\"746\":1,\"1280\":1,\"2825\":1,\"2969\":3,\"2999\":1,\"3000\":1,\"3007\":4}}],[\"newcachedthreadpool\",{\"1\":{\"3218\":1}}],[\"newcap\",{\"1\":{\"2601\":8}}],[\"newcapacity\",{\"1\":{\"1181\":2,\"2161\":2,\"2272\":8,\"2318\":6,\"2438\":6,\"2684\":4}}],[\"newcollection\",{\"1\":{\"3007\":9}}],[\"newcollectionname\",{\"1\":{\"82\":1}}],[\"newcondition\",{\"1\":{\"642\":2}}],[\"newhashmap\",{\"1\":{\"1178\":1}}],[\"newhashset\",{\"1\":{\"1178\":1}}],[\"newhttpclient\",{\"1\":{\"471\":1,\"529\":1}}],[\"newfixedthreadpool\",{\"1\":{\"1135\":1,\"1186\":1,\"2466\":1,\"2522\":1,\"2523\":1,\"2524\":1,\"2921\":1,\"3217\":1,\"3218\":1,\"3240\":1}}],[\"newfilename\",{\"1\":{\"294\":2}}],[\"new关键字\",{\"1\":{\"743\":1,\"2188\":1,\"2253\":1,\"2303\":1}}],[\"newratio和survivorratio参数控制新生代与老年代比例\",{\"1\":{\"810\":1,\"844\":1,\"878\":1,\"912\":1}}],[\"newratio=<n>\",{\"1\":{\"792\":1,\"826\":1,\"860\":1,\"894\":1}}],[\"newratio调整\",{\"1\":{\"717\":1}}],[\"newrole\",{\"1\":{\"81\":1}}],[\"newurl\",{\"1\":{\"294\":2}}],[\"newkey\",{\"1\":{\"199\":1}}],[\"new\",{\"1\":{\"47\":3,\"48\":3,\"49\":7,\"50\":3,\"58\":9,\"60\":1,\"68\":2,\"125\":2,\"186\":6,\"280\":1,\"283\":4,\"284\":2,\"286\":20,\"287\":4,\"288\":1,\"289\":3,\"291\":1,\"293\":5,\"294\":1,\"353\":2,\"354\":1,\"359\":1,\"366\":2,\"367\":2,\"368\":1,\"382\":1,\"423\":1,\"429\":2,\"430\":1,\"434\":1,\"438\":2,\"441\":1,\"450\":2,\"456\":3,\"473\":2,\"479\":1,\"495\":1,\"501\":1,\"504\":1,\"517\":2,\"521\":1,\"526\":1,\"539\":1,\"544\":1,\"552\":1,\"566\":1,\"574\":1,\"592\":4,\"593\":1,\"605\":1,\"609\":2,\"610\":1,\"613\":1,\"625\":3,\"626\":2,\"642\":2,\"643\":2,\"659\":1,\"660\":1,\"663\":1,\"675\":3,\"676\":3,\"677\":3,\"693\":1,\"710\":3,\"711\":1,\"727\":1,\"729\":5,\"746\":6,\"747\":4,\"773\":1,\"781\":1,\"993\":1,\"1037\":3,\"1041\":4,\"1043\":1,\"1044\":4,\"1053\":3,\"1055\":2,\"1056\":3,\"1058\":3,\"1069\":5,\"1081\":1,\"1094\":3,\"1095\":2,\"1104\":2,\"1111\":7,\"1123\":2,\"1126\":1,\"1129\":1,\"1132\":1,\"1139\":1,\"1144\":2,\"1150\":1,\"1151\":1,\"1160\":2,\"1162\":1,\"1164\":2,\"1166\":1,\"1170\":1,\"1178\":2,\"1179\":2,\"1181\":3,\"1182\":8,\"1185\":2,\"1186\":1,\"1190\":1,\"1191\":2,\"1193\":2,\"1194\":2,\"1203\":1,\"1210\":1,\"1211\":1,\"1221\":6,\"1222\":6,\"1224\":14,\"1225\":6,\"1227\":1,\"1228\":3,\"1234\":2,\"1236\":5,\"1238\":9,\"1247\":4,\"1250\":1,\"1253\":2,\"1254\":3,\"1267\":2,\"1269\":1,\"1270\":1,\"1294\":1,\"1295\":1,\"1296\":1,\"1301\":1,\"1314\":5,\"1315\":3,\"1321\":5,\"1324\":3,\"1325\":2,\"1326\":4,\"1332\":9,\"1336\":2,\"1337\":2,\"1338\":2,\"1339\":2,\"1431\":1,\"1439\":12,\"1440\":2,\"1443\":2,\"1444\":3,\"1788\":1,\"1798\":1,\"1949\":3,\"1962\":3,\"1974\":2,\"1975\":2,\"1987\":2,\"1988\":1,\"2007\":1,\"2037\":2,\"2039\":3,\"2047\":1,\"2054\":2,\"2057\":4,\"2059\":1,\"2068\":2,\"2079\":1,\"2100\":2,\"2115\":1,\"2144\":4,\"2159\":1,\"2161\":2,\"2167\":6,\"2173\":1,\"2174\":1,\"2180\":3,\"2183\":2,\"2188\":4,\"2189\":1,\"2198\":1,\"2202\":1,\"2204\":1,\"2207\":2,\"2224\":2,\"2228\":1,\"2234\":1,\"2239\":2,\"2240\":1,\"2245\":2,\"2246\":3,\"2248\":2,\"2249\":1,\"2253\":1,\"2256\":1,\"2263\":1,\"2265\":1,\"2266\":1,\"2269\":4,\"2271\":1,\"2276\":2,\"2278\":2,\"2279\":3,\"2280\":2,\"2282\":2,\"2288\":1,\"2291\":3,\"2292\":1,\"2296\":5,\"2303\":1,\"2304\":1,\"2311\":2,\"2323\":6,\"2324\":1,\"2325\":1,\"2326\":1,\"2327\":10,\"2328\":5,\"2329\":6,\"2340\":2,\"2341\":1,\"2342\":1,\"2344\":1,\"2346\":2,\"2348\":1,\"2352\":1,\"2355\":1,\"2356\":6,\"2358\":1,\"2369\":6,\"2370\":1,\"2371\":3,\"2372\":7,\"2373\":3,\"2382\":1,\"2386\":1,\"2388\":1,\"2392\":4,\"2406\":4,\"2407\":1,\"2408\":4,\"2409\":2,\"2410\":4,\"2419\":2,\"2420\":1,\"2423\":1,\"2427\":1,\"2429\":2,\"2436\":2,\"2438\":1,\"2439\":2,\"2441\":6,\"2448\":2,\"2449\":3,\"2450\":1,\"2451\":2,\"2452\":3,\"2456\":6,\"2465\":4,\"2466\":4,\"2467\":4,\"2468\":3,\"2476\":1,\"2477\":1,\"2478\":4,\"2480\":1,\"2481\":1,\"2485\":5,\"2494\":3,\"2495\":1,\"2497\":5,\"2498\":9,\"2505\":2,\"2506\":5,\"2507\":2,\"2508\":1,\"2509\":4,\"2512\":4,\"2513\":5,\"2522\":1,\"2523\":1,\"2524\":4,\"2525\":3,\"2533\":1,\"2534\":1,\"2536\":5,\"2537\":1,\"2539\":5,\"2544\":5,\"2554\":1,\"2555\":1,\"2571\":2,\"2573\":1,\"2577\":4,\"2578\":1,\"2586\":1,\"2601\":1,\"2604\":1,\"2605\":3,\"2612\":2,\"2613\":2,\"2614\":1,\"2628\":1,\"2631\":1,\"2632\":1,\"2640\":2,\"2655\":3,\"2660\":1,\"2661\":1,\"2668\":2,\"2669\":2,\"2670\":2,\"2679\":1,\"2683\":1,\"2684\":1,\"2685\":4,\"2691\":5,\"2692\":1,\"2693\":2,\"2694\":1,\"2697\":2,\"2704\":2,\"2707\":1,\"2708\":1,\"2712\":4,\"2715\":3,\"2723\":1,\"2740\":3,\"2742\":2,\"2765\":1,\"2779\":2,\"2831\":4,\"2832\":1,\"2833\":3,\"2837\":5,\"2843\":3,\"2844\":5,\"2845\":4,\"2849\":11,\"2855\":6,\"2856\":4,\"2857\":9,\"2861\":6,\"2866\":5,\"2867\":4,\"2868\":9,\"2873\":3,\"2878\":8,\"2879\":4,\"2880\":6,\"2885\":2,\"2891\":3,\"2892\":8,\"2893\":6,\"2897\":7,\"2902\":3,\"2903\":4,\"2904\":2,\"2905\":3,\"2909\":2,\"2911\":1,\"2914\":3,\"2915\":2,\"2916\":4,\"2917\":2,\"2921\":11,\"2927\":1,\"2936\":1,\"2937\":2,\"2947\":2,\"2949\":2,\"2951\":4,\"2952\":1,\"2953\":3,\"2955\":3,\"2959\":2,\"2960\":3,\"2965\":1,\"2970\":1,\"2971\":1,\"2974\":1,\"2986\":2,\"2989\":1,\"2990\":3,\"2993\":1,\"2999\":6,\"3000\":3,\"3002\":5,\"3003\":6,\"3005\":5,\"3007\":13,\"3010\":1,\"3017\":2,\"3019\":2,\"3020\":1,\"3023\":1,\"3035\":6,\"3038\":2,\"3039\":3,\"3040\":3,\"3041\":1,\"3046\":2,\"3050\":1,\"3065\":6,\"3066\":6,\"3070\":3,\"3078\":2,\"3079\":3,\"3082\":4,\"3086\":1,\"3087\":1,\"3113\":1,\"3116\":2,\"3117\":3,\"3118\":3,\"3120\":6,\"3125\":8,\"3126\":2,\"3137\":1,\"3150\":1,\"3154\":2,\"3162\":1,\"3166\":1,\"3190\":4,\"3205\":3,\"3206\":1,\"3208\":3,\"3209\":7,\"3214\":3,\"3215\":4,\"3218\":9,\"3224\":2,\"3225\":4,\"3237\":4,\"3238\":2,\"3240\":2,\"3241\":1}}],[\"noerror\",{\"1\":{\"3282\":1}}],[\"nosuchalgorithmexception\",{\"1\":{\"3215\":3}}],[\"nosuchmethodexception\",{\"1\":{\"2993\":2}}],[\"nosuchfieldexception\",{\"1\":{\"2984\":1,\"3000\":1}}],[\"nosuchelementexception\",{\"0\":{\"2476\":1},\"1\":{\"2408\":1,\"2441\":2,\"2497\":8,\"2498\":4}}],[\"nosql\",{\"1\":{\"127\":1}}],[\"nointerntime\",{\"1\":{\"2311\":1}}],[\"noauth\",{\"1\":{\"1787\":2}}],[\"noarch\",{\"1\":{\"1474\":1}}],[\"nofile\",{\"1\":{\"1610\":2}}],[\"noclassdeffounderror\",{\"0\":{\"1557\":1}}],[\"nohup\",{\"1\":{\"1372\":2,\"1834\":2,\"1844\":3,\"1895\":1}}],[\"nooppasswordencoder\",{\"1\":{\"451\":1}}],[\"nopush\",{\"1\":{\"216\":1,\"1595\":1}}],[\"now\",{\"1\":{\"186\":2,\"279\":5,\"545\":1,\"994\":1,\"1249\":2,\"1614\":1,\"1674\":1,\"1745\":1,\"1837\":2,\"3103\":1,\"3271\":1,\"3275\":1}}],[\"noreturnend\",{\"1\":{\"125\":1}}],[\"noreturn\",{\"1\":{\"125\":1}}],[\"normal模式下\",{\"1\":{\"1857\":2}}],[\"normaltime\",{\"1\":{\"1250\":3}}],[\"normalconcat\",{\"1\":{\"1041\":2}}],[\"normal\",{\"1\":{\"125\":1}}],[\"noncevalidityperiod\",{\"1\":{\"3215\":2}}],[\"nonce管理器\",{\"1\":{\"3215\":1}}],[\"nonce\",{\"1\":{\"3215\":18,\"3238\":2}}],[\"noncemanager\",{\"1\":{\"3215\":7}}],[\"nonblockingsocketclient\",{\"1\":{\"3117\":1}}],[\"nonstaticmethod\",{\"1\":{\"1052\":2}}],[\"nonstaticvar\",{\"1\":{\"1052\":3}}],[\"nonnull注解并进行前置校验\",{\"1\":{\"2054\":1}}],[\"nonnull\",{\"1\":{\"286\":4,\"468\":1,\"469\":2,\"1066\":1}}],[\"nonpartitioned\",{\"1\":{\"125\":1}}],[\"nonu\",{\"1\":{\"1857\":1}}],[\"nonupd\",{\"1\":{\"125\":1}}],[\"nonupdateable\",{\"1\":{\"125\":1}}],[\"nonuniq\",{\"1\":{\"125\":1}}],[\"non\",{\"0\":{\"789\":1,\"823\":1,\"857\":1,\"891\":1,\"1315\":1},\"1\":{\"125\":3,\"502\":1}}],[\"noneof\",{\"1\":{\"2369\":1}}],[\"none<\",{\"1\":{\"999\":1,\"1005\":1}}],[\"nonexisting\",{\"1\":{\"125\":3}}],[\"none\",{\"1\":{\"112\":4,\"113\":4,\"115\":1,\"280\":3,\"1440\":1,\"1469\":1,\"1638\":3,\"1648\":1,\"1649\":1,\"1650\":10,\"1656\":4,\"1685\":1,\"1687\":1,\"1688\":1,\"1711\":4,\"1713\":11,\"3266\":8,\"3282\":1}}],[\"note\",{\"1\":{\"2291\":1}}],[\"notempty和notfull\",{\"1\":{\"2483\":1}}],[\"notempty\",{\"1\":{\"642\":3}}],[\"notinterface\",{\"1\":{\"2057\":1}}],[\"notify的正确姿势\",{\"0\":{\"667\":1}}],[\"notify实现线程协作\",{\"0\":{\"660\":1}}],[\"notifyall\",{\"1\":{\"654\":1,\"660\":1,\"2555\":2}}],[\"notify\",{\"1\":{\"609\":1,\"654\":1}}],[\"notyetinitialized\",{\"1\":{\"1764\":1}}],[\"notpositiveexception\",{\"1\":{\"1253\":2}}],[\"nothing\",{\"1\":{\"1043\":1,\"1179\":1,\"1687\":2}}],[\"notfull\",{\"1\":{\"642\":3}}],[\"notblank\",{\"1\":{\"428\":1,\"2065\":2}}],[\"notation\",{\"1\":{\"1437\":1,\"2701\":1}}],[\"nota\",{\"1\":{\"125\":2}}],[\"notnull\",{\"1\":{\"125\":1,\"289\":2,\"428\":1,\"1069\":8,\"3003\":7}}],[\"not\",{\"0\":{\"1557\":1,\"1664\":1},\"1\":{\"125\":41,\"156\":1,\"232\":68,\"279\":1,\"359\":1,\"993\":1,\"994\":1,\"997\":1,\"1005\":2,\"1458\":2,\"1569\":1,\"1578\":1,\"1640\":1,\"1684\":68,\"1687\":38,\"1764\":2,\"1788\":1,\"1825\":1,\"1831\":3,\"1949\":3,\"1962\":4,\"1974\":1,\"1975\":2,\"1987\":1,\"1988\":1,\"2051\":1,\"2111\":1,\"2112\":1,\"2256\":1,\"2708\":1,\"2956\":1,\"2999\":1,\"3000\":1,\"3238\":1,\"3268\":1,\"3282\":1,\"3283\":1}}],[\"nodeid\",{\"1\":{\"3235\":2}}],[\"node数组\",{\"1\":{\"2541\":1}}],[\"node>\",{\"1\":{\"2512\":1}}],[\"node<k\",{\"1\":{\"2600\":3,\"2601\":8,\"2623\":2,\"2628\":2,\"2629\":2,\"2630\":1}}],[\"node<object>\",{\"1\":{\"2508\":2}}],[\"node<>\",{\"1\":{\"2485\":2,\"2494\":2,\"2497\":1,\"2544\":1}}],[\"node<t>\",{\"1\":{\"2485\":7,\"2544\":7}}],[\"node<e>\",{\"1\":{\"2319\":5,\"2490\":7,\"2494\":5,\"2495\":4,\"2496\":7,\"2497\":10,\"2498\":3}}],[\"node=192\",{\"1\":{\"1677\":1}}],[\"nodename字段直接指定目标节点\",{\"1\":{\"1660\":1}}],[\"node187\",{\"1\":{\"1660\":1,\"1713\":1}}],[\"node1\",{\"1\":{\"1660\":7}}],[\"nodeport\",{\"1\":{\"1648\":1,\"1649\":1,\"1650\":1,\"1685\":1,\"1688\":1,\"1713\":1,\"3273\":2}}],[\"nodeps\",{\"1\":{\"1636\":1,\"1724\":4,\"1769\":1,\"1770\":1,\"1778\":1,\"1904\":1}}],[\"nodelimit\",{\"1\":{\"1638\":1}}],[\"nodelay\",{\"0\":{\"1344\":1},\"1\":{\"1111\":1,\"1396\":2,\"3091\":1}}],[\"nodelay减少延迟\",{\"1\":{\"1111\":1}}],[\"node24\",{\"1\":{\"1667\":1}}],[\"node2打上标签sign\",{\"1\":{\"1660\":1}}],[\"node2\",{\"1\":{\"1660\":6}}],[\"node23\",{\"1\":{\"1638\":2}}],[\"node22\",{\"1\":{\"1638\":2}}],[\"node版本管理工具\",{\"1\":{\"264\":1}}],[\"node官网下载对应系统版本\",{\"1\":{\"260\":1}}],[\"nodestovisit\",{\"1\":{\"2027\":1}}],[\"nodeselector\",{\"1\":{\"1638\":3,\"1660\":2,\"1661\":1,\"1713\":1}}],[\"nodes\",{\"1\":{\"186\":1,\"208\":1,\"1510\":1,\"1542\":1,\"1560\":1,\"1658\":2,\"1660\":4,\"3086\":2,\"3273\":1}}],[\"node\",{\"1\":{\"122\":3,\"186\":4,\"208\":1,\"260\":1,\"266\":1,\"280\":1,\"1512\":1,\"1560\":2,\"1638\":3,\"1656\":1,\"1658\":1,\"1659\":1,\"1660\":2,\"1677\":5,\"1711\":1,\"2319\":1,\"2485\":1,\"2490\":1,\"2494\":1,\"2495\":3,\"2496\":1,\"2498\":1,\"2512\":21,\"2544\":1,\"2601\":1,\"3086\":7,\"3250\":2}}],[\"no\",{\"0\":{\"1668\":1},\"1\":{\"112\":1,\"125\":51,\"140\":1,\"157\":1,\"165\":1,\"182\":1,\"283\":1,\"992\":1,\"999\":1,\"1443\":1,\"1503\":2,\"1554\":1,\"1677\":1,\"1735\":2,\"1764\":2,\"1788\":2,\"1809\":1,\"2441\":1,\"2715\":1,\"3154\":2,\"3266\":12,\"3275\":1}}],[\"布尔类型\",{\"1\":{\"2099\":1,\"2766\":1}}],[\"布尔型\",{\"1\":{\"790\":1,\"824\":1,\"858\":1,\"892\":1}}],[\"布尔值\",{\"1\":{\"38\":1,\"1222\":1,\"2845\":1,\"2902\":1}}],[\"布局等的规范\",{\"1\":{\"1946\":1}}],[\"布局包括\",{\"1\":{\"8\":1}}],[\"布局\",{\"0\":{\"8\":1},\"2\":{\"10\":1}}],[\"布局与功能禁用\",{\"0\":{\"5\":1}}],[\"数学\",{\"1\":{\"3046\":2}}],[\"数学变换\",{\"1\":{\"2727\":1}}],[\"数学原理\",{\"1\":{\"2455\":1}}],[\"数列索引\",{\"1\":{\"2711\":2,\"2716\":1}}],[\"数值等基础数据类型\",{\"1\":{\"2307\":1}}],[\"数值越小\",{\"1\":{\"178\":1}}],[\"数值越大\",{\"1\":{\"178\":1}}],[\"数据必须通过buffer读写\",{\"1\":{\"3117\":1}}],[\"数据体积小\",{\"1\":{\"3085\":1}}],[\"数据缓冲区\",{\"1\":{\"3079\":1}}],[\"数据粘包问题\",{\"1\":{\"3069\":1}}],[\"数据链路层\",{\"1\":{\"3058\":1}}],[\"数据报通道\",{\"1\":{\"2915\":1}}],[\"数据处理\",{\"1\":{\"2913\":1}}],[\"数据处理流\",{\"1\":{\"1222\":1}}],[\"数据读取到缓冲区后进行处理\",{\"1\":{\"2911\":1}}],[\"数据读写的容器\",{\"1\":{\"1315\":1}}],[\"数据只有在缓冲区满或显式刷新时才写入目标\",{\"1\":{\"2871\":1}}],[\"数据先被传输到缓冲区\",{\"1\":{\"2865\":1}}],[\"数据转换\",{\"1\":{\"2847\":1}}],[\"数据流方向\",{\"1\":{\"2897\":1}}],[\"数据流示例\",{\"1\":{\"2845\":1}}],[\"数据流\",{\"0\":{\"2845\":1}}],[\"数据流提供者\",{\"1\":{\"269\":1}}],[\"数据写入成功\",{\"1\":{\"2832\":1}}],[\"数据写入完成\",{\"1\":{\"1222\":1,\"2845\":1,\"2902\":1}}],[\"数据模型\",{\"1\":{\"2763\":1}}],[\"数据量越大\",{\"1\":{\"2511\":1}}],[\"数据压缩\",{\"1\":{\"2119\":1}}],[\"数据自治程度\",{\"1\":{\"2014\":1}}],[\"数据段+栈\",{\"1\":{\"1882\":1}}],[\"数据存放路径\",{\"1\":{\"1734\":1}}],[\"数据存储集群\",{\"1\":{\"3228\":1}}],[\"数据存储优化\",{\"1\":{\"3228\":1}}],[\"数据存储设计\",{\"1\":{\"185\":1}}],[\"数据存储需求\",{\"1\":{\"134\":1}}],[\"数据挂载\",{\"0\":{\"1661\":1}}],[\"数据文件必须是可写的\",{\"1\":{\"1586\":1}}],[\"数据目录\",{\"1\":{\"1578\":1,\"1734\":1}}],[\"数据可以落地elasticsearch\",{\"1\":{\"1537\":1}}],[\"数据可以良好的做到阶段内无丢失\",{\"1\":{\"142\":1}}],[\"数据收集处理引擎\",{\"1\":{\"1507\":1}}],[\"数据形式\",{\"1\":{\"1435\":1}}],[\"数据传输和连接关闭四个阶段\",{\"1\":{\"3065\":1}}],[\"数据传输对象\",{\"1\":{\"2763\":1}}],[\"数据传输通道\",{\"1\":{\"1347\":1}}],[\"数据传输的机密性\",{\"1\":{\"114\":1}}],[\"数据分片\",{\"1\":{\"1312\":1}}],[\"数据分布的均匀性\",{\"1\":{\"75\":1}}],[\"数据加载失败\",{\"1\":{\"1253\":2}}],[\"数据从内核socket缓冲区发送到网卡\",{\"1\":{\"1232\":1}}],[\"数据从内核缓冲区拷贝到用户缓冲区\",{\"1\":{\"1232\":1}}],[\"数据从用户缓冲区拷贝到内核socket缓冲区\",{\"1\":{\"1232\":1}}],[\"数据从磁盘读取到内核缓冲区\",{\"1\":{\"1232\":1}}],[\"数据结构设计\",{\"0\":{\"2634\":1,\"2687\":1}}],[\"数据结构需求\",{\"1\":{\"2542\":1}}],[\"数据结构\",{\"1\":{\"1196\":1,\"2503\":1,\"2541\":1,\"2547\":1,\"2616\":1,\"2666\":1}}],[\"数据结构可以作为一个简单的队列使用\",{\"1\":{\"130\":1}}],[\"数据驱动的优化\",{\"0\":{\"515\":1}}],[\"数据访问实现\",{\"1\":{\"3005\":1}}],[\"数据访问接口\",{\"1\":{\"3005\":1}}],[\"数据访问层\",{\"1\":{\"2007\":2,\"2763\":1}}],[\"数据访问是企业级应用程序开发中的重要部分\",{\"1\":{\"361\":1}}],[\"数据访问模块\",{\"1\":{\"313\":1}}],[\"数据访问量较大\",{\"1\":{\"191\":1}}],[\"数据查询与导出分离\",{\"1\":{\"278\":1}}],[\"数据互通\",{\"1\":{\"242\":1}}],[\"数据有效期策略调整\",{\"1\":{\"190\":1}}],[\"数据发送有延迟\",{\"1\":{\"173\":1}}],[\"数据不一致\",{\"0\":{\"173\":1},\"1\":{\"2613\":1,\"2640\":1,\"2670\":1}}],[\"数据来源\",{\"1\":{\"167\":2}}],[\"数据冗余\",{\"1\":{\"162\":1}}],[\"数据同步操作频度较高\",{\"1\":{\"189\":1}}],[\"数据同步工作完成\",{\"1\":{\"166\":1}}],[\"数据同步阶段slave说明\",{\"1\":{\"166\":1}}],[\"数据同步阶段应避开流量高峰期\",{\"1\":{\"166\":1}}],[\"数据同步阶段master说明\",{\"1\":{\"166\":1}}],[\"数据同步阶段\",{\"1\":{\"163\":1,\"166\":1}}],[\"数据同步\",{\"0\":{\"166\":1},\"1\":{\"161\":1}}],[\"数据丢失\",{\"1\":{\"161\":1}}],[\"数据淘汰策略配置依据\",{\"1\":{\"157\":1}}],[\"数据淘汰策略\",{\"0\":{\"155\":1}}],[\"数据到达过期时间\",{\"1\":{\"152\":1}}],[\"数据删除策略的目标\",{\"0\":{\"150\":1}}],[\"数据删除策略\",{\"0\":{\"149\":1}}],[\"数据的时效在redis中如何存储呢\",{\"1\":{\"148\":1}}],[\"数据呈现阶段有效性\",{\"1\":{\"142\":1}}],[\"数据安全性\",{\"1\":{\"141\":1}}],[\"数据级\",{\"1\":{\"141\":1}}],[\"数据准确性较高\",{\"1\":{\"140\":1}}],[\"数据类型的命名和用法保持一致\",{\"1\":{\"2103\":1}}],[\"数据类型转换\",{\"0\":{\"2101\":1}}],[\"数据类型是java语言的基础\",{\"1\":{\"2097\":1}}],[\"数据类型与类型转换\",{\"0\":{\"1039\":1}}],[\"数据类型class\",{\"1\":{\"269\":1}}],[\"数据类型\",{\"0\":{\"2096\":1,\"2766\":1},\"1\":{\"269\":1,\"1034\":1,\"2143\":2,\"2166\":2}}],[\"数据类型相关命令以及高级命令\",{\"1\":{\"195\":1}}],[\"数据类型概览\",{\"1\":{\"131\":1}}],[\"数据类型保存\",{\"1\":{\"130\":1}}],[\"数据\",{\"1\":{\"130\":1}}],[\"数据截短\",{\"1\":{\"125\":1}}],[\"数据源地址\",{\"1\":{\"1685\":1}}],[\"数据源管理\",{\"0\":{\"369\":1}}],[\"数据源连接字符串\",{\"1\":{\"125\":2}}],[\"数据源错误\",{\"1\":{\"125\":2}}],[\"数据过长\",{\"1\":{\"125\":1}}],[\"数据就有可能被窃取\",{\"1\":{\"114\":1}}],[\"数据在管道中流动\",{\"1\":{\"95\":1}}],[\"数据一致性弱\",{\"1\":{\"2528\":1}}],[\"数据一致性较弱\",{\"1\":{\"2456\":1,\"2513\":1}}],[\"数据一致性变差\",{\"1\":{\"166\":1}}],[\"数据一致性\",{\"1\":{\"94\":1}}],[\"数据库测试规范\",{\"0\":{\"2048\":1,\"2055\":1,\"2063\":1}}],[\"数据库字符编码集修改为utf8mb4\",{\"1\":{\"1831\":1}}],[\"数据库里的\",{\"1\":{\"1775\":1}}],[\"数据库密码\",{\"1\":{\"1648\":1,\"1649\":1,\"1685\":1,\"1688\":1}}],[\"数据库访问\",{\"1\":{\"1238\":1}}],[\"数据库连接错误\",{\"1\":{\"2051\":1}}],[\"数据库连接失败\",{\"1\":{\"2050\":1,\"2937\":1}}],[\"数据库连接方式\",{\"1\":{\"1688\":1}}],[\"数据库连接\",{\"1\":{\"781\":1}}],[\"数据库连接量瞬间激增\",{\"1\":{\"191\":1}}],[\"数据库操作等\",{\"1\":{\"529\":1}}],[\"数据库查询结果\",{\"1\":{\"2177\":1}}],[\"数据库查询逻辑\",{\"1\":{\"521\":1,\"2054\":1}}],[\"数据库查询未得到对应数据\",{\"1\":{\"192\":1}}],[\"数据库配置\",{\"1\":{\"403\":1}}],[\"数据库全名\",{\"1\":{\"232\":8,\"1684\":8}}],[\"数据库全部重启\",{\"1\":{\"190\":1}}],[\"数据库服务器压力激增\",{\"1\":{\"192\":1}}],[\"数据库服务器又崩溃了\",{\"1\":{\"192\":1}}],[\"数据库服务器崩溃\",{\"1\":{\"190\":1}}],[\"数据库流量激增\",{\"1\":{\"190\":1}}],[\"数据库同时接收到大量的请求无法及时处理\",{\"1\":{\"190\":1}}],[\"数据库崩溃\",{\"1\":{\"190\":2,\"191\":1,\"192\":1}}],[\"数据库不存在\",{\"1\":{\"125\":1}}],[\"数据库已存在\",{\"1\":{\"125\":1}}],[\"数据库重启后\",{\"1\":{\"113\":1}}],[\"数据库主从日志很大\",{\"1\":{\"113\":1}}],[\"数据库命令\",{\"0\":{\"79\":1}}],[\"数据库\",{\"1\":{\"37\":1,\"125\":1,\"127\":1,\"1244\":1}}],[\"数组类型处理\",{\"1\":{\"3140\":1}}],[\"数组类型原子类\",{\"1\":{\"672\":1}}],[\"数组索引\",{\"1\":{\"2599\":1}}],[\"数组长度\",{\"1\":{\"2599\":1}}],[\"数组长度陷阱\",{\"0\":{\"2181\":1}}],[\"数组下标越界\",{\"0\":{\"2450\":1}}],[\"数组下标越界异常\",{\"1\":{\"1169\":1}}],[\"数组复用\",{\"1\":{\"2445\":1}}],[\"数组复制开销\",{\"0\":{\"2345\":1}}],[\"数组复制\",{\"0\":{\"2151\":1},\"1\":{\"2318\":1,\"2355\":1}}],[\"数组复制时的浅拷贝问题\",{\"1\":{\"1169\":1}}],[\"数组+链表\",{\"1\":{\"2400\":1}}],[\"数组+链表+红黑树\",{\"1\":{\"2400\":2,\"2518\":1,\"2666\":1}}],[\"数组元素连续存储\",{\"1\":{\"2334\":1}}],[\"数组打印方法性能对比\",{\"0\":{\"2227\":1}}],[\"数组打印是日常调试和数据展示的常见需求\",{\"1\":{\"2209\":1}}],[\"数组去重\",{\"1\":{\"2727\":1}}],[\"数组去重有哪些方法\",{\"1\":{\"2160\":1}}],[\"数组去重并排序\",{\"1\":{\"1182\":1}}],[\"数组与集合的选择\",{\"0\":{\"2156\":1}}],[\"数组与字符串是java面试中的基础重点内容\",{\"1\":{\"1157\":1}}],[\"数组与字符串\",{\"0\":{\"1156\":1}}],[\"数组变量存储的是数组对象的引用地址\",{\"1\":{\"2152\":1}}],[\"数组在java中是引用类型\",{\"1\":{\"2152\":1}}],[\"数组在java中可以通过两种方式定义\",{\"1\":{\"2142\":1}}],[\"数组查找\",{\"0\":{\"2150\":1}}],[\"数组排序\",{\"0\":{\"2149\":1}}],[\"数组排序与查找\",{\"0\":{\"1161\":1}}],[\"数组遍历\",{\"0\":{\"2147\":1,\"2170\":1},\"1\":{\"2702\":1}}],[\"数组访问\",{\"0\":{\"2146\":1},\"1\":{\"2702\":1}}],[\"数组访问运算符\",{\"1\":{\"2115\":1}}],[\"数组通过索引访问元素\",{\"1\":{\"2145\":1}}],[\"数组创建后赋值\",{\"1\":{\"2144\":1}}],[\"数组初始化\",{\"0\":{\"2144\":1}}],[\"数组名\",{\"1\":{\"2143\":2,\"2166\":2}}],[\"数组声明\",{\"0\":{\"2143\":1}}],[\"数组的优缺点\",{\"0\":{\"2155\":1}}],[\"数组的内存特性\",{\"0\":{\"2152\":1}}],[\"数组的常用操作\",{\"0\":{\"2148\":1}}],[\"数组的访问与遍历\",{\"0\":{\"2145\":1}}],[\"数组的定义与初始化\",{\"0\":{\"2142\":1}}],[\"数组的初始化与遍历\",{\"0\":{\"1160\":1}}],[\"数组具有固定长度\",{\"1\":{\"2140\":1}}],[\"数组是java中最基础的数据结构之一\",{\"1\":{\"2140\":1}}],[\"数组是一种线性数据结构\",{\"1\":{\"1168\":1}}],[\"数组越界等问题\",{\"1\":{\"2351\":1}}],[\"数组越界异常\",{\"0\":{\"2158\":1}}],[\"数组越界\",{\"1\":{\"1244\":1}}],[\"数组常见问题\",{\"1\":{\"1169\":1}}],[\"数组设计思想\",{\"1\":{\"1168\":1}}],[\"数组工具类初始化\",{\"1\":{\"1160\":1}}],[\"数组经典面试题\",{\"0\":{\"1159\":1}}],[\"数组引用不变\",{\"1\":{\"1053\":1}}],[\"数组\",{\"0\":{\"2139\":1,\"3325\":1},\"1\":{\"38\":1,\"708\":1,\"1181\":1,\"1196\":2,\"1288\":1,\"1814\":1,\"1833\":1,\"1834\":1,\"2100\":1,\"2363\":1,\"2461\":3,\"2518\":2,\"2607\":1,\"2707\":1,\"2721\":1,\"2766\":1,\"2903\":1}}],[\"数字和下划线\",{\"1\":{\"2065\":1}}],[\"数字0\",{\"1\":{\"1857\":1}}],[\"数字\",{\"1\":{\"38\":1}}],[\"字体\",{\"1\":{\"1946\":1}}],[\"字符数据写入完成\",{\"1\":{\"2903\":1}}],[\"字符数组\",{\"1\":{\"2901\":1}}],[\"字符数组流和字符串流\",{\"0\":{\"2857\":1}}],[\"字符数组转字符串\",{\"1\":{\"2198\":1}}],[\"字符数组转换\",{\"1\":{\"2188\":1}}],[\"字符数组方式\",{\"1\":{\"1164\":1}}],[\"字符数组反转\",{\"1\":{\"1164\":1,\"2207\":1}}],[\"字符编码示例\",{\"1\":{\"2881\":1}}],[\"字符编码的处理\",{\"0\":{\"2881\":1}}],[\"字符编码问题\",{\"0\":{\"1236\":1},\"1\":{\"2860\":1,\"2908\":1}}],[\"字符缓冲流提供了一些额外的便捷方法\",{\"1\":{\"2869\":1}}],[\"字符缓冲流示例\",{\"1\":{\"2867\":1}}],[\"字符缓冲流\",{\"0\":{\"2867\":1}}],[\"字符读写\",{\"1\":{\"2836\":1}}],[\"字符输出流\",{\"1\":{\"2830\":1}}],[\"字符输入流\",{\"1\":{\"2830\":1}}],[\"字符文件流适用于文本文件的读写\",{\"1\":{\"2833\":1}}],[\"字符文件流\",{\"1\":{\"2830\":1}}],[\"字符位置查找\",{\"1\":{\"2195\":1}}],[\"字符类型\",{\"1\":{\"2099\":1,\"2766\":1}}],[\"字符到缓冲区\",{\"1\":{\"1224\":1}}],[\"字符\",{\"1\":{\"1221\":1,\"2902\":1,\"2903\":1}}],[\"字符流操作与字节流实现分离\",{\"1\":{\"2883\":1}}],[\"字符流到字节流\",{\"1\":{\"2877\":1}}],[\"字符流也需要显式关闭\",{\"1\":{\"2860\":1}}],[\"字符流专注于文本处理\",{\"1\":{\"2859\":1}}],[\"字符流设计体现了以下核心思想\",{\"1\":{\"2859\":1}}],[\"字符流与字节流的转换\",{\"0\":{\"2855\":1}}],[\"字符流主要包括reader和writer两大抽象基类\",{\"1\":{\"2851\":1}}],[\"字符流基于unicode编码\",{\"1\":{\"2851\":1}}],[\"字符流是java\",{\"1\":{\"2851\":1}}],[\"字符流会使用默认字符编码\",{\"1\":{\"2833\":1}}],[\"字符流可以按行读取\",{\"1\":{\"1221\":1}}],[\"字符流\",{\"0\":{\"2850\":1},\"1\":{\"1221\":1,\"2909\":1}}],[\"字符串编码\",{\"1\":{\"3125\":1}}],[\"字符串解码\",{\"1\":{\"3125\":1}}],[\"字符串不可变特性\",{\"1\":{\"2785\":1}}],[\"字符串是最小粒度的共享单位\",{\"1\":{\"2308\":1}}],[\"字符串是java中最常用的数据类型之一\",{\"1\":{\"2185\":1}}],[\"字符串创建与常量池交互\",{\"0\":{\"2303\":1}}],[\"字符串创建方式\",{\"0\":{\"2188\":1}}],[\"字符串源码解读\",{\"0\":{\"2283\":1}}],[\"字符串对象\",{\"0\":{\"2253\":1},\"1\":{\"2253\":1}}],[\"字符串对象声明\",{\"1\":{\"2239\":1}}],[\"字符串驻留机制以及相关的性能优化策略\",{\"1\":{\"2236\":1}}],[\"字符串空值判断\",{\"0\":{\"2205\":1}}],[\"字符串与其他类型转换\",{\"0\":{\"2198\":1}}],[\"字符串分割\",{\"1\":{\"2197\":1}}],[\"字符串分割与拼接\",{\"0\":{\"2197\":1}}],[\"字符串截取与替换\",{\"0\":{\"2196\":1}}],[\"字符串查找\",{\"0\":{\"2195\":1}}],[\"字符串比较使用==的陷阱\",{\"0\":{\"2204\":1}}],[\"字符串比较\",{\"0\":{\"2194\":1}}],[\"字符串的不可变性\",{\"0\":{\"2190\":1}}],[\"字符串的创建与初始化\",{\"0\":{\"2187\":1}}],[\"字符串字面量\",{\"1\":{\"2188\":1}}],[\"字符串拼接与常量池\",{\"0\":{\"2304\":1}}],[\"字符串拼接性能问题\",{\"0\":{\"2257\":1}}],[\"字符串拼接性能对比\",{\"0\":{\"2202\":1,\"2310\":1},\"1\":{\"1041\":1}}],[\"字符串拼接\",{\"1\":{\"2071\":1,\"2197\":1}}],[\"字符串设计思想\",{\"1\":{\"1168\":1}}],[\"字符串中的第一个唯一字符\",{\"0\":{\"1166\":1}}],[\"字符串反转\",{\"0\":{\"1164\":1}}],[\"字符串经典面试题\",{\"0\":{\"1163\":1}}],[\"字符串缩进方法indent\",{\"1\":{\"1059\":1}}],[\"字符串格式错误\",{\"1\":{\"1055\":1}}],[\"字符串常用方法\",{\"0\":{\"2193\":1}}],[\"字符串常见问题\",{\"1\":{\"1169\":1}}],[\"字符串常被用作参数\",{\"1\":{\"1048\":1,\"2207\":1}}],[\"字符串常量比较错误\",{\"0\":{\"2255\":1}}],[\"字符串常量比较需要区分引用比较\",{\"1\":{\"2247\":1}}],[\"字符串常量被记录在class文件的常量池中\",{\"1\":{\"2243\":1}}],[\"字符串常量声明\",{\"1\":{\"2239\":1}}],[\"字符串常量的比较操作\",{\"0\":{\"2247\":1}}],[\"字符串常量的声明方式\",{\"0\":{\"2239\":1}}],[\"字符串常量的定义与特性\",{\"0\":{\"2238\":1}}],[\"字符串常量是通过双引号直接声明的字符串\",{\"1\":{\"2238\":1}}],[\"字符串常量是java中一种特殊的字符串表示形式\",{\"1\":{\"2236\":1}}],[\"字符串常量池中的字符串是强引用\",{\"1\":{\"2691\":1}}],[\"字符串常量池采用享元模式\",{\"1\":{\"2308\":1}}],[\"字符串常量池是jvm为优化字符串性能而设计的缓存机制\",{\"1\":{\"2301\":1}}],[\"字符串常量池是java堆内存中的一个特殊区域\",{\"1\":{\"2241\":1}}],[\"字符串常量池实现\",{\"0\":{\"2301\":1}}],[\"字符串常量池相关\",{\"1\":{\"2291\":1}}],[\"字符串常量池的设计目的\",{\"0\":{\"2252\":1}}],[\"字符串常量池的工作流程\",{\"0\":{\"2243\":1}}],[\"字符串常量池的工作原理理解不清\",{\"1\":{\"1169\":1}}],[\"字符串常量池的实现原理是什么\",{\"1\":{\"2206\":1}}],[\"字符串常量池机制\",{\"0\":{\"2189\":1,\"2241\":1}}],[\"字符串常量池减少了内存开销\",{\"1\":{\"1168\":1}}],[\"字符串常量池可以复用相同内容的字符串\",{\"1\":{\"1048\":1}}],[\"字符串常量池\",{\"1\":{\"1041\":1,\"2253\":1}}],[\"字符串常量\",{\"0\":{\"2235\":1,\"2253\":1},\"1\":{\"725\":1,\"2253\":1}}],[\"字符串常量存储在方法区的常量池中\",{\"1\":{\"703\":1}}],[\"字符串操作是java开发中的基础技能\",{\"1\":{\"2185\":1}}],[\"字符串操作\",{\"1\":{\"1041\":1}}],[\"字符串转字符数组\",{\"1\":{\"2198\":1}}],[\"字符串转换\",{\"1\":{\"2101\":1}}],[\"字符串转换为整型数组\",{\"1\":{\"286\":1}}],[\"字符串转数字时的格式错误\",{\"1\":{\"1055\":1}}],[\"字符串转基本类型\",{\"1\":{\"1040\":1,\"2198\":1}}],[\"字符串增强方法\",{\"0\":{\"472\":1}}],[\"字符串内任意符号$\",{\"1\":{\"289\":1}}],[\"字符串内任意符号\",{\"1\":{\"289\":1}}],[\"字符串变量替换\",{\"0\":{\"289\":1}}],[\"字符串命令\",{\"0\":{\"200\":1}}],[\"字符串\",{\"0\":{\"2184\":1,\"3325\":1},\"1\":{\"38\":1,\"131\":1,\"1222\":1,\"2307\":1,\"2845\":1,\"2901\":1}}],[\"字面量声明\",{\"1\":{\"2253\":1}}],[\"字面量\",{\"1\":{\"725\":1}}],[\"字节顺序标记\",{\"1\":{\"2884\":1}}],[\"字节缓冲流示例\",{\"1\":{\"2866\":1}}],[\"字节缓冲流\",{\"0\":{\"2866\":1}}],[\"字节数组或字符数组\",{\"1\":{\"2865\":1}}],[\"字节数组流示例\",{\"1\":{\"2844\":1}}],[\"字节数组流用于在内存中操作字节数据\",{\"1\":{\"2844\":1}}],[\"字节数组流\",{\"0\":{\"2844\":1}}],[\"字节数组转换\",{\"1\":{\"2188\":1}}],[\"字节输出流\",{\"1\":{\"2830\":1}}],[\"字节输入流\",{\"1\":{\"2830\":1}}],[\"字节文件流\",{\"1\":{\"2830\":1}}],[\"字节流到字符流的转换\",{\"1\":{\"2885\":1}}],[\"字节流到字符流\",{\"1\":{\"2877\":1}}],[\"字节流专注于二进制数据处理\",{\"1\":{\"2859\":1}}],[\"字节流设计体现了以下核心思想\",{\"1\":{\"2847\":1}}],[\"字节流基础使用示例\",{\"1\":{\"2843\":1}}],[\"字节流的基本使用\",{\"0\":{\"2843\":1}}],[\"字节流主要包括inputstream和outputstream两大抽象基类\",{\"1\":{\"2839\":1}}],[\"字节流是java\",{\"1\":{\"2839\":1}}],[\"字节流直接读取字节数组\",{\"1\":{\"1221\":1}}],[\"字节流与字符流转换示例\",{\"1\":{\"2855\":1}}],[\"字节流与字符流之间的转换\",{\"1\":{\"1231\":1}}],[\"字节流与字符流读取文件对比示例\",{\"1\":{\"1221\":1}}],[\"字节流与字符流读取文件对比\",{\"1\":{\"1221\":1}}],[\"字节流与字符流的区别\",{\"0\":{\"1221\":1}}],[\"字节流\",{\"0\":{\"2838\":1},\"1\":{\"1221\":1,\"2909\":1}}],[\"字节码级别处理\",{\"0\":{\"3148\":1}}],[\"字节码级别的缺陷检测\",{\"1\":{\"2017\":1}}],[\"字节码增强\",{\"1\":{\"3011\":1,\"3111\":1}}],[\"字节码\",{\"1\":{\"1064\":1,\"3135\":1}}],[\"字节码是连接java源代码和机器码的中间表示\",{\"1\":{\"696\":1}}],[\"字节码生成\",{\"1\":{\"556\":1}}],[\"字节码层面的变化\",{\"0\":{\"505\":1}}],[\"字节值\",{\"1\":{\"167\":1}}],[\"字节\",{\"1\":{\"125\":3,\"1221\":1,\"1238\":1}}],[\"字段查找与方法查找类似\",{\"1\":{\"2984\":1}}],[\"字段查找流程\",{\"0\":{\"2984\":1}}],[\"字段信息\",{\"1\":{\"2981\":1}}],[\"字段名\",{\"1\":{\"1814\":1,\"1833\":1,\"1834\":1}}],[\"字段符号引用\",{\"1\":{\"725\":1}}],[\"字段表集合\",{\"1\":{\"724\":1}}],[\"字段更新器原子类\",{\"1\":{\"672\":1}}],[\"字段注入\",{\"0\":{\"326\":1},\"1\":{\"322\":1,\"326\":1}}],[\"字段分隔符参量不是预期的\",{\"1\":{\"125\":1}}],[\"字段\",{\"1\":{\"37\":1,\"125\":1,\"1064\":1,\"1069\":2,\"1087\":1,\"1261\":1,\"1263\":1,\"1814\":2,\"1827\":1,\"2982\":1}}],[\"旅行\",{\"1\":{\"37\":1,\"47\":1,\"84\":1}}],[\"北京市朝阳区\",{\"1\":{\"86\":1}}],[\"北京\",{\"1\":{\"37\":1,\"47\":1,\"84\":1,\"2329\":2}}],[\"aq\",{\"1\":{\"3245\":1}}],[\"aqs\",{\"1\":{\"639\":1}}],[\"aqs框架原理\",{\"0\":{\"639\":1}}],[\"aes\",{\"1\":{\"3237\":1}}],[\"aeiou\",{\"1\":{\"2196\":1}}],[\"a2\",{\"1\":{\"3215\":3}}],[\"a1\",{\"1\":{\"3215\":3}}],[\"amd64\",{\"1\":{\"3246\":4}}],[\"amount\",{\"1\":{\"2746\":7,\"2750\":7,\"2947\":5}}],[\"amortized\",{\"1\":{\"2503\":1,\"2712\":1}}],[\"ame\",{\"1\":{\"997\":1}}],[\"a的列数必须等于b的行数\",{\"1\":{\"2183\":1}}],[\"a++\",{\"1\":{\"2109\":1}}],[\"a977\",{\"1\":{\"1918\":1}}],[\"a|grep\",{\"1\":{\"1875\":1}}],[\"a=\",{\"1\":{\"1794\":2}}],[\"a=rtpmap\",{\"1\":{\"1092\":1,\"3180\":1,\"3190\":1}}],[\"air原则\",{\"1\":{\"2044\":1}}],[\"air\",{\"1\":{\"1609\":1}}],[\"aioserver\",{\"1\":{\"3120\":1}}],[\"aioserverexample\",{\"1\":{\"1238\":1}}],[\"aio异步服务器示例\",{\"1\":{\"3120\":1}}],[\"aio服务端示例\",{\"1\":{\"3120\":1}}],[\"aio服务器已收到\",{\"1\":{\"3120\":1}}],[\"aio服务器启动\",{\"1\":{\"1238\":1,\"3120\":1}}],[\"aio服务器示例\",{\"1\":{\"1238\":1}}],[\"aio的核心类\",{\"1\":{\"3120\":1}}],[\"aio基于回调机制\",{\"1\":{\"3120\":1}}],[\"aio虽然理论上更先进\",{\"1\":{\"1238\":1}}],[\"aio代码示例\",{\"1\":{\"1238\":1}}],[\"aio适用场景\",{\"1\":{\"1238\":1}}],[\"aio\",{\"0\":{\"1316\":1,\"3080\":1,\"3120\":1},\"1\":{\"1238\":6,\"3120\":1,\"3130\":1}}],[\"auwxf\",{\"1\":{\"1853\":1}}],[\"aux|grep\",{\"1\":{\"1856\":1}}],[\"aux\",{\"1\":{\"1780\":1}}],[\"auditauthorizationsuccess\",{\"1\":{\"1738\":2}}],[\"audit\",{\"1\":{\"1738\":3}}],[\"auditing\",{\"1\":{\"1638\":1}}],[\"auditlog\",{\"1\":{\"1503\":2,\"1738\":3}}],[\"autumn\",{\"1\":{\"2369\":1,\"2821\":1,\"2822\":1}}],[\"authheader\",{\"1\":{\"3215\":10,\"3238\":7}}],[\"authcheck\",{\"1\":{\"1738\":1}}],[\"auth=true\",{\"1\":{\"1644\":1,\"1736\":1}}],[\"authenticate头域\",{\"1\":{\"3215\":2}}],[\"authenticated\",{\"1\":{\"451\":1,\"456\":1,\"1764\":1,\"2012\":1}}],[\"authentication\",{\"1\":{\"456\":2,\"1638\":1,\"1787\":2,\"3238\":1}}],[\"authenticationmanagerbuilder\",{\"1\":{\"451\":1}}],[\"auth0<\",{\"1\":{\"307\":1}}],[\"authority\",{\"1\":{\"3273\":2,\"3282\":1}}],[\"authorizehttprequests\",{\"1\":{\"2012\":1}}],[\"authorized\",{\"1\":{\"1841\":2}}],[\"authorizerequests\",{\"1\":{\"451\":1,\"456\":1}}],[\"authorizationheader\",{\"1\":{\"3215\":4,\"3238\":3}}],[\"authorization\",{\"1\":{\"456\":1,\"1734\":1,\"1736\":1,\"1764\":1}}],[\"author\",{\"1\":{\"269\":1,\"279\":1,\"283\":1,\"284\":1,\"286\":6,\"289\":1,\"1005\":1,\"2035\":1}}],[\"auth\",{\"1\":{\"125\":5,\"165\":1,\"219\":1,\"222\":1,\"223\":1,\"235\":3,\"451\":2,\"1418\":1,\"1423\":2,\"1427\":2,\"1503\":1,\"1736\":1,\"1737\":1,\"1764\":1,\"2012\":2,\"3215\":2}}],[\"autoflushexample\",{\"1\":{\"2904\":1}}],[\"automatic\",{\"1\":{\"2044\":1}}],[\"automatically\",{\"1\":{\"994\":1}}],[\"autoindex\",{\"1\":{\"1402\":1}}],[\"autounboxing\",{\"1\":{\"1040\":1}}],[\"autoboxing\",{\"1\":{\"1040\":1}}],[\"autoversionsubmodules>\",{\"1\":{\"1003\":1}}],[\"autoreleaseafterclose>\",{\"1\":{\"999\":1,\"1003\":1}}],[\"autoreconnect=true\",{\"1\":{\"235\":2,\"1644\":1,\"1648\":1,\"1685\":1}}],[\"autoconf=\",{\"1\":{\"3266\":4}}],[\"autoconf=yes\",{\"1\":{\"1918\":1}}],[\"autoconfigurationimportselector\",{\"1\":{\"419\":1,\"463\":3}}],[\"autocomplete=\",{\"1\":{\"1431\":1,\"1433\":1,\"1434\":1,\"1435\":1,\"1440\":1}}],[\"autocommit\",{\"1\":{\"125\":1}}],[\"autowired注解\",{\"1\":{\"2999\":2}}],[\"autowired注解注入依赖对象\",{\"1\":{\"322\":1}}],[\"autowired\",{\"1\":{\"292\":1,\"326\":1,\"352\":1,\"354\":2,\"366\":1,\"380\":1,\"381\":1,\"427\":1,\"438\":1,\"439\":1,\"440\":1,\"441\":1,\"449\":1,\"450\":1,\"1065\":1,\"1949\":1,\"2955\":1,\"2999\":3,\"3049\":2,\"3050\":1,\"3052\":1,\"3154\":1,\"3159\":4}}],[\"auto\",{\"0\":{\"1652\":1,\"1700\":1},\"1\":{\"98\":4,\"106\":2,\"125\":6,\"232\":9,\"999\":4,\"1440\":1,\"1535\":2,\"1684\":9,\"1687\":7,\"1828\":1}}],[\"a存档\",{\"1\":{\"1501\":1}}],[\"a服务器就作为源服务器\",{\"1\":{\"1501\":1}}],[\"a相邻的所有b\",{\"1\":{\"1456\":1}}],[\"a相邻的下一个b\",{\"1\":{\"1456\":1}}],[\"a下的所有b\",{\"1\":{\"1456\":2}}],[\"a><\",{\"1\":{\"1467\":4}}],[\"a>|<a\",{\"1\":{\"1467\":4}}],[\"a>\",{\"1\":{\"1443\":1,\"1444\":1}}],[\"ajax\",{\"1\":{\"1430\":2,\"1435\":2,\"1436\":2,\"1440\":2,\"1443\":1,\"1444\":2}}],[\"ajax介绍\",{\"0\":{\"1430\":1}}],[\"ajax快速入门\",{\"0\":{\"1429\":1}}],[\"a84b4c76e66710\",{\"1\":{\"1092\":1,\"3180\":1}}],[\"awk\",{\"0\":{\"1872\":1},\"1\":{\"1477\":1,\"1478\":1,\"1484\":1,\"1495\":1,\"1835\":1,\"1856\":1,\"1870\":1,\"1872\":2,\"1881\":2}}],[\"awt\",{\"1\":{\"1052\":1}}],[\"awt等早期技术\",{\"1\":{\"574\":1}}],[\"await\",{\"1\":{\"642\":2,\"1238\":1,\"1884\":1,\"2269\":1}}],[\"awaittermination\",{\"1\":{\"633\":1,\"1186\":1,\"2522\":1,\"2523\":1,\"2524\":1}}],[\"aws\",{\"1\":{\"571\":1}}],[\"a为null\",{\"1\":{\"502\":1}}],[\"aa\",{\"1\":{\"3282\":1}}],[\"aarch64\",{\"1\":{\"1581\":2,\"1582\":1,\"1583\":5}}],[\"aarch64架构的程序\",{\"1\":{\"224\":1}}],[\"aaa\",{\"1\":{\"293\":1,\"1827\":4}}],[\"atindex\",{\"1\":{\"3212\":3}}],[\"atime\",{\"1\":{\"1873\":1}}],[\"atype\",{\"1\":{\"1738\":1}}],[\"attach\",{\"1\":{\"3245\":1}}],[\"attachment\",{\"1\":{\"269\":1,\"286\":2,\"1228\":1,\"1238\":6,\"1315\":1,\"2916\":1,\"2921\":1,\"3120\":2}}],[\"attempt\",{\"1\":{\"1569\":1}}],[\"attr\",{\"1\":{\"1464\":3,\"1465\":1}}],[\"attribute\",{\"0\":{\"1664\":1},\"1\":{\"724\":1}}],[\"atomic\",{\"1\":{\"2485\":1,\"2544\":1}}],[\"atomiccount\",{\"1\":{\"1126\":3}}],[\"atomicmarkablereference\",{\"1\":{\"672\":1,\"1139\":1}}],[\"atomicstampedreference<>\",{\"1\":{\"676\":1,\"1139\":1}}],[\"atomicstampedreference<integer>\",{\"1\":{\"676\":1,\"1139\":1}}],[\"atomicstampedreferenceexample\",{\"1\":{\"676\":1}}],[\"atomicstampedreference\",{\"1\":{\"672\":1,\"1139\":2}}],[\"atomicreference保证原子操作\",{\"1\":{\"2485\":1}}],[\"atomicreference<>\",{\"1\":{\"2485\":3,\"2544\":1}}],[\"atomicreference<node<t>>\",{\"1\":{\"2485\":3,\"2544\":1}}],[\"atomicreferencefieldupdater\",{\"1\":{\"672\":1}}],[\"atomicreferencearray\",{\"1\":{\"672\":1}}],[\"atomicreference\",{\"1\":{\"672\":1,\"2485\":1,\"2544\":1}}],[\"atomicboolean\",{\"1\":{\"672\":1,\"1126\":1}}],[\"atomiclong基于单个变量的cas操作实现\",{\"1\":{\"686\":1}}],[\"atomiclong可能是更优选择\",{\"1\":{\"685\":1}}],[\"atomiclongfieldupdater\",{\"1\":{\"672\":1}}],[\"atomiclongarray\",{\"1\":{\"672\":1}}],[\"atomiclong\",{\"1\":{\"672\":1,\"1126\":1}}],[\"atomicintegerfieldupdater\",{\"1\":{\"672\":1}}],[\"atomicintegerarray\",{\"1\":{\"672\":1}}],[\"atomicintegerexample\",{\"1\":{\"663\":1,\"675\":1}}],[\"atomicinteger\",{\"1\":{\"552\":2,\"663\":2,\"672\":1,\"675\":2,\"1126\":4,\"1326\":2,\"2039\":3}}],[\"atomicity\",{\"1\":{\"348\":1}}],[\"at\",{\"1\":{\"279\":2,\"500\":2,\"502\":1,\"994\":1,\"1513\":1}}],[\"aop实现缓存逻辑\",{\"1\":{\"3170\":1}}],[\"aop实现注解标记方法做切面\",{\"1\":{\"267\":1}}],[\"aop等核心功能\",{\"1\":{\"3158\":1}}],[\"aop切面注解\",{\"1\":{\"3160\":1}}],[\"aop切面实现权限检查\",{\"1\":{\"3154\":1}}],[\"aop切面方法的执行顺序\",{\"1\":{\"267\":1}}],[\"aop与注解结合\",{\"0\":{\"1072\":1}}],[\"aop可以集成aspectj\",{\"1\":{\"344\":1}}],[\"aop是基于代理的aop实现\",{\"1\":{\"344\":1}}],[\"aop有什么区别\",{\"1\":{\"344\":1}}],[\"aop的设计思想是关注点分离\",{\"1\":{\"342\":1}}],[\"aop的核心概念\",{\"0\":{\"335\":1}}],[\"aop的核心思想是将应用程序中的关注点分离\",{\"1\":{\"333\":1}}],[\"aop编程\",{\"0\":{\"332\":1}}],[\"aop模块\",{\"1\":{\"313\":1}}],[\"aop\",{\"1\":{\"309\":1,\"311\":1,\"333\":1,\"2992\":1,\"3009\":1}}],[\"aop日志埋点\",{\"0\":{\"267\":1}}],[\"aof持久化策略使用everysecond\",{\"1\":{\"142\":1}}],[\"aof工作流程\",{\"1\":{\"140\":1}}],[\"aof重写规则\",{\"1\":{\"140\":1}}],[\"aof重写作用\",{\"1\":{\"140\":1}}],[\"aof文件重\",{\"1\":{\"140\":1}}],[\"aof文件存储\",{\"0\":{\"139\":1}}],[\"aof写数据三种策略\",{\"1\":{\"140\":1}}],[\"aof执行策略\",{\"0\":{\"140\":1}}],[\"aof的主要作用是解决了数据持久化的实时性\",{\"1\":{\"139\":1}}],[\"aof\",{\"1\":{\"139\":1,\"141\":1,\"142\":2}}],[\"a类90分钟\",{\"1\":{\"190\":1}}],[\"ab9d0cfcaa17\",{\"1\":{\"3278\":3}}],[\"ab\",{\"1\":{\"2304\":3}}],[\"about\",{\"1\":{\"1788\":1}}],[\"abortpolicy\",{\"1\":{\"625\":1,\"634\":1,\"3082\":1}}],[\"aborting\",{\"1\":{\"125\":2}}],[\"abort\",{\"1\":{\"125\":1}}],[\"aborttransaction\",{\"1\":{\"71\":1,\"91\":1}}],[\"able\",{\"1\":{\"1788\":1}}],[\"absolute\",{\"1\":{\"1440\":1,\"1469\":1}}],[\"abs\",{\"1\":{\"1181\":1}}],[\"abstract关键字定义抽象类\",{\"1\":{\"2808\":1}}],[\"abstractclass\",{\"1\":{\"2761\":1}}],[\"abstractmap<k\",{\"1\":{\"2679\":1}}],[\"abstractmethod\",{\"1\":{\"541\":2,\"2761\":1}}],[\"abstractstringbuilder的扩容逻辑\",{\"1\":{\"2272\":1}}],[\"abstractstringbuilder\",{\"1\":{\"2263\":4}}],[\"abstractstringbuilder核心结构\",{\"1\":{\"2263\":1}}],[\"abstractprocessor\",{\"1\":{\"1087\":1,\"3147\":1,\"3162\":1}}],[\"abstractqueuedsynchronizer\",{\"1\":{\"639\":1}}],[\"abstractfriedchicken\",{\"1\":{\"291\":3}}],[\"abstract\",{\"1\":{\"291\":4,\"541\":1,\"724\":1,\"1206\":2,\"1209\":2,\"2263\":1,\"2761\":2,\"2801\":1,\"2808\":3}}],[\"aba问题会导致线程a做出错误的判断\",{\"1\":{\"1139\":1}}],[\"aba问题是指在并发环境中\",{\"1\":{\"1139\":1}}],[\"abandoned\",{\"1\":{\"125\":1}}],[\"abcdefg\",{\"1\":{\"1787\":1}}],[\"abcdefghijklmnopqrstuvwxyz\",{\"1\":{\"1056\":1}}],[\"abcd123456\",{\"1\":{\"1426\":2}}],[\"abc\",{\"1\":{\"1055\":1,\"1878\":1,\"2249\":4,\"2253\":2,\"2303\":3}}],[\"affinity\",{\"1\":{\"1648\":1,\"1649\":1,\"1650\":10,\"1661\":1,\"1685\":1,\"1688\":1,\"1698\":1,\"1713\":11}}],[\"affiliates\",{\"1\":{\"1578\":1}}],[\"affected\",{\"1\":{\"113\":1}}],[\"aftereach\",{\"1\":{\"3166\":2}}],[\"afternoderemoval\",{\"1\":{\"2630\":1}}],[\"afternodeinsertion\",{\"1\":{\"2600\":1,\"2628\":1}}],[\"afternodeaccess\",{\"1\":{\"2600\":1,\"2629\":2}}],[\"after=network\",{\"1\":{\"1620\":1,\"1752\":1}}],[\"afterreturn\",{\"1\":{\"267\":1}}],[\"afterreturning\",{\"1\":{\"267\":2}}],[\"afterthrowing\",{\"1\":{\"267\":1}}],[\"after\",{\"1\":{\"125\":2,\"178\":1,\"267\":1,\"336\":3,\"338\":2,\"994\":1,\"1004\":1,\"1462\":2,\"1465\":1,\"2623\":1,\"2628\":1,\"2629\":4,\"2630\":3,\"3209\":1}}],[\"anput\",{\"1\":{\"3282\":1}}],[\"anno\",{\"1\":{\"2968\":2}}],[\"annotatedelement\",{\"1\":{\"3149\":1}}],[\"annotatedpredicate\",{\"1\":{\"468\":1}}],[\"annotationruntimeparser\",{\"1\":{\"3149\":1}}],[\"annotationreflectiondemo\",{\"1\":{\"3002\":1}}],[\"annotationprocessors>\",{\"1\":{\"3147\":1}}],[\"annotationprocessor>\",{\"1\":{\"3147\":1}}],[\"annotationparser\",{\"1\":{\"3137\":1}}],[\"annotationdemo\",{\"1\":{\"3134\":1}}],[\"annotationvalidationdemo\",{\"1\":{\"3003\":1}}],[\"annotationtype\",{\"1\":{\"2968\":1}}],[\"annotations\",{\"1\":{\"1087\":2,\"1648\":4,\"1649\":4,\"1650\":31,\"1661\":2,\"1685\":4,\"1688\":4,\"1698\":2,\"1713\":34,\"2968\":2,\"3147\":2,\"3162\":2,\"3164\":1}}],[\"annotationcache\",{\"1\":{\"1081\":1,\"3150\":3}}],[\"annotationconfigapplicationcontext等\",{\"1\":{\"321\":1}}],[\"annotation接口的特殊接口\",{\"1\":{\"1063\":1,\"3145\":1}}],[\"annotation\",{\"1\":{\"267\":6,\"340\":1,\"574\":1,\"1063\":1,\"1068\":1,\"1069\":5,\"1087\":2,\"1431\":1,\"1443\":1,\"1444\":1,\"2968\":4,\"3002\":1,\"3003\":11,\"3104\":1,\"3132\":1,\"3135\":2,\"3137\":3,\"3145\":2,\"3147\":3,\"3149\":7,\"3154\":1,\"3159\":2,\"3160\":1,\"3162\":2,\"3170\":2}}],[\"anotherstring\",{\"1\":{\"2294\":3}}],[\"anobject\",{\"1\":{\"2294\":4}}],[\"ano|findstr\",{\"1\":{\"1892\":1}}],[\"anonymouslist\",{\"1\":{\"2323\":1}}],[\"anonymous\",{\"1\":{\"125\":1}}],[\"analysis\",{\"1\":{\"1656\":1,\"1711\":1}}],[\"anagram\",{\"1\":{\"1170\":1}}],[\"any\",{\"1\":{\"1578\":1,\"3099\":1}}],[\"anyrequest\",{\"1\":{\"451\":1,\"456\":1,\"2012\":1}}],[\"animal3\",{\"1\":{\"2740\":2}}],[\"animal2\",{\"1\":{\"2740\":2}}],[\"animal1\",{\"1\":{\"2740\":2}}],[\"animal\",{\"1\":{\"1204\":2,\"1205\":2,\"1211\":2,\"2077\":2,\"2100\":4,\"2736\":2,\"2737\":1,\"2738\":1,\"2740\":3,\"2748\":2,\"2749\":6,\"2797\":2}}],[\"antisamy\",{\"1\":{\"2067\":1}}],[\"ant构建文件示例\",{\"1\":{\"583\":1}}],[\"ant\",{\"0\":{\"583\":1}}],[\"antmatchers\",{\"1\":{\"451\":1,\"456\":1}}],[\"answer\",{\"1\":{\"125\":1,\"3282\":3}}],[\"an\",{\"1\":{\"125\":1,\"994\":1,\"1569\":1,\"1892\":1,\"3282\":1}}],[\"android等采用\",{\"1\":{\"2357\":1}}],[\"android平台对某些注解特性支持有限\",{\"1\":{\"1084\":1}}],[\"andthen\",{\"1\":{\"557\":4}}],[\"and\",{\"1\":{\"115\":2,\"125\":2,\"312\":1,\"451\":3,\"456\":1,\"557\":2,\"663\":1,\"671\":1,\"993\":2,\"994\":1,\"1423\":1,\"1427\":1,\"1430\":1,\"1436\":1,\"1578\":2,\"1831\":5,\"1949\":2,\"1962\":2,\"1974\":1,\"1975\":1,\"1987\":1,\"2111\":1,\"2112\":1,\"2329\":1,\"2388\":1,\"2485\":1,\"3003\":1,\"3099\":1}}],[\"alf\",{\"1\":{\"1842\":1}}],[\"alt\",{\"1\":{\"1727\":1,\"1767\":1}}],[\"alter\",{\"1\":{\"125\":3,\"229\":1,\"1570\":2,\"1578\":2,\"1607\":1,\"1819\":3,\"1828\":1,\"1829\":1,\"1831\":4,\"1833\":1}}],[\"along\",{\"1\":{\"1578\":1}}],[\"alerting\",{\"1\":{\"1638\":1}}],[\"alert\",{\"1\":{\"1435\":1,\"1447\":4,\"1449\":6,\"1450\":3,\"1451\":1,\"1453\":4,\"1455\":3,\"1456\":4,\"1457\":2,\"1458\":16,\"1459\":7,\"1461\":1,\"1463\":1,\"1464\":1}}],[\"alg功能\",{\"1\":{\"3224\":1}}],[\"algorithm\",{\"1\":{\"307\":1,\"3215\":1}}],[\"alg\",{\"1\":{\"303\":1,\"3194\":1}}],[\"alipay\",{\"1\":{\"2746\":1}}],[\"align=\",{\"1\":{\"1467\":1}}],[\"align\",{\"1\":{\"1440\":1,\"1467\":1}}],[\"aliyuncs\",{\"1\":{\"1615\":1,\"1621\":1,\"1666\":1,\"1669\":1,\"1675\":1,\"1746\":1,\"1753\":1,\"3276\":1}}],[\"aliyundrive\",{\"1\":{\"1418\":1}}],[\"aliyun\",{\"1\":{\"981\":1,\"982\":1,\"1612\":1,\"1672\":1,\"1743\":1,\"1907\":1,\"3269\":1,\"3271\":1,\"3273\":6}}],[\"alice发送bye请求\",{\"1\":{\"3189\":1}}],[\"alice发送ack确认\",{\"1\":{\"3188\":1}}],[\"alice的ua\",{\"1\":{\"3188\":1}}],[\"alicepc\",{\"1\":{\"3180\":4}}],[\"alice\",{\"1\":{\"469\":1,\"543\":1,\"575\":2,\"1092\":3,\"1094\":1,\"1182\":2,\"1225\":1,\"2167\":1,\"2217\":2,\"2224\":2,\"2232\":1,\"2266\":2,\"2577\":2,\"2605\":2,\"3085\":1,\"3162\":2,\"3177\":1,\"3180\":3,\"3190\":2}}],[\"alibaba\",{\"0\":{\"296\":1},\"1\":{\"269\":4}}],[\"aliases\",{\"1\":{\"2881\":1}}],[\"alias\",{\"1\":{\"125\":1,\"1393\":1,\"1842\":1}}],[\"alpine\",{\"1\":{\"248\":2,\"250\":2,\"1604\":1,\"1606\":1}}],[\"always\",{\"1\":{\"140\":1,\"242\":2,\"1535\":2,\"1648\":1,\"1650\":10,\"1661\":2,\"1685\":1,\"1698\":2,\"1713\":11}}],[\"already\",{\"1\":{\"125\":3,\"992\":1,\"1496\":1}}],[\"allentries\",{\"1\":{\"3170\":3}}],[\"allmatch\",{\"1\":{\"3154\":5}}],[\"all=\",{\"1\":{\"1855\":2}}],[\"allowvolumeexpansion\",{\"1\":{\"3276\":1}}],[\"allow\",{\"1\":{\"1530\":2,\"1560\":1,\"1569\":1}}],[\"allowedheaders\",{\"1\":{\"434\":1}}],[\"allowedmethods\",{\"1\":{\"434\":1}}],[\"allowedorigins\",{\"1\":{\"434\":1}}],[\"allowed\",{\"1\":{\"125\":12,\"156\":1,\"1578\":1,\"1823\":2}}],[\"allocate\",{\"1\":{\"1228\":1,\"1235\":2,\"1238\":2,\"1315\":1,\"1324\":1,\"1325\":3,\"1338\":2,\"2914\":2,\"2915\":1,\"2916\":1,\"2921\":2,\"3079\":1,\"3116\":1,\"3118\":1,\"3120\":1}}],[\"allocation\",{\"1\":{\"720\":1,\"774\":1}}],[\"allkelyrs\",{\"1\":{\"157\":1}}],[\"allkeys\",{\"1\":{\"157\":2}}],[\"all\",{\"1\":{\"125\":2,\"228\":1,\"1577\":1,\"1578\":2,\"1675\":1,\"1775\":1,\"1821\":1,\"1854\":1,\"1855\":4,\"1932\":1}}],[\"acquiremethodaccessor\",{\"1\":{\"2987\":1}}],[\"acols\",{\"1\":{\"2183\":3}}],[\"act\",{\"1\":{\"1831\":1}}],[\"actions\",{\"1\":{\"2020\":2}}],[\"actions工作流配置\",{\"0\":{\"2020\":1}}],[\"action\",{\"1\":{\"1684\":2,\"2434\":1,\"2491\":1,\"3137\":4}}],[\"activate\",{\"1\":{\"2759\":1}}],[\"activated\",{\"1\":{\"1004\":1}}],[\"activation>\",{\"1\":{\"998\":1,\"999\":1}}],[\"activity\",{\"1\":{\"193\":1}}],[\"activedialogs\",{\"1\":{\"3209\":5}}],[\"activeconnections\",{\"1\":{\"3097\":2}}],[\"activebydefault>\",{\"1\":{\"998\":1,\"999\":1}}],[\"active=dev\",{\"1\":{\"406\":3}}],[\"activeexpirecycle\",{\"1\":{\"153\":1}}],[\"active\",{\"1\":{\"125\":1,\"1575\":1,\"1886\":1,\"1931\":1,\"3097\":2}}],[\"accuratesize\",{\"1\":{\"2533\":1}}],[\"account\",{\"1\":{\"993\":2,\"1570\":1,\"2947\":2}}],[\"accepthandler\",{\"1\":{\"2921\":2}}],[\"acceptor\",{\"1\":{\"1328\":1}}],[\"accept\",{\"1\":{\"269\":1,\"538\":1,\"1228\":2,\"1238\":2,\"1314\":1,\"1315\":2,\"1324\":2,\"1788\":1,\"1876\":1,\"2916\":2,\"2921\":4,\"3065\":1,\"3070\":1,\"3078\":1,\"3079\":2,\"3082\":1,\"3118\":3,\"3120\":2}}],[\"accessibleobject是field\",{\"1\":{\"2989\":1}}],[\"accessibleobject与访问控制\",{\"0\":{\"2989\":1}}],[\"accessorder\",{\"1\":{\"2512\":10,\"2621\":1,\"2627\":4,\"2629\":2}}],[\"accessouter\",{\"1\":{\"1052\":1}}],[\"accesscontroldemo\",{\"1\":{\"2076\":1,\"2989\":1}}],[\"accesstoken=xdsl3ewi3al1oehxmo68pqxer\",{\"1\":{\"1644\":1}}],[\"accessdeniedexception\",{\"1\":{\"1510\":1,\"3154\":2}}],[\"accesskeyid=6uioq9tm69g2aalrn2ah\",{\"1\":{\"286\":2}}],[\"access\",{\"1\":{\"125\":2,\"264\":1,\"306\":12,\"724\":1,\"1384\":1,\"1569\":2,\"1595\":2,\"3003\":1,\"3250\":1,\"3278\":2}}],[\"acid特性\",{\"1\":{\"348\":1}}],[\"ackrequest\",{\"1\":{\"3208\":2}}],[\"ackseq\",{\"1\":{\"1312\":2}}],[\"acked\",{\"1\":{\"1312\":5}}],[\"ack状态\",{\"1\":{\"1311\":1}}],[\"ack命令做确认\",{\"1\":{\"169\":2}}],[\"ack\",{\"1\":{\"130\":1,\"169\":1,\"1092\":1,\"1881\":1,\"3179\":1,\"3208\":1}}],[\"ac46\",{\"1\":{\"118\":1}}],[\"arows\",{\"1\":{\"2183\":3}}],[\"around\",{\"1\":{\"267\":1,\"336\":1,\"338\":3,\"1068\":1,\"3154\":1,\"3170\":2}}],[\"arithmetic\",{\"1\":{\"2109\":1}}],[\"arithmeticoperatordemo\",{\"1\":{\"2109\":1}}],[\"arithmeticexception\",{\"1\":{\"1243\":1,\"2079\":1,\"2909\":1}}],[\"arm\",{\"1\":{\"1579\":1}}],[\"arm安装mysql\",{\"0\":{\"1579\":1}}],[\"arm64v8\",{\"1\":{\"1535\":1}}],[\"arm64\",{\"1\":{\"238\":1,\"239\":1,\"242\":1,\"1526\":1,\"1644\":2,\"1793\":1,\"1800\":1}}],[\"area\",{\"1\":{\"2808\":2,\"2975\":1,\"2981\":1}}],[\"areas\",{\"1\":{\"1513\":1}}],[\"aren\",{\"1\":{\"2013\":1}}],[\"are\",{\"1\":{\"1423\":1,\"1427\":1,\"1569\":1,\"1764\":1,\"1788\":1,\"3282\":1}}],[\"arr3\",{\"1\":{\"1160\":3}}],[\"arr2\",{\"1\":{\"1160\":4}}],[\"arr1\",{\"1\":{\"1160\":3}}],[\"arr\",{\"1\":{\"1144\":1,\"1161\":23,\"2080\":1,\"2100\":1,\"2115\":2,\"2128\":2,\"2146\":4,\"2149\":3,\"2150\":2,\"2158\":6,\"2159\":4,\"2292\":3,\"2707\":8,\"2708\":8,\"2709\":12,\"2710\":7,\"2721\":4,\"2727\":13}}],[\"arraycopy\",{\"1\":{\"2437\":1,\"2440\":2,\"2704\":1,\"2873\":1}}],[\"arraycreationdemo\",{\"1\":{\"1280\":1}}],[\"arrayprinter\",{\"1\":{\"2228\":2}}],[\"arrayprintdemo\",{\"1\":{\"2212\":1,\"2213\":1,\"2214\":1,\"2216\":1,\"2217\":1,\"2218\":1,\"2220\":1,\"2221\":1,\"2223\":1,\"2224\":1}}],[\"arraydeque通常比linkedlist性能更好\",{\"1\":{\"2564\":1}}],[\"arraydeque通常比linkedlist作为队列和栈时性能更好\",{\"1\":{\"2484\":1}}],[\"arraydeque和linkedlist的性能特点对比\",{\"1\":{\"2564\":1}}],[\"arraydeque和linkedlist作为queue和deque的实现\",{\"1\":{\"2564\":1}}],[\"arraydeque不允许添加null元素\",{\"1\":{\"2563\":1}}],[\"arraydeque等类提供\",{\"1\":{\"2559\":1}}],[\"arraydeque使用循环数组实现\",{\"1\":{\"2558\":1}}],[\"arraydeque核心方法实现\",{\"0\":{\"2552\":1}}],[\"arraydeque的null元素问题\",{\"0\":{\"2563\":1}}],[\"arraydeque的高效设计\",{\"0\":{\"2558\":1}}],[\"arraydeque的迭代器实现更简单高效\",{\"1\":{\"2484\":1}}],[\"arraydeque的add\",{\"1\":{\"2484\":1}}],[\"arraydeque基于数组实现\",{\"1\":{\"2484\":1,\"2564\":1}}],[\"arraydeque与linkedlist作为队列和栈的性能对比\",{\"0\":{\"2484\":1}}],[\"arraydeque<>\",{\"1\":{\"2465\":1,\"2468\":3,\"2506\":2}}],[\"arraydeque\",{\"1\":{\"1174\":1,\"2461\":1,\"2465\":7,\"2468\":1,\"2548\":1}}],[\"arrayindexoutofboundsexception\",{\"1\":{\"1169\":1,\"2926\":1}}],[\"arrayinitializationexample\",{\"1\":{\"1160\":1}}],[\"arrayblockingqueue容量设置过小导致频繁阻塞\",{\"1\":{\"2539\":1}}],[\"arrayblockingqueue\",{\"1\":{\"634\":1,\"2461\":1,\"2465\":1,\"2466\":1,\"2518\":1,\"2524\":1}}],[\"arrayblockingqueue<>\",{\"1\":{\"625\":1,\"626\":1,\"2465\":1,\"2466\":1,\"2477\":1,\"2524\":1,\"2539\":2,\"3082\":1}}],[\"array2\",{\"1\":{\"473\":1}}],[\"array1\",{\"1\":{\"473\":1}}],[\"arraylist操作复杂度\",{\"1\":{\"2712\":1}}],[\"arraylist在需要扩容时为o\",{\"1\":{\"2511\":1}}],[\"arraylist在多线程环境下需要手动同步\",{\"1\":{\"2454\":1}}],[\"arraylist在多线程环境下可能导致数据不一致\",{\"1\":{\"2351\":1}}],[\"arraylist为o\",{\"1\":{\"2511\":1}}],[\"arraylist优势显著\",{\"1\":{\"2511\":1}}],[\"arraylist选择1\",{\"1\":{\"2455\":1}}],[\"arraylist遵循collection框架标准api\",{\"1\":{\"2454\":1}}],[\"arraylist遵循了多个重要的接口设计原则\",{\"1\":{\"2446\":1}}],[\"arraylist默认扩容为原来的1\",{\"1\":{\"2454\":1}}],[\"arraylist默认初始容量为10\",{\"1\":{\"2355\":1}}],[\"arraylist是非线程安全的\",{\"1\":{\"2454\":1}}],[\"arraylist是java集合框架中最常用的动态数组实现\",{\"1\":{\"2432\":1}}],[\"arraylist和vector都是基于动态数组的list实现\",{\"1\":{\"2454\":1}}],[\"arraylist和vector的区别及适用场景\",{\"0\":{\"2454\":1}}],[\"arraylist和linkedlist的性能差异主要源于其底层数据结构\",{\"1\":{\"2354\":1}}],[\"arraylist和linkedlist的性能对比及适用场景\",{\"0\":{\"2354\":1}}],[\"arraylist和linkedlist代表了两种经典的数据结构设计\",{\"1\":{\"2333\":1}}],[\"arraylist可能导致内存泄漏\",{\"1\":{\"2451\":1}}],[\"arraylist采用了多种内存优化策略\",{\"1\":{\"2445\":1}}],[\"arraylist通过modcount\",{\"1\":{\"2444\":1}}],[\"arraylist类结构分析\",{\"0\":{\"2432\":1}}],[\"arraylist源码\",{\"0\":{\"2430\":1}}],[\"arraylist扩容机制\",{\"1\":{\"2355\":1}}],[\"arraylist尾部删除\",{\"1\":{\"2354\":1}}],[\"arraylist尾部添加\",{\"1\":{\"2354\":1}}],[\"arraylist中间\",{\"1\":{\"2354\":2}}],[\"arraylistremovefirsttime\",{\"1\":{\"2327\":2}}],[\"arraylistremovelasttime\",{\"1\":{\"2327\":2}}],[\"arraylistaccesstime\",{\"1\":{\"2327\":3}}],[\"arraylistaddfirsttime\",{\"1\":{\"2327\":2}}],[\"arraylistaddlasttime\",{\"1\":{\"2327\":2}}],[\"arraylist与linkedlist性能对比测试\",{\"1\":{\"2327\":1}}],[\"arraylist与linkedlist性能对比\",{\"0\":{\"2327\":1}}],[\"arraylist3\",{\"1\":{\"2323\":1}}],[\"arraylist2\",{\"1\":{\"2323\":1}}],[\"arraylist1\",{\"1\":{\"2323\":1}}],[\"arraylist基于动态数组实现\",{\"1\":{\"2318\":1}}],[\"arraylist的扩容为什么是1\",{\"0\":{\"2455\":1}}],[\"arraylist的扩容机制及优化\",{\"0\":{\"2355\":1}}],[\"arraylist的iterator\",{\"1\":{\"2454\":1}}],[\"arraylist的核心设计思想是基于动态数组实现\",{\"1\":{\"2443\":1}}],[\"arraylist的内部迭代器实现\",{\"1\":{\"2441\":1}}],[\"arraylist的综合性能优于linkedlist\",{\"1\":{\"2354\":1,\"2511\":1}}],[\"arraylist的线程不安全\",{\"0\":{\"2351\":1}}],[\"arraylist的性能陷阱\",{\"0\":{\"2343\":1}}],[\"arraylist的设计思想\",{\"0\":{\"2334\":1}}],[\"arraylist的动态数组\",{\"0\":{\"2318\":1}}],[\"arraylist的简化版\",{\"1\":{\"2160\":1}}],[\"arraylist迭代器遍历\",{\"1\":{\"1179\":1}}],[\"arraylist增强for循环\",{\"1\":{\"1179\":1}}],[\"arraylist下标遍历\",{\"1\":{\"1179\":1}}],[\"arraylist下标遍历最快\",{\"1\":{\"1179\":1}}],[\"arraylist遍历方式\",{\"1\":{\"1179\":1}}],[\"arraylist等实现细节\",{\"1\":{\"1175\":1}}],[\"arraylist<object>\",{\"1\":{\"3040\":1}}],[\"arraylist<number>\",{\"1\":{\"3040\":1}}],[\"arraylist<double>\",{\"1\":{\"3039\":1}}],[\"arraylist<integer>\",{\"1\":{\"3035\":1,\"3038\":1,\"3039\":1,\"3040\":1}}],[\"arraylist<user>\",{\"1\":{\"1439\":2,\"2057\":1}}],[\"arraylist<\",{\"1\":{\"1298\":1}}],[\"arraylist<string>\",{\"1\":{\"574\":1,\"1178\":1,\"1439\":2,\"2323\":1,\"3035\":1,\"3038\":1,\"3039\":1}}],[\"arraylist<>\",{\"1\":{\"47\":1,\"60\":1,\"68\":1,\"677\":1,\"710\":1,\"781\":1,\"1043\":1,\"1053\":2,\"1094\":1,\"1162\":1,\"1178\":1,\"1179\":1,\"1182\":2,\"1185\":1,\"1186\":1,\"1190\":1,\"1191\":2,\"1193\":1,\"1194\":2,\"1296\":1,\"1301\":1,\"1325\":1,\"1439\":2,\"2054\":1,\"2057\":3,\"2323\":3,\"2324\":1,\"2325\":1,\"2326\":1,\"2327\":5,\"2328\":1,\"2329\":1,\"2340\":1,\"2341\":1,\"2342\":1,\"2344\":1,\"2346\":2,\"2355\":1,\"2356\":3,\"2358\":1,\"2448\":1,\"2449\":3,\"2450\":1,\"2451\":2,\"2452\":2,\"2456\":3,\"2505\":1,\"2536\":1,\"2544\":1,\"2712\":1,\"2953\":1,\"2959\":1,\"3000\":1,\"3007\":2,\"3017\":1,\"3035\":2,\"3041\":1,\"3046\":1,\"3190\":1,\"3205\":1,\"3209\":1,\"3218\":1}}],[\"arraylist\",{\"1\":{\"284\":1,\"539\":1,\"1132\":1,\"1162\":1,\"1174\":1,\"1179\":6,\"1193\":1,\"1439\":1,\"2057\":1,\"2316\":1,\"2318\":1,\"2323\":1,\"2324\":1,\"2325\":1,\"2326\":1,\"2327\":9,\"2328\":1,\"2329\":1,\"2354\":2,\"2436\":3,\"2441\":2,\"2503\":1,\"2511\":4,\"2712\":5,\"3017\":1}}],[\"array\",{\"1\":{\"59\":1,\"89\":1,\"1053\":3,\"1280\":4,\"1295\":8,\"1325\":1,\"1881\":3,\"2181\":8,\"2228\":14,\"2234\":8,\"2272\":1,\"2318\":1,\"2356\":5,\"2433\":1,\"2438\":5,\"2509\":4,\"2704\":5,\"2708\":1,\"2766\":1,\"3007\":4,\"3023\":5,\"3024\":4,\"3025\":2}}],[\"arrays工具类\",{\"1\":{\"2215\":1}}],[\"arrays工具类打印法\",{\"0\":{\"2215\":1}}],[\"arrays工具类来简化数组操作\",{\"1\":{\"2148\":1}}],[\"arraysortandsearch\",{\"1\":{\"1161\":1}}],[\"arrays\",{\"0\":{\"2216\":1,\"2217\":1,\"2218\":1},\"1\":{\"47\":1,\"58\":1,\"286\":3,\"469\":1,\"473\":1,\"529\":1,\"539\":1,\"543\":2,\"575\":2,\"1068\":1,\"1160\":3,\"1170\":1,\"1182\":2,\"1185\":2,\"1190\":1,\"1191\":5,\"1194\":1,\"1295\":2,\"1296\":1,\"2147\":2,\"2149\":3,\"2150\":2,\"2151\":5,\"2161\":1,\"2170\":2,\"2216\":4,\"2217\":3,\"2218\":3,\"2220\":3,\"2221\":2,\"2223\":4,\"2224\":2,\"2227\":1,\"2228\":4,\"2230\":1,\"2231\":2,\"2233\":1,\"2234\":3,\"2272\":1,\"2291\":2,\"2318\":1,\"2323\":3,\"2340\":2,\"2346\":1,\"2352\":1,\"2356\":1,\"2369\":1,\"2370\":1,\"2371\":3,\"2372\":2,\"2382\":1,\"2436\":1,\"2438\":1,\"2768\":1,\"3047\":1}}],[\"arch\",{\"1\":{\"1660\":1}}],[\"archiva\",{\"1\":{\"979\":1}}],[\"archives\",{\"1\":{\"1581\":1}}],[\"archive\",{\"1\":{\"122\":4,\"1480\":2,\"1481\":6,\"1536\":1}}],[\"arc2d\",{\"1\":{\"1052\":1}}],[\"artifact<\",{\"1\":{\"1016\":1,\"1017\":1,\"1018\":1}}],[\"artifact\",{\"1\":{\"994\":1,\"1020\":1}}],[\"artifacts<\",{\"1\":{\"999\":1}}],[\"artifacts\",{\"1\":{\"994\":1}}],[\"artifactory\",{\"1\":{\"979\":1}}],[\"artifactid\",{\"1\":{\"937\":2}}],[\"artifactid和version组成了maven的坐标系统\",{\"1\":{\"924\":1}}],[\"artifactid>\",{\"1\":{\"281\":1,\"307\":1,\"394\":3,\"416\":3,\"428\":1,\"438\":2,\"439\":2,\"440\":2,\"449\":1,\"451\":1,\"456\":1,\"567\":1,\"584\":2,\"711\":1,\"924\":1,\"926\":1,\"928\":2,\"936\":3,\"938\":1,\"941\":1,\"953\":2,\"954\":1,\"956\":1,\"957\":1,\"963\":2,\"999\":5,\"1003\":2,\"1005\":1,\"1016\":2,\"1017\":1,\"1018\":1,\"1564\":2,\"2018\":1,\"3097\":1,\"3104\":1,\"3147\":1}}],[\"article\",{\"1\":{\"281\":1,\"1536\":1,\"1642\":1,\"1738\":1}}],[\"argon2\",{\"1\":{\"2068\":1}}],[\"arg=baz\",{\"1\":{\"1412\":1}}],[\"arg\",{\"1\":{\"125\":1,\"1551\":2,\"3246\":1}}],[\"args1\",{\"1\":{\"710\":2}}],[\"args\",{\"1\":{\"125\":2,\"283\":1,\"286\":1,\"287\":1,\"289\":1,\"291\":1,\"293\":1,\"340\":1,\"392\":2,\"471\":1,\"479\":2,\"500\":1,\"501\":1,\"502\":1,\"592\":1,\"609\":1,\"610\":1,\"625\":1,\"626\":1,\"675\":1,\"676\":1,\"677\":1,\"693\":1,\"694\":1,\"710\":1,\"711\":1,\"727\":1,\"729\":1,\"745\":1,\"746\":1,\"772\":1,\"773\":1,\"1037\":1,\"1040\":1,\"1041\":1,\"1043\":1,\"1044\":1,\"1055\":1,\"1056\":1,\"1058\":1,\"1068\":2,\"1069\":1,\"1094\":1,\"1144\":1,\"1145\":1,\"1147\":1,\"1150\":1,\"1151\":1,\"1160\":1,\"1161\":1,\"1162\":1,\"1164\":1,\"1165\":1,\"1166\":1,\"1178\":1,\"1179\":1,\"1182\":1,\"1185\":1,\"1186\":1,\"1190\":1,\"1191\":1,\"1193\":1,\"1194\":1,\"1221\":1,\"1222\":1,\"1224\":1,\"1225\":1,\"1228\":1,\"1232\":1,\"1238\":2,\"1243\":2,\"1246\":1,\"1247\":2,\"1250\":1,\"1260\":1,\"1264\":1,\"1267\":3,\"1269\":1,\"1270\":1,\"1280\":1,\"1295\":1,\"1296\":1,\"1314\":1,\"1315\":1,\"1321\":1,\"1324\":1,\"1332\":1,\"2089\":1,\"2123\":1,\"2125\":1,\"2126\":1,\"2128\":1,\"2129\":1,\"2130\":1,\"2132\":1,\"2133\":1,\"2134\":1,\"2239\":1,\"2243\":1,\"2245\":1,\"2246\":1,\"2248\":1,\"2249\":1,\"2265\":1,\"2266\":1,\"2269\":1,\"2271\":1,\"2276\":1,\"2292\":1,\"2303\":1,\"2304\":1,\"2311\":1,\"2323\":1,\"2324\":1,\"2325\":1,\"2326\":1,\"2327\":1,\"2328\":1,\"2329\":1,\"2369\":1,\"2370\":1,\"2371\":1,\"2372\":1,\"2373\":1,\"2406\":1,\"2407\":1,\"2408\":1,\"2409\":1,\"2410\":1,\"2427\":1,\"2465\":1,\"2466\":1,\"2467\":1,\"2468\":1,\"2522\":1,\"2523\":1,\"2524\":1,\"2577\":1,\"2604\":1,\"2632\":1,\"2660\":1,\"2661\":1,\"2685\":1,\"2712\":1,\"2742\":1,\"2785\":1,\"2819\":1,\"2831\":1,\"2832\":1,\"2833\":1,\"2837\":2,\"2843\":1,\"2844\":1,\"2845\":1,\"2849\":2,\"2855\":1,\"2856\":1,\"2857\":1,\"2861\":1,\"2866\":1,\"2867\":1,\"2868\":1,\"2878\":1,\"2879\":1,\"2880\":1,\"2881\":1,\"2885\":1,\"2891\":1,\"2892\":1,\"2893\":1,\"2897\":1,\"2902\":1,\"2903\":1,\"2904\":1,\"2905\":1,\"2909\":1,\"2914\":1,\"2915\":1,\"2916\":1,\"2917\":1,\"2921\":2,\"2936\":1,\"2965\":1,\"2968\":1,\"2969\":1,\"2970\":1,\"2971\":1,\"2974\":1,\"2980\":1,\"2983\":1,\"2984\":1,\"2986\":1,\"2987\":2,\"2989\":1,\"2990\":1,\"2999\":1,\"3000\":1,\"3002\":9,\"3003\":1,\"3005\":4,\"3007\":1,\"3010\":1,\"3023\":1,\"3024\":1,\"3025\":1,\"3065\":2,\"3066\":2,\"3085\":1,\"3116\":1,\"3117\":1,\"3118\":1,\"3120\":1,\"3125\":1,\"3137\":1,\"3170\":1,\"3190\":1}}],[\"argument\",{\"1\":{\"125\":1}}],[\"arguments\",{\"1\":{\"125\":1}}],[\"a\",{\"1\":{\"122\":1,\"140\":2,\"165\":1,\"198\":1,\"249\":1,\"303\":1,\"473\":1,\"502\":3,\"537\":4,\"538\":3,\"539\":1,\"541\":1,\"542\":1,\"543\":2,\"575\":2,\"673\":1,\"756\":1,\"993\":2,\"994\":3,\"1040\":3,\"1145\":1,\"1165\":4,\"1166\":2,\"1170\":2,\"1185\":1,\"1190\":1,\"1191\":2,\"1194\":3,\"1205\":4,\"1270\":2,\"1295\":2,\"1456\":4,\"1458\":8,\"1459\":4,\"1460\":9,\"1501\":2,\"1502\":1,\"1569\":2,\"1578\":2,\"1610\":1,\"1634\":1,\"1672\":1,\"1780\":1,\"1787\":1,\"1788\":1,\"1796\":1,\"1800\":1,\"1802\":1,\"1811\":1,\"1813\":1,\"1827\":7,\"1838\":1,\"1880\":2,\"1881\":6,\"1882\":1,\"1899\":1,\"1903\":1,\"2050\":2,\"2062\":1,\"2065\":1,\"2078\":6,\"2080\":1,\"2090\":2,\"2099\":1,\"2100\":1,\"2109\":6,\"2110\":7,\"2111\":6,\"2112\":7,\"2113\":13,\"2114\":7,\"2115\":1,\"2174\":4,\"2183\":4,\"2223\":2,\"2249\":5,\"2304\":3,\"2314\":1,\"2320\":1,\"2323\":1,\"2326\":2,\"2340\":2,\"2341\":1,\"2342\":2,\"2352\":1,\"2358\":1,\"2369\":3,\"2370\":1,\"2372\":4,\"2382\":3,\"2406\":1,\"2410\":2,\"2427\":1,\"2448\":1,\"2450\":1,\"2465\":4,\"2477\":1,\"2506\":4,\"2507\":1,\"2509\":1,\"2537\":1,\"2578\":2,\"2629\":5,\"2630\":5,\"2632\":1,\"2711\":3,\"2716\":3,\"2741\":8,\"2784\":2,\"2785\":2,\"2786\":6,\"2798\":3,\"2808\":1,\"2902\":1,\"2970\":2,\"3023\":1,\"3096\":1,\"3245\":1,\"3270\":1,\"3275\":1,\"3282\":4}}],[\"adults\",{\"1\":{\"2329\":2}}],[\"adm\",{\"1\":{\"1940\":1}}],[\"admincontroller\",{\"1\":{\"452\":1}}],[\"admin\",{\"1\":{\"81\":1,\"223\":5,\"232\":1,\"280\":1,\"303\":1,\"430\":1,\"451\":2,\"452\":4,\"456\":1,\"1563\":1,\"1636\":1,\"1641\":1,\"1644\":4,\"1649\":3,\"1661\":1,\"1684\":1,\"1687\":1,\"1688\":3,\"1698\":1,\"1711\":1,\"1736\":3,\"1737\":2,\"1738\":1,\"1764\":1,\"1797\":1,\"1813\":1,\"2012\":3,\"2255\":3,\"3154\":1}}],[\"ad56dce891c901a492bb1ee393f12dfff473a423\",{\"1\":{\"1513\":1}}],[\"adapter\",{\"1\":{\"1231\":1}}],[\"advertiseaddress\",{\"1\":{\"1638\":1}}],[\"advertised\",{\"1\":{\"1530\":2,\"1535\":3}}],[\"advanced\",{\"0\":{\"790\":1,\"824\":1,\"858\":1,\"892\":1}}],[\"advice\",{\"1\":{\"335\":1}}],[\"adoption\",{\"1\":{\"514\":1}}],[\"addhobbies\",{\"1\":{\"3085\":2}}],[\"addheader\",{\"1\":{\"1094\":1,\"3190\":1,\"3199\":2,\"3215\":1,\"3224\":1}}],[\"addlowercasestrings\",{\"1\":{\"3041\":1}}],[\"addlast\",{\"1\":{\"1111\":3,\"1332\":5,\"2319\":1,\"2327\":3,\"2465\":1,\"2468\":1,\"2497\":1,\"2552\":1,\"3125\":3,\"3126\":2}}],[\"addfirst\",{\"1\":{\"2319\":1,\"2465\":1,\"2468\":2,\"2497\":1,\"2512\":3}}],[\"addfilterbefore\",{\"1\":{\"456\":1}}],[\"addgeoserver\",{\"1\":{\"1794\":1}}],[\"addownerref\",{\"1\":{\"1648\":1,\"1649\":1,\"1650\":1,\"1685\":1,\"1688\":1,\"1713\":1}}],[\"addons\",{\"1\":{\"1638\":1}}],[\"addmedia\",{\"1\":{\"3205\":1}}],[\"addmethod\",{\"1\":{\"1270\":3}}],[\"addmapping\",{\"1\":{\"434\":1}}],[\"adduser\",{\"1\":{\"1267\":3,\"3137\":2}}],[\"addsiplistener\",{\"1\":{\"1094\":1,\"3190\":1,\"3218\":2}}],[\"addslots\",{\"1\":{\"208\":1}}],[\"addelement\",{\"1\":{\"1053\":1,\"2551\":1}}],[\"addintegers\",{\"1\":{\"3040\":4}}],[\"addinterceptor\",{\"1\":{\"430\":1}}],[\"addinterceptors\",{\"1\":{\"430\":1}}],[\"additional\",{\"1\":{\"3282\":1}}],[\"additionalparam>\",{\"1\":{\"999\":1,\"1005\":1}}],[\"additivity=\",{\"1\":{\"1564\":1}}],[\"addall\",{\"1\":{\"2314\":2,\"2355\":1,\"2371\":1,\"2372\":2,\"2493\":1}}],[\"addarb\",{\"1\":{\"1764\":1}}],[\"addandget\",{\"1\":{\"675\":1}}],[\"addattribute\",{\"1\":{\"380\":2}}],[\"add3andmultiplyby2\",{\"1\":{\"557\":1}}],[\"add3\",{\"1\":{\"557\":3}}],[\"addclass\",{\"1\":{\"1463\":2,\"1465\":1}}],[\"addcorsmappings\",{\"1\":{\"434\":1}}],[\"addchainfilters\",{\"1\":{\"293\":4}}],[\"addpathpatterns\",{\"1\":{\"430\":1}}],[\"addresourcelocations\",{\"1\":{\"382\":1}}],[\"addresourcehandler\",{\"1\":{\"382\":1}}],[\"addresourcehandlers\",{\"1\":{\"382\":1}}],[\"address=address\",{\"1\":{\"3007\":2}}],[\"address=\",{\"1\":{\"3007\":1}}],[\"address`\",{\"1\":{\"1687\":1}}],[\"address时\",{\"1\":{\"1538\":1}}],[\"addressfactory\",{\"1\":{\"1094\":7,\"3190\":7,\"3199\":3,\"3224\":1}}],[\"address\",{\"1\":{\"37\":1,\"47\":1,\"59\":1,\"60\":1,\"84\":1,\"86\":1,\"89\":1,\"501\":6,\"517\":4,\"997\":1,\"1094\":5,\"1546\":1,\"1638\":4,\"3007\":14,\"3066\":2,\"3190\":4,\"3199\":2,\"3206\":1,\"3212\":3,\"3218\":1,\"3224\":2}}],[\"addr\",{\"1\":{\"216\":2,\"1395\":1,\"1396\":1,\"1397\":1,\"1410\":1,\"1412\":2,\"1595\":1,\"1875\":1,\"1918\":1,\"3266\":4}}],[\"add\",{\"1\":{\"125\":3,\"186\":2,\"216\":1,\"284\":1,\"286\":4,\"293\":1,\"307\":2,\"537\":1,\"538\":2,\"574\":1,\"642\":1,\"677\":1,\"710\":1,\"781\":2,\"1043\":1,\"1053\":1,\"1055\":1,\"1094\":1,\"1162\":4,\"1178\":6,\"1179\":2,\"1186\":1,\"1191\":3,\"1194\":2,\"1205\":2,\"1270\":2,\"1281\":1,\"1296\":1,\"1301\":1,\"1325\":1,\"1358\":2,\"1374\":1,\"1439\":4,\"1548\":1,\"1612\":1,\"1658\":2,\"1672\":1,\"1697\":1,\"1743\":1,\"1790\":1,\"1925\":1,\"1927\":1,\"2007\":1,\"2090\":1,\"2109\":1,\"2161\":1,\"2174\":1,\"2314\":2,\"2318\":1,\"2323\":3,\"2324\":4,\"2325\":5,\"2326\":8,\"2327\":5,\"2328\":1,\"2329\":5,\"2336\":1,\"2341\":1,\"2342\":2,\"2345\":1,\"2349\":1,\"2352\":1,\"2356\":7,\"2358\":2,\"2369\":4,\"2392\":1,\"2395\":1,\"2437\":2,\"2444\":1,\"2448\":3,\"2449\":3,\"2450\":2,\"2452\":2,\"2456\":4,\"2462\":1,\"2465\":3,\"2477\":2,\"2480\":3,\"2481\":2,\"2494\":2,\"2498\":1,\"2506\":1,\"2507\":4,\"2509\":2,\"2513\":5,\"2523\":4,\"2524\":1,\"2525\":1,\"2536\":1,\"2537\":3,\"2544\":3,\"2552\":1,\"2555\":1,\"2562\":1,\"2588\":2,\"2602\":1,\"2631\":1,\"2658\":1,\"2661\":5,\"2704\":1,\"2712\":4,\"2741\":4,\"2786\":3,\"2892\":4,\"2893\":1,\"2897\":2,\"2953\":1,\"2959\":2,\"2994\":2,\"3000\":1,\"3007\":4,\"3017\":4,\"3038\":2,\"3040\":3,\"3041\":3,\"3046\":2,\"3086\":2,\"3190\":1,\"3215\":1,\"3218\":2,\"3235\":1,\"3245\":1,\"3246\":3}}],[\"again10bytes\",{\"1\":{\"2849\":3}}],[\"aggr`\",{\"1\":{\"232\":1,\"1684\":1}}],[\"aggr\",{\"1\":{\"232\":5,\"1684\":5}}],[\"aggregateone\",{\"1\":{\"60\":1}}],[\"aggregate\",{\"1\":{\"58\":1,\"89\":1,\"125\":3,\"204\":2,\"1650\":9,\"1656\":1,\"1711\":1,\"1713\":9,\"1738\":1}}],[\"aggregateiterable<document>\",{\"1\":{\"58\":1}}],[\"ago\",{\"1\":{\"193\":1,\"1667\":6,\"3271\":1,\"3273\":1}}],[\"ages\",{\"1\":{\"2143\":1}}],[\"agefield\",{\"1\":{\"1269\":5,\"2971\":5}}],[\"age=30\",{\"1\":{\"2232\":1,\"3005\":1,\"3007\":2}}],[\"age=25\",{\"1\":{\"2232\":1}}],[\"age=24\",{\"1\":{\"1439\":2}}],[\"age=23\",{\"1\":{\"1439\":3}}],[\"age=\",{\"1\":{\"1225\":1,\"2232\":1,\"3007\":1}}],[\"agent收集数据上报给平台后端\",{\"1\":{\"1561\":1}}],[\"agent的plugins目录是已启用的插件\",{\"1\":{\"1559\":1}}],[\"agent环境变量\",{\"1\":{\"1551\":2}}],[\"agent镜像\",{\"1\":{\"1549\":1}}],[\"agent探针\",{\"1\":{\"1536\":1}}],[\"agent\",{\"1\":{\"280\":4,\"1411\":1,\"1412\":1,\"1527\":1,\"1536\":3,\"1537\":1,\"1548\":3,\"1551\":8,\"1552\":1,\"1595\":1,\"1656\":5,\"1711\":5,\"1712\":1,\"3104\":2,\"3111\":1,\"3273\":4}}],[\"age\",{\"1\":{\"37\":1,\"47\":1,\"48\":2,\"49\":3,\"50\":1,\"58\":1,\"68\":1,\"84\":3,\"85\":4,\"86\":4,\"87\":1,\"89\":2,\"90\":1,\"91\":1,\"366\":1,\"428\":1,\"438\":2,\"439\":4,\"440\":2,\"1069\":1,\"1182\":9,\"1203\":7,\"1208\":2,\"1225\":5,\"1269\":7,\"1439\":5,\"1660\":2,\"2091\":10,\"2100\":1,\"2195\":1,\"2224\":5,\"2232\":2,\"2329\":6,\"2388\":3,\"2605\":7,\"2733\":1,\"2736\":1,\"2738\":2,\"2795\":1,\"2965\":1,\"2968\":1,\"2969\":8,\"2970\":8,\"2971\":5,\"2980\":1,\"2983\":5,\"2984\":1,\"2989\":4,\"3000\":1,\"3003\":5,\"3005\":6,\"3007\":5,\"3020\":1,\"3137\":1,\"3162\":2,\"3164\":4,\"3165\":1,\"3273\":2,\"3276\":1,\"3278\":2}}],[\"average\",{\"1\":{\"2329\":1,\"2712\":3}}],[\"averageage\",{\"1\":{\"2329\":2}}],[\"avaj\",{\"1\":{\"2265\":1}}],[\"availablecharsets\",{\"1\":{\"2881\":1}}],[\"availableprocessors\",{\"1\":{\"1111\":1,\"2921\":1,\"3225\":1,\"3240\":1}}],[\"available\",{\"1\":{\"1004\":1,\"1569\":1,\"2837\":1,\"2841\":1,\"2849\":1,\"2873\":2,\"3282\":1}}],[\"availability\",{\"1\":{\"43\":1}}],[\"avgqu\",{\"1\":{\"1884\":1}}],[\"avgage\",{\"1\":{\"58\":1}}],[\"avz\",{\"1\":{\"1667\":1}}],[\"av存档并去重\",{\"1\":{\"1501\":1}}],[\"av\",{\"1\":{\"1393\":3,\"1502\":2,\"1503\":2,\"1504\":1}}],[\"avp\",{\"1\":{\"1092\":1,\"3180\":1,\"3190\":1}}],[\"apk\",{\"1\":{\"1790\":2}}],[\"apt处理器注册\",{\"1\":{\"3153\":1}}],[\"apt\",{\"0\":{\"3147\":1},\"1\":{\"1790\":2,\"3147\":1,\"3246\":2}}],[\"apm\",{\"1\":{\"1527\":2,\"1564\":4}}],[\"apr\",{\"1\":{\"1420\":2}}],[\"api创建sip栈\",{\"1\":{\"3190\":1}}],[\"apiresponse\",{\"1\":{\"2956\":6}}],[\"apirequesttype\",{\"1\":{\"292\":1}}],[\"apirequesttype为get\",{\"1\":{\"292\":1}}],[\"api结合phantomreference提供了更灵活的对象清理机制\",{\"1\":{\"2698\":1}}],[\"api兼容\",{\"1\":{\"2637\":1}}],[\"api丰富度\",{\"1\":{\"2454\":1}}],[\"api设计\",{\"1\":{\"2358\":1}}],[\"api设计类似于自然语言\",{\"1\":{\"52\":1}}],[\"api简洁\",{\"1\":{\"2336\":1}}],[\"api完全一致\",{\"1\":{\"2267\":1}}],[\"api和lambda表达式更倾向于使用非受检异常\",{\"1\":{\"2931\":1}}],[\"api和lambda表达式\",{\"1\":{\"2541\":1}}],[\"api和collectors\",{\"1\":{\"2221\":1}}],[\"api和optional\",{\"1\":{\"2054\":1}}],[\"api提供了更现代\",{\"1\":{\"2219\":1}}],[\"api提升代码质量和性能\",{\"1\":{\"1198\":1}}],[\"api权限粒度控制\",{\"1\":{\"2012\":1}}],[\"api描述\",{\"1\":{\"1945\":1}}],[\"api文档是开发者之间沟通的桥梁\",{\"1\":{\"1953\":1}}],[\"api文档是软件开发中不可或缺的一部分\",{\"1\":{\"1942\":1}}],[\"api文档的设计思想是沟通和共享\",{\"1\":{\"1951\":1}}],[\"api文档的规范\",{\"0\":{\"1946\":1}}],[\"api文档的基本要素\",{\"0\":{\"1945\":1}}],[\"api文档的重要性\",{\"0\":{\"1944\":1}}],[\"api文档规范\",{\"0\":{\"1941\":1}}],[\"apiversion\",{\"1\":{\"1638\":2,\"1648\":4,\"1649\":4,\"1650\":22,\"1660\":1,\"1661\":2,\"1685\":4,\"1688\":4,\"1698\":1,\"1713\":24,\"3273\":1,\"3276\":1}}],[\"api网关\",{\"1\":{\"1347\":1}}],[\"api也体现了向这种风格的部分转变\",{\"1\":{\"1254\":1}}],[\"api初始化\",{\"1\":{\"1178\":1}}],[\"api适合进行复杂的数据处理和转换\",{\"1\":{\"1160\":1}}],[\"api遍历集合\",{\"1\":{\"2059\":1}}],[\"api遍历\",{\"1\":{\"1160\":1}}],[\"api示例\",{\"1\":{\"575\":1}}],[\"api废弃处理\",{\"1\":{\"566\":1}}],[\"api可以对集合进行过滤\",{\"1\":{\"543\":1}}],[\"api是java\",{\"1\":{\"543\":1}}],[\"api是一种设计风格\",{\"1\":{\"427\":1}}],[\"api中广泛使用\",{\"1\":{\"539\":1}}],[\"api操作\",{\"1\":{\"537\":1}}],[\"api更新\",{\"0\":{\"470\":1}}],[\"api的filter\",{\"1\":{\"2340\":1}}],[\"api的陷阱\",{\"0\":{\"553\":1}}],[\"api的设计借鉴了函数式编程中的流式处理思想\",{\"1\":{\"550\":1}}],[\"api的设计哲学\",{\"0\":{\"550\":1}}],[\"api的设计风格\",{\"1\":{\"432\":1}}],[\"api的特点\",{\"1\":{\"543\":1}}],[\"api的语义\",{\"1\":{\"531\":1}}],[\"api的定义\",{\"0\":{\"381\":1}}],[\"api支持\",{\"1\":{\"385\":1,\"2463\":1}}],[\"api开发\",{\"0\":{\"378\":1}}],[\"api开发等\",{\"1\":{\"375\":1}}],[\"api\",{\"0\":{\"427\":1,\"543\":1},\"1\":{\"280\":1,\"378\":1,\"381\":1,\"425\":1,\"471\":2,\"490\":1,\"1059\":1,\"1160\":1,\"1190\":1,\"1198\":2,\"1449\":2,\"1843\":1,\"2007\":1,\"2010\":1,\"2012\":3,\"2054\":1,\"2227\":1,\"2448\":1,\"2509\":1,\"3068\":1,\"3166\":5,\"3190\":1,\"3250\":1}}],[\"apache等\",{\"1\":{\"564\":1}}],[\"apacherocketmq\",{\"1\":{\"250\":2}}],[\"apache\",{\"0\":{\"494\":1},\"1\":{\"247\":1,\"281\":1,\"584\":3,\"936\":1,\"941\":1,\"956\":1,\"957\":1,\"975\":1,\"984\":1,\"985\":1,\"999\":5,\"1003\":1,\"1005\":1,\"1536\":4,\"1551\":1,\"1564\":6,\"1984\":1,\"2018\":1,\"2205\":1,\"3106\":1,\"3147\":1,\"3164\":1}}],[\"apps\",{\"1\":{\"1648\":3,\"1649\":3,\"1650\":12,\"1660\":1,\"1661\":1,\"1685\":3,\"1688\":3,\"1698\":1,\"1713\":13,\"3244\":2,\"3276\":1}}],[\"appclassloader\",{\"1\":{\"745\":3}}],[\"appconfig\",{\"1\":{\"339\":1,\"353\":1}}],[\"appcontext\",{\"1\":{\"286\":1}}],[\"apple\",{\"1\":{\"2144\":1,\"2197\":1,\"2213\":2,\"2216\":2,\"2218\":2,\"2220\":2,\"2221\":2,\"2324\":9,\"2369\":3,\"2370\":1,\"2371\":2,\"2406\":2,\"2407\":1,\"2408\":1,\"2660\":2}}],[\"applogs\",{\"1\":{\"1644\":2}}],[\"apply\",{\"1\":{\"538\":1,\"539\":1,\"1656\":13,\"1711\":13,\"3136\":1,\"3276\":3}}],[\"applicationtests\",{\"1\":{\"393\":1}}],[\"applicationcontextaware\",{\"1\":{\"290\":2}}],[\"applicationcontext\",{\"1\":{\"290\":11,\"321\":1}}],[\"application\",{\"1\":{\"216\":1,\"234\":2,\"235\":2,\"285\":2,\"286\":1,\"392\":2,\"393\":2,\"403\":1,\"404\":1,\"406\":2,\"407\":1,\"471\":2,\"476\":1,\"477\":1,\"480\":1,\"742\":1,\"1092\":1,\"1094\":1,\"1385\":1,\"1417\":1,\"1564\":1,\"1595\":1,\"1620\":1,\"1648\":1,\"1649\":1,\"1650\":1,\"1685\":1,\"1688\":1,\"1713\":1,\"1752\":1,\"1914\":1,\"2072\":2,\"3104\":1,\"3180\":1,\"3190\":1,\"3208\":1}}],[\"appname\",{\"1\":{\"407\":3}}],[\"app\",{\"1\":{\"219\":2,\"232\":3,\"234\":2,\"270\":1,\"280\":1,\"286\":2,\"490\":2,\"804\":1,\"805\":1,\"806\":3,\"838\":1,\"839\":1,\"840\":3,\"872\":1,\"873\":1,\"874\":3,\"906\":1,\"907\":1,\"908\":3,\"1418\":1,\"1548\":1,\"1560\":4,\"1569\":2,\"1573\":1,\"1644\":1,\"1648\":25,\"1649\":28,\"1650\":217,\"1660\":2,\"1661\":12,\"1667\":4,\"1684\":3,\"1685\":25,\"1688\":28,\"1697\":1,\"1698\":12,\"1711\":1,\"1713\":238,\"1833\":1,\"3104\":1,\"3159\":1,\"3246\":3,\"3250\":4,\"3276\":3}}],[\"appendable\",{\"1\":{\"2263\":1}}],[\"appender>\",{\"1\":{\"1564\":3,\"2072\":1,\"3102\":1}}],[\"appendto\",{\"1\":{\"1462\":2}}],[\"appendonly\",{\"1\":{\"219\":1}}],[\"appendfsync\",{\"1\":{\"140\":1}}],[\"append\",{\"1\":{\"47\":5,\"58\":2,\"68\":1,\"139\":1,\"200\":1,\"1041\":3,\"1056\":1,\"1058\":1,\"1151\":1,\"1443\":1,\"1462\":3,\"1465\":1,\"2202\":1,\"2228\":3,\"2234\":4,\"2263\":2,\"2265\":3,\"2266\":5,\"2268\":4,\"2269\":6,\"2271\":2,\"2276\":2,\"2279\":2,\"2280\":2,\"2282\":1,\"2723\":1,\"2831\":1,\"2832\":1,\"2854\":3,\"2857\":1,\"2951\":2,\"3000\":2,\"3190\":7,\"3215\":1}}],[\"asm\",{\"1\":{\"3111\":1}}],[\"asinputstream\",{\"1\":{\"2960\":1}}],[\"asia\",{\"1\":{\"1535\":1}}],[\"assignment\",{\"1\":{\"2113\":1}}],[\"assignmentoperatordemo\",{\"1\":{\"2113\":1}}],[\"assorted\",{\"1\":{\"1578\":1}}],[\"assertions\",{\"1\":{\"3166\":1}}],[\"assertthrows\",{\"1\":{\"2047\":1}}],[\"assertequals\",{\"1\":{\"450\":2,\"3166\":1}}],[\"assertnotnull\",{\"1\":{\"449\":2,\"450\":2,\"3166\":1}}],[\"assert\",{\"1\":{\"449\":2,\"450\":4,\"2498\":1}}],[\"aspectj是一个完整的aop框架\",{\"1\":{\"344\":1}}],[\"aspect\",{\"1\":{\"267\":1,\"335\":1,\"338\":1,\"1068\":1,\"3154\":1,\"3170\":1}}],[\"asyncsiphandler\",{\"1\":{\"3217\":2,\"3218\":3}}],[\"asyncprofiler\",{\"1\":{\"3100\":1}}],[\"asynchronous\",{\"0\":{\"1316\":1},\"1\":{\"1430\":1,\"1436\":1}}],[\"asynchronoussocketchannel\",{\"1\":{\"1238\":2,\"3120\":2}}],[\"asynchronousserversocketchannel\",{\"1\":{\"1238\":3,\"3120\":3}}],[\"asynchronousfilechannel\",{\"1\":{\"1238\":3}}],[\"asyncfileuploadexample\",{\"1\":{\"1238\":1}}],[\"async\",{\"1\":{\"249\":2,\"1432\":2,\"1435\":2,\"1436\":1,\"3100\":3}}],[\"ascii码\",{\"1\":{\"2188\":1}}],[\"asc\",{\"1\":{\"232\":2}}],[\"aslist返回的列表不可添加元素\",{\"1\":{\"1191\":1}}],[\"aslist返回的list不可修改\",{\"1\":{\"1191\":1}}],[\"aslist\",{\"0\":{\"2218\":1},\"1\":{\"47\":1,\"58\":1,\"286\":1,\"469\":1,\"473\":1,\"529\":1,\"539\":1,\"543\":2,\"575\":2,\"1182\":2,\"1185\":2,\"1190\":1,\"1191\":3,\"1194\":1,\"1296\":1,\"2218\":2,\"2323\":2,\"2340\":2,\"2346\":1,\"2352\":1,\"2369\":1,\"2370\":1,\"2371\":3,\"2372\":2,\"2382\":1,\"3047\":1}}],[\"as\",{\"1\":{\"28\":1,\"119\":1,\"125\":2,\"1551\":1,\"1570\":1,\"1574\":1,\"1578\":1,\"1831\":1,\"1833\":11,\"3246\":1}}],[\"张三三\",{\"1\":{\"2970\":1,\"2974\":1}}],[\"张三\",{\"1\":{\"37\":1,\"47\":1,\"49\":1,\"50\":1,\"84\":2,\"86\":3,\"87\":1,\"91\":1,\"1267\":1,\"1269\":1,\"1439\":14,\"2115\":1,\"2329\":1,\"2902\":1,\"2905\":1,\"2969\":1,\"2970\":1,\"2971\":1,\"2974\":1,\"2989\":1}}],[\"o模型提高吞吐量\",{\"1\":{\"3228\":1}}],[\"o处理能力\",{\"1\":{\"3225\":1}}],[\"o活动\",{\"1\":{\"3096\":1}}],[\"occupation\",{\"1\":{\"2605\":1}}],[\"octet\",{\"1\":{\"216\":1,\"286\":1,\"1385\":1,\"1417\":1,\"1595\":1}}],[\"olleh\",{\"1\":{\"2265\":1}}],[\"oldmethod\",{\"1\":{\"3136\":1}}],[\"oldthr\",{\"1\":{\"2601\":4}}],[\"oldtab\",{\"1\":{\"2601\":7}}],[\"oldtable\",{\"1\":{\"1181\":4,\"2684\":4}}],[\"oldcap快速判断元素应该放在原索引还是新索引\",{\"1\":{\"2616\":1}}],[\"oldcap\",{\"1\":{\"2601\":10}}],[\"oldcapacity\",{\"1\":{\"2318\":3,\"2438\":5,\"2684\":2}}],[\"oldval\",{\"1\":{\"2495\":2}}],[\"oldvalue\",{\"1\":{\"2408\":4,\"2439\":2,\"2440\":2,\"2600\":3,\"2683\":3}}],[\"oldarray\",{\"1\":{\"2356\":3}}],[\"oldgc\",{\"1\":{\"772\":2}}],[\"old收集器组合\",{\"1\":{\"795\":4,\"829\":4,\"863\":4,\"897\":4}}],[\"old收集器\",{\"1\":{\"766\":1,\"770\":2}}],[\"old\",{\"1\":{\"125\":1,\"766\":1}}],[\"o线程使用专用账号登录到主服务器中读取该二进制文件\",{\"1\":{\"1760\":1}}],[\"omhakh\",{\"1\":{\"1650\":1,\"1713\":1}}],[\"omega^i\",{\"1\":{\"20\":1}}],[\"omega^r\",{\"1\":{\"20\":1}}],[\"omega\",{\"1\":{\"20\":4}}],[\"oap存储相关数据\",{\"1\":{\"1561\":1}}],[\"oap连接服务端口\",{\"1\":{\"1546\":1}}],[\"oap的dns地址\",{\"1\":{\"1546\":1}}],[\"oap\",{\"1\":{\"1536\":1,\"1538\":2,\"1546\":2,\"1548\":1}}],[\"oauth2\",{\"1\":{\"2012\":2}}],[\"oauth2resourceserver\",{\"1\":{\"2012\":1}}],[\"oauth\",{\"1\":{\"122\":1}}],[\"o=\",{\"1\":{\"3205\":1}}],[\"o=client\",{\"1\":{\"3190\":1}}],[\"o=alice\",{\"1\":{\"3180\":1}}],[\"o=d\",{\"1\":{\"1488\":1}}],[\"o=bob\",{\"1\":{\"1092\":1}}],[\"odd\",{\"1\":{\"1458\":2,\"1460\":1}}],[\"ois\",{\"1\":{\"1225\":2}}],[\"oos\",{\"1\":{\"1225\":2}}],[\"oop\",{\"1\":{\"1200\":1,\"2730\":1}}],[\"oom时生成堆转储文件\",{\"1\":{\"796\":1,\"830\":1,\"864\":1,\"898\":1}}],[\"oom\",{\"0\":{\"700\":1},\"1\":{\"156\":1,\"271\":1}}],[\"our\",{\"1\":{\"994\":2}}],[\"out到文件\",{\"1\":{\"2909\":1}}],[\"out和system\",{\"1\":{\"2909\":2}}],[\"out就是printstream的实例\",{\"1\":{\"2902\":1}}],[\"outofboundsmsg\",{\"1\":{\"2439\":3,\"2494\":1,\"2495\":1}}],[\"outofmemoryerror\",{\"1\":{\"1558\":3,\"2438\":2}}],[\"outofmemory\",{\"1\":{\"125\":1}}],[\"out输出\",{\"1\":{\"1844\":1}}],[\"outputfile\",{\"1\":{\"2893\":2,\"2897\":2}}],[\"output\",{\"1\":{\"1362\":1,\"1363\":1,\"1524\":1,\"1535\":1,\"2832\":1,\"2861\":1,\"2867\":1,\"2879\":2}}],[\"outputstream是所有输出字节流的超类\",{\"1\":{\"2842\":1}}],[\"outputstream抽象类\",{\"0\":{\"2842\":1}}],[\"outputstreamwriterexample\",{\"1\":{\"2879\":1}}],[\"outputstreamwriter示例\",{\"1\":{\"2879\":1}}],[\"outputstreamwriter是字符流通向字节流的桥梁\",{\"1\":{\"2879\":1}}],[\"outputstreamwriter详解\",{\"0\":{\"2879\":1}}],[\"outputstreamwriter将字符流转换为字节流\",{\"1\":{\"2877\":1}}],[\"outputstreamwriter\",{\"1\":{\"2837\":3,\"2855\":3,\"2861\":3,\"2877\":1,\"2879\":5,\"2880\":2}}],[\"outputstream和reader\",{\"1\":{\"2835\":1}}],[\"outputstream\",{\"1\":{\"286\":14,\"1221\":1,\"1314\":1,\"1321\":1,\"1336\":2,\"2868\":3,\"2893\":2,\"2897\":2,\"2911\":1,\"3065\":4,\"3070\":1,\"3078\":1}}],[\"outchannel\",{\"1\":{\"1321\":2}}],[\"outside\",{\"1\":{\"125\":3}}],[\"outer\",{\"1\":{\"125\":1}}],[\"outdated\",{\"1\":{\"122\":1}}],[\"out\",{\"0\":{\"1667\":1},\"1\":{\"89\":1,\"125\":6,\"157\":1,\"283\":2,\"289\":1,\"291\":3,\"293\":2,\"307\":2,\"338\":4,\"469\":1,\"471\":3,\"474\":2,\"479\":2,\"491\":2,\"500\":1,\"501\":1,\"502\":1,\"517\":2,\"521\":1,\"526\":2,\"527\":1,\"529\":1,\"537\":3,\"538\":1,\"539\":1,\"541\":3,\"542\":1,\"544\":1,\"552\":2,\"557\":2,\"575\":2,\"592\":3,\"609\":5,\"610\":2,\"625\":1,\"626\":6,\"642\":2,\"658\":1,\"675\":1,\"676\":5,\"677\":1,\"693\":5,\"694\":5,\"710\":1,\"711\":3,\"727\":1,\"728\":3,\"745\":5,\"772\":3,\"773\":1,\"1037\":11,\"1038\":2,\"1040\":5,\"1041\":12,\"1043\":4,\"1044\":2,\"1052\":2,\"1055\":5,\"1056\":2,\"1058\":2,\"1069\":1,\"1094\":1,\"1095\":2,\"1111\":1,\"1123\":2,\"1147\":3,\"1160\":6,\"1161\":3,\"1162\":1,\"1164\":3,\"1165\":2,\"1166\":2,\"1179\":3,\"1182\":2,\"1185\":1,\"1186\":1,\"1190\":3,\"1191\":3,\"1194\":5,\"1204\":3,\"1205\":2,\"1206\":1,\"1210\":3,\"1211\":4,\"1212\":4,\"1221\":4,\"1222\":6,\"1224\":2,\"1225\":3,\"1228\":4,\"1232\":1,\"1238\":5,\"1243\":1,\"1246\":2,\"1247\":2,\"1250\":3,\"1260\":3,\"1264\":3,\"1267\":3,\"1269\":4,\"1270\":2,\"1280\":1,\"1287\":3,\"1295\":2,\"1296\":1,\"1312\":2,\"1314\":6,\"1315\":5,\"1321\":4,\"1324\":2,\"1332\":2,\"1336\":5,\"1372\":1,\"1439\":10,\"1891\":1,\"2077\":3,\"2078\":12,\"2079\":3,\"2089\":1,\"2100\":1,\"2123\":3,\"2125\":5,\"2126\":7,\"2128\":2,\"2129\":1,\"2130\":1,\"2132\":1,\"2133\":1,\"2134\":3,\"2146\":2,\"2147\":3,\"2149\":1,\"2150\":1,\"2151\":2,\"2158\":2,\"2159\":2,\"2169\":2,\"2170\":5,\"2180\":2,\"2181\":2,\"2189\":3,\"2191\":2,\"2212\":4,\"2213\":4,\"2214\":6,\"2216\":3,\"2217\":2,\"2218\":1,\"2220\":6,\"2221\":1,\"2223\":3,\"2224\":1,\"2228\":8,\"2230\":2,\"2231\":2,\"2239\":3,\"2243\":1,\"2245\":4,\"2246\":2,\"2248\":6,\"2249\":3,\"2265\":6,\"2266\":1,\"2269\":2,\"2271\":5,\"2276\":3,\"2280\":2,\"2292\":1,\"2303\":3,\"2304\":3,\"2324\":11,\"2325\":14,\"2326\":7,\"2327\":13,\"2328\":2,\"2329\":6,\"2346\":1,\"2352\":1,\"2358\":1,\"2370\":3,\"2371\":2,\"2406\":5,\"2407\":11,\"2408\":4,\"2409\":3,\"2410\":1,\"2427\":2,\"2450\":1,\"2465\":7,\"2466\":4,\"2467\":2,\"2468\":9,\"2477\":1,\"2480\":2,\"2522\":2,\"2523\":5,\"2524\":1,\"2537\":2,\"2555\":2,\"2577\":1,\"2578\":1,\"2585\":2,\"2632\":2,\"2660\":1,\"2661\":8,\"2685\":2,\"2736\":4,\"2737\":2,\"2738\":1,\"2742\":2,\"2746\":3,\"2748\":2,\"2784\":1,\"2785\":2,\"2797\":1,\"2808\":1,\"2809\":4,\"2810\":1,\"2819\":3,\"2820\":1,\"2822\":4,\"2831\":1,\"2832\":1,\"2833\":1,\"2837\":3,\"2843\":1,\"2844\":2,\"2845\":6,\"2849\":7,\"2855\":2,\"2856\":1,\"2857\":4,\"2861\":1,\"2866\":1,\"2867\":1,\"2868\":2,\"2878\":4,\"2879\":2,\"2880\":1,\"2881\":3,\"2885\":1,\"2891\":2,\"2892\":2,\"2893\":1,\"2897\":1,\"2902\":2,\"2903\":1,\"2904\":4,\"2905\":1,\"2909\":4,\"2914\":8,\"2915\":1,\"2916\":4,\"2917\":1,\"2921\":6,\"2927\":2,\"2936\":3,\"2965\":5,\"2968\":8,\"2969\":3,\"2970\":5,\"2971\":8,\"2974\":1,\"2980\":5,\"2983\":4,\"2984\":4,\"2986\":3,\"2989\":4,\"2990\":1,\"2999\":1,\"3000\":2,\"3002\":7,\"3003\":5,\"3005\":7,\"3007\":2,\"3010\":1,\"3023\":2,\"3024\":2,\"3025\":3,\"3035\":1,\"3038\":1,\"3047\":2,\"3065\":11,\"3066\":4,\"3070\":2,\"3078\":1,\"3079\":1,\"3085\":2,\"3116\":6,\"3117\":2,\"3118\":4,\"3120\":3,\"3125\":2,\"3137\":2,\"3147\":1,\"3149\":2,\"3190\":2,\"3199\":1,\"3208\":1,\"3209\":1,\"3244\":1}}],[\"own\",{\"1\":{\"993\":1}}],[\"ownership\",{\"1\":{\"993\":2}}],[\"owner\",{\"1\":{\"122\":1,\"1642\":2}}],[\"o密集型应用\",{\"1\":{\"533\":1}}],[\"o密集型任务示例\",{\"1\":{\"529\":1}}],[\"o密集型任务\",{\"1\":{\"529\":1,\"532\":1}}],[\"os和windows\",{\"1\":{\"3248\":1}}],[\"osi七层模型是国际标准化组织\",{\"1\":{\"3058\":1}}],[\"osi七层模型\",{\"0\":{\"3058\":1}}],[\"osw\",{\"1\":{\"2837\":2,\"2855\":2,\"2861\":2,\"2879\":4}}],[\"ostrich\",{\"1\":{\"1210\":2}}],[\"oss\",{\"1\":{\"994\":1,\"999\":3,\"1000\":1,\"1003\":1,\"1004\":1}}],[\"ossrh\",{\"1\":{\"990\":1,\"993\":1,\"995\":1}}],[\"osgi\",{\"1\":{\"563\":1}}],[\"os\",{\"1\":{\"286\":3,\"1579\":1,\"1660\":2,\"2868\":4}}],[\"objs\",{\"1\":{\"1416\":1}}],[\"obj永远不会被回收\",{\"1\":{\"781\":1}}],[\"obj\",{\"1\":{\"710\":2,\"711\":4,\"729\":2,\"746\":2,\"773\":2,\"781\":2,\"1055\":4,\"1069\":6,\"1139\":2,\"1144\":1,\"1150\":1,\"2551\":3,\"2987\":3,\"3007\":36,\"3149\":2}}],[\"objectcreationdemo\",{\"1\":{\"2969\":1}}],[\"objectmapper\",{\"1\":{\"1439\":2,\"1440\":2,\"1443\":2,\"1444\":2,\"2960\":1}}],[\"objectmappertest\",{\"1\":{\"1439\":1}}],[\"objectmapper常用方法\",{\"1\":{\"1438\":1}}],[\"objectinputstream\",{\"1\":{\"1225\":2}}],[\"objectid\",{\"1\":{\"37\":1,\"38\":1}}],[\"objectoutputstream\",{\"1\":{\"1225\":2}}],[\"objectoutputstream等\",{\"1\":{\"1222\":1}}],[\"objectlayoutdemo\",{\"1\":{\"711\":1}}],[\"object>子类\",{\"1\":{\"1288\":1}}],[\"object>>\",{\"1\":{\"289\":1,\"3007\":1}}],[\"object>\",{\"1\":{\"279\":1,\"283\":1,\"289\":1,\"643\":1,\"1238\":2,\"2039\":2,\"2057\":1,\"2392\":1,\"2423\":1,\"2642\":2,\"2685\":1,\"2691\":2,\"2999\":1,\"3007\":6,\"3120\":1,\"3235\":1}}],[\"objectstreamfield\",{\"1\":{\"2288\":2}}],[\"objects\",{\"1\":{\"267\":2,\"286\":5,\"1182\":2,\"2054\":1,\"2144\":1,\"2605\":2,\"3007\":2}}],[\"object\",{\"1\":{\"125\":2,\"267\":1,\"279\":2,\"283\":3,\"338\":2,\"366\":1,\"430\":1,\"593\":2,\"643\":2,\"659\":2,\"660\":2,\"693\":2,\"711\":2,\"728\":3,\"729\":1,\"746\":1,\"773\":2,\"781\":1,\"936\":1,\"1055\":1,\"1068\":3,\"1069\":3,\"1144\":2,\"1150\":2,\"1182\":1,\"1238\":4,\"1267\":6,\"1437\":1,\"1650\":9,\"1656\":1,\"1711\":1,\"1713\":9,\"1735\":2,\"2144\":2,\"2228\":1,\"2234\":2,\"2294\":1,\"2314\":6,\"2318\":2,\"2356\":6,\"2392\":2,\"2433\":4,\"2436\":3,\"2437\":1,\"2440\":1,\"2441\":1,\"2456\":2,\"2496\":1,\"2508\":3,\"2571\":1,\"2575\":1,\"2599\":1,\"2602\":2,\"2605\":1,\"2629\":1,\"2631\":2,\"2680\":1,\"2682\":2,\"2683\":1,\"2685\":4,\"2691\":2,\"2902\":1,\"2987\":3,\"2999\":5,\"3000\":1,\"3002\":9,\"3003\":4,\"3005\":6,\"3007\":4,\"3034\":3,\"3036\":1,\"3038\":1,\"3046\":1,\"3086\":1,\"3120\":2,\"3125\":1,\"3137\":1,\"3149\":1,\"3154\":1,\"3170\":5}}],[\"obs\",{\"1\":{\"286\":2}}],[\"o错误\",{\"1\":{\"125\":1}}],[\"overloaddemo\",{\"1\":{\"2786\":1,\"3035\":1}}],[\"overload\",{\"0\":{\"2741\":1,\"2786\":1},\"1\":{\"2752\":1}}],[\"overlay2\",{\"1\":{\"1615\":1,\"1675\":1,\"1746\":1}}],[\"overcommit\",{\"1\":{\"1788\":2}}],[\"overwrite\",{\"1\":{\"1660\":1}}],[\"over\",{\"1\":{\"1074\":1}}],[\"overhead\",{\"1\":{\"780\":1,\"1558\":1,\"3110\":1}}],[\"override\",{\"0\":{\"2737\":1},\"1\":{\"287\":1,\"289\":1,\"290\":1,\"291\":3,\"292\":2,\"293\":2,\"354\":1,\"382\":1,\"430\":2,\"434\":1,\"451\":2,\"456\":2,\"541\":3,\"574\":1,\"592\":3,\"746\":1,\"747\":1,\"1063\":1,\"1065\":1,\"1078\":1,\"1087\":2,\"1094\":6,\"1111\":1,\"1182\":3,\"1204\":1,\"1205\":1,\"1209\":2,\"1210\":2,\"1211\":5,\"1212\":2,\"1225\":1,\"1238\":8,\"1267\":2,\"1332\":2,\"1431\":2,\"1440\":2,\"1443\":2,\"1444\":2,\"1949\":2,\"2027\":2,\"2077\":2,\"2100\":1,\"2224\":1,\"2232\":1,\"2329\":1,\"2356\":8,\"2388\":1,\"2427\":1,\"2466\":2,\"2467\":3,\"2577\":2,\"2605\":2,\"2612\":1,\"2632\":1,\"2669\":1,\"2736\":1,\"2737\":2,\"2738\":1,\"2742\":4,\"2745\":2,\"2746\":3,\"2748\":2,\"2752\":1,\"2808\":1,\"2873\":3,\"2921\":2,\"2960\":1,\"2987\":1,\"2990\":1,\"3002\":2,\"3005\":3,\"3007\":2,\"3021\":2,\"3036\":1,\"3120\":6,\"3125\":3,\"3136\":2,\"3147\":1,\"3162\":1,\"3190\":6,\"3208\":3,\"3217\":3,\"3218\":1}}],[\"overrun\",{\"1\":{\"125\":2}}],[\"overflow\",{\"1\":{\"125\":1,\"2272\":2}}],[\"overflowed\",{\"1\":{\"125\":1}}],[\"otheroperatordemo\",{\"1\":{\"2115\":1}}],[\"other\",{\"1\":{\"125\":2,\"2115\":1,\"2467\":2,\"2809\":1}}],[\"o\",{\"1\":{\"125\":2,\"264\":1,\"279\":3,\"960\":1,\"997\":2,\"1056\":2,\"1182\":5,\"1635\":2,\"1636\":1,\"1660\":1,\"1714\":2,\"1747\":1,\"1809\":4,\"1813\":1,\"1873\":1,\"1880\":2,\"1882\":1,\"1915\":1,\"2188\":1,\"2196\":2,\"2292\":1,\"2294\":1,\"2314\":5,\"2316\":8,\"2348\":1,\"2354\":11,\"2357\":3,\"2363\":12,\"2388\":2,\"2440\":4,\"2489\":2,\"2496\":4,\"2503\":8,\"2511\":2,\"2512\":1,\"2577\":2,\"2588\":5,\"2602\":6,\"2605\":5,\"2631\":6,\"2643\":1,\"2666\":1,\"2669\":2,\"2680\":1,\"2701\":1,\"2702\":8,\"2707\":1,\"2708\":1,\"2709\":1,\"2710\":1,\"2711\":4,\"2712\":14,\"2715\":2,\"2716\":2,\"2721\":3,\"2723\":1,\"2727\":1,\"2905\":1,\"3246\":3,\"3248\":1,\"3271\":1}}],[\"oriented\",{\"1\":{\"2911\":2}}],[\"originalmap\",{\"1\":{\"3007\":2}}],[\"originalcollection\",{\"1\":{\"3007\":2}}],[\"originalerr\",{\"1\":{\"2909\":2}}],[\"originalout\",{\"1\":{\"2909\":2}}],[\"originaldata\",{\"1\":{\"2844\":2}}],[\"original\",{\"1\":{\"2151\":4,\"2240\":3,\"2291\":3,\"3007\":7}}],[\"originallist\",{\"1\":{\"1194\":4}}],[\"origin\",{\"1\":{\"1560\":1,\"3205\":1}}],[\"ordinal\",{\"1\":{\"2819\":1,\"2820\":2}}],[\"orderprocessingexception\",{\"1\":{\"2953\":1}}],[\"orderdao\",{\"1\":{\"2952\":1,\"3049\":1}}],[\"ordernotfoundexception\",{\"1\":{\"2948\":1}}],[\"orderexception\",{\"1\":{\"2938\":3}}],[\"ordered\",{\"1\":{\"288\":1}}],[\"ordermapper\",{\"1\":{\"2007\":1}}],[\"ordercontroller\",{\"1\":{\"2007\":2}}],[\"ordercount\",{\"1\":{\"1998\":1}}],[\"orderstatus\",{\"1\":{\"2955\":1}}],[\"orders\",{\"1\":{\"2007\":1,\"2012\":1,\"2953\":2}}],[\"orderservice\",{\"1\":{\"2007\":9,\"2047\":1,\"2770\":1,\"2796\":1,\"2955\":1,\"3002\":6,\"3159\":6,\"3160\":1}}],[\"orderresult\",{\"1\":{\"2955\":2}}],[\"orderrequest\",{\"1\":{\"2007\":2,\"2047\":2,\"2955\":1}}],[\"orderrepository\",{\"1\":{\"1996\":1,\"2007\":7,\"3160\":2}}],[\"orderid\",{\"1\":{\"1044\":5,\"2071\":1,\"2770\":2,\"2938\":8,\"2952\":3,\"3002\":2}}],[\"order\",{\"1\":{\"125\":2,\"1833\":2,\"1997\":2,\"2007\":5,\"2032\":1,\"2054\":3,\"2061\":10,\"2770\":4,\"2948\":4,\"2952\":1,\"2953\":4,\"2955\":3,\"3002\":14,\"3160\":4}}],[\"orcl\",{\"1\":{\"1833\":1}}],[\"orange\",{\"1\":{\"2144\":1,\"2197\":1,\"2213\":2,\"2216\":2,\"2218\":2,\"2220\":2,\"2221\":2,\"2406\":2,\"2407\":1,\"2408\":1,\"2660\":2}}],[\"oradata\",{\"1\":{\"1833\":1}}],[\"oracle常用命令\",{\"0\":{\"1832\":1}}],[\"oracle的用户密码默认有效期是180天\",{\"1\":{\"1570\":1}}],[\"oracle\",{\"1\":{\"1568\":2,\"1569\":11,\"1570\":3,\"1573\":1,\"1578\":1,\"1579\":1}}],[\"oracle命令\",{\"0\":{\"3315\":1},\"1\":{\"1568\":1}}],[\"oraclejdk1\",{\"1\":{\"1551\":1}}],[\"orm框架中的注解映射\",{\"0\":{\"3163\":1}}],[\"orm框架中的注解映射以及注解驱动的代码生成技术\",{\"1\":{\"3156\":1}}],[\"orm框架的演进\",{\"0\":{\"581\":1}}],[\"orm框架集成\",{\"0\":{\"364\":1}}],[\"orm框架\",{\"1\":{\"361\":1}}],[\"orm框架等的支持\",{\"1\":{\"313\":1}}],[\"orelseget\",{\"1\":{\"544\":1,\"554\":1}}],[\"orelsethrow\",{\"1\":{\"521\":1,\"544\":1,\"2054\":1,\"2408\":1,\"3050\":1}}],[\"orelse\",{\"1\":{\"292\":1,\"440\":1,\"544\":1,\"2329\":1,\"2419\":1}}],[\"org\",{\"1\":{\"261\":1,\"286\":2,\"289\":1,\"290\":4,\"439\":2,\"584\":4,\"975\":1,\"984\":1,\"985\":1,\"993\":2,\"994\":3,\"996\":1,\"999\":4,\"1000\":1,\"1003\":1,\"1004\":3,\"1474\":3,\"1488\":1,\"1564\":5,\"1779\":1,\"3159\":3,\"3160\":2,\"3164\":1,\"3166\":9}}],[\"or\",{\"1\":{\"125\":8,\"557\":1,\"994\":1,\"997\":1,\"1578\":3,\"1677\":2,\"1735\":2,\"1831\":3,\"1880\":2,\"1949\":1,\"1962\":1,\"2111\":1,\"2112\":1,\"2291\":1,\"2708\":1}}],[\"of语句\",{\"1\":{\"1453\":1}}],[\"offline\",{\"1\":{\"1626\":2,\"1635\":2,\"1637\":3,\"1715\":2,\"3263\":1}}],[\"off\",{\"1\":{\"1431\":1,\"1433\":1,\"1434\":1,\"1435\":1,\"1440\":1,\"1451\":2,\"1454\":1,\"1896\":1,\"2833\":1,\"2841\":1,\"2842\":1,\"2853\":1,\"2854\":2,\"2869\":1,\"2873\":4,\"3250\":1}}],[\"offerlast\",{\"1\":{\"2319\":1}}],[\"offerfirst\",{\"1\":{\"2319\":1}}],[\"offer\",{\"0\":{\"2573\":1},\"1\":{\"1326\":1,\"2349\":1,\"2462\":2,\"2465\":4,\"2468\":3,\"2477\":1,\"2506\":2,\"2562\":1,\"2573\":1,\"2577\":3,\"2578\":3,\"2588\":1}}],[\"official\",{\"1\":{\"994\":1}}],[\"offset+count\",{\"1\":{\"2291\":1}}],[\"offsetnew\",{\"1\":{\"279\":1}}],[\"offset加载到内存中\",{\"1\":{\"171\":1}}],[\"offset\",{\"1\":{\"98\":2,\"106\":1,\"171\":3,\"182\":1,\"200\":1,\"204\":1,\"1535\":1,\"2291\":8,\"2296\":1}}],[\"ofpattern\",{\"1\":{\"545\":1}}],[\"ofnullable\",{\"1\":{\"521\":1,\"544\":1,\"2054\":1,\"2419\":1}}],[\"ofstring\",{\"1\":{\"471\":4,\"491\":2,\"529\":1}}],[\"of\",{\"0\":{\"1667\":1},\"1\":{\"125\":16,\"157\":1,\"501\":1,\"544\":1,\"545\":1,\"566\":1,\"994\":2,\"1059\":3,\"1178\":5,\"1191\":3,\"1198\":4,\"1453\":3,\"1454\":1,\"1578\":4,\"2320\":1,\"2323\":2,\"2342\":2,\"2358\":9,\"2369\":1,\"2378\":1,\"2395\":1,\"2406\":1,\"2415\":1,\"2441\":2,\"2520\":2,\"3003\":1,\"3097\":2}}],[\"opcode\",{\"1\":{\"3282\":1}}],[\"opaque\",{\"1\":{\"3215\":1}}],[\"oplogsize来改变oplog的日志大小\",{\"1\":{\"1759\":1}}],[\"oplogsizemb\",{\"1\":{\"1734\":1,\"1764\":1}}],[\"oplog分配的是5\",{\"1\":{\"1759\":1}}],[\"oplog主从日志\",{\"1\":{\"1739\":2}}],[\"op\",{\"1\":{\"1228\":2,\"1315\":2,\"1324\":2,\"2916\":2,\"2921\":4,\"3079\":2,\"3118\":6}}],[\"opsforset\",{\"1\":{\"3235\":1}}],[\"opsforvalue\",{\"1\":{\"3235\":2}}],[\"ops\",{\"1\":{\"193\":1,\"2916\":1}}],[\"operations\",{\"1\":{\"2522\":3,\"2524\":3}}],[\"operation\",{\"1\":{\"2051\":1,\"2409\":5,\"3005\":1,\"3087\":2}}],[\"operationtime\",{\"1\":{\"1764\":1}}],[\"operated\",{\"1\":{\"1638\":1}}],[\"operate\",{\"1\":{\"1212\":2}}],[\"operator\",{\"1\":{\"193\":1}}],[\"operand\",{\"1\":{\"125\":1}}],[\"openwriter\",{\"1\":{\"3162\":1}}],[\"openid\",{\"1\":{\"2012\":1}}],[\"openpitrix\",{\"1\":{\"1638\":1}}],[\"openldapvolumesize\",{\"1\":{\"1638\":1}}],[\"openldap\",{\"1\":{\"1638\":1}}],[\"openjdk不包含字体库\",{\"1\":{\"1557\":1}}],[\"openjdk比oraclejdk简化了一些功能\",{\"1\":{\"1557\":1}}],[\"openjdk\",{\"1\":{\"711\":1,\"1724\":4}}],[\"openai\",{\"1\":{\"529\":1}}],[\"openconnection\",{\"1\":{\"294\":1}}],[\"opens命令行参数\",{\"1\":{\"2994\":1}}],[\"opens\",{\"1\":{\"1281\":2,\"2994\":1,\"3010\":1}}],[\"openstream\",{\"1\":{\"286\":1}}],[\"openssl安全通信的软件库包\",{\"1\":{\"1779\":1}}],[\"openssl10\",{\"1\":{\"1581\":1,\"1735\":1}}],[\"openssl\",{\"1\":{\"115\":1,\"1418\":1,\"1425\":1,\"1426\":1,\"1486\":1,\"1764\":1,\"1779\":2}}],[\"open\",{\"1\":{\"125\":7,\"990\":1,\"993\":1,\"1228\":2,\"1232\":2,\"1238\":2,\"1315\":2,\"1324\":2,\"1431\":2,\"1432\":1,\"1527\":5,\"1735\":2,\"2916\":3,\"2917\":1,\"2921\":4,\"3079\":2,\"3087\":9,\"3117\":1,\"3118\":2,\"3120\":1}}],[\"optimize\",{\"1\":{\"2986\":2}}],[\"optimizememory\",{\"1\":{\"2451\":1}}],[\"optimizedreflectiontime\",{\"1\":{\"2986\":2}}],[\"optimizedhashmapexample\",{\"1\":{\"2604\":1}}],[\"optimizedset\",{\"1\":{\"2386\":1}}],[\"optimizedmap\",{\"1\":{\"1193\":1,\"2604\":2}}],[\"optimizedlist\",{\"1\":{\"1193\":1}}],[\"optimizedconcat\",{\"1\":{\"1056\":2}}],[\"option>\",{\"1\":{\"1459\":3,\"1464\":3}}],[\"options=\",{\"1\":{\"1551\":2}}],[\"options\",{\"0\":{\"788\":1,\"789\":1,\"790\":1,\"822\":1,\"823\":1,\"824\":1,\"856\":1,\"857\":1,\"858\":1,\"890\":1,\"891\":1,\"892\":1},\"1\":{\"1662\":1,\"3164\":1,\"3179\":1,\"3282\":1}}],[\"optional<t>\",{\"1\":{\"3050\":1}}],[\"optional<user>\",{\"1\":{\"2054\":1,\"3050\":1}}],[\"optional<integer>\",{\"1\":{\"544\":1}}],[\"optional<string>\",{\"1\":{\"474\":1,\"521\":1,\"544\":4,\"554\":1}}],[\"optional适用于方法返回值为空的场景\",{\"1\":{\"521\":1}}],[\"optional类的正确使用\",{\"0\":{\"554\":1}}],[\"optional类的常用方法\",{\"1\":{\"544\":1}}],[\"optional类是java\",{\"1\":{\"544\":1}}],[\"optional类\",{\"0\":{\"544\":1}}],[\"optional类则专注于编译期避免空指针异常的发生\",{\"1\":{\"521\":1}}],[\"optional类新增了isempty\",{\"1\":{\"474\":1}}],[\"optional\",{\"1\":{\"474\":4,\"521\":1,\"544\":10,\"1559\":1,\"2053\":1,\"2054\":1,\"2419\":1}}],[\"optional增强\",{\"0\":{\"474\":1}}],[\"option失败\",{\"1\":{\"125\":1}}],[\"option\",{\"1\":{\"122\":1,\"125\":3,\"1111\":1,\"1459\":1,\"1821\":1,\"3125\":1}}],[\"opts=\",{\"1\":{\"1512\":1,\"1558\":1}}],[\"opts\",{\"1\":{\"250\":1,\"1615\":2,\"1621\":2,\"1666\":1,\"1669\":1,\"1675\":2,\"1746\":2,\"1753\":2}}],[\"opt\",{\"1\":{\"122\":1,\"219\":2,\"250\":1,\"1354\":1,\"1518\":2,\"1526\":2,\"1530\":4,\"1531\":1,\"1634\":1,\"1638\":1,\"1675\":1,\"3271\":2,\"3282\":1}}],[\"okresponse\",{\"1\":{\"3208\":3,\"3232\":2}}],[\"ok响应\",{\"1\":{\"3187\":1,\"3189\":1,\"3208\":1}}],[\"ok\",{\"1\":{\"113\":1,\"122\":79,\"450\":2,\"1324\":1,\"1432\":1,\"1764\":3,\"1787\":2,\"2921\":1,\"3070\":1,\"3188\":1}}],[\"onconnectionestablished\",{\"1\":{\"3097\":1}}],[\"onceperrequestfilter\",{\"1\":{\"456\":1}}],[\"onfailure\",{\"1\":{\"3087\":2}}],[\"onsuccess\",{\"1\":{\"3087\":2}}],[\"on开启\",{\"0\":{\"1830\":1}}],[\"onreadystatechange\",{\"1\":{\"1431\":1,\"1432\":1}}],[\"onboot=\",{\"1\":{\"3266\":4}}],[\"onboot=yes\",{\"1\":{\"1918\":1}}],[\"onbuild的命令\",{\"1\":{\"3246\":1}}],[\"onbuild\",{\"1\":{\"3246\":1}}],[\"onblur\",{\"1\":{\"1431\":1}}],[\"onbeancondition\",{\"1\":{\"415\":1,\"459\":1}}],[\"onackreceived\",{\"1\":{\"1312\":1}}],[\"one\",{\"1\":{\"165\":1,\"182\":1,\"312\":2,\"502\":1,\"2323\":1,\"2809\":1}}],[\"only=\",{\"1\":{\"3266\":4}}],[\"only=no\",{\"1\":{\"1918\":1}}],[\"onlyifabsent\",{\"1\":{\"2600\":2}}],[\"only\",{\"1\":{\"125\":5,\"139\":1,\"235\":1,\"1503\":2}}],[\"onlineusers\",{\"1\":{\"2525\":4}}],[\"online\",{\"1\":{\"122\":2,\"1620\":2,\"1626\":2,\"1715\":2,\"1752\":2}}],[\"on\",{\"1\":{\"100\":2,\"108\":1,\"122\":1,\"125\":16,\"216\":3,\"228\":1,\"250\":5,\"312\":1,\"994\":2,\"1004\":1,\"1111\":1,\"1374\":1,\"1385\":1,\"1402\":1,\"1417\":2,\"1450\":1,\"1451\":3,\"1454\":2,\"1577\":1,\"1578\":1,\"1595\":3,\"1609\":2,\"1775\":1,\"1788\":5,\"1821\":1,\"2020\":2,\"2356\":2}}],[\"示例2\",{\"1\":{\"3246\":1}}],[\"示例1\",{\"1\":{\"3246\":1}}],[\"示例service类\",{\"1\":{\"2999\":1}}],[\"示例执行器\",{\"1\":{\"1687\":1}}],[\"示例证明\",{\"1\":{\"1058\":1}}],[\"示例代码\",{\"0\":{\"270\":1},\"1\":{\"2429\":1,\"2942\":1}}],[\"示例\",{\"1\":{\"37\":1,\"47\":2,\"48\":3,\"49\":2,\"50\":2,\"58\":1,\"59\":1,\"60\":1,\"68\":2,\"69\":1,\"70\":1,\"71\":1,\"283\":2,\"788\":1,\"789\":1,\"822\":1,\"823\":1,\"856\":1,\"857\":1,\"890\":1,\"891\":1,\"1231\":4,\"1290\":1,\"1393\":1,\"1996\":1,\"1997\":1,\"1998\":1,\"1999\":1,\"2000\":1,\"2032\":1,\"2033\":1,\"2035\":1,\"2037\":1,\"2039\":1,\"2046\":1,\"2050\":1,\"2358\":1,\"2727\":1,\"3023\":1,\"3024\":1,\"3025\":1,\"3034\":1,\"3036\":1,\"3041\":1,\"3046\":1,\"3047\":1,\"3049\":1,\"3050\":1,\"3052\":1,\"3053\":1,\"3177\":1,\"3180\":1,\"3246\":1}}],[\"一方发送bye请求终止会话\",{\"1\":{\"3189\":1}}],[\"一是java不支持多继承\",{\"1\":{\"2994\":1}}],[\"一份好的代码不仅要能正确运行\",{\"1\":{\"2095\":1}}],[\"一月\",{\"1\":{\"2078\":1,\"2126\":1}}],[\"一键安装\",{\"1\":{\"1904\":1}}],[\"一键安装所有\",{\"1\":{\"1482\":1}}],[\"一切正常\",{\"1\":{\"1887\":1}}],[\"一切皆对象\",{\"1\":{\"1046\":1}}],[\"一下即可转化为\",{\"1\":{\"1869\":1}}],[\"一直有报错\",{\"1\":{\"1677\":1}}],[\"一直报错\",{\"1\":{\"1554\":1}}],[\"一看就知道\",{\"1\":{\"1664\":1}}],[\"一些必要的系统设置\",{\"1\":{\"1610\":1}}],[\"一种是通过redis命令行修改\",{\"1\":{\"1788\":1}}],[\"一种是\",{\"1\":{\"1418\":2}}],[\"一种是建立一个信息安全通道\",{\"1\":{\"1414\":1}}],[\"一套代码支持多种数据类型\",{\"1\":{\"1286\":1}}],[\"一书\",{\"1\":{\"312\":1}}],[\"一样一直保持在内存中以应对大量的请求\",{\"1\":{\"306\":1}}],[\"一连串的场景会随之儿来\",{\"1\":{\"190\":1}}],[\"一次一个字节\",{\"1\":{\"2913\":1}}],[\"一次添加\",{\"1\":{\"2355\":1}}],[\"一次只调整一个参数\",{\"1\":{\"818\":1,\"852\":1,\"886\":1,\"920\":1}}],[\"一次编写\",{\"1\":{\"574\":1,\"696\":1,\"1046\":1}}],[\"一次性使用\",{\"1\":{\"543\":1}}],[\"一次最多插入1000条\",{\"1\":{\"288\":1}}],[\"一次未命中\",{\"1\":{\"185\":1}}],[\"一次命中\",{\"1\":{\"185\":1}}],[\"一旦创建就无法修改\",{\"1\":{\"2378\":1}}],[\"一旦创建无法改变大小\",{\"1\":{\"1168\":1}}],[\"一旦出现故障或者是没有及时相应的话\",{\"1\":{\"1409\":1}}],[\"一旦泄露\",{\"1\":{\"305\":1}}],[\"一旦\",{\"1\":{\"305\":1}}],[\"一旦签发\",{\"1\":{\"304\":1}}],[\"一旦master重启\",{\"1\":{\"171\":1}}],[\"一旦深入一点\",{\"1\":{\"0\":1}}],[\"一台服务器多次运行可以生成多个运行id\",{\"1\":{\"167\":1}}],[\"一年中应用服务正常运行的时间占全年时间的百分比\",{\"1\":{\"160\":1}}],[\"一共是3类8种\",{\"1\":{\"157\":1}}],[\"一般在制作一些执行就关闭的容器中会使用\",{\"1\":{\"3246\":1}}],[\"一般并发场景使用concurrentlinkedqueue或其他\",{\"1\":{\"2536\":1}}],[\"一般无需修改\",{\"1\":{\"2386\":1}}],[\"一般我认为id是空闲cpu使用率\",{\"1\":{\"1887\":1}}],[\"一般来说\",{\"1\":{\"1887\":1,\"2095\":1}}],[\"一般会造成cpu使用率很高\",{\"1\":{\"1887\":1}}],[\"一般负载超过了3就比较高\",{\"1\":{\"1887\":1}}],[\"一般都会将redis目录放置到\",{\"1\":{\"1783\":1}}],[\"一般都是目录没权限\",{\"1\":{\"1528\":1}}],[\"一般配置文件中开启\",{\"1\":{\"1739\":1}}],[\"一般是因为堆太小\",{\"1\":{\"1558\":1}}],[\"一般是通过\",{\"1\":{\"130\":1}}],[\"一般数据文件夹\",{\"1\":{\"1530\":1}}],[\"一般的网页如果需要更新内容\",{\"1\":{\"1430\":1}}],[\"一般情况下自己安装的nginx都是不存在ssl模块的\",{\"1\":{\"1416\":1}}],[\"一般免费证书较少\",{\"1\":{\"1414\":1}}],[\"一般建议4kb~64kb\",{\"1\":{\"1342\":1}}],[\"一般8kb~64kb\",{\"1\":{\"1238\":1}}],[\"一般\",{\"1\":{\"1101\":1}}],[\"一般大于4gb\",{\"1\":{\"784\":1}}],[\"一般像\",{\"1\":{\"129\":1}}],[\"一般位置为\",{\"1\":{\"113\":1}}],[\"一起使用\",{\"1\":{\"125\":1}}],[\"一\",{\"0\":{\"98\":1,\"119\":1,\"389\":1,\"400\":1,\"413\":1,\"425\":1,\"436\":1,\"447\":1,\"459\":1,\"991\":1,\"1159\":1,\"1350\":1,\"1420\":1,\"1426\":1,\"1473\":1,\"1502\":1,\"1506\":1,\"1539\":1,\"1567\":1,\"1609\":1,\"1671\":1,\"1676\":1,\"1678\":1,\"1696\":1,\"1700\":1,\"1741\":1,\"1759\":1,\"1781\":1,\"1889\":1,\"2360\":1,\"2397\":1,\"2431\":1,\"2458\":1,\"2488\":1,\"2515\":1,\"2546\":1,\"2566\":1,\"2590\":1,\"2618\":1,\"2645\":1,\"3248\":1,\"3255\":1},\"1\":{\"121\":1,\"267\":1,\"293\":1,\"1779\":1,\"3246\":1}}],[\"一致性哈希简单实现\",{\"1\":{\"3086\":1}}],[\"一致性哈希实现示例\",{\"1\":{\"3086\":1}}],[\"一致性哈希\",{\"1\":{\"3086\":1}}],[\"一致性\",{\"1\":{\"93\":1,\"210\":1,\"348\":1,\"432\":1,\"443\":1,\"1994\":1,\"2083\":1,\"2103\":1,\"2117\":1}}],[\"一个ua可以同时扮演uac和uas的角色\",{\"1\":{\"3182\":1}}],[\"一个reactor线程处理所有事件\",{\"1\":{\"3121\":1}}],[\"一个reactor线程负责所有事件的监听和处理\",{\"1\":{\"1328\":1}}],[\"一个线程可以高效地管理成百上千个网络连接\",{\"1\":{\"3118\":1}}],[\"一个线程可管理多个连接\",{\"1\":{\"3079\":1}}],[\"一个线程处理多个连接\",{\"1\":{\"1227\":1,\"1238\":1,\"2913\":1}}],[\"一个方法只做一件事\",{\"1\":{\"2788\":1}}],[\"一个错误码对应一种具体错误场景\",{\"1\":{\"2051\":1}}],[\"一个连接请求已经到达\",{\"1\":{\"1881\":1}}],[\"一个连接一个线程\",{\"1\":{\"1227\":1,\"2913\":1}}],[\"一个用户一分钟一个请求进来\",{\"1\":{\"1395\":1,\"1396\":1}}],[\"一个类在jvm中会对应几个class对象\",{\"1\":{\"2975\":1}}],[\"一个类对另一个类的依赖应该建立在最小的接口上\",{\"1\":{\"2772\":1}}],[\"一个类负责用户管理和订单管理\",{\"1\":{\"2770\":1}}],[\"一个类通常包含属性\",{\"1\":{\"2758\":1}}],[\"一个类可以实现多个接口\",{\"1\":{\"2753\":1}}],[\"一个类不应该承担太多的责任\",{\"1\":{\"1215\":1}}],[\"一个类应该只有一个引起它变化的原因\",{\"1\":{\"1208\":1,\"2770\":1}}],[\"一个典型的pom文件结构如下\",{\"1\":{\"936\":1}}],[\"一个典型的依赖声明如下\",{\"1\":{\"924\":1}}],[\"一个进程可以包含多个线程\",{\"1\":{\"589\":1}}],[\"一个springboot项目能够直接加载jar包中的bean吗\",{\"1\":{\"461\":1}}],[\"一个slave只对应一个master\",{\"1\":{\"161\":1}}],[\"一个逻辑类将接口封装到集合中\",{\"1\":{\"293\":1}}],[\"一个\",{\"1\":{\"167\":1}}],[\"一个数字\",{\"1\":{\"167\":1}}],[\"一个mongod实例中的所有数据库都使用同一个oplog\",{\"1\":{\"1739\":1}}],[\"一个mongodb实例可以包含多个数据库\",{\"1\":{\"37\":1}}],[\"一个master对应n个slave\",{\"1\":{\"186\":1}}],[\"一个master可以拥有多个slave\",{\"1\":{\"161\":1}}],[\"一个存储空间保存多个数据\",{\"1\":{\"134\":1}}],[\"一个存储空间保存多个键值对数据\",{\"1\":{\"133\":1}}],[\"一个存储空间保存一个数据\",{\"1\":{\"132\":1}}],[\"一个好的分片键应该能够使得数据均匀分布在各个分片上\",{\"1\":{\"75\":1}}],[\"一个分布式系统不可能同时满足一致性\",{\"1\":{\"43\":1}}],[\"d32702b0fd38ef3a2c66575a381989ab\",{\"1\":{\"3260\":1}}],[\"d目录下\",{\"1\":{\"3250\":1}}],[\"d目录\",{\"1\":{\"3250\":1}}],[\"d2\",{\"1\":{\"2101\":2}}],[\"d=不可中断的睡眠状态\",{\"1\":{\"1882\":1}}],[\"d表示delete\",{\"1\":{\"1876\":1}}],[\"df\",{\"1\":{\"1859\":1,\"1908\":1}}],[\"dmz\",{\"1\":{\"1940\":1}}],[\"dmesg\",{\"0\":{\"1883\":1},\"1\":{\"1835\":1,\"1883\":1}}],[\"dmaven\",{\"1\":{\"280\":1,\"950\":2,\"1656\":2,\"1711\":2}}],[\"dport\",{\"1\":{\"1788\":1,\"1876\":1,\"1880\":2}}],[\"dto\",{\"1\":{\"2763\":1}}],[\"dt\",{\"1\":{\"1731\":1}}],[\"dtd\",{\"1\":{\"439\":3}}],[\"dnat\",{\"0\":{\"1665\":1}}],[\"dns\",{\"1\":{\"3282\":2}}],[\"dns1=\",{\"1\":{\"3266\":4}}],[\"dns等\",{\"1\":{\"3220\":1}}],[\"dns解析器接口\",{\"1\":{\"3212\":1}}],[\"dns查询\",{\"1\":{\"3212\":1}}],[\"dnsresolver\",{\"1\":{\"3212\":8}}],[\"dns用于集群内应用访问使用\",{\"1\":{\"1685\":1}}],[\"dnsconfig\",{\"1\":{\"1662\":1}}],[\"dnspolicy\",{\"1\":{\"1661\":1,\"1698\":1}}],[\"dydnej\",{\"1\":{\"1650\":1,\"1713\":1}}],[\"dynamicarray\",{\"1\":{\"2161\":2,\"2704\":2}}],[\"dynamicproxydemo\",{\"1\":{\"1267\":1}}],[\"dynamic\",{\"1\":{\"289\":8}}],[\"djava\",{\"1\":{\"1548\":1,\"1697\":1,\"3246\":1}}],[\"dskywalking\",{\"1\":{\"3104\":2}}],[\"dskiptests或\",{\"1\":{\"950\":1}}],[\"dskiptests\",{\"1\":{\"949\":1,\"950\":1}}],[\"dsonar\",{\"1\":{\"2020\":3}}],[\"dsl\",{\"1\":{\"585\":1}}],[\"d<name>=<value>\",{\"1\":{\"798\":1,\"832\":1,\"866\":1,\"900\":1}}],[\"ddd\",{\"1\":{\"2014\":1}}],[\"ddocker\",{\"1\":{\"1610\":1,\"1671\":1,\"1741\":1}}],[\"dd\",{\"1\":{\"545\":1,\"1363\":1,\"1535\":3,\"1564\":3,\"2072\":2,\"2765\":1}}],[\"drivermanager\",{\"1\":{\"3005\":2}}],[\"drivermanagerdatasource\",{\"1\":{\"353\":1,\"367\":2}}],[\"driver\",{\"1\":{\"367\":1,\"1518\":1,\"1526\":1,\"1615\":2,\"1644\":2,\"1675\":2,\"1746\":2}}],[\"drocketmq\",{\"1\":{\"250\":2}}],[\"drop表示放弃连接\",{\"1\":{\"1876\":1}}],[\"dropwhile\",{\"1\":{\"1198\":1}}],[\"dropcollection等\",{\"1\":{\"94\":1}}],[\"dropindexes\",{\"1\":{\"90\":1}}],[\"dropindex\",{\"1\":{\"90\":1}}],[\"drop\",{\"1\":{\"82\":1,\"113\":5,\"125\":14,\"1575\":1,\"1813\":1,\"1876\":2,\"1940\":1}}],[\"dropuser\",{\"1\":{\"81\":1}}],[\"dropdatabase\",{\"1\":{\"80\":1}}],[\"d和\",{\"1\":{\"125\":1}}],[\"d位的十六进制数\",{\"1\":{\"125\":1}}],[\"d中确定的\",{\"1\":{\"125\":1}}],[\"d的字段或引用\",{\"1\":{\"125\":1}}],[\"d的重复条目\",{\"1\":{\"125\":1}}],[\"d行被group\",{\"1\":{\"125\":1}}],[\"d列\",{\"1\":{\"125\":1}}],[\"dl\",{\"1\":{\"125\":1}}],[\"d个表\",{\"1\":{\"125\":1}}],[\"d上\",{\"1\":{\"125\":1}}],[\"d字节\",{\"1\":{\"125\":2}}],[\"duyz2zibwt2oenbd0vbqwfoq01fqxdez1levliwuefrsc9cqvfeqwdla01boedbmvvkrxdfqi93u\",{\"1\":{\"3273\":1}}],[\"due\",{\"1\":{\"3005\":1}}],[\"du\",{\"1\":{\"1859\":2,\"1908\":3}}],[\"duration\",{\"1\":{\"545\":1,\"1068\":3,\"2524\":2,\"3109\":1}}],[\"durability\",{\"1\":{\"348\":1}}],[\"during\",{\"1\":{\"125\":5}}],[\"dump出本机12301端口的tcp包\",{\"1\":{\"1878\":1}}],[\"dumptaskinterval=3600\",{\"1\":{\"235\":1}}],[\"dump\",{\"1\":{\"125\":1,\"480\":2,\"3096\":2,\"3100\":2}}],[\"dupid\",{\"1\":{\"125\":2}}],[\"duplicated\",{\"1\":{\"125\":1}}],[\"dup\",{\"1\":{\"125\":11}}],[\"dual\",{\"1\":{\"119\":1,\"2357\":1}}],[\"d\",{\"1\":{\"125\":56,\"216\":1,\"219\":1,\"226\":1,\"234\":2,\"239\":1,\"242\":2,\"250\":1,\"255\":1,\"1040\":3,\"1190\":1,\"1191\":2,\"1194\":3,\"1222\":2,\"1362\":2,\"1369\":1,\"1370\":1,\"1371\":1,\"1372\":1,\"1373\":1,\"1421\":1,\"1422\":1,\"1423\":1,\"1503\":2,\"1512\":1,\"1518\":1,\"1523\":2,\"1524\":1,\"1526\":6,\"1529\":2,\"1530\":3,\"1535\":1,\"1564\":3,\"1569\":2,\"1577\":2,\"1578\":3,\"1586\":1,\"1595\":1,\"1606\":1,\"1634\":1,\"1637\":1,\"1638\":1,\"1643\":1,\"1644\":3,\"1646\":1,\"1675\":1,\"1767\":1,\"1813\":2,\"1838\":1,\"1869\":1,\"1875\":1,\"1876\":5,\"1897\":1,\"1914\":1,\"1919\":1,\"2072\":2,\"2080\":1,\"2099\":1,\"2101\":1,\"2198\":1,\"2342\":2,\"2352\":2,\"2358\":1,\"2372\":3,\"2427\":1,\"2507\":1,\"2524\":2,\"2632\":1,\"2837\":1,\"2849\":1,\"2902\":1,\"2903\":1,\"2905\":2,\"3023\":1,\"3100\":1,\"3102\":1,\"3209\":2,\"3225\":1,\"3245\":2,\"3246\":2,\"3250\":3,\"3271\":2,\"3273\":6}}],[\"doe\",{\"1\":{\"3003\":1,\"3005\":2,\"3007\":3,\"3010\":2}}],[\"doesnt\",{\"1\":{\"125\":1}}],[\"does\",{\"1\":{\"125\":4}}],[\"dowhiledemo\",{\"1\":{\"2130\":1}}],[\"downloaded\",{\"1\":{\"2849\":1}}],[\"download\",{\"1\":{\"996\":1,\"1617\":2,\"1623\":1,\"1635\":2,\"1714\":2,\"1734\":1,\"1738\":1,\"1747\":1,\"1749\":1,\"1755\":1,\"1779\":1,\"1781\":2,\"3100\":1,\"3245\":1,\"3246\":2,\"3248\":1}}],[\"downloadurl\",{\"1\":{\"294\":3}}],[\"downloadzip\",{\"1\":{\"286\":2}}],[\"downloadfile\",{\"1\":{\"286\":1}}],[\"downloadallfiles\",{\"1\":{\"286\":2}}],[\"downloadname\",{\"1\":{\"286\":3}}],[\"downloads\",{\"1\":{\"118\":1,\"1581\":1}}],[\"down\",{\"1\":{\"165\":1,\"178\":1,\"193\":1,\"3262\":1}}],[\"done\",{\"1\":{\"1764\":1,\"3276\":1}}],[\"dotted\",{\"1\":{\"1469\":1}}],[\"dom\",{\"1\":{\"1449\":3,\"1454\":1}}],[\"domainpart\",{\"1\":{\"3212\":5}}],[\"domain\",{\"1\":{\"279\":1,\"1638\":1,\"3212\":5}}],[\"doprocess\",{\"1\":{\"2061\":1}}],[\"dopost\",{\"1\":{\"1431\":1,\"1440\":2,\"1443\":2,\"1444\":2}}],[\"doperiodictask\",{\"1\":{\"1066\":1}}],[\"dos2unix\",{\"1\":{\"1869\":1}}],[\"dos\",{\"1\":{\"1222\":5,\"2845\":5}}],[\"dosomething\",{\"1\":{\"1078\":2,\"2749\":1,\"2824\":1,\"3134\":1}}],[\"doget\",{\"1\":{\"1431\":2,\"1440\":1,\"1443\":1,\"1444\":1}}],[\"dog\",{\"1\":{\"1204\":1,\"1211\":2,\"2077\":3,\"2100\":3,\"2736\":1,\"2740\":1,\"2749\":5,\"2797\":1}}],[\"dointransactionwithoutresult\",{\"1\":{\"354\":1}}],[\"dofilterinternal\",{\"1\":{\"456\":1}}],[\"dofilter\",{\"1\":{\"293\":4,\"456\":1}}],[\"dobefore\",{\"1\":{\"267\":1}}],[\"doublearray\",{\"1\":{\"3024\":2,\"3025\":2}}],[\"doubleadder\",{\"1\":{\"672\":1}}],[\"doublevalue\",{\"1\":{\"2845\":2,\"3025\":1,\"3039\":1}}],[\"double\",{\"1\":{\"125\":1,\"1040\":2,\"1055\":1,\"1205\":3,\"1206\":1,\"1209\":8,\"1222\":1,\"1469\":1,\"2080\":1,\"2099\":1,\"2101\":2,\"2198\":2,\"2216\":1,\"2329\":1,\"2741\":4,\"2742\":12,\"2746\":4,\"2750\":7,\"2766\":1,\"2786\":3,\"2798\":1,\"2808\":4,\"2845\":1,\"3007\":1,\"3024\":2,\"3025\":3,\"3039\":2,\"3244\":1}}],[\"do\",{\"0\":{\"2130\":1},\"1\":{\"125\":2,\"993\":1,\"994\":1,\"1043\":1,\"1179\":1,\"1687\":2,\"2078\":2,\"2130\":1,\"2138\":1,\"2440\":2,\"2544\":2,\"2601\":1,\"2655\":2,\"2809\":1,\"3276\":1}}],[\"doc\",{\"1\":{\"1578\":1,\"1873\":6,\"3273\":4}}],[\"dockfile在线构建\",{\"1\":{\"3246\":1}}],[\"dockfile文件基础镜像使用skywalking\",{\"1\":{\"1548\":1}}],[\"docker技术\",{\"0\":{\"3335\":1}}],[\"docker命令\",{\"0\":{\"3311\":1}}],[\"docker容器间相互访问\",{\"0\":{\"3253\":1}}],[\"docker容器内下载vim\",{\"0\":{\"1790\":1}}],[\"docker指南\",{\"2\":{\"3251\":1}}],[\"dockera安装mysql\",{\"1\":{\"3246\":1}}],[\"dockername\",{\"1\":{\"3246\":1}}],[\"docker介绍\",{\"0\":{\"3245\":1}}],[\"docker镜像拉取与推送\",{\"0\":{\"1799\":1}}],[\"docker镜像导入导出\",{\"0\":{\"1798\":1}}],[\"docker登录\",{\"0\":{\"1797\":1}}],[\"docker常用命令\",{\"0\":{\"1789\":1}}],[\"docker默认的源为国外官方源\",{\"1\":{\"1669\":1}}],[\"docker默认挂载目录是\",{\"1\":{\"1632\":1}}],[\"docker里没有该镜像\",{\"1\":{\"1668\":1}}],[\"docker目录下面的文件到\",{\"1\":{\"1667\":1}}],[\"docker目录文件过大\",{\"1\":{\"1667\":1}}],[\"docker磁盘空间不足\",{\"0\":{\"1667\":1}}],[\"docker系统服务添加安全进程\",{\"1\":{\"1666\":1}}],[\"docker终端目录\",{\"1\":{\"1641\":1}}],[\"dockerd\",{\"1\":{\"1620\":1,\"1752\":1}}],[\"dockerdata\",{\"1\":{\"240\":1,\"242\":3,\"243\":2,\"1578\":1}}],[\"docker下载地址\",{\"1\":{\"1617\":1,\"1749\":1}}],[\"docker内网地址\",{\"1\":{\"1523\":1}}],[\"docker版本必须大于19\",{\"1\":{\"1617\":1,\"1749\":1}}],[\"docker版\",{\"1\":{\"1354\":1}}],[\"docker启动xxl\",{\"0\":{\"1644\":1}}],[\"docker启动nacos\",{\"0\":{\"1643\":1}}],[\"docker启动方法一致\",{\"1\":{\"1350\":1}}],[\"docker启动需要暴露8848\",{\"1\":{\"234\":1}}],[\"dockerfile\",{\"1\":{\"280\":2,\"1551\":1,\"1552\":1,\"1656\":2,\"1711\":2,\"3246\":4}}],[\"dockerhub\",{\"1\":{\"280\":3,\"1656\":2,\"1711\":1}}],[\"dockervolume\",{\"1\":{\"219\":2,\"234\":2,\"1644\":1}}],[\"docker安装部署postgresql\",{\"0\":{\"1602\":1}}],[\"docker安装部署redis\",{\"0\":{\"1597\":1}}],[\"docker安装部署nginx\",{\"0\":{\"1592\":1}}],[\"docker安装部署tomcat\",{\"0\":{\"1587\":1}}],[\"docker安装各软件\",{\"0\":{\"1565\":1,\"1566\":1}}],[\"docker安装skywalking\",{\"0\":{\"1536\":1}}],[\"docker安装seata\",{\"0\":{\"237\":1}}],[\"docker安装elk\",{\"0\":{\"1505\":1}}],[\"docker安装rabbitmq\",{\"0\":{\"252\":1}}],[\"docker安装rocketmq\",{\"0\":{\"246\":1}}],[\"docker安装redis\",{\"0\":{\"217\":1}}],[\"docker安装nacos\",{\"0\":{\"231\":1}}],[\"docker安装nginx\",{\"0\":{\"214\":1}}],[\"docker安装mysql\",{\"0\":{\"224\":1,\"1576\":1}}],[\"docker安装mongo\",{\"0\":{\"220\":1}}],[\"docker\",{\"0\":{\"1567\":1,\"1669\":1,\"1809\":1,\"3247\":1},\"1\":{\"215\":1,\"216\":1,\"218\":1,\"219\":3,\"221\":1,\"222\":1,\"223\":1,\"225\":1,\"226\":1,\"227\":1,\"233\":1,\"234\":2,\"235\":1,\"237\":1,\"238\":1,\"239\":1,\"240\":1,\"241\":2,\"242\":1,\"244\":1,\"245\":1,\"247\":1,\"250\":1,\"253\":1,\"254\":1,\"255\":2,\"256\":2,\"280\":6,\"1353\":1,\"1354\":1,\"1359\":1,\"1364\":1,\"1507\":1,\"1508\":2,\"1512\":1,\"1513\":1,\"1515\":1,\"1516\":1,\"1517\":1,\"1518\":1,\"1520\":3,\"1522\":1,\"1523\":1,\"1526\":5,\"1528\":1,\"1529\":2,\"1530\":3,\"1531\":1,\"1535\":2,\"1552\":1,\"1554\":1,\"1568\":2,\"1569\":4,\"1570\":1,\"1574\":1,\"1577\":2,\"1578\":2,\"1588\":1,\"1589\":1,\"1590\":1,\"1593\":1,\"1594\":1,\"1595\":1,\"1598\":1,\"1599\":1,\"1600\":1,\"1603\":1,\"1604\":1,\"1606\":1,\"1607\":1,\"1610\":16,\"1612\":2,\"1613\":4,\"1614\":1,\"1615\":3,\"1617\":2,\"1618\":1,\"1619\":1,\"1620\":6,\"1621\":2,\"1623\":3,\"1624\":7,\"1630\":3,\"1632\":1,\"1636\":1,\"1641\":9,\"1643\":1,\"1644\":2,\"1646\":2,\"1656\":4,\"1660\":4,\"1665\":1,\"1666\":2,\"1667\":18,\"1669\":1,\"1671\":13,\"1672\":2,\"1673\":4,\"1674\":1,\"1675\":3,\"1711\":8,\"1714\":14,\"1719\":2,\"1741\":14,\"1743\":2,\"1744\":4,\"1745\":1,\"1746\":3,\"1747\":8,\"1749\":1,\"1750\":1,\"1751\":1,\"1752\":6,\"1753\":2,\"1755\":4,\"1756\":5,\"1757\":1,\"1791\":2,\"1792\":2,\"1793\":3,\"1794\":2,\"1795\":5,\"1796\":3,\"1797\":1,\"1798\":5,\"1799\":3,\"1800\":1,\"1801\":2,\"1802\":1,\"1804\":1,\"1805\":1,\"1806\":1,\"1807\":1,\"1809\":1,\"1810\":1,\"1811\":2,\"3245\":28,\"3246\":57,\"3248\":5,\"3249\":1,\"3250\":25,\"3255\":1,\"3256\":6,\"3257\":1,\"3262\":1,\"3271\":8,\"3273\":4},\"2\":{\"3252\":1}}],[\"docker各应用安装\",{\"0\":{\"213\":1}}],[\"docheight\",{\"1\":{\"1443\":2}}],[\"doctype\",{\"1\":{\"439\":1,\"1431\":1,\"1433\":1,\"1434\":1,\"1435\":1,\"1440\":1,\"1447\":1,\"1450\":1,\"1455\":1,\"1456\":1,\"1457\":1,\"1458\":1,\"1459\":1,\"1461\":1,\"1462\":1,\"1463\":1,\"1464\":1,\"1467\":1,\"1469\":1}}],[\"docx\",{\"1\":{\"294\":1}}],[\"docs\",{\"1\":{\"118\":1,\"1527\":2,\"1609\":6,\"1620\":1,\"1752\":1}}],[\"documentpath\",{\"1\":{\"1988\":3}}],[\"documentprocess\",{\"1\":{\"1975\":1}}],[\"documentgenerator\",{\"1\":{\"1987\":1}}],[\"documenttester\",{\"1\":{\"1988\":1}}],[\"documenttool\",{\"1\":{\"1974\":1}}],[\"documenttype\",{\"1\":{\"1961\":1}}],[\"documentnotfoundexception\",{\"1\":{\"1962\":1}}],[\"documentid\",{\"1\":{\"1962\":6}}],[\"documentmanager\",{\"1\":{\"1962\":2}}],[\"documentation=https\",{\"1\":{\"1620\":1,\"1752\":1}}],[\"documentation\",{\"1\":{\"995\":1}}],[\"documented\",{\"1\":{\"267\":1,\"417\":1,\"423\":1,\"1064\":1,\"3135\":2}}],[\"documents\",{\"1\":{\"47\":2,\"48\":3,\"1898\":1}}],[\"document\",{\"1\":{\"37\":1,\"47\":9,\"48\":4,\"49\":11,\"50\":5,\"58\":9,\"68\":1,\"1431\":3,\"1443\":1,\"1447\":1,\"1449\":1,\"1962\":11,\"1975\":5,\"1988\":1}}],[\"determinenexthop\",{\"1\":{\"3212\":1}}],[\"detail\",{\"1\":{\"380\":1}}],[\"details\",{\"1\":{\"281\":1,\"1536\":1,\"1578\":1,\"1642\":1,\"1738\":1,\"1788\":1}}],[\"deepcopydemo\",{\"1\":{\"3007\":1}}],[\"deepcopy\",{\"1\":{\"3007\":7}}],[\"deepcopyutils\",{\"1\":{\"3007\":2}}],[\"deeptostring\",{\"0\":{\"2217\":1},\"1\":{\"2170\":2,\"2217\":2,\"2228\":1,\"2231\":2,\"2233\":1,\"2234\":2}}],[\"deque接口提供了更完整的双端队列操作\",{\"1\":{\"2564\":1}}],[\"dequeue\",{\"1\":{\"2485\":1}}],[\"deque<integer>\",{\"1\":{\"2468\":3}}],[\"deque<string>\",{\"1\":{\"2465\":1,\"2506\":4}}],[\"dequeasstackandqueue\",{\"1\":{\"2468\":1}}],[\"deque\",{\"1\":{\"2468\":8}}],[\"demilitarized\",{\"1\":{\"1940\":1}}],[\"demonstrateruntimeexception\",{\"1\":{\"2927\":1}}],[\"demojobhandler\",{\"1\":{\"1687\":1}}],[\"demo2\",{\"1\":{\"287\":1}}],[\"demo\",{\"1\":{\"267\":1,\"293\":1,\"393\":2,\"404\":1,\"439\":6,\"1056\":3,\"2902\":1,\"2903\":1,\"2986\":4,\"3023\":3,\"3246\":8}}],[\"debug\",{\"1\":{\"1667\":2,\"2070\":1,\"2071\":1,\"3102\":2}}],[\"dejavu的镜像\",{\"1\":{\"1557\":1}}],[\"deposit\",{\"1\":{\"2750\":1}}],[\"depth=1\",{\"1\":{\"1667\":1}}],[\"deployed\",{\"1\":{\"3276\":1}}],[\"deploy\",{\"0\":{\"3289\":1},\"1\":{\"999\":1,\"1000\":1,\"3276\":1}}],[\"deploymentname\",{\"1\":{\"3244\":3}}],[\"deployment\",{\"1\":{\"994\":3,\"1648\":2,\"1649\":2,\"1650\":11,\"1656\":13,\"1660\":2,\"1661\":2,\"1685\":2,\"1688\":2,\"1698\":2,\"1711\":13,\"1713\":12,\"1961\":1,\"3244\":5,\"3276\":5}}],[\"deployments\",{\"1\":{\"280\":8,\"3244\":2}}],[\"deploy等阶段\",{\"1\":{\"940\":1}}],[\"dependent\",{\"1\":{\"1005\":1}}],[\"dependencies\",{\"1\":{\"585\":1}}],[\"dependencies>\",{\"1\":{\"394\":1,\"567\":1,\"584\":1,\"936\":1,\"938\":1,\"954\":1,\"963\":2,\"999\":1,\"1017\":1}}],[\"dependencymanagement>\",{\"1\":{\"567\":1,\"954\":1,\"963\":1,\"1017\":1}}],[\"dependency\",{\"1\":{\"567\":1,\"931\":1,\"944\":1,\"945\":1,\"1020\":3,\"1025\":2,\"2999\":2}}],[\"dependency>\",{\"1\":{\"281\":1,\"307\":1,\"394\":2,\"416\":2,\"428\":1,\"438\":2,\"439\":2,\"440\":2,\"449\":1,\"451\":1,\"456\":1,\"567\":1,\"584\":1,\"711\":1,\"924\":1,\"926\":1,\"928\":1,\"936\":1,\"938\":1,\"953\":1,\"954\":1,\"963\":2,\"1016\":1,\"1017\":1,\"1018\":1,\"1564\":2,\"3097\":1,\"3104\":1}}],[\"depending\",{\"1\":{\"994\":1}}],[\"depends\",{\"1\":{\"250\":2}}],[\"deprecated注解\",{\"1\":{\"566\":1}}],[\"deprecated\",{\"1\":{\"125\":3,\"1063\":1,\"2291\":1,\"2968\":1,\"3136\":2}}],[\"desktop\",{\"1\":{\"1568\":1,\"1574\":1}}],[\"deserializeduser\",{\"1\":{\"1225\":2,\"3085\":2}}],[\"destfile\",{\"1\":{\"2843\":2,\"2856\":2,\"2866\":2,\"2867\":2,\"2880\":2}}],[\"destroysession\",{\"1\":{\"2525\":1}}],[\"destchannel\",{\"1\":{\"1232\":2,\"2915\":2}}],[\"dest\",{\"1\":{\"1232\":1,\"1296\":5,\"1321\":4,\"2681\":3,\"2684\":4,\"2868\":4,\"2880\":1}}],[\"destpath\",{\"1\":{\"1232\":2,\"1321\":3,\"2837\":2,\"2915\":2}}],[\"destdir=\",{\"1\":{\"583\":1}}],[\"destination\",{\"1\":{\"204\":2,\"1734\":2,\"1738\":2,\"1764\":1,\"2833\":1,\"2843\":1,\"2856\":1,\"2915\":1}}],[\"des和3des块密码\",{\"1\":{\"483\":1}}],[\"design\",{\"1\":{\"312\":1,\"1961\":1,\"2047\":1}}],[\"descendingkeyset\",{\"1\":{\"2665\":1}}],[\"descendingiterator\",{\"1\":{\"2498\":3}}],[\"describe\",{\"1\":{\"1634\":1,\"1808\":2}}],[\"description=docker\",{\"1\":{\"1620\":1,\"1752\":1}}],[\"description>\",{\"1\":{\"999\":1}}],[\"description\",{\"1\":{\"284\":1,\"289\":1,\"1068\":2,\"1369\":2,\"1370\":1,\"1371\":1,\"1372\":1,\"1373\":1,\"3097\":2,\"3176\":1}}],[\"desc\",{\"1\":{\"232\":1,\"1462\":2,\"1684\":1,\"3103\":1}}],[\"desc`\",{\"1\":{\"232\":2,\"1684\":2,\"1687\":2}}],[\"declaredmethods\",{\"1\":{\"2983\":2}}],[\"declaredmethod\",{\"1\":{\"2983\":2}}],[\"declareexception\",{\"1\":{\"2079\":1}}],[\"declarations\",{\"1\":{\"125\":1}}],[\"decoder\",{\"1\":{\"2885\":2}}],[\"decode\",{\"1\":{\"1833\":2,\"2885\":1,\"2960\":1}}],[\"decodedjwt\",{\"1\":{\"307\":4}}],[\"decorate\",{\"1\":{\"1535\":1}}],[\"decoratorpatterndemo\",{\"1\":{\"1186\":1}}],[\"decorator\",{\"0\":{\"1186\":1},\"1\":{\"1231\":1}}],[\"decimal\",{\"1\":{\"1040\":1}}],[\"decryption功能\",{\"1\":{\"411\":1}}],[\"decrementandget\",{\"1\":{\"675\":1,\"1326\":3}}],[\"decrement\",{\"1\":{\"200\":1}}],[\"decrby\",{\"1\":{\"200\":1}}],[\"decr\",{\"1\":{\"200\":1}}],[\"derived\",{\"1\":{\"125\":2}}],[\"deadlock\",{\"1\":{\"125\":1}}],[\"delay\",{\"1\":{\"2467\":2}}],[\"delayqueue是一个支持延迟获取元素的无界阻塞队列\",{\"1\":{\"2486\":1}}],[\"delayqueue的实现原理及应用场景\",{\"0\":{\"2486\":1}}],[\"delayqueue<>\",{\"1\":{\"2467\":1}}],[\"delayqueue<delayedtask>\",{\"1\":{\"2467\":1}}],[\"delayqueueexample\",{\"1\":{\"2467\":1}}],[\"delayqueue\",{\"1\":{\"2461\":1,\"2467\":8,\"2588\":1}}],[\"delayed接口定义了getdelay\",{\"1\":{\"2486\":1}}],[\"delayedtask\",{\"1\":{\"2467\":7}}],[\"delayedworkqueue\",{\"1\":{\"634\":1}}],[\"delayed不能与表\",{\"1\":{\"125\":1}}],[\"delayed\",{\"1\":{\"125\":3,\"2467\":3}}],[\"delimiterbasedframedecoder\",{\"1\":{\"3126\":1}}],[\"delimiter\",{\"1\":{\"2228\":2}}],[\"delegatingmethodaccessorimpl\",{\"1\":{\"2987\":1}}],[\"delegate=yes\",{\"1\":{\"1620\":1,\"1752\":1}}],[\"deleteresource\",{\"1\":{\"1656\":1,\"1711\":1}}],[\"deleted\",{\"1\":{\"1527\":1}}],[\"deletebyid\",{\"1\":{\"440\":1}}],[\"delete>\",{\"1\":{\"439\":1}}],[\"delete用于删除资源\",{\"1\":{\"433\":1}}],[\"deleteuser\",{\"1\":{\"381\":2,\"427\":2,\"438\":1,\"439\":2,\"440\":1}}],[\"deletemapping\",{\"1\":{\"381\":1,\"427\":1}}],[\"deletemany\",{\"1\":{\"50\":1,\"54\":1,\"87\":1}}],[\"deletefile\",{\"1\":{\"286\":3}}],[\"deletewhen\",{\"1\":{\"249\":1}}],[\"delete\",{\"1\":{\"125\":3,\"286\":1,\"434\":1,\"438\":1,\"439\":1,\"1634\":1,\"1638\":1,\"1659\":1,\"1675\":1,\"1677\":1,\"2265\":1,\"3164\":3,\"3276\":1,\"3278\":1}}],[\"deleteone\",{\"1\":{\"50\":1,\"87\":1}}],[\"del\",{\"1\":{\"186\":4,\"199\":1}}],[\"denied\",{\"1\":{\"125\":7,\"1528\":1}}],[\"defroute=\",{\"1\":{\"3266\":8}}],[\"defroute=yes\",{\"1\":{\"1918\":2}}],[\"deflated\",{\"1\":{\"286\":1}}],[\"define\",{\"1\":{\"993\":1}}],[\"defineclass\",{\"1\":{\"729\":1,\"746\":1,\"747\":1}}],[\"defined\",{\"1\":{\"125\":4}}],[\"definition\",{\"1\":{\"125\":1,\"2999\":1}}],[\"def\",{\"1\":{\"122\":1,\"125\":3}}],[\"defaults\",{\"1\":{\"3270\":1,\"3275\":1}}],[\"defaultsipmessageprocessor\",{\"1\":{\"3218\":2}}],[\"defaultdnsresolver\",{\"1\":{\"3218\":1}}],[\"defaultroutingtable\",{\"1\":{\"3218\":1}}],[\"defaultrole\",{\"1\":{\"3159\":1}}],[\"default修饰符\",{\"0\":{\"2796\":1}}],[\"defaultclass\",{\"1\":{\"2761\":1}}],[\"defaultcluster\",{\"1\":{\"249\":1}}],[\"defaultcapacity\",{\"1\":{\"2318\":3,\"2433\":1,\"2436\":1,\"2437\":1}}],[\"defaultvar\",{\"1\":{\"2076\":1}}],[\"defaultlimitmemlock=infinity\",{\"1\":{\"1610\":1}}],[\"defaultlimitnproc=32000\",{\"1\":{\"1610\":1}}],[\"defaultlimitnofile=65536\",{\"1\":{\"1610\":1}}],[\"defaultthreadfactory\",{\"1\":{\"625\":1,\"3240\":1}}],[\"default=\",{\"1\":{\"583\":1}}],[\"defaultmethod\",{\"1\":{\"541\":2,\"575\":1,\"2983\":1}}],[\"default\",{\"1\":{\"122\":1,\"125\":6,\"216\":1,\"232\":66,\"255\":2,\"541\":3,\"544\":1,\"575\":2,\"940\":1,\"1068\":3,\"1069\":2,\"1181\":2,\"1384\":6,\"1385\":1,\"1417\":1,\"1478\":3,\"1484\":1,\"1495\":1,\"1513\":1,\"1517\":1,\"1520\":1,\"1530\":1,\"1570\":1,\"1573\":1,\"1575\":1,\"1595\":1,\"1640\":2,\"1648\":1,\"1649\":1,\"1650\":10,\"1661\":3,\"1684\":66,\"1685\":1,\"1687\":47,\"1688\":1,\"1698\":3,\"1713\":11,\"1771\":1,\"1822\":2,\"1825\":4,\"1831\":4,\"1940\":1,\"1999\":1,\"2062\":2,\"2076\":1,\"2078\":1,\"2126\":1,\"2161\":2,\"2288\":1,\"2318\":2,\"2419\":1,\"2433\":1,\"2437\":1,\"2601\":4,\"2780\":1,\"2792\":1,\"2794\":1,\"2809\":2,\"3002\":3,\"3003\":7,\"3005\":1,\"3134\":3,\"3137\":1,\"3141\":1,\"3145\":1,\"3154\":1,\"3159\":1,\"3170\":4,\"3276\":1}}],[\"dev3\",{\"1\":{\"1688\":5}}],[\"dev2\",{\"1\":{\"1641\":2,\"1685\":4,\"1698\":2,\"1711\":15,\"1713\":35,\"1799\":2}}],[\"devel\",{\"1\":{\"1476\":2,\"1481\":1,\"1482\":1,\"1483\":2,\"1486\":3,\"1498\":2,\"1499\":2,\"1765\":1,\"1779\":3}}],[\"develop\",{\"1\":{\"2020\":2}}],[\"developerconnection>\",{\"1\":{\"999\":1}}],[\"developers>\",{\"1\":{\"999\":1}}],[\"developer>\",{\"1\":{\"999\":1}}],[\"development\",{\"1\":{\"312\":1,\"1961\":1}}],[\"device=\",{\"1\":{\"3266\":4}}],[\"device=enp2s1\",{\"1\":{\"1918\":1}}],[\"device\",{\"1\":{\"1212\":5,\"3245\":1}}],[\"devops流水线默认是关闭的\",{\"1\":{\"1677\":1}}],[\"devops\",{\"0\":{\"1650\":1,\"1652\":1,\"1700\":1},\"1\":{\"270\":1,\"280\":3,\"1548\":4,\"1638\":1,\"1648\":4,\"1649\":4,\"1650\":177,\"1656\":2,\"1661\":9,\"1685\":1,\"1697\":3,\"1698\":8,\"1711\":2,\"1712\":1,\"1713\":170,\"1808\":1,\"1890\":1,\"1895\":2,\"1897\":2}}],[\"dev\",{\"1\":{\"118\":1,\"280\":1,\"406\":2,\"1500\":3,\"1548\":1,\"1578\":1,\"1656\":1,\"1661\":1,\"1697\":1,\"1698\":1,\"1711\":17,\"1844\":1,\"1886\":1,\"3246\":1,\"3270\":1,\"3275\":2}}],[\"dig\",{\"1\":{\"3282\":2}}],[\"digestauthenticationhandler\",{\"1\":{\"3238\":1}}],[\"digestauthenticator\",{\"1\":{\"3215\":2}}],[\"digest认证处理器\",{\"1\":{\"3238\":1}}],[\"digest认证\",{\"1\":{\"3238\":1}}],[\"digest认证实现示例\",{\"1\":{\"3215\":1}}],[\"digest\",{\"1\":{\"3215\":4}}],[\"digestutils\",{\"1\":{\"307\":1}}],[\"did\",{\"1\":{\"1677\":1}}],[\"did`\",{\"1\":{\"232\":1,\"1684\":1}}],[\"div3\",{\"1\":{\"1458\":2}}],[\"div4\",{\"1\":{\"1458\":2}}],[\"div2\",{\"1\":{\"1458\":2}}],[\"divs5\",{\"1\":{\"1458\":4}}],[\"divs4\",{\"1\":{\"1458\":4}}],[\"divs3\",{\"1\":{\"1458\":4}}],[\"divs2\",{\"1\":{\"1458\":4}}],[\"divs1\",{\"1\":{\"1458\":2}}],[\"divs\",{\"1\":{\"1455\":2}}],[\"div1\",{\"1\":{\"1455\":4,\"1458\":2}}],[\"div\",{\"1\":{\"1447\":3,\"1449\":2,\"1452\":5,\"1455\":1,\"1456\":4,\"1458\":8,\"1461\":4,\"1462\":2,\"1463\":6,\"2109\":1}}],[\"div>\",{\"1\":{\"1440\":3,\"1443\":1,\"1444\":1,\"1447\":1,\"1455\":3,\"1456\":2,\"1458\":4,\"1461\":1,\"1462\":1,\"1463\":1,\"1469\":2}}],[\"division\",{\"1\":{\"125\":1,\"2909\":1}}],[\"dialogid\",{\"1\":{\"3209\":6,\"3223\":3}}],[\"dialoginfo\",{\"1\":{\"3209\":26,\"3223\":7}}],[\"dialoginfo>\",{\"1\":{\"3209\":1}}],[\"dialogmanager\",{\"1\":{\"3209\":1,\"3218\":3}}],[\"dialogstate\",{\"1\":{\"3209\":6,\"3223\":1}}],[\"dialogs\",{\"1\":{\"3208\":3,\"3223\":2}}],[\"dialog>\",{\"1\":{\"3208\":1}}],[\"dialog\",{\"1\":{\"3208\":12,\"3209\":10,\"3223\":1}}],[\"dialogterminatedevent\",{\"1\":{\"1094\":2,\"3190\":2}}],[\"diagnostic\",{\"1\":{\"1087\":3}}],[\"dincludes=conflicting\",{\"1\":{\"1020\":1}}],[\"di\",{\"1\":{\"317\":1,\"319\":1}}],[\"dict\",{\"1\":{\"157\":1}}],[\"difference\",{\"1\":{\"2372\":2}}],[\"different\",{\"1\":{\"125\":1}}],[\"diff\",{\"1\":{\"125\":1,\"1866\":1}}],[\"dirname\",{\"1\":{\"1898\":1}}],[\"dir修改是否已经生效\",{\"1\":{\"1667\":1}}],[\"directbytebuffer\",{\"1\":{\"3091\":1}}],[\"directory\",{\"0\":{\"1667\":1},\"1\":{\"1677\":1,\"1735\":2}}],[\"directtime\",{\"1\":{\"1264\":2,\"2986\":2}}],[\"dirs=\",{\"1\":{\"1530\":1}}],[\"dir=\",{\"1\":{\"583\":1}}],[\"dir\",{\"1\":{\"125\":2,\"1667\":1}}],[\"dir目录下修改\",{\"1\":{\"116\":1}}],[\"dir目录下生成以下pem文件\",{\"1\":{\"115\":1}}],[\"disruptor<>\",{\"1\":{\"3240\":1}}],[\"disruptor<sipmessageevent>\",{\"1\":{\"3240\":1}}],[\"disruptor\",{\"1\":{\"3240\":3}}],[\"disabling\",{\"1\":{\"1578\":1}}],[\"disable\",{\"1\":{\"456\":1,\"1585\":1,\"1610\":1,\"1672\":1,\"1788\":1,\"1937\":1,\"3268\":1}}],[\"disabled>\",{\"1\":{\"1459\":1}}],[\"disabled\",{\"1\":{\"125\":1,\"1459\":2,\"1460\":1,\"1469\":2,\"1470\":2,\"1788\":1}}],[\"discovery\",{\"1\":{\"1512\":1,\"1560\":2}}],[\"discardoldestpolicy\",{\"1\":{\"634\":1}}],[\"discardpolicy\",{\"1\":{\"634\":1}}],[\"discard\",{\"1\":{\"206\":1}}],[\"dis\",{\"1\":{\"1222\":5,\"2845\":5}}],[\"distribution\",{\"1\":{\"2020\":1}}],[\"distributionmanagement>\",{\"1\":{\"999\":1}}],[\"distributed\",{\"1\":{\"1578\":1}}],[\"distinctset\",{\"1\":{\"2369\":1}}],[\"distinct\",{\"1\":{\"60\":2,\"89\":1}}],[\"disjunction\",{\"1\":{\"281\":3}}],[\"display\",{\"1\":{\"1206\":1,\"1440\":1,\"1469\":1}}],[\"displaywidth\",{\"1\":{\"125\":1}}],[\"dispatcherservlet\",{\"1\":{\"377\":1}}],[\"disposition\",{\"1\":{\"269\":1,\"286\":2}}],[\"disk\",{\"1\":{\"125\":1,\"1788\":1,\"3264\":4,\"3275\":2}}],[\"dissolved\",{\"1\":{\"122\":1}}],[\"dapper论文设计\",{\"1\":{\"3104\":1}}],[\"dao\",{\"1\":{\"2763\":1}}],[\"dav\",{\"1\":{\"1779\":1}}],[\"david\",{\"1\":{\"543\":1,\"2167\":1,\"2217\":2}}],[\"daemonize\",{\"1\":{\"1788\":1}}],[\"daemon\",{\"1\":{\"1369\":1,\"1370\":1,\"1503\":2,\"1569\":1,\"1615\":2,\"1620\":1,\"1621\":2,\"1666\":1,\"1667\":1,\"1669\":1,\"1675\":2,\"1746\":2,\"1752\":1,\"1753\":2,\"1803\":1}}],[\"dagger等框架的核心实现方式\",{\"1\":{\"3147\":1}}],[\"dagger\",{\"1\":{\"1073\":1}}],[\"day`\",{\"1\":{\"1687\":3}}],[\"dayofweek\",{\"1\":{\"1066\":3}}],[\"day\",{\"1\":{\"307\":3,\"545\":1,\"2819\":4,\"2820\":4}}],[\"days\",{\"1\":{\"113\":3,\"545\":1}}],[\"dat\",{\"1\":{\"1238\":1,\"1321\":2,\"2845\":1,\"2866\":2,\"2868\":3}}],[\"datefield\",{\"1\":{\"279\":2}}],[\"date\",{\"1\":{\"279\":2,\"286\":6,\"307\":3,\"456\":1,\"566\":4,\"1224\":5,\"1225\":4,\"1513\":1,\"1535\":1,\"1563\":1,\"2765\":3,\"2768\":1,\"2779\":5,\"2905\":3,\"3165\":2,\"3209\":4}}],[\"datetimeformatter\",{\"1\":{\"545\":3}}],[\"datetime\",{\"1\":{\"125\":1,\"232\":13,\"279\":3,\"1684\":13,\"1687\":11}}],[\"datum\",{\"1\":{\"232\":1,\"1684\":1}}],[\"dataaccessexception\",{\"1\":{\"2952\":1}}],[\"dataaccessoperation\",{\"1\":{\"2937\":2}}],[\"datagramsocket\",{\"1\":{\"3066\":6}}],[\"datagrampacket\",{\"1\":{\"3066\":6}}],[\"datagramchannel\",{\"1\":{\"2915\":1,\"3117\":1}}],[\"datagrouptenanttag`\",{\"1\":{\"232\":1,\"1684\":1}}],[\"datagrouptenantdatum`\",{\"1\":{\"232\":1,\"1684\":1}}],[\"datagrouptenant`\",{\"1\":{\"232\":2,\"1684\":2}}],[\"data2\",{\"1\":{\"2891\":2}}],[\"data1\",{\"1\":{\"2891\":2}}],[\"datalist\",{\"1\":{\"2281\":2}}],[\"datalog\",{\"1\":{\"1529\":2,\"1535\":2}}],[\"data里\",{\"1\":{\"1877\":1}}],[\"datafile\",{\"1\":{\"1573\":1,\"1833\":1}}],[\"databind\",{\"1\":{\"1443\":1,\"1444\":1}}],[\"databases\",{\"1\":{\"122\":1,\"123\":1,\"3282\":1}}],[\"databasename\",{\"1\":{\"80\":1,\"81\":2}}],[\"database\",{\"0\":{\"3285\":1},\"1\":{\"37\":1,\"122\":1,\"125\":2,\"235\":1,\"1569\":1,\"1640\":1,\"1825\":3,\"1833\":1,\"3282\":1}}],[\"datatype\",{\"1\":{\"1435\":2,\"1436\":1,\"1440\":1,\"1443\":1,\"1444\":1}}],[\"datainputstream和dataoutputstream允许读取和写入基本java数据类型\",{\"1\":{\"2845\":1}}],[\"datainputstream等都是装饰器模式的应用\",{\"1\":{\"1333\":1}}],[\"datainputstream\",{\"1\":{\"1222\":2,\"2845\":3}}],[\"dataoutputstream\",{\"1\":{\"1222\":2,\"2845\":3}}],[\"dataqualityruleresultdocument\",{\"1\":{\"288\":1}}],[\"dataqualityruleresultdocumentlist\",{\"1\":{\"288\":4}}],[\"datastreamexample\",{\"1\":{\"2845\":1}}],[\"datastreamsupplier\",{\"1\":{\"269\":3}}],[\"datasourcebuilder\",{\"1\":{\"438\":1,\"445\":2}}],[\"datasourceproperties\",{\"1\":{\"407\":1}}],[\"datasourceconfig\",{\"1\":{\"367\":1,\"438\":1,\"445\":1}}],[\"datasourcetransactionmanager\",{\"1\":{\"353\":1}}],[\"datasource\",{\"1\":{\"235\":1,\"353\":5,\"367\":11,\"368\":3,\"369\":1,\"403\":3,\"404\":1,\"406\":2,\"407\":1,\"438\":3,\"445\":14,\"1643\":1,\"1644\":7,\"1648\":1,\"1685\":1}}],[\"datadir=\",{\"1\":{\"1577\":1,\"1578\":1}}],[\"datadir\",{\"1\":{\"119\":1,\"1578\":1}}],[\"data数据存放路径\",{\"1\":{\"119\":1}}],[\"data\",{\"0\":{\"3050\":1},\"1\":{\"38\":1,\"115\":1,\"122\":1,\"125\":14,\"166\":1,\"173\":1,\"219\":2,\"232\":5,\"270\":1,\"286\":6,\"289\":1,\"440\":2,\"471\":2,\"1073\":1,\"1222\":1,\"1224\":5,\"1228\":3,\"1235\":2,\"1238\":4,\"1287\":6,\"1325\":2,\"1336\":4,\"1338\":4,\"1389\":4,\"1390\":1,\"1393\":3,\"1433\":4,\"1434\":4,\"1435\":4,\"1436\":2,\"1440\":3,\"1443\":5,\"1444\":1,\"1503\":4,\"1504\":3,\"1509\":2,\"1510\":6,\"1511\":1,\"1512\":5,\"1517\":1,\"1518\":1,\"1523\":3,\"1524\":1,\"1526\":6,\"1529\":5,\"1530\":4,\"1535\":7,\"1560\":1,\"1569\":4,\"1573\":1,\"1577\":2,\"1578\":3,\"1586\":1,\"1605\":2,\"1606\":3,\"1626\":4,\"1644\":4,\"1648\":1,\"1684\":5,\"1685\":1,\"1693\":1,\"1715\":4,\"1734\":4,\"1738\":1,\"1739\":1,\"1764\":1,\"1788\":1,\"1828\":1,\"1831\":3,\"1833\":2,\"1877\":2,\"1882\":1,\"2281\":2,\"2832\":2,\"2845\":2,\"2868\":2,\"2891\":3,\"2914\":2,\"2916\":4,\"2917\":3,\"2921\":4,\"2927\":4,\"3019\":5,\"3050\":2,\"3066\":3,\"3079\":3,\"3085\":3,\"3116\":2,\"3118\":4,\"3120\":4,\"3245\":1,\"3246\":2,\"3262\":3,\"3263\":2,\"3271\":4,\"3273\":2}}],[\"db89\",{\"1\":{\"3278\":3}}],[\"dbname\",{\"1\":{\"1823\":2}}],[\"dbpath\",{\"1\":{\"1734\":2,\"1764\":1}}],[\"dbpath=e\",{\"1\":{\"1763\":2}}],[\"dbpath=\",{\"1\":{\"1734\":1,\"1764\":1}}],[\"dbf\",{\"1\":{\"1573\":1,\"1833\":1}}],[\"db继续向下执行\",{\"1\":{\"153\":1}}],[\"db用于记录activeexpirecycle\",{\"1\":{\"153\":1}}],[\"dbadminanydatabase\",{\"1\":{\"1736\":1}}],[\"dbadmin\",{\"1\":{\"1736\":1}}],[\"dbaccess\",{\"1\":{\"125\":1}}],[\"dba\",{\"1\":{\"115\":1,\"1573\":2,\"1575\":1,\"1833\":3}}],[\"db\",{\"1\":{\"80\":3,\"81\":5,\"82\":4,\"84\":2,\"85\":6,\"86\":3,\"87\":2,\"89\":4,\"90\":5,\"91\":1,\"122\":1,\"125\":11,\"157\":2,\"223\":3,\"235\":7,\"1421\":1,\"1422\":1,\"1423\":1,\"1643\":1,\"1648\":2,\"1649\":1,\"1685\":2,\"1688\":1,\"1734\":4,\"1736\":3,\"1737\":5,\"1739\":2,\"1763\":3,\"1764\":5,\"1814\":2,\"1833\":1,\"1834\":1,\"2051\":1}}],[\"dbsize\",{\"1\":{\"198\":1}}],[\"dbs\",{\"1\":{\"80\":1}}],[\"s`\",{\"1\":{\"3248\":1}}],[\"s余额不足\",{\"1\":{\"2947\":1}}],[\"s8\",{\"1\":{\"2304\":2}}],[\"s7\",{\"1\":{\"2304\":2}}],[\"s6\",{\"1\":{\"2304\":2}}],[\"s5\",{\"1\":{\"2245\":2,\"2304\":2}}],[\"s开头\",{\"1\":{\"2051\":1}}],[\"svc\",{\"1\":{\"1560\":1,\"1638\":1,\"3273\":1,\"3282\":4}}],[\"skywalking接入示例\",{\"1\":{\"3104\":1}}],[\"skywalking<\",{\"1\":{\"1564\":2}}],[\"skywalking属于懒加载\",{\"1\":{\"1562\":1}}],[\"skywalking操作说明\",{\"0\":{\"1561\":1}}],[\"skywalking官方提供的agent镜像中jdk采用的是openjdk\",{\"1\":{\"1557\":1}}],[\"skywalking才会加载数据\",{\"1\":{\"1547\":1}}],[\"skywalking懒加载\",{\"1\":{\"1547\":1}}],[\"skywalking由三个部分组成\",{\"0\":{\"1537\":1}}],[\"skywalking\",{\"1\":{\"1536\":4,\"1537\":3,\"1538\":2,\"1546\":1,\"1548\":2,\"1551\":12,\"1552\":1,\"1555\":1,\"1561\":1,\"1564\":6,\"3104\":2}}],[\"skywalking跟es版本需要适配\",{\"1\":{\"1536\":1}}],[\"skywalking应用实战\",{\"1\":{\"1536\":1}}],[\"skywalking详细解读参考\",{\"1\":{\"1536\":1}}],[\"skiplistset\",{\"1\":{\"2373\":1}}],[\"skip=true参数跳过测试阶段\",{\"1\":{\"950\":1}}],[\"skip=true\",{\"1\":{\"280\":1,\"950\":1,\"1656\":1,\"1711\":1}}],[\"skip\",{\"0\":{\"1665\":1},\"1\":{\"48\":1,\"85\":1,\"112\":1,\"125\":3,\"1578\":1,\"2841\":1,\"2849\":1,\"2853\":1}}],[\"sz\",{\"1\":{\"1462\":1,\"1884\":1,\"1898\":1}}],[\"squash\",{\"1\":{\"3275\":1}}],[\"square\",{\"1\":{\"2745\":1}}],[\"squid2\",{\"1\":{\"1408\":1}}],[\"squid1\",{\"1\":{\"1408\":1}}],[\"sq9p56f6\",{\"1\":{\"1621\":1,\"1666\":1,\"1669\":1,\"1753\":1}}],[\"sqlexception\",{\"1\":{\"2935\":2,\"2937\":3,\"2952\":1}}],[\"sql注入防护\",{\"0\":{\"2066\":1}}],[\"sql导库\",{\"0\":{\"1825\":1}}],[\"sql文件路径\",{\"1\":{\"1640\":1,\"1825\":1}}],[\"sql文件导入\",{\"0\":{\"1640\":1}}],[\"sql或navicat等工具测试连接oracle\",{\"1\":{\"1571\":1}}],[\"sql或reads\",{\"1\":{\"125\":2}}],[\"sql>exit\",{\"1\":{\"1574\":1}}],[\"sql>startup\",{\"1\":{\"1574\":1}}],[\"sql>shutdown\",{\"1\":{\"1574\":1}}],[\"sql>\",{\"1\":{\"1570\":2}}],[\"sqlplus\",{\"1\":{\"1570\":1,\"1574\":1}}],[\"sqlsessionfactorybean\",{\"1\":{\"368\":2}}],[\"sqlsessionfactory\",{\"1\":{\"368\":2}}],[\"sqlstate\",{\"1\":{\"125\":496}}],[\"sql线程未启动\",{\"1\":{\"125\":1}}],[\"sql\",{\"1\":{\"112\":2,\"113\":1,\"125\":7,\"1441\":1,\"2066\":2,\"3005\":4}}],[\"s代表1秒一个请求\",{\"1\":{\"1395\":1}}],[\"snake\",{\"1\":{\"1999\":1}}],[\"snapshotrepository>\",{\"1\":{\"999\":1}}],[\"snapshots\",{\"1\":{\"1000\":1,\"1788\":1}}],[\"snapshots<\",{\"1\":{\"999\":1}}],[\"snapshots>\",{\"1\":{\"984\":1,\"985\":1}}],[\"snapshot\",{\"1\":{\"994\":1,\"1513\":1,\"1687\":1,\"1895\":1,\"1896\":1,\"1897\":1,\"3246\":2}}],[\"snapshot<\",{\"1\":{\"584\":1,\"999\":1}}],[\"snmp\",{\"1\":{\"1735\":2,\"1738\":1}}],[\"snf\",{\"1\":{\"1548\":1,\"1697\":1}}],[\"sndbuf\",{\"1\":{\"1347\":1,\"3091\":1}}],[\"sda\",{\"1\":{\"3275\":1}}],[\"sdf\",{\"1\":{\"2765\":2}}],[\"sdb\",{\"1\":{\"1500\":1,\"3275\":8,\"3276\":2,\"3278\":1}}],[\"sdb格式化新添加的磁盘\",{\"1\":{\"1500\":1}}],[\"sdb就是新增加的磁盘\",{\"1\":{\"1500\":1}}],[\"sdp应答\",{\"1\":{\"3232\":1}}],[\"sdpdescription\",{\"1\":{\"3232\":2}}],[\"sdp解析逻辑实现\",{\"1\":{\"3205\":1}}],[\"sdpinfo\",{\"1\":{\"3205\":14}}],[\"sdp字符串\",{\"1\":{\"3205\":1}}],[\"sdpcontent\",{\"1\":{\"3205\":4,\"3209\":2}}],[\"sdp\",{\"1\":{\"1092\":2,\"1094\":1,\"3176\":1,\"3180\":1,\"3190\":11,\"3205\":1,\"3208\":1,\"3220\":1,\"3232\":2}}],[\"sdiff\",{\"1\":{\"203\":1}}],[\"sbtime\",{\"1\":{\"2276\":2}}],[\"sbin等文件夹\",{\"1\":{\"1779\":1}}],[\"sbin\",{\"1\":{\"1384\":1,\"1416\":1,\"1779\":1,\"1875\":1,\"1876\":1}}],[\"sbftime\",{\"1\":{\"2276\":2}}],[\"sbf\",{\"1\":{\"1041\":2,\"2276\":2}}],[\"sb\",{\"1\":{\"1041\":3,\"1056\":3,\"1058\":6,\"1151\":3,\"2202\":3,\"2228\":5,\"2234\":6,\"2265\":15,\"2271\":8,\"2276\":2,\"2278\":2,\"2279\":5,\"2280\":6,\"2723\":3,\"3215\":3}}],[\"s4指向常量池对象\",{\"1\":{\"2189\":1}}],[\"s4\",{\"1\":{\"1041\":2,\"2189\":2,\"2197\":1,\"2245\":2,\"2246\":2,\"2248\":3,\"2249\":2,\"2303\":2,\"2304\":2}}],[\"s3在堆内存\",{\"1\":{\"2189\":1}}],[\"s3是堆中对象\",{\"1\":{\"1041\":1}}],[\"s3\",{\"1\":{\"1041\":2,\"2189\":3,\"2191\":1,\"2197\":1,\"2245\":4,\"2246\":3,\"2248\":5,\"2249\":2,\"2303\":3,\"2304\":4}}],[\"s2第一个唯一字符索引\",{\"1\":{\"1166\":1}}],[\"s2是否为回文\",{\"1\":{\"1165\":1}}],[\"s2\",{\"1\":{\"1041\":2,\"1165\":2,\"1166\":2,\"1270\":2,\"2189\":2,\"2191\":2,\"2197\":3,\"2204\":4,\"2243\":2,\"2245\":3,\"2246\":2,\"2248\":3,\"2249\":4,\"2303\":2,\"2304\":2,\"2371\":2,\"2660\":4,\"2890\":1}}],[\"s1第一个唯一字符索引\",{\"1\":{\"1166\":1}}],[\"s1是否为回文\",{\"1\":{\"1165\":1}}],[\"s1\",{\"1\":{\"1041\":4,\"1165\":2,\"1166\":2,\"1270\":2,\"2189\":4,\"2197\":3,\"2204\":3,\"2243\":2,\"2245\":4,\"2248\":5,\"2249\":2,\"2303\":4,\"2304\":2,\"2371\":2,\"2660\":4,\"2890\":1}}],[\"s1=8\",{\"1\":{\"717\":1}}],[\"ssthresh\",{\"1\":{\"3075\":1}}],[\"ss直接读\",{\"1\":{\"1880\":1}}],[\"sss\",{\"1\":{\"1535\":1,\"1564\":2,\"2072\":1,\"3102\":1}}],[\"ss\",{\"0\":{\"1880\":1},\"1\":{\"1535\":1,\"1564\":2,\"1835\":1,\"1880\":8,\"2072\":1,\"3102\":1,\"3282\":1}}],[\"ssh端口\",{\"1\":{\"1865\":1}}],[\"ssh权限为700\",{\"1\":{\"1841\":1}}],[\"sshkey\",{\"0\":{\"1841\":1},\"1\":{\"1835\":1}}],[\"ssh\",{\"1\":{\"999\":1,\"1501\":1,\"1502\":2,\"1841\":2}}],[\"sslcontext\",{\"1\":{\"3214\":11,\"3237\":6}}],[\"ssl密钥文件在从节点不存在\",{\"1\":{\"1677\":1}}],[\"sslsocketfactory\",{\"1\":{\"1644\":1}}],[\"ssl连接错误\",{\"1\":{\"125\":1}}],[\"ssl的配置与启用\",{\"0\":{\"115\":1}}],[\"ssl协议提供的功能主要有\",{\"1\":{\"114\":1}}],[\"ssl\",{\"0\":{\"1664\":1},\"1\":{\"114\":1,\"115\":10,\"116\":2,\"125\":2,\"1352\":1,\"1416\":1,\"1417\":3,\"1560\":1,\"1644\":1,\"1677\":16,\"1779\":1,\"3206\":3,\"3214\":5}}],[\"s0001\",{\"1\":{\"2051\":1}}],[\"s0002\",{\"1\":{\"2050\":1,\"2051\":1}}],[\"s01\",{\"1\":{\"994\":1,\"999\":3,\"1000\":1,\"1003\":1,\"1004\":1}}],[\"s0\",{\"1\":{\"717\":1}}],[\"swarm会帮我们创建一个容器运行起来\",{\"1\":{\"3250\":1}}],[\"swarm\",{\"1\":{\"3250\":8}}],[\"swagger等\",{\"1\":{\"1984\":1}}],[\"swappiness=0\",{\"1\":{\"1610\":2}}],[\"swapped\",{\"1\":{\"1161\":3,\"2709\":3}}],[\"swapoff\",{\"1\":{\"1610\":1,\"1672\":1,\"3270\":1}}],[\"swap\",{\"1\":{\"663\":1,\"671\":1,\"1295\":3,\"1610\":1,\"1672\":1,\"1882\":1,\"1885\":1,\"2485\":1,\"2707\":1,\"3270\":3,\"3275\":1}}],[\"swpd\",{\"1\":{\"1887\":2}}],[\"sw\",{\"1\":{\"1542\":2,\"1546\":1,\"1548\":2,\"1555\":1,\"2857\":4}}],[\"swim\",{\"1\":{\"1211\":6}}],[\"switch穿透\",{\"1\":{\"2813\":1}}],[\"switchcasedemo\",{\"1\":{\"2126\":1}}],[\"switchable\",{\"1\":{\"1212\":4}}],[\"switch表达式\",{\"1\":{\"2062\":1}}],[\"switch表达式增强\",{\"1\":{\"1059\":1}}],[\"switch表达式预览\",{\"1\":{\"1059\":1}}],[\"switch\",{\"0\":{\"2062\":1,\"2126\":1},\"1\":{\"292\":1,\"1212\":4,\"2062\":2,\"2078\":2,\"2126\":1,\"2137\":1,\"2809\":3,\"2822\":1}}],[\"sweep\",{\"0\":{\"764\":1},\"1\":{\"770\":1}}],[\"s=sip\",{\"1\":{\"3190\":1}}],[\"s=session\",{\"1\":{\"1092\":1}}],[\"s=\",{\"1\":{\"3180\":1,\"3205\":1}}],[\"s=睡眠\",{\"1\":{\"1882\":1}}],[\"s=json\",{\"1\":{\"285\":1}}],[\"s=$1\",{\"1\":{\"216\":1}}],[\"s事件\",{\"1\":{\"125\":1}}],[\"s分别代表数值和字符串\",{\"1\":{\"125\":1}}],[\"s分区\",{\"1\":{\"125\":1}}],[\"s需要包含所有文件\",{\"1\":{\"125\":1}}],[\"saturation\",{\"1\":{\"3109\":1}}],[\"saturday\",{\"1\":{\"2818\":1}}],[\"saving\",{\"1\":{\"2999\":2}}],[\"savesession\",{\"1\":{\"3235\":1}}],[\"savedownloadposition\",{\"1\":{\"2849\":2}}],[\"savedocument\",{\"1\":{\"1962\":1}}],[\"saveuser\",{\"1\":{\"324\":1,\"325\":1,\"326\":1,\"352\":1,\"354\":1,\"366\":1,\"381\":1,\"1948\":1,\"1949\":1,\"2999\":2}}],[\"save\",{\"1\":{\"138\":1,\"171\":1,\"193\":2,\"207\":1,\"324\":1,\"325\":1,\"326\":1,\"352\":1,\"354\":1,\"434\":1,\"440\":2,\"441\":2,\"1208\":2,\"1507\":1,\"1641\":1,\"1788\":1,\"1798\":1,\"1949\":1,\"2068\":1,\"2999\":2,\"3049\":2,\"3050\":1,\"3160\":1,\"3246\":2}}],[\"save指令的执行会阻塞当前redis服务器\",{\"1\":{\"138\":1}}],[\"sar命令在这里用于查看tcp连接状态\",{\"1\":{\"1886\":1}}],[\"sar命令在这里可以查看网络设备的吞吐率\",{\"1\":{\"1886\":1}}],[\"sar\",{\"0\":{\"1886\":1},\"1\":{\"1835\":1,\"1886\":2}}],[\"salve\",{\"1\":{\"1764\":1}}],[\"saslcontinue\",{\"1\":{\"1738\":1}}],[\"saslstart\",{\"1\":{\"1738\":1}}],[\"sasl\",{\"1\":{\"1738\":3}}],[\"sa\",{\"1\":{\"1643\":1}}],[\"sayhello\",{\"1\":{\"479\":2}}],[\"sadd\",{\"1\":{\"203\":1}}],[\"sampler\",{\"1\":{\"3104\":1}}],[\"sampler插件可监控网络i\",{\"1\":{\"3096\":1}}],[\"sample\",{\"1\":{\"1632\":1,\"1633\":3,\"1634\":1,\"1637\":4,\"1638\":3,\"1658\":1,\"1659\":1,\"1669\":1,\"1675\":1,\"1677\":5,\"1687\":1}}],[\"samples\",{\"1\":{\"157\":1}}],[\"same\",{\"1\":{\"125\":2}}],[\"safevarargs\",{\"1\":{\"3136\":1}}],[\"safevalue\",{\"1\":{\"2419\":1}}],[\"safeinvoke\",{\"1\":{\"2993\":1}}],[\"safemap\",{\"1\":{\"2692\":1}}],[\"safepq\",{\"1\":{\"2586\":1}}],[\"safequeue3\",{\"1\":{\"2478\":1}}],[\"safequeue2\",{\"1\":{\"2478\":1}}],[\"safequeue1\",{\"1\":{\"2478\":1}}],[\"safebuffer\",{\"1\":{\"2269\":3}}],[\"safelist\",{\"1\":{\"1186\":3}}],[\"safe\",{\"1\":{\"125\":1,\"1041\":1,\"2279\":1}}],[\"s函数返回了错误类型\",{\"1\":{\"125\":1}}],[\"s定义器的视图\",{\"1\":{\"125\":1}}],[\"s没有定义人信息\",{\"1\":{\"125\":1}}],[\"s上执行操作\",{\"1\":{\"125\":1}}],[\"s上执行查询时出错\",{\"1\":{\"125\":1}}],[\"s字段溢出\",{\"1\":{\"125\":1}}],[\"s字符串\",{\"1\":{\"125\":1}}],[\"scenario\",{\"1\":{\"2046\":1}}],[\"scp\",{\"0\":{\"1865\":1},\"1\":{\"1835\":1,\"1865\":1,\"1920\":2}}],[\"scripts\",{\"1\":{\"1918\":1,\"3266\":8}}],[\"script>\",{\"1\":{\"1431\":1,\"1433\":2,\"1434\":2,\"1435\":2,\"1440\":2,\"1443\":1,\"1444\":1,\"1447\":2,\"1450\":2,\"1455\":2,\"1456\":2,\"1457\":2,\"1458\":2,\"1459\":2,\"1461\":2,\"1462\":2,\"1463\":2,\"1464\":2,\"1467\":2,\"1469\":2}}],[\"scrolltop\",{\"1\":{\"1443\":3}}],[\"scroll\",{\"1\":{\"1443\":1}}],[\"scgi相关参数文件\",{\"1\":{\"1384\":1}}],[\"scgi\",{\"1\":{\"1384\":3}}],[\"sc\",{\"1\":{\"997\":1,\"3276\":1}}],[\"scm>\",{\"1\":{\"999\":1}}],[\"scm\",{\"1\":{\"992\":1}}],[\"sched\",{\"1\":{\"1882\":1}}],[\"scheduler\",{\"1\":{\"1661\":1,\"1698\":1}}],[\"schedulername\",{\"1\":{\"1661\":1,\"1698\":1}}],[\"schedule\",{\"1\":{\"1066\":4,\"1687\":1}}],[\"schedules\",{\"1\":{\"1066\":2}}],[\"scheduleatfixedrate\",{\"1\":{\"626\":1}}],[\"scheduledexecutorservice\",{\"1\":{\"626\":1}}],[\"scheduledthreadpool\",{\"1\":{\"623\":1,\"1135\":1}}],[\"schemalocation=\",{\"1\":{\"584\":1}}],[\"schema`\",{\"1\":{\"232\":1,\"1684\":1}}],[\"schema灵活性\",{\"1\":{\"43\":1}}],[\"schema\",{\"1\":{\"37\":1,\"39\":1,\"41\":1,\"122\":2,\"125\":2,\"1831\":6,\"3282\":2}}],[\"scott非阻塞队列算法\",{\"1\":{\"2529\":1}}],[\"scott非阻塞算法\",{\"1\":{\"2473\":1}}],[\"scope\",{\"1\":{\"2042\":1}}],[\"scope>\",{\"1\":{\"394\":1,\"449\":1,\"584\":1,\"938\":1}}],[\"scoremap\",{\"1\":{\"3046\":3}}],[\"scores\",{\"1\":{\"2144\":1,\"2166\":1}}],[\"score\",{\"1\":{\"2125\":5,\"2577\":7,\"2734\":5}}],[\"score2\",{\"1\":{\"204\":1}}],[\"score1\",{\"1\":{\"204\":1}}],[\"scaling\",{\"1\":{\"3244\":1}}],[\"scalebasedonload\",{\"1\":{\"3244\":1}}],[\"scale=1\",{\"1\":{\"1447\":1,\"1450\":1,\"1455\":1,\"1456\":1,\"1457\":1,\"1458\":1,\"1459\":1,\"1461\":1,\"1462\":1,\"1463\":1,\"1464\":1,\"1467\":1,\"1469\":1}}],[\"scale\",{\"1\":{\"125\":1,\"3165\":1,\"3246\":2}}],[\"scanner\",{\"1\":{\"2861\":1}}],[\"scan\",{\"1\":{\"2020\":1}}],[\"scavenge关注吞吐量\",{\"1\":{\"809\":1,\"843\":1,\"877\":1,\"911\":1}}],[\"scavenge\",{\"1\":{\"795\":1,\"818\":1,\"829\":1,\"852\":1,\"863\":1,\"886\":1,\"897\":1,\"920\":1}}],[\"scavenge的老年代版本\",{\"1\":{\"770\":1}}],[\"scavenge收集器引入自适应调优理念\",{\"1\":{\"811\":1,\"845\":1,\"879\":1,\"913\":1}}],[\"scavenge收集器吞吐量目标\",{\"1\":{\"797\":1,\"831\":1,\"865\":1,\"899\":1}}],[\"scavenge收集器\",{\"1\":{\"769\":1,\"774\":1}}],[\"scard\",{\"1\":{\"203\":1}}],[\"s返回结果集\",{\"1\":{\"125\":1}}],[\"s状态时\",{\"1\":{\"125\":1}}],[\"s触发程序中没有\",{\"1\":{\"125\":1}}],[\"s行\",{\"1\":{\"125\":2}}],[\"sfl\",{\"1\":{\"1633\":1,\"1677\":1}}],[\"sf\",{\"1\":{\"125\":3,\"1586\":1}}],[\"s结束时缺少return\",{\"1\":{\"125\":1}}],[\"s无匹配项\",{\"1\":{\"125\":1}}],[\"s无匹配标签\",{\"1\":{\"125\":1}}],[\"s失败\",{\"1\":{\"125\":4}}],[\"s不能在给定场景下返回结果集\",{\"1\":{\"125\":1}}],[\"s不存在\",{\"1\":{\"125\":1}}],[\"s不可更新\",{\"1\":{\"125\":1}}],[\"s已存在\",{\"1\":{\"125\":1}}],[\"s已有了超过\",{\"1\":{\"125\":1}}],[\"s获得临时错误\",{\"1\":{\"125\":1}}],[\"s获得错误\",{\"1\":{\"125\":1}}],[\"s值\",{\"1\":{\"125\":3}}],[\"s选项运行\",{\"1\":{\"125\":1}}],[\"s使用存储引擎\",{\"1\":{\"125\":1}}],[\"s中有错\",{\"1\":{\"125\":1}}],[\"s中有重复值\",{\"1\":{\"125\":1}}],[\"s中未发现return\",{\"1\":{\"125\":1}}],[\"s中使用\",{\"1\":{\"125\":1}}],[\"s中的未知表\",{\"1\":{\"125\":1}}],[\"s中的列\",{\"1\":{\"125\":1}}],[\"s转换为\",{\"1\":{\"125\":1}}],[\"s的数目=\",{\"1\":{\"125\":1}}],[\"s的定义\",{\"1\":{\"125\":1}}],[\"s的out或inout参量不是变量\",{\"1\":{\"125\":1}}],[\"s的操作\",{\"1\":{\"125\":1}}],[\"s的目标表\",{\"1\":{\"125\":1}}],[\"s的未知预处理语句句柄\",{\"1\":{\"125\":1}}],[\"s的用法不正确\",{\"1\":{\"125\":1}}],[\"s变量\",{\"1\":{\"125\":1}}],[\"s权限才能执行该操作\",{\"1\":{\"125\":1}}],[\"s和\",{\"1\":{\"125\":1}}],[\"s和set的字符串过多\",{\"1\":{\"125\":1}}],[\"s时出错\",{\"1\":{\"125\":2}}],[\"s提供的参量不正确\",{\"1\":{\"125\":1}}],[\"symmetricdifference\",{\"1\":{\"2372\":3}}],[\"symbolic\",{\"1\":{\"1577\":1,\"1578\":3}}],[\"sy是系统cpu使用率\",{\"1\":{\"1887\":1}}],[\"sy\",{\"1\":{\"1887\":3}}],[\"syn\",{\"1\":{\"1881\":2}}],[\"syncmap\",{\"1\":{\"2613\":1,\"2670\":1}}],[\"synclist\",{\"1\":{\"1194\":3,\"2456\":1,\"2513\":5}}],[\"synced\",{\"1\":{\"992\":1,\"994\":1}}],[\"syncvolatileexample\",{\"1\":{\"659\":1}}],[\"synchronousqueue<>\",{\"1\":{\"2524\":1,\"3225\":1}}],[\"synchronousqueue\",{\"1\":{\"634\":1,\"2461\":1,\"2518\":1,\"2524\":1}}],[\"synchronizedsortedmap包装\",{\"1\":{\"2672\":1}}],[\"synchronizedsortedmap\",{\"1\":{\"2670\":2}}],[\"synchronizedset包装\",{\"1\":{\"2640\":1}}],[\"synchronizedset\",{\"1\":{\"2373\":2,\"2379\":1,\"2389\":1,\"2392\":2,\"2640\":1,\"3215\":1}}],[\"synchronizedqueue\",{\"1\":{\"2478\":1,\"2586\":2}}],[\"synchronized包装\",{\"1\":{\"2478\":1}}],[\"synchronizedarraylist<e>\",{\"1\":{\"2456\":1}}],[\"synchronizedmap包装linkedhashmap并配合锁机制\",{\"1\":{\"2643\":1}}],[\"synchronizedmap\",{\"1\":{\"1197\":2,\"2410\":3,\"2424\":1,\"2429\":1,\"2613\":2,\"2692\":2,\"2697\":1}}],[\"synchronizedlist或copyonwritearraylist\",{\"1\":{\"2454\":1}}],[\"synchronizedlist<e>\",{\"1\":{\"2356\":1}}],[\"synchronizedlist并非绝对线程安全\",{\"1\":{\"1194\":1}}],[\"synchronizedlist\",{\"1\":{\"1186\":1,\"1194\":1,\"2328\":3,\"2337\":1,\"2351\":1,\"2456\":3,\"2513\":3,\"2536\":1}}],[\"synchronizedlist实现线程安全集合\",{\"1\":{\"1186\":1}}],[\"synchronized是jvm内置锁\",{\"1\":{\"668\":1}}],[\"synchronized是隐式锁\",{\"1\":{\"651\":1}}],[\"synchronized和reentrantlock的底层实现有何异同\",{\"1\":{\"668\":1}}],[\"synchronized和final关键字以及happens\",{\"1\":{\"602\":1}}],[\"synchronized的使用陷阱\",{\"0\":{\"666\":1}}],[\"synchronized的实现原理是什么\",{\"1\":{\"651\":1}}],[\"synchronized与volatile的组合使用\",{\"0\":{\"659\":1}}],[\"synchronized与lock的选择\",{\"0\":{\"649\":1}}],[\"synchronized基于对象头的mark\",{\"1\":{\"651\":1}}],[\"synchronizedexample\",{\"1\":{\"641\":1}}],[\"synchronized关键字使用场景\",{\"0\":{\"641\":1}}],[\"synchronized关键字的正确使用\",{\"0\":{\"599\":1}}],[\"synchronized\",{\"0\":{\"1129\":1},\"1\":{\"593\":2,\"609\":2,\"613\":1,\"641\":3,\"654\":1,\"655\":1,\"659\":1,\"660\":2,\"662\":1,\"711\":1,\"1087\":1,\"1125\":4,\"1128\":1,\"1129\":4,\"1139\":1,\"1194\":1,\"1197\":1,\"2268\":1,\"2279\":1,\"2356\":5,\"2456\":2,\"2466\":1,\"2513\":1,\"2551\":1,\"2555\":2,\"2694\":1,\"3223\":1}}],[\"syncset\",{\"1\":{\"2373\":1,\"2392\":1,\"2640\":1}}],[\"syncs\",{\"1\":{\"178\":1}}],[\"sync\",{\"1\":{\"125\":1,\"178\":1,\"1004\":1,\"1111\":2,\"1332\":2,\"1503\":6,\"1504\":1,\"3125\":2,\"3275\":1}}],[\"syntax\",{\"1\":{\"125\":3,\"3085\":1}}],[\"sysconfig\",{\"1\":{\"1788\":1,\"1918\":1,\"3266\":8}}],[\"sysctl\",{\"1\":{\"1513\":2,\"1610\":4,\"1788\":4,\"3271\":3}}],[\"sysdba\",{\"1\":{\"1570\":1,\"1574\":1}}],[\"syslog系统日志保存\",{\"1\":{\"1738\":1}}],[\"syslogin\",{\"1\":{\"1563\":1}}],[\"syslog\",{\"1\":{\"1524\":4,\"1527\":2,\"1535\":1}}],[\"sys=0\",{\"1\":{\"774\":1}}],[\"sys\",{\"1\":{\"122\":5,\"1833\":1,\"3282\":1}}],[\"systemexception\",{\"1\":{\"2037\":1}}],[\"system01\",{\"1\":{\"1833\":1}}],[\"systemlog\",{\"1\":{\"1734\":2,\"1764\":1}}],[\"systemd\",{\"1\":{\"1610\":1,\"1620\":2,\"1634\":2,\"1638\":2,\"1667\":2,\"1675\":2,\"1752\":2}}],[\"systemctl\",{\"1\":{\"1353\":1,\"1359\":1,\"1364\":1,\"1525\":1,\"1585\":7,\"1610\":5,\"1614\":1,\"1615\":2,\"1620\":3,\"1621\":2,\"1667\":4,\"1671\":2,\"1672\":2,\"1674\":1,\"1675\":2,\"1741\":3,\"1745\":1,\"1746\":2,\"1752\":3,\"1753\":2,\"1776\":1,\"1780\":1,\"1788\":1,\"1803\":1,\"1804\":1,\"1805\":1,\"1905\":1,\"1909\":2,\"1923\":4,\"1936\":1,\"1937\":1,\"1938\":1,\"3268\":2,\"3271\":1,\"3275\":1}}],[\"systemclassloader\",{\"1\":{\"1147\":3}}],[\"systemid\",{\"1\":{\"285\":2}}],[\"systempropsutil\",{\"1\":{\"279\":2}}],[\"system\",{\"1\":{\"113\":1,\"122\":1,\"125\":3,\"235\":3,\"280\":1,\"283\":2,\"286\":2,\"289\":1,\"291\":3,\"293\":2,\"338\":4,\"456\":1,\"469\":1,\"471\":3,\"474\":2,\"479\":2,\"491\":3,\"500\":1,\"501\":1,\"502\":1,\"517\":2,\"521\":1,\"526\":2,\"527\":1,\"529\":1,\"537\":3,\"538\":1,\"539\":1,\"541\":3,\"542\":1,\"544\":1,\"552\":2,\"557\":2,\"575\":2,\"592\":3,\"609\":5,\"610\":2,\"625\":1,\"626\":6,\"642\":2,\"658\":1,\"675\":1,\"676\":5,\"677\":1,\"693\":5,\"694\":5,\"710\":1,\"711\":3,\"727\":1,\"728\":3,\"745\":5,\"772\":6,\"773\":2,\"780\":1,\"925\":1,\"1037\":11,\"1038\":2,\"1040\":5,\"1041\":16,\"1043\":12,\"1044\":7,\"1052\":2,\"1055\":5,\"1056\":6,\"1058\":2,\"1068\":2,\"1069\":1,\"1094\":1,\"1095\":2,\"1111\":1,\"1123\":2,\"1147\":3,\"1160\":6,\"1161\":3,\"1162\":1,\"1164\":3,\"1165\":2,\"1166\":2,\"1179\":9,\"1182\":2,\"1185\":1,\"1186\":1,\"1190\":3,\"1191\":3,\"1194\":5,\"1204\":3,\"1205\":2,\"1206\":1,\"1210\":3,\"1211\":4,\"1212\":4,\"1221\":4,\"1222\":6,\"1224\":2,\"1225\":3,\"1228\":4,\"1232\":1,\"1238\":6,\"1243\":1,\"1246\":2,\"1247\":2,\"1250\":7,\"1260\":3,\"1264\":9,\"1267\":3,\"1269\":4,\"1270\":2,\"1280\":1,\"1287\":3,\"1295\":2,\"1296\":1,\"1312\":2,\"1314\":4,\"1315\":5,\"1321\":6,\"1324\":2,\"1332\":2,\"1439\":10,\"1524\":2,\"1527\":1,\"1563\":2,\"1570\":1,\"1578\":1,\"1586\":1,\"1610\":1,\"1620\":2,\"1634\":2,\"1638\":4,\"1650\":9,\"1656\":1,\"1667\":2,\"1675\":2,\"1677\":1,\"1711\":1,\"1713\":9,\"1738\":1,\"1739\":2,\"1752\":2,\"1802\":1,\"2077\":3,\"2078\":12,\"2079\":3,\"2089\":1,\"2100\":1,\"2123\":3,\"2125\":5,\"2126\":7,\"2128\":2,\"2129\":1,\"2130\":1,\"2132\":1,\"2133\":1,\"2134\":3,\"2146\":2,\"2147\":3,\"2149\":1,\"2150\":1,\"2151\":2,\"2158\":2,\"2159\":2,\"2169\":2,\"2170\":5,\"2180\":2,\"2181\":2,\"2189\":3,\"2191\":2,\"2212\":4,\"2213\":4,\"2214\":6,\"2216\":3,\"2217\":2,\"2218\":1,\"2220\":6,\"2221\":1,\"2223\":3,\"2224\":1,\"2228\":8,\"2230\":2,\"2231\":2,\"2239\":3,\"2243\":1,\"2245\":4,\"2246\":2,\"2248\":6,\"2249\":3,\"2265\":6,\"2266\":1,\"2269\":2,\"2271\":5,\"2276\":9,\"2280\":2,\"2292\":1,\"2303\":3,\"2304\":3,\"2311\":3,\"2324\":11,\"2325\":14,\"2326\":7,\"2327\":21,\"2328\":2,\"2329\":6,\"2346\":1,\"2352\":1,\"2358\":1,\"2370\":3,\"2371\":2,\"2406\":5,\"2407\":11,\"2408\":4,\"2409\":9,\"2410\":1,\"2427\":2,\"2437\":1,\"2440\":2,\"2450\":2,\"2465\":7,\"2466\":4,\"2467\":5,\"2468\":9,\"2477\":1,\"2480\":2,\"2522\":2,\"2523\":5,\"2524\":3,\"2525\":1,\"2537\":2,\"2555\":2,\"2577\":1,\"2578\":1,\"2585\":2,\"2632\":2,\"2660\":1,\"2661\":8,\"2685\":3,\"2704\":1,\"2736\":4,\"2737\":2,\"2738\":1,\"2742\":2,\"2746\":3,\"2748\":2,\"2784\":1,\"2785\":2,\"2797\":1,\"2808\":1,\"2809\":4,\"2810\":1,\"2819\":3,\"2820\":1,\"2822\":4,\"2831\":1,\"2832\":1,\"2833\":1,\"2837\":3,\"2843\":1,\"2844\":2,\"2845\":6,\"2849\":7,\"2855\":2,\"2856\":1,\"2857\":4,\"2861\":1,\"2866\":3,\"2867\":1,\"2868\":6,\"2873\":1,\"2878\":4,\"2879\":2,\"2880\":1,\"2881\":3,\"2885\":1,\"2891\":2,\"2892\":2,\"2893\":1,\"2897\":1,\"2902\":3,\"2903\":1,\"2904\":4,\"2905\":1,\"2909\":12,\"2914\":8,\"2915\":1,\"2916\":4,\"2917\":1,\"2921\":6,\"2927\":2,\"2936\":3,\"2951\":1,\"2965\":5,\"2968\":8,\"2969\":3,\"2970\":5,\"2971\":8,\"2974\":1,\"2980\":5,\"2983\":4,\"2984\":4,\"2986\":7,\"2989\":4,\"2990\":2,\"2999\":1,\"3000\":2,\"3002\":10,\"3003\":4,\"3005\":7,\"3007\":2,\"3010\":1,\"3023\":2,\"3024\":2,\"3025\":3,\"3035\":1,\"3038\":1,\"3047\":2,\"3065\":5,\"3066\":4,\"3079\":1,\"3085\":2,\"3087\":3,\"3116\":6,\"3117\":2,\"3118\":4,\"3120\":3,\"3125\":2,\"3137\":2,\"3147\":1,\"3149\":2,\"3190\":2,\"3199\":1,\"3208\":1,\"3209\":1,\"3215\":2,\"3244\":1,\"3245\":1}}],[\"s命令\",{\"1\":{\"125\":3}}],[\"sigkill\",{\"1\":{\"3246\":1}}],[\"signwith\",{\"1\":{\"456\":1}}],[\"signaturealgorithm\",{\"1\":{\"456\":1}}],[\"signature=htsufpppahya5dfmjapuvprjxkm\",{\"1\":{\"286\":2}}],[\"signature\",{\"1\":{\"267\":4,\"303\":3,\"1764\":1}}],[\"signal\",{\"1\":{\"125\":1,\"642\":2}}],[\"sign\",{\"1\":{\"122\":1,\"307\":1,\"1548\":3,\"1650\":9,\"1656\":1,\"1711\":1}}],[\"siftdowncomparable\",{\"1\":{\"2575\":1}}],[\"siftdownusingcomparator\",{\"1\":{\"2575\":1}}],[\"siftdown\",{\"1\":{\"2574\":1,\"2575\":1}}],[\"siftupcomparable\",{\"1\":{\"2575\":1}}],[\"siftupusingcomparator\",{\"1\":{\"2575\":2}}],[\"siftup\",{\"1\":{\"2573\":1,\"2575\":1}}],[\"si\",{\"1\":{\"1887\":2}}],[\"sidecar\",{\"1\":{\"1648\":1,\"1649\":1,\"1650\":10,\"1661\":1,\"1685\":1,\"1688\":1,\"1698\":1,\"1713\":11}}],[\"sid\",{\"1\":{\"1575\":1}}],[\"sipconnection\",{\"1\":{\"3241\":2}}],[\"sipconnectionfactory\",{\"1\":{\"3241\":2}}],[\"sipconnectionpool\",{\"1\":{\"3241\":2}}],[\"sipclientstack\",{\"1\":{\"1094\":1,\"3190\":1}}],[\"sipclient\",{\"1\":{\"1094\":3,\"3190\":4}}],[\"sip连接池\",{\"1\":{\"3241\":1}}],[\"sip性能优化实践\",{\"0\":{\"3239\":1}}],[\"sipwebrtcgateway\",{\"1\":{\"3232\":1}}],[\"sip前端代理集群\",{\"1\":{\"3228\":1}}],[\"sip在实践中的应用\",{\"0\":{\"3229\":1}}],[\"sip在nat环境下通信是常见挑战\",{\"1\":{\"3224\":1}}],[\"sip在协议设计上巧妙地结合了无状态和有状态的特点\",{\"1\":{\"3220\":1}}],[\"sip依赖超时重传机制保证消息可靠传输\",{\"1\":{\"3222\":1}}],[\"sip依赖重传机制保证可靠性\",{\"1\":{\"3195\":1}}],[\"sip并不试图解决所有问题\",{\"1\":{\"3220\":1}}],[\"sip遵循互联网的端到端原则\",{\"1\":{\"3220\":1}}],[\"siphandler\",{\"1\":{\"3218\":5}}],[\"sip采用清晰的分层结构\",{\"1\":{\"3220\":1}}],[\"sip采用异步事件驱动模型\",{\"1\":{\"3217\":1}}],[\"sip采用文本格式而非二进制格式\",{\"1\":{\"1098\":1}}],[\"sip高级编程特性\",{\"0\":{\"3216\":1}}],[\"sip身份认证\",{\"0\":{\"3215\":1}}],[\"siptlsconfig\",{\"1\":{\"3214\":1,\"3237\":1}}],[\"siptransactionmanager\",{\"1\":{\"3208\":1}}],[\"siptransportstack\",{\"1\":{\"3206\":1}}],[\"siptransportadapter\",{\"1\":{\"3206\":2}}],[\"sip安全机制实现\",{\"0\":{\"3236\":1}}],[\"sip安全机制\",{\"0\":{\"3213\":1}}],[\"sip路由流程\",{\"1\":{\"3211\":1}}],[\"sip实现中\",{\"1\":{\"3206\":1}}],[\"siprequestinfo\",{\"1\":{\"3205\":4}}],[\"siprequesturi\",{\"1\":{\"3190\":2,\"3199\":2}}],[\"sip请求\",{\"1\":{\"3212\":1}}],[\"sip请求对象\",{\"1\":{\"3205\":1}}],[\"sip请求消息示例\",{\"1\":{\"1092\":1}}],[\"sip等\",{\"1\":{\"3204\":1}}],[\"sip和mobicents\",{\"1\":{\"3204\":1}}],[\"sip规范定义了sip协议栈的实现标准\",{\"1\":{\"3204\":1}}],[\"sip编程的高级特性\",{\"1\":{\"3201\":1}}],[\"sip支持多种身份认证机制\",{\"1\":{\"3215\":1}}],[\"sip支持多种传输协议\",{\"1\":{\"3206\":1}}],[\"sip支持临时响应\",{\"1\":{\"3198\":1}}],[\"sip支持有状态会话\",{\"1\":{\"3198\":1}}],[\"sip可使用udp或tcp\",{\"1\":{\"3198\":1}}],[\"sip用于会话控制\",{\"1\":{\"3198\":1}}],[\"sip用户通过sip\",{\"1\":{\"3177\":1}}],[\"sip事务层仍然需要管理事务状态和超时\",{\"1\":{\"3227\":1}}],[\"sip事务可以运行在tcp之上\",{\"1\":{\"3227\":1}}],[\"sip事务是应用层概念\",{\"1\":{\"3227\":1}}],[\"sip事务是sip协议的核心概念\",{\"1\":{\"3208\":1}}],[\"sip事务和tcp连接是两个不同层次的概念\",{\"1\":{\"3227\":1}}],[\"sip事务与tcp连接的关系是什么\",{\"0\":{\"3227\":1}}],[\"sip事务分为两类\",{\"1\":{\"3208\":1}}],[\"sip事务状态机\",{\"0\":{\"3208\":1}}],[\"sip事务状态复杂\",{\"1\":{\"1108\":1}}],[\"sip事件处理方法\",{\"1\":{\"3190\":1}}],[\"sip会话状态管理器\",{\"1\":{\"3235\":1}}],[\"sip会话建立流程如下\",{\"1\":{\"3188\":1}}],[\"sip会话流程\",{\"0\":{\"3186\":1}}],[\"sip核心组件\",{\"0\":{\"3181\":1}}],[\"sip与云服务结合实现弹性扩展\",{\"1\":{\"3244\":1}}],[\"sip与webrtc网关示例\",{\"1\":{\"3232\":1}}],[\"sip与webrtc集成\",{\"0\":{\"3232\":1}}],[\"sip与相关协议的关系\",{\"0\":{\"3176\":1}}],[\"sip与其他协议的对比\",{\"0\":{\"1101\":1}}],[\"sip的设计遵循以下核心思想\",{\"1\":{\"3192\":1}}],[\"sip的设计借鉴了http的请求\",{\"1\":{\"3176\":1}}],[\"sip的主要作用包括\",{\"1\":{\"3175\":1}}],[\"sip的定义与作用\",{\"0\":{\"3175\":1}}],[\"sip是由ietf定义的一种信令协议\",{\"1\":{\"3175\":1}}],[\"sip是一个基于文本的应用层协议\",{\"1\":{\"1091\":1}}],[\"sip基本概念\",{\"0\":{\"3174\":1}}],[\"sip基础\",{\"0\":{\"3171\":1}}],[\"sipsession\",{\"1\":{\"3235\":3,\"3240\":1}}],[\"sipserverhandler\",{\"1\":{\"1111\":1}}],[\"sipstack\",{\"1\":{\"1094\":5,\"3190\":5,\"3206\":10,\"3218\":7,\"3232\":2,\"3237\":3}}],[\"sipmessage\",{\"1\":{\"3240\":1}}],[\"sipmessageevent\",{\"1\":{\"3240\":2}}],[\"sipmessageencoder\",{\"1\":{\"1111\":1}}],[\"sipmessageprocessor\",{\"1\":{\"3217\":3,\"3218\":2}}],[\"sipmessageparser\",{\"1\":{\"1095\":1,\"3205\":1}}],[\"sipmessagedecoder\",{\"1\":{\"1111\":1}}],[\"sip具有明显优势\",{\"1\":{\"1101\":1}}],[\"sip服务器端口\",{\"1\":{\"3177\":1}}],[\"sip服务器初始化示例\",{\"1\":{\"1111\":1}}],[\"sip服务器\",{\"1\":{\"1100\":1}}],[\"sip专注于会话的建立\",{\"1\":{\"1099\":1}}],[\"sip协议在开放网络中面临安全威胁\",{\"1\":{\"3236\":1}}],[\"sip协议在实际应用中涉及复杂场景和架构设计\",{\"1\":{\"3230\":1}}],[\"sip协议的设计体现了以下关键思想\",{\"1\":{\"3220\":1}}],[\"sip协议的设计遵循以下核心原则\",{\"1\":{\"1097\":1}}],[\"sip协议栈是实现sip通信的基础框架\",{\"1\":{\"3204\":1}}],[\"sip协议栈架构\",{\"0\":{\"3204\":1}}],[\"sip协议底层实现\",{\"0\":{\"3203\":1}}],[\"sip协议与http协议有哪些异同点\",{\"0\":{\"3198\":1}}],[\"sip协议结构\",{\"0\":{\"3178\":1}}],[\"sip协议设计原则\",{\"0\":{\"1097\":1}}],[\"sip协议基本概念\",{\"0\":{\"1091\":1}}],[\"sipversion\",{\"1\":{\"1095\":2,\"3205\":1}}],[\"sipuri\",{\"1\":{\"1094\":1,\"3190\":2,\"3199\":2}}],[\"sipproviders\",{\"1\":{\"3218\":3}}],[\"sipprovider实例\",{\"1\":{\"3206\":3}}],[\"sipprovider\",{\"1\":{\"1094\":6,\"3190\":6,\"3199\":1,\"3206\":4,\"3218\":2}}],[\"sipfactory\",{\"1\":{\"1094\":9,\"3190\":9,\"3206\":1,\"3218\":1}}],[\"siplistener\",{\"1\":{\"1094\":1,\"3190\":1,\"3208\":2,\"3217\":1}}],[\"sip客户端位于nat后面时\",{\"1\":{\"1104\":1}}],[\"sip客户端示例\",{\"1\":{\"1094\":1}}],[\"sip客户端基本实现\",{\"0\":{\"1094\":1}}],[\"sip库实现简单sip客户端\",{\"1\":{\"1094\":1}}],[\"sip消息路由是sip网络的核心功能\",{\"1\":{\"3211\":1}}],[\"sip消息路由机制\",{\"0\":{\"3210\":1}}],[\"sip消息采用文本格式\",{\"1\":{\"3205\":1}}],[\"sip消息解析机制\",{\"0\":{\"3205\":1}}],[\"sip消息解析工具类\",{\"0\":{\"1095\":1},\"1\":{\"1095\":1}}],[\"sip消息中的contact头域通常包含内网ip地址\",{\"1\":{\"3194\":1}}],[\"sip消息由起始行\",{\"1\":{\"3180\":1}}],[\"sip消息格式\",{\"0\":{\"3180\":1}}],[\"sip消息格式错误或不完整会导致解析失败\",{\"1\":{\"1107\":1}}],[\"sip消息分为两类\",{\"1\":{\"3179\":1}}],[\"sip消息分为请求消息和响应消息\",{\"1\":{\"1092\":1}}],[\"sip消息类型\",{\"0\":{\"3179\":1}}],[\"sip消息通常通过udp传输\",{\"1\":{\"3176\":1}}],[\"sip消息体中携带sdp信息\",{\"1\":{\"3176\":1}}],[\"sip消息结构\",{\"0\":{\"1092\":1}}],[\"sip\",{\"0\":{\"3177\":1,\"3214\":1},\"1\":{\"1089\":1,\"1092\":3,\"1094\":9,\"1095\":5,\"1101\":1,\"1107\":1,\"1111\":1,\"3172\":1,\"3177\":3,\"3180\":3,\"3190\":11,\"3201\":1,\"3205\":3,\"3206\":5,\"3208\":6,\"3209\":4,\"3212\":4,\"3214\":1,\"3215\":5,\"3217\":3,\"3218\":6,\"3220\":1,\"3224\":1,\"3225\":1,\"3235\":2,\"3237\":1,\"3238\":1,\"3244\":2}}],[\"sip机制\",{\"0\":{\"1088\":1,\"3334\":1}}],[\"site\",{\"1\":{\"556\":1,\"940\":1}}],[\"simple等\",{\"1\":{\"3220\":1}}],[\"simpleioccontainer\",{\"1\":{\"2999\":5}}],[\"simpledateformat\",{\"1\":{\"2765\":2}}],[\"simpledriverdatasource\",{\"1\":{\"369\":1}}],[\"simplename\",{\"1\":{\"2027\":1}}],[\"simplechannelinboundhandler<string>\",{\"1\":{\"1332\":1}}],[\"simplehttpserver\",{\"1\":{\"1324\":1,\"2921\":1}}],[\"simplehashmap\",{\"1\":{\"1181\":1}}],[\"simplehashmap<k\",{\"1\":{\"1181\":1}}],[\"simplejdbcinsert和simplejdbccall\",{\"1\":{\"363\":1}}],[\"sinkchannel\",{\"1\":{\"3117\":1}}],[\"singlelinecommentdemo\",{\"1\":{\"2089\":1}}],[\"single\",{\"1\":{\"1560\":1}}],[\"singlethreadexecutor\",{\"1\":{\"623\":1,\"1135\":1}}],[\"singletonbeans\",{\"1\":{\"2999\":4}}],[\"singletonlist\",{\"1\":{\"2027\":1}}],[\"singleton\",{\"1\":{\"327\":1,\"2824\":1,\"2999\":1}}],[\"sinter\",{\"1\":{\"203\":1}}],[\"since=\",{\"1\":{\"2291\":1}}],[\"since\",{\"1\":{\"165\":1,\"193\":2,\"2035\":1}}],[\"sismember\",{\"1\":{\"203\":1}}],[\"size+1\",{\"1\":{\"2437\":1}}],[\"size++\",{\"1\":{\"1181\":1,\"2161\":1,\"2318\":1,\"2437\":2,\"2494\":2,\"2497\":1,\"2655\":1,\"2704\":1}}],[\"size等\",{\"1\":{\"2161\":1}}],[\"sizeandtimebasedrollingpolicy\",{\"1\":{\"1564\":1}}],[\"size`\",{\"1\":{\"232\":4,\"1684\":4}}],[\"size\",{\"0\":{\"2533\":1},\"1\":{\"125\":2,\"166\":1,\"171\":3,\"216\":1,\"284\":9,\"286\":3,\"288\":9,\"428\":1,\"626\":1,\"642\":1,\"1043\":5,\"1179\":1,\"1181\":5,\"1186\":1,\"1194\":1,\"1224\":2,\"1232\":1,\"1238\":5,\"1321\":1,\"1326\":2,\"1440\":2,\"1469\":2,\"1527\":2,\"1573\":1,\"1615\":1,\"1667\":1,\"1675\":1,\"1746\":1,\"2027\":1,\"2058\":1,\"2161\":4,\"2272\":1,\"2314\":1,\"2318\":3,\"2325\":1,\"2327\":1,\"2328\":1,\"2341\":1,\"2348\":1,\"2355\":1,\"2356\":6,\"2369\":2,\"2427\":1,\"2433\":2,\"2436\":2,\"2437\":3,\"2438\":5,\"2439\":4,\"2440\":8,\"2441\":2,\"2450\":1,\"2465\":2,\"2466\":2,\"2468\":2,\"2490\":1,\"2494\":2,\"2495\":3,\"2496\":2,\"2497\":2,\"2498\":3,\"2505\":1,\"2509\":1,\"2512\":3,\"2523\":1,\"2524\":1,\"2525\":1,\"2533\":2,\"2551\":1,\"2555\":1,\"2568\":1,\"2573\":2,\"2574\":2,\"2593\":1,\"2632\":1,\"2642\":1,\"2648\":1,\"2655\":1,\"2679\":1,\"2681\":1,\"2684\":1,\"2704\":4,\"2866\":4,\"2868\":2,\"2881\":1,\"2904\":4,\"2942\":1,\"2953\":1,\"3218\":3,\"3275\":1,\"3282\":1}}],[\"size=10\",{\"1\":{\"445\":1}}],[\"size=10mb\",{\"1\":{\"434\":1}}],[\"size=100mb\",{\"1\":{\"434\":1}}],[\"size=100m\",{\"1\":{\"219\":1,\"1518\":1,\"1526\":1}}],[\"size=\",{\"1\":{\"125\":1}}],[\"size的行\",{\"1\":{\"125\":1}}],[\"s靠近\",{\"1\":{\"125\":1}}],[\"sphinx等\",{\"1\":{\"1984\":1}}],[\"space\",{\"1\":{\"1558\":2,\"1833\":2}}],[\"spans2\",{\"1\":{\"1456\":2}}],[\"spans1\",{\"1\":{\"1456\":2}}],[\"span\",{\"1\":{\"1456\":2,\"1462\":2,\"3104\":1}}],[\"span>\",{\"1\":{\"1431\":1,\"1433\":1,\"1434\":1,\"1435\":1,\"1456\":4,\"1462\":1}}],[\"spatial索引的所有部分必须是not\",{\"1\":{\"125\":1}}],[\"spatial\",{\"1\":{\"125\":1}}],[\"spiralorder\",{\"1\":{\"1162\":2}}],[\"spiralmatrix\",{\"1\":{\"1162\":1}}],[\"spliterator\",{\"1\":{\"2434\":1,\"2491\":1}}],[\"split\",{\"1\":{\"286\":1,\"1095\":3,\"1324\":2,\"2197\":1,\"2601\":1,\"2921\":2,\"3205\":1,\"3215\":1}}],[\"spring生态中的注解应用\",{\"0\":{\"3158\":1}}],[\"spring自动注入userdao的实现\",{\"1\":{\"3049\":1}}],[\"spring能根据泛型参数自动匹配对应的实现类\",{\"1\":{\"3049\":1}}],[\"spring通过泛型类型信息实现了更精确的依赖注入\",{\"1\":{\"3049\":1}}],[\"spring通过三级缓存机制解决循环依赖\",{\"1\":{\"331\":1}}],[\"springiocdemo\",{\"1\":{\"2999\":1}}],[\"springmvc\",{\"1\":{\"1438\":1,\"1440\":1}}],[\"spring等框架将泛型与依赖注入结合\",{\"1\":{\"1299\":1}}],[\"spring容器会通过class\",{\"1\":{\"1266\":1}}],[\"springapplication\",{\"1\":{\"392\":1}}],[\"springboot初始化配置就是用到该接口实现加载多个配置文件\",{\"1\":{\"462\":1}}],[\"springbootconfiguration\",{\"1\":{\"461\":1,\"463\":1}}],[\"springboot项目启动时会进行初始化\",{\"1\":{\"459\":1}}],[\"springboot底层原理实现\",{\"0\":{\"457\":1,\"458\":1}}],[\"springboot支持基于角色的授权\",{\"1\":{\"452\":1}}],[\"springboot支持集成测试\",{\"1\":{\"450\":1}}],[\"springboot支持jsr\",{\"1\":{\"428\":1}}],[\"springboottest\",{\"1\":{\"449\":1,\"450\":2}}],[\"springboot测试与安全\",{\"0\":{\"446\":1}}],[\"springboot数据访问\",{\"0\":{\"435\":1}}],[\"springboot通过\",{\"1\":{\"423\":1}}],[\"springboot是如何知道要创建哪个bean的\",{\"1\":{\"423\":1,\"459\":1}}],[\"springboot是由pivotal团队提供的框架\",{\"1\":{\"389\":1}}],[\"springboot提供了spring\",{\"1\":{\"438\":1,\"439\":1,\"440\":1,\"449\":1,\"451\":1}}],[\"springboot提供了强大的测试和安全支持\",{\"1\":{\"447\":1}}],[\"springboot提供了强大的数据访问支持\",{\"1\":{\"436\":1}}],[\"springboot提供了强大的web开发支持\",{\"1\":{\"425\":1}}],[\"springboot提供了handlerinterceptor接口来实现拦截器\",{\"1\":{\"430\":1}}],[\"springboot提供了\",{\"1\":{\"417\":1,\"429\":1,\"441\":1,\"461\":1}}],[\"springboot提供了多种配置方式\",{\"1\":{\"400\":1}}],[\"springboot内置了四种服务器当导入不同的依赖时\",{\"1\":{\"416\":1,\"460\":1}}],[\"springboot使用\",{\"1\":{\"415\":1}}],[\"springboot使用父项目进行依赖管理\",{\"1\":{\"394\":1}}],[\"springboot自动装配原理\",{\"0\":{\"412\":1},\"1\":{\"463\":1}}],[\"springboot配置详解\",{\"0\":{\"399\":1}}],[\"springboot会自动配置相关的组件\",{\"1\":{\"398\":1}}],[\"springboot的自动装配是其核心特性之一\",{\"1\":{\"413\":1}}],[\"springboot的配置优先级从高到低依次为\",{\"1\":{\"405\":1}}],[\"springboot的starter是一组预配置的依赖\",{\"1\":{\"398\":1}}],[\"springboot的核心特性\",{\"0\":{\"391\":1}}],[\"springboot和spring有什么区别\",{\"1\":{\"398\":1}}],[\"springboot\",{\"0\":{\"424\":1,\"3296\":1},\"1\":{\"392\":1}}],[\"springbootapplication该引导类中有一个核心注解\",{\"1\":{\"463\":1}}],[\"springbootapplication中有标识\",{\"1\":{\"419\":1,\"463\":1}}],[\"springbootapplication注解\",{\"1\":{\"397\":1,\"422\":1,\"463\":1}}],[\"springbootapplication\",{\"1\":{\"392\":1,\"461\":1}}],[\"springboot概述与入门\",{\"0\":{\"388\":1}}],[\"spring提供的泛型repository\",{\"1\":{\"3050\":1}}],[\"spring提供的datasource实现\",{\"1\":{\"369\":1}}],[\"spring提供了强大的web开发支持\",{\"1\":{\"375\":1}}],[\"spring提供了强大的事务管理支持\",{\"1\":{\"346\":1}}],[\"spring提供了对jpa的集成支持\",{\"1\":{\"364\":1}}],[\"spring提供了对hibernate的集成支持\",{\"1\":{\"364\":1}}],[\"spring提供了全面的数据访问支持\",{\"1\":{\"361\":1}}],[\"spring也提供了对mybatis的集成支持\",{\"1\":{\"364\":1}}],[\"spring数据访问\",{\"0\":{\"360\":1}}],[\"spring支持以下传播行为\",{\"1\":{\"359\":1}}],[\"spring支持哪些传播行为\",{\"1\":{\"359\":1}}],[\"spring事务管理\",{\"0\":{\"345\":1}}],[\"spring会先创建bean的实例\",{\"1\":{\"331\":1}}],[\"spring是如何解决循环依赖的\",{\"1\":{\"331\":1}}],[\"spring是一个开源的轻量级java开发框架\",{\"1\":{\"309\":1,\"398\":1}}],[\"spring不断发展\",{\"1\":{\"312\":1}}],[\"spring框架广泛使用注解简化配置\",{\"1\":{\"3158\":1}}],[\"spring框架中的泛型应用\",{\"0\":{\"3048\":1}}],[\"spring框架正式发布\",{\"1\":{\"312\":1}}],[\"spring框架概述\",{\"0\":{\"308\":1}}],[\"spring由多个模块组成\",{\"1\":{\"311\":1}}],[\"spring的web开发设计思想是简化web应用程序的开发\",{\"1\":{\"385\":1}}],[\"spring的web开发模块简化了web应用程序的开发过程\",{\"1\":{\"375\":1}}],[\"spring的拦截器支持\",{\"1\":{\"383\":1}}],[\"spring的rest支持\",{\"1\":{\"378\":1}}],[\"spring的数据访问设计思想是简化数据访问\",{\"1\":{\"371\":1}}],[\"spring的数据访问模块简化了数据访问的过程\",{\"1\":{\"361\":1}}],[\"spring的事务管理设计思想是简化事务管理\",{\"1\":{\"357\":1}}],[\"spring的非侵入性设计也使得应用程序不会依赖于spring的特定api\",{\"1\":{\"317\":1}}],[\"spring的控制反转\",{\"1\":{\"317\":1}}],[\"spring的设计思想是简化java开发\",{\"1\":{\"315\":1}}],[\"spring的设计使得测试变得容易\",{\"1\":{\"311\":1}}],[\"spring的整体架构\",{\"0\":{\"313\":1}}],[\"spring的历史\",{\"0\":{\"312\":1}}],[\"spring的核心jar文件很小\",{\"1\":{\"311\":1,\"317\":1}}],[\"spring的核心特性\",{\"0\":{\"311\":1}}],[\"spring的核心是控制反转\",{\"1\":{\"309\":1}}],[\"spring应用上下文环境\",{\"1\":{\"290\":1}}],[\"springutil\",{\"1\":{\"290\":2}}],[\"spring适配方式\",{\"1\":{\"289\":1}}],[\"springframework<\",{\"1\":{\"924\":1,\"936\":1,\"938\":1,\"953\":1,\"954\":1,\"963\":2}}],[\"springframework\",{\"1\":{\"286\":2,\"289\":1,\"290\":4,\"394\":3,\"416\":3,\"428\":1,\"438\":1,\"439\":1,\"440\":1,\"449\":1,\"451\":1,\"1564\":1,\"3104\":1,\"3159\":3,\"3160\":2}}],[\"spring\",{\"0\":{\"318\":1,\"332\":1,\"374\":1,\"377\":1,\"580\":1,\"2999\":1,\"3050\":1,\"3295\":1},\"1\":{\"235\":2,\"267\":1,\"344\":1,\"377\":1,\"387\":2,\"403\":4,\"404\":1,\"406\":5,\"407\":2,\"411\":1,\"419\":1,\"422\":1,\"423\":1,\"434\":2,\"438\":1,\"445\":12,\"463\":3,\"571\":1,\"580\":5,\"932\":1,\"1266\":1,\"1559\":1,\"1643\":1,\"1644\":16,\"1648\":1,\"1649\":5,\"1685\":1,\"1688\":5,\"2369\":1,\"2821\":1,\"2822\":1,\"2999\":3,\"3050\":2,\"3104\":2}}],[\"spotbugs\",{\"1\":{\"2017\":1}}],[\"sports\",{\"1\":{\"3007\":3}}],[\"sport\",{\"1\":{\"1880\":2}}],[\"spop\",{\"1\":{\"203\":1}}],[\"spool\",{\"1\":{\"122\":1,\"1504\":1}}],[\"sp\",{\"1\":{\"125\":43}}],[\"specify\",{\"1\":{\"1677\":1}}],[\"specification\",{\"1\":{\"2047\":1}}],[\"specific\",{\"1\":{\"125\":1}}],[\"specified\",{\"1\":{\"125\":1}}],[\"spec\",{\"1\":{\"125\":1,\"1633\":4,\"1637\":4,\"1638\":2,\"1648\":5,\"1649\":5,\"1650\":32,\"1660\":2,\"1661\":3,\"1685\":5,\"1688\":5,\"1698\":2,\"1713\":35,\"3276\":2}}],[\"s\",{\"1\":{\"125\":326,\"468\":4,\"469\":2,\"537\":2,\"538\":6,\"553\":4,\"557\":2,\"994\":2,\"1165\":9,\"1166\":8,\"1170\":4,\"1402\":1,\"1416\":1,\"1417\":2,\"1418\":1,\"1424\":1,\"1428\":1,\"1610\":2,\"1620\":1,\"1672\":2,\"1714\":3,\"1747\":1,\"1752\":1,\"1756\":1,\"1839\":1,\"1857\":1,\"1868\":1,\"1876\":2,\"1878\":1,\"1880\":1,\"1881\":8,\"1882\":1,\"1884\":4,\"1886\":3,\"1887\":1,\"1907\":1,\"2050\":1,\"2080\":1,\"2099\":1,\"2101\":2,\"2191\":5,\"2207\":6,\"2246\":3,\"2295\":3,\"2311\":2,\"2340\":10,\"2382\":5,\"2524\":1,\"2554\":3,\"2574\":4,\"2723\":4,\"2785\":2,\"2869\":1,\"2881\":3,\"2902\":1,\"2903\":1,\"2905\":1,\"2947\":2,\"3041\":2,\"3050\":2,\"3246\":1,\"3268\":1,\"3273\":1}}],[\"srv记录\",{\"1\":{\"3212\":1}}],[\"srandmember\",{\"1\":{\"203\":1}}],[\"src=\",{\"1\":{\"1433\":1,\"1434\":1,\"1435\":1,\"1440\":2,\"1447\":1,\"1450\":1,\"1455\":1,\"1456\":1,\"1457\":1,\"1458\":1,\"1459\":1,\"1461\":1,\"1462\":1,\"1463\":1,\"1464\":1,\"1467\":1,\"1469\":3}}],[\"srcdir=\",{\"1\":{\"583\":1}}],[\"src\",{\"1\":{\"186\":6,\"270\":1,\"393\":1,\"583\":1,\"1296\":4,\"1469\":1,\"1470\":1,\"1865\":1,\"1880\":1,\"2045\":1,\"2684\":4}}],[\"srem\",{\"1\":{\"140\":1,\"203\":1}}],[\"sr\",{\"1\":{\"122\":2,\"2857\":2}}],[\"smart\",{\"1\":{\"3273\":10}}],[\"small\",{\"1\":{\"1469\":2}}],[\"smtp\",{\"1\":{\"1644\":4,\"1880\":2}}],[\"sms\",{\"1\":{\"289\":1}}],[\"smembers\",{\"1\":{\"203\":1}}],[\"sm\",{\"1\":{\"122\":1}}],[\"slice\",{\"1\":{\"3130\":1}}],[\"slidingwindowdemo\",{\"1\":{\"1312\":1}}],[\"sleuth\",{\"1\":{\"3104\":1}}],[\"sleep\",{\"1\":{\"609\":4,\"610\":2,\"618\":1,\"625\":1,\"626\":2,\"654\":1,\"676\":2,\"1094\":1,\"1238\":1,\"1337\":1,\"1431\":1,\"1443\":1,\"1459\":1,\"2466\":2,\"2523\":2,\"2555\":2,\"2685\":1,\"2736\":1,\"3120\":1,\"3208\":1}}],[\"slaughter\",{\"1\":{\"291\":3}}],[\"slavea\",{\"1\":{\"1763\":3}}],[\"slaveport3\",{\"1\":{\"186\":1}}],[\"slaveport2\",{\"1\":{\"186\":1}}],[\"slaveport1\",{\"1\":{\"186\":1}}],[\"slavehost3\",{\"1\":{\"186\":1}}],[\"slavehost2\",{\"1\":{\"186\":1}}],[\"slavehost1\",{\"1\":{\"186\":1}}],[\"slave的信息\",{\"1\":{\"181\":1}}],[\"slave属性\",{\"1\":{\"180\":1}}],[\"slave与master连接断开\",{\"1\":{\"172\":1}}],[\"slave每1秒发送replconfack命令到master\",{\"1\":{\"172\":1}}],[\"slave频繁断开连接\",{\"1\":{\"172\":1}}],[\"slave反复进行全量复制\",{\"1\":{\"171\":1}}],[\"slave不提供服务\",{\"1\":{\"171\":1}}],[\"slave延迟由slave发送replconf\",{\"1\":{\"169\":1}}],[\"slave数量由slave发送replconf\",{\"1\":{\"169\":1}}],[\"slave数量少于2个\",{\"1\":{\"169\":1}}],[\"slaves\",{\"1\":{\"169\":2,\"193\":1}}],[\"slave心跳任务\",{\"1\":{\"169\":1}}],[\"slave记录已接收的信息对应的offset\",{\"1\":{\"167\":1}}],[\"slave端\",{\"1\":{\"167\":1}}],[\"slave复制偏移量\",{\"1\":{\"167\":1}}],[\"slave保存此id\",{\"1\":{\"167\":1}}],[\"slave接收命令后执行命令\",{\"1\":{\"167\":1}}],[\"slave过多时\",{\"1\":{\"166\":1}}],[\"slave启动服务器设置密码\",{\"1\":{\"165\":1}}],[\"slave配置文件设置密码\",{\"1\":{\"165\":1}}],[\"slave客户端发送命令设置密码\",{\"1\":{\"165\":1}}],[\"slave断开连接后\",{\"1\":{\"165\":1}}],[\"slave系统信息\",{\"1\":{\"165\":1}}],[\"slaveof等少数命令\",{\"1\":{\"173\":1}}],[\"slaveof\",{\"1\":{\"165\":4}}],[\"slave读\",{\"1\":{\"162\":1}}],[\"slave\",{\"1\":{\"100\":2,\"103\":2,\"108\":1,\"111\":2,\"112\":7,\"113\":8,\"122\":3,\"125\":20,\"161\":2,\"165\":1,\"166\":3,\"169\":1,\"172\":1,\"173\":1,\"178\":1,\"180\":1,\"186\":8,\"1763\":1}}],[\"slf4j\",{\"1\":{\"267\":1,\"286\":3,\"292\":1,\"3102\":1}}],[\"slot2\",{\"1\":{\"208\":1}}],[\"slot1\",{\"1\":{\"208\":1}}],[\"slots\",{\"1\":{\"186\":4}}],[\"slot\",{\"1\":{\"186\":1,\"208\":1}}],[\"slower\",{\"1\":{\"193\":1}}],[\"slowlog\",{\"1\":{\"193\":4}}],[\"slow\",{\"1\":{\"122\":1}}],[\"su\",{\"1\":{\"1570\":1,\"1721\":1}}],[\"sunday\",{\"1\":{\"2818\":1}}],[\"sunfontmanager\",{\"0\":{\"1557\":1}}],[\"sun老年代收集器\",{\"1\":{\"772\":1}}],[\"sun年轻代收集器\",{\"1\":{\"772\":1}}],[\"sun\",{\"0\":{\"1557\":1},\"1\":{\"772\":1,\"1558\":1,\"3100\":1,\"3102\":1}}],[\"sunion\",{\"1\":{\"203\":1}}],[\"survivorratio=8\",{\"1\":{\"806\":1,\"840\":1,\"874\":1,\"908\":1}}],[\"survivorratio=<n>\",{\"1\":{\"792\":1,\"826\":1,\"860\":1,\"894\":1}}],[\"survivorratio调整\",{\"1\":{\"717\":1}}],[\"survivor区或老年代空间\",{\"1\":{\"778\":1}}],[\"survivor区设计两个是为了实现复制算法\",{\"1\":{\"720\":1}}],[\"survivor区比例\",{\"1\":{\"717\":1}}],[\"survivor区中相同年龄对象总和超过一半\",{\"1\":{\"708\":1}}],[\"survivor\",{\"1\":{\"707\":1,\"792\":2,\"826\":2,\"860\":2,\"894\":2}}],[\"suspend\",{\"1\":{\"617\":1}}],[\"suffix\",{\"1\":{\"289\":4,\"2228\":3}}],[\"suffixstr\",{\"1\":{\"289\":2}}],[\"sudoers\",{\"1\":{\"1855\":1}}],[\"sudo\",{\"1\":{\"264\":3,\"265\":3,\"1354\":1,\"1371\":1,\"1372\":1,\"1402\":1,\"1586\":4,\"1610\":1,\"1612\":2,\"1613\":1,\"1615\":4,\"1671\":1,\"1672\":2,\"1673\":1,\"1675\":4,\"1677\":1,\"1714\":3,\"1741\":1,\"1743\":2,\"1744\":1,\"1746\":4,\"1788\":3,\"1843\":1,\"1858\":1,\"3246\":2}}],[\"suppresswarningdemo\",{\"1\":{\"3136\":1}}],[\"suppresswarnings\",{\"1\":{\"283\":1,\"290\":2,\"1181\":2,\"2439\":1,\"2441\":1,\"2601\":1,\"2655\":1,\"3007\":1,\"3136\":2}}],[\"supplier<list<string>>\",{\"1\":{\"539\":1}}],[\"supplier<integer>\",{\"1\":{\"538\":1,\"539\":1}}],[\"supplier<boolean>\",{\"1\":{\"287\":1}}],[\"supplier<t>\",{\"1\":{\"283\":1,\"3087\":1}}],[\"supplier<stream<\",{\"1\":{\"269\":1,\"271\":1}}],[\"supplier\",{\"1\":{\"269\":1,\"283\":3,\"287\":2,\"538\":2}}],[\"supports\",{\"1\":{\"355\":1,\"359\":1}}],[\"support\",{\"1\":{\"269\":1,\"1472\":1}}],[\"supportedsourceversion\",{\"1\":{\"1087\":1,\"3147\":1,\"3162\":1}}],[\"supportedannotationtypes\",{\"1\":{\"1087\":1,\"3147\":1,\"3162\":1}}],[\"supported\",{\"1\":{\"125\":2,\"235\":1,\"359\":1}}],[\"superclass\",{\"1\":{\"2968\":3}}],[\"super关键字用于访问父类的成员和构造方法\",{\"1\":{\"2738\":1}}],[\"super关键字\",{\"0\":{\"2738\":1}}],[\"super\",{\"0\":{\"3040\":1},\"1\":{\"125\":1,\"747\":1,\"1034\":1,\"1044\":1,\"1087\":1,\"1249\":2,\"1296\":1,\"2077\":2,\"2263\":6,\"2268\":2,\"2427\":1,\"2434\":1,\"2491\":1,\"2571\":1,\"2623\":1,\"2627\":1,\"2632\":1,\"2642\":1,\"2655\":3,\"2680\":1,\"2738\":2,\"2810\":1,\"2937\":1,\"2938\":2,\"3003\":1,\"3029\":1,\"3040\":2,\"3041\":4,\"3136\":1}}],[\"subdir\",{\"1\":{\"3276\":1}}],[\"sublen\",{\"1\":{\"2296\":4}}],[\"sublist\",{\"0\":{\"2346\":1},\"1\":{\"288\":1,\"1194\":4,\"2314\":1,\"2324\":3,\"2346\":6}}],[\"subclass\",{\"1\":{\"1038\":1}}],[\"submitmessage\",{\"1\":{\"3240\":1}}],[\"submit\",{\"1\":{\"527\":1,\"529\":1,\"592\":1,\"625\":1,\"626\":1,\"632\":1,\"1135\":1,\"1186\":1,\"1254\":1,\"1431\":1,\"1433\":1,\"1434\":1,\"1435\":1,\"2466\":3,\"2522\":1,\"2523\":2,\"2524\":4,\"2921\":1,\"3082\":1,\"3217\":3}}],[\"suburl\",{\"1\":{\"294\":2}}],[\"subtract\",{\"1\":{\"281\":3}}],[\"subpart\",{\"1\":{\"125\":2}}],[\"subpartition\",{\"1\":{\"125\":2}}],[\"subset\",{\"1\":{\"2661\":3}}],[\"subselect\",{\"1\":{\"125\":1}}],[\"substr\",{\"1\":{\"1056\":1}}],[\"substring2\",{\"1\":{\"2196\":1}}],[\"substring1\",{\"1\":{\"2196\":1}}],[\"substring\",{\"0\":{\"2296\":1},\"1\":{\"289\":10,\"294\":2,\"456\":1,\"1041\":1,\"1056\":2,\"1164\":1,\"1170\":1,\"2196\":2,\"2240\":1,\"2296\":2,\"2999\":2,\"3205\":6,\"3212\":2}}],[\"subscription\",{\"1\":{\"122\":1}}],[\"subquery\",{\"1\":{\"125\":1}}],[\"sub\",{\"1\":{\"125\":1,\"997\":1,\"1779\":1,\"2109\":1}}],[\"succ\",{\"1\":{\"2494\":5}}],[\"successthreshold\",{\"1\":{\"3087\":5}}],[\"successcount++\",{\"1\":{\"3087\":1}}],[\"successcount\",{\"1\":{\"3087\":4}}],[\"success则上传成功\",{\"1\":{\"1000\":1}}],[\"success则可以上传\",{\"1\":{\"999\":1}}],[\"successful\",{\"1\":{\"994\":1}}],[\"successfully\",{\"1\":{\"119\":1,\"120\":1,\"122\":1,\"1004\":1}}],[\"success\",{\"1\":{\"676\":2,\"1435\":2,\"1436\":1,\"1440\":1,\"1443\":1,\"1444\":1,\"2477\":2,\"2955\":1,\"2959\":3}}],[\"such\",{\"0\":{\"1668\":1},\"1\":{\"125\":6,\"1677\":1,\"1735\":2,\"2441\":1}}],[\"summarize\",{\"1\":{\"3103\":1}}],[\"summer\",{\"1\":{\"2369\":1,\"2821\":1,\"2822\":1}}],[\"sumoflist\",{\"1\":{\"3039\":4}}],[\"sum|min|max\",{\"1\":{\"204\":2}}],[\"sum\",{\"1\":{\"20\":1,\"59\":1,\"89\":1,\"125\":1,\"538\":1,\"543\":2,\"575\":2,\"677\":1,\"1055\":2,\"1270\":2,\"1833\":3,\"2183\":3,\"2410\":1,\"2534\":1,\"3025\":8,\"3039\":3}}],[\"solution\",{\"1\":{\"2715\":1}}],[\"solr等\",{\"1\":{\"1984\":1}}],[\"solid原则在架构中的应用\",{\"0\":{\"2005\":1}}],[\"solid\",{\"1\":{\"1440\":1,\"1463\":1}}],[\"socekt\",{\"1\":{\"1880\":1}}],[\"socat\",{\"1\":{\"1610\":1,\"1636\":1,\"1677\":1}}],[\"sock\",{\"1\":{\"1535\":2,\"1577\":2,\"1578\":4}}],[\"sockettimeoutexception\",{\"1\":{\"3103\":1}}],[\"sockettimeout=3000\",{\"1\":{\"235\":2}}],[\"socketread0\",{\"1\":{\"3096\":1}}],[\"socket类表示客户端套接字\",{\"1\":{\"3064\":1}}],[\"socket概念\",{\"0\":{\"3064\":1}}],[\"socket编程基础\",{\"0\":{\"3063\":1}}],[\"socket编程逐步展开\",{\"1\":{\"3055\":1}}],[\"socketfactory\",{\"1\":{\"1644\":1}}],[\"socket=\",{\"1\":{\"1577\":2,\"1578\":2}}],[\"socket操作未设置超时\",{\"1\":{\"1339\":1}}],[\"socket连接\",{\"1\":{\"1326\":1}}],[\"socketchannel示例\",{\"1\":{\"3117\":1}}],[\"socketchannelimpl\",{\"1\":{\"3100\":1}}],[\"socketchannel\",{\"1\":{\"1111\":1,\"1228\":14,\"1315\":12,\"1324\":10,\"1332\":1,\"1338\":2,\"2915\":1,\"2916\":14,\"2921\":20,\"3079\":3,\"3117\":10,\"3118\":12,\"3120\":9,\"3125\":1}}],[\"socket\",{\"1\":{\"114\":1,\"125\":1,\"1228\":1,\"1314\":6,\"1315\":1,\"1324\":1,\"1326\":31,\"1336\":8,\"1337\":3,\"1339\":5,\"1501\":1,\"1569\":1,\"1578\":2,\"1880\":1,\"2916\":1,\"2921\":1,\"3064\":1,\"3065\":11,\"3066\":4,\"3069\":3,\"3070\":5,\"3078\":4,\"3082\":3}}],[\"so确实没有连接\",{\"1\":{\"1586\":1}}],[\"so不是符号连接\",{\"1\":{\"1586\":1}}],[\"softreference\",{\"1\":{\"2698\":2}}],[\"softreference和phantomreference在缓存实现中有何区别\",{\"0\":{\"2698\":1}}],[\"soft\",{\"1\":{\"1369\":3,\"1370\":3,\"1371\":1,\"1372\":1,\"1373\":1,\"1610\":3,\"2676\":1}}],[\"software\",{\"1\":{\"990\":1,\"991\":1,\"999\":1,\"1578\":3}}],[\"so\",{\"1\":{\"1111\":2,\"1347\":2,\"1586\":13,\"1735\":3,\"1887\":2,\"3091\":2,\"3125\":2}}],[\"sonar\",{\"1\":{\"2020\":4}}],[\"sonarqube\",{\"1\":{\"2017\":1,\"2020\":1}}],[\"sonarlint\",{\"0\":{\"298\":1},\"1\":{\"2002\":1}}],[\"sonatype账号\",{\"1\":{\"998\":1}}],[\"sonatype\",{\"1\":{\"993\":2,\"994\":3,\"999\":4,\"1000\":1,\"1003\":2,\"1004\":1}}],[\"some\",{\"1\":{\"3246\":1}}],[\"somemethod\",{\"1\":{\"519\":1}}],[\"someclass\",{\"1\":{\"519\":1}}],[\"someserviceimpl\",{\"1\":{\"490\":1}}],[\"someservice\",{\"1\":{\"490\":1}}],[\"south\",{\"1\":{\"286\":2}}],[\"sourceformat\",{\"1\":{\"1974\":3}}],[\"sourcefile\",{\"1\":{\"728\":1,\"2843\":2,\"2849\":2,\"2856\":2,\"2866\":2,\"2867\":2,\"2880\":2}}],[\"sources\",{\"1\":{\"1763\":1}}],[\"sources<\",{\"1\":{\"999\":1}}],[\"source=127\",{\"1\":{\"1763\":1}}],[\"sourcechannel\",{\"1\":{\"1232\":3,\"2915\":2,\"3117\":1}}],[\"sourcepath\",{\"1\":{\"1232\":2,\"1321\":3,\"1974\":3,\"1987\":3,\"2837\":2,\"2915\":2}}],[\"sourceversion\",{\"1\":{\"1087\":1,\"3147\":2,\"3162\":1}}],[\"sourceencoding>\",{\"1\":{\"999\":1,\"1005\":1}}],[\"sourceencoding>utf\",{\"1\":{\"999\":1,\"1005\":1}}],[\"source>\",{\"1\":{\"941\":1,\"956\":1}}],[\"source`\",{\"1\":{\"232\":1,\"1684\":1,\"1687\":3}}],[\"source\",{\"1\":{\"113\":1,\"125\":3,\"232\":7,\"990\":1,\"999\":1,\"1064\":1,\"1065\":1,\"1087\":1,\"1321\":4,\"1624\":1,\"1640\":1,\"1641\":1,\"1684\":7,\"1732\":1,\"1799\":1,\"1825\":1,\"1974\":1,\"1987\":1,\"2833\":1,\"2843\":1,\"2856\":1,\"2868\":4,\"2880\":1,\"2915\":1,\"3135\":1,\"3162\":1}}],[\"sortedset\",{\"1\":{\"3007\":1}}],[\"sortedset<integer>\",{\"1\":{\"2661\":1}}],[\"sortedmap<integer\",{\"1\":{\"3086\":2}}],[\"sortedmap<string\",{\"1\":{\"2670\":1,\"2881\":2}}],[\"sortedmap\",{\"1\":{\"2881\":1,\"3007\":1}}],[\"sortedbyvaluedesc\",{\"1\":{\"2408\":2}}],[\"sortedbykeyasc\",{\"1\":{\"2408\":2}}],[\"sortedbyage\",{\"1\":{\"2329\":2}}],[\"sortedpersons\",{\"1\":{\"1182\":3}}],[\"sortedlist\",{\"1\":{\"1182\":3}}],[\"sortednumbers\",{\"1\":{\"543\":1,\"2371\":7}}],[\"sorted\",{\"1\":{\"130\":2,\"543\":1,\"2329\":1,\"2408\":2}}],[\"sortmemory\",{\"1\":{\"125\":1}}],[\"sort\",{\"1\":{\"48\":1,\"85\":1,\"1170\":1,\"1182\":2,\"1475\":1,\"2149\":1,\"2326\":3,\"2357\":3,\"2768\":1,\"3047\":1,\"3103\":1}}],[\"se\",{\"1\":{\"3013\":1}}],[\"sequence\",{\"1\":{\"2892\":1,\"3240\":3}}],[\"sequencestream\",{\"1\":{\"2891\":2,\"2892\":2,\"2893\":2,\"2897\":2}}],[\"sequencestructuredemo\",{\"1\":{\"2123\":1}}],[\"sequenceinputstream与管道流\",{\"1\":{\"2897\":1}}],[\"sequenceinputstream和其他流组合方式\",{\"1\":{\"2897\":1}}],[\"sequenceinputstream提供两种构造方法来组合输入流\",{\"1\":{\"2890\":1}}],[\"sequenceinputstream的构造方法\",{\"0\":{\"2890\":1}}],[\"sequenceinputstream\",{\"1\":{\"2887\":1,\"2890\":2,\"2891\":3,\"2892\":3,\"2893\":2,\"2897\":4}}],[\"sequentialsearch\",{\"1\":{\"2721\":1}}],[\"sel\",{\"1\":{\"2916\":1}}],[\"selinux\",{\"1\":{\"1610\":1,\"1672\":1,\"3268\":1}}],[\"selinux=disabled\",{\"1\":{\"1610\":1,\"1672\":1,\"3268\":1}}],[\"selinux=enforcing\",{\"1\":{\"1610\":1,\"1672\":1,\"3268\":1}}],[\"selectbyrole\",{\"1\":{\"3052\":1}}],[\"selectbyid\",{\"1\":{\"3052\":2,\"3164\":1}}],[\"selectnone\",{\"1\":{\"1467\":2}}],[\"selectall\",{\"1\":{\"1467\":2}}],[\"selectlike\",{\"1\":{\"1440\":1}}],[\"selectionkeys\",{\"1\":{\"1228\":2,\"1315\":2,\"2916\":2,\"3118\":2}}],[\"selectionkey\",{\"1\":{\"1228\":6,\"1315\":5,\"1324\":5,\"2916\":6,\"2921\":10,\"3079\":3,\"3118\":9}}],[\"selectorserver\",{\"1\":{\"3118\":1}}],[\"selector多路复用服务端示例\",{\"1\":{\"3118\":1}}],[\"selector多客户端通信示例\",{\"1\":{\"1228\":1}}],[\"selector服务端示例\",{\"1\":{\"3118\":1}}],[\"selector是nio实现多路复用的核心组件\",{\"1\":{\"3118\":1}}],[\"selector是nio实现非阻塞io的核心组件\",{\"1\":{\"1228\":1,\"2916\":1}}],[\"selector选择器\",{\"0\":{\"3118\":1}}],[\"selector线程瓶颈\",{\"1\":{\"3090\":1}}],[\"selector的工作流程\",{\"1\":{\"3118\":1}}],[\"selector的工作原理\",{\"0\":{\"1228\":1}}],[\"selector的核心操作\",{\"1\":{\"2916\":1}}],[\"selectorexample\",{\"1\":{\"2916\":1}}],[\"selector示例\",{\"1\":{\"2916\":1}}],[\"selector注册selectionkey就是观察者模式的应用\",{\"1\":{\"1330\":1}}],[\"selector空轮询问题\",{\"0\":{\"1237\":1},\"1\":{\"2920\":1}}],[\"selector\",{\"0\":{\"2916\":1},\"1\":{\"1228\":11,\"1237\":2,\"1315\":8,\"1324\":7,\"1648\":3,\"1649\":3,\"1650\":21,\"1660\":1,\"1661\":1,\"1685\":3,\"1688\":3,\"1698\":1,\"1713\":23,\"2911\":1,\"2916\":12,\"2921\":20,\"3079\":8,\"3118\":7,\"3276\":1}}],[\"selector实现多客户端通信\",{\"1\":{\"1228\":1}}],[\"selector支持多路复用\",{\"1\":{\"1227\":1}}],[\"selected>本科<\",{\"1\":{\"1459\":1}}],[\"selectedkeys\",{\"1\":{\"1228\":1,\"1315\":1,\"1324\":1,\"2916\":2,\"2921\":4,\"3079\":1,\"3118\":1}}],[\"selected\",{\"1\":{\"997\":1,\"1459\":2,\"1460\":1,\"1464\":2,\"1465\":1}}],[\"select>\",{\"1\":{\"439\":2,\"1459\":1,\"1464\":1}}],[\"select必须有1个组\",{\"1\":{\"125\":1}}],[\"selects=1或set\",{\"1\":{\"125\":1}}],[\"select将检查超过max\",{\"1\":{\"125\":1}}],[\"select\",{\"1\":{\"119\":1,\"121\":1,\"123\":1,\"125\":10,\"167\":1,\"198\":1,\"366\":1,\"438\":2,\"439\":2,\"1228\":1,\"1237\":2,\"1315\":1,\"1324\":1,\"1459\":3,\"1575\":9,\"1816\":1,\"1827\":3,\"1831\":2,\"1833\":4,\"2066\":3,\"2916\":2,\"2921\":2,\"3005\":1,\"3052\":2,\"3079\":1,\"3090\":1,\"3118\":1,\"3129\":1,\"3164\":2}}],[\"sed\",{\"1\":{\"1610\":2,\"1672\":2,\"1868\":1,\"3268\":1}}],[\"segment数组\",{\"1\":{\"2541\":1}}],[\"segment分段锁机制\",{\"1\":{\"2403\":1}}],[\"segment\",{\"1\":{\"1197\":1,\"2400\":1,\"2520\":1,\"2541\":1}}],[\"seek\",{\"1\":{\"2849\":1}}],[\"seed\",{\"1\":{\"1560\":1,\"3021\":5}}],[\"see\",{\"0\":{\"1669\":1},\"1\":{\"994\":2,\"1578\":2}}],[\"se适配\",{\"1\":{\"289\":1}}],[\"separator实现跨平台路径处理\",{\"1\":{\"2836\":1}}],[\"separatorchar\",{\"1\":{\"746\":2,\"747\":2}}],[\"separator\",{\"1\":{\"286\":1,\"2897\":3}}],[\"ser\",{\"1\":{\"1225\":1}}],[\"serialpersistentfields\",{\"1\":{\"2288\":1}}],[\"serialversionuid\",{\"1\":{\"1225\":1,\"2288\":1,\"2490\":1}}],[\"serial的老年代版本\",{\"1\":{\"770\":1}}],[\"serial的多线程版本\",{\"1\":{\"769\":1}}],[\"serial\",{\"1\":{\"770\":1,\"795\":3,\"829\":3,\"863\":3,\"897\":3,\"1687\":1}}],[\"serial收集器\",{\"1\":{\"769\":1}}],[\"serializationexample\",{\"1\":{\"1225\":1}}],[\"serializable\",{\"1\":{\"348\":1,\"1225\":1,\"2263\":2,\"2287\":1,\"2734\":1,\"2938\":3}}],[\"serializerbytype\",{\"1\":{\"282\":2}}],[\"servlet规范\",{\"1\":{\"578\":1}}],[\"servletexception\",{\"1\":{\"456\":1,\"1431\":3,\"1440\":2,\"1443\":3,\"1444\":3}}],[\"servletcontext\",{\"1\":{\"286\":1}}],[\"servletrequestattributes\",{\"1\":{\"286\":2}}],[\"servlet\",{\"1\":{\"235\":2,\"269\":1,\"286\":1,\"434\":2,\"1431\":5,\"1443\":5,\"1444\":5}}],[\"serve\",{\"1\":{\"166\":1,\"173\":1}}],[\"server及其共享的目录\",{\"1\":{\"3276\":1}}],[\"servertransaction\",{\"1\":{\"3208\":12,\"3218\":4,\"3222\":6}}],[\"servertimezone=asia\",{\"1\":{\"1648\":1,\"1685\":1}}],[\"servertimezone=utc\",{\"1\":{\"235\":1,\"1644\":1}}],[\"server配置的redis\",{\"1\":{\"1788\":1}}],[\"server=utf8\",{\"1\":{\"1771\":2}}],[\"serverlog\",{\"1\":{\"1739\":1}}],[\"server2\",{\"1\":{\"1407\":1}}],[\"server1\",{\"1\":{\"1407\":1}}],[\"server<\",{\"1\":{\"1324\":1,\"2921\":1}}],[\"serverbootstrap\",{\"1\":{\"1111\":2,\"1332\":2,\"3124\":1,\"3125\":2}}],[\"serverid>\",{\"1\":{\"999\":1,\"1003\":1}}],[\"server>github<\",{\"1\":{\"999\":1}}],[\"server>\",{\"1\":{\"998\":1,\"999\":1}}],[\"server启动的端口\",{\"1\":{\"242\":1}}],[\"server启动的ip\",{\"1\":{\"242\":1}}],[\"server形成docker容器数据卷\",{\"1\":{\"242\":1}}],[\"server与seata容器目录\",{\"1\":{\"242\":1}}],[\"server命令后面加符号\",{\"1\":{\"1786\":1}}],[\"server命令\",{\"1\":{\"167\":1}}],[\"serversocket等网络资源必须显式关闭\",{\"1\":{\"3069\":1}}],[\"serversocket类表示服务器端套接字\",{\"1\":{\"3064\":1}}],[\"serversocket\",{\"1\":{\"1314\":4,\"2921\":6,\"3065\":8,\"3069\":1,\"3070\":4,\"3078\":4,\"3082\":4}}],[\"serversocketchannel\",{\"1\":{\"1228\":11,\"1238\":3,\"1315\":10,\"1324\":10,\"2915\":1,\"2916\":11,\"2921\":14,\"3079\":9,\"3117\":1,\"3118\":10,\"3120\":4}}],[\"servers>\",{\"1\":{\"998\":1}}],[\"servers\",{\"1\":{\"122\":1,\"1535\":1}}],[\"server\",{\"0\":{\"1666\":1,\"3183\":1,\"3185\":1},\"1\":{\"98\":2,\"106\":1,\"115\":4,\"122\":3,\"125\":5,\"153\":1,\"165\":2,\"186\":1,\"216\":2,\"219\":2,\"225\":1,\"226\":1,\"233\":2,\"234\":2,\"235\":4,\"239\":1,\"240\":2,\"241\":2,\"242\":6,\"243\":2,\"244\":1,\"245\":1,\"250\":1,\"403\":1,\"404\":1,\"806\":1,\"840\":1,\"874\":1,\"908\":1,\"1005\":2,\"1094\":4,\"1111\":1,\"1369\":1,\"1370\":4,\"1379\":2,\"1385\":2,\"1389\":4,\"1390\":4,\"1395\":1,\"1396\":1,\"1397\":1,\"1402\":1,\"1404\":2,\"1405\":2,\"1406\":2,\"1407\":2,\"1408\":2,\"1409\":2,\"1417\":4,\"1517\":2,\"1520\":2,\"1530\":1,\"1532\":2,\"1533\":1,\"1535\":2,\"1536\":1,\"1546\":1,\"1548\":1,\"1558\":1,\"1564\":1,\"1578\":3,\"1583\":1,\"1638\":1,\"1641\":6,\"1643\":1,\"1648\":1,\"1661\":1,\"1667\":1,\"1677\":1,\"1685\":1,\"1765\":1,\"1770\":1,\"1778\":2,\"1780\":1,\"1786\":1,\"1798\":5,\"1799\":1,\"1895\":1,\"2956\":1,\"3065\":1,\"3070\":1,\"3079\":2,\"3107\":1,\"3237\":1,\"3244\":2,\"3246\":2,\"3250\":1,\"3273\":6,\"3275\":2,\"3276\":2,\"3282\":1}}],[\"service=num\",{\"1\":{\"3246\":1}}],[\"service=localhost\",{\"1\":{\"3104\":1}}],[\"service=http\",{\"1\":{\"1927\":1,\"1928\":1}}],[\"servicecommunicationexception\",{\"1\":{\"2960\":1}}],[\"serviceunavailableexception\",{\"1\":{\"2955\":1}}],[\"servicetype\",{\"1\":{\"1648\":1,\"1649\":1,\"1650\":10,\"1685\":1,\"1688\":1,\"1713\":11}}],[\"serviceaccountname\",{\"1\":{\"1661\":1,\"1698\":1,\"3276\":1}}],[\"serviceaccount\",{\"1\":{\"1648\":1,\"1649\":1,\"1650\":10,\"1661\":1,\"1685\":1,\"1688\":1,\"1698\":1,\"1713\":11}}],[\"serviceport\",{\"1\":{\"1648\":2,\"1649\":1,\"1650\":11,\"1685\":2,\"1688\":1,\"1713\":12}}],[\"servicepolicy\",{\"1\":{\"1648\":1,\"1649\":1,\"1650\":1,\"1685\":1,\"1688\":1,\"1713\":1}}],[\"servicemesh\",{\"1\":{\"1638\":1,\"1648\":5,\"1649\":5,\"1650\":23,\"1661\":1,\"1685\":5,\"1688\":5,\"1698\":1,\"1713\":25}}],[\"serviceexception\",{\"1\":{\"1253\":1,\"2959\":1}}],[\"services\",{\"1\":{\"250\":1,\"1535\":1,\"1548\":1,\"3246\":1,\"3250\":1}}],[\"service\",{\"1\":{\"101\":1,\"109\":1,\"119\":1,\"120\":1,\"235\":4,\"280\":4,\"338\":3,\"352\":1,\"354\":1,\"366\":1,\"438\":1,\"439\":1,\"440\":1,\"441\":1,\"490\":1,\"999\":1,\"1068\":1,\"1374\":2,\"1440\":2,\"1443\":4,\"1444\":4,\"1504\":7,\"1585\":6,\"1586\":1,\"1620\":5,\"1634\":2,\"1638\":3,\"1643\":4,\"1648\":8,\"1649\":7,\"1650\":11,\"1665\":1,\"1667\":2,\"1675\":2,\"1685\":8,\"1688\":7,\"1713\":12,\"1752\":5,\"1772\":1,\"1777\":1,\"1780\":1,\"1788\":2,\"1824\":1,\"1876\":1,\"1909\":1,\"1918\":1,\"1949\":1,\"2000\":1,\"2007\":1,\"2068\":1,\"2763\":1,\"2796\":2,\"2955\":1,\"3049\":1,\"3050\":1,\"3052\":1,\"3104\":2,\"3137\":4,\"3154\":1,\"3160\":2,\"3170\":1,\"3246\":1,\"3250\":5}}],[\"seasoncode\",{\"1\":{\"2821\":5}}],[\"season\",{\"1\":{\"2369\":2,\"2821\":2,\"2822\":3}}],[\"seata\",{\"1\":{\"237\":1,\"238\":1,\"239\":2,\"240\":3,\"241\":2,\"242\":16,\"243\":4,\"244\":1,\"245\":1}}],[\"seata启动成功但是没日志\",{\"1\":{\"237\":1}}],[\"search打开\",{\"1\":{\"302\":1}}],[\"search\",{\"0\":{\"302\":1},\"1\":{\"122\":3,\"253\":1,\"1004\":1,\"1508\":1,\"1513\":1,\"1568\":1,\"1588\":1,\"1593\":1,\"1598\":1,\"1603\":1,\"1636\":1,\"3245\":1}}],[\"sent\",{\"1\":{\"1595\":1,\"1881\":1}}],[\"sent状态\",{\"1\":{\"1311\":1}}],[\"sentinel2他就会把他的一票投给其中一方\",{\"1\":{\"182\":1}}],[\"sentinel在通知阶段要不断的去获取master\",{\"1\":{\"181\":1}}],[\"sentinel\",{\"1\":{\"176\":1,\"178\":7,\"182\":1}}],[\"sensitive\",{\"1\":{\"999\":2}}],[\"sensitive<\",{\"1\":{\"999\":5}}],[\"sendsipresponse\",{\"1\":{\"3232\":1}}],[\"sendack\",{\"1\":{\"3208\":1}}],[\"sendackforinvite\",{\"1\":{\"3208\":2}}],[\"sendasync\",{\"1\":{\"471\":1,\"491\":2}}],[\"sendresponse\",{\"1\":{\"3208\":3,\"3222\":1,\"3240\":1}}],[\"sendregister\",{\"1\":{\"3199\":1}}],[\"sendrequest\",{\"1\":{\"1094\":1,\"3190\":1,\"3199\":1}}],[\"senddata\",{\"1\":{\"1312\":1,\"1336\":2}}],[\"sendbase++\",{\"1\":{\"1312\":1}}],[\"sendbase\",{\"1\":{\"1312\":7}}],[\"sendinvite\",{\"1\":{\"1094\":2,\"3190\":2}}],[\"send\",{\"1\":{\"471\":2,\"529\":1,\"997\":1,\"1409\":1,\"1431\":1,\"1432\":1,\"1443\":4,\"3066\":1}}],[\"sendchannel\",{\"1\":{\"289\":4}}],[\"sendfile\",{\"1\":{\"216\":1,\"1232\":1,\"1321\":1,\"1385\":1,\"1417\":1,\"1595\":1}}],[\"seckill\",{\"1\":{\"1395\":2,\"1396\":2}}],[\"section\",{\"1\":{\"994\":2,\"3282\":2}}],[\"secs\",{\"1\":{\"774\":3}}],[\"securityexception\",{\"1\":{\"2990\":1,\"3238\":2}}],[\"securityfilterchain\",{\"1\":{\"2012\":2}}],[\"security\",{\"1\":{\"1352\":2,\"1548\":1,\"1560\":2,\"1578\":1,\"1610\":1,\"1697\":1,\"1734\":1,\"1736\":1,\"1764\":1,\"3214\":2,\"3215\":2,\"3246\":1}}],[\"securitymanagerdemo\",{\"1\":{\"2990\":1}}],[\"securitymanager\",{\"1\":{\"1271\":1,\"2974\":1,\"2990\":2}}],[\"securitycontext\",{\"1\":{\"1661\":1,\"1698\":1}}],[\"securitycontextholder\",{\"1\":{\"456\":1}}],[\"securityconfig\",{\"1\":{\"451\":1,\"456\":1,\"2012\":1}}],[\"security<\",{\"1\":{\"451\":1}}],[\"security依赖来简化安全认证的使用\",{\"1\":{\"451\":1}}],[\"securerandom\",{\"1\":{\"3214\":2,\"3237\":1}}],[\"secure\",{\"1\":{\"114\":1,\"125\":4}}],[\"secrets\",{\"1\":{\"1503\":4,\"2020\":2}}],[\"secret\",{\"1\":{\"303\":2,\"307\":1,\"456\":5,\"1677\":1}}],[\"secondaryok\",{\"1\":{\"1764\":1}}],[\"secondarydatasource\",{\"1\":{\"445\":1}}],[\"secondary\",{\"1\":{\"445\":4}}],[\"seconds\",{\"1\":{\"165\":1,\"172\":2,\"178\":2,\"193\":2,\"199\":1,\"200\":1,\"625\":1,\"626\":2,\"1186\":1,\"2465\":1,\"2467\":3,\"2523\":1,\"3082\":1,\"3225\":1,\"3235\":1,\"3271\":2,\"3273\":2}}],[\"second\",{\"1\":{\"122\":1,\"129\":1,\"171\":3,\"279\":1}}],[\"sec\",{\"1\":{\"113\":1,\"121\":1,\"193\":1,\"3282\":1}}],[\"sessionkey\",{\"1\":{\"3235\":4}}],[\"sessionname\",{\"1\":{\"3205\":1}}],[\"session>\",{\"1\":{\"2525\":1}}],[\"sessions\",{\"1\":{\"1898\":1,\"2525\":4}}],[\"sessions或c\",{\"1\":{\"1898\":1}}],[\"sessionaffinity\",{\"1\":{\"1648\":1,\"1649\":1,\"1650\":10,\"1685\":1,\"1688\":1,\"1713\":11}}],[\"session的存取都会占用服务器资源\",{\"1\":{\"304\":1}}],[\"session量大起来了的话复杂度也随之提高了\",{\"1\":{\"304\":1}}],[\"session只在认证服务上保存不就好了\",{\"1\":{\"304\":1}}],[\"session\",{\"1\":{\"91\":6,\"130\":2,\"304\":3,\"305\":1,\"306\":1,\"327\":2,\"1089\":1,\"2525\":8,\"3172\":1,\"3176\":1,\"3201\":1,\"3214\":1,\"3235\":10,\"3240\":2}}],[\"setversion\",{\"1\":{\"3205\":1}}],[\"setvalue\",{\"1\":{\"289\":1,\"1290\":2,\"2612\":1,\"2655\":2,\"2669\":1,\"2680\":1,\"3034\":2}}],[\"setfromtag\",{\"1\":{\"3205\":1}}],[\"setfromaddress\",{\"1\":{\"3205\":1}}],[\"setlocaltag\",{\"1\":{\"3209\":1}}],[\"setlogservice\",{\"1\":{\"3159\":1}}],[\"setlength\",{\"1\":{\"2265\":1}}],[\"setorigin\",{\"1\":{\"3205\":1}}],[\"setout\",{\"1\":{\"2909\":3}}],[\"setoperationdemo\",{\"1\":{\"2372\":1}}],[\"setheight\",{\"1\":{\"2745\":2}}],[\"setheader\",{\"1\":{\"269\":1,\"286\":2}}],[\"setwidth\",{\"1\":{\"2745\":2}}],[\"set提供排序功能\",{\"1\":{\"2542\":1}}],[\"setbalance\",{\"1\":{\"2750\":1}}],[\"setb\",{\"1\":{\"2372\":7}}],[\"set接口定义了集合的行为规范\",{\"1\":{\"2375\":1}}],[\"set接口常用于需要保证元素唯一性的场景\",{\"1\":{\"2361\":1}}],[\"set接口继承自collection接口\",{\"1\":{\"2361\":1}}],[\"set接口概述\",{\"0\":{\"2361\":1}}],[\"set等修改方法\",{\"1\":{\"2358\":1}}],[\"setnodeid\",{\"1\":{\"3235\":1}}],[\"setn\",{\"1\":{\"2358\":1}}],[\"setnameformat\",{\"1\":{\"3225\":1}}],[\"setnamehandle\",{\"1\":{\"2974\":2,\"3010\":2}}],[\"setnamemethod\",{\"1\":{\"2970\":2}}],[\"setname\",{\"1\":{\"450\":1,\"1203\":1,\"2091\":1,\"2115\":1,\"2734\":1,\"2795\":1,\"2969\":2,\"2970\":2,\"2974\":1,\"2983\":1,\"2986\":3,\"2993\":1,\"3010\":2,\"3085\":1}}],[\"setquantity\",{\"1\":{\"2047\":1}}],[\"set=utf8\",{\"1\":{\"1771\":1}}],[\"setenabledciphersuites\",{\"1\":{\"3237\":1}}],[\"setenabledprotocols\",{\"1\":{\"3237\":1}}],[\"setendtime\",{\"1\":{\"3209\":1}}],[\"setenforce\",{\"1\":{\"1610\":1,\"1672\":1}}],[\"seterr\",{\"1\":{\"2909\":3}}],[\"setexpiration\",{\"1\":{\"456\":1}}],[\"setint\",{\"1\":{\"2971\":1}}],[\"setinterval\",{\"1\":{\"1469\":1}}],[\"setid\",{\"1\":{\"381\":1,\"427\":1,\"1069\":1,\"2734\":1,\"3085\":1}}],[\"setkeepalive\",{\"1\":{\"1326\":1}}],[\"setkey\",{\"1\":{\"279\":1}}],[\"set2\",{\"1\":{\"1178\":1}}],[\"set1\",{\"1\":{\"1178\":1}}],[\"set和queue三大分支\",{\"1\":{\"1173\":1}}],[\"set<k>\",{\"1\":{\"2694\":1}}],[\"set<selectionkey>\",{\"1\":{\"1228\":1,\"1315\":1,\"2916\":1,\"2921\":1,\"3118\":1}}],[\"set<string>\",{\"1\":{\"1178\":2,\"1185\":1,\"2369\":8,\"2370\":1,\"2371\":1,\"2372\":7,\"2373\":3,\"2382\":1,\"2386\":1,\"2392\":2,\"2525\":1,\"2640\":1,\"3215\":1}}],[\"set<person>\",{\"1\":{\"1182\":1,\"2388\":1}}],[\"set<integer>\",{\"1\":{\"1182\":1,\"2371\":1,\"2712\":2}}],[\"set<\",{\"1\":{\"1087\":1,\"3147\":1,\"3162\":1}}],[\"set<map\",{\"1\":{\"289\":1}}],[\"setmaximumpoolsize\",{\"1\":{\"634\":1}}],[\"setmediainfo\",{\"1\":{\"3209\":1}}],[\"setmessage\",{\"1\":{\"429\":2,\"3240\":1}}],[\"setmethod\",{\"1\":{\"286\":1,\"3205\":1}}],[\"setattribute\",{\"1\":{\"3206\":3,\"3214\":2}}],[\"setautocommit\",{\"1\":{\"3005\":2}}],[\"setauthentication\",{\"1\":{\"456\":1}}],[\"seta\",{\"1\":{\"2372\":7}}],[\"setaccessible\",{\"1\":{\"1069\":1,\"1269\":2,\"1270\":2,\"2969\":1,\"2970\":1,\"2971\":2,\"2986\":1,\"2989\":3,\"2990\":1,\"2993\":1,\"2999\":2,\"3000\":1,\"3003\":1,\"3007\":2}}],[\"setage\",{\"1\":{\"450\":1,\"1069\":1,\"1203\":1,\"2091\":1,\"2969\":3,\"2970\":1,\"2983\":1}}],[\"setapplicationcontext\",{\"1\":{\"290\":1}}],[\"setproductid\",{\"1\":{\"2047\":1}}],[\"setprofilinglevel\",{\"1\":{\"1739\":3}}],[\"setproperty\",{\"1\":{\"1094\":2,\"3190\":1,\"3206\":2,\"3218\":6}}],[\"setprefix\",{\"1\":{\"382\":1}}],[\"setparameter\",{\"1\":{\"1738\":2,\"3215\":5}}],[\"setpathname\",{\"1\":{\"1094\":1,\"3190\":1}}],[\"setpassword\",{\"1\":{\"367\":1,\"2068\":1}}],[\"setdaemon\",{\"1\":{\"3225\":1}}],[\"setdatasource\",{\"1\":{\"368\":1}}],[\"setdialogid\",{\"1\":{\"3209\":1}}],[\"setdemo\",{\"1\":{\"2369\":1}}],[\"setdriverclassname\",{\"1\":{\"367\":1}}],[\"setdownloadresponse\",{\"1\":{\"286\":1}}],[\"setuncaughtexceptionhandler\",{\"1\":{\"1254\":1}}],[\"setusecache\",{\"1\":{\"710\":1}}],[\"setusername\",{\"1\":{\"367\":1,\"1069\":1,\"2068\":1,\"2733\":1}}],[\"setuserdao\",{\"1\":{\"325\":1}}],[\"seturl\",{\"1\":{\"367\":1}}],[\"setupmediastream\",{\"1\":{\"3232\":1}}],[\"setup\",{\"0\":{\"1665\":1},\"1\":{\"115\":1,\"116\":2,\"1354\":2,\"1767\":1,\"2020\":1,\"3166\":1}}],[\"settiming\",{\"1\":{\"3205\":1}}],[\"settings配置就好\",{\"1\":{\"1712\":1}}],[\"settings\",{\"0\":{\"1002\":1}}],[\"settings>\",{\"1\":{\"973\":1,\"981\":1}}],[\"settotag\",{\"1\":{\"3205\":1}}],[\"settotal\",{\"1\":{\"284\":1}}],[\"settoaddress\",{\"1\":{\"3205\":1}}],[\"settraversaldemo\",{\"1\":{\"2370\":1}}],[\"settcpnodelay\",{\"1\":{\"1326\":2}}],[\"setter和tostring\",{\"1\":{\"3007\":2}}],[\"setter\",{\"1\":{\"2750\":1,\"2771\":1,\"2999\":1,\"3000\":1,\"3003\":1}}],[\"setters\",{\"1\":{\"2388\":1}}],[\"setter等方法\",{\"1\":{\"1073\":1}}],[\"setter方法\",{\"1\":{\"2734\":1}}],[\"setter方法注入的优点是可以在实例化后再注入依赖对象\",{\"1\":{\"331\":1}}],[\"setter方法注入\",{\"0\":{\"325\":1},\"1\":{\"322\":1,\"325\":1}}],[\"setter方法或字段注入依赖对象\",{\"1\":{\"317\":1,\"319\":1}}],[\"setreplicas\",{\"1\":{\"3244\":1}}],[\"setremotetag\",{\"1\":{\"3209\":1}}],[\"setrequesturi\",{\"1\":{\"3205\":1}}],[\"setreuseaddress\",{\"1\":{\"3069\":2}}],[\"setreadonly\",{\"1\":{\"3005\":2}}],[\"setrecords\",{\"1\":{\"284\":1}}],[\"setrange\",{\"1\":{\"200\":1}}],[\"setcseqmethod\",{\"1\":{\"3205\":1}}],[\"setcseqnumber\",{\"1\":{\"3205\":1}}],[\"setcallid\",{\"1\":{\"3205\":1,\"3209\":1}}],[\"setcallback\",{\"1\":{\"710\":1}}],[\"setcity\",{\"1\":{\"3007\":1}}],[\"setcolor\",{\"1\":{\"2656\":10}}],[\"setconnectioninfo\",{\"1\":{\"3205\":1}}],[\"setcontent\",{\"1\":{\"3190\":1,\"3208\":1}}],[\"setcontentlength\",{\"1\":{\"1094\":1}}],[\"setcontenttype\",{\"1\":{\"286\":1,\"1431\":1,\"1440\":1,\"1443\":1,\"1444\":1}}],[\"setcondition\",{\"1\":{\"660\":1}}],[\"setcode\",{\"1\":{\"429\":2}}],[\"setcurrent\",{\"1\":{\"284\":1}}],[\"setcharacterencoding\",{\"1\":{\"269\":1,\"286\":1,\"1431\":1,\"1440\":1,\"1443\":1,\"1444\":1}}],[\"setsslcontext\",{\"1\":{\"3237\":1}}],[\"setstate\",{\"1\":{\"3209\":3,\"3223\":1}}],[\"setstatus\",{\"1\":{\"430\":1}}],[\"setstarttime\",{\"1\":{\"3209\":1}}],[\"setsession\",{\"1\":{\"3240\":1}}],[\"setsessionname\",{\"1\":{\"3205\":1}}],[\"setsecuritymanager\",{\"1\":{\"2990\":1}}],[\"setsdpinfo\",{\"1\":{\"3205\":1}}],[\"setsdpcontent\",{\"1\":{\"3205\":1,\"3209\":1}}],[\"setscore\",{\"1\":{\"2734\":1}}],[\"setsortdemo\",{\"1\":{\"2371\":1}}],[\"setsotimeout\",{\"1\":{\"1326\":1,\"1339\":1,\"3069\":1}}],[\"sets复制集用于在多台服务器之间备份数据\",{\"1\":{\"1739\":1}}],[\"sets\",{\"1\":{\"1178\":1}}],[\"setsipversion\",{\"1\":{\"3205\":1}}],[\"setsigningkey\",{\"1\":{\"456\":2}}],[\"setsize\",{\"1\":{\"284\":1}}],[\"setsuperclass\",{\"1\":{\"710\":1}}],[\"setsubject\",{\"1\":{\"456\":1}}],[\"setsuffix\",{\"1\":{\"382\":1}}],[\"setsheetname\",{\"1\":{\"270\":1,\"278\":1}}],[\"setslot\",{\"1\":{\"208\":1}}],[\"set4\",{\"1\":{\"135\":1}}],[\"set类型\",{\"1\":{\"135\":1}}],[\"set\",{\"0\":{\"1664\":1,\"2359\":1},\"1\":{\"39\":1,\"99\":1,\"112\":1,\"113\":1,\"121\":1,\"125\":11,\"130\":2,\"131\":1,\"140\":3,\"165\":1,\"200\":3,\"216\":6,\"219\":1,\"261\":1,\"285\":6,\"289\":1,\"438\":1,\"439\":1,\"993\":1,\"1005\":2,\"1059\":1,\"1174\":1,\"1178\":1,\"1185\":2,\"1191\":1,\"1194\":1,\"1198\":2,\"1228\":1,\"1269\":2,\"1280\":1,\"1326\":1,\"1478\":3,\"1484\":1,\"1495\":1,\"1558\":1,\"1610\":1,\"1640\":1,\"1676\":1,\"1687\":1,\"1759\":1,\"1764\":2,\"1771\":1,\"1774\":3,\"1775\":1,\"1787\":1,\"1788\":2,\"1819\":1,\"1821\":1,\"1822\":1,\"1825\":3,\"1826\":1,\"1827\":4,\"1831\":3,\"1857\":2,\"1869\":2,\"2020\":1,\"2314\":1,\"2324\":1,\"2358\":2,\"2369\":1,\"2373\":1,\"2382\":4,\"2439\":1,\"2450\":1,\"2495\":1,\"2498\":1,\"2525\":1,\"2916\":1,\"2921\":1,\"2971\":3,\"2990\":1,\"2993\":4,\"2999\":1,\"3000\":1,\"3007\":3,\"3046\":1,\"3147\":1,\"3164\":1,\"3235\":1,\"3265\":4,\"3282\":1}}],[\"shuffle\",{\"1\":{\"2326\":1}}],[\"shutdownserver\",{\"1\":{\"1764\":1}}],[\"shutdowngracefully\",{\"1\":{\"1111\":2,\"1332\":2,\"3125\":2}}],[\"shutdownnow\",{\"1\":{\"633\":1}}],[\"shutdown\",{\"1\":{\"125\":3,\"592\":1,\"625\":1,\"626\":2,\"633\":1,\"1135\":1,\"1186\":1,\"1254\":1,\"1780\":2,\"1837\":2,\"2466\":1,\"2522\":1,\"2523\":1,\"2524\":1,\"3217\":2,\"3218\":4}}],[\"shr\",{\"1\":{\"1882\":1}}],[\"sh中文件内容复制下来然后运行\",{\"1\":{\"1869\":1}}],[\"shift\",{\"1\":{\"1857\":1}}],[\"shift+g\",{\"1\":{\"1731\":1}}],[\"sh脚本中的仓库推送地址\",{\"1\":{\"1646\":1}}],[\"shortcircuitor\",{\"1\":{\"2111\":1}}],[\"shortcircuitand\",{\"1\":{\"2111\":1}}],[\"short\",{\"1\":{\"2080\":1,\"2099\":1,\"2101\":1,\"2766\":1,\"3007\":1}}],[\"shouldreturnuser\",{\"1\":{\"3166\":1}}],[\"should\",{\"1\":{\"1578\":1}}],[\"showmount\",{\"1\":{\"3275\":1}}],[\"showduplicates\",{\"1\":{\"1475\":1}}],[\"show无法发出\",{\"1\":{\"125\":1}}],[\"show\",{\"1\":{\"80\":1,\"81\":1,\"82\":1,\"109\":1,\"112\":3,\"113\":2,\"115\":1,\"119\":1,\"123\":1,\"125\":2,\"1440\":7,\"1443\":1,\"1569\":1,\"1660\":1,\"1817\":1,\"1818\":1,\"1822\":1,\"1826\":1,\"1830\":1,\"3282\":1}}],[\"shell\",{\"1\":{\"3246\":1}}],[\"shell>\",{\"1\":{\"115\":2}}],[\"shenandoah等低延迟收集器\",{\"1\":{\"818\":1,\"852\":1,\"886\":1,\"920\":1}}],[\"sheet1\",{\"1\":{\"269\":1}}],[\"sheet\",{\"1\":{\"269\":3,\"278\":2}}],[\"sheet配置器\",{\"1\":{\"269\":1}}],[\"sheetconfigurator\",{\"1\":{\"269\":4,\"273\":1}}],[\"sh\",{\"1\":{\"248\":6,\"250\":2,\"264\":6,\"280\":10,\"1369\":3,\"1370\":2,\"1462\":3,\"1504\":3,\"1528\":1,\"1531\":1,\"1532\":2,\"1533\":2,\"1534\":2,\"1535\":2,\"1607\":1,\"1628\":1,\"1630\":1,\"1633\":1,\"1635\":2,\"1637\":3,\"1656\":15,\"1677\":2,\"1711\":15,\"1717\":1,\"1834\":4,\"1859\":1,\"1868\":2,\"1869\":4,\"1908\":3,\"3100\":1,\"3245\":2,\"3246\":1,\"3263\":1,\"3271\":1,\"3273\":1}}],[\"sha384\",{\"1\":{\"3237\":1}}],[\"shanghai\",{\"1\":{\"1535\":2,\"1648\":1,\"1685\":1}}],[\"shapecalculator\",{\"1\":{\"1209\":2,\"2742\":1}}],[\"shape\",{\"1\":{\"1206\":1,\"1209\":14,\"2742\":9,\"2808\":3}}],[\"sha\",{\"1\":{\"483\":1}}],[\"shadow\",{\"1\":{\"125\":1}}],[\"share目录\",{\"1\":{\"1785\":1}}],[\"shared\",{\"1\":{\"125\":10,\"1735\":4,\"1885\":2}}],[\"share\",{\"1\":{\"113\":1,\"118\":1,\"1354\":1,\"1510\":1,\"1512\":3,\"1518\":1,\"1526\":2,\"1548\":1,\"1595\":1,\"1697\":1,\"3246\":1}}],[\"sharding\",{\"1\":{\"39\":1,\"1687\":1}}],[\"st1q\",{\"1\":{\"1578\":2,\"1607\":1}}],[\"st\",{\"1\":{\"1578\":1,\"3007\":3}}],[\"stdout\",{\"1\":{\"1564\":3}}],[\"stdin\",{\"1\":{\"280\":1,\"1656\":1,\"1711\":1}}],[\"style\",{\"1\":{\"1470\":1}}],[\"style=\",{\"1\":{\"1463\":1,\"1467\":4,\"1469\":6}}],[\"style>\",{\"1\":{\"1440\":1,\"1463\":1}}],[\"student\",{\"1\":{\"2577\":6,\"2734\":3}}],[\"study\",{\"1\":{\"1459\":1}}],[\"studio\",{\"1\":{\"280\":1,\"1656\":1,\"1711\":1}}],[\"stub\",{\"1\":{\"1416\":1,\"1779\":1}}],[\"stunresponse\",{\"1\":{\"3224\":1}}],[\"stun\",{\"1\":{\"3224\":2}}],[\"stunmessage\",{\"1\":{\"1104\":1}}],[\"stunclient\",{\"1\":{\"1104\":4,\"3224\":4}}],[\"stunaddress\",{\"1\":{\"1104\":4}}],[\"stunport\",{\"1\":{\"1104\":2}}],[\"stunserver\",{\"1\":{\"1104\":2}}],[\"stereotype\",{\"1\":{\"290\":1,\"3159\":1,\"3160\":1}}],[\"steps\",{\"1\":{\"280\":3,\"993\":1,\"994\":1,\"1656\":4,\"1711\":4,\"2020\":1}}],[\"stmt\",{\"1\":{\"125\":7}}],[\"storm与kafka配合\",{\"1\":{\"189\":1}}],[\"store\",{\"1\":{\"125\":1,\"1527\":2,\"1638\":1}}],[\"storagepath\",{\"1\":{\"1962\":5}}],[\"storageclass\",{\"1\":{\"1638\":2,\"3278\":2}}],[\"storage=elasticsearch`\",{\"1\":{\"1555\":1}}],[\"storage=elasticsearch7改为sw\",{\"1\":{\"1555\":1}}],[\"storage\",{\"1\":{\"122\":1,\"125\":1,\"1542\":2,\"1554\":1,\"1615\":1,\"1642\":4,\"1675\":1,\"1734\":4,\"1746\":1,\"1764\":2,\"3276\":1}}],[\"stopped\",{\"1\":{\"3273\":3}}],[\"stopsignal\",{\"1\":{\"3246\":1}}],[\"stopbtn\",{\"1\":{\"1469\":2,\"1470\":2}}],[\"stop\",{\"1\":{\"103\":1,\"111\":1,\"112\":1,\"113\":2,\"125\":1,\"202\":2,\"204\":1,\"241\":1,\"1416\":1,\"1417\":1,\"1504\":1,\"1574\":1,\"1585\":1,\"1610\":2,\"1630\":2,\"1667\":1,\"1671\":1,\"1672\":1,\"1719\":1,\"1741\":1,\"1776\":1,\"1788\":2,\"1876\":1,\"1923\":1,\"3245\":2,\"3246\":2,\"3268\":1}}],[\"stagingrepositories\",{\"1\":{\"1004\":1}}],[\"staging\",{\"1\":{\"999\":2,\"1003\":2}}],[\"stage\",{\"1\":{\"280\":3,\"1656\":4,\"1711\":4}}],[\"stages\",{\"1\":{\"280\":1,\"1656\":1,\"1711\":1}}],[\"stamp\",{\"1\":{\"676\":8}}],[\"standardopenoption\",{\"1\":{\"1232\":5,\"1238\":3,\"2917\":4}}],[\"standard\",{\"0\":{\"471\":1,\"788\":1,\"789\":1,\"822\":1,\"823\":1,\"856\":1,\"857\":1,\"890\":1,\"891\":1}}],[\"standardcharsets\",{\"1\":{\"269\":2,\"1236\":1,\"1315\":2,\"1324\":2,\"2837\":2,\"2855\":3,\"2878\":2,\"2879\":2,\"2880\":2,\"2903\":2,\"2909\":1,\"2951\":1}}],[\"stable\",{\"1\":{\"265\":1,\"1472\":1,\"1617\":2,\"1749\":1,\"3266\":4}}],[\"stale\",{\"1\":{\"166\":1,\"173\":1}}],[\"stacktrace\",{\"1\":{\"2936\":2}}],[\"stacktraceelement\",{\"1\":{\"2936\":2}}],[\"stacktracedemo\",{\"1\":{\"2936\":1}}],[\"stack暴露了过多的公共方法\",{\"1\":{\"2564\":1}}],[\"stack的线程安全问题\",{\"0\":{\"2561\":1}}],[\"stack的设计缺陷\",{\"0\":{\"2557\":1}}],[\"stack继承自vector\",{\"1\":{\"2557\":1,\"2564\":1}}],[\"stack<>\",{\"1\":{\"2554\":1}}],[\"stack<character>\",{\"1\":{\"2554\":1}}],[\"stack核心方法实现\",{\"0\":{\"2551\":1}}],[\"stack是基于vector实现的后进先出\",{\"1\":{\"2547\":1}}],[\"stack与queue类结构分析\",{\"0\":{\"2547\":1}}],[\"stackoverflow\",{\"1\":{\"1507\":1}}],[\"stackoverflowerror是虚拟机错误\",{\"1\":{\"1243\":1}}],[\"stackoverflowerror\",{\"0\":{\"701\":1},\"1\":{\"693\":1,\"710\":1}}],[\"stackdemo\",{\"1\":{\"1145\":1}}],[\"stackdepth++\",{\"1\":{\"710\":1}}],[\"stackdepth\",{\"1\":{\"710\":2}}],[\"stacksof\",{\"1\":{\"710\":3}}],[\"stackvar\",{\"1\":{\"693\":2}}],[\"stack=\",{\"1\":{\"125\":2}}],[\"stack\",{\"0\":{\"2545\":1,\"2936\":1},\"1\":{\"125\":2,\"1094\":1,\"2316\":1,\"2468\":7,\"2506\":9,\"2548\":1,\"2554\":5,\"3103\":1,\"3190\":1,\"3206\":1,\"3218\":1}}],[\"statistics=0\",{\"1\":{\"1823\":1}}],[\"static<\",{\"1\":{\"3097\":1}}],[\"staticgenericmethoddemo\",{\"1\":{\"3024\":1}}],[\"staticfield\",{\"1\":{\"2971\":6}}],[\"static与实例成员\",{\"1\":{\"2813\":1}}],[\"static表示成员属于类而不是实例\",{\"1\":{\"2085\":1}}],[\"static和final是两个不同的概念\",{\"1\":{\"2085\":1}}],[\"static导入导致命名冲突\",{\"1\":{\"1052\":1}}],[\"staticpitfalls\",{\"1\":{\"1052\":2}}],[\"staticnestedclass\",{\"1\":{\"1037\":3,\"1052\":1}}],[\"staticvar++\",{\"1\":{\"1037\":1}}],[\"staticvar\",{\"1\":{\"1037\":8}}],[\"staticdemo\",{\"1\":{\"1037\":8}}],[\"static关键字定义静态方法\",{\"1\":{\"2808\":1}}],[\"static关键字使用误区示例\",{\"1\":{\"1052\":1}}],[\"static关键字使用示例\",{\"1\":{\"1037\":1}}],[\"static关键字常见错误\",{\"0\":{\"1052\":1}}],[\"static关键字用法\",{\"0\":{\"1037\":1}}],[\"staticcollectionleak\",{\"1\":{\"781\":1}}],[\"staticmethodlock\",{\"1\":{\"641\":1}}],[\"staticmethod\",{\"1\":{\"542\":2,\"1037\":2,\"1052\":1,\"2970\":4}}],[\"static\",{\"1\":{\"269\":2,\"279\":6,\"281\":4,\"283\":5,\"284\":1,\"286\":8,\"287\":4,\"289\":10,\"290\":4,\"291\":1,\"293\":1,\"307\":2,\"392\":1,\"393\":1,\"456\":5,\"471\":1,\"479\":2,\"500\":1,\"501\":3,\"502\":1,\"542\":2,\"592\":1,\"609\":1,\"610\":1,\"613\":2,\"625\":1,\"626\":1,\"641\":1,\"654\":1,\"675\":3,\"676\":2,\"677\":2,\"693\":2,\"694\":1,\"710\":6,\"711\":1,\"727\":1,\"729\":1,\"745\":1,\"746\":1,\"772\":1,\"773\":1,\"781\":1,\"1034\":1,\"1037\":5,\"1038\":1,\"1040\":1,\"1041\":1,\"1043\":1,\"1044\":5,\"1052\":5,\"1055\":1,\"1056\":1,\"1058\":3,\"1068\":1,\"1069\":3,\"1081\":2,\"1087\":1,\"1094\":1,\"1095\":1,\"1144\":1,\"1145\":2,\"1147\":1,\"1150\":1,\"1151\":2,\"1160\":1,\"1161\":3,\"1162\":2,\"1164\":4,\"1165\":2,\"1166\":2,\"1170\":3,\"1178\":1,\"1179\":1,\"1181\":3,\"1182\":2,\"1185\":2,\"1186\":1,\"1190\":1,\"1191\":1,\"1193\":1,\"1194\":1,\"1221\":3,\"1222\":1,\"1224\":6,\"1225\":3,\"1228\":3,\"1232\":1,\"1238\":3,\"1243\":3,\"1246\":2,\"1247\":2,\"1250\":4,\"1260\":1,\"1264\":3,\"1267\":1,\"1269\":1,\"1270\":1,\"1280\":1,\"1294\":1,\"1295\":2,\"1296\":2,\"1314\":1,\"1315\":3,\"1321\":3,\"1324\":3,\"1332\":2,\"1393\":1,\"1402\":3,\"1617\":2,\"1749\":1,\"1779\":1,\"1974\":2,\"1975\":1,\"1987\":2,\"1988\":1,\"1999\":2,\"2077\":2,\"2089\":1,\"2123\":1,\"2125\":1,\"2126\":1,\"2128\":1,\"2129\":1,\"2130\":1,\"2132\":1,\"2133\":1,\"2134\":2,\"2161\":1,\"2173\":1,\"2174\":1,\"2183\":1,\"2207\":2,\"2212\":1,\"2213\":1,\"2214\":1,\"2216\":1,\"2217\":1,\"2218\":1,\"2220\":1,\"2221\":1,\"2223\":1,\"2224\":1,\"2228\":4,\"2234\":1,\"2239\":1,\"2243\":1,\"2245\":1,\"2246\":1,\"2248\":1,\"2249\":1,\"2256\":2,\"2265\":1,\"2266\":1,\"2269\":5,\"2271\":1,\"2276\":2,\"2288\":2,\"2292\":1,\"2303\":1,\"2304\":1,\"2311\":1,\"2318\":2,\"2319\":1,\"2323\":1,\"2324\":1,\"2325\":1,\"2326\":1,\"2327\":8,\"2328\":2,\"2329\":2,\"2369\":1,\"2370\":1,\"2371\":1,\"2372\":1,\"2373\":1,\"2392\":1,\"2406\":1,\"2407\":1,\"2408\":1,\"2409\":5,\"2410\":1,\"2427\":1,\"2433\":4,\"2437\":1,\"2438\":1,\"2465\":1,\"2466\":6,\"2467\":2,\"2468\":1,\"2485\":1,\"2490\":2,\"2522\":4,\"2523\":2,\"2524\":4,\"2525\":1,\"2544\":1,\"2577\":1,\"2599\":2,\"2604\":1,\"2623\":1,\"2632\":1,\"2654\":1,\"2660\":1,\"2661\":1,\"2680\":1,\"2685\":1,\"2712\":1,\"2742\":2,\"2765\":1,\"2768\":2,\"2780\":1,\"2785\":3,\"2798\":2,\"2801\":1,\"2808\":2,\"2819\":1,\"2824\":1,\"2831\":1,\"2832\":1,\"2833\":1,\"2837\":2,\"2843\":1,\"2844\":1,\"2845\":1,\"2849\":4,\"2855\":1,\"2856\":1,\"2857\":1,\"2861\":1,\"2866\":2,\"2867\":1,\"2868\":7,\"2878\":1,\"2879\":1,\"2880\":1,\"2881\":2,\"2885\":1,\"2891\":1,\"2892\":1,\"2893\":1,\"2897\":1,\"2902\":1,\"2903\":1,\"2904\":1,\"2905\":1,\"2909\":1,\"2914\":1,\"2915\":1,\"2916\":3,\"2917\":1,\"2921\":4,\"2936\":4,\"2937\":1,\"2956\":1,\"2965\":1,\"2968\":1,\"2969\":1,\"2970\":2,\"2971\":2,\"2974\":1,\"2980\":2,\"2983\":1,\"2984\":1,\"2986\":2,\"2989\":1,\"2990\":1,\"2993\":2,\"2999\":2,\"3000\":2,\"3002\":4,\"3003\":2,\"3005\":2,\"3007\":5,\"3010\":1,\"3023\":1,\"3024\":3,\"3025\":2,\"3065\":2,\"3066\":2,\"3085\":1,\"3116\":1,\"3117\":1,\"3118\":3,\"3120\":1,\"3125\":2,\"3137\":2,\"3149\":1,\"3150\":2,\"3166\":2,\"3190\":1,\"3205\":2,\"3206\":1,\"3209\":2,\"3215\":1,\"3218\":1,\"3235\":2,\"3237\":1}}],[\"statelessservice\",{\"1\":{\"1648\":1,\"1649\":1,\"1650\":10,\"1685\":1,\"1688\":1,\"1713\":11}}],[\"statefulset\",{\"1\":{\"1648\":1,\"1649\":1,\"1650\":1,\"1685\":1,\"1688\":1,\"1713\":1}}],[\"state++\",{\"1\":{\"659\":1}}],[\"state和fifo等待队列实现同步功能\",{\"1\":{\"639\":1}}],[\"statements\",{\"1\":{\"537\":1}}],[\"statement\",{\"1\":{\"125\":1,\"1831\":1,\"2066\":1}}],[\"state\",{\"1\":{\"122\":1,\"659\":2,\"1788\":2,\"1880\":2,\"1881\":2,\"1923\":1,\"3087\":18,\"3208\":3,\"3209\":3,\"3222\":2,\"3223\":1,\"3268\":1}}],[\"stat\",{\"1\":{\"122\":1,\"125\":1,\"193\":1}}],[\"status`\",{\"1\":{\"1687\":2}}],[\"statuscode\",{\"1\":{\"471\":1,\"3208\":7}}],[\"status出错\",{\"1\":{\"125\":1}}],[\"status\",{\"1\":{\"101\":1,\"109\":2,\"112\":3,\"113\":1,\"125\":1,\"354\":1,\"429\":2,\"993\":1,\"1005\":2,\"1374\":1,\"1416\":1,\"1431\":1,\"1432\":1,\"1504\":1,\"1527\":1,\"1574\":1,\"1575\":1,\"1585\":1,\"1610\":2,\"1660\":2,\"1671\":1,\"1677\":2,\"1741\":2,\"1764\":3,\"1779\":1,\"1788\":1,\"1805\":1,\"1876\":2,\"1909\":1,\"1923\":1,\"2007\":1,\"2062\":2,\"2065\":1,\"2960\":1,\"3271\":1,\"3273\":2,\"3278\":2,\"3282\":1}}],[\"stats\",{\"1\":{\"80\":1,\"82\":1,\"113\":2,\"122\":2,\"1739\":1,\"1809\":1,\"1810\":1}}],[\"starting\",{\"1\":{\"3005\":1}}],[\"startindex\",{\"1\":{\"288\":3}}],[\"startposition\",{\"1\":{\"2849\":5}}],[\"startlimitinterval=60s\",{\"1\":{\"1620\":1,\"1752\":1}}],[\"startlimitburst=3\",{\"1\":{\"1620\":1,\"1752\":1}}],[\"startbtn\",{\"1\":{\"1469\":3,\"1470\":1}}],[\"start++\",{\"1\":{\"1443\":1}}],[\"started\",{\"1\":{\"1111\":1}}],[\"starters\",{\"1\":{\"396\":1}}],[\"starter\",{\"1\":{\"394\":3,\"398\":1,\"416\":3,\"428\":1,\"438\":2,\"439\":2,\"440\":2,\"449\":2,\"451\":2,\"3104\":1}}],[\"starttls\",{\"1\":{\"1644\":2}}],[\"starttime\",{\"1\":{\"1068\":2,\"1224\":4,\"1264\":6,\"1321\":4,\"2276\":6,\"2327\":8,\"2409\":6,\"2524\":2,\"2866\":2,\"2868\":4,\"3002\":2,\"3209\":1}}],[\"starttransaction\",{\"1\":{\"71\":1,\"91\":1}}],[\"startvirtualthread\",{\"1\":{\"526\":1,\"527\":2}}],[\"startflightrecording=duration=60s\",{\"1\":{\"480\":1}}],[\"startcontent\",{\"1\":{\"289\":6}}],[\"startswith\",{\"1\":{\"283\":1,\"456\":1,\"538\":1,\"543\":1,\"575\":1,\"2195\":2,\"2370\":1,\"2420\":3,\"3205\":6}}],[\"startsession\",{\"1\":{\"71\":1,\"91\":1}}],[\"startup\",{\"1\":{\"125\":1}}],[\"start\",{\"1\":{\"103\":1,\"111\":1,\"112\":2,\"113\":1,\"121\":1,\"125\":1,\"200\":1,\"202\":2,\"204\":1,\"267\":1,\"338\":1,\"526\":1,\"527\":1,\"592\":2,\"609\":1,\"610\":1,\"656\":1,\"675\":2,\"676\":2,\"677\":1,\"1041\":4,\"1043\":8,\"1056\":4,\"1111\":1,\"1123\":2,\"1179\":6,\"1250\":4,\"1254\":1,\"1314\":1,\"1369\":7,\"1370\":4,\"1371\":2,\"1372\":2,\"1373\":2,\"1374\":1,\"1443\":8,\"1444\":8,\"1504\":2,\"1574\":1,\"1585\":2,\"1586\":1,\"1620\":1,\"1630\":1,\"1646\":1,\"1719\":1,\"1752\":1,\"1772\":1,\"1876\":1,\"1896\":1,\"1909\":1,\"1923\":1,\"2269\":1,\"2311\":3,\"2328\":1,\"2854\":1,\"2921\":3,\"2986\":4,\"3078\":1,\"3125\":2,\"3208\":1,\"3240\":1,\"3246\":2}}],[\"strdata\",{\"1\":{\"3019\":1}}],[\"strobj\",{\"1\":{\"3019\":2}}],[\"strong\",{\"1\":{\"2676\":1}}],[\"strvalue\",{\"1\":{\"3003\":4}}],[\"str6\",{\"1\":{\"2188\":1}}],[\"str5\",{\"1\":{\"2188\":1}}],[\"str4\",{\"1\":{\"2188\":1,\"2239\":2}}],[\"str3\",{\"1\":{\"2188\":1,\"2239\":3}}],[\"strlists\",{\"1\":{\"3035\":1}}],[\"strlist\",{\"1\":{\"1301\":3,\"3017\":4,\"3035\":3}}],[\"strlen\",{\"1\":{\"200\":1}}],[\"strarr\",{\"1\":{\"2100\":1}}],[\"strarray\",{\"1\":{\"1295\":3,\"3023\":2,\"3024\":2,\"3025\":2}}],[\"strategy`\",{\"1\":{\"1687\":6}}],[\"strategy\",{\"1\":{\"440\":1,\"578\":1,\"1231\":1,\"1648\":2,\"1649\":2,\"1650\":11,\"1661\":1,\"1685\":2,\"1688\":2,\"1698\":1,\"1713\":12,\"3165\":1,\"3276\":1}}],[\"strsingleton\",{\"1\":{\"1294\":1}}],[\"strs\",{\"1\":{\"1170\":6}}],[\"str2仍指向原对象\",{\"1\":{\"1041\":1}}],[\"str2\",{\"1\":{\"1041\":2,\"1056\":1,\"2101\":1,\"2188\":1,\"2194\":6,\"2239\":2,\"3017\":1}}],[\"strutil\",{\"1\":{\"289\":1}}],[\"struct\",{\"1\":{\"125\":1}}],[\"str1\",{\"1\":{\"286\":2,\"1041\":5,\"1056\":1,\"2188\":1,\"2194\":6,\"2239\":3}}],[\"str\",{\"1\":{\"286\":2,\"289\":2,\"293\":3,\"472\":4,\"500\":4,\"504\":4,\"539\":2,\"1164\":23,\"1222\":2,\"1260\":2,\"1264\":4,\"1301\":1,\"2080\":1,\"2100\":1,\"2101\":2,\"2195\":7,\"2196\":6,\"2197\":2,\"2198\":1,\"2202\":2,\"2205\":7,\"2263\":6,\"2268\":4,\"2276\":2,\"2282\":3,\"2292\":2,\"2785\":3,\"2854\":2,\"2927\":2,\"3017\":1}}],[\"stream4\",{\"1\":{\"2892\":2}}],[\"stream3\",{\"1\":{\"2892\":2}}],[\"stream2\",{\"1\":{\"2891\":2,\"2892\":2}}],[\"stream1\",{\"1\":{\"2891\":2,\"2892\":2}}],[\"streamconversionexample\",{\"1\":{\"2855\":1}}],[\"streamcomparisonexample\",{\"1\":{\"1221\":1}}],[\"streams\",{\"1\":{\"2844\":1,\"2845\":1}}],[\"stream流\",{\"1\":{\"2325\":1}}],[\"stream过滤后\",{\"1\":{\"1190\":1}}],[\"stream操作中抛出的受检异常需要显式处理\",{\"1\":{\"553\":1}}],[\"stream操作的基本流程包括\",{\"1\":{\"543\":1}}],[\"stream只能使用一次\",{\"1\":{\"553\":1}}],[\"stream对象只能使用一次\",{\"1\":{\"543\":1}}],[\"stream<string>\",{\"1\":{\"472\":1,\"543\":2,\"553\":1}}],[\"stream<t>\",{\"1\":{\"269\":2}}],[\"stream\",{\"0\":{\"543\":1,\"550\":1,\"553\":1},\"1\":{\"130\":1,\"216\":1,\"269\":5,\"270\":1,\"278\":1,\"286\":2,\"292\":1,\"494\":1,\"537\":1,\"542\":1,\"543\":9,\"550\":1,\"553\":6,\"575\":3,\"1059\":1,\"1160\":4,\"1178\":2,\"1190\":1,\"1222\":1,\"1227\":1,\"1385\":1,\"1417\":1,\"1595\":1,\"1809\":1,\"2007\":1,\"2220\":2,\"2221\":2,\"2227\":1,\"2325\":1,\"2329\":6,\"2340\":1,\"2369\":1,\"2370\":1,\"2408\":5,\"2448\":1,\"2463\":1,\"2509\":1,\"2863\":1,\"2892\":1,\"2899\":1,\"2911\":1,\"2913\":1,\"3209\":1}}],[\"street=\",{\"1\":{\"3007\":3}}],[\"street\",{\"1\":{\"37\":1,\"47\":1,\"84\":1,\"3007\":5}}],[\"striptrailing\",{\"1\":{\"472\":1}}],[\"stripleading\",{\"1\":{\"472\":1}}],[\"strip\",{\"1\":{\"472\":1,\"1059\":1}}],[\"strippedright\",{\"1\":{\"472\":1}}],[\"strippedleft\",{\"1\":{\"472\":1}}],[\"stripped\",{\"1\":{\"472\":1}}],[\"strigger中\",{\"1\":{\"125\":1}}],[\"string不是number子类\",{\"1\":{\"3039\":1}}],[\"string不是number的子类\",{\"1\":{\"3025\":1}}],[\"string不可变性设计\",{\"0\":{\"1048\":1}}],[\"string不可变性演示\",{\"1\":{\"1041\":1}}],[\"string不可变性\",{\"1\":{\"1034\":1}}],[\"string不可变是因为其内部char数组被final修饰\",{\"1\":{\"703\":1}}],[\"stringgenerator\",{\"1\":{\"3021\":1}}],[\"stringdata\",{\"1\":{\"2857\":3}}],[\"stringdecoder\",{\"1\":{\"1332\":1,\"3125\":1}}],[\"stringdemo\",{\"1\":{\"1041\":1}}],[\"stringwriter写入的数据\",{\"1\":{\"2857\":1}}],[\"stringwriter\",{\"1\":{\"2857\":4}}],[\"stringreader读取的数据\",{\"1\":{\"2857\":1}}],[\"stringreader\",{\"1\":{\"2857\":3}}],[\"stringreader和stringwriter用于在内存中操作字符数据\",{\"1\":{\"2857\":1}}],[\"stringreverse\",{\"1\":{\"1164\":1,\"2207\":1}}],[\"stringvalue\",{\"1\":{\"2845\":2}}],[\"strings\",{\"1\":{\"2723\":4}}],[\"stringpooldemo\",{\"1\":{\"2303\":1}}],[\"stringperformancepitfalls\",{\"1\":{\"1056\":3}}],[\"string的不可变性是通过多重机制保证的\",{\"1\":{\"2298\":1}}],[\"string的类来替代核心类库中的string类\",{\"1\":{\"749\":1}}],[\"string重写了object的hashcode\",{\"1\":{\"2295\":1}}],[\"string重写了object的equals\",{\"1\":{\"2294\":1}}],[\"string构造方法对传入的数组参数进行深拷贝\",{\"1\":{\"2292\":1}}],[\"stringindexoutofboundsexception\",{\"1\":{\"2291\":3,\"2296\":3}}],[\"stringinterndemo\",{\"1\":{\"2245\":1}}],[\"string耗时\",{\"1\":{\"2276\":1}}],[\"stringtime\",{\"1\":{\"2276\":2}}],[\"stringconcatenationdemo\",{\"1\":{\"2304\":1}}],[\"stringconstructordemo\",{\"1\":{\"2292\":1}}],[\"stringconstantdemo\",{\"1\":{\"2239\":1}}],[\"stringcomparisondemo\",{\"1\":{\"2248\":1}}],[\"stringclassloader\",{\"1\":{\"745\":2}}],[\"stringutils\",{\"1\":{\"2205\":1}}],[\"string拼接性能测试\",{\"1\":{\"2276\":1}}],[\"string拼接\",{\"1\":{\"2202\":1}}],[\"stringencoder\",{\"1\":{\"1332\":1,\"3125\":1}}],[\"string新增方法\",{\"1\":{\"1059\":1}}],[\"string操作性能问题及优化\",{\"1\":{\"1056\":1}}],[\"string操作性能问题\",{\"0\":{\"1056\":1}}],[\"stringbuffer耗时\",{\"1\":{\"2276\":1}}],[\"stringbuffer性能测试\",{\"1\":{\"2276\":1}}],[\"stringbuffer结果长度\",{\"1\":{\"2269\":1}}],[\"stringbufferthreadsafedemo\",{\"1\":{\"2269\":1}}],[\"stringbuffer的append方法\",{\"1\":{\"2268\":1}}],[\"stringbuffer的使用\",{\"0\":{\"2267\":1}}],[\"stringbuffer与stringbuilder\",{\"1\":{\"2267\":1}}],[\"stringbuffer类定义\",{\"1\":{\"2263\":1}}],[\"stringbuffer\",{\"0\":{\"2275\":1},\"1\":{\"1041\":2,\"2201\":1,\"2263\":4,\"2268\":1,\"2269\":2,\"2275\":1,\"2276\":2,\"2279\":2,\"2310\":1}}],[\"stringbuilder耗时\",{\"1\":{\"2276\":1}}],[\"stringbuilder性能测试\",{\"1\":{\"2276\":1}}],[\"stringbuilder结果长度\",{\"1\":{\"2269\":1}}],[\"stringbuilder的append方法\",{\"1\":{\"2268\":1}}],[\"stringbuilder的使用\",{\"0\":{\"2264\":1}}],[\"stringbuilderchaindemo\",{\"1\":{\"2266\":1}}],[\"stringbuilderdemo\",{\"1\":{\"2265\":1}}],[\"stringbuilder是单线程环境下的首选可变字符串类\",{\"1\":{\"2264\":1}}],[\"stringbuilder类定义\",{\"1\":{\"2263\":1}}],[\"stringbuilder拼接\",{\"1\":{\"2202\":1}}],[\"stringbuilder拼接耗时\",{\"1\":{\"1041\":1,\"1056\":1}}],[\"stringbuilder与stringbuffer\",{\"0\":{\"2201\":1}}],[\"stringbuilder和stringbuffer用于处理可变字符串\",{\"1\":{\"1168\":1}}],[\"stringbuilder方式\",{\"1\":{\"1164\":1}}],[\"stringbuilder反转\",{\"1\":{\"1164\":1}}],[\"stringbuilder\",{\"0\":{\"2275\":1},\"1\":{\"1041\":2,\"1056\":2,\"1058\":4,\"1151\":2,\"1164\":1,\"2201\":1,\"2202\":2,\"2207\":1,\"2228\":2,\"2234\":2,\"2261\":1,\"2263\":4,\"2265\":2,\"2266\":1,\"2268\":1,\"2269\":2,\"2271\":2,\"2275\":1,\"2276\":2,\"2278\":4,\"2279\":4,\"2280\":4,\"2310\":1,\"2723\":2,\"2831\":2,\"2951\":2,\"3000\":2,\"3190\":2,\"3215\":2}}],[\"string类是不可变对象设计模式的经典实现\",{\"1\":{\"2307\":1}}],[\"string类中没有类似setcharat\",{\"1\":{\"2299\":1}}],[\"string类没有提供修改value数组的方法\",{\"1\":{\"2299\":1}}],[\"string类提供了多种构造方法\",{\"1\":{\"2290\":1}}],[\"string类核心字段\",{\"1\":{\"2289\":1}}],[\"string类定义\",{\"1\":{\"2287\":1}}],[\"string类的定义与结构\",{\"0\":{\"2286\":1}}],[\"string类的实现改为byte数组存储\",{\"1\":{\"2281\":1}}],[\"string类的不可变性通过类声明和内部存储结构实现\",{\"1\":{\"2240\":1}}],[\"string类的类加载器\",{\"1\":{\"745\":1}}],[\"string类不可变的设计原因\",{\"1\":{\"2207\":1}}],[\"string类被final修饰\",{\"1\":{\"2190\":1}}],[\"string类被设计为不可变的\",{\"1\":{\"1168\":1}}],[\"string类被设计为不可变的主要原因\",{\"1\":{\"1048\":1}}],[\"string类实现\",{\"1\":{\"2185\":1}}],[\"string类特性与常用操作示例\",{\"1\":{\"1041\":1}}],[\"string特性与操作\",{\"0\":{\"1041\":1}}],[\"stringlist\",{\"1\":{\"574\":3,\"3046\":3}}],[\"string>>\",{\"1\":{\"2420\":1}}],[\"string>转json\",{\"1\":{\"1439\":2}}],[\"string>不是list<\",{\"1\":{\"1288\":1}}],[\"string>\",{\"1\":{\"285\":1,\"289\":5,\"1066\":1,\"1291\":1,\"1439\":4,\"2409\":5,\"2419\":2,\"2420\":2,\"2427\":1,\"2605\":1,\"2612\":1,\"2632\":1,\"2668\":1,\"2669\":1,\"3028\":1,\"3041\":2}}],[\"string\",{\"0\":{\"2201\":1,\"2244\":1,\"2275\":1},\"1\":{\"59\":2,\"60\":1,\"125\":4,\"130\":1,\"131\":1,\"132\":1,\"267\":2,\"269\":3,\"270\":3,\"279\":7,\"283\":1,\"285\":7,\"286\":9,\"287\":4,\"289\":25,\"290\":1,\"291\":1,\"292\":2,\"293\":4,\"294\":4,\"307\":2,\"380\":2,\"392\":2,\"407\":5,\"428\":1,\"429\":1,\"430\":1,\"434\":2,\"440\":2,\"452\":2,\"456\":9,\"469\":1,\"471\":2,\"472\":7,\"473\":4,\"479\":2,\"495\":1,\"500\":3,\"501\":3,\"502\":5,\"504\":1,\"521\":1,\"529\":1,\"539\":1,\"543\":1,\"544\":5,\"545\":1,\"553\":2,\"554\":1,\"574\":2,\"578\":1,\"592\":2,\"609\":1,\"610\":1,\"625\":1,\"626\":1,\"643\":2,\"675\":1,\"676\":1,\"677\":1,\"693\":2,\"694\":1,\"710\":1,\"711\":1,\"727\":2,\"728\":7,\"729\":3,\"745\":2,\"746\":6,\"747\":5,\"772\":4,\"773\":1,\"1037\":1,\"1038\":3,\"1040\":4,\"1041\":12,\"1043\":5,\"1044\":2,\"1055\":2,\"1056\":9,\"1058\":1,\"1066\":1,\"1068\":2,\"1069\":4,\"1077\":2,\"1079\":1,\"1087\":2,\"1092\":1,\"1094\":4,\"1095\":7,\"1104\":2,\"1144\":1,\"1145\":1,\"1147\":1,\"1150\":1,\"1151\":3,\"1160\":1,\"1161\":1,\"1162\":1,\"1164\":9,\"1165\":4,\"1166\":4,\"1170\":5,\"1178\":1,\"1179\":4,\"1182\":5,\"1185\":1,\"1186\":1,\"1190\":3,\"1191\":1,\"1193\":1,\"1194\":1,\"1203\":3,\"1208\":2,\"1221\":6,\"1222\":3,\"1224\":2,\"1225\":5,\"1228\":3,\"1232\":3,\"1238\":6,\"1243\":2,\"1246\":1,\"1247\":2,\"1249\":6,\"1250\":1,\"1260\":5,\"1264\":4,\"1267\":3,\"1269\":5,\"1270\":8,\"1280\":1,\"1287\":1,\"1288\":1,\"1295\":2,\"1296\":1,\"1301\":1,\"1314\":2,\"1315\":4,\"1321\":7,\"1324\":8,\"1326\":2,\"1332\":2,\"1336\":4,\"1412\":1,\"1431\":1,\"1432\":1,\"1439\":5,\"1440\":2,\"1443\":3,\"1444\":3,\"1962\":5,\"1974\":5,\"1987\":4,\"1988\":1,\"1998\":1,\"1999\":1,\"2051\":6,\"2059\":1,\"2062\":1,\"2065\":2,\"2066\":2,\"2076\":4,\"2077\":3,\"2080\":1,\"2089\":1,\"2091\":4,\"2100\":3,\"2101\":3,\"2123\":1,\"2125\":1,\"2126\":1,\"2128\":1,\"2129\":1,\"2130\":1,\"2132\":1,\"2133\":1,\"2134\":1,\"2143\":1,\"2144\":4,\"2166\":1,\"2167\":2,\"2188\":10,\"2189\":5,\"2190\":1,\"2191\":3,\"2194\":2,\"2195\":1,\"2196\":6,\"2197\":7,\"2198\":6,\"2201\":1,\"2202\":2,\"2204\":3,\"2205\":1,\"2206\":1,\"2207\":5,\"2213\":2,\"2216\":1,\"2217\":1,\"2218\":1,\"2220\":1,\"2221\":2,\"2224\":3,\"2228\":3,\"2232\":2,\"2234\":1,\"2239\":7,\"2240\":5,\"2243\":3,\"2245\":8,\"2246\":8,\"2248\":7,\"2249\":8,\"2253\":1,\"2255\":1,\"2256\":4,\"2257\":1,\"2263\":2,\"2265\":1,\"2266\":2,\"2268\":2,\"2269\":1,\"2271\":1,\"2275\":1,\"2276\":2,\"2281\":3,\"2282\":1,\"2287\":1,\"2291\":5,\"2292\":3,\"2294\":3,\"2296\":4,\"2297\":1,\"2299\":1,\"2303\":6,\"2304\":10,\"2310\":1,\"2311\":5,\"2323\":1,\"2324\":2,\"2325\":2,\"2326\":1,\"2327\":1,\"2328\":1,\"2329\":11,\"2340\":3,\"2341\":2,\"2348\":1,\"2369\":1,\"2370\":3,\"2371\":1,\"2372\":1,\"2373\":1,\"2382\":2,\"2388\":1,\"2406\":1,\"2407\":2,\"2408\":1,\"2409\":1,\"2410\":1,\"2419\":2,\"2420\":2,\"2427\":1,\"2439\":1,\"2448\":3,\"2450\":3,\"2465\":1,\"2466\":1,\"2467\":3,\"2468\":1,\"2476\":2,\"2506\":3,\"2507\":4,\"2509\":8,\"2513\":5,\"2522\":1,\"2523\":2,\"2524\":2,\"2525\":5,\"2554\":1,\"2577\":4,\"2604\":1,\"2605\":3,\"2612\":1,\"2615\":2,\"2632\":1,\"2660\":1,\"2661\":1,\"2669\":1,\"2685\":5,\"2691\":1,\"2712\":1,\"2723\":5,\"2733\":3,\"2734\":8,\"2736\":2,\"2737\":1,\"2738\":3,\"2742\":1,\"2759\":4,\"2765\":1,\"2779\":3,\"2785\":3,\"2795\":3,\"2797\":1,\"2810\":2,\"2819\":1,\"2820\":1,\"2821\":3,\"2831\":2,\"2832\":3,\"2833\":1,\"2837\":4,\"2843\":3,\"2844\":5,\"2845\":3,\"2849\":10,\"2854\":2,\"2855\":4,\"2856\":4,\"2857\":5,\"2861\":4,\"2866\":3,\"2867\":4,\"2868\":9,\"2869\":2,\"2878\":4,\"2879\":3,\"2880\":4,\"2881\":2,\"2885\":4,\"2891\":1,\"2892\":2,\"2893\":4,\"2897\":4,\"2902\":2,\"2903\":2,\"2904\":1,\"2905\":1,\"2909\":3,\"2914\":3,\"2915\":3,\"2916\":4,\"2917\":4,\"2921\":12,\"2927\":2,\"2936\":1,\"2937\":1,\"2938\":6,\"2947\":1,\"2949\":1,\"2951\":3,\"2952\":1,\"2959\":2,\"2960\":1,\"2965\":2,\"2968\":2,\"2969\":8,\"2970\":8,\"2971\":5,\"2974\":2,\"2980\":2,\"2983\":6,\"2984\":4,\"2986\":4,\"2989\":3,\"2990\":2,\"2993\":3,\"2999\":4,\"3000\":6,\"3002\":8,\"3003\":10,\"3005\":6,\"3007\":10,\"3010\":5,\"3017\":3,\"3019\":1,\"3020\":1,\"3021\":2,\"3023\":5,\"3024\":3,\"3025\":2,\"3036\":2,\"3041\":1,\"3046\":1,\"3050\":1,\"3052\":1,\"3065\":8,\"3066\":5,\"3070\":2,\"3079\":1,\"3085\":3,\"3086\":1,\"3116\":3,\"3117\":3,\"3118\":2,\"3120\":2,\"3125\":3,\"3134\":2,\"3135\":1,\"3136\":1,\"3137\":3,\"3141\":3,\"3145\":1,\"3154\":4,\"3159\":1,\"3162\":9,\"3165\":2,\"3170\":6,\"3190\":5,\"3199\":3,\"3205\":19,\"3206\":3,\"3208\":5,\"3209\":9,\"3212\":10,\"3214\":4,\"3215\":38,\"3223\":1,\"3224\":1,\"3235\":7,\"3237\":2,\"3238\":7,\"3244\":2}}],[\"cglib可以代理类是因为它使用字节码生成技术创建目标类的子类\",{\"1\":{\"2994\":1}}],[\"cgroupdriver=systemd\",{\"1\":{\"1615\":1,\"1621\":1,\"1666\":1,\"1669\":1,\"1675\":1,\"1746\":1,\"1753\":1}}],[\"cbuf\",{\"1\":{\"2833\":2,\"2853\":2,\"2854\":2}}],[\"c中\",{\"1\":{\"2119\":1}}],[\"cvf\",{\"1\":{\"1897\":1}}],[\"c|sort\",{\"1\":{\"1881\":1}}],[\"czvf\",{\"1\":{\"1862\":1}}],[\"czzb2\",{\"1\":{\"303\":1,\"307\":1}}],[\"cwd对应的是启动路径\",{\"1\":{\"1854\":1}}],[\"cyrus\",{\"1\":{\"1738\":3}}],[\"cycle\",{\"1\":{\"153\":1}}],[\"cyclic\",{\"1\":{\"125\":1}}],[\"cj\",{\"1\":{\"1644\":1}}],[\"c=\",{\"1\":{\"3205\":1}}],[\"c=m\",{\"1\":{\"1488\":1}}],[\"c=in\",{\"1\":{\"1092\":1,\"3180\":1,\"3190\":1}}],[\"ctime\",{\"1\":{\"1873\":1}}],[\"ctrl+v+enter\",{\"1\":{\"1868\":1}}],[\"ctags\",{\"1\":{\"1486\":1}}],[\"ctx\",{\"1\":{\"1332\":2,\"3125\":4}}],[\"cfg\",{\"1\":{\"1477\":1,\"1478\":1,\"1484\":1,\"1495\":1,\"1528\":1}}],[\"c++\",{\"1\":{\"1178\":8,\"2325\":1}}],[\"ceiling\",{\"1\":{\"2371\":2,\"2661\":1}}],[\"ce\",{\"1\":{\"1610\":2,\"1612\":2,\"1613\":4,\"1671\":2,\"1672\":2,\"1673\":4,\"1741\":2,\"1743\":2,\"1744\":4,\"3245\":2,\"3271\":5}}],[\"center\",{\"1\":{\"1440\":1,\"1467\":1,\"1734\":1}}],[\"centos安装指令\",{\"1\":{\"1504\":1}}],[\"centos7\",{\"1\":{\"3264\":4}}],[\"centos7下怎样挂载硬盘\",{\"1\":{\"1500\":3}}],[\"centos7挂载硬盘\",{\"0\":{\"1500\":1}}],[\"centos\",{\"0\":{\"1471\":1},\"1\":{\"1419\":1,\"1420\":1,\"1471\":1,\"1478\":3,\"1484\":4,\"1495\":4,\"1612\":1,\"1660\":4,\"1672\":1,\"1743\":1,\"1780\":1,\"1795\":2,\"1903\":1,\"1918\":1,\"3245\":1,\"3270\":1,\"3271\":1}}],[\"central\",{\"1\":{\"993\":2,\"994\":4,\"995\":1,\"1004\":2}}],[\"certs\",{\"1\":{\"1677\":1}}],[\"certificate\",{\"1\":{\"1417\":2,\"3273\":2}}],[\"cert\",{\"0\":{\"1664\":1},\"1\":{\"115\":4}}],[\"cmp\",{\"1\":{\"2655\":8}}],[\"cms或g1并发gc线程数\",{\"1\":{\"797\":1,\"831\":1,\"865\":1,\"899\":1}}],[\"cms适合对响应时间要求高的应用\",{\"1\":{\"777\":1}}],[\"cms收集器的常见问题\",{\"0\":{\"783\":1}}],[\"cms收集器的并发设计\",{\"0\":{\"777\":1}}],[\"cms收集器以低延迟为目标\",{\"1\":{\"777\":1}}],[\"cms\",{\"1\":{\"770\":1,\"795\":1,\"809\":1,\"829\":1,\"843\":1,\"863\":1,\"877\":1,\"897\":1,\"911\":1}}],[\"cmd\",{\"1\":{\"1923\":2,\"1925\":1,\"1926\":1,\"1927\":1,\"1928\":1,\"1930\":1,\"1931\":1,\"1932\":1,\"1934\":1,\"1935\":1,\"1940\":1,\"3246\":7,\"3268\":1}}],[\"cmd命令查看哪些端口被禁用tcp协议\",{\"1\":{\"1569\":1}}],[\"cmd中执行以下命令\",{\"1\":{\"1569\":1}}],[\"cmdb\",{\"1\":{\"235\":4}}],[\"cmd切换盘符e\",{\"1\":{\"119\":1}}],[\"csq\",{\"1\":{\"2854\":2}}],[\"cs\",{\"1\":{\"1887\":2}}],[\"cst\",{\"1\":{\"1677\":3,\"3282\":1}}],[\"css\",{\"1\":{\"1440\":1,\"1452\":6,\"1455\":1,\"1460\":1,\"1463\":4}}],[\"css等文件\",{\"1\":{\"1401\":1}}],[\"cseqmethod\",{\"1\":{\"3205\":1}}],[\"cseqnumber\",{\"1\":{\"3205\":1}}],[\"cseq等头域\",{\"1\":{\"3199\":1}}],[\"cseqheader\",{\"1\":{\"1094\":3,\"3190\":3,\"3199\":1,\"3205\":6,\"3208\":2}}],[\"cseq\",{\"1\":{\"1092\":1,\"3180\":2,\"3199\":1}}],[\"csrf\",{\"1\":{\"304\":1,\"456\":1}}],[\"csdn\",{\"1\":{\"281\":1,\"1536\":1,\"1642\":1,\"1738\":1}}],[\"cnonce\",{\"1\":{\"3215\":5}}],[\"cni\",{\"1\":{\"1634\":2,\"1638\":2,\"1675\":2}}],[\"cnblogs\",{\"1\":{\"1536\":1}}],[\"cn\",{\"1\":{\"270\":1,\"279\":8,\"286\":2,\"289\":4,\"1488\":2,\"1517\":1,\"1520\":1,\"1626\":1,\"1632\":1,\"1715\":1,\"3276\":1}}],[\"cnpm\",{\"1\":{\"261\":2}}],[\"cnf不会删除\",{\"1\":{\"1778\":1}}],[\"cnf\",{\"1\":{\"1576\":1,\"1577\":3,\"1578\":6,\"1771\":1,\"1778\":1}}],[\"cnf映射路径\",{\"1\":{\"1576\":1}}],[\"cnf中添加\",{\"1\":{\"113\":1}}],[\"cnf配置文件\",{\"1\":{\"98\":1,\"106\":1}}],[\"cpr\",{\"1\":{\"2655\":3}}],[\"cp\",{\"0\":{\"1865\":1},\"1\":{\"240\":1,\"788\":1,\"822\":1,\"856\":1,\"890\":1,\"1416\":2,\"1490\":1,\"1619\":1,\"1627\":1,\"1677\":2,\"1729\":1,\"1751\":1,\"1792\":2,\"1835\":1,\"1865\":3,\"3262\":1,\"3263\":1}}],[\"cpu瓶颈\",{\"1\":{\"2728\":1}}],[\"cpu时间\",{\"1\":{\"1887\":2}}],[\"cpu没有充分利用\",{\"1\":{\"1887\":1}}],[\"cpuinfo\",{\"1\":{\"1838\":4}}],[\"cpu信息\",{\"0\":{\"1838\":1},\"1\":{\"1835\":1}}],[\"cpu\",{\"1\":{\"1579\":1,\"1698\":2,\"1809\":2,\"1882\":1,\"2728\":1,\"3228\":1,\"3264\":4}}],[\"cpu核心数\",{\"1\":{\"629\":2}}],[\"cpu密集型应用\",{\"1\":{\"3130\":1}}],[\"cpu密集型任务\",{\"1\":{\"629\":1}}],[\"cpu密集型任务的线程数可以设置为cpu核心数+1\",{\"1\":{\"602\":1}}],[\"cpu密集型任务应使用平台线程\",{\"1\":{\"532\":1}}],[\"cpu密集型或io密集型\",{\"1\":{\"602\":1}}],[\"cpu使用率\",{\"1\":{\"190\":1}}],[\"cpu占用\",{\"1\":{\"190\":1}}],[\"cpu利用率高\",{\"1\":{\"154\":1}}],[\"cpu性能占用设置有峰值\",{\"1\":{\"153\":1}}],[\"cpu压力很大\",{\"1\":{\"151\":1}}],[\"c类70分钟\",{\"1\":{\"190\":1}}],[\"c可以转化为\",{\"1\":{\"140\":1}}],[\"c\",{\"1\":{\"127\":1,\"140\":1,\"193\":2,\"250\":1,\"264\":1,\"303\":1,\"473\":1,\"539\":1,\"1040\":3,\"1081\":2,\"1166\":4,\"1185\":1,\"1190\":2,\"1191\":2,\"1194\":3,\"1295\":2,\"1421\":2,\"1502\":1,\"1578\":1,\"1677\":1,\"1687\":1,\"1768\":1,\"1833\":1,\"1838\":2,\"1841\":1,\"1860\":1,\"1863\":1,\"1871\":1,\"2080\":1,\"2099\":1,\"2100\":1,\"2115\":1,\"2119\":1,\"2223\":2,\"2249\":2,\"2314\":5,\"2320\":1,\"2323\":1,\"2340\":2,\"2342\":2,\"2352\":1,\"2358\":1,\"2369\":2,\"2372\":4,\"2382\":1,\"2406\":1,\"2427\":1,\"2436\":3,\"2448\":1,\"2465\":5,\"2493\":3,\"2507\":1,\"2537\":2,\"2554\":8,\"2632\":1,\"2716\":3,\"2741\":2,\"2786\":2,\"2854\":2,\"2909\":1,\"3000\":4,\"3023\":2,\"3150\":2,\"3246\":1,\"3257\":1,\"3273\":2}}],[\"c文件中列出的错误消息对应\",{\"1\":{\"125\":1}}],[\"cup\",{\"1\":{\"3111\":1}}],[\"curidx\",{\"1\":{\"284\":3}}],[\"curl命令发送post请求\",{\"0\":{\"1914\":1}}],[\"curl下载\",{\"1\":{\"264\":1}}],[\"curl\",{\"1\":{\"264\":4,\"1355\":1,\"1513\":1,\"1527\":1,\"1633\":1,\"1635\":2,\"1677\":1,\"1714\":2,\"1747\":1,\"1914\":1,\"1915\":1,\"3246\":1,\"3248\":1}}],[\"currentreplicas\",{\"1\":{\"3244\":3}}],[\"currenthead\",{\"1\":{\"2485\":5}}],[\"currentsize\",{\"1\":{\"1326\":8}}],[\"currentstamp\",{\"1\":{\"1139\":3}}],[\"currentvalue\",{\"1\":{\"1139\":2}}],[\"currentconnections\",{\"1\":{\"3244\":2}}],[\"currentcount\",{\"1\":{\"1126\":1}}],[\"currentcpuusage\",{\"1\":{\"3244\":2}}],[\"currentclassloader\",{\"1\":{\"745\":2}}],[\"currenttime\",{\"1\":{\"3215\":2}}],[\"currenttimemillis\",{\"1\":{\"456\":1,\"1041\":4,\"1043\":8,\"1056\":4,\"1068\":2,\"1179\":6,\"1250\":4,\"1264\":6,\"1321\":4,\"2276\":6,\"2311\":3,\"2327\":8,\"2409\":6,\"2467\":3,\"2525\":1,\"2866\":2,\"2868\":4,\"2986\":4,\"3002\":3,\"3087\":3,\"3215\":2}}],[\"currenttop\",{\"1\":{\"2544\":10}}],[\"currenttail\",{\"1\":{\"2485\":9}}],[\"currentthread\",{\"1\":{\"610\":2,\"625\":1,\"1337\":1,\"2328\":2,\"2466\":2,\"2523\":2,\"2524\":1}}],[\"currentpage\",{\"1\":{\"284\":7,\"1444\":1}}],[\"currently\",{\"1\":{\"235\":1,\"1788\":1,\"3282\":1}}],[\"current\",{\"1\":{\"232\":12,\"269\":1,\"3273\":1}}],[\"curshndlr\",{\"1\":{\"125\":1}}],[\"curs\",{\"1\":{\"125\":1}}],[\"cursor\",{\"1\":{\"125\":8,\"2441\":5}}],[\"cut\",{\"1\":{\"125\":1,\"1838\":1}}],[\"custombufferedinputstream\",{\"1\":{\"2873\":2}}],[\"customcomparatorexample\",{\"1\":{\"2660\":1}}],[\"customconcurrentset\",{\"1\":{\"2544\":1}}],[\"customconcurrentset<t>\",{\"1\":{\"2544\":1}}],[\"customclassloader\",{\"1\":{\"729\":3,\"746\":6}}],[\"customsonarrule\",{\"1\":{\"2027\":1}}],[\"customthreadpoolexample\",{\"1\":{\"625\":1}}],[\"custom\",{\"1\":{\"122\":1,\"742\":1,\"1527\":1}}],[\"cd中的规范集成\",{\"0\":{\"2019\":1}}],[\"cd到\",{\"1\":{\"1784\":1}}],[\"cd到安装路径bin目录下\",{\"1\":{\"119\":1}}],[\"cdn加速静态资源\",{\"1\":{\"1347\":1}}],[\"cdi规范\",{\"1\":{\"578\":1}}],[\"cd\",{\"1\":{\"219\":1,\"235\":1,\"243\":1,\"248\":1,\"1354\":1,\"1369\":1,\"1370\":1,\"1371\":1,\"1372\":1,\"1373\":1,\"1402\":1,\"1416\":1,\"1417\":1,\"1489\":1,\"1511\":1,\"1531\":1,\"1578\":1,\"1590\":1,\"1595\":2,\"1626\":2,\"1715\":2,\"1730\":1,\"1734\":1,\"1769\":1,\"1783\":2,\"1784\":1,\"1852\":1,\"1854\":1,\"3250\":1}}],[\"cdots\",{\"1\":{\"20\":1}}],[\"chinese\",{\"1\":{\"2837\":1}}],[\"chineseencodingexample\",{\"1\":{\"2837\":1}}],[\"chinesename\",{\"1\":{\"2821\":5}}],[\"childoption\",{\"1\":{\"1111\":2,\"3125\":1}}],[\"childhandler\",{\"1\":{\"1111\":1,\"1332\":1,\"3125\":1}}],[\"child\",{\"1\":{\"1078\":1,\"3036\":2}}],[\"cherry的索引\",{\"1\":{\"2324\":1}}],[\"cherry\",{\"1\":{\"2324\":7,\"2369\":1,\"2370\":1,\"2371\":2}}],[\"checkpermission\",{\"1\":{\"2990\":1,\"3154\":1}}],[\"checkpositionindex\",{\"1\":{\"2494\":2,\"2498\":1}}],[\"checkpoint\",{\"1\":{\"125\":1}}],[\"checkaccess\",{\"1\":{\"2987\":1}}],[\"checkerror\",{\"1\":{\"2908\":1,\"2909\":2}}],[\"checkelementindex\",{\"1\":{\"2495\":3,\"2496\":1}}],[\"checked\",{\"1\":{\"1459\":2,\"1460\":1,\"1464\":2,\"1465\":1,\"1467\":7,\"2737\":1,\"2923\":1,\"2926\":1}}],[\"checked>睡觉\",{\"1\":{\"1459\":1}}],[\"checked>学习\",{\"1\":{\"1459\":1}}],[\"checked>男\",{\"1\":{\"1459\":1}}],[\"checkforcomodification\",{\"1\":{\"2441\":3,\"2498\":6}}],[\"checkfields\",{\"1\":{\"1087\":2}}],[\"checklist\",{\"0\":{\"2023\":1}}],[\"checkout\",{\"1\":{\"2020\":1}}],[\"checkstyle\",{\"1\":{\"2002\":2,\"2017\":1,\"2018\":1,\"2020\":2}}],[\"checkservice\",{\"1\":{\"1711\":1}}],[\"checksum\",{\"1\":{\"125\":1,\"3273\":3}}],[\"checkbox\",{\"1\":{\"1459\":2,\"1467\":4}}],[\"checkmethods\",{\"1\":{\"1087\":2}}],[\"checkclassname\",{\"1\":{\"1087\":2}}],[\"check命令检查依赖的更新和安全漏洞\",{\"1\":{\"1025\":1}}],[\"check\",{\"1\":{\"125\":5,\"171\":1,\"1025\":1,\"1788\":1,\"2020\":2}}],[\"checkread\",{\"1\":{\"125\":1}}],[\"checking\",{\"1\":{\"122\":5}}],[\"chrome\",{\"1\":{\"1411\":1}}],[\"chmod\",{\"1\":{\"1369\":1,\"1370\":1,\"1371\":1,\"1372\":1,\"1373\":1,\"1416\":1,\"1503\":2,\"1504\":1,\"1510\":4,\"1528\":1,\"1569\":1,\"1577\":1,\"1578\":1,\"1586\":1,\"1620\":1,\"1624\":1,\"1633\":1,\"1637\":2,\"1677\":1,\"1714\":2,\"1747\":1,\"1752\":1,\"1756\":1,\"1764\":1,\"1901\":1,\"3246\":1,\"3248\":1}}],[\"chkconfig\",{\"1\":{\"1368\":1,\"1369\":2,\"1370\":1,\"1371\":1,\"1372\":1,\"1373\":1,\"1374\":3}}],[\"ch\",{\"1\":{\"1111\":2,\"1332\":2,\"1564\":6,\"2072\":2,\"3100\":1,\"3102\":2,\"3125\":2}}],[\"chunk\",{\"1\":{\"269\":2}}],[\"channelread\",{\"1\":{\"3125\":1}}],[\"channelread0\",{\"1\":{\"1332\":1}}],[\"channelinboundhandleradapter\",{\"1\":{\"3125\":1}}],[\"channelinitializer<socketchannel>\",{\"1\":{\"1111\":1,\"1332\":1,\"3125\":1}}],[\"channelhandler\",{\"1\":{\"3124\":1}}],[\"channelhandlercontext\",{\"1\":{\"1332\":1,\"3125\":2}}],[\"channel的主要特点\",{\"1\":{\"3117\":1}}],[\"channel是nio中数据传输的通道\",{\"1\":{\"3117\":1}}],[\"channel是nio中用于连接数据源和目标的通道\",{\"1\":{\"2915\":1}}],[\"channel通道\",{\"0\":{\"3117\":1}}],[\"channel在finally块中关闭\",{\"1\":{\"3090\":1}}],[\"channel和selector三大核心组件实现高效的io操作\",{\"1\":{\"3113\":1}}],[\"channel和selector不是线程安全的\",{\"1\":{\"3090\":1}}],[\"channel和buffer\",{\"1\":{\"1315\":1}}],[\"channels\",{\"1\":{\"1228\":4,\"1232\":1,\"1238\":5,\"2915\":1,\"2916\":4,\"2917\":1,\"2921\":7}}],[\"channelfuture\",{\"1\":{\"1111\":1,\"1332\":1,\"3125\":1}}],[\"channeloption\",{\"1\":{\"1111\":3,\"3125\":2}}],[\"channelpipeline中的handler链\",{\"1\":{\"3128\":1}}],[\"channelpipeline中的处理器依次处理请求\",{\"1\":{\"1332\":1}}],[\"channelpipeline\",{\"1\":{\"1111\":1,\"1332\":1,\"3124\":1,\"3125\":1}}],[\"channel\",{\"0\":{\"2915\":1},\"1\":{\"1111\":2,\"1228\":2,\"1235\":2,\"1315\":4,\"1324\":2,\"1332\":2,\"1338\":4,\"2911\":1,\"2916\":2,\"2917\":2,\"2921\":2,\"3079\":3,\"3116\":1,\"3118\":2,\"3124\":1,\"3125\":2}}],[\"changing\",{\"1\":{\"125\":1}}],[\"changeme\",{\"1\":{\"1523\":1}}],[\"changelog\",{\"1\":{\"280\":1,\"1656\":1,\"1711\":1}}],[\"changes\",{\"1\":{\"193\":1}}],[\"changed\",{\"1\":{\"125\":1,\"997\":1,\"3208\":1}}],[\"change\",{\"1\":{\"102\":2,\"110\":1,\"113\":1,\"125\":4,\"997\":1}}],[\"chaining\",{\"0\":{\"2937\":1}}],[\"chainedcallexample\",{\"1\":{\"501\":1}}],[\"chainb\",{\"1\":{\"293\":3}}],[\"chaina\",{\"1\":{\"293\":2}}],[\"chainfilters\",{\"1\":{\"293\":7}}],[\"chainfilterstemplate\",{\"1\":{\"293\":3}}],[\"chainfilter\",{\"1\":{\"293\":9}}],[\"charbuffer\",{\"1\":{\"3116\":1}}],[\"chardata\",{\"1\":{\"2857\":3}}],[\"char数组使用final修饰\",{\"1\":{\"2299\":1}}],[\"charsread\",{\"1\":{\"2855\":2,\"2857\":4,\"2878\":6}}],[\"charsequence\",{\"1\":{\"2263\":3,\"2287\":1,\"2854\":2}}],[\"charsetdecoder\",{\"1\":{\"2885\":2}}],[\"charsets\",{\"1\":{\"2881\":9}}],[\"charset>\",{\"1\":{\"2881\":2}}],[\"charsetexample\",{\"1\":{\"2881\":1}}],[\"charset=\",{\"1\":{\"1431\":1,\"1433\":1,\"1434\":1,\"1435\":1,\"1440\":1,\"1447\":1,\"1450\":1,\"1455\":1,\"1456\":1,\"1457\":1,\"1458\":1,\"1459\":1,\"1461\":1,\"1462\":1,\"1463\":1,\"1464\":1,\"1467\":1,\"1469\":1}}],[\"charset=utf\",{\"1\":{\"285\":2,\"1431\":1,\"1440\":1,\"1443\":1,\"1444\":1}}],[\"charset=utf8mb4\",{\"1\":{\"1687\":8}}],[\"charset=utf8\",{\"1\":{\"232\":9,\"1684\":9}}],[\"charset\",{\"1\":{\"125\":2,\"269\":1,\"2837\":1,\"2855\":1,\"2861\":4,\"2877\":1,\"2878\":1,\"2879\":1,\"2880\":1,\"2881\":8,\"2885\":8,\"2903\":1,\"2908\":1}}],[\"chars\",{\"1\":{\"1164\":7,\"2188\":2,\"2198\":2,\"2207\":7}}],[\"chararraywriter写入的数据\",{\"1\":{\"2857\":1}}],[\"chararraywriter\",{\"1\":{\"2857\":5}}],[\"chararrayreader读取的数据\",{\"1\":{\"2857\":1}}],[\"chararrayreader\",{\"1\":{\"2857\":4}}],[\"chararray\",{\"1\":{\"2223\":2}}],[\"charat\",{\"1\":{\"1087\":2,\"1164\":1,\"1165\":4,\"1166\":2,\"1170\":2,\"3086\":1}}],[\"characters\",{\"1\":{\"3003\":1}}],[\"charactercodingexception\",{\"1\":{\"2885\":2}}],[\"characterencoding=utf\",{\"1\":{\"1644\":2,\"1648\":1,\"1685\":1}}],[\"characterencoding=utf8\",{\"1\":{\"235\":2}}],[\"character\",{\"1\":{\"125\":2,\"1087\":2,\"1165\":4,\"1640\":1,\"1771\":2,\"1825\":3,\"1831\":3,\"1872\":1,\"3000\":2,\"3007\":1}}],[\"charlie\",{\"1\":{\"469\":1,\"543\":1,\"575\":1,\"1182\":1,\"2167\":1,\"2217\":2,\"2577\":2}}],[\"char\",{\"1\":{\"125\":1,\"232\":1,\"1164\":2,\"1166\":2,\"1684\":1,\"1831\":1,\"2080\":1,\"2099\":1,\"2188\":1,\"2190\":1,\"2198\":1,\"2207\":2,\"2223\":1,\"2240\":1,\"2263\":2,\"2282\":2,\"2288\":1,\"2291\":2,\"2292\":1,\"2294\":2,\"2295\":1,\"2554\":2,\"2766\":1,\"2833\":4,\"2853\":2,\"2854\":3,\"2855\":2,\"2857\":5,\"2878\":4,\"2891\":1,\"2909\":1,\"2927\":1,\"3000\":1}}],[\"chown\",{\"1\":{\"116\":1,\"1864\":1}}],[\"circuit\",{\"1\":{\"3087\":1}}],[\"circuitbreaker\",{\"1\":{\"3087\":2}}],[\"circle\",{\"1\":{\"1209\":4,\"2742\":5,\"2808\":2,\"3086\":8}}],[\"ci\",{\"0\":{\"2019\":1},\"1\":{\"1640\":1,\"1771\":1,\"1825\":3,\"1831\":6}}],[\"cipher\",{\"1\":{\"115\":1}}],[\"cities\",{\"1\":{\"60\":1}}],[\"city=\",{\"1\":{\"3007\":3}}],[\"city\",{\"1\":{\"37\":1,\"47\":1,\"58\":1,\"59\":1,\"60\":1,\"84\":1,\"89\":2,\"501\":2,\"1462\":5,\"2329\":5,\"3007\":5}}],[\"caw\",{\"1\":{\"2857\":4}}],[\"caused\",{\"1\":{\"1510\":1}}],[\"cause\",{\"1\":{\"1249\":2,\"1254\":2,\"2938\":2,\"3125\":2}}],[\"card\",{\"1\":{\"1417\":3}}],[\"car\",{\"1\":{\"1165\":1,\"2857\":2}}],[\"carboncopy\",{\"1\":{\"122\":1}}],[\"cafe\",{\"1\":{\"738\":1}}],[\"cas或两者结合\",{\"1\":{\"2544\":1}}],[\"casbasedstack<t>\",{\"1\":{\"2544\":1}}],[\"cas+synchronized+红黑树\",{\"1\":{\"2403\":1}}],[\"cas+synchronized\",{\"1\":{\"2400\":1,\"2429\":1,\"2518\":1}}],[\"cas\",{\"1\":{\"1197\":1,\"2513\":1,\"2518\":2}}],[\"cas的其他局限性\",{\"1\":{\"686\":1}}],[\"cas的aba问题\",{\"0\":{\"683\":1}}],[\"cas优点\",{\"1\":{\"686\":1}}],[\"cas是一种无锁算法\",{\"1\":{\"673\":1}}],[\"cas操作还有哪些局限性\",{\"1\":{\"686\":1}}],[\"cas操作的优缺点是什么\",{\"1\":{\"686\":1}}],[\"cas操作会误认为值没有变化\",{\"1\":{\"683\":1}}],[\"cas操作包含三个参数\",{\"1\":{\"673\":1}}],[\"cas操作原理\",{\"0\":{\"673\":1}}],[\"cas操作\",{\"1\":{\"663\":1,\"675\":1,\"2519\":1}}],[\"cas基于硬件指令实现\",{\"1\":{\"663\":1}}],[\"case结构\",{\"1\":{\"2809\":1}}],[\"case的穿透性\",{\"1\":{\"2137\":1}}],[\"case语句的穿透性\",{\"1\":{\"2137\":1}}],[\"case语句\",{\"0\":{\"2062\":1}}],[\"case命名法\",{\"1\":{\"1999\":1}}],[\"case\",{\"0\":{\"2126\":1},\"1\":{\"125\":1,\"1369\":2,\"1370\":1,\"1371\":1,\"1372\":1,\"1373\":1,\"1577\":1,\"1578\":2,\"1771\":1,\"1831\":2,\"2062\":6,\"2078\":4,\"2126\":6,\"2809\":3,\"2822\":4}}],[\"calico\",{\"1\":{\"1638\":1}}],[\"callid\",{\"1\":{\"3205\":1,\"3209\":1,\"3235\":2}}],[\"callidheader\",{\"1\":{\"1094\":3,\"3190\":3,\"3199\":1,\"3205\":5}}],[\"callback\",{\"1\":{\"1433\":2,\"1434\":2,\"1436\":1}}],[\"caller\",{\"1\":{\"2987\":2}}],[\"callerrunspolicy\",{\"1\":{\"634\":1,\"2539\":1,\"3225\":1}}],[\"called\",{\"1\":{\"993\":1}}],[\"callable\",{\"1\":{\"592\":1}}],[\"callable<string>\",{\"1\":{\"592\":1}}],[\"call\",{\"1\":{\"556\":1,\"592\":1,\"1092\":1,\"1610\":4,\"3180\":2,\"3190\":1,\"3199\":1}}],[\"calculatetargetreplicas\",{\"1\":{\"3244\":1}}],[\"calculatetotal\",{\"1\":{\"2007\":1,\"2784\":1}}],[\"calculateresponse\",{\"1\":{\"3215\":2,\"3238\":1}}],[\"calculatemethod\",{\"1\":{\"2970\":2}}],[\"calculatesum\",{\"1\":{\"2784\":1}}],[\"calculateperimeter\",{\"1\":{\"2742\":4}}],[\"calculatecapacity\",{\"1\":{\"2437\":2}}],[\"calculatearea\",{\"1\":{\"1209\":2,\"2742\":4}}],[\"calculate\",{\"1\":{\"538\":2,\"2970\":2}}],[\"calculated\",{\"1\":{\"193\":1}}],[\"calculator\",{\"1\":{\"538\":2,\"1205\":1,\"1270\":7,\"2741\":1}}],[\"calendar\",{\"1\":{\"307\":12}}],[\"cachemanager\",{\"1\":{\"3170\":8}}],[\"cachemap\",{\"1\":{\"2512\":13}}],[\"cacheaspect\",{\"1\":{\"3170\":2}}],[\"cacheable\",{\"1\":{\"1072\":1,\"3170\":8}}],[\"cacheevict\",{\"1\":{\"3170\":8}}],[\"cacheevict等注解\",{\"1\":{\"3170\":1}}],[\"cache直接用来记忆我们打开的文件\",{\"1\":{\"1887\":1}}],[\"cache反映的是可以挪用的内存总数\",{\"1\":{\"1885\":1}}],[\"cache反映的是被程序实实在在吃掉的内存\",{\"1\":{\"1885\":1}}],[\"cached会很快地被使用\",{\"1\":{\"1887\":1}}],[\"cached\",{\"1\":{\"1885\":4}}],[\"cachedirectory>\",{\"1\":{\"957\":1}}],[\"cachedthreadpool允许创建无限线程\",{\"1\":{\"631\":1}}],[\"cachedthreadpool\",{\"1\":{\"623\":1,\"1135\":1}}],[\"cache<\",{\"1\":{\"957\":1}}],[\"cacheutil\",{\"1\":{\"283\":2}}],[\"cache\",{\"1\":{\"125\":3,\"283\":5,\"643\":3,\"957\":1,\"1081\":2,\"1885\":4,\"1887\":2,\"2039\":1,\"2051\":1,\"2427\":8,\"2632\":8,\"2685\":8,\"2693\":1,\"3170\":8,\"3218\":1}}],[\"catalina\",{\"1\":{\"1891\":1}}],[\"catalog\",{\"1\":{\"125\":1}}],[\"cat\",{\"1\":{\"1422\":1,\"1504\":1,\"1513\":1,\"1527\":1,\"1610\":2,\"1773\":1,\"1788\":1,\"1838\":5,\"1868\":1,\"1869\":2,\"1903\":2,\"2737\":1,\"2740\":1,\"2749\":5,\"3266\":4,\"3267\":1,\"3270\":1,\"3271\":1,\"3273\":3,\"3275\":2,\"3276\":1}}],[\"category\",{\"1\":{\"122\":1}}],[\"catch放在循环外部\",{\"1\":{\"2959\":1}}],[\"catch块顺序应从具体到一般\",{\"1\":{\"2941\":1}}],[\"catch捕获异常\",{\"1\":{\"2450\":1}}],[\"catch的return\",{\"1\":{\"1246\":1}}],[\"catch\",{\"0\":{\"1246\":1},\"1\":{\"71\":1,\"91\":1,\"283\":1,\"286\":4,\"456\":1,\"518\":1,\"609\":1,\"610\":1,\"625\":1,\"626\":2,\"676\":2,\"693\":1,\"710\":1,\"746\":1,\"747\":1,\"1040\":1,\"1044\":7,\"1055\":2,\"1068\":1,\"1069\":2,\"1186\":1,\"1190\":1,\"1191\":3,\"1194\":2,\"1221\":2,\"1222\":2,\"1225\":2,\"1228\":1,\"1232\":1,\"1234\":3,\"1237\":1,\"1238\":4,\"1243\":1,\"1246\":1,\"1247\":3,\"1250\":1,\"1253\":3,\"1254\":2,\"1314\":2,\"1315\":1,\"1326\":3,\"1332\":1,\"1337\":4,\"1431\":1,\"1443\":1,\"2037\":2,\"2079\":2,\"2328\":1,\"2441\":1,\"2450\":1,\"2466\":2,\"2523\":2,\"2524\":3,\"2685\":1,\"2809\":1,\"2831\":2,\"2832\":1,\"2833\":1,\"2837\":2,\"2843\":2,\"2844\":1,\"2845\":2,\"2849\":2,\"2855\":2,\"2856\":1,\"2857\":2,\"2861\":1,\"2866\":1,\"2867\":1,\"2868\":3,\"2872\":1,\"2878\":2,\"2879\":2,\"2880\":1,\"2885\":2,\"2891\":1,\"2892\":1,\"2893\":1,\"2897\":1,\"2902\":1,\"2903\":2,\"2909\":1,\"2915\":1,\"2916\":1,\"2917\":1,\"2921\":4,\"2927\":1,\"2935\":2,\"2936\":1,\"2937\":1,\"2942\":1,\"2952\":1,\"2953\":1,\"2955\":1,\"2959\":6,\"2960\":1,\"2984\":1,\"2989\":1,\"2990\":1,\"2993\":3,\"3000\":1,\"3003\":3,\"3005\":4,\"3065\":4,\"3066\":2,\"3078\":1,\"3087\":1,\"3120\":5,\"3208\":2,\"3215\":1,\"3217\":2}}],[\"canprocess\",{\"1\":{\"2959\":1}}],[\"canceling\",{\"1\":{\"3002\":4}}],[\"cancelorder\",{\"1\":{\"2770\":2,\"3002\":3}}],[\"cancelled\",{\"1\":{\"2062\":1}}],[\"cancel\",{\"1\":{\"1315\":1,\"3179\":1}}],[\"canceled\",{\"1\":{\"125\":1}}],[\"canal\",{\"1\":{\"1165\":1}}],[\"candice0630\",{\"1\":{\"250\":1}}],[\"cannot\",{\"0\":{\"1667\":1},\"1\":{\"125\":2,\"500\":1,\"501\":1,\"502\":1,\"504\":1,\"1038\":1,\"1735\":2,\"3003\":4,\"3005\":1}}],[\"cant\",{\"1\":{\"125\":44}}],[\"can\",{\"1\":{\"122\":1,\"125\":1,\"994\":2,\"1004\":1,\"1578\":1}}],[\"capped\",{\"1\":{\"1739\":1}}],[\"capacity时返回true\",{\"1\":{\"2643\":1}}],[\"capacitydemo\",{\"1\":{\"2271\":1}}],[\"capacity`\",{\"1\":{\"232\":2,\"1684\":2}}],[\"capacity\",{\"1\":{\"232\":2,\"642\":2,\"1181\":2,\"1684\":2,\"2161\":2,\"2263\":6,\"2271\":4,\"2282\":3,\"2318\":2,\"2427\":6,\"2433\":1,\"2436\":1,\"2437\":1,\"2512\":9,\"2555\":2,\"2601\":7,\"2632\":7,\"2684\":1,\"2704\":6,\"2914\":2,\"3116\":1,\"3278\":2}}],[\"capath\",{\"1\":{\"115\":1}}],[\"caps\",{\"1\":{\"122\":1}}],[\"cap定理指出\",{\"1\":{\"43\":1}}],[\"ca私钥\",{\"1\":{\"115\":1}}],[\"ca\",{\"1\":{\"115\":4,\"1677\":2,\"3273\":3}}],[\"cls1\",{\"1\":{\"1463\":4}}],[\"cls\",{\"1\":{\"1455\":5}}],[\"clearallcache\",{\"1\":{\"3170\":1}}],[\"clearlist\",{\"1\":{\"2508\":1}}],[\"clearlistcorrect2\",{\"1\":{\"2451\":1}}],[\"clearlistcorrect1\",{\"1\":{\"2451\":1}}],[\"clearlistwrong\",{\"1\":{\"2451\":1}}],[\"clearinterval\",{\"1\":{\"1470\":1}}],[\"clear\",{\"1\":{\"1228\":1,\"1238\":1,\"1315\":1,\"1325\":1,\"1326\":1,\"1338\":2,\"2314\":1,\"2324\":1,\"2327\":2,\"2346\":1,\"2369\":1,\"2440\":3,\"2451\":2,\"2496\":1,\"2508\":1,\"2512\":3,\"2685\":2,\"2914\":2,\"2915\":1,\"2916\":1,\"2921\":1,\"3117\":1,\"3118\":1,\"3120\":2,\"3170\":1}}],[\"cleanupexpirednonces\",{\"1\":{\"3215\":3}}],[\"cleanup\",{\"1\":{\"2959\":1}}],[\"clean\",{\"1\":{\"280\":1,\"456\":1,\"940\":1,\"949\":1,\"959\":1,\"960\":1,\"999\":1,\"1489\":1,\"1656\":1,\"1675\":1,\"1711\":1,\"3246\":1}}],[\"clz\",{\"1\":{\"290\":2}}],[\"closing\",{\"1\":{\"1881\":1}}],[\"closefuture\",{\"1\":{\"1111\":1,\"1332\":1,\"3125\":1}}],[\"closeentry\",{\"1\":{\"286\":1}}],[\"closed\",{\"1\":{\"125\":1,\"1881\":1,\"3087\":3}}],[\"close\",{\"1\":{\"71\":1,\"125\":3,\"286\":7,\"1044\":1,\"1228\":1,\"1234\":1,\"1238\":2,\"1247\":1,\"1314\":1,\"1315\":3,\"1324\":2,\"1326\":4,\"2831\":1,\"2841\":1,\"2842\":1,\"2843\":2,\"2853\":1,\"2854\":1,\"2873\":2,\"2916\":1,\"2921\":4,\"2927\":1,\"3065\":3,\"3070\":1,\"3117\":1,\"3118\":1,\"3120\":3,\"3125\":1}}],[\"clod为例\",{\"1\":{\"1670\":1}}],[\"cloudnativesipservice\",{\"1\":{\"3244\":1}}],[\"cloud<\",{\"1\":{\"3104\":1}}],[\"cloud集成zipkin示例\",{\"1\":{\"3104\":1}}],[\"cloudstreamnodeport\",{\"1\":{\"1638\":1}}],[\"cloudstreamport\",{\"1\":{\"1638\":1}}],[\"cloudhubhttpsnodeport\",{\"1\":{\"1638\":1}}],[\"cloudhubhttpsport\",{\"1\":{\"1638\":1}}],[\"cloudhubquicnodeport\",{\"1\":{\"1638\":1}}],[\"cloudhubquicport\",{\"1\":{\"1638\":1}}],[\"cloudhubnodeport\",{\"1\":{\"1638\":1}}],[\"cloudhub\",{\"1\":{\"1638\":1}}],[\"cloudhubport\",{\"1\":{\"1638\":1}}],[\"cloudcore\",{\"1\":{\"1638\":1}}],[\"cloud\",{\"0\":{\"1650\":1,\"1652\":1,\"1700\":1},\"1\":{\"411\":2,\"1532\":2,\"1534\":2,\"1535\":3,\"1548\":1,\"1559\":1,\"1648\":4,\"1649\":4,\"1650\":96,\"1656\":1,\"1661\":3,\"1685\":1,\"1698\":3,\"1711\":1,\"1713\":80,\"1828\":1,\"3104\":1}}],[\"cloudinsight\",{\"1\":{\"193\":1}}],[\"cloneable\",{\"1\":{\"2968\":1}}],[\"clone\",{\"1\":{\"247\":1}}],[\"cli在redis\",{\"1\":{\"1786\":1}}],[\"cli客户端检测连接是否正常\",{\"1\":{\"1786\":1}}],[\"click\",{\"1\":{\"1444\":1,\"1450\":1,\"1451\":3,\"1453\":4,\"1461\":2,\"1462\":7,\"1463\":5,\"1464\":4,\"1467\":3,\"1469\":1,\"1470\":1}}],[\"cli\",{\"1\":{\"186\":6,\"193\":1,\"198\":1,\"219\":1,\"1601\":1,\"1610\":1,\"1613\":2,\"1671\":1,\"1673\":2,\"1741\":1,\"1744\":2,\"1780\":2,\"1786\":1,\"1787\":2,\"3246\":1}}],[\"clientchannel\",{\"1\":{\"1238\":6}}],[\"clienttransaction>\",{\"1\":{\"3208\":1}}],[\"clienttransaction\",{\"1\":{\"1094\":3,\"3190\":3,\"3199\":3,\"3208\":11}}],[\"clientsocket\",{\"1\":{\"2921\":8,\"3065\":7}}],[\"clients\",{\"1\":{\"193\":2}}],[\"clientsession\",{\"1\":{\"71\":6}}],[\"client\",{\"0\":{\"1666\":1},\"1\":{\"115\":2,\"216\":1,\"471\":4,\"491\":2,\"529\":2,\"1092\":5,\"1094\":4,\"1384\":1,\"1577\":1,\"1578\":1,\"1583\":2,\"1610\":2,\"1667\":1,\"1671\":2,\"1677\":4,\"1741\":2,\"1769\":1,\"1771\":1,\"3079\":5,\"3117\":1,\"3190\":3,\"3218\":1,\"3276\":11,\"3278\":2}}],[\"clusterip\",{\"1\":{\"3273\":1}}],[\"clusters\",{\"1\":{\"3273\":2}}],[\"clustersessionmanager\",{\"1\":{\"3235\":1}}],[\"clustertime\",{\"1\":{\"1764\":1}}],[\"clusteradmin\",{\"1\":{\"1736\":1}}],[\"clusterauthmode\",{\"1\":{\"1734\":1,\"1764\":1}}],[\"clusterfirst\",{\"1\":{\"1661\":1,\"1698\":1}}],[\"clusterrole\",{\"1\":{\"1638\":1}}],[\"clusterconfiguration\",{\"1\":{\"1638\":1}}],[\"clustername\",{\"1\":{\"1638\":1}}],[\"cluster节点操作命令\",{\"1\":{\"186\":1}}],[\"cluster\",{\"0\":{\"1650\":1},\"1\":{\"186\":25,\"208\":5,\"1511\":1,\"1513\":2,\"1542\":1,\"1560\":3,\"1633\":1,\"1634\":1,\"1637\":1,\"1638\":3,\"1650\":65,\"1661\":3,\"1675\":1,\"1677\":2,\"1698\":3,\"1713\":71,\"3273\":5,\"3282\":4}}],[\"cluster配置文件名\",{\"1\":{\"186\":1}}],[\"cluster配置\",{\"1\":{\"186\":1}}],[\"cluster集群结构搭建\",{\"0\":{\"186\":1}}],[\"cluster集群结构设计\",{\"0\":{\"185\":1}}],[\"claim\",{\"1\":{\"3278\":1}}],[\"clazz4\",{\"1\":{\"1260\":2}}],[\"clazz3\",{\"1\":{\"1260\":2,\"2965\":4}}],[\"clazz2\",{\"1\":{\"1260\":2,\"2965\":4,\"2980\":2}}],[\"clazz1\",{\"1\":{\"1260\":4,\"2965\":6}}],[\"clazz\",{\"1\":{\"269\":3,\"276\":1,\"279\":2,\"729\":3,\"746\":3,\"1069\":2,\"1081\":2,\"1269\":3,\"1270\":3,\"2968\":7,\"2969\":4,\"2970\":6,\"2971\":5,\"2980\":3,\"2983\":5,\"2984\":4,\"2987\":2,\"2989\":3,\"3000\":3,\"3003\":2,\"3007\":7,\"3137\":2,\"3149\":4,\"3150\":2}}],[\"clause\",{\"1\":{\"125\":1}}],[\"classinfodemo\",{\"1\":{\"2968\":1}}],[\"class对象存储在方法区\",{\"1\":{\"2981\":1}}],[\"class对象在jvm中的存储\",{\"0\":{\"2981\":1}}],[\"class对象在jvm中是如何存储的\",{\"1\":{\"2975\":1}}],[\"class对象\",{\"1\":{\"2980\":2}}],[\"class对象的三种获取方式\",{\"1\":{\"2965\":1}}],[\"class对象是在类加载过程中由jvm创建的\",{\"1\":{\"2975\":1}}],[\"class对象是反射的核心\",{\"1\":{\"1260\":1}}],[\"class对象是什么\",{\"0\":{\"1260\":1}}],[\"class类是反射机制的入口\",{\"1\":{\"2965\":1}}],[\"class类\",{\"0\":{\"2965\":1}}],[\"class常量池内容被加载到运行时常量池\",{\"1\":{\"2243\":1}}],[\"class的属性值\",{\"1\":{\"1455\":1,\"1460\":1}}],[\"class=javax\",{\"1\":{\"1644\":1}}],[\"class=\",{\"1\":{\"1266\":1,\"1440\":2,\"1443\":2,\"1444\":2,\"1455\":2,\"1467\":4,\"1564\":10,\"2072\":2,\"3102\":1}}],[\"class获取的class对象是否相同\",{\"1\":{\"2980\":2}}],[\"class获取\",{\"1\":{\"1260\":1,\"2965\":1}}],[\"classobjectdemo\",{\"1\":{\"1260\":2,\"2965\":1}}],[\"classelement\",{\"1\":{\"1087\":7,\"3162\":5}}],[\"classes\",{\"1\":{\"583\":2,\"746\":1}}],[\"classcastexception\",{\"1\":{\"1055\":1}}],[\"classdata\",{\"1\":{\"746\":4,\"747\":3}}],[\"classnotfoundexception\",{\"1\":{\"746\":3,\"747\":2,\"1225\":1,\"1260\":1,\"2926\":1,\"2965\":1}}],[\"classname\",{\"1\":{\"289\":2,\"746\":2,\"747\":2,\"1087\":3,\"2077\":1,\"2999\":1,\"3162\":4}}],[\"classloadingdemo\",{\"1\":{\"2980\":1}}],[\"classloaderdemo\",{\"1\":{\"745\":2,\"1147\":1}}],[\"classloader\",{\"1\":{\"729\":1,\"742\":4,\"745\":6,\"746\":1,\"747\":1,\"754\":1,\"1147\":4,\"1260\":3}}],[\"classlayout\",{\"1\":{\"711\":2}}],[\"class文件到内存\",{\"1\":{\"690\":1}}],[\"classpath=\",{\"1\":{\"1731\":1}}],[\"classpath\",{\"1\":{\"490\":1,\"746\":5,\"747\":5,\"788\":1,\"822\":1,\"856\":1,\"890\":1}}],[\"classpathxmlapplicationcontext\",{\"1\":{\"321\":1}}],[\"class主要是会去加载配置文件meta\",{\"1\":{\"419\":1,\"463\":1}}],[\"class<\",{\"1\":{\"290\":1,\"729\":2,\"746\":2,\"747\":1,\"1069\":1,\"1081\":1,\"1260\":4,\"1269\":1,\"1270\":1,\"2965\":3,\"2968\":4,\"2969\":1,\"2970\":1,\"2971\":1,\"2980\":2,\"2983\":3,\"2984\":1,\"2987\":1,\"2989\":1,\"2999\":4,\"3003\":1,\"3007\":1,\"3137\":1,\"3149\":1,\"3150\":1}}],[\"class<t>\",{\"1\":{\"269\":1,\"276\":1,\"279\":1,\"3000\":1}}],[\"class\",{\"0\":{\"1557\":1},\"1\":{\"60\":1,\"267\":3,\"269\":1,\"270\":1,\"278\":1,\"279\":1,\"282\":3,\"283\":1,\"284\":1,\"285\":2,\"286\":5,\"287\":2,\"289\":3,\"290\":1,\"291\":3,\"292\":1,\"293\":4,\"324\":1,\"325\":1,\"326\":1,\"338\":1,\"339\":1,\"352\":1,\"353\":1,\"354\":1,\"366\":2,\"367\":1,\"368\":1,\"380\":1,\"381\":1,\"382\":1,\"392\":3,\"407\":2,\"415\":2,\"417\":1,\"419\":1,\"423\":2,\"427\":1,\"428\":2,\"429\":4,\"430\":2,\"434\":3,\"438\":4,\"439\":2,\"440\":2,\"441\":1,\"445\":1,\"449\":1,\"450\":2,\"451\":1,\"452\":2,\"456\":5,\"459\":2,\"463\":3,\"471\":1,\"479\":3,\"500\":1,\"501\":3,\"502\":1,\"541\":1,\"578\":1,\"580\":1,\"592\":4,\"593\":1,\"609\":5,\"610\":1,\"613\":2,\"625\":1,\"626\":1,\"641\":1,\"642\":1,\"643\":1,\"658\":1,\"659\":1,\"660\":1,\"663\":1,\"675\":1,\"676\":1,\"677\":1,\"693\":1,\"694\":1,\"710\":3,\"711\":1,\"723\":1,\"727\":2,\"728\":4,\"729\":2,\"745\":3,\"746\":2,\"747\":2,\"772\":1,\"773\":1,\"781\":1,\"1037\":2,\"1038\":3,\"1040\":1,\"1041\":1,\"1043\":1,\"1044\":2,\"1052\":2,\"1053\":1,\"1055\":1,\"1056\":1,\"1058\":1,\"1064\":1,\"1065\":1,\"1066\":1,\"1068\":3,\"1069\":7,\"1077\":1,\"1078\":2,\"1079\":2,\"1081\":2,\"1087\":2,\"1094\":1,\"1095\":1,\"1111\":2,\"1125\":1,\"1144\":1,\"1145\":1,\"1147\":1,\"1150\":1,\"1151\":1,\"1160\":1,\"1161\":1,\"1162\":1,\"1164\":1,\"1165\":1,\"1166\":1,\"1178\":1,\"1179\":1,\"1181\":2,\"1182\":2,\"1185\":1,\"1186\":1,\"1190\":1,\"1191\":1,\"1193\":1,\"1194\":1,\"1203\":1,\"1204\":2,\"1205\":3,\"1206\":1,\"1208\":4,\"1209\":5,\"1210\":4,\"1211\":2,\"1212\":4,\"1221\":1,\"1222\":1,\"1224\":1,\"1225\":2,\"1228\":1,\"1232\":1,\"1238\":2,\"1243\":2,\"1246\":1,\"1247\":2,\"1249\":1,\"1250\":1,\"1260\":4,\"1261\":1,\"1264\":4,\"1267\":3,\"1269\":2,\"1270\":6,\"1276\":1,\"1280\":2,\"1290\":2,\"1294\":1,\"1295\":1,\"1296\":1,\"1312\":1,\"1314\":1,\"1315\":1,\"1321\":1,\"1324\":1,\"1325\":1,\"1326\":1,\"1332\":3,\"1431\":1,\"1439\":4,\"1440\":1,\"1443\":1,\"1444\":1,\"1644\":1,\"1949\":1,\"1962\":1,\"1974\":1,\"1975\":1,\"1987\":1,\"1988\":1,\"1996\":2,\"2007\":3,\"2012\":1,\"2027\":1,\"2035\":1,\"2047\":1,\"2065\":1,\"2068\":1,\"2076\":1,\"2077\":4,\"2078\":1,\"2079\":1,\"2080\":1,\"2089\":1,\"2090\":1,\"2091\":1,\"2099\":1,\"2100\":3,\"2101\":1,\"2109\":1,\"2110\":1,\"2111\":1,\"2112\":1,\"2113\":1,\"2114\":1,\"2115\":1,\"2123\":1,\"2125\":1,\"2126\":1,\"2128\":1,\"2129\":1,\"2130\":1,\"2132\":1,\"2133\":1,\"2134\":1,\"2161\":1,\"2173\":1,\"2174\":1,\"2183\":1,\"2190\":1,\"2207\":1,\"2212\":1,\"2213\":1,\"2214\":1,\"2216\":1,\"2217\":1,\"2218\":1,\"2220\":1,\"2221\":1,\"2223\":1,\"2224\":2,\"2228\":1,\"2232\":1,\"2234\":1,\"2239\":1,\"2240\":1,\"2243\":1,\"2245\":1,\"2246\":1,\"2248\":1,\"2249\":1,\"2256\":1,\"2263\":3,\"2265\":1,\"2266\":1,\"2269\":1,\"2271\":1,\"2276\":1,\"2282\":1,\"2287\":1,\"2292\":1,\"2303\":1,\"2304\":1,\"2311\":1,\"2319\":1,\"2323\":1,\"2324\":1,\"2325\":1,\"2326\":1,\"2327\":1,\"2328\":1,\"2329\":2,\"2356\":4,\"2369\":2,\"2370\":1,\"2371\":1,\"2372\":1,\"2373\":1,\"2388\":1,\"2392\":1,\"2406\":1,\"2407\":1,\"2408\":1,\"2409\":1,\"2410\":1,\"2427\":1,\"2429\":1,\"2436\":2,\"2441\":1,\"2451\":1,\"2456\":2,\"2465\":1,\"2466\":4,\"2467\":2,\"2468\":1,\"2485\":2,\"2490\":1,\"2498\":2,\"2508\":1,\"2512\":2,\"2513\":1,\"2522\":1,\"2523\":1,\"2524\":1,\"2525\":2,\"2544\":4,\"2555\":1,\"2577\":2,\"2604\":1,\"2605\":1,\"2612\":1,\"2623\":1,\"2632\":1,\"2642\":1,\"2654\":1,\"2660\":1,\"2661\":1,\"2668\":1,\"2669\":1,\"2679\":1,\"2680\":1,\"2685\":1,\"2697\":1,\"2704\":1,\"2712\":1,\"2733\":1,\"2734\":1,\"2736\":2,\"2737\":1,\"2738\":1,\"2741\":1,\"2742\":3,\"2745\":2,\"2746\":3,\"2748\":4,\"2750\":2,\"2759\":1,\"2761\":4,\"2765\":1,\"2766\":1,\"2770\":3,\"2779\":1,\"2784\":1,\"2785\":1,\"2786\":1,\"2795\":1,\"2796\":1,\"2797\":2,\"2798\":1,\"2808\":3,\"2810\":1,\"2819\":1,\"2831\":1,\"2832\":1,\"2833\":1,\"2837\":2,\"2843\":1,\"2844\":1,\"2845\":1,\"2849\":2,\"2855\":1,\"2856\":1,\"2857\":1,\"2861\":1,\"2866\":1,\"2867\":1,\"2868\":1,\"2873\":1,\"2878\":1,\"2879\":1,\"2880\":1,\"2881\":1,\"2885\":1,\"2891\":1,\"2892\":1,\"2893\":1,\"2897\":1,\"2902\":1,\"2903\":1,\"2904\":1,\"2905\":1,\"2909\":1,\"2914\":1,\"2915\":1,\"2916\":1,\"2917\":1,\"2921\":4,\"2927\":1,\"2935\":1,\"2936\":1,\"2937\":2,\"2938\":1,\"2955\":1,\"2956\":5,\"2960\":2,\"2965\":4,\"2968\":3,\"2969\":6,\"2970\":6,\"2971\":3,\"2974\":5,\"2980\":6,\"2983\":3,\"2984\":4,\"2986\":4,\"2989\":3,\"2990\":3,\"2993\":5,\"2999\":7,\"3000\":4,\"3002\":7,\"3003\":10,\"3005\":5,\"3007\":4,\"3010\":5,\"3019\":1,\"3020\":1,\"3021\":2,\"3023\":1,\"3024\":1,\"3025\":1,\"3034\":2,\"3035\":2,\"3036\":3,\"3049\":2,\"3050\":1,\"3052\":1,\"3065\":2,\"3066\":2,\"3085\":1,\"3086\":1,\"3087\":1,\"3097\":1,\"3116\":1,\"3117\":1,\"3118\":1,\"3120\":1,\"3125\":3,\"3134\":1,\"3135\":1,\"3136\":1,\"3137\":4,\"3141\":1,\"3147\":1,\"3149\":6,\"3150\":2,\"3154\":2,\"3159\":1,\"3160\":2,\"3162\":3,\"3165\":1,\"3166\":2,\"3170\":2,\"3190\":1,\"3205\":3,\"3206\":2,\"3208\":1,\"3209\":3,\"3212\":1,\"3214\":1,\"3215\":2,\"3217\":1,\"3218\":2,\"3232\":1,\"3235\":1,\"3237\":1,\"3238\":1,\"3240\":1,\"3241\":1,\"3244\":1,\"3276\":2}}],[\"crucible\",{\"1\":{\"2024\":1}}],[\"crud\",{\"1\":{\"45\":1}}],[\"crt=\",{\"1\":{\"1677\":2}}],[\"crond\",{\"1\":{\"1504\":7,\"1909\":3}}],[\"cron软件包是cron的主程序\",{\"1\":{\"1504\":1}}],[\"crontab文件\",{\"1\":{\"1907\":1}}],[\"crontab是针对系统的任务\",{\"1\":{\"1504\":1}}],[\"crontabs\",{\"1\":{\"1504\":1}}],[\"crontabs软件包是用来安装\",{\"1\":{\"1504\":1}}],[\"crontab\",{\"1\":{\"1504\":10,\"1907\":1,\"1909\":2,\"3269\":1}}],[\"crontab命令用于设置周期性被执行的指令\",{\"1\":{\"1504\":1}}],[\"cron\",{\"1\":{\"1504\":3,\"1687\":1}}],[\"crossorigin\",{\"1\":{\"434\":1}}],[\"crossorigin注解\",{\"1\":{\"434\":1}}],[\"crossorigin注解或者webmvcconfigurer的addcorsmappings方法来实现跨域访问\",{\"1\":{\"434\":1}}],[\"crc32\",{\"1\":{\"1408\":1}}],[\"credentialstore\",{\"1\":{\"3215\":5,\"3238\":2}}],[\"credentialsid\",{\"1\":{\"280\":3,\"1656\":3,\"1711\":3}}],[\"credential\",{\"1\":{\"280\":3,\"1656\":3,\"1711\":3,\"3238\":3}}],[\"creating\",{\"1\":{\"3002\":4}}],[\"creationtimestamp\",{\"1\":{\"1661\":1}}],[\"creator\",{\"1\":{\"1661\":1,\"1698\":1}}],[\"creators变量\",{\"1\":{\"125\":2}}],[\"createwebrtcpeerconnection\",{\"1\":{\"3232\":1}}],[\"createwwwauthenticateheader\",{\"1\":{\"3215\":1}}],[\"createoptimizedthreadpool\",{\"1\":{\"3225\":1}}],[\"createorderrecord\",{\"1\":{\"2955\":1}}],[\"createorder\",{\"1\":{\"2007\":3,\"2047\":1,\"2770\":2,\"2955\":1,\"3002\":3,\"3160\":1}}],[\"createresponse\",{\"1\":{\"3208\":3,\"3215\":1}}],[\"createrequest\",{\"1\":{\"1094\":1,\"3190\":1,\"3199\":1}}],[\"createexpiresheader\",{\"1\":{\"3199\":1}}],[\"createunauthorizedresponse\",{\"1\":{\"3215\":1}}],[\"createudpprovider\",{\"1\":{\"3206\":1}}],[\"createuri\",{\"1\":{\"3190\":1,\"3199\":1}}],[\"createuser\",{\"1\":{\"81\":1,\"223\":1,\"381\":1,\"427\":2,\"428\":1,\"438\":1,\"439\":2,\"440\":1,\"1736\":1,\"1737\":1,\"2065\":2,\"2068\":1,\"2770\":2,\"3005\":4,\"3049\":1}}],[\"createproxy\",{\"1\":{\"3002\":2,\"3005\":2}}],[\"createbean\",{\"1\":{\"2999\":2}}],[\"createtlslisteningpoint\",{\"1\":{\"3237\":1}}],[\"createtlsprovider\",{\"1\":{\"3206\":1}}],[\"createtcpprovider\",{\"1\":{\"3206\":1}}],[\"createtestfile\",{\"1\":{\"2868\":2}}],[\"createtime\",{\"1\":{\"2525\":3,\"3053\":1,\"3165\":1}}],[\"createtoheader\",{\"1\":{\"1094\":1,\"3190\":1,\"3199\":1}}],[\"createtoken\",{\"1\":{\"279\":1,\"307\":1}}],[\"createsslcontext\",{\"1\":{\"3214\":2}}],[\"createsdpcontent\",{\"1\":{\"3190\":2,\"3208\":1}}],[\"createsourcefile\",{\"1\":{\"3162\":1}}],[\"createsession\",{\"1\":{\"2525\":1}}],[\"createsipokresponse\",{\"1\":{\"3232\":1}}],[\"createsipuri\",{\"1\":{\"1094\":1}}],[\"createsipprovider\",{\"1\":{\"1094\":1,\"3190\":1,\"3206\":3,\"3218\":2}}],[\"createsipstack\",{\"1\":{\"1094\":1,\"3190\":1,\"3206\":1,\"3218\":1}}],[\"createdialog\",{\"1\":{\"3209\":1}}],[\"createdatabase\",{\"1\":{\"1738\":1}}],[\"created\",{\"1\":{\"1667\":1,\"2007\":1,\"2065\":1,\"3271\":1,\"3273\":1}}],[\"createnewconnection\",{\"1\":{\"1326\":2}}],[\"createlargefile\",{\"1\":{\"1224\":2}}],[\"createlisteningpoints\",{\"1\":{\"3218\":2}}],[\"createlisteningpoint\",{\"1\":{\"1094\":1,\"3190\":1,\"3206\":3,\"3218\":2,\"3237\":1}}],[\"createmaxforwardsheader\",{\"1\":{\"1094\":1,\"3190\":1}}],[\"createmessagefactory\",{\"1\":{\"1094\":1,\"3190\":1}}],[\"createviaheader\",{\"1\":{\"1094\":1,\"3190\":1}}],[\"createcontentlengthheader\",{\"1\":{\"1094\":1}}],[\"createcontenttypeheader\",{\"1\":{\"1094\":1,\"3190\":1,\"3208\":1}}],[\"createcontactheader\",{\"1\":{\"1094\":1,\"3190\":1,\"3224\":1}}],[\"createcollection\",{\"1\":{\"82\":1,\"1738\":1}}],[\"createcseqheader\",{\"1\":{\"1094\":1,\"3190\":1}}],[\"createfromheader\",{\"1\":{\"1094\":1,\"3190\":1,\"3199\":1}}],[\"createheaderfactory\",{\"1\":{\"1094\":1,\"3190\":1}}],[\"createack\",{\"1\":{\"3208\":1}}],[\"createaddress\",{\"1\":{\"1094\":3,\"3190\":3,\"3199\":2,\"3224\":1}}],[\"createaddressfactory\",{\"1\":{\"1094\":1,\"3190\":1}}],[\"createandupdate\",{\"1\":{\"441\":1}}],[\"create`\",{\"1\":{\"232\":9,\"1684\":9}}],[\"create\",{\"0\":{\"1667\":1},\"1\":{\"69\":1,\"70\":1,\"99\":2,\"107\":1,\"125\":16,\"186\":1,\"228\":1,\"232\":13,\"279\":1,\"307\":2,\"438\":1,\"445\":2,\"471\":2,\"529\":1,\"710\":1,\"993\":1,\"1232\":1,\"1238\":1,\"1358\":1,\"1532\":2,\"1535\":1,\"1573\":2,\"1633\":2,\"1637\":2,\"1640\":1,\"1677\":3,\"1684\":13,\"1687\":8,\"1807\":1,\"1825\":3,\"2917\":1,\"3005\":1,\"3053\":1,\"3165\":1,\"3250\":1}}],[\"createindex\",{\"1\":{\"68\":1,\"90\":2}}],[\"cr\",{\"1\":{\"125\":55}}],[\"crashed\",{\"1\":{\"125\":2}}],[\"crlpath\",{\"1\":{\"115\":1}}],[\"crl\",{\"1\":{\"115\":1}}],[\"cowset\",{\"1\":{\"2373\":1,\"2392\":1}}],[\"cowlist\",{\"1\":{\"2328\":2,\"2448\":3,\"2456\":1,\"2507\":3,\"2513\":4,\"2523\":8}}],[\"could\",{\"0\":{\"1557\":1},\"1\":{\"1764\":1}}],[\"count=262144\",{\"1\":{\"1513\":1,\"1610\":1}}],[\"countdown\",{\"1\":{\"1238\":2,\"2269\":1}}],[\"countdownlatch\",{\"1\":{\"1238\":3,\"2269\":3}}],[\"countdocuments\",{\"1\":{\"60\":1}}],[\"counter\",{\"1\":{\"677\":3,\"1125\":1,\"2039\":1,\"2522\":3,\"3097\":2}}],[\"counter=1\",{\"1\":{\"112\":1}}],[\"count++\",{\"1\":{\"552\":1,\"593\":1,\"1125\":1,\"1469\":1,\"2555\":1}}],[\"count`\",{\"1\":{\"232\":4,\"1684\":4,\"1687\":6}}],[\"count\",{\"1\":{\"58\":2,\"60\":2,\"89\":3,\"125\":4,\"157\":1,\"202\":1,\"204\":1,\"543\":2,\"552\":5,\"553\":3,\"593\":2,\"658\":3,\"663\":3,\"675\":6,\"693\":3,\"1056\":7,\"1079\":2,\"1125\":2,\"1166\":3,\"1170\":4,\"1469\":2,\"1513\":1,\"1527\":1,\"1575\":3,\"1999\":1,\"2263\":1,\"2269\":3,\"2282\":4,\"2291\":7,\"2327\":6,\"2409\":5,\"2466\":4,\"2522\":4,\"2555\":2,\"2873\":9,\"3103\":2,\"3134\":3,\"3145\":1,\"3149\":2}}],[\"co\",{\"1\":{\"1526\":1}}],[\"copiedfieldvalue\",{\"1\":{\"3007\":2}}],[\"copied\",{\"1\":{\"1321\":1,\"2837\":1,\"2866\":1,\"3007\":10}}],[\"copyright\",{\"1\":{\"1578\":1,\"1687\":1}}],[\"copywithbuffer\",{\"1\":{\"1224\":2,\"2868\":2}}],[\"copywithoutbuffer\",{\"1\":{\"1224\":2,\"2868\":2}}],[\"copyonwrite容器的性能优势更明显\",{\"1\":{\"2542\":1}}],[\"copyonwriteset\",{\"1\":{\"2369\":1}}],[\"copyonwritearrayset<>\",{\"1\":{\"2369\":1,\"2373\":1,\"2392\":1,\"2525\":1}}],[\"copyonwritearrayset\",{\"1\":{\"2363\":1,\"2373\":2,\"2525\":1,\"2542\":1}}],[\"copyonwritearraylist性能最佳\",{\"1\":{\"2542\":1}}],[\"copyonwritearraylist性能最优\",{\"1\":{\"2456\":1,\"2513\":1}}],[\"copyonwritearraylist使用误区\",{\"0\":{\"2535\":1}}],[\"copyonwritearraylist使用示例\",{\"0\":{\"2523\":1},\"1\":{\"2523\":1}}],[\"copyonwritearraylist的实现机制\",{\"1\":{\"2528\":1}}],[\"copyonwritearraylist的迭代器是弱一致性的\",{\"1\":{\"2352\":1}}],[\"copyonwritearraylistexample\",{\"1\":{\"2523\":1}}],[\"copyonwritearraylist<string>\",{\"1\":{\"2352\":1,\"2537\":1}}],[\"copyonwritearraylist<>\",{\"1\":{\"2328\":1,\"2340\":1,\"2352\":1,\"2448\":1,\"2456\":1,\"2507\":1,\"2513\":1,\"2523\":1,\"2536\":2,\"2537\":1}}],[\"copyonwritearraylist\",{\"1\":{\"1132\":1,\"2328\":2,\"2518\":1,\"2523\":1,\"2542\":2,\"2543\":1}}],[\"copyonwritelist\",{\"1\":{\"2356\":1}}],[\"copyonwritelist<e>\",{\"1\":{\"2356\":1}}],[\"copyofrange创建新数组\",{\"1\":{\"2296\":1}}],[\"copyofrange\",{\"1\":{\"2151\":1,\"2291\":1}}],[\"copyof\",{\"1\":{\"1198\":3,\"2151\":1,\"2161\":1,\"2272\":1,\"2291\":1,\"2318\":1,\"2320\":1,\"2355\":1,\"2356\":1,\"2434\":1,\"2436\":1,\"2438\":1,\"2677\":1}}],[\"copy\",{\"0\":{\"765\":1},\"1\":{\"1224\":2,\"1232\":2,\"1296\":2,\"1551\":2,\"1578\":1,\"2151\":2,\"2320\":1,\"2356\":2,\"2868\":6,\"3007\":13,\"3246\":2}}],[\"copyproperties\",{\"1\":{\"289\":1}}],[\"cooking\",{\"1\":{\"3007\":2}}],[\"cookie等\",{\"1\":{\"2065\":1}}],[\"cookie\",{\"1\":{\"304\":2,\"1412\":1}}],[\"coordinates\",{\"1\":{\"993\":1}}],[\"coolpad\",{\"1\":{\"113\":1}}],[\"coding\",{\"0\":{\"296\":1},\"1\":{\"297\":1,\"298\":1,\"1041\":2,\"3085\":1}}],[\"codecinfo\",{\"1\":{\"3209\":1}}],[\"coder\",{\"1\":{\"2289\":1}}],[\"codename\",{\"1\":{\"1764\":2}}],[\"code`\",{\"1\":{\"1687\":4}}],[\"code规范processor\",{\"1\":{\"1087\":1}}],[\"code规范检查\",{\"1\":{\"1087\":2}}],[\"code2\",{\"1\":{\"289\":3}}],[\"code1\",{\"1\":{\"289\":2}}],[\"code\",{\"1\":{\"38\":1,\"283\":1,\"429\":1,\"728\":1,\"1005\":2,\"1764\":2,\"1882\":1,\"2020\":3,\"2051\":5,\"2256\":2,\"2272\":2,\"3244\":1}}],[\"cors\",{\"1\":{\"1560\":2}}],[\"corsregistry\",{\"1\":{\"434\":1}}],[\"correctprocesslist\",{\"1\":{\"2508\":1}}],[\"correct\",{\"1\":{\"2047\":1}}],[\"correctly\",{\"1\":{\"1005\":1}}],[\"corrupt\",{\"1\":{\"125\":1}}],[\"coreix\",{\"1\":{\"1480\":1,\"1481\":3}}],[\"core<\",{\"1\":{\"711\":1,\"924\":1,\"936\":1,\"938\":1,\"953\":1,\"954\":1,\"963\":2}}],[\"core依赖\",{\"1\":{\"711\":1}}],[\"corepoolsize\",{\"1\":{\"622\":1,\"2539\":1,\"3225\":3}}],[\"core\",{\"1\":{\"235\":1,\"279\":4,\"280\":1,\"289\":2,\"1478\":3,\"1484\":4,\"1495\":4,\"1564\":6,\"1650\":9,\"1713\":9,\"1779\":2,\"2072\":2,\"3102\":1}}],[\"coalesce\",{\"1\":{\"125\":3}}],[\"cost\",{\"1\":{\"122\":2}}],[\"colonindex\",{\"1\":{\"3212\":3}}],[\"colorof\",{\"1\":{\"2656\":2}}],[\"colors\",{\"1\":{\"2144\":4}}],[\"color\",{\"1\":{\"1440\":1,\"1469\":1,\"2654\":1,\"2656\":3,\"2738\":5}}],[\"color=\",{\"1\":{\"1431\":2}}],[\"cols\",{\"1\":{\"125\":1,\"2173\":3,\"2174\":3}}],[\"collstats\",{\"1\":{\"1738\":1}}],[\"collutil\",{\"1\":{\"284\":1}}],[\"collector\",{\"0\":{\"476\":1},\"1\":{\"1537\":1,\"1548\":1,\"3104\":1}}],[\"collectors\",{\"1\":{\"269\":3,\"272\":1,\"472\":1,\"543\":3,\"553\":2,\"1178\":1,\"1190\":1,\"2221\":2,\"2329\":5,\"2340\":1,\"2369\":1,\"2408\":4,\"2448\":1,\"2452\":1,\"3209\":1}}],[\"collect\",{\"1\":{\"269\":1,\"472\":1,\"543\":3,\"553\":2,\"1178\":1,\"1190\":1,\"2221\":1,\"2329\":4,\"2340\":1,\"2408\":3,\"2448\":1,\"2452\":1,\"3209\":1}}],[\"collection<t>\",{\"1\":{\"3086\":1}}],[\"collection<object>\",{\"1\":{\"3007\":4}}],[\"collection<\",{\"1\":{\"2314\":5,\"2436\":1,\"2493\":1}}],[\"collection<e>\",{\"1\":{\"2314\":1,\"3046\":1}}],[\"collectioncomplexitydemo\",{\"1\":{\"2712\":1}}],[\"collectioncopy\",{\"1\":{\"1296\":1}}],[\"collectioncapacityoptimization\",{\"1\":{\"1193\":1}}],[\"collectionimmutabilitydemo\",{\"1\":{\"1191\":1}}],[\"collectioninitialization\",{\"1\":{\"1178\":1}}],[\"collectiondeduplicationandsorting\",{\"1\":{\"1182\":1}}],[\"collectiontraversal\",{\"1\":{\"1179\":1}}],[\"collection接口下有list\",{\"1\":{\"1173\":1}}],[\"collectionutilspitfalls\",{\"1\":{\"1194\":1}}],[\"collectionutils\",{\"1\":{\"281\":4,\"2058\":1}}],[\"collectionname\",{\"1\":{\"82\":4,\"84\":2,\"85\":6,\"86\":3,\"87\":2,\"89\":4,\"90\":5}}],[\"collections工具类提供了大量泛型方法\",{\"1\":{\"3047\":1}}],[\"collections工具类的泛型方法\",{\"0\":{\"3047\":1}}],[\"collections工具类中的synchronizedxxx方法就是典型应用\",{\"1\":{\"1186\":1}}],[\"collections4<\",{\"1\":{\"281\":1}}],[\"collections\",{\"1\":{\"82\":1,\"1182\":1,\"1186\":1,\"1191\":1,\"1194\":4,\"1197\":1,\"2027\":1,\"2326\":8,\"2328\":2,\"2337\":1,\"2358\":2,\"2373\":2,\"2379\":1,\"2392\":1,\"2410\":3,\"2424\":1,\"2452\":1,\"2456\":2,\"2478\":1,\"2513\":2,\"2536\":1,\"2586\":1,\"2613\":1,\"2640\":1,\"2670\":1,\"2692\":1,\"3047\":2,\"3215\":1}}],[\"collection\",{\"1\":{\"37\":1,\"47\":2,\"48\":3,\"49\":2,\"50\":2,\"58\":1,\"59\":1,\"60\":2,\"68\":2,\"91\":1,\"288\":1,\"542\":1,\"759\":1,\"1173\":1,\"1739\":1,\"3007\":1}}],[\"collate\",{\"1\":{\"1640\":1,\"1825\":3,\"1831\":2}}],[\"collate=utf8\",{\"1\":{\"232\":9,\"1684\":9}}],[\"collation\",{\"1\":{\"125\":3,\"1771\":1,\"1831\":2}}],[\"column注解标记字段名\",{\"1\":{\"3141\":1}}],[\"column=\",{\"1\":{\"3053\":5}}],[\"columnvalue\",{\"1\":{\"3000\":2}}],[\"columnname\",{\"1\":{\"3000\":2}}],[\"columncount\",{\"1\":{\"3000\":2}}],[\"columnaccess\",{\"1\":{\"125\":1}}],[\"column\",{\"1\":{\"125\":6,\"578\":1,\"1823\":1,\"1831\":9,\"3141\":3,\"3164\":2,\"3165\":3}}],[\"columns\",{\"1\":{\"122\":1,\"125\":3}}],[\"com自动同步时间\",{\"1\":{\"1907\":1}}],[\"com<\",{\"1\":{\"999\":1}}],[\"com>\",{\"1\":{\"997\":2,\"1092\":2,\"3180\":2}}],[\"combopooleddatasource等\",{\"1\":{\"369\":1}}],[\"compute\",{\"1\":{\"2534\":1}}],[\"computeifpresent\",{\"1\":{\"283\":2,\"2522\":1,\"2534\":1}}],[\"computeifabsent\",{\"1\":{\"283\":3,\"1081\":1,\"2410\":1,\"2525\":1,\"3150\":1}}],[\"compiler\",{\"1\":{\"936\":1,\"941\":1,\"956\":1,\"3147\":1}}],[\"compile\",{\"1\":{\"583\":2,\"925\":1,\"938\":1,\"951\":1,\"1656\":1,\"1711\":1}}],[\"compiled\",{\"1\":{\"125\":1}}],[\"company\",{\"1\":{\"2000\":2,\"2763\":2}}],[\"compase\",{\"1\":{\"1714\":1}}],[\"compat\",{\"1\":{\"1581\":1,\"1735\":1}}],[\"compatibility\",{\"1\":{\"1513\":2}}],[\"comparingbyvalue\",{\"1\":{\"2408\":1}}],[\"comparingbykey\",{\"1\":{\"2408\":1}}],[\"comparingint\",{\"1\":{\"1182\":1}}],[\"comparable<mutablekey>\",{\"1\":{\"2669\":1}}],[\"comparable<\",{\"1\":{\"2655\":2}}],[\"comparable<student>\",{\"1\":{\"2577\":1}}],[\"comparable<string>\",{\"1\":{\"2287\":1}}],[\"comparable<person>\",{\"1\":{\"2388\":1}}],[\"comparator<string>\",{\"1\":{\"2660\":1}}],[\"comparator<\",{\"1\":{\"2571\":1,\"2655\":1}}],[\"comparator<integer>\",{\"1\":{\"537\":1}}],[\"comparator\",{\"1\":{\"537\":1,\"1182\":1,\"2326\":1,\"2568\":1,\"2571\":4,\"2575\":3,\"2648\":1,\"2655\":1}}],[\"compareresultignorecase\",{\"1\":{\"2194\":1}}],[\"compareresult\",{\"1\":{\"2194\":1}}],[\"comparetoignorecase\",{\"1\":{\"2194\":1}}],[\"compareto\",{\"1\":{\"2194\":2,\"2326\":1,\"2371\":1,\"2388\":2,\"2467\":1,\"2577\":1,\"2655\":1,\"2660\":1,\"2669\":1,\"2947\":2}}],[\"compareandset\",{\"1\":{\"675\":1,\"676\":3,\"1139\":1,\"2485\":5,\"2544\":2}}],[\"compare\",{\"1\":{\"537\":1,\"663\":1,\"671\":1,\"2388\":1,\"2467\":1,\"2485\":1,\"2575\":1,\"2577\":1,\"2578\":1,\"2655\":2,\"2660\":1,\"2669\":1}}],[\"compact后状态\",{\"1\":{\"3116\":1}}],[\"compact保留未读数据\",{\"1\":{\"3116\":1}}],[\"compact\",{\"0\":{\"766\":1},\"1\":{\"456\":1,\"1338\":1,\"2914\":2,\"2920\":1,\"3116\":1}}],[\"complement\",{\"1\":{\"2715\":3}}],[\"complexexpressionexample\",{\"1\":{\"502\":1}}],[\"completionhandler<asynchronoussocketchannel\",{\"1\":{\"1238\":1,\"3120\":1}}],[\"completionhandler<integer\",{\"1\":{\"1238\":3,\"3120\":2}}],[\"completionhandler\",{\"1\":{\"1238\":2,\"3120\":1}}],[\"completablefuture等java特性\",{\"1\":{\"494\":1}}],[\"complete\",{\"1\":{\"125\":2}}],[\"completed\",{\"1\":{\"122\":1,\"1238\":4,\"2062\":1,\"3120\":3,\"3208\":1,\"3222\":1}}],[\"compresszip\",{\"1\":{\"286\":2}}],[\"compressdownloadutil\",{\"1\":{\"286\":6}}],[\"compositebytebuf\",{\"1\":{\"1347\":1,\"3130\":1}}],[\"compose不建议在生产环境使用\",{\"1\":{\"3250\":1}}],[\"compose目录\",{\"1\":{\"3250\":1}}],[\"compose目前已经完全支持linux\",{\"1\":{\"3248\":1}}],[\"compose编排nginx+springboot项目\",{\"0\":{\"3250\":1}}],[\"compose示例\",{\"0\":{\"3247\":1}}],[\"compose安装\",{\"1\":{\"1714\":1}}],[\"compose是带着的\",{\"1\":{\"1714\":1}}],[\"compose文件移动到了\",{\"1\":{\"1624\":1}}],[\"compose下载路径\",{\"1\":{\"1623\":1,\"1755\":1}}],[\"compose的方式部署\",{\"1\":{\"1535\":1}}],[\"compose\",{\"0\":{\"1622\":1,\"1747\":1,\"1754\":1,\"3248\":1,\"3249\":1},\"1\":{\"250\":1,\"557\":2,\"1610\":1,\"1623\":2,\"1624\":7,\"1630\":3,\"1714\":13,\"1719\":2,\"1747\":8,\"1755\":3,\"1756\":5,\"1757\":1,\"3246\":27,\"3248\":5,\"3249\":1,\"3250\":6,\"3262\":2}}],[\"component的类\",{\"1\":{\"2992\":1}}],[\"componentkinds\",{\"1\":{\"1648\":1,\"1649\":1,\"1650\":1,\"1685\":1,\"1688\":1,\"1713\":1}}],[\"component替代xml配置\",{\"1\":{\"1071\":1}}],[\"componentscan这个注解只会扫描当前包和其子包\",{\"1\":{\"461\":1}}],[\"componentscan\",{\"1\":{\"461\":2,\"463\":1}}],[\"component\",{\"1\":{\"267\":1,\"290\":2,\"292\":1,\"338\":1,\"407\":1,\"994\":1,\"1004\":1,\"1068\":1,\"3154\":1,\"3159\":2,\"3170\":1}}],[\"communication\",{\"1\":{\"3244\":1}}],[\"community\",{\"1\":{\"563\":1,\"1578\":1,\"1581\":1,\"1583\":5,\"1734\":1,\"1769\":1,\"1770\":1,\"1778\":1}}],[\"commons工具类\",{\"1\":{\"2205\":1}}],[\"commons<\",{\"1\":{\"281\":1}}],[\"common\",{\"1\":{\"1548\":1,\"1583\":1,\"1610\":1,\"1638\":1,\"1641\":5,\"1642\":1,\"1644\":1,\"1648\":1,\"1649\":1,\"1671\":1,\"1685\":1,\"1688\":1,\"1741\":1,\"1778\":1,\"1799\":1}}],[\"comment=\",{\"1\":{\"232\":9,\"1684\":9}}],[\"comment\",{\"1\":{\"125\":1,\"232\":76,\"994\":2,\"1684\":76,\"1687\":51,\"1831\":3}}],[\"committed\",{\"1\":{\"348\":1,\"3005\":1}}],[\"committransaction\",{\"1\":{\"71\":1,\"91\":1}}],[\"commit\",{\"1\":{\"125\":2,\"1687\":1,\"1794\":2,\"3005\":1,\"3246\":1}}],[\"commands\",{\"1\":{\"125\":1,\"1788\":1}}],[\"command\",{\"1\":{\"122\":1,\"125\":2,\"156\":1,\"250\":2,\"772\":1,\"1005\":1,\"1677\":1,\"1738\":1,\"1882\":1,\"3246\":4,\"3271\":1,\"3273\":1}}],[\"com\",{\"1\":{\"118\":2,\"125\":1,\"237\":1,\"247\":1,\"264\":4,\"267\":1,\"269\":4,\"286\":2,\"289\":4,\"302\":1,\"338\":3,\"367\":1,\"368\":1,\"393\":2,\"439\":6,\"471\":2,\"490\":5,\"500\":2,\"529\":2,\"585\":1,\"746\":1,\"981\":1,\"982\":3,\"993\":1,\"994\":1,\"997\":4,\"998\":1,\"999\":4,\"1087\":1,\"1092\":6,\"1094\":1,\"1266\":1,\"1281\":2,\"1362\":1,\"1389\":4,\"1390\":4,\"1409\":1,\"1418\":1,\"1443\":4,\"1444\":6,\"1446\":1,\"1448\":1,\"1536\":1,\"1578\":1,\"1581\":1,\"1612\":1,\"1615\":1,\"1617\":2,\"1620\":1,\"1621\":1,\"1623\":1,\"1626\":1,\"1632\":1,\"1635\":2,\"1644\":3,\"1649\":3,\"1666\":1,\"1669\":1,\"1672\":1,\"1675\":1,\"1686\":1,\"1688\":3,\"1714\":2,\"1715\":1,\"1734\":1,\"1738\":1,\"1743\":1,\"1746\":1,\"1747\":1,\"1749\":1,\"1752\":1,\"1753\":1,\"1755\":2,\"1841\":1,\"1849\":1,\"1879\":2,\"1907\":3,\"2000\":2,\"2763\":2,\"2796\":1,\"2965\":1,\"2980\":2,\"2999\":2,\"3010\":4,\"3053\":2,\"3085\":1,\"3100\":1,\"3147\":1,\"3162\":2,\"3177\":1,\"3180\":1,\"3215\":1,\"3224\":1,\"3245\":1,\"3246\":2,\"3248\":1,\"3257\":1,\"3261\":1,\"3269\":1,\"3271\":1,\"3273\":6,\"3276\":2}}],[\"conversionwithbufferexample\",{\"1\":{\"2880\":1}}],[\"conversion\",{\"1\":{\"2101\":1}}],[\"convertdocumentformat\",{\"1\":{\"1974\":1}}],[\"convert\",{\"1\":{\"125\":1,\"1831\":1,\"2467\":1}}],[\"convention\",{\"1\":{\"1074\":1}}],[\"congratulations\",{\"1\":{\"994\":1}}],[\"concgcthreads=<n>\",{\"1\":{\"797\":1,\"831\":1,\"865\":1,\"899\":1}}],[\"concurrentweakhashmap<k\",{\"1\":{\"2697\":1}}],[\"concurrentreferencehashmap\",{\"1\":{\"2697\":1}}],[\"concurrentsessionmanager\",{\"1\":{\"2525\":1}}],[\"concurrentskiplistmap优势\",{\"1\":{\"2672\":1}}],[\"concurrentskiplistmap与treemap相比有哪些优势和劣势\",{\"1\":{\"2672\":1}}],[\"concurrentskiplistmap<>\",{\"1\":{\"2410\":1}}],[\"concurrentskiplistmap\",{\"1\":{\"2410\":3,\"2424\":1,\"2518\":1,\"2542\":2}}],[\"concurrentskiplistset<>\",{\"1\":{\"2369\":1,\"2373\":1}}],[\"concurrentskiplistset\",{\"1\":{\"2363\":1,\"2369\":1,\"2373\":2}}],[\"concurrent包下\",{\"1\":{\"2516\":1}}],[\"concurrentdeque\",{\"1\":{\"2513\":3}}],[\"concurrentlinkeddeque是最佳选择\",{\"1\":{\"2513\":1}}],[\"concurrentlinkeddeque<>\",{\"1\":{\"2513\":1}}],[\"concurrentlinkeddeque<string>\",{\"1\":{\"2513\":1}}],[\"concurrentlinkeddeque\",{\"1\":{\"2513\":1}}],[\"concurrentlinkedqueue采用michael\",{\"1\":{\"2529\":1}}],[\"concurrentlinkedqueue采用无锁cas操作实现高并发性能\",{\"1\":{\"2473\":1}}],[\"concurrentlinkedqueue<>\",{\"1\":{\"2465\":1,\"2478\":1,\"2524\":1,\"2536\":1}}],[\"concurrentlinkedqueue等早期并发集合\",{\"1\":{\"2520\":1}}],[\"concurrentlinkedqueue等\",{\"1\":{\"2356\":1}}],[\"concurrentlinkedqueue\",{\"1\":{\"1132\":1,\"2461\":1,\"2463\":1,\"2465\":1,\"2518\":1,\"2524\":1,\"2542\":3,\"2543\":1}}],[\"concurrentnonblockingqueue<t>\",{\"1\":{\"2485\":1}}],[\"concurrentqueueperformancetest\",{\"1\":{\"2524\":1}}],[\"concurrentqueue\",{\"1\":{\"2465\":5}}],[\"concurrenthashset\",{\"1\":{\"2392\":1}}],[\"concurrenthashset<e>\",{\"1\":{\"2392\":1}}],[\"concurrenthashmap的size\",{\"1\":{\"2533\":1}}],[\"concurrenthashmap的get操作是无锁的\",{\"1\":{\"2426\":1}}],[\"concurrenthashmap常见问题\",{\"0\":{\"2532\":1}}],[\"concurrenthashmapexample\",{\"1\":{\"2522\":1}}],[\"concurrenthashmap并发操作示例\",{\"1\":{\"2522\":1}}],[\"concurrenthashmap使用示例\",{\"0\":{\"2522\":1}}],[\"concurrenthashmap使用分段锁\",{\"1\":{\"2520\":1}}],[\"concurrenthashmap新增stream\",{\"1\":{\"2520\":1}}],[\"concurrenthashmap彻底重构\",{\"1\":{\"2520\":1}}],[\"concurrenthashmap在jdk\",{\"0\":{\"2541\":1},\"1\":{\"2541\":1}}],[\"concurrenthashmap在jdk7使用segment分段锁\",{\"1\":{\"2426\":1}}],[\"concurrenthashmap在jdk8中的设计\",{\"1\":{\"2416\":1}}],[\"concurrenthashmap结果\",{\"1\":{\"2410\":1}}],[\"concurrenthashmap初始化\",{\"1\":{\"2406\":1}}],[\"concurrenthashmap重构为cas+synchronized\",{\"1\":{\"2404\":1}}],[\"concurrenthashmap数据结构演变\",{\"0\":{\"2403\":1}}],[\"concurrenthashmap实现原理\",{\"0\":{\"2527\":1}}],[\"concurrenthashmap实现\",{\"1\":{\"1197\":1}}],[\"concurrenthashmap\",{\"1\":{\"1132\":2,\"1175\":1,\"1197\":1,\"2039\":1,\"2400\":1,\"2406\":5,\"2410\":7,\"2424\":1,\"2518\":1,\"2522\":1,\"2525\":1,\"2542\":4,\"2543\":1}}],[\"concurrenthashmap<t\",{\"1\":{\"2544\":1}}],[\"concurrenthashmap<e\",{\"1\":{\"2392\":1}}],[\"concurrenthashmap<string\",{\"1\":{\"1132\":1,\"2420\":1,\"2533\":1,\"2534\":1}}],[\"concurrenthashmap<class<\",{\"1\":{\"1081\":1}}],[\"concurrenthashmap<>\",{\"1\":{\"283\":1,\"1081\":1,\"1132\":1,\"2039\":1,\"2392\":1,\"2406\":1,\"2410\":1,\"2420\":1,\"2522\":1,\"2525\":1,\"2533\":1,\"2534\":1,\"2544\":1,\"2613\":1,\"2640\":1,\"3150\":1,\"3208\":2,\"3209\":1}}],[\"concurrentmap\",{\"1\":{\"2420\":3,\"2522\":4,\"2613\":1,\"2640\":1,\"2670\":1}}],[\"concurrentmap<string\",{\"1\":{\"2039\":1}}],[\"concurrentmodification\",{\"1\":{\"2536\":1}}],[\"concurrentmodificationexception\",{\"0\":{\"2340\":1,\"2382\":1,\"2420\":1},\"1\":{\"1190\":1,\"1194\":1,\"2441\":6,\"2498\":7}}],[\"concurrentmodificationexception异常演示与解决方案\",{\"1\":{\"1190\":1}}],[\"concurrentmodificationexception异常\",{\"0\":{\"1190\":1},\"1\":{\"2613\":1,\"2670\":1}}],[\"concurrentmodificationdemo\",{\"1\":{\"1190\":1}}],[\"concurrent\",{\"1\":{\"269\":1,\"471\":1,\"770\":1,\"783\":1,\"1238\":1,\"2269\":1,\"2282\":1,\"2328\":1,\"2373\":2,\"2406\":1,\"2410\":2,\"2429\":2,\"2465\":3,\"2466\":4,\"2467\":3,\"2485\":1,\"2513\":3,\"2522\":4,\"2523\":4,\"2524\":1,\"2525\":2,\"2544\":2,\"2921\":2,\"3217\":2}}],[\"concatenatestringsoptimized\",{\"1\":{\"2723\":1}}],[\"concatenatestrings\",{\"1\":{\"2723\":1}}],[\"concatmethod\",{\"1\":{\"1270\":3}}],[\"concat\",{\"1\":{\"125\":2,\"1270\":2,\"1831\":3,\"2191\":1}}],[\"controlplane\",{\"1\":{\"3273\":2}}],[\"controlplaneendpoint\",{\"1\":{\"1638\":1}}],[\"controlflow\",{\"1\":{\"2078\":1}}],[\"control\",{\"1\":{\"1660\":1,\"1818\":1}}],[\"controlleradvice统一处理控制器层异常\",{\"1\":{\"2956\":1}}],[\"controlleradvice\",{\"1\":{\"429\":1,\"2956\":1}}],[\"controlleradvice和\",{\"1\":{\"429\":1}}],[\"controller\",{\"1\":{\"377\":1,\"380\":1,\"386\":1,\"387\":2,\"393\":1,\"2763\":1}}],[\"controllermethodlogaspect\",{\"1\":{\"267\":1}}],[\"controllermethodlog\",{\"1\":{\"267\":6}}],[\"continue关键字\",{\"1\":{\"2809\":1}}],[\"continue用于跳过当前循环\",{\"1\":{\"2137\":1}}],[\"continuedemo\",{\"1\":{\"2133\":1}}],[\"continue\",{\"0\":{\"2133\":1},\"1\":{\"993\":1,\"1087\":2,\"1228\":1,\"1237\":1,\"2078\":2,\"2133\":1,\"2809\":2,\"2916\":1,\"2959\":1,\"3007\":1,\"3118\":1}}],[\"containskey\",{\"1\":{\"2512\":3,\"2534\":1,\"2544\":1,\"2602\":1,\"2631\":1,\"2715\":1,\"2999\":1,\"3007\":1,\"3086\":1}}],[\"containsall\",{\"1\":{\"2314\":1,\"2372\":1}}],[\"containsduplicate\",{\"1\":{\"1170\":1}}],[\"contains\",{\"1\":{\"1087\":3,\"2195\":2,\"2314\":1,\"2324\":3,\"2369\":2,\"2513\":1,\"2544\":1,\"2588\":1,\"2602\":1,\"2631\":1,\"2712\":4,\"3103\":1,\"3215\":1}}],[\"containerport\",{\"1\":{\"1648\":2,\"1649\":1,\"1650\":11,\"1660\":1,\"1661\":1,\"1685\":2,\"1688\":1,\"1698\":1,\"1713\":12}}],[\"containers\",{\"1\":{\"1648\":1,\"1649\":1,\"1650\":10,\"1660\":1,\"1661\":2,\"1685\":1,\"1688\":1,\"1698\":1,\"1713\":11,\"3276\":1}}],[\"containerd\",{\"1\":{\"1613\":2,\"1673\":2,\"1744\":2}}],[\"container\",{\"1\":{\"250\":3,\"280\":2,\"1507\":1,\"1517\":1,\"1520\":1,\"1535\":2,\"1620\":1,\"1648\":1,\"1649\":1,\"1650\":10,\"1656\":2,\"1660\":1,\"1661\":1,\"1685\":1,\"1688\":1,\"1698\":1,\"1711\":2,\"1713\":11,\"1752\":1,\"1809\":1,\"2999\":4,\"3271\":1,\"3273\":1}}],[\"contact头域\",{\"1\":{\"3211\":1}}],[\"contacturi\",{\"1\":{\"3190\":3,\"3199\":1}}],[\"contactheader\",{\"1\":{\"1094\":3,\"3190\":3,\"3199\":1,\"3224\":3}}],[\"contactaddress\",{\"1\":{\"1094\":2,\"3190\":2,\"3224\":2}}],[\"contact\",{\"1\":{\"122\":1,\"1092\":1,\"3180\":2}}],[\"contexts\",{\"1\":{\"3273\":1}}],[\"context\",{\"1\":{\"286\":2,\"290\":2,\"754\":1,\"3273\":3}}],[\"contextpath=\",{\"1\":{\"235\":1}}],[\"contextpath=$\",{\"1\":{\"235\":1}}],[\"contextpath\",{\"1\":{\"235\":1}}],[\"content=\",{\"1\":{\"1447\":1,\"1450\":1,\"1455\":1,\"1456\":1,\"1457\":1,\"1458\":1,\"1459\":1,\"1461\":1,\"1462\":1,\"1463\":1,\"1464\":1,\"1467\":1,\"1469\":1}}],[\"contentlength\",{\"1\":{\"1325\":7}}],[\"contentbuffer\",{\"1\":{\"1325\":8}}],[\"contenttypeheader\",{\"1\":{\"1094\":2,\"3190\":3}}],[\"contentequals\",{\"1\":{\"1087\":1}}],[\"contents\",{\"1\":{\"999\":1,\"1005\":1}}],[\"contentobj\",{\"1\":{\"289\":5}}],[\"content\",{\"1\":{\"232\":3,\"269\":1,\"285\":2,\"286\":2,\"289\":16,\"471\":2,\"999\":1,\"1000\":1,\"1092\":2,\"1324\":1,\"1440\":2,\"1560\":1,\"1684\":3,\"1914\":1,\"2831\":3,\"2832\":2,\"2855\":2,\"2879\":3,\"2921\":1,\"2951\":3,\"3070\":1,\"3180\":2,\"3205\":3}}],[\"conntrack\",{\"1\":{\"1610\":1,\"1636\":1,\"1677\":3}}],[\"conn执行进行配置\",{\"1\":{\"1397\":1}}],[\"conn\",{\"1\":{\"125\":3,\"294\":1,\"1397\":6}}],[\"connect实现认证\",{\"1\":{\"2012\":1}}],[\"connect=zookeeper\",{\"1\":{\"1535\":1}}],[\"connect=10\",{\"1\":{\"1530\":1}}],[\"connect=192\",{\"1\":{\"1530\":1}}],[\"connectexception\",{\"1\":{\"1337\":1}}],[\"connected\",{\"1\":{\"193\":2}}],[\"connecting\",{\"1\":{\"1788\":1}}],[\"connectivity\",{\"1\":{\"1104\":1}}],[\"connectionfactory\",{\"1\":{\"3241\":2}}],[\"connectioninfo\",{\"1\":{\"3205\":1}}],[\"connectioncounter\",{\"1\":{\"3097\":3}}],[\"connectionmetrics\",{\"1\":{\"3097\":2}}],[\"connectionpool\",{\"1\":{\"1326\":2,\"3097\":1,\"3241\":5}}],[\"connection>\",{\"1\":{\"999\":1}}],[\"connections=1000\",{\"1\":{\"1826\":1}}],[\"connections\",{\"1\":{\"125\":2,\"193\":1,\"216\":1,\"1385\":1,\"1578\":2,\"1595\":1,\"3097\":4,\"3218\":1}}],[\"connection\",{\"0\":{\"1669\":1},\"1\":{\"125\":9,\"216\":1,\"445\":1,\"1324\":1,\"1677\":1,\"1818\":1,\"1826\":1,\"2051\":1,\"2921\":1,\"3005\":26,\"3241\":4}}],[\"connector\",{\"1\":{\"438\":1,\"439\":1,\"440\":1,\"1828\":1}}],[\"connecttimeout=1000\",{\"1\":{\"235\":2}}],[\"connect\",{\"1\":{\"125\":10,\"1337\":2,\"1339\":1,\"1409\":1,\"1573\":1,\"1578\":1,\"3117\":1,\"3118\":1}}],[\"conf不写的话需要跟配置中的键保持一致\",{\"1\":{\"1694\":1}}],[\"conf中的配置信息关联给\",{\"1\":{\"1694\":1}}],[\"conf`\",{\"1\":{\"1687\":2}}],[\"conf和ld\",{\"1\":{\"1586\":1}}],[\"confg\",{\"1\":{\"1535\":1}}],[\"conf文件\",{\"0\":{\"1524\":1},\"1\":{\"1595\":1,\"1736\":1,\"1788\":2,\"3250\":1}}],[\"conf的配置文件\",{\"1\":{\"1692\":1,\"1787\":1}}],[\"conf的位置\",{\"1\":{\"1503\":1}}],[\"conf的原始备份文件\",{\"1\":{\"1384\":1}}],[\"conf有哪些属性模块\",{\"0\":{\"1385\":1}}],[\"confirming\",{\"1\":{\"994\":1}}],[\"configlocation>\",{\"1\":{\"2018\":1}}],[\"config配置问题\",{\"1\":{\"1788\":1}}],[\"config配置文件即接入成功\",{\"1\":{\"1552\":1}}],[\"configs\",{\"1\":{\"1656\":1,\"1711\":1}}],[\"config用于指定rsyncd\",{\"1\":{\"1503\":1}}],[\"config=\",{\"1\":{\"1503\":1}}],[\"configuretlslisteningpoint\",{\"1\":{\"3214\":1}}],[\"configured\",{\"1\":{\"1788\":1}}],[\"configureblocking\",{\"1\":{\"1228\":2,\"1315\":2,\"1324\":2,\"2916\":2,\"2921\":4,\"3079\":2,\"3117\":1,\"3118\":2}}],[\"configure\",{\"1\":{\"451\":2,\"456\":1,\"1416\":1,\"1779\":2}}],[\"configuration>\",{\"1\":{\"941\":1,\"956\":1,\"957\":1,\"999\":2,\"1003\":2,\"1005\":2,\"1564\":1,\"2018\":1,\"3102\":1,\"3147\":1}}],[\"configuration加载\",{\"1\":{\"459\":1}}],[\"configurationproperties提供类型安全的配置读取\",{\"1\":{\"409\":1}}],[\"configurationproperties\",{\"1\":{\"407\":1,\"438\":1,\"445\":2}}],[\"configurationproperties注解\",{\"1\":{\"407\":1}}],[\"configuration\",{\"1\":{\"282\":1,\"339\":1,\"353\":1,\"367\":1,\"368\":1,\"382\":1,\"423\":1,\"430\":1,\"434\":1,\"438\":1,\"439\":1,\"445\":1,\"451\":1,\"456\":1,\"994\":1,\"1074\":1,\"1517\":1,\"1520\":1,\"1527\":1,\"1578\":1,\"2012\":1}}],[\"config可以集中管理配置\",{\"1\":{\"411\":1}}],[\"config或者springboot的actuator\",{\"1\":{\"411\":1}}],[\"configcontroller\",{\"1\":{\"407\":1}}],[\"configidtag`\",{\"1\":{\"232\":1,\"1684\":1}}],[\"configinfotag\",{\"1\":{\"232\":1,\"1684\":1}}],[\"configinfobeta\",{\"1\":{\"232\":1,\"1684\":1}}],[\"configinfoaggr\",{\"1\":{\"232\":1,\"1684\":1}}],[\"configinfo\",{\"1\":{\"232\":1,\"1684\":1}}],[\"configtagrelation\",{\"1\":{\"232\":1,\"1684\":1}}],[\"config\",{\"1\":{\"122\":2,\"165\":2,\"186\":1,\"219\":4,\"232\":19,\"235\":1,\"250\":2,\"261\":3,\"264\":2,\"1369\":1,\"1370\":2,\"1372\":3,\"1490\":3,\"1509\":1,\"1510\":1,\"1511\":1,\"1512\":2,\"1518\":1,\"1520\":1,\"1523\":2,\"1526\":2,\"1530\":1,\"1610\":1,\"1612\":1,\"1633\":4,\"1634\":1,\"1637\":4,\"1638\":2,\"1643\":1,\"1648\":1,\"1649\":1,\"1650\":10,\"1659\":1,\"1661\":7,\"1669\":1,\"1672\":2,\"1675\":1,\"1677\":5,\"1684\":19,\"1685\":1,\"1688\":1,\"1698\":1,\"1713\":11,\"1734\":2,\"1736\":1,\"1743\":1,\"1764\":9,\"1787\":3,\"1788\":1,\"2057\":1,\"2763\":1,\"3241\":2,\"3245\":2,\"3268\":1,\"3273\":3}}],[\"config服务器和分片服务器组成\",{\"1\":{\"70\":1}}],[\"conf路径\",{\"1\":{\"250\":2}}],[\"conf配置文件中的ip和端口是否一致\",{\"1\":{\"1788\":1}}],[\"conf配置文件中可以使用limit\",{\"1\":{\"1395\":1}}],[\"conf配置文件讲解\",{\"0\":{\"1787\":1}}],[\"conf配置文件启动\",{\"1\":{\"1734\":1}}],[\"conf配置文件形式\",{\"1\":{\"1734\":1}}],[\"conf配置文件\",{\"1\":{\"219\":1,\"1694\":1,\"1788\":2}}],[\"conf配置\",{\"1\":{\"216\":1}}],[\"conf\",{\"0\":{\"249\":1},\"1\":{\"178\":1,\"216\":3,\"219\":4,\"234\":2,\"235\":1,\"243\":2,\"250\":6,\"1362\":3,\"1372\":2,\"1384\":5,\"1417\":2,\"1421\":1,\"1422\":1,\"1423\":1,\"1427\":1,\"1503\":3,\"1513\":1,\"1523\":4,\"1524\":2,\"1526\":4,\"1528\":1,\"1529\":2,\"1530\":1,\"1535\":4,\"1577\":4,\"1578\":8,\"1586\":1,\"1595\":15,\"1610\":4,\"1694\":2,\"1734\":2,\"1736\":1,\"1764\":2,\"1779\":1,\"1780\":2,\"1786\":2,\"1787\":1,\"1788\":3,\"1848\":1,\"3250\":5,\"3271\":2}}],[\"conflicting\",{\"1\":{\"125\":1,\"1020\":1}}],[\"condition\",{\"1\":{\"459\":1,\"642\":2,\"660\":3,\"1129\":1,\"1139\":1,\"2033\":1}}],[\"conditionaloperatordemo\",{\"1\":{\"2114\":1}}],[\"conditionalonmissingbean\",{\"1\":{\"415\":1,\"459\":1}}],[\"conditionalonclass标记则会先进行判断\",{\"1\":{\"459\":1}}],[\"conditionalonclass注解被\",{\"1\":{\"459\":1}}],[\"conditionalonclass注解标识的value值\",{\"1\":{\"415\":1,\"459\":1}}],[\"conditionalonclass注解\",{\"1\":{\"415\":1,\"459\":1}}],[\"conditionalonclass\",{\"1\":{\"415\":1,\"459\":1}}],[\"conditional条件加载相应的bean\",{\"1\":{\"463\":1}}],[\"conditional标识用于存储值给myifbean类\",{\"1\":{\"459\":1}}],[\"conditional注解进行条件判断\",{\"1\":{\"463\":1}}],[\"conditional注解用于初始化器实现类对标记的值进行判断是否满足条件\",{\"1\":{\"459\":1}}],[\"conditional注解的条件则创建\",{\"1\":{\"463\":1}}],[\"conditional注解的条件判断是否创建对应的bean\",{\"1\":{\"423\":1}}],[\"conditional注解的条件\",{\"1\":{\"422\":1}}],[\"conditional注解来判断是否创建某个bean\",{\"1\":{\"415\":1}}],[\"conditional修饰执行\",{\"1\":{\"415\":1,\"459\":1}}],[\"conditional\",{\"1\":{\"415\":1,\"419\":1,\"459\":2,\"463\":1,\"2114\":1}}],[\"cond\",{\"1\":{\"125\":4}}],[\"con\",{\"1\":{\"125\":1}}],[\"consistenthash\",{\"1\":{\"3086\":1}}],[\"consistenthash<t>\",{\"1\":{\"3086\":1}}],[\"consistent\",{\"1\":{\"2543\":1,\"3086\":1}}],[\"consistency\",{\"1\":{\"43\":1,\"348\":1}}],[\"conscious\",{\"1\":{\"2272\":2}}],[\"consume\",{\"1\":{\"642\":1,\"2555\":1}}],[\"consumerlist\",{\"1\":{\"3041\":3}}],[\"consumer组合\",{\"1\":{\"557\":1}}],[\"consumer<\",{\"1\":{\"2434\":1,\"2491\":1}}],[\"consumer<string>\",{\"1\":{\"537\":1,\"538\":1,\"557\":3}}],[\"consumer<writesheet>\",{\"1\":{\"269\":1}}],[\"consumer\",{\"1\":{\"269\":1,\"537\":1,\"538\":3,\"1535\":3,\"2466\":5,\"2524\":3,\"3041\":2}}],[\"console窗口展示\",{\"1\":{\"1738\":1}}],[\"consoleappender\",{\"1\":{\"1564\":1,\"3102\":1}}],[\"console\",{\"1\":{\"250\":2,\"1534\":2,\"1535\":2,\"1638\":1,\"3102\":2}}],[\"consecutive\",{\"1\":{\"125\":1}}],[\"constraint\",{\"1\":{\"1684\":2}}],[\"constraints\",{\"1\":{\"289\":1}}],[\"constructor对象\",{\"1\":{\"3011\":1}}],[\"constructor<\",{\"1\":{\"2969\":2,\"2999\":1,\"3007\":1}}],[\"constructor\",{\"1\":{\"1261\":1,\"2966\":1,\"2969\":3,\"2981\":1,\"2999\":3,\"3007\":4,\"3135\":1}}],[\"constantfoldingdemo\",{\"1\":{\"2249\":1}}],[\"constantpoolworkflow\",{\"1\":{\"2243\":1}}],[\"constant\",{\"1\":{\"125\":1,\"279\":1,\"693\":2,\"724\":1,\"728\":1,\"1038\":1,\"1151\":2}}],[\"constants\",{\"1\":{\"125\":1,\"2256\":1}}],[\"const\",{\"1\":{\"91\":1,\"125\":3,\"2081\":1,\"2085\":1}}],[\"这与反射机制有什么关系\",{\"1\":{\"2994\":1}}],[\"这与jvm内存结构有什么关系\",{\"1\":{\"703\":1}}],[\"这并不完全违背封装性原则\",{\"1\":{\"2975\":1}}],[\"这类错误通常应该在开发阶段修复\",{\"1\":{\"2931\":1}}],[\"这类的数据库的\",{\"1\":{\"129\":1}}],[\"这行错误信息会写入到错误日志文件\",{\"1\":{\"2909\":1}}],[\"这行内容会写入到日志文件\",{\"1\":{\"2909\":1}}],[\"这行内容会被自动刷新\",{\"1\":{\"2904\":2}}],[\"这行内容需要手动刷新\",{\"1\":{\"2904\":1}}],[\"这行内容不会被自动刷新\",{\"1\":{\"2904\":1}}],[\"这使枚举成为实现单例模式的最佳实践\",{\"1\":{\"2826\":1}}],[\"这使得我们可以修改对象的内容\",{\"1\":{\"1058\":1}}],[\"这使得lambda表达式具有更高的性能和更简洁的字节码\",{\"1\":{\"556\":1}}],[\"这使得即使在没有源代码的情况下\",{\"1\":{\"505\":1}}],[\"这使得可以为lambda参数添加注解\",{\"1\":{\"469\":1}}],[\"这正是多态带来的好处\",{\"1\":{\"2754\":1}}],[\"这要求子类不能改变父类的预期行为\",{\"1\":{\"2745\":1}}],[\"这只是为了开发目的\",{\"1\":{\"3256\":1}}],[\"这只\",{\"1\":{\"2738\":1}}],[\"这三个概念相互关联\",{\"1\":{\"2756\":1}}],[\"这三种引用类型有明显区别\",{\"1\":{\"2698\":1}}],[\"这三部分依次是头部\",{\"1\":{\"303\":1}}],[\"这有助于提高代码的内聚性和可维护性\",{\"1\":{\"2770\":1}}],[\"这有助于减少内存分配的冲突\",{\"1\":{\"2455\":1}}],[\"这有助于实现封装性原则\",{\"1\":{\"2085\":1}}],[\"这对对象排序很重要\",{\"1\":{\"2357\":1}}],[\"这对stringbuilder有影响吗\",{\"1\":{\"2281\":1}}],[\"这对于安全方面来说是很好的\",{\"1\":{\"1381\":1}}],[\"这对于java集合框架等核心api的演进至关重要\",{\"1\":{\"549\":1}}],[\"这对于需要低延迟的应用至关重要\",{\"1\":{\"487\":1}}],[\"这可能会导致代码的执行流程变得混乱\",{\"1\":{\"2138\":1}}],[\"这可能会导致逻辑错误\",{\"1\":{\"2137\":1}}],[\"这可能会破坏对象的完整性和一致性\",{\"1\":{\"1275\":1}}],[\"这将显示public区域的所有配置\",{\"1\":{\"1932\":1}}],[\"这将列出所有已配置的区域以及它们各自绑定的接口\",{\"1\":{\"1931\":1}}],[\"这将列出public区域中所有开放的端口\",{\"1\":{\"1930\":1}}],[\"这将从public区域移除http服务的访问权限\",{\"1\":{\"1928\":1}}],[\"这将为public区域添加http服务的访问权限\",{\"1\":{\"1927\":1}}],[\"这将永久地从public区域移除tcp端口80的访问权限\",{\"1\":{\"1926\":1}}],[\"这将永久地为public区域添加tcp端口80的访问权限\",{\"1\":{\"1925\":1}}],[\"这两个格式都可以的\",{\"1\":{\"1488\":1}}],[\"这也可以避免开发者使用这些可能在未来版本中成为关键字的单词作为标识符\",{\"1\":{\"2085\":1}}],[\"这也是linkedhashmap的实现方式\",{\"1\":{\"2512\":1}}],[\"这也是反向代理服务器的一个重要的作用\",{\"1\":{\"1401\":1}}],[\"这也是一种实现方式\",{\"1\":{\"1349\":1}}],[\"这也正是我们要将的数据的删除策略的问题\",{\"1\":{\"147\":1}}],[\"这在需要多次读取同一部分数据的场景非常有用\",{\"1\":{\"2849\":1}}],[\"这在服务器应用中尤为重要\",{\"1\":{\"1254\":1}}],[\"这在某些场景下使代码更简洁\",{\"1\":{\"1254\":1}}],[\"这需要开发者平衡线程安全和性能之间的关系\",{\"1\":{\"1137\":1}}],[\"这意味着当键对象没有被其他强引用指向时\",{\"1\":{\"2676\":1}}],[\"这意味着服务器不需要保存会话状态信息\",{\"1\":{\"1100\":1}}],[\"这意味着你可以在\",{\"1\":{\"31\":1}}],[\"这会覆盖try中的return\",{\"1\":{\"2959\":1}}],[\"这会覆盖try或catch中的返回值\",{\"1\":{\"2959\":1}}],[\"这会严重影响性能\",{\"1\":{\"2959\":1}}],[\"这会影响性能\",{\"1\":{\"2941\":1}}],[\"这会隐藏潜在错误\",{\"1\":{\"2930\":1}}],[\"这会导致以下问题\",{\"1\":{\"3017\":1}}],[\"这会导致读取时直接跳过\",{\"1\":{\"2896\":1}}],[\"这会导致精度问题\",{\"1\":{\"2105\":1}}],[\"这会导致编译错误\",{\"1\":{\"2084\":1}}],[\"这会导致开发效率的降低和沟通成本的增加\",{\"1\":{\"1953\":1,\"1966\":1,\"1979\":1,\"1992\":1}}],[\"这会导致开发者的误解和错误\",{\"1\":{\"1952\":1,\"1965\":1,\"1978\":1,\"1991\":1}}],[\"这会导致实现接口的类变得非常复杂\",{\"1\":{\"1215\":1}}],[\"这会导致代码难以理解和维护\",{\"1\":{\"1215\":1}}],[\"这会增加api复杂度\",{\"1\":{\"554\":1}}],[\"这会使查询和更新变得复杂\",{\"1\":{\"42\":1}}],[\"这一机制确保了泛型代码与java\",{\"1\":{\"3034\":1}}],[\"这一过程大量使用了反射机制\",{\"1\":{\"2999\":1}}],[\"这一过程会遍历调用栈\",{\"1\":{\"2936\":1}}],[\"这一特性解决了接口的向后兼容性问题\",{\"1\":{\"540\":1}}],[\"这一步是必须的\",{\"1\":{\"113\":1}}],[\"这就是为什么通过反射获取的注解是代理对象\",{\"1\":{\"3145\":1}}],[\"这就是\",{\"1\":{\"303\":1}}],[\"这时再去改daemon\",{\"1\":{\"1632\":1}}],[\"这时就需要进行内核降级\",{\"1\":{\"1496\":1}}],[\"这时候怎么办呢\",{\"1\":{\"1763\":1}}],[\"这时候应该如何进一步处理呢\",{\"1\":{\"1396\":1}}],[\"这时候sentinel之间要进行选举\",{\"1\":{\"182\":1}}],[\"这时使用宿主机连接没有授权访问\",{\"1\":{\"227\":1}}],[\"这时从数据库服务器本地进入mysql命令行\",{\"1\":{\"115\":1}}],[\"这里是一个shell脚本去启动命令\",{\"1\":{\"3245\":1}}],[\"这里是linux\",{\"1\":{\"1887\":1}}],[\"这里只是演示\",{\"1\":{\"2508\":1}}],[\"这里的块设备是指系统上所有的磁盘和其他块设备\",{\"1\":{\"1887\":1}}],[\"这里我要将daemonize改为yes\",{\"1\":{\"1786\":1}}],[\"这里我们选择上面配置的配置文件\",{\"1\":{\"1694\":1}}],[\"这里我们主要来看部分复制\",{\"1\":{\"167\":1}}],[\"这里我们可以来解释主从复制的概念\",{\"1\":{\"161\":1}}],[\"这里指定号目录也方便后续的卸载\",{\"1\":{\"1785\":1}}],[\"这里多了一个关键字\",{\"1\":{\"1785\":1}}],[\"这里redis\",{\"1\":{\"1694\":1}}],[\"这里将redis\",{\"1\":{\"1694\":1}}],[\"这里额外添加了docker的生产环境核心配置cgroup\",{\"1\":{\"1615\":1,\"1675\":1,\"1746\":1}}],[\"这里填你秘钥在磁盘上的位置\",{\"1\":{\"998\":1}}],[\"这里填你安装的gnupg位置\",{\"1\":{\"998\":1}}],[\"这里\",{\"1\":{\"286\":1}}],[\"这里以一个返回正常的情况为例\",{\"1\":{\"267\":1}}],[\"这里以单点的模式为例\",{\"1\":{\"234\":1}}],[\"这里由于下载速度慢\",{\"1\":{\"248\":1}}],[\"这里选择zhusaidong\",{\"1\":{\"233\":1}}],[\"这里面会有什么问题出现呢\",{\"1\":{\"176\":1}}],[\"这些类型参数在使用时被具体的类型所替代\",{\"1\":{\"3016\":1}}],[\"这些都会影响性能\",{\"1\":{\"3011\":1}}],[\"这些可能在未来版本中移除\",{\"1\":{\"3010\":1}}],[\"这些视图是动态的\",{\"1\":{\"2665\":1}}],[\"这些特性共同构成了面向对象设计的基础\",{\"1\":{\"2730\":1}}],[\"这些特性确保了红黑树的平衡\",{\"1\":{\"2650\":1}}],[\"这些特性不仅提高了开发效率\",{\"1\":{\"535\":1}}],[\"这些改进带来了什么好处\",{\"1\":{\"2616\":1}}],[\"这些改进使jdk\",{\"1\":{\"2541\":1}}],[\"这些实现类的特点\",{\"1\":{\"2358\":1}}],[\"这些关键字是java保留的\",{\"1\":{\"2081\":1}}],[\"这些关键字是实现线程安全的基础\",{\"1\":{\"654\":1}}],[\"这些关键字用于定义变量的类型\",{\"1\":{\"2080\":1}}],[\"这些关键字用于定义类\",{\"1\":{\"2077\":1}}],[\"这些关键字用于处理程序运行过程中的异常\",{\"1\":{\"2079\":1}}],[\"这些关键字用于控制程序的执行流程\",{\"1\":{\"2078\":1}}],[\"这些日志记录着mongodb数据库不同方面的踪迹\",{\"1\":{\"1739\":1}}],[\"这些记录可以让系统管理员在需要的时候分析数据库在什么时段发生了什么事情\",{\"1\":{\"1738\":1}}],[\"这些标签也可以直接由nodeselector使用\",{\"1\":{\"1660\":1}}],[\"这些限制增强了java的安全性和封装性\",{\"1\":{\"1281\":1}}],[\"这些概念帮助我们编写更加模块化\",{\"1\":{\"1214\":1}}],[\"这些问题不仅有助于面试准备\",{\"1\":{\"1119\":1}}],[\"这些原则使其成为ip通信领域的理想选择\",{\"1\":{\"1097\":1}}],[\"这些原则指导着整个生态的发展方向\",{\"1\":{\"561\":1}}],[\"这些方法已被废弃\",{\"1\":{\"617\":1}}],[\"这些信息会被存储在异常对象中\",{\"1\":{\"504\":1}}],[\"这些由spring容器管理\",{\"1\":{\"311\":1}}],[\"这些策略是配置到哪个属性上\",{\"1\":{\"157\":1}}],[\"这些文件中可能包含这里未列出的额外错误消息\",{\"1\":{\"125\":1}}],[\"这些文件就是用于启用ssl功能的\",{\"1\":{\"115\":1}}],[\"这得从rdb的存储的弊端说起\",{\"1\":{\"139\":1}}],[\"这个dns名称将被解析到主机的内部ip\",{\"1\":{\"3256\":1}}],[\"这个简单的http服务器实现了以下功能\",{\"1\":{\"2921\":1}}],[\"这个是很耗资源\",{\"1\":{\"1887\":1}}],[\"这个是jdk6新添的错误类型\",{\"1\":{\"1558\":1}}],[\"这个进程和线程数就是比较合适的值了\",{\"1\":{\"1887\":1}}],[\"这个值要越小越好\",{\"1\":{\"1887\":1}}],[\"这个不多说\",{\"1\":{\"1887\":1}}],[\"这个也和top的负载有关系\",{\"1\":{\"1887\":1}}],[\"这个数值表示设备的繁忙程度\",{\"1\":{\"1884\":1}}],[\"这个关键字的作用是编译的时候用于指定程序存放的路径\",{\"1\":{\"1785\":1}}],[\"这个时候只要在localhost的那台电脑\",{\"1\":{\"1775\":1}}],[\"这个时候服务器马上回一个结果告诉客户端后台已经开始了\",{\"1\":{\"138\":1}}],[\"这个日志就叫做oplog\",{\"1\":{\"1759\":1}}],[\"这个命令会下载最新版本的\",{\"1\":{\"1747\":1}}],[\"这个变量可以限制连接速率\",{\"1\":{\"1412\":1}}],[\"这个变量等于请求行中的参数\",{\"1\":{\"1412\":1}}],[\"这个新的http客户端支持http\",{\"1\":{\"471\":1}}],[\"这个key\",{\"1\":{\"283\":3}}],[\"这个工具类特别适合需要导出大量数据的后台管理系统\",{\"1\":{\"278\":1}}],[\"这个\",{\"1\":{\"270\":1}}],[\"这个流程是什么样的呢\",{\"1\":{\"182\":1}}],[\"这个地方它也是在记录\",{\"1\":{\"137\":1}}],[\"这个信息里边如果是存的纯数字\",{\"1\":{\"132\":1}}],[\"这种松耦合设计提高了协议的灵活性和适应性\",{\"1\":{\"3220\":1}}],[\"这种混合设计平衡了性能和可靠性需求\",{\"1\":{\"3220\":1}}],[\"这种实现可以灵活地为方法添加缓存功能\",{\"1\":{\"3170\":1}}],[\"这种实现方式将权限检查逻辑与业务逻辑分离\",{\"1\":{\"3154\":1}}],[\"这种思想在集合框架\",{\"1\":{\"3027\":1}}],[\"这种限制体现了java对安全性和封装性的重视\",{\"1\":{\"2994\":1}}],[\"这种流的组合方式在处理分散存储的数据或需要合并多个输入源时非常有用\",{\"1\":{\"2887\":1}}],[\"这种特性使得weakhashmap非常适合实现缓存功能\",{\"1\":{\"2675\":1}}],[\"这种情况需要使用外部同步机制保证原子性\",{\"1\":{\"2513\":1}}],[\"这种机制实现了生产者和消费者之间的高效协作\",{\"1\":{\"2483\":1}}],[\"这种方式显著减少了与磁盘等外部设备的交互次数\",{\"1\":{\"2865\":1}}],[\"这种方式利用concurrenthashmap的线程安全特性\",{\"1\":{\"2392\":1}}],[\"这种方式通过写时复制机制实现线程安全\",{\"1\":{\"2392\":1}}],[\"这种方式通过在每个方法上添加同步锁实现线程安全\",{\"1\":{\"2392\":1}}],[\"这种精度问题在金融计算中是不可接受的\",{\"1\":{\"2105\":1}}],[\"这种区分使得java既可以高效地处理简单数据\",{\"1\":{\"2105\":1}}],[\"这种区分使得java的类型系统更加灵活\",{\"1\":{\"2085\":1}}],[\"这种绑定至特定主机的需求还有一种更为简单的实现方式\",{\"1\":{\"1660\":1}}],[\"这种模块化设计使sip能够灵活适应不同的媒体类型和应用场景\",{\"1\":{\"1099\":1}}],[\"这种模型避免了类的重复加载\",{\"1\":{\"742\":1}}],[\"这种编译期检查可以在开发阶段就发现代码规范问题\",{\"1\":{\"1087\":1}}],[\"这种按需加载的方式减少了内存占用\",{\"1\":{\"751\":1}}],[\"这种隔离性使得不同的应用模块可以使用不同版本的类\",{\"1\":{\"750\":1}}],[\"这种分代设计提高了垃圾回收效率\",{\"1\":{\"713\":1}}],[\"这种分离设计提高了内存管理效率\",{\"1\":{\"697\":1}}],[\"这种平衡使java既能满足企业对稳定性的需求\",{\"1\":{\"570\":1}}],[\"这种设计简化了网络架构\",{\"1\":{\"3220\":1}}],[\"这种设计保证了接口的简洁性和实现的灵活性\",{\"1\":{\"2470\":1}}],[\"这种设计避免了为每个set实现类单独编写线程安全版本\",{\"1\":{\"2379\":1}}],[\"这种设计具有线程安全\",{\"1\":{\"2378\":1}}],[\"这种设计使得sip能够灵活适配不同的传输协议和应用场景\",{\"1\":{\"3220\":1}}],[\"这种设计使得linkedhashmap非常适合实现需要保持插入顺序或实现lru缓存策略的场景\",{\"1\":{\"2635\":1}}],[\"这种设计使得用户可以根据需求选择合适的实现\",{\"1\":{\"2412\":1}}],[\"这种设计使得用户可以根据具体需求选择合适的实现\",{\"1\":{\"2375\":1}}],[\"这种设计使得java字节码可以在任何实现jvm规范的虚拟机上运行\",{\"1\":{\"731\":1}}],[\"这种设计带来的好处\",{\"1\":{\"2331\":1}}],[\"这种设计可以节省内存空间\",{\"1\":{\"1279\":1}}],[\"这种设计思想在框架开发中尤为重要\",{\"1\":{\"1273\":1}}],[\"这种设计思想使得企业能够安全地升级java版本\",{\"1\":{\"562\":1}}],[\"这种设计有什么优缺点\",{\"1\":{\"1254\":1,\"2931\":1}}],[\"这种设计有以下特点\",{\"1\":{\"550\":1}}],[\"这种设计允许g1跟踪各个region的垃圾堆积价值\",{\"1\":{\"778\":1}}],[\"这种设计理念使得聚合操作既灵活又强大\",{\"1\":{\"62\":1}}],[\"这种设计理念使得mongodb特别适合处理快速变化的业务需求和非结构化数据\",{\"1\":{\"41\":1}}],[\"这种范式带来了以下好处\",{\"1\":{\"548\":1}}],[\"这种策略避免了专门的清理线程\",{\"1\":{\"2688\":1}}],[\"这种策略确保了新特性的平稳\",{\"1\":{\"514\":1}}],[\"这种策略可以减少cpu的开销\",{\"1\":{\"212\":1}}],[\"这种保存操作过程的存储\",{\"1\":{\"137\":1}}],[\"这种办公自动化软件的话\",{\"1\":{\"136\":1}}],[\"这是lombok\",{\"1\":{\"3147\":1}}],[\"这是许多框架和库的核心功能\",{\"1\":{\"3001\":1}}],[\"这是spring\",{\"1\":{\"2992\":1}}],[\"这是否违背了java的封装性原则\",{\"1\":{\"2975\":1}}],[\"这是标准错误流\",{\"1\":{\"2902\":1}}],[\"这是标准输出流\",{\"1\":{\"2902\":1}}],[\"这是使用utf\",{\"1\":{\"2879\":1}}],[\"这是另一部分内容\",{\"1\":{\"2857\":1}}],[\"这是追加的内容\",{\"1\":{\"2857\":1}}],[\"这是utf\",{\"1\":{\"2855\":1}}],[\"这是实现多态的基础\",{\"1\":{\"2740\":1}}],[\"这是重载而非重写\",{\"1\":{\"2737\":1}}],[\"这是因为weakhashmap的设计目标和使用场景与hashmap不同\",{\"1\":{\"2696\":1}}],[\"这是因为在哈希冲突严重的情况下\",{\"1\":{\"2394\":1}}],[\"这是因为每个类的字节码文件在jvm中只会被加载一次\",{\"1\":{\"1279\":1}}],[\"这是应用程序在和磁盘交互时\",{\"1\":{\"1884\":1}}],[\"这是我自个阿里云的镜像加速器\",{\"1\":{\"1669\":1}}],[\"这是我们的数据的存储空间\",{\"1\":{\"132\":1}}],[\"这是\",{\"1\":{\"1503\":1}}],[\"这是io流最基础也最常考的问题\",{\"1\":{\"1221\":1}}],[\"这是final方法\",{\"1\":{\"1038\":1}}],[\"这是虚拟线程\",{\"1\":{\"526\":1}}],[\"这是平台线程\",{\"1\":{\"526\":1}}],[\"这是一种合理的设置\",{\"1\":{\"1759\":1}}],[\"这是一种有意识的行为\",{\"1\":{\"1271\":1}}],[\"这是一种约定俗成的做法\",{\"1\":{\"212\":1}}],[\"这是一个本地构建的nginx镜像\",{\"1\":{\"3246\":1}}],[\"这是一个本地方法\",{\"1\":{\"2297\":1}}],[\"这是一个o\",{\"1\":{\"2942\":1}}],[\"这是一个文档注释\",{\"1\":{\"2091\":1}}],[\"这是一个多行注释\",{\"1\":{\"2090\":1}}],[\"这是一个行尾注释\",{\"1\":{\"2089\":1}}],[\"这是一个比较危险的行为\",{\"1\":{\"1632\":1}}],[\"这是一个形状\",{\"1\":{\"1206\":1}}],[\"这是一个低延迟垃圾收集器\",{\"1\":{\"476\":1}}],[\"这是一个档案主页的案例\",{\"1\":{\"2\":1}}],[\"这是两种不同的保存数据的形式啊\",{\"1\":{\"137\":1}}],[\"这样日志中的字节数就是实际的性能测试运行的次数\",{\"1\":{\"1867\":1}}],[\"这样启动后我就可以在外网访问了\",{\"1\":{\"1786\":1}}],[\"这样配相当于主从\",{\"1\":{\"1764\":1}}],[\"这样就可以极大地简化了\",{\"1\":{\"1446\":1}}],[\"这样浏览器在请求一个静态资源时\",{\"1\":{\"1401\":1}}],[\"这样很不安全\",{\"1\":{\"1349\":1}}],[\"这样即使线程被虚假唤醒\",{\"1\":{\"1139\":1}}],[\"这样保证总有一个survivor区为空\",{\"1\":{\"720\":1}}],[\"这样在导入相关依赖后才有对应字节码文件\",{\"1\":{\"463\":1}}],[\"这样的方式虽然会有一定的窗口期\",{\"1\":{\"306\":1}}],[\"这样可以减少网络往返次数\",{\"1\":{\"212\":1}}],[\"这样可以减少网络传输和写入开销\",{\"1\":{\"53\":1}}],[\"这样用户的一部分请求会直接到缓存这里而不用经过数据库\",{\"1\":{\"129\":1}}],[\"这样下次就可以直接从内存中读取\",{\"1\":{\"129\":1}}],[\"这带来的优势是灵活性高\",{\"1\":{\"43\":1}}],[\"这带来了哪些优势和挑战\",{\"1\":{\"43\":1}}],[\"标签\",{\"1\":{\"3246\":1}}],[\"标签删docker\",{\"1\":{\"3245\":1}}],[\"标签选择器\",{\"1\":{\"1660\":1}}],[\"标签页查看当前jvm参数\",{\"1\":{\"807\":1,\"841\":1,\"875\":1,\"909\":1}}],[\"标签页查看堆内存使用情况\",{\"1\":{\"807\":1,\"841\":1,\"875\":1,\"909\":1}}],[\"标签为\",{\"1\":{\"29\":1}}],[\"标记过时方法\",{\"1\":{\"3136\":1}}],[\"标记函数式接口\",{\"1\":{\"3136\":1}}],[\"标记构造函数或方法是类型安全的\",{\"1\":{\"3136\":1}}],[\"标记已过时的元素\",{\"1\":{\"3136\":1}}],[\"标记方法重写父类方法\",{\"1\":{\"3136\":1}}],[\"标记和重置position\",{\"1\":{\"2914\":1}}],[\"标记位置\",{\"1\":{\"2914\":1,\"3116\":1}}],[\"标记当前位置\",{\"1\":{\"2849\":1,\"2869\":1}}],[\"标记接口\",{\"1\":{\"1225\":1}}],[\"标记需要回收的对象\",{\"1\":{\"1150\":1}}],[\"标记gc\",{\"1\":{\"777\":1}}],[\"标记存活对象\",{\"1\":{\"766\":1,\"1150\":1}}],[\"标记所有需要回收的对象\",{\"1\":{\"764\":1}}],[\"标记\",{\"0\":{\"764\":1,\"765\":1,\"766\":1},\"1\":{\"698\":2,\"1150\":2}}],[\"标志着java开始支持函数式编程范式\",{\"1\":{\"548\":1}}],[\"标准流\",{\"1\":{\"2909\":1}}],[\"标准输出流system\",{\"1\":{\"2902\":1}}],[\"标准节点\",{\"1\":{\"1764\":1}}],[\"标准\",{\"1\":{\"1739\":1}}],[\"标准注解\",{\"1\":{\"1063\":1}}],[\"标准化了项目结构\",{\"1\":{\"945\":1}}],[\"标准化的构建流程\",{\"1\":{\"943\":1}}],[\"标准化与生态整合\",{\"0\":{\"488\":1}}],[\"标准参数简单易用\",{\"1\":{\"809\":1,\"843\":1,\"877\":1,\"911\":1}}],[\"标准参数\",{\"0\":{\"788\":1,\"822\":1,\"856\":1,\"890\":1}}],[\"标准api\",{\"1\":{\"494\":1}}],[\"标识一个会话\",{\"1\":{\"3180\":1}}],[\"标识类的访问权限和属性\",{\"1\":{\"724\":1}}],[\"标识文件类型\",{\"1\":{\"724\":1}}],[\"标识\",{\"1\":{\"463\":1}}],[\"标识这个一个配置类\",{\"1\":{\"463\":1}}],[\"标题会被视为页面标题\",{\"1\":{\"28\":1}}],[\"标题和页面信息\",{\"1\":{\"8\":1}}],[\"日记\",{\"1\":{\"1739\":1}}],[\"日志可视化和分析\",{\"1\":{\"3103\":1}}],[\"日志存储和搜索\",{\"1\":{\"3103\":1}}],[\"日志处理管道\",{\"1\":{\"3103\":1}}],[\"日志聚合与分析工具\",{\"0\":{\"3103\":1}}],[\"日志框架集成\",{\"0\":{\"3102\":1}}],[\"日志分析与可视化\",{\"0\":{\"3101\":1}}],[\"日志分析方案及分布式追踪系统\",{\"1\":{\"3093\":1}}],[\"日志工具选择与配置\",{\"0\":{\"2072\":1}}],[\"日志信息应清晰\",{\"1\":{\"2071\":1}}],[\"日志级别\",{\"1\":{\"2071\":1,\"3110\":1}}],[\"日志级别使用\",{\"0\":{\"2070\":1}}],[\"日志应包含时间\",{\"1\":{\"2071\":1}}],[\"日志内容规范\",{\"0\":{\"2071\":1}}],[\"日志规范\",{\"0\":{\"2069\":1},\"1\":{\"3110\":1}}],[\"日志中禁止记录明文密码\",{\"1\":{\"2068\":1}}],[\"日志输出的字节数\",{\"0\":{\"1867\":1},\"1\":{\"1835\":1}}],[\"日志功能则是\",{\"1\":{\"1739\":1}}],[\"日志详情介绍\",{\"0\":{\"1739\":1}}],[\"日志则保存在audit\",{\"1\":{\"1738\":1}}],[\"日志过滤条件\",{\"1\":{\"1738\":1}}],[\"日志数量\",{\"1\":{\"1687\":3}}],[\"日志\",{\"1\":{\"1586\":1,\"1687\":2,\"3109\":1,\"3111\":1}}],[\"日志目录\",{\"1\":{\"1578\":1,\"1595\":1,\"1734\":1}}],[\"日志收集\",{\"1\":{\"1564\":1}}],[\"日志打印格式\",{\"1\":{\"1564\":1}}],[\"日志接入\",{\"0\":{\"1564\":1}}],[\"日志文件路径\",{\"1\":{\"1503\":1}}],[\"日志记录\",{\"1\":{\"1072\":1}}],[\"日志描述\",{\"1\":{\"1068\":1}}],[\"日志形式\",{\"1\":{\"137\":1}}],[\"日常例行统计数据访问记录\",{\"1\":{\"189\":1}}],[\"日期格式化\",{\"1\":{\"545\":1}}],[\"日期比较\",{\"1\":{\"545\":1}}],[\"日期计算\",{\"1\":{\"545\":1}}],[\"日期时间格式化\",{\"1\":{\"545\":1}}],[\"日期时间\",{\"1\":{\"545\":1}}],[\"日期时间函数\",{\"1\":{\"125\":1}}],[\"日期\",{\"1\":{\"38\":1,\"545\":1}}],[\"日\",{\"1\":{\"29\":1,\"545\":1}}],[\"月份从0开始且年份偏移1900\",{\"1\":{\"566\":1}}],[\"月\",{\"1\":{\"29\":1,\"545\":1,\"1504\":1}}],[\"年龄=\",{\"1\":{\"2902\":1}}],[\"年龄大于等于28岁的人\",{\"1\":{\"2329\":1}}],[\"年龄大于等于28岁\",{\"1\":{\"2329\":1}}],[\"年龄大于等于该年龄的对象进入老年代\",{\"1\":{\"708\":1}}],[\"年龄\",{\"1\":{\"2091\":3,\"2905\":1}}],[\"年龄必须在0\",{\"1\":{\"1203\":1}}],[\"年龄必须大于等于18\",{\"1\":{\"428\":1}}],[\"年龄相同按姓名升序\",{\"1\":{\"1182\":1}}],[\"年龄不能超过120\",{\"1\":{\"1069\":1}}],[\"年\",{\"1\":{\"29\":1,\"545\":1}}],[\"的集群管理工具\",{\"1\":{\"3250\":1}}],[\"的应用程序工具\",{\"1\":{\"3246\":1}}],[\"的开发模式\",{\"1\":{\"3139\":1}}],[\"的阻塞特性\",{\"1\":{\"3113\":1}}],[\"的机制\",{\"1\":{\"3016\":1}}],[\"的机器上看过可以达到140000\",{\"1\":{\"1887\":1}}],[\"的创建成本较高\",{\"1\":{\"3011\":1}}],[\"的过程涉及复杂的查找逻辑\",{\"1\":{\"2982\":1}}],[\"的层次结构\",{\"1\":{\"2895\":1}}],[\"的单字节操作\",{\"1\":{\"2848\":1}}],[\"的作用范围\",{\"1\":{\"2792\":1}}],[\"的鸟吃得很开心\",{\"1\":{\"2738\":1}}],[\"的属性和方法\",{\"1\":{\"2735\":1}}],[\"的属性和方法那么必须保证对象是\",{\"1\":{\"1449\":1}}],[\"的三大核心特性是封装\",{\"1\":{\"2730\":1}}],[\"的全文搜索优化为o\",{\"1\":{\"2728\":1}}],[\"的复杂度为o\",{\"1\":{\"2726\":2}}],[\"的时间复杂度为o\",{\"1\":{\"2650\":1}}],[\"的时间用来做gc并且回收了不到2\",{\"1\":{\"1558\":1}}],[\"的规范\",{\"1\":{\"2547\":1}}],[\"的设计哲学\",{\"1\":{\"3068\":1}}],[\"的设计模式\",{\"1\":{\"2470\":1}}],[\"的设计原则\",{\"1\":{\"1298\":1}}],[\"的倒数\",{\"1\":{\"2455\":1}}],[\"的查找效率\",{\"1\":{\"2413\":1}}],[\"的修改方法\",{\"1\":{\"2299\":1}}],[\"的字符\",{\"1\":{\"2265\":1}}],[\"的实现如下\",{\"1\":{\"2987\":1}}],[\"的实现区别\",{\"1\":{\"2234\":1}}],[\"的实现原理有何不同\",{\"1\":{\"2233\":1}}],[\"的实践中\",{\"1\":{\"306\":1}}],[\"的实践\",{\"0\":{\"306\":1}}],[\"的安装包\",{\"0\":{\"1768\":1}}],[\"的空闲磁盘空间\",{\"1\":{\"1759\":1}}],[\"的replication是通过一个日志来存储写操作的\",{\"1\":{\"1759\":1}}],[\"的建议\",{\"1\":{\"1635\":1}}],[\"的堆内存时会抛出此异常\",{\"1\":{\"1558\":1}}],[\"的选择器\",{\"1\":{\"1455\":1,\"1460\":1}}],[\"的核心语法\",{\"1\":{\"1448\":1}}],[\"的转换工具是通过\",{\"1\":{\"1438\":1}}],[\"的密码以及创建\",{\"1\":{\"1365\":1}}],[\"的内容拷贝到要控制的服务器的\",{\"1\":{\"1841\":1}}],[\"的内部状态\",{\"1\":{\"1275\":1}}],[\"的内存空间\",{\"1\":{\"2289\":1}}],[\"的内存用于执\",{\"1\":{\"166\":1}}],[\"的内存\",{\"1\":{\"166\":1}}],[\"的风格\",{\"1\":{\"1254\":1}}],[\"的区别及适用场景\",{\"1\":{\"2897\":1}}],[\"的区别\",{\"0\":{\"2248\":1},\"1\":{\"2358\":2}}],[\"的区别主要体现在\",{\"1\":{\"1238\":1}}],[\"的区别是什么\",{\"0\":{\"1129\":1}}],[\"的索引查找\",{\"1\":{\"2728\":1}}],[\"的索引\",{\"1\":{\"1161\":1}}],[\"的索引失败\",{\"1\":{\"125\":1}}],[\"的原则\",{\"1\":{\"1046\":1}}],[\"的跨平台特性\",{\"1\":{\"696\":1}}],[\"的跨平台理念\",{\"1\":{\"574\":1}}],[\"的工具类\",{\"1\":{\"544\":1}}],[\"的成熟\",{\"1\":{\"486\":1}}],[\"的配置文件会被加载\",{\"1\":{\"419\":1,\"463\":1}}],[\"的理念\",{\"1\":{\"389\":1,\"1254\":1}}],[\"的操作顺序\",{\"1\":{\"2920\":1}}],[\"的操作\",{\"1\":{\"306\":1}}],[\"的失效时间\",{\"1\":{\"306\":1}}],[\"的方式\",{\"1\":{\"306\":1}}],[\"的有效期应该设置得比较短\",{\"1\":{\"305\":1}}],[\"的权限\",{\"1\":{\"305\":1}}],[\"的最大缺点是\",{\"1\":{\"305\":1}}],[\"的最大优势是服务端不再需要存储\",{\"1\":{\"304\":1}}],[\"的几个特点\",{\"0\":{\"305\":1}}],[\"的浏览器环境中正常运行\",{\"1\":{\"304\":1}}],[\"的会话管理方式所拥有的一切优势\",{\"1\":{\"304\":1}}],[\"的会话管理的规则\",{\"1\":{\"303\":1}}],[\"的生成过程\",{\"1\":{\"303\":1}}],[\"的缩写\",{\"1\":{\"303\":1,\"1472\":2,\"1940\":1}}],[\"的用户\",{\"1\":{\"223\":1}}],[\"的队列\",{\"1\":{\"167\":1}}],[\"的次数\",{\"1\":{\"157\":1}}],[\"的情况\",{\"1\":{\"129\":1}}],[\"的数据是保存在内存中的\",{\"1\":{\"127\":1}}],[\"的定义不允许在表\",{\"1\":{\"125\":1}}],[\"的子程序主体过长\",{\"1\":{\"125\":1}}],[\"的长度不能为0\",{\"1\":{\"125\":1}}],[\"的结果大于max\",{\"1\":{\"125\":1}}],[\"的参数绑定功能\",{\"1\":{\"2066\":1}}],[\"的参数很大时\",{\"1\":{\"54\":1}}],[\"的参量类型不正确\",{\"1\":{\"125\":1}}],[\"的活动连接\",{\"1\":{\"125\":1}}],[\"的错误\",{\"1\":{\"125\":2}}],[\"的连接\",{\"1\":{\"125\":3}}],[\"的无效默认值\",{\"1\":{\"125\":1}}],[\"的访问\",{\"1\":{\"125\":1}}],[\"的表存储引擎不含该选项\",{\"1\":{\"125\":1}}],[\"的目录\",{\"1\":{\"125\":1}}],[\"的状态\",{\"1\":{\"125\":1}}],[\"的\",{\"1\":{\"28\":1,\"29\":1,\"125\":2,\"303\":1,\"1449\":2,\"1454\":1,\"1680\":1,\"1873\":1,\"2911\":1}}],[\"f6d5f24fcd41aa057a205d4f6922dfd309001126d040431222bfba7aa93517b7\",{\"1\":{\"3273\":3}}],[\"fnv1哈希算法\",{\"1\":{\"3086\":1}}],[\"fw\",{\"1\":{\"2833\":2}}],[\"fd=3\",{\"1\":{\"3282\":1}}],[\"fdoae1cnfhevel5turnee5qqtnnvfv3tmxvwerutxlnrgd4txpbm01uvxdobg93rwpfuu1bnedbm\",{\"1\":{\"3273\":1}}],[\"fdisk\",{\"1\":{\"1911\":1}}],[\"fdc9ff13b9bbaab28db42b3d50f852bb5e3fcdce\",{\"1\":{\"167\":1}}],[\"f2\",{\"1\":{\"1838\":1}}],[\"f299f501774c\",{\"1\":{\"1798\":1}}],[\"fzzxnet1\",{\"1\":{\"1819\":2}}],[\"f3c1c017ccd5\",{\"1\":{\"1667\":2}}],[\"f9596eddf06f\",{\"1\":{\"1667\":1}}],[\"fff\",{\"1\":{\"1440\":1}}],[\"flv\",{\"1\":{\"1779\":1}}],[\"flowcontroldemo\",{\"1\":{\"2078\":1}}],[\"floor\",{\"1\":{\"1578\":1,\"2371\":2,\"2661\":1}}],[\"float和double\",{\"1\":{\"2105\":1}}],[\"float\",{\"1\":{\"1181\":1,\"2080\":1,\"2099\":1,\"2101\":1,\"2601\":3,\"2627\":1,\"2679\":1,\"2766\":1,\"3007\":1}}],[\"flask\",{\"1\":{\"3246\":2}}],[\"flavor\",{\"1\":{\"1513\":1}}],[\"flags\",{\"1\":{\"724\":1,\"1838\":1,\"1882\":1,\"3282\":2}}],[\"flag\",{\"1\":{\"658\":3,\"1222\":2}}],[\"flex\",{\"1\":{\"1486\":1}}],[\"flip\",{\"1\":{\"1228\":2,\"1235\":1,\"1238\":2,\"1315\":2,\"1324\":1,\"1325\":2,\"1338\":1,\"2914\":3,\"2915\":1,\"2916\":2,\"2917\":1,\"2921\":3,\"3079\":1,\"3116\":1,\"3117\":1,\"3118\":2,\"3120\":2}}],[\"flyweight\",{\"1\":{\"2308\":1}}],[\"fly\",{\"1\":{\"1206\":1,\"1210\":2,\"1211\":4,\"2748\":5}}],[\"flyable\",{\"1\":{\"1206\":1,\"2748\":12}}],[\"flushdisktype\",{\"1\":{\"249\":1}}],[\"flushdb\",{\"1\":{\"198\":1}}],[\"flushall\",{\"1\":{\"198\":1}}],[\"flush\",{\"1\":{\"125\":3,\"230\":1,\"249\":1,\"286\":2,\"1336\":1,\"1577\":1,\"1578\":2,\"1775\":1,\"1820\":1,\"1821\":1,\"2842\":1,\"2854\":1,\"2866\":1,\"2904\":1,\"3065\":2}}],[\"fstab\",{\"1\":{\"1610\":1,\"1672\":1,\"3270\":1,\"3275\":2}}],[\"fssl\",{\"1\":{\"264\":1}}],[\"fseek\",{\"1\":{\"125\":2}}],[\"f\",{\"1\":{\"250\":1,\"1111\":2,\"1194\":1,\"1372\":3,\"1477\":1,\"1478\":1,\"1484\":1,\"1495\":1,\"1552\":1,\"1569\":1,\"1633\":2,\"1634\":1,\"1637\":2,\"1638\":1,\"1646\":1,\"1656\":13,\"1658\":2,\"1659\":1,\"1675\":2,\"1677\":3,\"1711\":13,\"1738\":1,\"1791\":1,\"1793\":2,\"1801\":1,\"1811\":1,\"1865\":1,\"1867\":1,\"1872\":1,\"1882\":1,\"1891\":1,\"1892\":1,\"1895\":1,\"1899\":1,\"2080\":1,\"2099\":1,\"2101\":2,\"2220\":2,\"2497\":16,\"2905\":1,\"3100\":1,\"3125\":2,\"3245\":5,\"3246\":3,\"3250\":1,\"3276\":3}}],[\"fparser\",{\"1\":{\"125\":5}}],[\"feignerrordecoder\",{\"1\":{\"2960\":1}}],[\"feb5d9fea6a5\",{\"1\":{\"1667\":1}}],[\"feedbackinfo\",{\"1\":{\"270\":1}}],[\"feedbackinfolist\",{\"1\":{\"270\":2}}],[\"feedbackinfoutil\",{\"1\":{\"270\":2}}],[\"federated\",{\"1\":{\"125\":1}}],[\"fetch无数据\",{\"1\":{\"125\":1}}],[\"fetch\",{\"1\":{\"125\":3}}],[\"feature\",{\"1\":{\"125\":1}}],[\"features\",{\"1\":{\"122\":1}}],[\"few\",{\"1\":{\"125\":1}}],[\"fkc\",{\"1\":{\"291\":2}}],[\"fk\",{\"1\":{\"125\":2}}],[\"fallbackmethod\",{\"1\":{\"2993\":1}}],[\"false表示插入顺序\",{\"1\":{\"2621\":1,\"2627\":1}}],[\"false不是关键字\",{\"1\":{\"2084\":1}}],[\"false\",{\"1\":{\"280\":1,\"286\":1,\"288\":1,\"307\":1,\"430\":1,\"456\":1,\"578\":1,\"658\":1,\"660\":1,\"710\":1,\"1040\":1,\"1041\":1,\"1161\":1,\"1165\":2,\"1170\":3,\"1182\":1,\"1228\":2,\"1253\":1,\"1315\":2,\"1324\":2,\"1326\":1,\"1363\":1,\"1431\":1,\"1432\":1,\"1435\":1,\"1436\":1,\"1443\":2,\"1467\":2,\"1469\":1,\"1470\":1,\"1513\":1,\"1560\":2,\"1564\":1,\"1638\":13,\"1648\":5,\"1649\":5,\"1650\":41,\"1656\":1,\"1661\":2,\"1667\":2,\"1685\":5,\"1688\":5,\"1698\":2,\"1711\":1,\"1713\":45,\"2099\":1,\"2110\":3,\"2111\":5,\"2189\":1,\"2191\":1,\"2194\":2,\"2204\":1,\"2213\":1,\"2223\":2,\"2239\":2,\"2245\":2,\"2246\":3,\"2248\":2,\"2249\":1,\"2294\":2,\"2303\":1,\"2304\":1,\"2327\":4,\"2372\":1,\"2440\":1,\"2465\":1,\"2496\":1,\"2554\":2,\"2600\":1,\"2605\":1,\"2628\":1,\"2685\":1,\"2709\":1,\"2916\":2,\"2921\":4,\"2959\":2,\"2986\":1,\"3000\":2,\"3005\":3,\"3079\":2,\"3117\":1,\"3118\":2,\"3141\":1,\"3154\":2,\"3165\":1,\"3170\":1,\"3215\":3,\"3276\":1}}],[\"fastjson\",{\"1\":{\"3085\":1}}],[\"fast机制\",{\"0\":{\"2610\":1}}],[\"fastutil\",{\"1\":{\"2452\":1}}],[\"fast\",{\"1\":{\"2444\":1,\"2543\":1}}],[\"fastremove\",{\"1\":{\"2440\":3}}],[\"faststringbuffer\",{\"1\":{\"2282\":3}}],[\"fasterxml\",{\"1\":{\"1443\":1,\"1444\":1}}],[\"fastcgi临时数据目录\",{\"1\":{\"1384\":1}}],[\"fastcgi的参数文件\",{\"1\":{\"1384\":1}}],[\"fastcgi相关参数的配置文件\",{\"1\":{\"1384\":1}}],[\"fastcgi\",{\"1\":{\"1384\":6}}],[\"faq\",{\"1\":{\"993\":1}}],[\"factorialiterative\",{\"1\":{\"2724\":1}}],[\"factorial\",{\"1\":{\"2724\":2}}],[\"factories文件中的配置类\",{\"1\":{\"423\":1}}],[\"factories文件\",{\"1\":{\"422\":1,\"463\":1}}],[\"factories\",{\"1\":{\"419\":1,\"463\":1}}],[\"factor=1\",{\"1\":{\"1530\":1}}],[\"factory\",{\"1\":{\"1231\":1,\"3159\":2,\"3241\":3}}],[\"factorybean\",{\"1\":{\"368\":3}}],[\"factor\",{\"1\":{\"1181\":2,\"1532\":2,\"2601\":1}}],[\"factormarket\",{\"1\":{\"286\":2}}],[\"fancyfong\",{\"1\":{\"237\":1,\"238\":1,\"239\":1,\"242\":1}}],[\"fair算法可以根据页面大小和加载时间长短智能地进行负载均衡\",{\"1\":{\"1407\":1}}],[\"fair模块\",{\"1\":{\"1407\":1}}],[\"fair\",{\"0\":{\"1407\":1},\"1\":{\"1407\":1}}],[\"faina\",{\"1\":{\"193\":1}}],[\"fail机制\",{\"1\":{\"2428\":1}}],[\"failonviolation>\",{\"1\":{\"2018\":1}}],[\"failover\",{\"1\":{\"178\":1,\"186\":1}}],[\"failurethreshold\",{\"1\":{\"3087\":5}}],[\"failurecount++\",{\"1\":{\"3087\":1}}],[\"failurecount\",{\"1\":{\"3087\":3}}],[\"failure\",{\"1\":{\"125\":1,\"250\":3,\"774\":1,\"783\":1,\"1620\":1,\"1752\":1,\"1918\":2,\"3266\":8}}],[\"fail\",{\"0\":{\"2610\":1},\"1\":{\"125\":4,\"1687\":3,\"2444\":1,\"2543\":1,\"2956\":3}}],[\"failedids\",{\"1\":{\"2959\":3}}],[\"failed\",{\"0\":{\"1665\":1},\"1\":{\"125\":5,\"1238\":4,\"1677\":2,\"1788\":1,\"2051\":2,\"3003\":2,\"3005\":3,\"3120\":3,\"3209\":1,\"3224\":1}}],[\"fatal=\",{\"1\":{\"3266\":8}}],[\"fatal=no\",{\"1\":{\"1918\":2}}],[\"fatal\",{\"0\":{\"1667\":1},\"1\":{\"125\":2}}],[\"favorite\",{\"1\":{\"122\":2}}],[\"ft\",{\"1\":{\"125\":3,\"2601\":3}}],[\"fcntl\",{\"1\":{\"125\":1}}],[\"focus\",{\"1\":{\"1450\":1}}],[\"font\",{\"0\":{\"1557\":1},\"1\":{\"1440\":2,\"1469\":2}}],[\"font>\",{\"1\":{\"1431\":2}}],[\"food\",{\"1\":{\"2737\":2}}],[\"foo\",{\"1\":{\"1412\":2}}],[\"foobared\",{\"1\":{\"219\":1,\"1787\":2}}],[\"fos\",{\"1\":{\"1222\":2,\"1224\":4,\"2832\":2,\"2837\":2,\"2843\":5,\"2915\":2}}],[\"four\",{\"1\":{\"1004\":1}}],[\"foundation\",{\"1\":{\"1578\":2}}],[\"found\",{\"1\":{\"122\":1,\"125\":6,\"1554\":1,\"2051\":1,\"2256\":1,\"2956\":1,\"2999\":1,\"3000\":1,\"3238\":1,\"3283\":1}}],[\"follow\",{\"1\":{\"993\":1,\"994\":1}}],[\"fordemo\",{\"1\":{\"2128\":1}}],[\"fork\",{\"1\":{\"1734\":2,\"1764\":1}}],[\"fork=true\",{\"1\":{\"1656\":1,\"1711\":1,\"1734\":1,\"1764\":1}}],[\"fork<\",{\"1\":{\"999\":1}}],[\"force\",{\"1\":{\"1636\":1,\"1769\":1,\"1770\":1,\"1904\":1,\"2917\":1,\"3250\":1}}],[\"forcing\",{\"1\":{\"125\":1}}],[\"forname加载类\",{\"1\":{\"2980\":2}}],[\"forname\",{\"1\":{\"1260\":2,\"1266\":1,\"2861\":2,\"2885\":1,\"2965\":2,\"2980\":2,\"2999\":1}}],[\"forward\",{\"1\":{\"3271\":1}}],[\"forward=1\",{\"1\":{\"3271\":1}}],[\"forwards\",{\"1\":{\"3180\":1}}],[\"forwards头\",{\"1\":{\"1094\":1,\"3190\":1}}],[\"forwarded\",{\"1\":{\"216\":2,\"1595\":1}}],[\"for循环打印一维数组\",{\"0\":{\"2212\":1}}],[\"for循环\",{\"1\":{\"1043\":1,\"2138\":1,\"2227\":1,\"2809\":1}}],[\"foreach方法\",{\"1\":{\"2059\":1}}],[\"foreach循环耗时\",{\"1\":{\"1043\":1}}],[\"foreach循环\",{\"1\":{\"1043\":1}}],[\"foreach\",{\"0\":{\"2220\":1},\"1\":{\"269\":1,\"288\":1,\"469\":1,\"539\":1,\"542\":1,\"575\":1,\"1043\":1,\"1160\":1,\"1326\":1,\"2059\":1,\"2147\":1,\"2220\":2,\"2320\":1,\"2325\":3,\"2370\":3,\"2407\":1,\"2428\":1,\"2434\":1,\"2491\":1,\"2541\":1,\"3147\":1}}],[\"foreign\",{\"1\":{\"125\":6}}],[\"forget\",{\"1\":{\"186\":1}}],[\"forbidden\",{\"1\":{\"1005\":1,\"1569\":1}}],[\"forbid\",{\"1\":{\"125\":1}}],[\"for\",{\"0\":{\"2128\":1},\"1\":{\"125\":13,\"216\":2,\"284\":1,\"286\":2,\"289\":1,\"293\":1,\"529\":1,\"625\":1,\"626\":1,\"675\":1,\"677\":3,\"773\":1,\"994\":1,\"1004\":1,\"1041\":2,\"1043\":5,\"1056\":3,\"1069\":1,\"1087\":4,\"1095\":1,\"1123\":2,\"1150\":1,\"1151\":1,\"1160\":3,\"1161\":3,\"1162\":4,\"1166\":2,\"1170\":4,\"1179\":3,\"1181\":1,\"1186\":1,\"1190\":1,\"1224\":1,\"1238\":2,\"1250\":2,\"1264\":3,\"1280\":2,\"1296\":1,\"1312\":1,\"1440\":1,\"1443\":1,\"1444\":1,\"1453\":6,\"1454\":1,\"1513\":1,\"1517\":1,\"1520\":1,\"1554\":1,\"1578\":3,\"1595\":1,\"1764\":1,\"1788\":1,\"1817\":1,\"1819\":1,\"1881\":3,\"2059\":2,\"2078\":4,\"2128\":3,\"2132\":1,\"2133\":1,\"2134\":1,\"2138\":2,\"2147\":2,\"2158\":2,\"2170\":4,\"2173\":2,\"2174\":2,\"2181\":4,\"2183\":3,\"2202\":2,\"2212\":1,\"2213\":1,\"2214\":2,\"2228\":1,\"2234\":1,\"2269\":1,\"2276\":3,\"2280\":2,\"2281\":1,\"2295\":1,\"2311\":2,\"2325\":2,\"2327\":8,\"2328\":3,\"2340\":2,\"2348\":1,\"2370\":1,\"2382\":1,\"2407\":3,\"2409\":3,\"2420\":2,\"2440\":3,\"2448\":2,\"2449\":3,\"2452\":2,\"2466\":1,\"2480\":1,\"2495\":2,\"2496\":3,\"2505\":2,\"2507\":2,\"2508\":1,\"2513\":1,\"2522\":2,\"2524\":2,\"2536\":1,\"2554\":1,\"2585\":1,\"2600\":3,\"2601\":1,\"2604\":1,\"2615\":2,\"2660\":1,\"2683\":1,\"2684\":1,\"2694\":1,\"2708\":1,\"2709\":2,\"2715\":1,\"2716\":1,\"2721\":1,\"2723\":2,\"2724\":1,\"2726\":2,\"2809\":2,\"2820\":1,\"2868\":1,\"2885\":1,\"2893\":1,\"2897\":1,\"2936\":1,\"2953\":1,\"2959\":2,\"2968\":2,\"2986\":2,\"2999\":2,\"3000\":3,\"3002\":3,\"3003\":3,\"3007\":4,\"3025\":1,\"3038\":1,\"3039\":1,\"3041\":1,\"3086\":4,\"3137\":1,\"3147\":1,\"3149\":1,\"3154\":2,\"3162\":2,\"3190\":1,\"3205\":1,\"3215\":1,\"3223\":1,\"3275\":1,\"3276\":1,\"3282\":1}}],[\"form>\",{\"1\":{\"1431\":1,\"1433\":1,\"1434\":1,\"1435\":1,\"1440\":1}}],[\"format=b\",{\"1\":{\"3100\":1}}],[\"formatoutputexample\",{\"1\":{\"2905\":1}}],[\"formatdate\",{\"1\":{\"2765\":1}}],[\"format\",{\"1\":{\"545\":1,\"1516\":1,\"1595\":1,\"1738\":2,\"1974\":3,\"1987\":6,\"2765\":1,\"2947\":1,\"3215\":1}}],[\"formatteddate\",{\"1\":{\"545\":1}}],[\"formatter\",{\"1\":{\"545\":3}}],[\"formatcontent\",{\"1\":{\"289\":2}}],[\"formlogin\",{\"1\":{\"451\":1}}],[\"form\",{\"1\":{\"125\":2}}],[\"fuseim\",{\"1\":{\"3276\":2}}],[\"future<\",{\"1\":{\"1254\":1}}],[\"future<string>\",{\"1\":{\"592\":1}}],[\"future\",{\"1\":{\"592\":2,\"1254\":2,\"1332\":2}}],[\"full\",{\"1\":{\"125\":4}}],[\"func\",{\"1\":{\"122\":1,\"125\":5}}],[\"function<integer\",{\"1\":{\"557\":4}}],[\"function<string\",{\"1\":{\"538\":1,\"539\":1}}],[\"function组合\",{\"1\":{\"557\":1}}],[\"function包中提供了一系列内置的函数式接口\",{\"1\":{\"538\":1}}],[\"functionalinterface注解来显式声明一个接口为函数式接口\",{\"1\":{\"538\":1}}],[\"functionalinterface\",{\"1\":{\"287\":1,\"538\":1,\"3136\":2}}],[\"functions\",{\"1\":{\"125\":1}}],[\"function\",{\"1\":{\"59\":2,\"89\":2,\"125\":3,\"269\":2,\"283\":1,\"538\":3,\"1431\":2,\"1433\":2,\"1434\":2,\"1435\":3,\"1440\":2,\"1443\":4,\"1444\":3,\"1450\":3,\"1451\":2,\"1452\":4,\"1453\":8,\"1461\":2,\"1462\":7,\"1463\":5,\"1464\":4,\"1467\":4,\"1469\":2,\"1470\":1,\"2407\":1}}],[\"fibonacciiterative\",{\"1\":{\"2716\":1}}],[\"fibonaccitail\",{\"1\":{\"2711\":3}}],[\"fibonaccioptimized\",{\"1\":{\"2711\":1}}],[\"fibonacci\",{\"1\":{\"2711\":3}}],[\"fixafterinsertion\",{\"1\":{\"2655\":1,\"2656\":1}}],[\"fixedlengthframedecoder\",{\"1\":{\"3126\":1}}],[\"fixedsizelist\",{\"1\":{\"1191\":2}}],[\"fixedthreadpool和singlethreadexecutor使用无界队列\",{\"1\":{\"631\":1}}],[\"fixedthreadpool\",{\"1\":{\"623\":1,\"1135\":1}}],[\"fixed\",{\"1\":{\"125\":1}}],[\"firedialogstatechanged\",{\"1\":{\"3223\":1}}],[\"firewall\",{\"1\":{\"1923\":2,\"1925\":1,\"1926\":1,\"1927\":1,\"1928\":1,\"1930\":1,\"1931\":1,\"1932\":1,\"1934\":1,\"1935\":1,\"1940\":1,\"3268\":1}}],[\"firewalld\",{\"1\":{\"1610\":2,\"1620\":1,\"1672\":2,\"1752\":1,\"1776\":1,\"1923\":4,\"1936\":1,\"1937\":1,\"1938\":1,\"3268\":2}}],[\"firstkey\",{\"1\":{\"3086\":2}}],[\"firstdouble\",{\"1\":{\"3024\":2}}],[\"firststr\",{\"1\":{\"3024\":2}}],[\"first5bytes\",{\"1\":{\"2849\":3}}],[\"firstfruit\",{\"1\":{\"2324\":2}}],[\"firstline\",{\"1\":{\"1324\":3,\"2921\":3}}],[\"firstuniqchar\",{\"1\":{\"1166\":3}}],[\"firstuniquechar\",{\"1\":{\"1166\":1}}],[\"first\",{\"1\":{\"28\":1,\"770\":1,\"778\":1,\"994\":1,\"1458\":2,\"1687\":1,\"2115\":1,\"2213\":3,\"2371\":2,\"2490\":1,\"2494\":2,\"2495\":1,\"2496\":5,\"2497\":6,\"2628\":4,\"2661\":1}}],[\"fifth\",{\"1\":{\"1578\":1}}],[\"fifo\",{\"1\":{\"167\":1,\"2461\":4,\"2468\":1,\"2547\":1}}],[\"fitness\",{\"1\":{\"1578\":1}}],[\"fis\",{\"1\":{\"1044\":5,\"1221\":2,\"1222\":2,\"1224\":2,\"1234\":5,\"2831\":5,\"2837\":3,\"2843\":5,\"2849\":4,\"2885\":2,\"2915\":2,\"2927\":6,\"2951\":2,\"3214\":4}}],[\"fillbuffer\",{\"1\":{\"1238\":2,\"2873\":3}}],[\"fill\",{\"1\":{\"1160\":1}}],[\"fillimessagecontentmodel\",{\"1\":{\"289\":1}}],[\"filsort\",{\"1\":{\"125\":1}}],[\"file文件离线导入\",{\"1\":{\"3246\":1}}],[\"file文件保存\",{\"1\":{\"1738\":1}}],[\"filebeat\",{\"1\":{\"3103\":1}}],[\"filebeat安装的版本号必须全部一致\",{\"1\":{\"1507\":1}}],[\"filemergewithseparatorexample\",{\"1\":{\"2897\":1}}],[\"filemergeexample\",{\"1\":{\"2893\":1}}],[\"filewriter使用默认字符编码\",{\"1\":{\"2837\":1}}],[\"filewriter\",{\"1\":{\"2830\":1,\"2833\":3,\"2856\":2,\"2867\":2,\"2903\":2}}],[\"file>\",{\"1\":{\"2072\":1}}],[\"fileformat=unix\",{\"1\":{\"1869\":1}}],[\"fileencodings=utf\",{\"1\":{\"1869\":1}}],[\"file1\",{\"1\":{\"1869\":1}}],[\"filedata\",{\"1\":{\"1661\":4}}],[\"filechannelexample\",{\"1\":{\"2915\":1}}],[\"filechannel示例\",{\"1\":{\"2915\":1}}],[\"filechannel\",{\"1\":{\"1232\":6,\"1238\":3,\"1321\":2,\"2915\":4,\"2917\":4,\"3117\":1}}],[\"filecontroller\",{\"1\":{\"434\":1}}],[\"fileregion\",{\"1\":{\"1347\":1,\"3130\":1}}],[\"filereaderwriterexample\",{\"1\":{\"2833\":1}}],[\"filereader和filewriter使用示例\",{\"1\":{\"2833\":1}}],[\"filereader和filewriter的使用\",{\"0\":{\"2833\":1}}],[\"filereader和filewriter四大核心类\",{\"1\":{\"2828\":1}}],[\"filereader\",{\"1\":{\"1221\":2,\"1236\":1,\"1247\":2,\"2037\":1,\"2830\":1,\"2833\":3,\"2856\":2,\"2867\":2,\"2885\":1}}],[\"filereservedtime\",{\"1\":{\"249\":1}}],[\"filepath\",{\"1\":{\"286\":3,\"434\":3,\"1221\":7,\"1222\":3,\"1225\":3,\"1238\":2,\"2037\":2,\"2917\":2,\"2927\":3,\"2951\":2}}],[\"filenotfoundexception\",{\"1\":{\"1044\":2,\"2037\":1,\"2902\":2,\"2909\":2,\"2927\":3}}],[\"filenputstream\",{\"1\":{\"286\":3}}],[\"filenamepattern>\",{\"1\":{\"1564\":1,\"2072\":1}}],[\"filename=recording\",{\"1\":{\"480\":2}}],[\"filename=\",{\"1\":{\"269\":1,\"286\":1}}],[\"filename\",{\"1\":{\"178\":1,\"186\":1,\"216\":1,\"269\":3,\"270\":2,\"286\":1,\"294\":2,\"1412\":1,\"1860\":3,\"1898\":2,\"2845\":3,\"2849\":4,\"2855\":3,\"2868\":2,\"2878\":3,\"2879\":4,\"2885\":2,\"2902\":2,\"2903\":3}}],[\"fileinputstreamexample\",{\"1\":{\"2831\":1}}],[\"fileinputstream使用示例\",{\"1\":{\"2831\":1}}],[\"fileinputstream用于从文件中读取字节数据\",{\"1\":{\"2831\":1}}],[\"fileinputstream的使用\",{\"0\":{\"2831\":1}}],[\"fileinputstream\",{\"1\":{\"286\":4,\"729\":1,\"746\":1,\"747\":1,\"1044\":4,\"1221\":2,\"1222\":2,\"1224\":3,\"1225\":1,\"1234\":4,\"1236\":1,\"1321\":2,\"2830\":1,\"2831\":3,\"2837\":3,\"2843\":3,\"2845\":2,\"2849\":5,\"2855\":2,\"2861\":2,\"2866\":2,\"2868\":3,\"2878\":3,\"2880\":2,\"2885\":3,\"2893\":1,\"2897\":1,\"2915\":3,\"2927\":3,\"2951\":2,\"3214\":5,\"3237\":1}}],[\"fileoutputstreamexample\",{\"1\":{\"2832\":1}}],[\"fileoutputstream使用示例\",{\"1\":{\"2832\":1}}],[\"fileoutputstream用于向文件中写入字节数据\",{\"1\":{\"2832\":1}}],[\"fileoutputstream的使用\",{\"0\":{\"2832\":1}}],[\"fileoutputstream等\",{\"1\":{\"1222\":1}}],[\"fileoutputstream\",{\"1\":{\"286\":2,\"1222\":2,\"1224\":5,\"1225\":1,\"1321\":2,\"2828\":1,\"2830\":1,\"2832\":4,\"2837\":5,\"2843\":3,\"2845\":2,\"2849\":1,\"2855\":2,\"2861\":2,\"2866\":2,\"2868\":4,\"2879\":3,\"2880\":2,\"2893\":1,\"2897\":1,\"2902\":2,\"2915\":3}}],[\"fileutil\",{\"1\":{\"286\":1}}],[\"filesize\",{\"1\":{\"1232\":3,\"1238\":4,\"2837\":2,\"2849\":2,\"2917\":2}}],[\"files类的静态方法创建各种流\",{\"1\":{\"1231\":1}}],[\"filesystemxmlapplicationcontext\",{\"1\":{\"321\":1}}],[\"files\",{\"1\":{\"286\":8,\"434\":1,\"1231\":2,\"1833\":2,\"2917\":1}}],[\"file\",{\"1\":{\"125\":13,\"139\":1,\"186\":1,\"270\":1,\"286\":35,\"294\":1,\"434\":6,\"729\":4,\"746\":2,\"747\":2,\"1044\":2,\"1224\":7,\"1232\":3,\"1234\":2,\"1236\":2,\"1238\":3,\"1321\":2,\"1423\":1,\"1427\":1,\"1503\":2,\"1510\":1,\"1518\":1,\"1526\":1,\"1535\":1,\"1564\":3,\"1578\":2,\"1586\":1,\"1615\":1,\"1656\":1,\"1661\":7,\"1675\":1,\"1677\":1,\"1698\":1,\"1711\":1,\"1713\":9,\"1734\":2,\"1735\":4,\"1738\":1,\"1746\":1,\"1764\":1,\"1833\":2,\"1869\":2,\"1914\":1,\"2072\":1,\"2837\":2,\"2849\":1,\"2866\":2,\"2868\":5,\"2893\":2,\"2908\":1,\"2909\":1,\"2917\":3,\"3246\":1,\"3276\":1}}],[\"file=heap\",{\"1\":{\"3100\":1}}],[\"file=etcd\",{\"1\":{\"1677\":3}}],[\"file=密码存放路径\",{\"1\":{\"1503\":1}}],[\"file=2\",{\"1\":{\"219\":1,\"1518\":1,\"1526\":1}}],[\"file=\",{\"1\":{\"102\":2,\"110\":1,\"113\":1,\"1503\":1,\"1504\":1}}],[\"file还有master\",{\"1\":{\"102\":1,\"110\":1}}],[\"filteredentries\",{\"1\":{\"2408\":2}}],[\"filteredoptional\",{\"1\":{\"544\":1}}],[\"filterchain\",{\"1\":{\"456\":3}}],[\"filter\",{\"1\":{\"48\":2,\"49\":4,\"50\":4,\"292\":1,\"543\":4,\"544\":1,\"553\":2,\"575\":2,\"1190\":1,\"1535\":1,\"1738\":2,\"2329\":1,\"2340\":1,\"2370\":1,\"2408\":1,\"2448\":1,\"3209\":1}}],[\"finishconnect\",{\"1\":{\"3117\":1}}],[\"finished\",{\"1\":{\"1569\":1}}],[\"finegrainedsynclist<e>\",{\"1\":{\"2356\":1}}],[\"fin\",{\"1\":{\"1881\":2}}],[\"final<\",{\"1\":{\"3097\":1}}],[\"final常量\",{\"1\":{\"2824\":1}}],[\"final修饰引用类型时\",{\"1\":{\"2813\":1}}],[\"final修饰引用\",{\"1\":{\"2813\":1}}],[\"final字段\",{\"1\":{\"2358\":1}}],[\"final字段在构造方法中初始化完成后\",{\"1\":{\"668\":1}}],[\"final表示成员是最终的\",{\"1\":{\"2085\":1}}],[\"final数组的元素可修改\",{\"1\":{\"1053\":1}}],[\"final只保证引用不变\",{\"1\":{\"1053\":1}}],[\"final引用的对象内容可修改\",{\"1\":{\"1053\":1}}],[\"finalpitfalls\",{\"1\":{\"1053\":3}}],[\"finalparameter\",{\"1\":{\"1038\":1}}],[\"finalclass\",{\"1\":{\"1038\":3,\"2761\":1}}],[\"final类\",{\"1\":{\"1038\":1}}],[\"finalmethod\",{\"1\":{\"1038\":1,\"1053\":1}}],[\"final方法内的局部变量可修改\",{\"1\":{\"1053\":1}}],[\"final方法\",{\"1\":{\"1038\":1}}],[\"final参数不可修改\",{\"1\":{\"1038\":1}}],[\"final参数\",{\"1\":{\"1038\":2}}],[\"final变量拼接\",{\"1\":{\"2304\":1}}],[\"final变量也会触发常量折叠\",{\"1\":{\"2249\":1}}],[\"final变量lateinitvar未初始化\",{\"1\":{\"1053\":1}}],[\"final变量的getter\",{\"1\":{\"1038\":1}}],[\"final变量\",{\"1\":{\"1038\":1}}],[\"finaldemo\",{\"1\":{\"1038\":2}}],[\"final关键字定义常量\",{\"1\":{\"2808\":1}}],[\"final关键字使用陷阱示例\",{\"1\":{\"1053\":1}}],[\"final关键字使用陷阱\",{\"0\":{\"1053\":1}}],[\"final关键字使用示例\",{\"1\":{\"1038\":1}}],[\"final关键字用法\",{\"0\":{\"1038\":1}}],[\"final关键字如何保证对象的初始化安全性\",{\"1\":{\"668\":1}}],[\"final\",{\"1\":{\"279\":1,\"283\":1,\"289\":4,\"291\":1,\"456\":2,\"593\":1,\"642\":5,\"643\":4,\"654\":1,\"655\":1,\"659\":1,\"660\":1,\"662\":1,\"663\":1,\"675\":1,\"676\":1,\"677\":1,\"724\":1,\"1034\":1,\"1038\":6,\"1053\":4,\"1068\":1,\"1081\":1,\"1087\":2,\"1111\":1,\"1151\":1,\"1181\":2,\"1224\":2,\"1225\":1,\"1249\":3,\"1250\":1,\"1264\":2,\"1325\":1,\"1326\":5,\"1999\":2,\"2007\":3,\"2039\":3,\"2051\":2,\"2068\":1,\"2077\":2,\"2161\":1,\"2190\":2,\"2240\":2,\"2249\":1,\"2256\":2,\"2263\":2,\"2269\":2,\"2276\":1,\"2282\":1,\"2287\":1,\"2288\":3,\"2289\":2,\"2304\":2,\"2307\":1,\"2318\":2,\"2327\":2,\"2356\":7,\"2392\":2,\"2409\":1,\"2427\":1,\"2429\":2,\"2433\":4,\"2441\":1,\"2456\":4,\"2466\":6,\"2467\":2,\"2485\":3,\"2490\":1,\"2494\":4,\"2496\":3,\"2497\":10,\"2498\":2,\"2512\":3,\"2513\":2,\"2522\":3,\"2523\":1,\"2524\":2,\"2525\":4,\"2544\":4,\"2555\":2,\"2599\":1,\"2600\":1,\"2601\":1,\"2632\":1,\"2654\":1,\"2679\":2,\"2680\":1,\"2685\":1,\"2697\":4,\"2761\":1,\"2779\":4,\"2798\":1,\"2801\":1,\"2808\":2,\"2821\":2,\"2866\":1,\"2868\":3,\"2873\":2,\"2921\":4,\"2938\":2,\"2956\":1,\"2986\":2,\"2993\":1,\"3007\":1,\"3086\":3,\"3087\":3,\"3097\":3,\"3107\":1,\"3125\":1,\"3150\":1,\"3159\":1,\"3170\":1,\"3235\":2,\"3237\":1,\"3240\":2,\"3241\":2,\"3244\":3}}],[\"finally块用于释放资源\",{\"1\":{\"2959\":1}}],[\"finally块的执行时机和返回值覆盖问题\",{\"1\":{\"1246\":1}}],[\"finally或try\",{\"1\":{\"2872\":1,\"2930\":1}}],[\"finally中的return会覆盖try\",{\"1\":{\"1246\":1}}],[\"finally执行\",{\"1\":{\"1246\":2}}],[\"finally执行顺序\",{\"0\":{\"1246\":1}}],[\"finallyexecutiondemo\",{\"1\":{\"1246\":1}}],[\"finally\",{\"1\":{\"71\":1,\"91\":1,\"286\":2,\"642\":2,\"643\":2,\"1044\":3,\"1068\":1,\"1111\":1,\"1129\":1,\"1234\":1,\"1246\":1,\"1247\":1,\"1254\":1,\"1314\":1,\"1324\":1,\"1332\":1,\"2079\":1,\"2269\":1,\"2282\":1,\"2356\":2,\"2429\":2,\"2456\":1,\"2513\":2,\"2544\":2,\"2697\":2,\"2809\":1,\"2831\":1,\"2843\":1,\"2909\":1,\"2927\":1,\"2959\":2,\"3005\":1,\"3007\":1,\"3065\":2,\"3070\":1,\"3125\":1,\"3240\":1}}],[\"findproduct\",{\"1\":{\"2949\":1}}],[\"findmax\",{\"1\":{\"2708\":1}}],[\"finduserbyid\",{\"1\":{\"2054\":2}}],[\"findusername\",{\"1\":{\"521\":2}}],[\"findbugs\",{\"1\":{\"2017\":1}}],[\"findbyusername\",{\"1\":{\"2066\":1,\"3050\":1}}],[\"findbyuserid\",{\"1\":{\"2007\":1,\"3160\":1}}],[\"findbyid\",{\"1\":{\"440\":1,\"580\":1,\"1068\":1,\"1949\":1,\"2054\":1,\"2949\":1,\"2952\":1,\"3049\":1,\"3050\":2,\"3166\":2,\"3170\":1}}],[\"findbyagegreaterthan\",{\"1\":{\"440\":1}}],[\"findbyname\",{\"1\":{\"440\":1}}],[\"find检索命令\",{\"0\":{\"1873\":1},\"1\":{\"1835\":1}}],[\"findvirtual\",{\"1\":{\"1264\":1,\"2974\":1,\"3010\":1}}],[\"findclass\",{\"1\":{\"746\":1,\"747\":1}}],[\"findall\",{\"1\":{\"440\":1,\"3050\":1}}],[\"findfirst\",{\"1\":{\"292\":1}}],[\"findlargedata\",{\"1\":{\"278\":1}}],[\"findone\",{\"1\":{\"85\":1}}],[\"find\",{\"1\":{\"48\":3,\"85\":5,\"125\":3,\"1005\":1,\"1531\":1,\"1586\":2,\"1738\":1,\"1778\":1,\"1869\":1,\"1873\":6,\"1890\":1,\"3260\":1}}],[\"finditerable<document>\",{\"1\":{\"48\":3}}],[\"fieldtype\",{\"1\":{\"2999\":3}}],[\"fieldlookupdemo\",{\"1\":{\"2984\":1}}],[\"fieldlength\",{\"1\":{\"125\":1}}],[\"field等对象创建成本高\",{\"1\":{\"2993\":1}}],[\"field等\",{\"1\":{\"2974\":1}}],[\"fieldaccessdemo\",{\"1\":{\"2971\":1}}],[\"field对象等\",{\"1\":{\"3011\":1}}],[\"field对象\",{\"1\":{\"1264\":1,\"3011\":1}}],[\"fieldvalue\",{\"1\":{\"1069\":3,\"3007\":2}}],[\"fieldref\",{\"1\":{\"728\":2}}],[\"field2\",{\"1\":{\"201\":3}}],[\"field1\",{\"1\":{\"201\":3}}],[\"field是内存地址\",{\"1\":{\"148\":1}}],[\"fields\",{\"1\":{\"125\":6,\"2999\":2,\"3003\":2,\"3007\":2}}],[\"fieldname\",{\"1\":{\"125\":1,\"3000\":3}}],[\"field\",{\"1\":{\"37\":1,\"125\":15,\"201\":4,\"724\":1,\"1064\":1,\"1069\":15,\"1087\":6,\"1261\":1,\"1269\":3,\"1276\":1,\"1535\":1,\"2966\":1,\"2971\":5,\"2981\":1,\"2984\":4,\"2989\":2,\"2990\":4,\"2999\":7,\"3000\":5,\"3003\":25,\"3007\":8,\"3135\":1,\"3141\":1}}],[\"fruit\",{\"1\":{\"2213\":2,\"2370\":8}}],[\"fruits\",{\"1\":{\"2144\":1,\"2197\":1,\"2213\":2,\"2216\":2,\"2218\":2,\"2220\":2,\"2221\":2,\"2324\":20,\"2370\":5}}],[\"free内存数\",{\"1\":{\"1885\":1}}],[\"free\",{\"0\":{\"1885\":1},\"1\":{\"1578\":3,\"1833\":6,\"1835\":1,\"1885\":4,\"1887\":2}}],[\"freememory\",{\"1\":{\"694\":4}}],[\"freememoryifneeded\",{\"1\":{\"156\":1}}],[\"fr\",{\"1\":{\"1221\":2,\"2833\":2}}],[\"friday\",{\"1\":{\"1066\":1,\"2818\":1,\"2820\":1}}],[\"fried\",{\"1\":{\"291\":3}}],[\"frame\",{\"0\":{\"3294\":1}}],[\"framework诞生\",{\"1\":{\"580\":1}}],[\"framework的发展\",{\"0\":{\"580\":1}}],[\"franklin\",{\"1\":{\"1578\":1}}],[\"fragmentation\",{\"1\":{\"193\":1}}],[\"frac\",{\"1\":{\"20\":4}}],[\"frm文件中的分区信息与能够写入到frm文件中的不一致\",{\"1\":{\"125\":1}}],[\"frm\",{\"1\":{\"125\":2}}],[\"front\",{\"1\":{\"2506\":1}}],[\"frontmatter\",{\"1\":{\"2\":1,\"5\":1,\"8\":1,\"13\":4,\"28\":1,\"29\":1}}],[\"fromtag\",{\"1\":{\"3205\":1}}],[\"fromuri\",{\"1\":{\"3190\":3,\"3199\":3}}],[\"fromindex\",{\"1\":{\"2314\":1}}],[\"from=1305366530\",{\"1\":{\"1644\":1}}],[\"from=build\",{\"1\":{\"1551\":1}}],[\"fromheader\",{\"1\":{\"1094\":3,\"3190\":3,\"3199\":3,\"3205\":6}}],[\"fromaddress\",{\"1\":{\"1094\":2,\"3190\":2,\"3199\":2,\"3205\":1}}],[\"from和to\",{\"1\":{\"720\":1}}],[\"from\",{\"1\":{\"119\":1,\"125\":2,\"186\":2,\"366\":1,\"438\":3,\"439\":3,\"479\":1,\"1005\":2,\"1038\":1,\"1092\":1,\"1535\":2,\"1548\":2,\"1551\":3,\"1569\":1,\"1575\":9,\"1649\":1,\"1677\":3,\"1688\":1,\"1697\":1,\"1775\":1,\"1816\":1,\"1827\":3,\"1831\":2,\"1833\":4,\"2066\":2,\"2935\":1,\"2947\":4,\"3005\":1,\"3052\":1,\"3117\":1,\"3118\":1,\"3164\":2,\"3180\":2,\"3199\":1,\"3223\":1,\"3244\":1,\"3246\":6}}],[\"hvrzfhcyjfosutzbxbvywlsexformvjbnrasi85cmhcwmzmrjznnitbnulvvgxyothqmervu21iv\",{\"1\":{\"3273\":1}}],[\"hvals\",{\"1\":{\"201\":1}}],[\"hcyuxruaknwtutid1frtmqwsjdfm0k1as9crva0azhxshziyjbkqk8ydvkytml1cmnmwww4dgpho\",{\"1\":{\"3273\":1}}],[\"h2\",{\"1\":{\"1537\":1,\"3005\":1}}],[\"h2o\",{\"1\":{\"23\":1}}],[\"hh\",{\"1\":{\"1535\":2,\"1564\":2,\"2072\":1,\"3102\":1}}],[\"href=\",{\"1\":{\"1443\":1,\"1444\":1,\"1467\":8}}],[\"hbhs\",{\"1\":{\"1421\":1}}],[\"hkp\",{\"1\":{\"997\":2}}],[\"hkeys\",{\"1\":{\"201\":1}}],[\"hprof\",{\"1\":{\"806\":1,\"840\":1,\"874\":1,\"908\":1,\"3100\":1}}],[\"hs512\",{\"1\":{\"456\":1}}],[\"hs256\",{\"1\":{\"303\":1}}],[\"hset\",{\"1\":{\"201\":1}}],[\"hugecapacity\",{\"1\":{\"2272\":1,\"2318\":1,\"2438\":2}}],[\"huang\",{\"1\":{\"1711\":1}}],[\"huaweicloud\",{\"1\":{\"982\":1}}],[\"hup\",{\"1\":{\"1620\":1,\"1752\":1}}],[\"hutool\",{\"0\":{\"279\":1},\"1\":{\"279\":6,\"289\":4}}],[\"hub仓库\",{\"1\":{\"3245\":1}}],[\"hub\",{\"1\":{\"237\":1,\"280\":1,\"1795\":1,\"3257\":1}}],[\"hihead\",{\"1\":{\"2601\":3}}],[\"highperformancemessagehandler\",{\"1\":{\"3240\":2}}],[\"highperformancesipserver\",{\"1\":{\"1111\":2,\"3218\":1}}],[\"highperfsipserver\",{\"1\":{\"3218\":1}}],[\"highfly\",{\"1\":{\"2748\":1}}],[\"higherkey\",{\"1\":{\"2658\":1}}],[\"higher\",{\"1\":{\"2371\":2,\"2658\":1,\"2661\":1}}],[\"hide\",{\"1\":{\"1440\":1,\"1443\":2}}],[\"hikaridatasource\",{\"1\":{\"445\":1}}],[\"hikari\",{\"1\":{\"445\":4}}],[\"hibernate等orm框架使用注解实现java对象与数据库表的映射\",{\"1\":{\"3163\":1}}],[\"hibernate等框架的核心设计思想\",{\"1\":{\"2992\":1}}],[\"hibernate等\",{\"1\":{\"1266\":1}}],[\"hibernate\",{\"1\":{\"364\":1,\"581\":1,\"2996\":1}}],[\"his\",{\"1\":{\"232\":1,\"1684\":1}}],[\"history\",{\"1\":{\"232\":2,\"1684\":2,\"1906\":1}}],[\"hincrby\",{\"1\":{\"201\":1}}],[\"hitail\",{\"1\":{\"2601\":6}}],[\"hit\",{\"1\":{\"157\":1,\"193\":1}}],[\"hlen\",{\"1\":{\"201\":1}}],[\"hmac256\",{\"1\":{\"307\":1}}],[\"hmacsha256\",{\"1\":{\"303\":1}}],[\"hmset\",{\"1\":{\"201\":1}}],[\"hmget\",{\"1\":{\"201\":1}}],[\"hgetall\",{\"1\":{\"201\":1}}],[\"hgetall等\",{\"1\":{\"172\":1}}],[\"hget\",{\"1\":{\"201\":1}}],[\"hz\",{\"1\":{\"153\":1}}],[\"hz次servercron\",{\"1\":{\"153\":1}}],[\"hz的值\",{\"1\":{\"153\":1}}],[\"hdel\",{\"1\":{\"140\":1,\"201\":1}}],[\"hyperloglog\",{\"1\":{\"131\":1}}],[\"hy001\",{\"1\":{\"125\":2}}],[\"hy000\",{\"1\":{\"125\":300}}],[\"hndlr\",{\"1\":{\"125\":1}}],[\"hns\",{\"1\":{\"110\":1}}],[\"hetao\",{\"1\":{\"1548\":1,\"1697\":1}}],[\"height\",{\"1\":{\"1209\":2,\"1440\":3,\"1443\":2,\"1463\":1,\"1469\":6,\"1470\":1,\"2745\":10}}],[\"hello名称名\",{\"1\":{\"3246\":1}}],[\"helloworld\",{\"1\":{\"479\":3,\"583\":1,\"727\":5,\"728\":4,\"729\":1,\"735\":1,\"2271\":1,\"3107\":1}}],[\"hello\",{\"1\":{\"392\":3,\"468\":1,\"469\":1,\"472\":4,\"479\":2,\"502\":1,\"537\":1,\"538\":4,\"539\":1,\"544\":1,\"727\":1,\"1041\":3,\"1056\":2,\"1058\":2,\"1164\":1,\"1222\":1,\"1260\":1,\"1270\":1,\"1464\":1,\"1667\":3,\"2080\":1,\"2100\":1,\"2188\":4,\"2191\":2,\"2194\":2,\"2196\":4,\"2197\":1,\"2198\":1,\"2239\":4,\"2245\":3,\"2248\":4,\"2265\":5,\"2292\":1,\"2784\":1,\"2785\":2,\"2832\":1,\"2844\":1,\"2845\":1,\"2855\":1,\"2857\":2,\"2879\":1,\"2891\":1,\"2903\":1,\"2914\":1,\"3017\":2,\"3019\":1,\"3024\":2,\"3036\":2,\"3041\":1,\"3065\":1,\"3066\":1,\"3116\":1,\"3117\":1,\"3246\":3,\"3250\":1}}],[\"hellocontroller\",{\"1\":{\"392\":1,\"393\":1}}],[\"helper\",{\"0\":{\"301\":1},\"1\":{\"479\":6}}],[\"help\",{\"0\":{\"1669\":1},\"1\":{\"122\":4,\"125\":1,\"788\":1,\"822\":1,\"856\":1,\"890\":1,\"1935\":1,\"2497\":2}}],[\"healthcheck\",{\"1\":{\"3246\":1}}],[\"health\",{\"1\":{\"1527\":1}}],[\"heap\",{\"1\":{\"1558\":2}}],[\"heapdemo\",{\"1\":{\"1144\":1}}],[\"heapdump\",{\"1\":{\"806\":1,\"840\":1,\"874\":1,\"908\":1}}],[\"heapdumppath=\",{\"1\":{\"806\":1,\"840\":1,\"874\":1,\"908\":1}}],[\"heapdumppath=<path>\",{\"1\":{\"796\":1,\"830\":1,\"864\":1,\"898\":1}}],[\"heapoom\",{\"1\":{\"710\":2}}],[\"heapobject\",{\"1\":{\"710\":3}}],[\"heapobj\",{\"1\":{\"693\":2}}],[\"hearder\",{\"1\":{\"285\":1}}],[\"headnext\",{\"1\":{\"2485\":5}}],[\"headless\",{\"1\":{\"1724\":2}}],[\"head>\",{\"1\":{\"1431\":1,\"1433\":1,\"1434\":1,\"1435\":1,\"1440\":1,\"1447\":1,\"1450\":1,\"1455\":1,\"1456\":1,\"1457\":1,\"1458\":1,\"1459\":1,\"1461\":1,\"1462\":1,\"1463\":1,\"1464\":1,\"1467\":1,\"1469\":1}}],[\"head\",{\"1\":{\"264\":1,\"2485\":5,\"2621\":1,\"2628\":2,\"2629\":2,\"2630\":1}}],[\"headerfactory\",{\"1\":{\"1094\":11,\"3190\":10,\"3199\":3,\"3208\":1,\"3215\":1,\"3224\":1}}],[\"headers\",{\"1\":{\"285\":8,\"1481\":1,\"1483\":1,\"1498\":1,\"1499\":1}}],[\"headers=new\",{\"1\":{\"285\":2}}],[\"header\",{\"1\":{\"125\":1,\"216\":6,\"303\":4,\"471\":2,\"1094\":1,\"1095\":4,\"3190\":1,\"3205\":1,\"3212\":1,\"3215\":2,\"3238\":1}}],[\"hexists\",{\"1\":{\"201\":1}}],[\"here表示被叫忙\",{\"1\":{\"3196\":1}}],[\"here\",{\"1\":{\"125\":2}}],[\"ha2\",{\"1\":{\"3215\":5}}],[\"ha1\",{\"1\":{\"3215\":5}}],[\"half\",{\"1\":{\"3087\":4}}],[\"hangger\",{\"1\":{\"1798\":3}}],[\"hangge\",{\"1\":{\"1798\":2}}],[\"handleeventswith\",{\"1\":{\"3240\":1}}],[\"handleexception\",{\"1\":{\"429\":1,\"2079\":1,\"2935\":3}}],[\"handlesipinvite\",{\"1\":{\"3232\":1}}],[\"handleackrequest\",{\"1\":{\"3208\":1}}],[\"handleaccept\",{\"1\":{\"1228\":2,\"1315\":2,\"1324\":2,\"2916\":2,\"2921\":2,\"3118\":2}}],[\"handlebyerequest\",{\"1\":{\"3208\":1}}],[\"handlebusinessexception\",{\"1\":{\"2956\":1}}],[\"handleinviterequest\",{\"1\":{\"3208\":2,\"3218\":1}}],[\"handlecacheevict\",{\"1\":{\"3170\":1}}],[\"handlecacheable\",{\"1\":{\"3170\":1}}],[\"handlegenericexception\",{\"1\":{\"2956\":1}}],[\"handledefault\",{\"1\":{\"2062\":1}}],[\"handletypeb\",{\"1\":{\"2062\":1}}],[\"handletypea\",{\"1\":{\"2062\":1}}],[\"handlemethodargumentnotvalidexception\",{\"1\":{\"429\":1}}],[\"handler链\",{\"1\":{\"3124\":1}}],[\"handleregisterrequest\",{\"1\":{\"3218\":1}}],[\"handlerequest\",{\"1\":{\"3082\":1,\"3222\":1}}],[\"handleresourcenotfound\",{\"1\":{\"2956\":1}}],[\"handleread\",{\"1\":{\"1228\":2,\"1315\":2,\"1324\":2,\"2916\":2,\"2921\":2,\"3118\":2}}],[\"handlerpool\",{\"1\":{\"2921\":3}}],[\"handler`\",{\"1\":{\"1687\":3}}],[\"handlerinterceptor\",{\"1\":{\"430\":1}}],[\"handler\",{\"1\":{\"125\":6,\"430\":1,\"1267\":2,\"1328\":1,\"2539\":2,\"2921\":3}}],[\"handle\",{\"1\":{\"125\":4,\"556\":1,\"1687\":1}}],[\"handshake\",{\"1\":{\"125\":2}}],[\"hard\",{\"1\":{\"1610\":3,\"1642\":2}}],[\"harbor镜像仓库\",{\"0\":{\"3337\":1}}],[\"harbor安装位置以及镜像存储位置\",{\"1\":{\"3260\":1}}],[\"harbor升级方案\",{\"0\":{\"3259\":1}}],[\"harbor版本升级方案\",{\"0\":{\"3258\":1}}],[\"harbor出问题了\",{\"1\":{\"1669\":1}}],[\"harbor修改端口\",{\"1\":{\"1630\":1}}],[\"harbor\",{\"1\":{\"1610\":1,\"1626\":6,\"1627\":3,\"1648\":2,\"1649\":2,\"1650\":20,\"1661\":1,\"1685\":2,\"1688\":2,\"1698\":1,\"1713\":22,\"1715\":6,\"1716\":1,\"1795\":1,\"3260\":1,\"3261\":1,\"3262\":1,\"3263\":3}}],[\"hat\",{\"1\":{\"1579\":1}}],[\"happens\",{\"0\":{\"656\":1},\"1\":{\"656\":1,\"994\":1,\"3282\":1}}],[\"hadoop\",{\"1\":{\"283\":5}}],[\"hasanypermission\",{\"1\":{\"3154\":3}}],[\"hasanyrole\",{\"1\":{\"2012\":1}}],[\"haspermission\",{\"1\":{\"3154\":2}}],[\"hasprevious\",{\"1\":{\"2325\":1,\"2498\":3}}],[\"hasremaining\",{\"1\":{\"1325\":6,\"1338\":1,\"3117\":1,\"3120\":1}}],[\"hasrole\",{\"1\":{\"452\":2,\"2012\":1}}],[\"hasnext\",{\"1\":{\"1179\":1,\"1185\":1,\"1190\":1,\"1194\":1,\"1228\":1,\"1315\":1,\"1324\":1,\"2325\":2,\"2340\":1,\"2352\":1,\"2370\":1,\"2382\":1,\"2407\":1,\"2420\":1,\"2441\":1,\"2448\":1,\"2498\":3,\"2505\":1,\"2507\":2,\"2508\":1,\"2513\":1,\"2523\":1,\"2537\":2,\"2916\":1,\"2921\":2,\"3079\":1,\"3118\":1}}],[\"hashing\",{\"1\":{\"3086\":1}}],[\"hashentry数组\",{\"1\":{\"2541\":1}}],[\"hashtable和concurrenthashmap的线程安全特性有何区别\",{\"1\":{\"2616\":1}}],[\"hashtable<>\",{\"1\":{\"2410\":1}}],[\"hashtable\",{\"1\":{\"2039\":1,\"2400\":1,\"2404\":1,\"2410\":2}}],[\"hashtable是\",{\"1\":{\"1174\":1}}],[\"hash更加智能的负载均衡算法\",{\"1\":{\"1407\":1}}],[\"hashcode可缓存\",{\"1\":{\"2300\":1}}],[\"hashcode计算后缓存\",{\"1\":{\"2192\":1}}],[\"hashcode\",{\"0\":{\"2295\":1},\"1\":{\"1181\":1,\"1182\":1,\"1196\":2,\"2295\":1,\"2314\":1,\"2410\":1,\"2599\":1,\"2605\":1,\"2612\":1,\"2680\":1}}],[\"hashchk\",{\"1\":{\"125\":2}}],[\"hashset操作复杂度\",{\"1\":{\"2712\":1}}],[\"hashset和linkedhashset的性能特性\",{\"1\":{\"2672\":1}}],[\"hashset插入查找最快但无序\",{\"1\":{\"2643\":1}}],[\"hashset核心方法实现\",{\"0\":{\"2602\":1}}],[\"hashset核心变量\",{\"0\":{\"2594\":1}}],[\"hashset通过以下步骤检查元素是否重复\",{\"1\":{\"2393\":1}}],[\"hashset如何检查元素是否重复\",{\"0\":{\"2393\":1}}],[\"hashset性能陷阱\",{\"0\":{\"2384\":1}}],[\"hashset允许存储null元素\",{\"1\":{\"2383\":1}}],[\"hashset的哈希表设计采用了数组+链表\",{\"1\":{\"2376\":1}}],[\"hashset的底层hashmap实现引入红黑树优化\",{\"1\":{\"2367\":1}}],[\"hashset基于哈希表\",{\"1\":{\"2365\":1}}],[\"hashset<>\",{\"1\":{\"1182\":2,\"1185\":1,\"2369\":2,\"2370\":1,\"2372\":7,\"2373\":1,\"2382\":1,\"2386\":1,\"2392\":1,\"2694\":1,\"2712\":1,\"3007\":1,\"3215\":1}}],[\"hashset\",{\"0\":{\"2365\":1,\"2391\":1,\"2589\":1},\"1\":{\"1174\":1,\"2363\":1,\"2369\":9,\"2373\":1,\"2389\":1,\"2391\":1,\"2712\":4}}],[\"hashmap的红黑树仅在链表长度超过阈值时使用\",{\"1\":{\"2672\":1}}],[\"hashmap的动态扩容机制是其高性能的关键\",{\"1\":{\"2609\":1}}],[\"hashmap会通过tablesizefor\",{\"1\":{\"2616\":1}}],[\"hashmap容量必须是2的幂次方的原因\",{\"1\":{\"2616\":1}}],[\"hashmap中的红黑树与treemap中的红黑树有何异同\",{\"1\":{\"2616\":1}}],[\"hashmap是非线程安全的\",{\"1\":{\"2613\":1}}],[\"hashmap是基于哈希表实现的键值对存储结构\",{\"1\":{\"2591\":1}}],[\"hashmap通过modcount实现快速失败机制\",{\"1\":{\"2610\":1}}],[\"hashmap使用链地址法解决哈希冲突\",{\"1\":{\"2608\":1}}],[\"hashmap使用红黑树优化哈希冲突\",{\"1\":{\"1198\":1}}],[\"hashmap采用数组+链表+红黑树的复合数据结构\",{\"1\":{\"2607\":1}}],[\"hashmap采用哈希表作为底层结构\",{\"1\":{\"2413\":1}}],[\"hashmap核心方法实现\",{\"0\":{\"2598\":1}}],[\"hashmap核心变量\",{\"0\":{\"2593\":1}}],[\"hashmap版本演进\",{\"0\":{\"2596\":1}}],[\"hashmap与hashset类结构分析\",{\"0\":{\"2591\":1}}],[\"hashmap与treemap性能对比测试\",{\"1\":{\"2409\":1}}],[\"hashmap与treemap性能对比\",{\"0\":{\"2409\":1}}],[\"hashmap查找o\",{\"1\":{\"2512\":1}}],[\"hashmap基于数组+链表+红黑树实现\",{\"1\":{\"2426\":1}}],[\"hashmap和concurrenthashmap的实现原理及性能对比\",{\"0\":{\"2426\":1}}],[\"hashmap性能优化示例\",{\"0\":{\"2604\":1}}],[\"hashmap性能优势更明显\",{\"1\":{\"1196\":1}}],[\"hashmap性能陷阱\",{\"0\":{\"2421\":1}}],[\"hashmapremovetime\",{\"1\":{\"2409\":2}}],[\"hashmapgettime\",{\"1\":{\"2409\":2}}],[\"hashmapputtime\",{\"1\":{\"2409\":2}}],[\"hashmap初始化与操作\",{\"1\":{\"2406\":1}}],[\"hashmap新增putifabsentelsethrow\",{\"1\":{\"2404\":1}}],[\"hashmap引入红黑树优化\",{\"1\":{\"2404\":1}}],[\"hashmap数据结构\",{\"0\":{\"2402\":1}}],[\"hashmap在jdk8中的优化有哪些\",{\"0\":{\"2428\":1}}],[\"hashmap在jdk\",{\"0\":{\"1196\":1},\"1\":{\"1196\":1,\"2616\":1,\"2672\":1}}],[\"hashmap手写实现\",{\"0\":{\"1181\":1}}],[\"hashmap\",{\"0\":{\"2589\":1},\"1\":{\"1132\":1,\"1174\":1,\"1175\":1,\"1193\":1,\"1439\":1,\"2365\":1,\"2400\":1,\"2406\":8,\"2409\":6,\"2410\":1,\"2429\":1,\"2616\":1,\"2623\":1,\"2666\":1,\"3007\":2}}],[\"hashmap<>\",{\"1\":{\"283\":2,\"285\":1,\"289\":1,\"643\":1,\"1193\":1,\"1439\":2,\"2039\":1,\"2057\":1,\"2059\":1,\"2406\":1,\"2407\":1,\"2408\":1,\"2409\":1,\"2410\":1,\"2419\":1,\"2423\":1,\"2429\":1,\"2512\":1,\"2604\":1,\"2605\":1,\"2612\":1,\"2613\":1,\"2614\":1,\"2715\":1,\"2999\":2,\"3007\":1,\"3046\":1,\"3209\":1}}],[\"hashmap<string\",{\"1\":{\"283\":2,\"285\":1,\"1439\":4}}],[\"hash结构\",{\"1\":{\"148\":1}}],[\"hash结构图\",{\"1\":{\"133\":1}}],[\"hash类型\",{\"1\":{\"133\":1}}],[\"hash\",{\"0\":{\"1406\":1,\"1408\":1},\"1\":{\"125\":2,\"130\":1,\"131\":1,\"140\":1,\"1181\":4,\"1182\":1,\"1406\":1,\"1408\":2,\"1513\":1,\"1764\":1,\"2240\":3,\"2288\":1,\"2289\":1,\"2291\":2,\"2295\":2,\"2599\":4,\"2600\":11,\"2601\":2,\"2605\":1,\"2616\":1,\"2623\":2,\"2628\":3,\"2629\":1,\"2680\":5,\"2681\":2,\"2682\":2,\"2683\":2,\"2684\":1,\"3086\":23}}],[\"has\",{\"1\":{\"125\":1,\"994\":2,\"1005\":1,\"1764\":1}}],[\"ha\",{\"1\":{\"125\":1}}],[\"have\",{\"1\":{\"115\":2,\"125\":5,\"994\":1,\"1578\":1}}],[\"htt\",{\"1\":{\"3273\":1}}],[\"http无类似机制\",{\"1\":{\"3198\":1}}],[\"http基于tcp\",{\"1\":{\"3198\":1}}],[\"http通常是无状态的\",{\"1\":{\"3198\":1}}],[\"http用于数据传输\",{\"1\":{\"3198\":1}}],[\"http2server\",{\"1\":{\"3107\":1}}],[\"http2\",{\"1\":{\"3107\":1}}],[\"http等协议\",{\"1\":{\"3059\":1}}],[\"httpd\",{\"1\":{\"1419\":1,\"1420\":2}}],[\"http访问\",{\"1\":{\"1414\":1}}],[\"http的连接很简单\",{\"1\":{\"1414\":1}}],[\"http和https使用的是完全不同的连接方式\",{\"1\":{\"1414\":1}}],[\"http是超文本传输协议\",{\"1\":{\"1414\":1}}],[\"http与https的区别\",{\"0\":{\"1414\":1}}],[\"http方法\",{\"1\":{\"1412\":1,\"3198\":1}}],[\"http区块开始\",{\"1\":{\"1385\":1}}],[\"http服务器启动\",{\"1\":{\"2921\":1}}],[\"http服务器\",{\"1\":{\"1383\":1,\"2921\":1}}],[\"http客户端的异常处理\",{\"0\":{\"491\":1}}],[\"http客户端api\",{\"0\":{\"471\":1}}],[\"httpresponse<string>\",{\"1\":{\"471\":2}}],[\"httpresponse\",{\"1\":{\"471\":5,\"491\":4,\"529\":1}}],[\"httprequest\",{\"1\":{\"471\":6,\"529\":2}}],[\"httpclientexample\",{\"1\":{\"471\":1}}],[\"httpclient\",{\"0\":{\"494\":1},\"1\":{\"471\":3,\"529\":2}}],[\"http包下\",{\"1\":{\"471\":1}}],[\"httpbasic\",{\"1\":{\"451\":1}}],[\"httpurlconnection\",{\"1\":{\"294\":2}}],[\"httpgetmethoddeal\",{\"1\":{\"292\":1}}],[\"httpmethoddealmodellist\",{\"1\":{\"292\":2}}],[\"httpmethodenum\",{\"1\":{\"292\":3}}],[\"httpmethod\",{\"1\":{\"285\":2,\"450\":1}}],[\"httpentity\",{\"1\":{\"285\":4}}],[\"httpheaders\",{\"1\":{\"285\":4}}],[\"http\",{\"0\":{\"1666\":2},\"1\":{\"216\":1,\"236\":1,\"251\":1,\"257\":1,\"264\":1,\"269\":1,\"275\":1,\"280\":1,\"285\":2,\"286\":1,\"294\":1,\"305\":1,\"439\":1,\"451\":2,\"456\":2,\"471\":3,\"490\":1,\"584\":4,\"982\":1,\"1324\":2,\"1347\":1,\"1385\":1,\"1390\":1,\"1395\":2,\"1396\":1,\"1397\":3,\"1409\":1,\"1414\":1,\"1416\":2,\"1417\":3,\"1418\":1,\"1431\":3,\"1443\":3,\"1444\":3,\"1474\":1,\"1480\":1,\"1481\":3,\"1511\":1,\"1513\":1,\"1517\":1,\"1519\":1,\"1520\":1,\"1523\":2,\"1527\":1,\"1535\":1,\"1560\":4,\"1578\":1,\"1595\":1,\"1612\":1,\"1636\":1,\"1638\":1,\"1649\":2,\"1656\":1,\"1666\":1,\"1672\":1,\"1688\":2,\"1711\":1,\"1722\":1,\"1723\":1,\"1743\":1,\"1779\":11,\"1781\":1,\"1880\":2,\"1914\":2,\"1915\":1,\"2012\":3,\"2921\":2,\"3070\":4,\"3104\":2,\"3107\":1,\"3176\":1,\"3246\":1,\"3250\":2}}],[\"https参数未设置\",{\"0\":{\"1664\":1},\"1\":{\"1664\":1}}],[\"https访问\",{\"1\":{\"1414\":1}}],[\"https则是具有安全性的ssl加密传输协议\",{\"1\":{\"1414\":1}}],[\"https协议是由ssl+http协议构建的可进行加密传输\",{\"1\":{\"1414\":1}}],[\"https协议需要到ca申请证书\",{\"1\":{\"1414\":1}}],[\"https协议的主要作用可以分为两种\",{\"1\":{\"1414\":1}}],[\"https和http的区别主要如下\",{\"1\":{\"1414\":1}}],[\"https的安全基础是ssl\",{\"1\":{\"1414\":1}}],[\"httpservlet\",{\"1\":{\"1431\":2,\"1440\":1,\"1443\":2,\"1444\":2}}],[\"httpservletrequest\",{\"1\":{\"430\":1,\"456\":1,\"1431\":3,\"1440\":2,\"1443\":3,\"1444\":3}}],[\"httpservletresponse对象\",{\"1\":{\"269\":1}}],[\"httpservletresponse\",{\"1\":{\"269\":2,\"270\":1,\"286\":7,\"430\":1,\"456\":1,\"1431\":3,\"1440\":2,\"1443\":3,\"1444\":3}}],[\"httpsecurity\",{\"1\":{\"451\":1,\"456\":1,\"2012\":1}}],[\"httpstatus\",{\"1\":{\"450\":2,\"2007\":1,\"2065\":1,\"2956\":2}}],[\"https\",{\"0\":{\"1664\":1,\"1666\":1},\"1\":{\"118\":2,\"237\":1,\"247\":1,\"261\":1,\"264\":5,\"281\":1,\"286\":2,\"305\":1,\"471\":2,\"529\":2,\"975\":1,\"982\":2,\"993\":3,\"994\":2,\"996\":1,\"1000\":1,\"1004\":3,\"1412\":1,\"1414\":1,\"1417\":1,\"1418\":1,\"1446\":1,\"1448\":1,\"1474\":1,\"1488\":3,\"1536\":2,\"1581\":1,\"1609\":3,\"1615\":1,\"1617\":2,\"1621\":1,\"1623\":1,\"1626\":2,\"1632\":1,\"1633\":1,\"1635\":2,\"1642\":1,\"1666\":2,\"1667\":1,\"1669\":1,\"1675\":1,\"1677\":1,\"1686\":1,\"1714\":2,\"1715\":2,\"1734\":1,\"1738\":2,\"1746\":1,\"1747\":1,\"1749\":1,\"1753\":1,\"1755\":2,\"1781\":1,\"3100\":1,\"3245\":1,\"3246\":2,\"3248\":1,\"3261\":2,\"3271\":1,\"3273\":7,\"3276\":1}}],[\"htpasswd\",{\"1\":{\"1418\":1,\"1421\":2}}],[\"htm\",{\"1\":{\"1379\":1,\"1385\":1,\"1389\":2,\"1390\":2,\"1409\":1}}],[\"html更名为index2\",{\"1\":{\"1444\":1}}],[\"html页面\",{\"1\":{\"1440\":1,\"1443\":1,\"1444\":1}}],[\"html>\",{\"1\":{\"1431\":2,\"1433\":2,\"1434\":2,\"1435\":2,\"1440\":2,\"1447\":2,\"1450\":2,\"1455\":2,\"1456\":2,\"1457\":2,\"1458\":2,\"1459\":2,\"1461\":2,\"1462\":2,\"1463\":2,\"1464\":2,\"1467\":2,\"1469\":2,\"2921\":1}}],[\"html代码\",{\"1\":{\"1431\":1}}],[\"html文件\",{\"1\":{\"1389\":1}}],[\"html回应客户\",{\"1\":{\"1385\":1}}],[\"html\",{\"1\":{\"118\":1,\"216\":5,\"996\":1,\"1324\":1,\"1379\":2,\"1384\":3,\"1385\":6,\"1389\":2,\"1390\":2,\"1395\":1,\"1396\":1,\"1409\":1,\"1412\":1,\"1431\":1,\"1433\":2,\"1434\":2,\"1435\":2,\"1436\":2,\"1440\":2,\"1443\":2,\"1444\":4,\"1447\":2,\"1449\":3,\"1458\":3,\"1459\":1,\"1461\":5,\"1465\":2,\"1536\":1,\"1578\":1,\"1595\":2,\"1779\":2,\"2921\":1,\"3070\":1,\"3100\":1,\"3246\":2}}],[\"h\",{\"1\":{\"115\":1,\"125\":1,\"193\":1,\"198\":1,\"1101\":1,\"1577\":1,\"1578\":1,\"1601\":1,\"1667\":2,\"1787\":1,\"1823\":2,\"1837\":1,\"1859\":2,\"1882\":1,\"1908\":1,\"1914\":2,\"2188\":1,\"2196\":1,\"2292\":2,\"2295\":6,\"2599\":3,\"2681\":2,\"2682\":3,\"2683\":4,\"3282\":1}}],[\"hobby\",{\"1\":{\"1459\":2}}],[\"hobbies=\",{\"1\":{\"3007\":3}}],[\"hobbies\",{\"1\":{\"37\":1,\"47\":1,\"84\":1,\"3007\":9,\"3085\":1}}],[\"hours=168\",{\"1\":{\"1535\":1}}],[\"hours=72\",{\"1\":{\"1530\":1}}],[\"hours\",{\"1\":{\"1004\":1}}],[\"hour\",{\"1\":{\"994\":1,\"1066\":3}}],[\"hotspot将其与虚拟机栈合二为一\",{\"1\":{\"707\":1}}],[\"hongwei\",{\"1\":{\"286\":6}}],[\"hostpath\",{\"1\":{\"1648\":1,\"1650\":10,\"1661\":3,\"1685\":1,\"1698\":1,\"1713\":11}}],[\"hosting\",{\"1\":{\"990\":1}}],[\"hostnameverifier\",{\"1\":{\"3214\":1}}],[\"hostnamectl\",{\"1\":{\"1610\":1,\"1676\":1,\"3265\":4}}],[\"hostname\",{\"1\":{\"125\":1,\"255\":1,\"1610\":1,\"1660\":3,\"1676\":1,\"1713\":1,\"3214\":1,\"3265\":4}}],[\"hosts下把所有的要纳入集群的机器登录方式进行指定\",{\"1\":{\"1677\":1}}],[\"hosts地址修改为elasticsearch容器地址\",{\"1\":{\"1520\":1}}],[\"hosts出错\",{\"1\":{\"125\":1}}],[\"hosts\",{\"1\":{\"125\":2,\"1363\":1,\"1517\":1,\"1520\":1,\"1523\":1,\"1524\":1,\"1535\":1,\"1560\":1,\"1633\":1,\"1637\":1,\"1638\":1,\"3267\":1}}],[\"host\",{\"1\":{\"125\":7,\"178\":1,\"180\":1,\"186\":7,\"198\":1,\"216\":2,\"234\":1,\"235\":2,\"1326\":6,\"1336\":4,\"1337\":1,\"1339\":1,\"1511\":1,\"1517\":1,\"1520\":1,\"1523\":1,\"1535\":1,\"1560\":1,\"1648\":3,\"1649\":2,\"1650\":20,\"1661\":2,\"1677\":1,\"1685\":3,\"1688\":2,\"1698\":2,\"1713\":22,\"1763\":1,\"1764\":9,\"1775\":3,\"1788\":1,\"1813\":2,\"1816\":1,\"1940\":1,\"2020\":1,\"3103\":1,\"3177\":2,\"3256\":4}}],[\"host=redis\",{\"1\":{\"3246\":1}}],[\"host=smtp\",{\"1\":{\"1644\":1}}],[\"host=10\",{\"1\":{\"1643\":1}}],[\"host=\",{\"1\":{\"102\":2,\"110\":1,\"1821\":1}}],[\"host3\",{\"1\":{\"69\":1}}],[\"host2\",{\"1\":{\"69\":1}}],[\"host1\",{\"1\":{\"69\":1}}],[\"hope\",{\"1\":{\"29\":1,\"1578\":1}}],[\"home=\",{\"1\":{\"1369\":2,\"1371\":2,\"1372\":2,\"1373\":1,\"1731\":1}}],[\"homedir>\",{\"1\":{\"998\":1}}],[\"homedir>c\",{\"1\":{\"998\":1}}],[\"homebrew\",{\"1\":{\"264\":2}}],[\"home\",{\"1\":{\"2\":1,\"216\":6,\"234\":2,\"240\":1,\"242\":3,\"243\":2,\"250\":2,\"999\":1,\"1005\":2,\"1369\":3,\"1370\":3,\"1371\":2,\"1372\":3,\"1373\":2,\"1487\":1,\"1513\":1,\"1516\":1,\"1530\":3,\"1535\":1,\"1570\":1,\"1578\":1,\"1624\":1,\"1648\":1,\"1661\":2,\"1685\":1,\"1731\":4,\"1841\":1,\"1865\":2,\"1873\":1,\"1908\":1,\"1920\":2,\"1940\":1,\"3275\":2}}],[\"h1>\",{\"1\":{\"1324\":1,\"2921\":1,\"3070\":1}}],[\"h1\",{\"1\":{\"28\":2}}],[\"上界通配符\",{\"0\":{\"3039\":1},\"1\":{\"3029\":1,\"3039\":1}}],[\"上述实现中\",{\"1\":{\"2512\":1}}],[\"上述的架构\",{\"1\":{\"306\":1}}],[\"上浮\",{\"1\":{\"2472\":1}}],[\"上海\",{\"1\":{\"2329\":1}}],[\"上次更新到现在的cpu时间占用百分比\",{\"1\":{\"1882\":1}}],[\"上次调度时间\",{\"1\":{\"1687\":1}}],[\"上边只监听一次\",{\"1\":{\"1877\":1}}],[\"上\",{\"1\":{\"1661\":1}}],[\"上面的关闭命令无效\",{\"1\":{\"1780\":1}}],[\"上面的配置一定程度可以限制访问频率\",{\"1\":{\"1396\":1}}],[\"上面将\",{\"1\":{\"1661\":1}}],[\"上面配置了单个ip同时并发连接数最多只能10个连接\",{\"1\":{\"1397\":1}}],[\"上面执行完成之后\",{\"1\":{\"1004\":1}}],[\"上传\",{\"1\":{\"3263\":1}}],[\"上传镜像\",{\"1\":{\"3246\":1}}],[\"上传在xftp中put回车即可\",{\"1\":{\"1898\":1}}],[\"上传安装包\",{\"0\":{\"1767\":1}}],[\"上传安装包3\",{\"1\":{\"1734\":1}}],[\"上传到到每个服务器上\",{\"1\":{\"1764\":1}}],[\"上传私服\",{\"1\":{\"1610\":1}}],[\"上传至服务器\",{\"1\":{\"1582\":1}}],[\"上传至中央仓库\",{\"0\":{\"994\":1}}],[\"上传项目\",{\"0\":{\"1000\":1}}],[\"上传release版本\",{\"0\":{\"1001\":1},\"1\":{\"990\":1}}],[\"上传snapshot版本\",{\"0\":{\"995\":1},\"1\":{\"990\":1}}],[\"上传步骤\",{\"1\":{\"990\":1}}],[\"上下文切换次数过多表示你的cpu大部分浪费在上下文切换\",{\"1\":{\"1887\":1}}],[\"上下文切换等开销\",{\"1\":{\"590\":1}}],[\"上下角标\",{\"0\":{\"23\":1}}],[\"上的性能差异\",{\"1\":{\"2354\":1}}],[\"上的mysql服务器\",{\"1\":{\"125\":1}}],[\"上的check\",{\"1\":{\"125\":1}}],[\"上的列\",{\"1\":{\"125\":1}}],[\"上的用户\",{\"1\":{\"125\":3}}],[\"上没有为主机\",{\"1\":{\"125\":2}}],[\"上使用\",{\"1\":{\"125\":2}}],[\"上创建组\",{\"1\":{\"125\":1}}],[\"上一篇\",{\"1\":{\"5\":1}}],[\"2xx\",{\"1\":{\"3179\":1}}],[\"2个mss\",{\"1\":{\"3075\":1}}],[\"2f\",{\"1\":{\"2902\":1,\"2905\":2}}],[\"2f005\",{\"1\":{\"125\":1}}],[\"2f003\",{\"1\":{\"125\":1}}],[\"2ⁿ\",{\"1\":{\"2702\":1,\"2711\":1,\"2726\":1}}],[\"2i+2\",{\"1\":{\"2472\":1}}],[\"2i+1\",{\"1\":{\"2472\":1}}],[\"2=b\",{\"1\":{\"2427\":2,\"2632\":2}}],[\"2=``all\",{\"1\":{\"1739\":1}}],[\"2倍扩容可能导致更多的内存浪费\",{\"1\":{\"2455\":1}}],[\"2倍扩容\",{\"1\":{\"2316\":2}}],[\"2+2\",{\"1\":{\"2271\":1,\"2272\":1}}],[\"2^5\",{\"1\":{\"2295\":1}}],[\"2^4=16\",{\"1\":{\"2282\":1}}],[\"2^63\",{\"1\":{\"2099\":2}}],[\"2^31\",{\"1\":{\"2099\":2}}],[\"2字节\",{\"1\":{\"2099\":2}}],[\"2表示每2秒采集一次状态信息\",{\"1\":{\"1887\":1}}],[\"2表示记录所有操作\",{\"1\":{\"1739\":1}}],[\"2>\",{\"1\":{\"1844\":1,\"1895\":1}}],[\"2g\",{\"1\":{\"1638\":1,\"3275\":1}}],[\"2gi\",{\"1\":{\"1638\":3}}],[\"2o\",{\"1\":{\"1581\":1}}],[\"2改成自己的\",{\"1\":{\"1517\":1,\"1520\":1,\"1523\":1}}],[\"2安装docker最新版\",{\"1\":{\"1507\":1}}],[\"2<\",{\"1\":{\"1456\":1}}],[\"2的asynchronousfilechannel实现异步文件io\",{\"1\":{\"1238\":1}}],[\"2避免整数溢出\",{\"1\":{\"1161\":1}}],[\"29\",{\"1\":{\"728\":2,\"1778\":1,\"3266\":12}}],[\"261\",{\"1\":{\"1731\":1}}],[\"262144\",{\"1\":{\"1513\":1}}],[\"26\",{\"1\":{\"728\":2,\"1166\":1,\"1170\":1,\"1582\":1,\"1583\":5,\"3271\":2,\"3282\":1}}],[\"26升级到5\",{\"1\":{\"118\":1}}],[\"240\",{\"1\":{\"2112\":1,\"3273\":1}}],[\"24000\",{\"1\":{\"125\":2}}],[\"241\",{\"1\":{\"1502\":1}}],[\"24\",{\"1\":{\"728\":2,\"1373\":1,\"1439\":4,\"1623\":1,\"1638\":2,\"1755\":1,\"3266\":4}}],[\"286m\",{\"1\":{\"1885\":1}}],[\"286\",{\"1\":{\"1885\":1}}],[\"2888\",{\"1\":{\"1529\":2}}],[\"28kb\",{\"1\":{\"1527\":2}}],[\"28t16\",{\"1\":{\"1513\":1}}],[\"2890844526\",{\"1\":{\"1092\":2,\"3180\":2}}],[\"28\",{\"1\":{\"585\":1,\"728\":2,\"1714\":1,\"2329\":2}}],[\"28000\",{\"1\":{\"125\":1}}],[\"2发布\",{\"1\":{\"574\":1}}],[\"2和websocket\",{\"1\":{\"471\":2,\"494\":1}}],[\"27m\",{\"1\":{\"3273\":1}}],[\"271\",{\"1\":{\"1369\":2,\"1371\":1,\"1372\":1}}],[\"27edc1d952e45891\",{\"1\":{\"997\":1}}],[\"27\",{\"1\":{\"286\":1,\"728\":2,\"1661\":1,\"1767\":1,\"1768\":1,\"1769\":1,\"1770\":1}}],[\"27017\",{\"1\":{\"69\":3,\"70\":2,\"222\":2,\"1734\":2,\"1763\":2,\"1764\":11,\"1813\":1}}],[\"2da0\",{\"1\":{\"256\":1}}],[\"2collations\",{\"1\":{\"125\":1}}],[\"214\",{\"1\":{\"3273\":1}}],[\"2166136261l\",{\"1\":{\"3086\":1}}],[\"21dd11c8fb7a\",{\"1\":{\"1667\":2}}],[\"2181\",{\"1\":{\"1529\":4,\"1530\":2,\"1532\":1,\"1533\":1,\"1535\":3}}],[\"215\",{\"1\":{\"1481\":3,\"1482\":2,\"1483\":2,\"1484\":1,\"1496\":2,\"1685\":1,\"1688\":1}}],[\"21集合框架的主要演进\",{\"1\":{\"1198\":1}}],[\"21的演进及新特性\",{\"0\":{\"1198\":1}}],[\"21的重要语法特性演进\",{\"1\":{\"1059\":1}}],[\"21的语法特性演进\",{\"0\":{\"1059\":1}}],[\"21提供了多种创建虚拟线程的方式\",{\"1\":{\"527\":1}}],[\"21虚拟线程创建方式\",{\"1\":{\"526\":1}}],[\"21中引入的一项重要特性\",{\"1\":{\"524\":1}}],[\"21\",{\"0\":{\"523\":1},\"1\":{\"728\":2,\"1198\":1,\"1368\":1,\"1370\":1,\"1660\":6,\"1687\":4,\"2367\":1,\"2549\":1,\"2569\":1,\"2596\":1,\"2624\":1,\"3246\":2,\"3282\":1}}],[\"21000\",{\"1\":{\"125\":3}}],[\"21s01\",{\"1\":{\"125\":2}}],[\"2379\",{\"1\":{\"1638\":1}}],[\"239\",{\"1\":{\"1638\":2}}],[\"233\",{\"1\":{\"1638\":2}}],[\"2345\",{\"1\":{\"1369\":2,\"1370\":1,\"1371\":1,\"1372\":1,\"1373\":1}}],[\"23\",{\"1\":{\"728\":2,\"1372\":1,\"1439\":6}}],[\"23000\",{\"1\":{\"125\":9}}],[\"232m\",{\"1\":{\"1885\":2}}],[\"232\",{\"1\":{\"110\":1,\"1885\":1}}],[\"20到40的子集\",{\"1\":{\"2661\":1}}],[\"20位\",{\"1\":{\"2065\":1}}],[\"20s\",{\"1\":{\"1881\":4}}],[\"20gi\",{\"1\":{\"1638\":3}}],[\"208b\",{\"1\":{\"1527\":4}}],[\"20px\",{\"1\":{\"1469\":2}}],[\"2097152k\",{\"1\":{\"774\":2}}],[\"20之间\",{\"1\":{\"428\":1}}],[\"20\",{\"1\":{\"232\":12,\"246\":1,\"428\":1,\"450\":1,\"538\":1,\"728\":2,\"1038\":1,\"1053\":1,\"1145\":1,\"1182\":1,\"1269\":1,\"1270\":2,\"1369\":2,\"1527\":2,\"1613\":2,\"1633\":1,\"1635\":1,\"1637\":2,\"1660\":4,\"1673\":2,\"1677\":1,\"1684\":16,\"1687\":2,\"1744\":2,\"2065\":1,\"2113\":1,\"2146\":1,\"2150\":1,\"2216\":2,\"2323\":1,\"2406\":2,\"2407\":1,\"2408\":1,\"2661\":5,\"2733\":1,\"2785\":1,\"2902\":1,\"2969\":1,\"2970\":2,\"2971\":1,\"2974\":1,\"2989\":1,\"3003\":2,\"3082\":1,\"3096\":1,\"3218\":1,\"3256\":1,\"3273\":4,\"3282\":1}}],[\"2054\",{\"1\":{\"125\":1}}],[\"2053\",{\"1\":{\"125\":1}}],[\"2052\",{\"1\":{\"125\":1}}],[\"2051\",{\"1\":{\"125\":1}}],[\"2050\",{\"1\":{\"125\":1}}],[\"2049\",{\"1\":{\"125\":1}}],[\"2048\",{\"1\":{\"125\":1}}],[\"2047\",{\"1\":{\"125\":1}}],[\"2046\",{\"1\":{\"125\":1}}],[\"2045\",{\"1\":{\"125\":1}}],[\"2044\",{\"1\":{\"125\":1}}],[\"2043\",{\"1\":{\"125\":1}}],[\"2042\",{\"1\":{\"125\":1}}],[\"2041\",{\"1\":{\"125\":1}}],[\"2040\",{\"1\":{\"125\":1}}],[\"2039\",{\"1\":{\"125\":1}}],[\"2038\",{\"1\":{\"125\":1}}],[\"2037\",{\"1\":{\"125\":1}}],[\"2036\",{\"1\":{\"125\":1}}],[\"2035\",{\"1\":{\"125\":1}}],[\"2034\",{\"1\":{\"125\":1}}],[\"2033\",{\"1\":{\"125\":1}}],[\"2032\",{\"1\":{\"125\":1}}],[\"2031\",{\"1\":{\"125\":1}}],[\"2030\",{\"1\":{\"125\":1}}],[\"2029\",{\"1\":{\"125\":1}}],[\"2028\",{\"1\":{\"125\":1}}],[\"2027\",{\"1\":{\"125\":1}}],[\"2026\",{\"1\":{\"125\":1}}],[\"2025\",{\"1\":{\"125\":1}}],[\"2024\",{\"1\":{\"125\":1}}],[\"20230129100419274\",{\"1\":{\"3261\":1}}],[\"20230129100318918\",{\"1\":{\"3261\":1}}],[\"20230129100035153\",{\"1\":{\"3261\":1}}],[\"20230419200402414\",{\"1\":{\"1578\":1}}],[\"20230425140440589\",{\"1\":{\"1571\":1}}],[\"20230425140422986\",{\"1\":{\"1569\":1}}],[\"20230425140406861\",{\"1\":{\"1569\":1}}],[\"202302\",{\"1\":{\"1573\":1}}],[\"202302并设置ling\",{\"1\":{\"1573\":1}}],[\"20230506165540292\",{\"1\":{\"1004\":1}}],[\"20230506114045630\",{\"1\":{\"991\":1}}],[\"2023\",{\"1\":{\"125\":1,\"545\":1,\"566\":2,\"774\":1,\"997\":2,\"1222\":1}}],[\"20221113220327\",{\"1\":{\"1723\":1}}],[\"20221113220313\",{\"1\":{\"1722\":1}}],[\"20220410115849673\",{\"1\":{\"3263\":1}}],[\"20220420215058926\",{\"1\":{\"1688\":1}}],[\"20220420214945237\",{\"1\":{\"1688\":1}}],[\"20220420213813756\",{\"1\":{\"1685\":1}}],[\"20220420213711495\",{\"1\":{\"1685\":1}}],[\"20220420212425461\",{\"1\":{\"1681\":1}}],[\"20220420212159720\",{\"1\":{\"1680\":1}}],[\"20220420212119330\",{\"1\":{\"1679\":1}}],[\"20220420220429122\",{\"1\":{\"1696\":1}}],[\"20220420224253239\",{\"1\":{\"1655\":1,\"1710\":1}}],[\"20220420223545289\",{\"1\":{\"1707\":1}}],[\"20220420223815150\",{\"1\":{\"1655\":1,\"1710\":1}}],[\"20220420223342778\",{\"1\":{\"1655\":1,\"1709\":1}}],[\"20220420223120319\",{\"1\":{\"1655\":1,\"1708\":1}}],[\"20220420221757461\",{\"1\":{\"1655\":1}}],[\"20220420221640323\",{\"1\":{\"1654\":1,\"1704\":1}}],[\"20220420222922754\",{\"1\":{\"1707\":1}}],[\"20220420222438920\",{\"1\":{\"1706\":1}}],[\"20220420222210612\",{\"1\":{\"1653\":1,\"1703\":1}}],[\"20220420222126737\",{\"1\":{\"1653\":1,\"1702\":1}}],[\"20220421173225644\",{\"1\":{\"1706\":1}}],[\"20220421164309958\",{\"1\":{\"1711\":1}}],[\"20220421164903217\",{\"1\":{\"1654\":1,\"1704\":1}}],[\"20220421163617011\",{\"1\":{\"1698\":1}}],[\"20220421163229765\",{\"1\":{\"1696\":1}}],[\"20220421160454198\",{\"1\":{\"1694\":1}}],[\"20220421160335556\",{\"1\":{\"1692\":1}}],[\"20220421160057253\",{\"1\":{\"1690\":1}}],[\"20220421155236818\",{\"1\":{\"1693\":1}}],[\"20220421154812227\",{\"1\":{\"1691\":1}}],[\"20220421151322852\",{\"1\":{\"1677\":1}}],[\"20220421150627306\",{\"1\":{\"1677\":1}}],[\"20220426140408316\",{\"1\":{\"1630\":1,\"1719\":1}}],[\"20220630095724658\",{\"1\":{\"1662\":1}}],[\"20220630095812994\",{\"1\":{\"1660\":1}}],[\"20220531171121778\",{\"1\":{\"1658\":1}}],[\"20220816213120382\",{\"1\":{\"3282\":1}}],[\"20220816212928917\",{\"1\":{\"3282\":1}}],[\"20220816212701687\",{\"1\":{\"3282\":1}}],[\"20220816212543225\",{\"1\":{\"3282\":1}}],[\"20220816212308034\",{\"1\":{\"3282\":1}}],[\"20220816211312775\",{\"1\":{\"3282\":1}}],[\"20220816210440574\",{\"1\":{\"3282\":1}}],[\"20220816210220210\",{\"1\":{\"3282\":1}}],[\"20220816201826018\",{\"1\":{\"3281\":1}}],[\"20220816201739371\",{\"1\":{\"3281\":1}}],[\"20220816205248456\",{\"1\":{\"3279\":1}}],[\"20220816205034201\",{\"1\":{\"3279\":1}}],[\"20220816204448683\",{\"1\":{\"3279\":1}}],[\"20220816204356332\",{\"1\":{\"3279\":1}}],[\"20220816204242066\",{\"1\":{\"3279\":1}}],[\"20220816204138975\",{\"1\":{\"3279\":1}}],[\"20220816203153592\",{\"1\":{\"3278\":1}}],[\"20220816202953810\",{\"1\":{\"3278\":1}}],[\"20220816202814643\",{\"1\":{\"3278\":1}}],[\"20220816185710948\",{\"1\":{\"3276\":1}}],[\"20220816162243693\",{\"1\":{\"3273\":1}}],[\"20220816160733605\",{\"1\":{\"3273\":1}}],[\"20220816160254842\",{\"1\":{\"3273\":1}}],[\"20220816160200746\",{\"1\":{\"3273\":1}}],[\"20220816160056177\",{\"1\":{\"3273\":1}}],[\"20220816155932470\",{\"1\":{\"3273\":1}}],[\"20220816155741848\",{\"1\":{\"3273\":1}}],[\"20220816155537732\",{\"1\":{\"3273\":1}}],[\"20220816155140075\",{\"1\":{\"3273\":1}}],[\"20220816155110578\",{\"1\":{\"3273\":1}}],[\"20220816152917840\",{\"1\":{\"3273\":1}}],[\"20220816151746413\",{\"1\":{\"3273\":1}}],[\"20220816151709536\",{\"1\":{\"3273\":1}}],[\"20220816151352377\",{\"1\":{\"3273\":1}}],[\"20220816151157176\",{\"1\":{\"3273\":1}}],[\"20220816151039880\",{\"1\":{\"3273\":1}}],[\"20220816151001001\",{\"1\":{\"3273\":1}}],[\"20220816150736103\",{\"1\":{\"3273\":1}}],[\"20220816150706088\",{\"1\":{\"3273\":1}}],[\"20220816150450409\",{\"1\":{\"3272\":1}}],[\"20220816150209913\",{\"1\":{\"3272\":1}}],[\"20220816150151634\",{\"1\":{\"3272\":1}}],[\"20220816144953656\",{\"1\":{\"3271\":1}}],[\"20220816144830488\",{\"1\":{\"3271\":1}}],[\"20220804124637278\",{\"1\":{\"1563\":1}}],[\"20220804124349974\",{\"1\":{\"1562\":1}}],[\"20220804124051725\",{\"1\":{\"1562\":1}}],[\"20220804123724252\",{\"1\":{\"1562\":1}}],[\"20220826163627042\",{\"1\":{\"1548\":1}}],[\"20220826140418379\",{\"1\":{\"1546\":1}}],[\"20220826154758399\",{\"1\":{\"1546\":1}}],[\"20220826100411131\",{\"1\":{\"1541\":1}}],[\"20220902145433470\",{\"1\":{\"1552\":1}}],[\"20220902173454914\",{\"1\":{\"1542\":1}}],[\"20220926155229138\",{\"1\":{\"257\":1}}],[\"20220926154944976\",{\"1\":{\"251\":1}}],[\"20220926154916024\",{\"1\":{\"250\":1}}],[\"2022\",{\"1\":{\"125\":1,\"1527\":1,\"1536\":1,\"1577\":3,\"1578\":3,\"1661\":1,\"3282\":1}}],[\"20210608\",{\"1\":{\"1914\":1}}],[\"20210523175503891\",{\"1\":{\"1779\":1}}],[\"20210523180911420\",{\"1\":{\"1779\":1}}],[\"20210523185524664\",{\"1\":{\"1417\":1}}],[\"20210523184201035\",{\"1\":{\"1417\":1}}],[\"20210523181704656\",{\"1\":{\"1416\":1}}],[\"20210523181224421\",{\"1\":{\"1414\":1}}],[\"20210523181111096\",{\"1\":{\"1414\":1}}],[\"20210911174818855\",{\"1\":{\"1764\":1}}],[\"20210817172033045\",{\"1\":{\"1504\":1}}],[\"20210817171925808\",{\"1\":{\"1504\":1}}],[\"20210817170139997\",{\"1\":{\"1503\":1}}],[\"20210817102358753\",{\"1\":{\"1503\":1}}],[\"20210817100515149\",{\"1\":{\"1503\":1}}],[\"20210817163014388\",{\"1\":{\"1502\":1}}],[\"20210116194252647\",{\"1\":{\"463\":1}}],[\"20210115184613356\",{\"1\":{\"463\":1}}],[\"20210115183651159\",{\"1\":{\"463\":1}}],[\"20210115181038711\",{\"1\":{\"462\":1}}],[\"20210115181157737\",{\"1\":{\"462\":1}}],[\"20210115180701704\",{\"1\":{\"462\":1}}],[\"20210115180721908\",{\"1\":{\"462\":1}}],[\"20210115170016721\",{\"1\":{\"462\":1}}],[\"20210115165051510\",{\"1\":{\"461\":1}}],[\"20210115163043778\",{\"1\":{\"461\":1}}],[\"20210115163920227\",{\"1\":{\"461\":1}}],[\"20210114224028196\",{\"1\":{\"460\":1}}],[\"20210114223646834\",{\"1\":{\"460\":1}}],[\"20210114223141212\",{\"1\":{\"460\":1}}],[\"20210114221244630\",{\"1\":{\"459\":1}}],[\"20210114211335030\",{\"1\":{\"459\":1}}],[\"20210114211907733\",{\"1\":{\"459\":1}}],[\"20210114213006730\",{\"1\":{\"459\":1}}],[\"20210114212748351\",{\"1\":{\"459\":1}}],[\"202104\",{\"1\":{\"286\":2}}],[\"2021\",{\"1\":{\"125\":1,\"997\":2,\"1698\":1,\"1764\":1}}],[\"2020\",{\"1\":{\"29\":1,\"125\":1,\"1513\":1,\"1606\":1,\"1819\":1}}],[\"2019\",{\"1\":{\"125\":1,\"1059\":2}}],[\"2018年9月6日\",{\"1\":{\"286\":1}}],[\"2018年9月7日\",{\"1\":{\"286\":5}}],[\"2018\",{\"1\":{\"125\":1,\"1059\":2,\"1687\":4}}],[\"2017年\",{\"1\":{\"577\":1}}],[\"2017\",{\"1\":{\"125\":1,\"1059\":1,\"1829\":1}}],[\"2016\",{\"1\":{\"125\":1,\"1578\":1}}],[\"2015\",{\"1\":{\"125\":1,\"1687\":1}}],[\"2014\",{\"0\":{\"575\":1},\"1\":{\"125\":1,\"1059\":1,\"1578\":1}}],[\"2013\",{\"1\":{\"125\":1}}],[\"2012年\",{\"0\":{\"585\":1}}],[\"2012\",{\"1\":{\"125\":1}}],[\"2011\",{\"1\":{\"125\":1}}],[\"2010\",{\"1\":{\"125\":1,\"1684\":12}}],[\"200f\",{\"1\":{\"1910\":1}}],[\"200mb\",{\"1\":{\"1560\":1}}],[\"200\",{\"1\":{\"1324\":1,\"1431\":1,\"1432\":1,\"1524\":1,\"2466\":1,\"2921\":1,\"3070\":1,\"3208\":5}}],[\"2009\",{\"1\":{\"125\":1}}],[\"2008\",{\"1\":{\"125\":1}}],[\"2007\",{\"1\":{\"125\":1}}],[\"2006年\",{\"1\":{\"580\":1}}],[\"2006\",{\"1\":{\"125\":1}}],[\"2005年\",{\"1\":{\"577\":1}}],[\"2005\",{\"1\":{\"125\":1}}],[\"2004年\",{\"0\":{\"584\":1},\"1\":{\"574\":1,\"580\":1}}],[\"2004\",{\"0\":{\"574\":1},\"1\":{\"125\":1}}],[\"2003年\",{\"1\":{\"312\":1}}],[\"2003\",{\"1\":{\"125\":1}}],[\"2002年\",{\"1\":{\"312\":1,\"580\":1}}],[\"2002\",{\"1\":{\"125\":1}}],[\"2001\",{\"1\":{\"125\":1,\"584\":1}}],[\"2000年\",{\"0\":{\"583\":1}}],[\"2000\",{\"1\":{\"125\":1,\"610\":1,\"676\":1,\"1578\":1,\"3208\":1}}],[\"20000m\",{\"1\":{\"1833\":1}}],[\"20000\",{\"1\":{\"125\":1}}],[\"20升级到当前最新的5\",{\"1\":{\"118\":1}}],[\"222等\",{\"1\":{\"140\":1}}],[\"22012\",{\"1\":{\"125\":1}}],[\"22008\",{\"1\":{\"125\":1}}],[\"22001\",{\"1\":{\"125\":1}}],[\"22007\",{\"1\":{\"125\":2}}],[\"22003\",{\"1\":{\"125\":2}}],[\"22004\",{\"1\":{\"125\":2}}],[\"22\",{\"1\":{\"115\":8,\"728\":2,\"1371\":1,\"1502\":1,\"1534\":1,\"1535\":3,\"1638\":3,\"1667\":2,\"1687\":4,\"2246\":1,\"2329\":1,\"3248\":1}}],[\"253\",{\"1\":{\"3275\":3}}],[\"256\",{\"1\":{\"232\":2,\"1238\":1,\"1684\":2,\"3237\":1}}],[\"255的整数\",{\"1\":{\"2841\":1}}],[\"255\",{\"1\":{\"232\":10,\"1684\":9,\"1687\":9,\"1851\":3,\"2905\":3}}],[\"25分钟\",{\"1\":{\"160\":1}}],[\"250ms\",{\"1\":{\"153\":1}}],[\"25000\",{\"1\":{\"125\":2}}],[\"25\",{\"1\":{\"48\":1,\"58\":1,\"84\":1,\"85\":2,\"89\":1,\"153\":2,\"728\":2,\"1182\":2,\"1225\":1,\"1269\":1,\"1579\":1,\"1581\":1,\"1648\":2,\"1649\":2,\"1650\":20,\"1661\":2,\"1685\":2,\"1688\":2,\"1713\":22,\"1714\":1,\"2146\":1,\"2224\":2,\"2329\":2,\"2905\":1,\"2969\":1,\"2971\":1,\"3003\":1,\"3020\":1,\"3166\":1}}],[\"2\",{\"0\":{\"38\":1,\"42\":1,\"44\":1,\"48\":1,\"53\":1,\"59\":1,\"63\":1,\"69\":1,\"74\":1,\"81\":1,\"82\":1,\"85\":1,\"90\":1,\"94\":1,\"143\":1,\"148\":1,\"149\":1,\"150\":1,\"151\":2,\"152\":1,\"153\":1,\"154\":1,\"157\":1,\"158\":1,\"159\":1,\"160\":1,\"161\":2,\"162\":1,\"163\":2,\"164\":2,\"165\":2,\"166\":3,\"167\":2,\"168\":3,\"169\":2,\"170\":1,\"171\":1,\"172\":2,\"173\":1,\"177\":1,\"178\":1,\"181\":1,\"185\":1,\"199\":1,\"200\":1,\"207\":1,\"211\":1,\"216\":1,\"219\":1,\"222\":1,\"226\":1,\"233\":1,\"239\":1,\"249\":1,\"254\":1,\"272\":1,\"312\":1,\"318\":1,\"322\":1,\"336\":1,\"349\":1,\"364\":1,\"378\":1,\"392\":1,\"397\":1,\"399\":1,\"404\":1,\"405\":1,\"410\":1,\"416\":1,\"422\":1,\"428\":1,\"433\":1,\"439\":1,\"444\":1,\"450\":1,\"455\":1,\"469\":1,\"470\":1,\"471\":1,\"472\":2,\"473\":1,\"474\":1,\"477\":1,\"480\":1,\"483\":1,\"487\":1,\"489\":1,\"491\":1,\"501\":1,\"503\":1,\"504\":1,\"505\":2,\"506\":1,\"509\":1,\"514\":1,\"516\":1,\"518\":1,\"527\":1,\"538\":1,\"542\":1,\"549\":1,\"551\":1,\"553\":1,\"563\":1,\"565\":1,\"567\":1,\"575\":1,\"576\":1,\"578\":1,\"581\":1,\"584\":1,\"589\":1,\"592\":1,\"593\":2,\"596\":1,\"600\":1,\"603\":1,\"606\":1,\"609\":1,\"610\":2,\"613\":1,\"616\":1,\"622\":1,\"625\":1,\"626\":2,\"629\":1,\"632\":1,\"638\":1,\"641\":1,\"642\":2,\"643\":1,\"646\":1,\"649\":1,\"655\":1,\"658\":1,\"659\":2,\"660\":1,\"663\":1,\"666\":1,\"672\":1,\"675\":1,\"676\":2,\"677\":1,\"680\":1,\"684\":1,\"690\":1,\"693\":1,\"694\":2,\"697\":1,\"701\":1,\"704\":1,\"707\":1,\"710\":1,\"711\":2,\"714\":1,\"718\":1,\"724\":1,\"727\":1,\"728\":2,\"729\":1,\"732\":1,\"736\":1,\"742\":1,\"745\":1,\"746\":2,\"747\":1,\"750\":1,\"754\":1,\"760\":1,\"761\":1,\"762\":2,\"765\":1,\"770\":1,\"772\":1,\"773\":2,\"774\":1,\"777\":1,\"781\":1,\"789\":1,\"791\":1,\"792\":1,\"793\":2,\"796\":1,\"800\":1,\"801\":1,\"802\":2,\"803\":2,\"804\":2,\"805\":3,\"806\":2,\"807\":1,\"810\":1,\"814\":1,\"823\":1,\"825\":1,\"826\":1,\"827\":2,\"830\":1,\"834\":1,\"835\":1,\"836\":2,\"837\":2,\"838\":2,\"839\":3,\"840\":2,\"841\":1,\"844\":1,\"848\":1,\"857\":1,\"859\":1,\"860\":1,\"861\":2,\"864\":1,\"868\":1,\"869\":1,\"870\":2,\"871\":2,\"872\":2,\"873\":3,\"874\":2,\"875\":1,\"878\":1,\"882\":1,\"891\":1,\"893\":1,\"894\":1,\"895\":2,\"898\":1,\"902\":1,\"903\":1,\"904\":2,\"905\":2,\"906\":2,\"907\":3,\"908\":2,\"909\":1,\"912\":1,\"916\":1,\"925\":1,\"937\":1,\"952\":1,\"974\":1,\"1001\":1,\"1011\":1,\"1013\":1,\"1014\":1,\"1015\":2,\"1016\":1,\"1017\":1,\"1018\":1,\"1021\":1,\"1024\":1,\"1034\":1,\"1036\":1,\"1037\":1,\"1038\":2,\"1039\":2,\"1040\":2,\"1041\":3,\"1042\":1,\"1043\":1,\"1044\":2,\"1047\":1,\"1048\":1,\"1049\":2,\"1053\":1,\"1054\":1,\"1055\":1,\"1056\":2,\"1064\":1,\"1072\":1,\"1080\":1,\"1092\":1,\"1095\":1,\"1099\":1,\"1101\":1,\"1105\":1,\"1106\":1,\"1108\":1,\"1112\":1,\"1114\":1,\"1116\":1,\"1123\":1,\"1124\":1,\"1125\":1,\"1126\":2,\"1129\":1,\"1132\":1,\"1135\":1,\"1146\":1,\"1161\":1,\"1165\":1,\"1174\":1,\"1177\":1,\"1178\":1,\"1179\":2,\"1180\":2,\"1181\":2,\"1182\":3,\"1186\":1,\"1187\":1,\"1191\":1,\"1192\":1,\"1193\":1,\"1194\":2,\"1204\":1,\"1207\":1,\"1208\":1,\"1209\":2,\"1210\":1,\"1211\":1,\"1212\":1,\"1222\":1,\"1223\":1,\"1224\":1,\"1225\":2,\"1228\":1,\"1235\":1,\"1244\":1,\"1245\":1,\"1246\":1,\"1247\":2,\"1250\":1,\"1260\":1,\"1262\":1,\"1263\":1,\"1264\":2,\"1267\":1,\"1270\":1,\"1274\":1,\"1275\":1,\"1276\":2,\"1277\":1,\"1287\":1,\"1289\":1,\"1290\":1,\"1291\":2,\"1295\":1,\"1299\":1,\"1302\":1,\"1312\":1,\"1313\":1,\"1314\":1,\"1315\":2,\"1316\":1,\"1319\":1,\"1325\":1,\"1329\":1,\"1330\":1,\"1331\":2,\"1332\":1,\"1333\":1,\"1337\":1,\"1340\":1,\"1341\":1,\"1342\":2,\"1343\":1,\"1344\":1,\"1345\":1,\"1346\":1,\"1352\":1,\"1358\":1,\"1363\":1,\"1396\":1,\"1405\":1,\"1431\":1,\"1437\":1,\"1438\":2,\"1439\":1,\"1440\":1,\"1442\":1,\"1447\":1,\"1449\":1,\"1450\":2,\"1451\":1,\"1452\":1,\"1453\":1,\"1454\":1,\"1456\":1,\"1462\":1,\"1467\":1,\"1469\":1,\"1475\":1,\"1481\":1,\"1487\":1,\"1498\":1,\"1509\":1,\"1516\":1,\"1523\":1,\"1530\":1,\"1538\":1,\"1541\":1,\"1545\":1,\"1563\":1,\"1578\":1,\"1581\":1,\"1589\":1,\"1594\":1,\"1599\":1,\"1604\":1,\"1627\":1,\"1634\":1,\"1637\":1,\"1641\":1,\"1649\":1,\"1680\":1,\"1685\":1,\"1688\":1,\"1691\":1,\"1703\":1,\"1706\":1,\"1716\":1,\"1722\":1,\"1737\":1,\"1764\":1,\"1767\":1,\"1814\":1,\"1817\":1,\"1891\":1,\"1895\":1,\"1904\":1,\"1915\":1,\"1945\":1,\"1958\":1,\"1971\":1,\"1984\":1,\"1995\":1,\"1996\":1,\"1997\":2,\"1998\":1,\"1999\":1,\"2000\":1,\"2006\":1,\"2007\":1,\"2010\":1,\"2018\":1,\"2019\":1,\"2020\":1,\"2021\":2,\"2024\":1,\"2027\":1,\"2033\":1,\"2034\":1,\"2035\":1,\"2045\":1,\"2051\":1,\"2054\":1,\"2058\":1,\"2062\":1,\"2063\":1,\"2066\":1,\"2071\":1,\"2077\":1,\"2090\":1,\"2100\":1,\"2110\":1,\"2124\":1,\"2125\":1,\"2126\":2,\"2129\":1,\"2133\":1,\"2139\":1,\"2142\":1,\"2143\":1,\"2144\":2,\"2145\":2,\"2146\":2,\"2147\":3,\"2148\":1,\"2149\":1,\"2150\":2,\"2151\":1,\"2152\":1,\"2156\":1,\"2157\":1,\"2158\":1,\"2159\":2,\"2162\":2,\"2165\":1,\"2166\":1,\"2167\":2,\"2168\":2,\"2169\":2,\"2170\":3,\"2171\":1,\"2172\":1,\"2173\":1,\"2174\":2,\"2178\":1,\"2179\":1,\"2180\":1,\"2181\":2,\"2184\":2,\"2187\":1,\"2188\":1,\"2189\":2,\"2190\":2,\"2191\":2,\"2192\":3,\"2193\":1,\"2194\":1,\"2195\":2,\"2196\":1,\"2197\":1,\"2198\":1,\"2202\":1,\"2203\":1,\"2204\":1,\"2205\":2,\"2208\":1,\"2211\":1,\"2212\":1,\"2213\":2,\"2214\":1,\"2215\":2,\"2216\":2,\"2217\":3,\"2218\":2,\"2219\":1,\"2220\":1,\"2221\":2,\"2222\":1,\"2223\":1,\"2224\":2,\"2228\":1,\"2229\":1,\"2230\":1,\"2231\":2,\"2232\":1,\"2235\":1,\"2238\":1,\"2239\":1,\"2240\":2,\"2241\":2,\"2242\":2,\"2243\":3,\"2244\":1,\"2245\":1,\"2246\":2,\"2247\":1,\"2248\":1,\"2249\":2,\"2253\":1,\"2254\":1,\"2255\":1,\"2256\":2,\"2257\":1,\"2258\":1,\"2261\":1,\"2262\":1,\"2263\":2,\"2264\":2,\"2265\":2,\"2266\":3,\"2267\":1,\"2268\":1,\"2269\":2,\"2270\":1,\"2271\":1,\"2272\":2,\"2276\":1,\"2277\":1,\"2278\":1,\"2279\":2,\"2280\":1,\"2283\":1,\"2286\":1,\"2287\":1,\"2288\":2,\"2289\":1,\"2290\":2,\"2291\":2,\"2292\":3,\"2293\":1,\"2294\":1,\"2295\":2,\"2296\":1,\"2297\":1,\"2298\":1,\"2299\":1,\"2300\":2,\"2301\":1,\"2302\":1,\"2303\":2,\"2304\":1,\"2308\":1,\"2309\":1,\"2310\":1,\"2311\":2,\"2315\":1,\"2319\":1,\"2322\":1,\"2323\":1,\"2324\":2,\"2325\":2,\"2326\":1,\"2327\":1,\"2328\":1,\"2329\":1,\"2332\":1,\"2341\":1,\"2343\":1,\"2344\":1,\"2345\":2,\"2346\":1,\"2349\":1,\"2352\":1,\"2359\":1,\"2362\":1,\"2366\":1,\"2369\":1,\"2370\":2,\"2371\":1,\"2372\":1,\"2373\":1,\"2376\":1,\"2383\":1,\"2384\":1,\"2385\":1,\"2386\":2,\"2399\":1,\"2403\":1,\"2406\":1,\"2407\":2,\"2408\":1,\"2409\":1,\"2410\":1,\"2413\":1,\"2420\":1,\"2421\":1,\"2422\":1,\"2423\":2,\"2433\":1,\"2436\":1,\"2437\":2,\"2438\":1,\"2439\":1,\"2440\":1,\"2441\":1,\"2444\":1,\"2449\":1,\"2460\":1,\"2465\":1,\"2466\":2,\"2467\":1,\"2468\":1,\"2471\":1,\"2477\":1,\"2478\":1,\"2481\":1,\"2490\":1,\"2493\":1,\"2494\":2,\"2495\":1,\"2496\":1,\"2497\":1,\"2498\":1,\"2501\":1,\"2506\":1,\"2517\":1,\"2522\":1,\"2523\":2,\"2524\":1,\"2525\":1,\"2528\":1,\"2534\":1,\"2535\":1,\"2536\":1,\"2537\":2,\"2548\":1,\"2551\":1,\"2552\":2,\"2553\":1,\"2554\":1,\"2555\":2,\"2558\":1,\"2562\":1,\"2568\":1,\"2571\":1,\"2572\":2,\"2573\":2,\"2574\":3,\"2575\":2,\"2576\":1,\"2577\":1,\"2578\":2,\"2581\":1,\"2585\":1,\"2592\":1,\"2598\":1,\"2599\":1,\"2600\":2,\"2601\":1,\"2602\":2,\"2603\":1,\"2604\":1,\"2605\":2,\"2608\":1,\"2613\":1,\"2620\":1,\"2626\":1,\"2627\":1,\"2628\":2,\"2629\":1,\"2630\":1,\"2631\":2,\"2632\":1,\"2635\":1,\"2640\":1,\"2647\":1,\"2653\":1,\"2654\":1,\"2655\":2,\"2656\":1,\"2657\":1,\"2658\":2,\"2659\":1,\"2660\":1,\"2661\":2,\"2664\":1,\"2669\":1,\"2676\":1,\"2679\":1,\"2680\":2,\"2681\":1,\"2682\":1,\"2683\":1,\"2684\":1,\"2685\":1,\"2688\":1,\"2692\":1,\"2699\":1,\"2702\":1,\"2706\":1,\"2707\":1,\"2708\":2,\"2709\":1,\"2710\":1,\"2711\":2,\"2712\":1,\"2716\":1,\"2717\":1,\"2721\":1,\"2722\":1,\"2723\":1,\"2724\":2,\"2732\":1,\"2733\":1,\"2734\":2,\"2735\":2,\"2736\":2,\"2737\":3,\"2738\":2,\"2739\":1,\"2740\":1,\"2741\":2,\"2742\":1,\"2746\":1,\"2747\":1,\"2748\":1,\"2749\":2,\"2750\":1,\"2755\":1,\"2758\":1,\"2759\":1,\"2760\":2,\"2761\":1,\"2762\":2,\"2763\":2,\"2764\":1,\"2765\":3,\"2766\":1,\"2767\":2,\"2768\":2,\"2773\":1,\"2774\":2,\"2775\":1,\"2776\":1,\"2777\":2,\"2785\":1,\"2795\":1,\"2808\":1,\"2810\":1,\"2819\":1,\"2831\":1,\"2838\":1,\"2842\":1,\"2854\":1,\"2866\":1,\"2878\":1,\"2890\":1,\"2902\":1,\"2914\":1,\"2926\":1,\"2936\":1,\"2948\":1,\"2950\":1,\"2951\":1,\"2952\":2,\"2953\":1,\"2956\":1,\"2966\":1,\"2967\":1,\"2968\":1,\"2969\":2,\"2970\":1,\"2971\":1,\"2981\":1,\"2982\":1,\"2983\":1,\"2984\":2,\"2987\":1,\"2990\":1,\"3000\":1,\"3001\":1,\"3002\":1,\"3003\":2,\"3017\":1,\"3018\":1,\"3019\":1,\"3020\":2,\"3021\":1,\"3024\":1,\"3028\":1,\"3035\":1,\"3037\":1,\"3038\":1,\"3039\":2,\"3040\":1,\"3041\":1,\"3047\":1,\"3048\":1,\"3049\":1,\"3050\":2,\"3053\":1,\"3059\":1,\"3060\":1,\"3061\":1,\"3062\":2,\"3065\":1,\"3076\":1,\"3077\":1,\"3078\":1,\"3079\":2,\"3080\":1,\"3083\":1,\"3086\":1,\"3097\":1,\"3098\":1,\"3099\":1,\"3100\":2,\"3103\":1,\"3107\":1,\"3117\":1,\"3119\":1,\"3120\":2,\"3121\":2,\"3124\":1,\"3135\":1,\"3146\":1,\"3147\":1,\"3148\":2,\"3160\":1,\"3161\":1,\"3162\":1,\"3165\":1,\"3176\":1,\"3178\":1,\"3179\":1,\"3180\":2,\"3183\":1,\"3188\":1,\"3195\":1,\"3205\":1,\"3207\":1,\"3208\":1,\"3209\":2,\"3212\":1,\"3215\":1,\"3218\":1,\"3223\":1,\"3233\":1,\"3235\":1,\"3238\":1,\"3241\":1,\"3244\":1,\"3265\":1,\"3266\":2,\"3267\":1,\"3268\":1,\"3269\":1,\"3270\":1,\"3271\":1,\"3273\":1,\"3276\":1,\"3277\":1,\"3278\":1,\"3279\":2,\"3280\":2,\"3281\":2,\"3282\":3,\"3324\":1,\"3325\":1,\"3333\":1,\"3334\":1},\"1\":{\"21\":1,\"98\":2,\"106\":1,\"113\":1,\"114\":2,\"116\":1,\"121\":1,\"125\":3,\"129\":1,\"137\":1,\"147\":2,\"150\":1,\"154\":1,\"157\":1,\"166\":1,\"169\":1,\"171\":3,\"178\":1,\"189\":3,\"190\":4,\"191\":3,\"192\":4,\"233\":1,\"234\":2,\"250\":1,\"267\":1,\"282\":1,\"283\":2,\"285\":3,\"287\":2,\"289\":1,\"291\":1,\"292\":3,\"305\":1,\"307\":1,\"428\":1,\"459\":2,\"461\":1,\"462\":1,\"463\":3,\"472\":2,\"537\":1,\"539\":1,\"543\":3,\"557\":2,\"575\":2,\"602\":1,\"625\":1,\"626\":1,\"629\":1,\"676\":1,\"717\":1,\"728\":1,\"738\":1,\"756\":1,\"782\":1,\"792\":1,\"826\":1,\"860\":1,\"894\":1,\"999\":3,\"1041\":1,\"1053\":1,\"1055\":2,\"1068\":1,\"1069\":1,\"1087\":1,\"1092\":2,\"1095\":3,\"1111\":1,\"1123\":1,\"1139\":1,\"1160\":2,\"1161\":2,\"1162\":1,\"1166\":1,\"1178\":2,\"1179\":1,\"1181\":1,\"1182\":4,\"1191\":1,\"1194\":1,\"1238\":2,\"1246\":1,\"1250\":2,\"1295\":3,\"1296\":2,\"1349\":1,\"1354\":1,\"1355\":1,\"1388\":1,\"1392\":1,\"1399\":1,\"1414\":2,\"1416\":1,\"1417\":1,\"1418\":1,\"1419\":1,\"1420\":2,\"1427\":1,\"1431\":2,\"1432\":1,\"1433\":1,\"1434\":1,\"1435\":1,\"1439\":1,\"1440\":2,\"1441\":1,\"1443\":2,\"1444\":2,\"1455\":1,\"1456\":1,\"1457\":1,\"1458\":3,\"1459\":2,\"1461\":1,\"1462\":1,\"1463\":1,\"1464\":1,\"1467\":3,\"1469\":2,\"1474\":1,\"1483\":1,\"1498\":1,\"1499\":1,\"1500\":1,\"1501\":2,\"1503\":5,\"1504\":3,\"1507\":1,\"1513\":1,\"1516\":1,\"1517\":1,\"1520\":1,\"1523\":1,\"1527\":1,\"1531\":2,\"1535\":1,\"1538\":1,\"1557\":1,\"1559\":2,\"1563\":1,\"1576\":1,\"1577\":2,\"1578\":12,\"1582\":1,\"1607\":1,\"1630\":1,\"1636\":1,\"1638\":2,\"1641\":15,\"1642\":9,\"1648\":2,\"1658\":1,\"1660\":1,\"1661\":1,\"1662\":1,\"1667\":1,\"1669\":1,\"1677\":1,\"1682\":1,\"1684\":1,\"1685\":2,\"1687\":2,\"1696\":1,\"1698\":1,\"1711\":1,\"1724\":2,\"1734\":3,\"1735\":1,\"1736\":1,\"1739\":1,\"1760\":1,\"1763\":4,\"1764\":9,\"1765\":4,\"1771\":1,\"1778\":1,\"1779\":2,\"1780\":1,\"1786\":2,\"1787\":1,\"1788\":7,\"1790\":1,\"1799\":3,\"1813\":1,\"1833\":9,\"1866\":1,\"1871\":1,\"1887\":5,\"2012\":1,\"2018\":1,\"2078\":1,\"2080\":1,\"2100\":1,\"2109\":1,\"2112\":3,\"2115\":1,\"2126\":1,\"2128\":1,\"2144\":2,\"2146\":1,\"2147\":3,\"2149\":2,\"2150\":1,\"2151\":3,\"2158\":1,\"2161\":1,\"2167\":5,\"2169\":3,\"2170\":3,\"2180\":1,\"2181\":1,\"2188\":1,\"2194\":1,\"2195\":1,\"2196\":1,\"2197\":1,\"2198\":1,\"2202\":1,\"2212\":2,\"2214\":2,\"2216\":2,\"2217\":2,\"2220\":2,\"2223\":2,\"2230\":2,\"2231\":2,\"2246\":2,\"2272\":3,\"2291\":1,\"2294\":1,\"2295\":1,\"2320\":1,\"2323\":2,\"2324\":1,\"2325\":1,\"2326\":2,\"2328\":1,\"2329\":1,\"2346\":2,\"2369\":1,\"2370\":1,\"2371\":5,\"2372\":1,\"2373\":1,\"2404\":1,\"2406\":2,\"2408\":1,\"2410\":2,\"2427\":2,\"2434\":1,\"2438\":1,\"2450\":3,\"2465\":5,\"2467\":1,\"2468\":8,\"2480\":3,\"2491\":1,\"2501\":1,\"2513\":1,\"2523\":1,\"2539\":1,\"2578\":2,\"2580\":4,\"2596\":1,\"2612\":1,\"2613\":1,\"2615\":1,\"2632\":2,\"2651\":1,\"2660\":1,\"2669\":1,\"2670\":1,\"2677\":1,\"2683\":1,\"2704\":1,\"2710\":1,\"2711\":1,\"2716\":1,\"2726\":1,\"2742\":2,\"2766\":2,\"2809\":2,\"2821\":1,\"2826\":1,\"2903\":1,\"2914\":1,\"2969\":1,\"2970\":1,\"2971\":1,\"2983\":1,\"2994\":1,\"3002\":2,\"3023\":2,\"3024\":1,\"3025\":3,\"3035\":4,\"3040\":1,\"3065\":2,\"3066\":2,\"3085\":1,\"3100\":2,\"3120\":1,\"3134\":1,\"3180\":2,\"3205\":6,\"3208\":1,\"3212\":1,\"3218\":1,\"3225\":2,\"3232\":1,\"3237\":2,\"3245\":2,\"3246\":14,\"3250\":1,\"3256\":1,\"3260\":1,\"3262\":5,\"3263\":1,\"3264\":1,\"3266\":4,\"3271\":2,\"3275\":2}}],[\"rd\",{\"1\":{\"3282\":1}}],[\"rdb命令可以查看该信息\",{\"1\":{\"171\":1}}],[\"rdb和\",{\"1\":{\"142\":1}}],[\"rdb与aof的选择实际上是在做一种权衡\",{\"1\":{\"142\":1}}],[\"rdb与aof的选择之惑\",{\"1\":{\"142\":1}}],[\"rdb与aof应用场景\",{\"0\":{\"142\":1}}],[\"rdb与aof对比\",{\"0\":{\"141\":1}}],[\"rdb\",{\"1\":{\"141\":1,\"193\":2,\"1788\":1}}],[\"rdb方式无论是执行指令还是利用配置\",{\"1\":{\"138\":1}}],[\"rdb缺点\",{\"1\":{\"138\":1}}],[\"rdb恢复数据的速度要比aof快很多\",{\"1\":{\"138\":1}}],[\"rdb内部存储的是redis在某个时间点的数据快照\",{\"1\":{\"138\":1}}],[\"rdb是一个紧凑压缩的二进制文件\",{\"1\":{\"138\":1}}],[\"rdb优点\",{\"1\":{\"138\":1}}],[\"rdb启动方式3\",{\"1\":{\"138\":1}}],[\"r++\",{\"1\":{\"2327\":3}}],[\"rld\",{\"1\":{\"2196\":1}}],[\"r风格\",{\"1\":{\"2033\":1}}],[\"rbac\",{\"1\":{\"2012\":1,\"3276\":2}}],[\"rbrollback\",{\"1\":{\"125\":2}}],[\"r运行队列达到80\",{\"1\":{\"1887\":1}}],[\"rkb\",{\"1\":{\"1884\":1}}],[\"r=运行\",{\"1\":{\"1882\":1}}],[\"rn|head\",{\"1\":{\"1881\":1}}],[\"ruser\",{\"1\":{\"1882\":1}}],[\"rule\",{\"0\":{\"1665\":1}}],[\"rules\",{\"1\":{\"1648\":1,\"1649\":1,\"1650\":1,\"1685\":1,\"1688\":1,\"1713\":1}}],[\"ruler\",{\"1\":{\"1638\":1}}],[\"runs\",{\"1\":{\"2020\":1}}],[\"runnablethread\",{\"1\":{\"592\":2}}],[\"runnable\",{\"1\":{\"537\":2,\"552\":4,\"592\":2,\"605\":1,\"609\":1,\"675\":1,\"677\":1,\"2328\":1,\"2466\":2,\"2467\":1,\"2524\":2,\"2921\":4}}],[\"running\",{\"1\":{\"112\":1,\"122\":1,\"125\":3,\"592\":2,\"3268\":1}}],[\"runtimeexception\",{\"1\":{\"283\":2,\"287\":3,\"441\":1,\"544\":1,\"1250\":2,\"1254\":2,\"2925\":1,\"2936\":1,\"2993\":1,\"2999\":1,\"3005\":3,\"3050\":1}}],[\"runtime\",{\"0\":{\"1667\":1},\"1\":{\"267\":1,\"417\":1,\"423\":1,\"533\":1,\"694\":6,\"925\":1,\"938\":1,\"1064\":2,\"1065\":1,\"1068\":1,\"1069\":2,\"1077\":1,\"1078\":1,\"1111\":1,\"1660\":1,\"2921\":1,\"3002\":1,\"3003\":3,\"3005\":1,\"3135\":2,\"3137\":1,\"3140\":1,\"3141\":2,\"3149\":1,\"3153\":1,\"3154\":1,\"3170\":2,\"3225\":1,\"3240\":1}}],[\"runid将发生变化\",{\"1\":{\"171\":1}}],[\"runid\",{\"1\":{\"167\":1,\"182\":1}}],[\"run\",{\"0\":{\"1669\":1},\"1\":{\"167\":1,\"216\":1,\"219\":2,\"222\":1,\"226\":1,\"234\":2,\"239\":1,\"242\":1,\"255\":1,\"392\":1,\"592\":2,\"1512\":1,\"1518\":1,\"1526\":2,\"1529\":2,\"1530\":2,\"1535\":2,\"1548\":1,\"1569\":2,\"1577\":1,\"1578\":4,\"1590\":1,\"1595\":2,\"1600\":1,\"1606\":1,\"1643\":1,\"1644\":2,\"1646\":1,\"1697\":1,\"1764\":1,\"2020\":3,\"2357\":1,\"2466\":2,\"2467\":2,\"2921\":3,\"3245\":5,\"3246\":13,\"3257\":1,\"3271\":1,\"3273\":10}}],[\"rf\",{\"1\":{\"1610\":1,\"1634\":9,\"1638\":9,\"1667\":1,\"1671\":1,\"1675\":9,\"1741\":1,\"1778\":2,\"1785\":1,\"3246\":1}}],[\"ri\",{\"1\":{\"3268\":1}}],[\"ringbuffer\",{\"1\":{\"3240\":5}}],[\"ringbuffer<sipmessageevent>\",{\"1\":{\"3240\":1}}],[\"ringingresponse\",{\"1\":{\"3208\":2}}],[\"ringing响应\",{\"1\":{\"3208\":1}}],[\"ringing表示被叫振铃\",{\"1\":{\"3196\":1}}],[\"ringing\",{\"1\":{\"3188\":1}}],[\"riskyoperation\",{\"1\":{\"2935\":2,\"2959\":2}}],[\"risks\",{\"1\":{\"1578\":1}}],[\"rightof\",{\"1\":{\"2656\":2}}],[\"rightshift\",{\"1\":{\"2112\":1}}],[\"rights\",{\"1\":{\"1578\":1}}],[\"right\",{\"1\":{\"20\":3,\"1161\":5,\"1162\":7,\"1164\":5,\"1165\":8,\"1677\":1,\"2207\":5,\"2654\":1,\"2655\":3,\"2657\":9,\"2710\":4,\"2727\":7}}],[\"r8hg2xlza\",{\"1\":{\"1527\":1}}],[\"rs=\",{\"1\":{\"1872\":1}}],[\"rs\",{\"1\":{\"1764\":12,\"3000\":6}}],[\"rsvqcf\",{\"1\":{\"1650\":1,\"1713\":1}}],[\"rset协议\",{\"1\":{\"1538\":1}}],[\"rsyslog\",{\"1\":{\"1525\":1}}],[\"rsyncd\",{\"1\":{\"1503\":11}}],[\"rsync默认端口\",{\"1\":{\"1503\":1}}],[\"rsync可以作为一个服务器\",{\"1\":{\"1503\":1}}],[\"rsync具有本地文件拷贝功能\",{\"1\":{\"1501\":1}}],[\"rsync\",{\"1\":{\"1501\":3,\"1502\":2,\"1503\":13,\"1504\":3,\"1667\":1}}],[\"rsync安装便捷\",{\"1\":{\"1501\":1}}],[\"rsync是unix系统下的一个数据备份工具\",{\"1\":{\"1501\":1}}],[\"rsync定时同步+异地备份\",{\"0\":{\"1501\":1}}],[\"rsh\",{\"1\":{\"1501\":1}}],[\"rsa2048\",{\"1\":{\"997\":2}}],[\"rsa\",{\"1\":{\"115\":1,\"116\":2,\"1841\":2,\"3237\":1}}],[\"rc\",{\"1\":{\"1503\":1}}],[\"rcvd\",{\"1\":{\"3282\":1}}],[\"rcvd状态\",{\"1\":{\"1311\":1}}],[\"rcvbuf\",{\"1\":{\"1347\":1,\"3091\":1}}],[\"rcvwindow\",{\"1\":{\"1312\":1}}],[\"rc4流密码\",{\"1\":{\"483\":1}}],[\"rtcp\",{\"1\":{\"3176\":1,\"3220\":1}}],[\"rtcp协议传输\",{\"1\":{\"3175\":1}}],[\"rtcp协议处理\",{\"1\":{\"1099\":1}}],[\"rt\",{\"1\":{\"1731\":1}}],[\"rtp\",{\"1\":{\"1092\":1,\"3176\":1,\"3180\":1,\"3188\":1,\"3190\":1,\"3220\":1}}],[\"rxjava\",{\"1\":{\"571\":1}}],[\"rpm相关\",{\"0\":{\"1840\":1},\"1\":{\"1835\":1}}],[\"rpm2html\",{\"1\":{\"1636\":1}}],[\"rpmfind\",{\"1\":{\"1636\":1}}],[\"rpms\",{\"1\":{\"1480\":1,\"1481\":3}}],[\"rpm安装\",{\"0\":{\"1479\":1}}],[\"rpm\",{\"0\":{\"1481\":1},\"1\":{\"1419\":1,\"1420\":4,\"1474\":4,\"1480\":1,\"1481\":3,\"1482\":6,\"1483\":1,\"1498\":1,\"1499\":1,\"1504\":1,\"1580\":2,\"1581\":2,\"1582\":1,\"1583\":10,\"1636\":2,\"1723\":1,\"1724\":4,\"1765\":1,\"1767\":1,\"1768\":1,\"1769\":2,\"1770\":2,\"1778\":2,\"1840\":1,\"1904\":4,\"3273\":2}}],[\"rpc框架\",{\"1\":{\"1347\":1}}],[\"rpop\",{\"1\":{\"202\":1}}],[\"rpush\",{\"1\":{\"202\":1}}],[\"rmi流量\",{\"1\":{\"3107\":1}}],[\"rmi\",{\"1\":{\"1801\":1,\"3245\":2}}],[\"rmqconsole\",{\"1\":{\"250\":1}}],[\"rmqbroker\",{\"1\":{\"250\":1}}],[\"rmqnamesrv\",{\"1\":{\"250\":1}}],[\"rmq\",{\"1\":{\"248\":1}}],[\"rm\",{\"1\":{\"241\":1,\"265\":1,\"1610\":1,\"1634\":9,\"1638\":9,\"1667\":1,\"1671\":1,\"1675\":9,\"1741\":1,\"1778\":2,\"1873\":2,\"3245\":2,\"3246\":6,\"3249\":1,\"3250\":2,\"3275\":1}}],[\"rmerr\",{\"1\":{\"125\":2}}],[\"rmfail\",{\"1\":{\"125\":2}}],[\"rmdir\",{\"1\":{\"125\":2}}],[\"raf\",{\"1\":{\"2849\":3}}],[\"radio\",{\"1\":{\"1459\":2,\"1464\":2}}],[\"radius\",{\"1\":{\"1209\":3,\"2742\":7,\"2808\":6}}],[\"race\",{\"1\":{\"1165\":1}}],[\"rainbow\",{\"0\":{\"299\":1}}],[\"raid\",{\"1\":{\"125\":1}}],[\"rawtypes\",{\"1\":{\"2601\":1}}],[\"rawlist\",{\"1\":{\"1301\":2}}],[\"raw\",{\"1\":{\"264\":3,\"3034\":1,\"3276\":1}}],[\"rabbitmq\",{\"1\":{\"253\":1,\"254\":1,\"255\":3,\"256\":2,\"2010\":1}}],[\"ratio\",{\"1\":{\"193\":1}}],[\"rate=1r\",{\"1\":{\"1395\":1,\"1396\":1}}],[\"rate\",{\"1\":{\"193\":1,\"1412\":1,\"3109\":1}}],[\"ratelimiter\",{\"1\":{\"130\":1}}],[\"rand\",{\"1\":{\"1764\":1}}],[\"randomaccessfile\",{\"1\":{\"2849\":3}}],[\"randomaccessfile或nio的filechannel定位写入\",{\"1\":{\"1238\":1}}],[\"randomaccess等多个专门接口\",{\"1\":{\"2446\":1}}],[\"randomuuid\",{\"1\":{\"1962\":1,\"3215\":1}}],[\"randomnum\",{\"1\":{\"538\":1}}],[\"random\",{\"1\":{\"157\":2,\"450\":1,\"538\":1,\"3215\":5}}],[\"rancher访问\",{\"0\":{\"3272\":1}}],[\"rancherserver\",{\"1\":{\"3265\":1,\"3266\":1,\"3267\":1,\"3271\":4}}],[\"rancher容器云管理平台\",{\"0\":{\"3264\":1}}],[\"rancher\",{\"0\":{\"3338\":1},\"1\":{\"1626\":1,\"1715\":1,\"3271\":11,\"3273\":8}}],[\"rangecheck\",{\"1\":{\"2439\":3,\"2440\":1}}],[\"rangecheckforadd\",{\"1\":{\"2437\":1,\"2439\":1}}],[\"rangecopy\",{\"1\":{\"2151\":2}}],[\"range\",{\"1\":{\"125\":6,\"288\":2,\"2452\":1,\"3003\":7}}],[\"rwo\",{\"1\":{\"3278\":2}}],[\"rwxr\",{\"1\":{\"1586\":3}}],[\"rwlock\",{\"1\":{\"643\":3,\"2356\":3,\"2697\":3}}],[\"rw\",{\"1\":{\"115\":8,\"2849\":1,\"3275\":1}}],[\"ro\",{\"1\":{\"3275\":1}}],[\"robin\",{\"1\":{\"3086\":2}}],[\"rotateright\",{\"1\":{\"2656\":2,\"2657\":1}}],[\"rotateleft\",{\"1\":{\"2656\":2,\"2657\":1}}],[\"rounds\",{\"1\":{\"2327\":8}}],[\"round\",{\"1\":{\"1833\":8,\"3086\":2}}],[\"roundenv\",{\"1\":{\"1087\":2,\"3147\":2,\"3162\":2}}],[\"roundenvironment\",{\"1\":{\"1087\":1,\"3147\":1,\"3162\":1}}],[\"routingtable\",{\"1\":{\"3212\":8}}],[\"routine\",{\"1\":{\"125\":5}}],[\"routine权限\",{\"1\":{\"125\":1}}],[\"routemessage\",{\"1\":{\"3240\":1}}],[\"routeheaders\",{\"1\":{\"3212\":4}}],[\"routeheader\",{\"1\":{\"3212\":6}}],[\"route头域\",{\"1\":{\"3211\":2}}],[\"route\",{\"1\":{\"122\":1,\"1687\":2}}],[\"rod\",{\"1\":{\"312\":1}}],[\"rocketbot以及告警\",{\"1\":{\"1536\":1}}],[\"rocketmq命令\",{\"0\":{\"3316\":1}}],[\"rocketmq常用命令\",{\"0\":{\"1834\":1}}],[\"rocketmq\",{\"1\":{\"247\":1,\"250\":12,\"1347\":1}}],[\"rockconstant\",{\"1\":{\"279\":3}}],[\"rock\",{\"1\":{\"279\":2}}],[\"rolled\",{\"1\":{\"3005\":1}}],[\"rollingupdate\",{\"1\":{\"1648\":2,\"1649\":2,\"1650\":20,\"1661\":2,\"1685\":2,\"1688\":2,\"1713\":22}}],[\"rollingpolicy>\",{\"1\":{\"1564\":1,\"2072\":1}}],[\"rollingfileappender\",{\"1\":{\"1564\":1,\"2072\":1}}],[\"rolling\",{\"1\":{\"1564\":2,\"2072\":3}}],[\"rollout\",{\"1\":{\"280\":8}}],[\"rollbackfor\",{\"1\":{\"3160\":1}}],[\"rollback\",{\"1\":{\"125\":2,\"3005\":1}}],[\"rolegroups\",{\"1\":{\"1633\":3,\"1637\":3,\"1638\":1,\"1677\":3}}],[\"role>\",{\"1\":{\"999\":2}}],[\"role`\",{\"1\":{\"232\":1}}],[\"rolename\",{\"1\":{\"81\":1}}],[\"role\",{\"1\":{\"81\":2,\"223\":1,\"232\":3,\"1575\":1,\"1638\":3,\"1642\":2,\"1684\":8,\"1736\":1,\"1737\":2,\"3052\":1,\"3159\":1}}],[\"roles>\",{\"1\":{\"999\":1}}],[\"roles\",{\"1\":{\"81\":2,\"223\":1,\"232\":1,\"451\":2,\"1560\":1,\"1660\":2,\"1684\":2,\"1736\":1,\"1737\":2,\"3273\":1}}],[\"rosterusers\",{\"1\":{\"122\":1}}],[\"rostergroups\",{\"1\":{\"122\":1}}],[\"roster\",{\"1\":{\"122\":1}}],[\"room\",{\"1\":{\"122\":6}}],[\"root目录下已经没有redis\",{\"1\":{\"1783\":1}}],[\"root目录下的redis\",{\"1\":{\"1783\":1}}],[\"root目录下创建nginx目录用于存储nginx数据信息\",{\"1\":{\"1595\":1}}],[\"root目录下创建tomcat目录用于存储tomcat数据信息\",{\"1\":{\"1590\":1}}],[\"root最高权限\",{\"1\":{\"1737\":1}}],[\"roots出发\",{\"1\":{\"1149\":1}}],[\"roots直接关联的对象\",{\"1\":{\"777\":1}}],[\"roots包括\",{\"1\":{\"762\":1}}],[\"roots\",{\"1\":{\"762\":1}}],[\"root>\",{\"1\":{\"115\":1,\"1564\":1,\"3102\":1}}],[\"root\",{\"1\":{\"115\":1,\"121\":1,\"123\":1,\"216\":2,\"226\":1,\"227\":1,\"228\":3,\"229\":1,\"367\":1,\"404\":1,\"1379\":1,\"1384\":1,\"1385\":2,\"1389\":2,\"1390\":1,\"1393\":2,\"1402\":1,\"1412\":1,\"1416\":1,\"1417\":2,\"1478\":2,\"1483\":1,\"1484\":3,\"1494\":1,\"1495\":3,\"1497\":1,\"1498\":1,\"1499\":1,\"1502\":1,\"1503\":6,\"1504\":6,\"1513\":1,\"1516\":1,\"1527\":1,\"1577\":3,\"1578\":7,\"1586\":8,\"1638\":3,\"1644\":1,\"1648\":1,\"1649\":1,\"1667\":4,\"1685\":1,\"1688\":1,\"1721\":1,\"1736\":5,\"1737\":3,\"1764\":2,\"1773\":1,\"1774\":1,\"1775\":4,\"1783\":1,\"1813\":1,\"1817\":1,\"1819\":4,\"1821\":2,\"1855\":1,\"1907\":1,\"1920\":2,\"2648\":1,\"2655\":2,\"2656\":2,\"2657\":2,\"3246\":1,\"3266\":7,\"3271\":4,\"3273\":13,\"3275\":12,\"3276\":9,\"3278\":3,\"3282\":3}}],[\"row\",{\"1\":{\"121\":1,\"125\":8,\"2170\":2}}],[\"rowsize\",{\"1\":{\"125\":1}}],[\"rows\",{\"1\":{\"113\":1,\"125\":2,\"2173\":3,\"2174\":3,\"3282\":1}}],[\"reuseaddr参数允许端口复用\",{\"1\":{\"3069\":1}}],[\"rewind\",{\"1\":{\"2885\":1,\"2914\":1}}],[\"rewrite全局变量是什么\",{\"0\":{\"1412\":1}}],[\"rewrite\",{\"1\":{\"216\":1,\"1397\":1,\"1417\":1}}],[\"reids\",{\"1\":{\"1610\":1}}],[\"reboot\",{\"1\":{\"1478\":1,\"1484\":1,\"1495\":1}}],[\"rebuildselector\",{\"1\":{\"1237\":1}}],[\"rebuild\",{\"1\":{\"125\":1}}],[\"remark`\",{\"1\":{\"1687\":3}}],[\"remaining\",{\"1\":{\"1228\":1,\"1238\":1,\"1315\":1,\"1324\":1,\"1338\":2,\"2914\":1,\"2916\":1,\"2921\":2}}],[\"remotetag\",{\"1\":{\"3209\":1}}],[\"remoteserviceexception\",{\"1\":{\"2960\":1}}],[\"remote=true\",{\"1\":{\"1569\":1}}],[\"remote\",{\"1\":{\"216\":1,\"1395\":1,\"1396\":1,\"1397\":1}}],[\"removeheader\",{\"1\":{\"3212\":1}}],[\"remove方法实现\",{\"0\":{\"2630\":1}}],[\"removenode\",{\"1\":{\"2628\":1}}],[\"removeelementat\",{\"1\":{\"2551\":1}}],[\"removeeldestentry\",{\"1\":{\"2427\":1,\"2628\":1,\"2632\":1,\"2642\":1}}],[\"remove操作都是o\",{\"1\":{\"2484\":1}}],[\"remove时使用无效索引导致indexoutofboundsexception\",{\"1\":{\"2450\":1}}],[\"remove等\",{\"1\":{\"2336\":1,\"2395\":1,\"2444\":1}}],[\"removelast\",{\"1\":{\"2319\":1,\"2327\":3,\"2468\":1,\"2497\":1,\"2512\":1}}],[\"removefirst\",{\"1\":{\"2319\":1,\"2468\":1,\"2497\":1}}],[\"removeall\",{\"1\":{\"2314\":1,\"2372\":2,\"2434\":1}}],[\"removeclass\",{\"1\":{\"1463\":2,\"1465\":1}}],[\"removecachemapbyprefixkey\",{\"1\":{\"283\":1}}],[\"removecachemapbykey\",{\"1\":{\"283\":1}}],[\"removeif\",{\"1\":{\"283\":1,\"1198\":1,\"2320\":1,\"2329\":1,\"3215\":1}}],[\"removed\",{\"1\":{\"119\":1}}],[\"remove\",{\"1\":{\"119\":1,\"125\":1,\"283\":1,\"1190\":2,\"1228\":1,\"1315\":1,\"1324\":1,\"1462\":2,\"1465\":1,\"1499\":2,\"1535\":1,\"1580\":1,\"1610\":2,\"1671\":2,\"1675\":1,\"1741\":2,\"1764\":1,\"1765\":4,\"1778\":1,\"1926\":1,\"1928\":1,\"2161\":1,\"2314\":2,\"2324\":2,\"2327\":2,\"2331\":1,\"2340\":3,\"2349\":1,\"2358\":1,\"2369\":1,\"2370\":1,\"2382\":2,\"2392\":2,\"2407\":1,\"2409\":1,\"2420\":3,\"2440\":2,\"2441\":2,\"2448\":3,\"2462\":1,\"2496\":2,\"2498\":3,\"2506\":1,\"2507\":5,\"2512\":6,\"2525\":2,\"2544\":2,\"2588\":1,\"2602\":2,\"2631\":2,\"2688\":1,\"2712\":4,\"2916\":1,\"2921\":2,\"3007\":1,\"3079\":1,\"3086\":2,\"3118\":1,\"3170\":1,\"3208\":1}}],[\"reviewdocument\",{\"1\":{\"1975\":1}}],[\"reviewers\",{\"1\":{\"1975\":6}}],[\"revisionhistorylimit\",{\"1\":{\"1661\":1,\"1698\":1}}],[\"revision\",{\"1\":{\"1661\":1,\"1698\":1}}],[\"reversearray\",{\"1\":{\"2727\":1}}],[\"reversed\",{\"1\":{\"2408\":1}}],[\"reverseorder\",{\"1\":{\"2326\":1}}],[\"reverse2\",{\"1\":{\"2207\":1}}],[\"reverse1\",{\"1\":{\"2207\":1}}],[\"reverse\",{\"1\":{\"1164\":1,\"1467\":2,\"2207\":1,\"2265\":1}}],[\"reversewithrecursion\",{\"1\":{\"1164\":3}}],[\"reversewithstringbuilder\",{\"1\":{\"1164\":2}}],[\"reversewithchararray\",{\"1\":{\"1164\":2}}],[\"revoke\",{\"1\":{\"125\":2}}],[\"revoke命令\",{\"1\":{\"125\":1}}],[\"reload\",{\"1\":{\"1402\":1,\"1417\":1,\"1424\":1,\"1428\":1,\"1503\":1,\"1504\":1,\"1615\":1,\"1620\":1,\"1621\":1,\"1667\":1,\"1675\":1,\"1746\":1,\"1752\":1,\"1753\":1,\"1803\":1,\"1923\":1}}],[\"releases\",{\"1\":{\"1623\":1,\"1626\":1,\"1635\":2,\"1714\":2,\"1715\":1,\"1747\":1,\"1755\":2,\"1781\":1,\"3100\":1,\"3246\":2,\"3248\":1}}],[\"releases>\",{\"1\":{\"984\":1,\"985\":1}}],[\"releaseconnection\",{\"1\":{\"1326\":1}}],[\"releaseprofiles>\",{\"1\":{\"1003\":1}}],[\"released\",{\"1\":{\"994\":1}}],[\"release\",{\"0\":{\"1004\":1},\"1\":{\"994\":2,\"1003\":2,\"1004\":1,\"1087\":1,\"1474\":1,\"1903\":3,\"3147\":1,\"3162\":1}}],[\"relational\",{\"1\":{\"2110\":1}}],[\"relationaloperatordemo\",{\"1\":{\"2110\":1}}],[\"relation`\",{\"1\":{\"232\":1,\"1684\":1}}],[\"relation\",{\"1\":{\"122\":1,\"232\":2,\"1684\":2}}],[\"relay\",{\"1\":{\"113\":1,\"122\":1,\"125\":2}}],[\"reentrantreadwritelock\",{\"1\":{\"643\":1,\"2356\":2,\"2429\":2,\"2697\":2}}],[\"reentrantlock手动加锁\",{\"1\":{\"1197\":1}}],[\"reentrantlock是api层面的锁\",{\"1\":{\"668\":1}}],[\"reentrantlock支持中断\",{\"1\":{\"651\":1}}],[\"reentrantlock和synchronized的区别是什么\",{\"1\":{\"651\":1}}],[\"reentrantlock\",{\"0\":{\"1129\":1},\"1\":{\"642\":1,\"1125\":1,\"1129\":8,\"2282\":3,\"2456\":2,\"2513\":3,\"2544\":3}}],[\"reentrantlock实现生产者\",{\"0\":{\"642\":1}}],[\"req命令限制单个ip的请求处理频率\",{\"1\":{\"1395\":1}}],[\"req\",{\"1\":{\"1395\":4,\"1396\":2,\"1431\":5,\"1440\":5,\"1443\":6,\"1444\":6}}],[\"reqdeal\",{\"1\":{\"292\":3}}],[\"reqbody\",{\"1\":{\"285\":1}}],[\"requirenonnull\",{\"1\":{\"2054\":2}}],[\"requirement\",{\"1\":{\"1961\":1}}],[\"requirements\",{\"1\":{\"993\":1}}],[\"require\",{\"1\":{\"1369\":2,\"1370\":1,\"1371\":1,\"1372\":1,\"1373\":1}}],[\"required=true\",{\"1\":{\"1644\":1}}],[\"required\",{\"1\":{\"359\":1,\"1423\":1,\"1427\":1,\"1677\":1,\"1787\":2,\"3154\":1}}],[\"requirepass\",{\"1\":{\"165\":3,\"219\":5,\"1780\":1,\"1787\":5}}],[\"requirespermission注解标记需要权限的方法\",{\"1\":{\"3154\":1}}],[\"requirespermission\",{\"1\":{\"1072\":1,\"3154\":8}}],[\"requires\",{\"1\":{\"125\":2,\"359\":1,\"490\":2}}],[\"requested\",{\"1\":{\"3282\":1}}],[\"requestevent\",{\"1\":{\"1094\":2,\"3190\":2,\"3208\":6,\"3209\":1,\"3217\":5,\"3218\":6}}],[\"requestdata\",{\"1\":{\"2921\":3}}],[\"requestmatchers\",{\"1\":{\"2012\":3}}],[\"requestmapping等\",{\"1\":{\"386\":1}}],[\"requestmapping\",{\"1\":{\"378\":1,\"380\":1,\"381\":1,\"392\":1,\"407\":1,\"427\":1,\"428\":1,\"434\":2,\"452\":2,\"2007\":1}}],[\"requests\",{\"1\":{\"1698\":1}}],[\"requeststring\",{\"1\":{\"1095\":2}}],[\"requestid\",{\"1\":{\"1249\":8}}],[\"requestlines\",{\"1\":{\"1324\":2,\"2921\":2}}],[\"requestline\",{\"1\":{\"1095\":5,\"3070\":1}}],[\"requesturi\",{\"1\":{\"1094\":2,\"1095\":2,\"3190\":2,\"3199\":2,\"3205\":1,\"3212\":2}}],[\"requestutil\",{\"1\":{\"286\":1}}],[\"requestbody\",{\"1\":{\"381\":2,\"427\":2,\"428\":1,\"456\":1,\"471\":2,\"2007\":1,\"2065\":1}}],[\"requestcontextholder\",{\"1\":{\"286\":2}}],[\"requestparam\",{\"1\":{\"270\":2,\"434\":1}}],[\"request\",{\"1\":{\"125\":1,\"286\":2,\"327\":1,\"430\":2,\"434\":1,\"456\":3,\"471\":3,\"491\":2,\"529\":2,\"1005\":1,\"1094\":3,\"1095\":5,\"1324\":2,\"2007\":3,\"2020\":1,\"2024\":2,\"2047\":4,\"2065\":2,\"2068\":3,\"2921\":2,\"2955\":5,\"3103\":1,\"3107\":1,\"3179\":1,\"3190\":3,\"3199\":2,\"3205\":13,\"3208\":17,\"3209\":3,\"3211\":1,\"3212\":7,\"3215\":8,\"3217\":1,\"3218\":6,\"3222\":2,\"3224\":1,\"3232\":1,\"3238\":4}}],[\"rejectedexecutionhandler\",{\"1\":{\"622\":1,\"2539\":1}}],[\"rejected\",{\"1\":{\"193\":1}}],[\"reorg\",{\"1\":{\"125\":3}}],[\"reopen\",{\"1\":{\"125\":1}}],[\"retainall\",{\"1\":{\"2314\":1,\"2372\":2,\"2434\":1}}],[\"retrans\",{\"1\":{\"1886\":1}}],[\"retrieve\",{\"1\":{\"1764\":1}}],[\"retry\",{\"1\":{\"1687\":3,\"1999\":1}}],[\"retrycount++\",{\"1\":{\"1337\":1}}],[\"retrycount\",{\"1\":{\"1337\":4}}],[\"retentionpolicy\",{\"1\":{\"267\":1,\"417\":1,\"423\":1,\"1064\":1,\"1068\":1,\"1069\":2,\"1077\":2,\"1078\":1,\"1087\":1,\"3002\":1,\"3003\":3,\"3005\":1,\"3135\":1,\"3137\":1,\"3140\":1,\"3141\":2,\"3149\":1,\"3154\":1,\"3162\":1,\"3170\":2}}],[\"retention\",{\"1\":{\"267\":1,\"417\":1,\"423\":1,\"1063\":1,\"1064\":2,\"1068\":1,\"1069\":2,\"1077\":2,\"1078\":1,\"1087\":1,\"1530\":1,\"1535\":1,\"3002\":1,\"3003\":3,\"3005\":1,\"3135\":2,\"3137\":1,\"3140\":1,\"3141\":2,\"3149\":1,\"3154\":1,\"3162\":1,\"3170\":2}}],[\"retset\",{\"1\":{\"125\":1}}],[\"returnobject\",{\"1\":{\"3241\":1}}],[\"returnconnection\",{\"1\":{\"3241\":1}}],[\"returned\",{\"1\":{\"2441\":1}}],[\"returndemo\",{\"1\":{\"2134\":1}}],[\"returnsdiscountedprice\",{\"1\":{\"2046\":1}}],[\"returning\",{\"1\":{\"267\":1,\"336\":1}}],[\"return\",{\"0\":{\"2134\":1},\"1\":{\"59\":1,\"89\":1,\"267\":2,\"269\":1,\"270\":1,\"279\":10,\"281\":4,\"282\":2,\"283\":3,\"284\":2,\"286\":7,\"287\":2,\"289\":12,\"290\":3,\"292\":3,\"293\":1,\"307\":5,\"338\":1,\"353\":2,\"366\":1,\"367\":2,\"368\":1,\"380\":2,\"381\":4,\"382\":1,\"392\":1,\"407\":1,\"423\":1,\"427\":4,\"428\":1,\"429\":2,\"430\":2,\"434\":1,\"438\":6,\"439\":1,\"440\":4,\"445\":2,\"451\":1,\"452\":2,\"456\":6,\"469\":1,\"491\":1,\"501\":3,\"521\":1,\"527\":1,\"537\":1,\"574\":1,\"580\":1,\"592\":1,\"593\":1,\"613\":1,\"642\":1,\"643\":1,\"659\":1,\"663\":1,\"729\":2,\"746\":2,\"747\":2,\"1038\":1,\"1044\":1,\"1056\":2,\"1068\":2,\"1081\":1,\"1087\":1,\"1104\":1,\"1125\":1,\"1161\":5,\"1162\":3,\"1164\":9,\"1165\":4,\"1166\":4,\"1170\":8,\"1181\":5,\"1182\":7,\"1203\":2,\"1205\":2,\"1208\":1,\"1209\":6,\"1225\":1,\"1228\":1,\"1238\":1,\"1246\":3,\"1249\":3,\"1250\":2,\"1253\":3,\"1267\":1,\"1270\":2,\"1290\":2,\"1294\":2,\"1303\":1,\"1325\":2,\"1326\":9,\"1393\":2,\"1410\":1,\"1411\":1,\"1440\":1,\"1443\":1,\"1948\":2,\"1949\":2,\"1962\":4,\"1974\":2,\"1975\":2,\"1987\":2,\"1988\":2,\"2007\":2,\"2012\":1,\"2027\":2,\"2035\":1,\"2051\":2,\"2054\":1,\"2058\":2,\"2061\":2,\"2062\":1,\"2065\":1,\"2068\":1,\"2090\":1,\"2091\":4,\"2134\":1,\"2161\":1,\"2173\":1,\"2174\":1,\"2183\":1,\"2207\":4,\"2224\":1,\"2228\":4,\"2232\":1,\"2234\":3,\"2240\":1,\"2268\":2,\"2272\":1,\"2281\":1,\"2282\":1,\"2291\":1,\"2294\":4,\"2295\":1,\"2296\":2,\"2318\":1,\"2327\":4,\"2328\":1,\"2329\":5,\"2356\":8,\"2388\":1,\"2392\":2,\"2409\":3,\"2427\":1,\"2429\":2,\"2437\":5,\"2438\":3,\"2439\":8,\"2440\":6,\"2441\":7,\"2456\":3,\"2467\":2,\"2485\":3,\"2494\":4,\"2495\":9,\"2496\":8,\"2497\":12,\"2498\":22,\"2512\":9,\"2513\":2,\"2525\":3,\"2544\":6,\"2551\":4,\"2552\":4,\"2554\":4,\"2573\":2,\"2574\":3,\"2577\":2,\"2599\":4,\"2600\":4,\"2601\":3,\"2602\":6,\"2605\":4,\"2612\":1,\"2628\":1,\"2629\":3,\"2631\":6,\"2632\":2,\"2642\":1,\"2655\":5,\"2658\":8,\"2660\":2,\"2669\":1,\"2680\":2,\"2682\":4,\"2683\":3,\"2684\":3,\"2685\":1,\"2697\":2,\"2708\":2,\"2709\":1,\"2710\":4,\"2711\":8,\"2715\":2,\"2716\":3,\"2721\":3,\"2723\":2,\"2724\":3,\"2727\":1,\"2733\":1,\"2734\":3,\"2741\":4,\"2742\":4,\"2745\":1,\"2750\":2,\"2759\":2,\"2765\":1,\"2779\":3,\"2784\":1,\"2786\":3,\"2795\":1,\"2798\":1,\"2808\":1,\"2821\":2,\"2849\":1,\"2873\":4,\"2916\":1,\"2921\":2,\"2938\":2,\"2942\":4,\"2949\":1,\"2951\":1,\"2952\":1,\"2955\":1,\"2956\":3,\"2959\":3,\"2960\":2,\"2969\":2,\"2970\":3,\"2983\":2,\"2986\":2,\"2987\":1,\"2999\":3,\"3000\":3,\"3002\":7,\"3005\":4,\"3007\":10,\"3010\":1,\"3019\":1,\"3021\":2,\"3023\":2,\"3024\":2,\"3025\":1,\"3034\":2,\"3036\":4,\"3039\":1,\"3041\":1,\"3050\":1,\"3052\":1,\"3086\":3,\"3087\":2,\"3118\":1,\"3120\":1,\"3136\":1,\"3147\":1,\"3150\":2,\"3154\":1,\"3160\":1,\"3162\":1,\"3170\":4,\"3190\":1,\"3205\":4,\"3206\":6,\"3209\":3,\"3212\":6,\"3214\":2,\"3215\":12,\"3222\":1,\"3224\":1,\"3225\":1,\"3235\":1,\"3237\":1,\"3238\":1,\"3241\":1}}],[\"red方法\",{\"1\":{\"3109\":1}}],[\"redirect\",{\"0\":{\"3185\":1}}],[\"redirectsystemoutexample\",{\"1\":{\"2909\":1}}],[\"redistemplate\",{\"1\":{\"3235\":4}}],[\"redistemplate<string\",{\"1\":{\"3235\":1}}],[\"redistribute\",{\"1\":{\"1578\":1}}],[\"redis下有一个redis\",{\"1\":{\"1787\":1}}],[\"redis默认端口是6379\",{\"1\":{\"1786\":1}}],[\"redis到这里已经启动完毕\",{\"1\":{\"1786\":1}}],[\"redis目录\",{\"1\":{\"1783\":1,\"1784\":1,\"1785\":1}}],[\"redis版本\",{\"1\":{\"1780\":1}}],[\"redis部署\",{\"0\":{\"1689\":1}}],[\"redisvolumsize\",{\"1\":{\"1638\":1}}],[\"redis端口\",{\"1\":{\"1367\":1}}],[\"redis也支持小写命令\",{\"1\":{\"212\":1}}],[\"redis的管道技术允许客户端一次性发送多个命令\",{\"1\":{\"212\":1}}],[\"redis的惰性删除策略是指\",{\"1\":{\"212\":1}}],[\"redis的命令通常是大写的\",{\"1\":{\"212\":1}}],[\"redis的命令设计遵循了以下原则\",{\"1\":{\"210\":1}}],[\"redis的事务不是原子的\",{\"1\":{\"211\":1}}],[\"redis的众多版本中未进行rdb文件格式的版本统一\",{\"1\":{\"138\":1}}],[\"redis是一个基于内存的键值对数据库\",{\"1\":{\"195\":1}}],[\"redis是一种内存级数据库\",{\"1\":{\"147\":1}}],[\"redis命令参考\",{\"0\":{\"194\":1}}],[\"redislive\",{\"1\":{\"193\":1}}],[\"redis获取到null数据未进行持久化\",{\"1\":{\"192\":1}}],[\"redis中的监控指标如下\",{\"1\":{\"193\":1}}],[\"redis中大面积出现未命中\",{\"1\":{\"192\":1}}],[\"redis中某个key过期\",{\"1\":{\"191\":1}}],[\"redis在短时间内发起了大量对数据库中同一数据的访问\",{\"1\":{\"191\":1}}],[\"redis内存平稳\",{\"1\":{\"191\":1,\"192\":1}}],[\"redis集群呈现崩塌\",{\"1\":{\"190\":1}}],[\"redis集群崩溃\",{\"1\":{\"190\":1}}],[\"redis服务器cpu占用激增\",{\"1\":{\"192\":1}}],[\"redis服务器cpu正常\",{\"1\":{\"191\":1}}],[\"redis服务器命中率随时间逐步降低\",{\"1\":{\"192\":1}}],[\"redis服务器无大量key过期\",{\"1\":{\"191\":1}}],[\"redis服务器资源被严重占用\",{\"1\":{\"190\":1}}],[\"redis服务器崩溃\",{\"1\":{\"190\":2}}],[\"redis大量请求被积压\",{\"1\":{\"190\":1}}],[\"redis向数据库获取数据\",{\"1\":{\"190\":1}}],[\"redis未命中\",{\"1\":{\"190\":1}}],[\"redis优先加载级别较高的热点数据\",{\"1\":{\"189\":1}}],[\"redis优先使用\",{\"1\":{\"142\":1}}],[\"redis面试题\",{\"0\":{\"187\":1}}],[\"redis提供的服务ops可以达到10万\",{\"1\":{\"183\":1}}],[\"redis4\",{\"1\":{\"157\":1}}],[\"redis要临时删除一些数据为当前指令清理存储空间\",{\"1\":{\"156\":1}}],[\"redis启动服务器初始化时\",{\"1\":{\"153\":1}}],[\"redis数据库\",{\"0\":{\"3287\":1}}],[\"redis数据删除与淘汰策略\",{\"0\":{\"145\":1}}],[\"redis数据类型\",{\"0\":{\"131\":1}}],[\"redis线程模型\",{\"0\":{\"144\":1}}],[\"redis高级\",{\"0\":{\"143\":1}}],[\"redis引入了aof重写机制压缩文件体积\",{\"1\":{\"140\":1}}],[\"redis持久化\",{\"0\":{\"136\":1}}],[\"redis存储空间\",{\"1\":{\"132\":1}}],[\"redisson\",{\"1\":{\"130\":4}}],[\"redis应用场景\",{\"0\":{\"130\":1}}],[\"redis\",{\"0\":{\"218\":1,\"1787\":1},\"1\":{\"127\":2,\"128\":8,\"129\":7,\"130\":6,\"131\":1,\"161\":1,\"165\":2,\"178\":1,\"186\":6,\"190\":1,\"193\":7,\"198\":1,\"218\":1,\"219\":15,\"304\":1,\"1598\":1,\"1599\":1,\"1600\":2,\"1601\":1,\"1638\":1,\"1678\":1,\"1682\":1,\"1692\":2,\"1694\":6,\"1780\":8,\"1781\":3,\"1782\":2,\"1783\":2,\"1784\":1,\"1785\":2,\"1786\":7,\"1787\":2,\"1788\":4,\"3246\":3}}],[\"redis介绍\",{\"0\":{\"127\":1}}],[\"redis基础\",{\"0\":{\"126\":1}}],[\"redhat\",{\"1\":{\"1903\":1,\"3282\":1}}],[\"redhat版本的cat\",{\"1\":{\"1903\":1}}],[\"red\",{\"1\":{\"1431\":1,\"1452\":3,\"1463\":1,\"1469\":1,\"1579\":1,\"2144\":1,\"2656\":8}}],[\"redefine\",{\"1\":{\"125\":1}}],[\"reducestock\",{\"1\":{\"3160\":1}}],[\"reduce\",{\"1\":{\"2007\":1}}],[\"reduced\",{\"1\":{\"125\":1}}],[\"reducefunction\",{\"1\":{\"59\":2}}],[\"reduce阶段\",{\"1\":{\"59\":1}}],[\"refused\",{\"1\":{\"1677\":1}}],[\"referer\",{\"1\":{\"1595\":1,\"1914\":1}}],[\"referencequeue<>\",{\"1\":{\"2679\":1}}],[\"referencequeue<k>\",{\"1\":{\"2679\":1,\"2680\":1}}],[\"reference\",{\"1\":{\"125\":2,\"539\":1,\"1642\":8,\"2676\":4}}],[\"referencedatatypedemo\",{\"1\":{\"2100\":1}}],[\"referenced\",{\"1\":{\"125\":4}}],[\"ref=\",{\"1\":{\"1564\":5,\"3102\":1}}],[\"reflector\",{\"1\":{\"3010\":1}}],[\"reflectpermission\",{\"1\":{\"2990\":1}}],[\"reflect包中\",{\"1\":{\"2966\":1}}],[\"reflect包下\",{\"1\":{\"1261\":1}}],[\"reflectioncachedemo\",{\"1\":{\"2993\":1}}],[\"reflection\",{\"1\":{\"1281\":1,\"2965\":1,\"2980\":2,\"2987\":2}}],[\"reflectiontime\",{\"1\":{\"1264\":2,\"2986\":2}}],[\"reflectionperformancedemo\",{\"1\":{\"1264\":1,\"2986\":3}}],[\"reflect\",{\"1\":{\"1264\":1,\"1267\":4,\"1269\":1,\"1270\":1,\"1280\":1,\"2234\":2,\"2968\":1,\"2969\":1,\"2970\":1,\"2971\":1,\"2983\":1,\"2984\":1,\"2986\":1,\"2989\":2,\"3002\":1,\"3003\":1,\"3005\":3,\"3007\":3,\"3137\":1,\"3149\":2}}],[\"reflectutil\",{\"1\":{\"289\":2}}],[\"refresh端点可以刷新配置\",{\"1\":{\"411\":1}}],[\"refresh\",{\"1\":{\"306\":9}}],[\"ref\",{\"1\":{\"125\":2,\"1139\":4,\"1564\":5,\"3102\":1}}],[\"reason\",{\"1\":{\"3278\":1}}],[\"realm\",{\"1\":{\"3215\":10,\"3238\":3}}],[\"realip\",{\"1\":{\"1779\":1}}],[\"real=0\",{\"1\":{\"774\":1}}],[\"real\",{\"1\":{\"216\":1,\"997\":1,\"1882\":1}}],[\"reactor线程仍是瓶颈\",{\"1\":{\"3121\":1}}],[\"reactor线程负责接受连接和io事件分发\",{\"1\":{\"3121\":1}}],[\"reactor线程负责事件监听和分发\",{\"1\":{\"1328\":1}}],[\"reactor服务器启动\",{\"1\":{\"2921\":1}}],[\"reactorloop\",{\"1\":{\"2921\":2}}],[\"reactorpatternexample\",{\"1\":{\"2921\":3}}],[\"reactor模式是nio编程的经典设计模式\",{\"1\":{\"3121\":1}}],[\"reactor模式是高性能网络编程的核心模式\",{\"1\":{\"1328\":1}}],[\"reactor模式和proactor模式的本质区别是什么\",{\"1\":{\"3091\":1}}],[\"reactor模式和proactor模式是两种常见的异步io设计模式\",{\"1\":{\"2921\":1}}],[\"reactor模式实现\",{\"1\":{\"2921\":1}}],[\"reactor模式组件\",{\"1\":{\"1328\":1}}],[\"reactor模式\",{\"0\":{\"1328\":1,\"3083\":1,\"3121\":1},\"1\":{\"2921\":1,\"3079\":1,\"3091\":1}}],[\"reactor等响应式库普及\",{\"1\":{\"571\":1}}],[\"reactor\",{\"1\":{\"128\":1,\"1328\":1,\"3091\":1}}],[\"reached\",{\"1\":{\"125\":1}}],[\"readfilecontent\",{\"1\":{\"2951\":1}}],[\"readfile\",{\"1\":{\"2927\":1}}],[\"readhandler\",{\"1\":{\"2921\":5}}],[\"readheavy\",{\"1\":{\"2536\":1}}],[\"readaheadlimit\",{\"1\":{\"2853\":1,\"2869\":1}}],[\"readanydatabase\",{\"1\":{\"1736\":1}}],[\"readable\",{\"1\":{\"125\":1}}],[\"readvalue\",{\"1\":{\"1439\":5,\"2960\":1}}],[\"read超时\",{\"1\":{\"1339\":1}}],[\"readdata\",{\"1\":{\"1338\":2,\"2844\":2,\"2914\":3,\"2917\":3,\"3116\":3}}],[\"readdouble\",{\"1\":{\"1222\":1,\"2845\":1}}],[\"readobject\",{\"1\":{\"1225\":1}}],[\"readonly\",{\"1\":{\"125\":1,\"1648\":2,\"1649\":1,\"1650\":20,\"1661\":1,\"1685\":2,\"1688\":1,\"1698\":1,\"1713\":22,\"3005\":9}}],[\"readboolean\",{\"1\":{\"1222\":1,\"2845\":1}}],[\"readint\",{\"1\":{\"1222\":1,\"2845\":1}}],[\"reading\",{\"1\":{\"125\":1,\"1677\":1,\"3007\":3,\"3085\":1}}],[\"readutf\",{\"1\":{\"1222\":1,\"2845\":1}}],[\"readlimit\",{\"1\":{\"2841\":1}}],[\"readline\",{\"1\":{\"1221\":1,\"1247\":2,\"1314\":1,\"2856\":1,\"2861\":2,\"2867\":1,\"2869\":1,\"2880\":1,\"2951\":1,\"3070\":1}}],[\"readlock\",{\"1\":{\"125\":1,\"643\":4,\"2356\":4,\"2429\":2,\"2697\":4}}],[\"readwithcharacterstream\",{\"1\":{\"1221\":2}}],[\"readwithbytestream\",{\"1\":{\"1221\":2}}],[\"readwritelist<e>\",{\"1\":{\"2356\":1}}],[\"readwritelock不支持锁升级\",{\"1\":{\"651\":1}}],[\"readwritelock\",{\"1\":{\"643\":1,\"2429\":3}}],[\"readwritelockexample\",{\"1\":{\"643\":1}}],[\"readwrite\",{\"1\":{\"1736\":1,\"1737\":1}}],[\"readwriteanydatabase\",{\"1\":{\"223\":1,\"1736\":1}}],[\"reader是所有输入字符流的超类\",{\"1\":{\"2853\":1}}],[\"reader抽象类\",{\"0\":{\"2853\":1}}],[\"reader\",{\"1\":{\"658\":1,\"1221\":1,\"1314\":2,\"2883\":1,\"3070\":2}}],[\"readystate\",{\"1\":{\"1431\":1,\"1432\":1}}],[\"readychannels\",{\"1\":{\"1228\":2,\"1237\":2,\"2916\":2,\"3118\":2}}],[\"ready\",{\"1\":{\"125\":1,\"1569\":1,\"1660\":6,\"2853\":1,\"3273\":3}}],[\"read\",{\"1\":{\"125\":12,\"286\":3,\"348\":3,\"729\":1,\"746\":1,\"747\":1,\"1221\":1,\"1224\":2,\"1228\":2,\"1232\":1,\"1238\":2,\"1315\":2,\"1321\":1,\"1324\":2,\"1338\":2,\"1409\":1,\"1503\":2,\"1736\":1,\"2037\":1,\"2831\":1,\"2833\":2,\"2837\":1,\"2841\":3,\"2843\":1,\"2844\":1,\"2849\":4,\"2853\":3,\"2855\":1,\"2857\":2,\"2866\":1,\"2868\":2,\"2873\":3,\"2878\":2,\"2885\":1,\"2891\":1,\"2892\":1,\"2893\":1,\"2897\":1,\"2915\":1,\"2916\":2,\"2917\":2,\"2921\":4,\"2927\":2,\"3065\":2,\"3079\":2,\"3117\":1,\"3118\":3,\"3120\":2,\"3154\":1}}],[\"rep\",{\"1\":{\"1527\":1}}],[\"repeat\",{\"1\":{\"472\":1,\"1059\":1}}],[\"repeated\",{\"1\":{\"472\":1,\"3085\":1}}],[\"repeatable标记\",{\"1\":{\"1066\":1}}],[\"repeatable\",{\"1\":{\"348\":1,\"1066\":1,\"2044\":1}}],[\"repos\",{\"1\":{\"3271\":1,\"3273\":5}}],[\"repositories\",{\"1\":{\"999\":1,\"1000\":1}}],[\"repositories>\",{\"1\":{\"984\":1,\"985\":1}}],[\"repository>\",{\"1\":{\"984\":1,\"985\":1,\"999\":1}}],[\"repository<\",{\"1\":{\"973\":1,\"984\":1,\"985\":1}}],[\"repository\",{\"1\":{\"972\":1,\"981\":1,\"982\":3,\"990\":1,\"993\":1,\"994\":1,\"995\":1,\"1000\":1,\"1667\":1,\"3049\":1}}],[\"repository目录\",{\"1\":{\"972\":1}}],[\"repository接口\",{\"1\":{\"440\":1}}],[\"reportissue\",{\"1\":{\"2027\":1}}],[\"report`\",{\"1\":{\"1687\":1}}],[\"report命令\",{\"1\":{\"456\":1}}],[\"repo1\",{\"1\":{\"1004\":1}}],[\"repo\",{\"1\":{\"975\":1,\"982\":1,\"984\":1,\"985\":1,\"1612\":2,\"1672\":2,\"1743\":2,\"3245\":2,\"3271\":2,\"3273\":5}}],[\"repair\",{\"1\":{\"125\":1}}],[\"replset=replset\",{\"1\":{\"1764\":1}}],[\"replset\",{\"1\":{\"1734\":1,\"1764\":6}}],[\"replsetname\",{\"1\":{\"1734\":1,\"1764\":1}}],[\"replaceall\",{\"1\":{\"2196\":1}}],[\"replaced3\",{\"1\":{\"2196\":1}}],[\"replaced2\",{\"1\":{\"2196\":1}}],[\"replaced1\",{\"1\":{\"2196\":1}}],[\"replace\",{\"1\":{\"289\":3,\"746\":1,\"747\":1,\"1041\":1,\"2196\":2,\"2265\":1,\"3244\":1,\"3276\":1}}],[\"replacevarfrommapmethod\",{\"1\":{\"289\":2}}],[\"replaceplaceholders\",{\"1\":{\"289\":1}}],[\"replacestrfrommap\",{\"1\":{\"289\":2}}],[\"replaceone\",{\"1\":{\"86\":1}}],[\"replid变量\",{\"1\":{\"171\":1}}],[\"replicas\",{\"1\":{\"186\":1,\"1638\":3,\"1648\":1,\"1649\":1,\"1650\":10,\"1660\":1,\"1661\":1,\"1685\":1,\"1688\":1,\"1698\":1,\"1713\":11,\"3250\":1,\"3276\":1}}],[\"replicaset=myreplicaset\",{\"1\":{\"69\":1}}],[\"replicate\",{\"1\":{\"125\":1,\"186\":1}}],[\"replication\",{\"1\":{\"100\":2,\"108\":1,\"169\":1,\"1530\":1,\"1532\":2,\"1734\":1,\"1764\":1}}],[\"replica\",{\"1\":{\"39\":1,\"1739\":1,\"1759\":1,\"1764\":1}}],[\"replconf\",{\"1\":{\"169\":1}}],[\"repl\",{\"1\":{\"166\":1,\"171\":5,\"172\":2}}],[\"renameto\",{\"1\":{\"286\":1}}],[\"rename\",{\"1\":{\"125\":1,\"199\":1,\"1829\":1}}],[\"renamecollection\",{\"1\":{\"82\":1}}],[\"reclaim\",{\"1\":{\"3278\":1}}],[\"reclaimpolicy\",{\"1\":{\"3276\":1}}],[\"receive\",{\"1\":{\"3066\":1,\"3218\":1}}],[\"receiver\",{\"1\":{\"3066\":1}}],[\"received\",{\"1\":{\"1005\":2,\"1094\":1,\"1578\":1,\"1764\":1,\"1877\":1}}],[\"recently\",{\"1\":{\"2512\":1}}],[\"recreate\",{\"1\":{\"1698\":1,\"3276\":1}}],[\"recommended\",{\"1\":{\"1578\":1}}],[\"recording\",{\"1\":{\"480\":1}}],[\"records\",{\"1\":{\"125\":2}}],[\"record\",{\"1\":{\"125\":1,\"1198\":1,\"1828\":1,\"3211\":1}}],[\"recycle\",{\"1\":{\"1347\":1}}],[\"rectangle\",{\"1\":{\"1209\":4,\"2742\":5,\"2745\":2}}],[\"recv\",{\"1\":{\"997\":1,\"1881\":1}}],[\"recursion\",{\"1\":{\"125\":2,\"3282\":1}}],[\"recursivecall\",{\"1\":{\"693\":3,\"1243\":3}}],[\"recursive\",{\"1\":{\"125\":1}}],[\"rec\",{\"1\":{\"125\":1}}],[\"reg\",{\"1\":{\"3199\":1}}],[\"register请求已发送\",{\"1\":{\"3199\":1}}],[\"registerrequest\",{\"1\":{\"3199\":4}}],[\"registerbeandefinition\",{\"1\":{\"2999\":3}}],[\"register\",{\"1\":{\"1228\":2,\"1315\":2,\"1324\":2,\"2916\":3,\"2921\":4,\"3079\":2,\"3097\":2,\"3118\":2,\"3179\":1,\"3199\":1,\"3218\":1}}],[\"registered\",{\"1\":{\"122\":1}}],[\"registraruri\",{\"1\":{\"3199\":2}}],[\"registrar\",{\"0\":{\"3184\":1}}],[\"registration\",{\"1\":{\"993\":1}}],[\"registries\",{\"1\":{\"1621\":2,\"1666\":2,\"1669\":1,\"1753\":2}}],[\"registry拉取\",{\"1\":{\"3246\":1}}],[\"registry`\",{\"1\":{\"1687\":1}}],[\"registrymirrors\",{\"1\":{\"1637\":1,\"1638\":1}}],[\"registry\",{\"1\":{\"243\":1,\"261\":4,\"280\":1,\"382\":2,\"430\":2,\"434\":2,\"1615\":1,\"1621\":2,\"1633\":1,\"1637\":1,\"1638\":2,\"1656\":1,\"1666\":2,\"1667\":1,\"1669\":1,\"1675\":1,\"1711\":1,\"1746\":1,\"1753\":2,\"3276\":1}}],[\"regexp\",{\"1\":{\"125\":1,\"2065\":1}}],[\"regarded\",{\"1\":{\"28\":1}}],[\"resumedownloadexample\",{\"1\":{\"2849\":1}}],[\"resultmap>\",{\"1\":{\"3053\":2}}],[\"results\",{\"1\":{\"3000\":3,\"3164\":1}}],[\"resultsetmetadata\",{\"1\":{\"3000\":1}}],[\"resultsetmapper\",{\"1\":{\"3000\":3}}],[\"resultset\",{\"1\":{\"3000\":3}}],[\"result3\",{\"1\":{\"544\":1}}],[\"result2\",{\"1\":{\"544\":1}}],[\"result1\",{\"1\":{\"544\":1}}],[\"resulttype=\",{\"1\":{\"439\":2}}],[\"resultcollection\",{\"1\":{\"89\":1}}],[\"result\",{\"1\":{\"58\":1,\"59\":1,\"122\":1,\"125\":1,\"267\":3,\"338\":2,\"538\":1,\"543\":1,\"592\":1,\"1055\":2,\"1056\":3,\"1068\":4,\"1151\":1,\"1162\":9,\"1238\":3,\"1243\":1,\"1246\":2,\"1250\":1,\"1267\":2,\"1270\":2,\"2062\":1,\"2079\":1,\"2115\":1,\"2173\":3,\"2174\":3,\"2183\":3,\"2202\":1,\"2221\":2,\"2240\":1,\"2257\":1,\"2266\":2,\"2281\":3,\"2574\":2,\"2723\":3,\"2724\":3,\"2970\":2,\"3000\":4,\"3002\":5,\"3005\":2,\"3041\":3,\"3087\":2,\"3120\":1,\"3164\":2,\"3166\":3,\"3170\":2}}],[\"res=code+data\",{\"1\":{\"1882\":1}}],[\"rescue\",{\"1\":{\"1478\":1,\"1484\":1,\"1495\":1}}],[\"resp\",{\"1\":{\"1431\":6,\"1440\":5,\"1443\":5,\"1444\":5}}],[\"responsestatus\",{\"1\":{\"2956\":2}}],[\"responsebody\",{\"1\":{\"2956\":3}}],[\"responsebuffer\",{\"1\":{\"1238\":2,\"1324\":2,\"2921\":2}}],[\"responsexml\",{\"1\":{\"1432\":1}}],[\"responsetext\",{\"1\":{\"1431\":1,\"1432\":1}}],[\"responseevent\",{\"1\":{\"1094\":3,\"3190\":3,\"3208\":5,\"3217\":5}}],[\"responseentity<userdto>\",{\"1\":{\"2065\":1}}],[\"responseentity<user>\",{\"1\":{\"450\":1}}],[\"responseentity<orderdto>\",{\"1\":{\"2007\":1}}],[\"responseentity<list<user>>\",{\"1\":{\"450\":1}}],[\"responseentity<errorresult>\",{\"1\":{\"429\":2}}],[\"responseentity<string>\",{\"1\":{\"285\":2}}],[\"responseentity\",{\"1\":{\"285\":2,\"429\":2,\"2007\":1,\"2065\":1}}],[\"responseentity=resttemplate\",{\"1\":{\"285\":2}}],[\"response\",{\"0\":{\"1666\":1},\"1\":{\"269\":5,\"270\":2,\"278\":1,\"286\":13,\"430\":2,\"450\":6,\"456\":2,\"471\":3,\"1094\":1,\"1095\":1,\"1104\":2,\"1238\":2,\"1315\":2,\"1324\":2,\"1569\":1,\"2916\":2,\"2921\":4,\"2960\":4,\"3065\":4,\"3070\":2,\"3117\":3,\"3179\":1,\"3190\":3,\"3205\":1,\"3208\":9,\"3209\":6,\"3215\":14,\"3217\":1,\"3222\":4,\"3224\":4,\"3232\":1,\"3238\":2}}],[\"res\",{\"1\":{\"286\":2,\"1882\":1}}],[\"restcontroller\",{\"1\":{\"378\":1,\"381\":1,\"392\":1,\"407\":1,\"427\":1,\"428\":1,\"434\":2,\"452\":2,\"456\":1,\"2007\":1}}],[\"restful\",{\"0\":{\"378\":1,\"381\":1,\"427\":1},\"1\":{\"375\":1,\"378\":1,\"427\":1}}],[\"rest\",{\"1\":{\"285\":2,\"378\":1,\"2010\":1}}],[\"resttemplate=new\",{\"1\":{\"285\":2}}],[\"resttemplate\",{\"1\":{\"285\":4,\"450\":3}}],[\"resttemplate访问网络对象\",{\"0\":{\"285\":1},\"1\":{\"285\":1}}],[\"restartpolicy\",{\"1\":{\"1661\":1,\"1698\":1}}],[\"restartedat\",{\"1\":{\"1661\":1,\"1698\":1}}],[\"restart=unless\",{\"1\":{\"3273\":3}}],[\"restart=no\",{\"1\":{\"1796\":1,\"3245\":1}}],[\"restart=no或always\",{\"1\":{\"1796\":1}}],[\"restart=on\",{\"1\":{\"1620\":1,\"1752\":1}}],[\"restart=always\",{\"1\":{\"219\":1,\"234\":1,\"1512\":1,\"1518\":1,\"1526\":1,\"1529\":1,\"1530\":2,\"1643\":1,\"1644\":1,\"3245\":2,\"3257\":1,\"3271\":1}}],[\"restart\",{\"1\":{\"101\":1,\"109\":1,\"242\":2,\"244\":1,\"250\":3,\"280\":8,\"1353\":2,\"1359\":2,\"1364\":2,\"1504\":2,\"1520\":1,\"1525\":1,\"1535\":2,\"1585\":1,\"1615\":1,\"1621\":1,\"1665\":1,\"1667\":1,\"1675\":1,\"1746\":1,\"1753\":1,\"1777\":1,\"1780\":1,\"1788\":1,\"1804\":1,\"1824\":1,\"1876\":1,\"1905\":1,\"1918\":1,\"1919\":1,\"1923\":1}}],[\"reshard\",{\"1\":{\"186\":2}}],[\"reserved\",{\"1\":{\"125\":1,\"1578\":1,\"3282\":1}}],[\"resettimeout\",{\"1\":{\"3087\":5}}],[\"reset\",{\"0\":{\"1669\":1},\"1\":{\"113\":1,\"193\":1,\"286\":1,\"1535\":1,\"1675\":1,\"2841\":1,\"2849\":2,\"2853\":1,\"2869\":1,\"2914\":1}}],[\"resize\",{\"0\":{\"2601\":1},\"1\":{\"125\":1,\"1181\":2,\"1833\":1,\"2600\":2,\"2601\":1,\"2683\":1,\"2684\":1}}],[\"resolv\",{\"1\":{\"1848\":1}}],[\"resolvesipsrv\",{\"1\":{\"3212\":2}}],[\"resolveplaceholder\",{\"1\":{\"289\":1}}],[\"resolve\",{\"1\":{\"125\":1,\"1578\":1}}],[\"resolved\",{\"1\":{\"125\":1}}],[\"resolution\",{\"1\":{\"741\":1}}],[\"resourcenotfoundexception\",{\"1\":{\"2956\":2}}],[\"resource\",{\"1\":{\"1573\":1,\"1684\":2,\"2051\":1}}],[\"resourcehandlerregistry\",{\"1\":{\"382\":1}}],[\"resources使用示例\",{\"1\":{\"2951\":1}}],[\"resources自动资源管理\",{\"0\":{\"2951\":1}}],[\"resources自动管理通道资源\",{\"1\":{\"2920\":1}}],[\"resources自动关闭实现了autocloseable接口的流\",{\"1\":{\"2848\":1}}],[\"resources自动关闭资源\",{\"1\":{\"1044\":1,\"1234\":1,\"1336\":1}}],[\"resources语句可以自动关闭实现autocloseable接口的资源\",{\"1\":{\"2951\":1}}],[\"resources语句自动管理资源\",{\"1\":{\"2908\":1}}],[\"resources语法可自动关闭流并刷新缓冲区\",{\"1\":{\"2872\":1}}],[\"resources语法自动管理资源\",{\"1\":{\"2848\":1,\"3069\":1}}],[\"resources语法自动关闭流\",{\"1\":{\"2831\":1}}],[\"resources语法简化了资源管理\",{\"1\":{\"2835\":1}}],[\"resources语法\",{\"1\":{\"2832\":1,\"2860\":1}}],[\"resources语法糖背后的实现机制\",{\"1\":{\"1247\":1}}],[\"resources确保资源正确释放\",{\"1\":{\"2896\":1,\"2930\":1}}],[\"resources确保流资源正确关闭\",{\"1\":{\"2884\":1}}],[\"resources是推荐的资源管理方式\",{\"1\":{\"2836\":1}}],[\"resources文件夹\",{\"1\":{\"1865\":1}}],[\"resources实现原理\",{\"0\":{\"1247\":1}}],[\"resources增强\",{\"1\":{\"1059\":1}}],[\"resources和自定义异常\",{\"1\":{\"1044\":1}}],[\"resources修改文件registry\",{\"1\":{\"243\":1}}],[\"resources\",{\"1\":{\"125\":1,\"243\":1,\"274\":1,\"382\":2,\"393\":1,\"1234\":1,\"1336\":1,\"1638\":1,\"1661\":1,\"1698\":1,\"1865\":1,\"2040\":1,\"2872\":1,\"3090\":1}}],[\"r\",{\"1\":{\"20\":3,\"115\":8,\"116\":1,\"237\":1,\"1092\":17,\"1095\":1,\"1324\":5,\"1472\":1,\"1475\":1,\"1478\":1,\"1479\":1,\"1497\":1,\"1504\":1,\"1510\":4,\"1569\":1,\"1577\":1,\"1578\":1,\"1586\":1,\"1634\":1,\"1637\":1,\"1638\":1,\"1675\":1,\"1837\":1,\"1862\":1,\"1865\":1,\"1882\":1,\"1884\":1,\"1887\":2,\"1901\":1,\"2327\":6,\"2657\":10,\"2837\":1,\"2849\":1,\"2860\":2,\"2921\":5,\"3070\":3,\"3099\":1,\"3205\":1,\"3262\":1}}],[\"^=\",{\"1\":{\"2113\":1,\"3086\":2}}],[\"^tcp\",{\"1\":{\"1881\":2}}],[\"^abc\",{\"1\":{\"1871\":1}}],[\"^$\",{\"1\":{\"1871\":2}}],[\"^m\",{\"1\":{\"1868\":1}}],[\"^~\",{\"1\":{\"1392\":1,\"1393\":1}}],[\"^\",{\"1\":{\"20\":1,\"216\":1,\"1196\":1,\"1417\":1,\"2065\":1,\"2112\":1,\"2599\":1,\"2727\":3,\"3086\":1}}],[\"^i\",{\"1\":{\"20\":1}}],[\"^r\",{\"1\":{\"20\":2}}],[\"1g\",{\"1\":{\"3275\":1}}],[\"1pybhdrs1ljagfpznblnkv6ly9hzxvfekr5vnn3a09uk2h0zgnimljvshozulckwwvtmgw2zzzpo\",{\"1\":{\"3273\":1}}],[\"1px\",{\"1\":{\"1440\":1,\"1442\":1,\"1463\":1}}],[\"1z1wlhjdfkyrxdxvefuqmdjcwhrak8kuffjqkjnz3foa2ppuffnqkj3tknbqvjmbdzkowcxmljqt\",{\"1\":{\"3273\":1}}],[\"1e970affcdc6\",{\"1\":{\"3266\":4}}],[\"1ffbeb6b89353ffb72b329bccb56f3b9\",{\"1\":{\"3263\":1}}],[\"1xx临时响应\",{\"1\":{\"3208\":1}}],[\"1xx\",{\"1\":{\"3179\":1,\"3195\":1,\"3198\":1}}],[\"1h\",{\"1\":{\"3103\":1}}],[\"1ms\",{\"1\":{\"3002\":1}}],[\"1mb\",{\"1\":{\"2917\":1}}],[\"1协议\",{\"1\":{\"2921\":1}}],[\"1及以上\",{\"1\":{\"2885\":2}}],[\"1不支持中文\",{\"1\":{\"2884\":1}}],[\"1之间则返回true\",{\"1\":{\"2495\":1}}],[\"1>>>1\",{\"1\":{\"2291\":1}}],[\"1引入\",{\"1\":{\"2291\":1}}],[\"1字符集\",{\"1\":{\"2289\":1}}],[\"1字节\",{\"1\":{\"2099\":1,\"2766\":1}}],[\"1b6d3586\",{\"1\":{\"2230\":1}}],[\"1在二进制中无法精确表示\",{\"1\":{\"2105\":1}}],[\"1位\",{\"1\":{\"2099\":1,\"2766\":1}}],[\"1位字母\",{\"1\":{\"2050\":1}}],[\"1表示读取结束\",{\"1\":{\"2831\":1}}],[\"1表示只采集一次\",{\"1\":{\"1887\":1}}],[\"1表示默认记录耗时大于100毫秒的操作\",{\"1\":{\"1739\":1}}],[\"1|grep\",{\"1\":{\"1875\":1}}],[\"1编辑防火强配置文件\",{\"1\":{\"1788\":1}}],[\"1=a\",{\"1\":{\"2427\":1,\"2632\":1}}],[\"1=手动录入\",{\"1\":{\"1687\":1}}],[\"1=jdbc\",{\"1\":{\"235\":1}}],[\"1c\",{\"1\":{\"1656\":1,\"1711\":1}}],[\"1vn5nf\",{\"1\":{\"1650\":1,\"1713\":1}}],[\"1vcjw7q\",{\"1\":{\"1527\":1}}],[\"1aj3daz3jib\",{\"1\":{\"1418\":1}}],[\"1st\",{\"1\":{\"2600\":1}}],[\"1s\",{\"1\":{\"1409\":3}}],[\"1r\",{\"1\":{\"1395\":2}}],[\"1qaz2wsx\",{\"1\":{\"1503\":1}}],[\"1qaz\",{\"1\":{\"1357\":1}}],[\"1状态\",{\"1\":{\"1311\":1}}],[\"1+n\",{\"1\":{\"797\":1,\"831\":1,\"865\":1,\"899\":1}}],[\"1证书指纹\",{\"1\":{\"483\":1}}],[\"1小时\",{\"1\":{\"456\":1}}],[\"1ljs29asxpqmevbd0leu0fbd1jrswdmtuj6yxndreu4t2tcuk40twruzwnru0xjmfvxqmnseapgo\",{\"1\":{\"3273\":1}}],[\"1l\",{\"1\":{\"449\":1,\"1094\":1,\"1225\":1,\"2054\":1,\"3003\":1,\"3166\":4,\"3190\":1}}],[\"1<\",{\"1\":{\"281\":1,\"456\":1,\"936\":1,\"941\":1,\"956\":1,\"999\":2,\"1005\":1,\"1456\":1,\"3147\":1}}],[\"180\",{\"1\":{\"3196\":1,\"3208\":1}}],[\"1800\",{\"1\":{\"3170\":1}}],[\"180天后用户会自动锁住\",{\"1\":{\"1570\":1}}],[\"181\",{\"1\":{\"1724\":2}}],[\"1819错误密码长度限制问题\",{\"1\":{\"99\":1}}],[\"18\",{\"1\":{\"283\":2,\"428\":1,\"728\":1,\"1635\":1,\"1638\":2,\"1660\":4,\"1661\":1,\"2195\":1,\"3003\":2,\"3273\":1,\"3282\":1}}],[\"188\",{\"1\":{\"280\":1,\"1685\":1,\"1688\":1,\"1799\":3}}],[\"154\",{\"1\":{\"1887\":1}}],[\"1544602234\",{\"1\":{\"303\":1}}],[\"151\",{\"1\":{\"1887\":1,\"3282\":1}}],[\"158\",{\"1\":{\"1887\":1}}],[\"157\",{\"1\":{\"1813\":1}}],[\"159\",{\"1\":{\"1677\":1}}],[\"1521\",{\"1\":{\"1569\":6}}],[\"15px\",{\"1\":{\"1440\":1}}],[\"1500\",{\"1\":{\"1878\":1}}],[\"1500mi\",{\"1\":{\"1638\":1}}],[\"150px\",{\"1\":{\"1469\":4}}],[\"150之间\",{\"1\":{\"1203\":1}}],[\"150\",{\"1\":{\"1069\":1,\"1203\":1}}],[\"15\",{\"0\":{\"1830\":1},\"1\":{\"728\":1,\"1371\":1,\"1372\":1,\"1373\":1,\"1483\":1,\"1498\":1,\"1499\":1,\"1724\":2,\"2109\":1,\"2112\":2,\"2408\":1,\"2569\":1,\"3003\":1,\"3271\":5,\"3273\":8}}],[\"15672\",{\"1\":{\"255\":2,\"257\":1}}],[\"15循环\",{\"1\":{\"153\":1}}],[\"1秒\",{\"1\":{\"169\":1}}],[\"1秒内的数据\",{\"1\":{\"142\":1}}],[\"1年=3652460\",{\"1\":{\"160\":1}}],[\"1个子程序失败\",{\"1\":{\"125\":1}}],[\"1个表至少要有1列\",{\"1\":{\"125\":1}}],[\"14f\",{\"1\":{\"2080\":1,\"2099\":1}}],[\"14px\",{\"1\":{\"1440\":1}}],[\"14\",{\"0\":{\"1829\":1,\"2069\":1,\"2070\":1,\"2071\":1,\"2072\":1},\"1\":{\"263\":1,\"266\":4,\"728\":1,\"1040\":1,\"1470\":1,\"1586\":2,\"1604\":1,\"1606\":1,\"1677\":3,\"2198\":2}}],[\"149\",{\"1\":{\"3250\":1}}],[\"1494\",{\"1\":{\"125\":1}}],[\"1493\",{\"1\":{\"125\":1}}],[\"1492\",{\"1\":{\"125\":1}}],[\"1491\",{\"1\":{\"125\":1}}],[\"1490\",{\"1\":{\"125\":1}}],[\"1489\",{\"1\":{\"125\":1}}],[\"1488\",{\"1\":{\"125\":1}}],[\"1487\",{\"1\":{\"125\":1}}],[\"1486\",{\"1\":{\"125\":1}}],[\"1485\",{\"1\":{\"125\":1}}],[\"1484\",{\"1\":{\"125\":1}}],[\"1483\",{\"1\":{\"125\":1}}],[\"1482\",{\"1\":{\"125\":1}}],[\"1481\",{\"1\":{\"125\":1}}],[\"1480\",{\"1\":{\"125\":1}}],[\"1479\",{\"1\":{\"125\":1}}],[\"1478\",{\"1\":{\"125\":1}}],[\"1477\",{\"1\":{\"125\":1}}],[\"1476\",{\"1\":{\"125\":1}}],[\"1475\",{\"1\":{\"125\":1}}],[\"1474\",{\"1\":{\"125\":1}}],[\"1473\",{\"1\":{\"125\":1}}],[\"1472\",{\"1\":{\"125\":1}}],[\"1471\",{\"1\":{\"125\":1}}],[\"1470\",{\"1\":{\"125\":1}}],[\"1469\",{\"1\":{\"125\":1}}],[\"1468\",{\"1\":{\"125\":1}}],[\"1467\",{\"1\":{\"125\":1}}],[\"1466\",{\"1\":{\"125\":1}}],[\"1465\",{\"1\":{\"125\":1}}],[\"1464\",{\"1\":{\"125\":1}}],[\"1463\",{\"1\":{\"125\":1}}],[\"1462\",{\"1\":{\"125\":1}}],[\"1461\",{\"1\":{\"125\":1}}],[\"1460\",{\"1\":{\"125\":1}}],[\"1459\",{\"1\":{\"125\":1}}],[\"1458\",{\"1\":{\"125\":1}}],[\"1457\",{\"1\":{\"125\":1}}],[\"1456\",{\"1\":{\"125\":1}}],[\"1455\",{\"1\":{\"125\":1}}],[\"1454\",{\"1\":{\"125\":1}}],[\"1453\",{\"1\":{\"125\":1}}],[\"1452\",{\"1\":{\"125\":1}}],[\"1451\",{\"1\":{\"125\":1}}],[\"1450\",{\"1\":{\"125\":1}}],[\"1449\",{\"1\":{\"125\":1}}],[\"1448\",{\"1\":{\"125\":1}}],[\"1447\",{\"1\":{\"125\":1}}],[\"1446\",{\"1\":{\"125\":1}}],[\"1445\",{\"1\":{\"125\":1}}],[\"1444\",{\"1\":{\"125\":1}}],[\"1443\",{\"1\":{\"125\":1}}],[\"1442\",{\"1\":{\"125\":1}}],[\"1441\",{\"1\":{\"125\":1}}],[\"1440\",{\"1\":{\"125\":1}}],[\"143\",{\"1\":{\"1649\":1,\"1688\":1}}],[\"1439\",{\"1\":{\"125\":1}}],[\"1438\",{\"1\":{\"125\":1}}],[\"1437\",{\"1\":{\"125\":1}}],[\"1436\",{\"1\":{\"125\":1}}],[\"1435\",{\"1\":{\"125\":1}}],[\"1434\",{\"1\":{\"125\":1}}],[\"1433\",{\"1\":{\"125\":1}}],[\"1432\",{\"1\":{\"125\":1}}],[\"1431\",{\"1\":{\"125\":1}}],[\"1430\",{\"1\":{\"125\":1}}],[\"142\",{\"1\":{\"1092\":1,\"3180\":1}}],[\"1429\",{\"1\":{\"125\":1}}],[\"1428\",{\"1\":{\"125\":1}}],[\"1427\",{\"1\":{\"125\":1}}],[\"1426\",{\"1\":{\"125\":1}}],[\"1425\",{\"1\":{\"125\":1}}],[\"1424\",{\"1\":{\"125\":1}}],[\"1423\",{\"1\":{\"125\":1}}],[\"1422\",{\"1\":{\"125\":1}}],[\"1421\",{\"1\":{\"125\":1}}],[\"1420\",{\"1\":{\"125\":1}}],[\"1419\",{\"1\":{\"125\":1}}],[\"1418\",{\"1\":{\"125\":1}}],[\"1417\",{\"1\":{\"125\":1}}],[\"1416\",{\"1\":{\"125\":1}}],[\"14159\",{\"1\":{\"2080\":1,\"2099\":1,\"2101\":1,\"2845\":1,\"2902\":1,\"2905\":3}}],[\"1415926\",{\"1\":{\"1222\":1,\"2798\":1}}],[\"1415\",{\"1\":{\"125\":1}}],[\"1414\",{\"1\":{\"125\":1}}],[\"1413\",{\"1\":{\"125\":1}}],[\"1412\",{\"1\":{\"125\":1}}],[\"1411\",{\"1\":{\"125\":1}}],[\"1410\",{\"1\":{\"125\":1}}],[\"140\",{\"1\":{\"1503\":5,\"1504\":1}}],[\"1409\",{\"1\":{\"125\":1}}],[\"1408\",{\"1\":{\"125\":1}}],[\"1407\",{\"1\":{\"125\":1}}],[\"1406\",{\"1\":{\"125\":1}}],[\"1405\",{\"1\":{\"125\":1}}],[\"1404\",{\"1\":{\"125\":1}}],[\"1403\",{\"1\":{\"125\":1}}],[\"1402\",{\"1\":{\"125\":1}}],[\"1401\",{\"1\":{\"125\":1}}],[\"1400\",{\"1\":{\"125\":1}}],[\"13\",{\"0\":{\"1778\":1,\"1828\":1,\"2064\":1,\"2065\":1,\"2066\":1,\"2067\":1,\"2068\":1},\"1\":{\"728\":1,\"1059\":1,\"1470\":1,\"1526\":1,\"1531\":1,\"1586\":1,\"1667\":1,\"1687\":2,\"1698\":1,\"1764\":1,\"2112\":1,\"3086\":1}}],[\"1399\",{\"1\":{\"125\":1}}],[\"1398\",{\"1\":{\"125\":1}}],[\"1397\",{\"1\":{\"125\":1}}],[\"1396\",{\"1\":{\"125\":1}}],[\"1395\",{\"1\":{\"125\":1}}],[\"1394\",{\"1\":{\"125\":1}}],[\"1393\",{\"1\":{\"125\":1}}],[\"1392\",{\"1\":{\"125\":1}}],[\"1391\",{\"1\":{\"125\":1}}],[\"1390\",{\"1\":{\"125\":1}}],[\"1389\",{\"1\":{\"125\":1}}],[\"1388\",{\"1\":{\"125\":1}}],[\"1387\",{\"1\":{\"125\":1}}],[\"1386\",{\"1\":{\"125\":1}}],[\"1385\",{\"1\":{\"125\":1}}],[\"1384\",{\"1\":{\"125\":1}}],[\"1383\",{\"1\":{\"125\":1}}],[\"1382\",{\"1\":{\"125\":1}}],[\"1381\",{\"1\":{\"125\":1}}],[\"1380\",{\"1\":{\"125\":1}}],[\"1369\",{\"1\":{\"125\":1}}],[\"1368\",{\"1\":{\"125\":1}}],[\"1367\",{\"1\":{\"125\":1}}],[\"1366\",{\"1\":{\"125\":1}}],[\"1365\",{\"1\":{\"125\":1}}],[\"1364\",{\"1\":{\"125\":1}}],[\"1363\",{\"1\":{\"125\":1}}],[\"1362\",{\"1\":{\"125\":1}}],[\"1361\",{\"1\":{\"125\":1}}],[\"1360\",{\"1\":{\"125\":1}}],[\"135\",{\"1\":{\"3250\":1}}],[\"1359\",{\"1\":{\"125\":1}}],[\"1358\",{\"1\":{\"125\":1}}],[\"1357\",{\"1\":{\"125\":1}}],[\"1356\",{\"1\":{\"125\":1}}],[\"1355\",{\"1\":{\"125\":1}}],[\"1354\",{\"1\":{\"125\":1}}],[\"1353\",{\"1\":{\"125\":1}}],[\"1352\",{\"1\":{\"125\":1}}],[\"1351\",{\"1\":{\"125\":1}}],[\"1350\",{\"1\":{\"125\":1}}],[\"1349\",{\"1\":{\"125\":1}}],[\"1348\",{\"1\":{\"125\":1}}],[\"1347\",{\"1\":{\"125\":1}}],[\"1346\",{\"1\":{\"125\":1}}],[\"1345\",{\"1\":{\"125\":1}}],[\"1344\",{\"1\":{\"125\":1}}],[\"1343\",{\"1\":{\"125\":1}}],[\"1342\",{\"1\":{\"125\":1}}],[\"1341\",{\"1\":{\"125\":1}}],[\"1340\",{\"1\":{\"125\":1}}],[\"133\",{\"1\":{\"3266\":1,\"3267\":1,\"3276\":2}}],[\"1339\",{\"1\":{\"125\":1}}],[\"1338\",{\"1\":{\"125\":1}}],[\"1337\",{\"1\":{\"125\":1}}],[\"1336\",{\"1\":{\"125\":1}}],[\"1335\",{\"1\":{\"125\":1}}],[\"1334\",{\"1\":{\"125\":1}}],[\"1333\",{\"1\":{\"125\":1}}],[\"1332\",{\"1\":{\"125\":1}}],[\"1331\",{\"1\":{\"125\":1}}],[\"1330\",{\"1\":{\"125\":1}}],[\"132\",{\"1\":{\"3266\":1,\"3267\":1}}],[\"1329\",{\"1\":{\"125\":1}}],[\"1328\",{\"1\":{\"125\":1}}],[\"1327\",{\"1\":{\"125\":1}}],[\"1326\",{\"1\":{\"125\":1}}],[\"1325\",{\"1\":{\"125\":1}}],[\"1324\",{\"1\":{\"125\":1}}],[\"1323\",{\"1\":{\"125\":1}}],[\"1322\",{\"1\":{\"125\":1}}],[\"1321\",{\"1\":{\"125\":1}}],[\"1320\",{\"1\":{\"125\":1}}],[\"131\",{\"1\":{\"3266\":1,\"3267\":1,\"3273\":1,\"3282\":1}}],[\"1319\",{\"1\":{\"125\":1}}],[\"1318\",{\"1\":{\"125\":1}}],[\"1317\",{\"1\":{\"125\":1}}],[\"1316\",{\"1\":{\"125\":1}}],[\"1315\",{\"1\":{\"125\":1}}],[\"1314\",{\"1\":{\"125\":1}}],[\"1313\",{\"1\":{\"125\":1}}],[\"1312\",{\"1\":{\"125\":1}}],[\"1311\",{\"1\":{\"125\":1}}],[\"1310\",{\"1\":{\"125\":1}}],[\"130\",{\"1\":{\"3266\":1,\"3267\":1,\"3273\":4}}],[\"1309\",{\"1\":{\"125\":1}}],[\"1308\",{\"1\":{\"125\":1}}],[\"1307\",{\"1\":{\"125\":1}}],[\"1306\",{\"1\":{\"125\":1}}],[\"1305366530\",{\"1\":{\"3246\":2}}],[\"1305\",{\"1\":{\"125\":1}}],[\"1304\",{\"1\":{\"125\":1}}],[\"1303\",{\"1\":{\"125\":1}}],[\"1302\",{\"1\":{\"125\":1}}],[\"1301\",{\"1\":{\"125\":1,\"1578\":1}}],[\"1300\",{\"1\":{\"125\":1}}],[\"1379\",{\"1\":{\"125\":1}}],[\"1378\",{\"1\":{\"125\":1}}],[\"1377\",{\"1\":{\"125\":1}}],[\"1376\",{\"1\":{\"125\":1}}],[\"1375\",{\"1\":{\"125\":1}}],[\"1374\",{\"1\":{\"125\":1}}],[\"1373\",{\"1\":{\"125\":1}}],[\"1372\",{\"1\":{\"125\":1}}],[\"1371\",{\"1\":{\"125\":1}}],[\"1370\",{\"1\":{\"125\":1}}],[\"137\",{\"1\":{\"102\":2}}],[\"11及之后版本\",{\"1\":{\"2433\":1}}],[\"11及以上lts版本\",{\"1\":{\"1198\":1}}],[\"11t17\",{\"1\":{\"1764\":1}}],[\"11带来的优势\",{\"1\":{\"495\":1}}],[\"11特性优化现有应用\",{\"1\":{\"495\":1}}],[\"11的字符\",{\"1\":{\"2265\":1}}],[\"11的特性优化现有java应用\",{\"0\":{\"495\":1}}],[\"11的http客户端是一个不错的选择\",{\"1\":{\"494\":1}}],[\"11的http客户端相比第三方库有以下优势和不足\",{\"1\":{\"494\":1}}],[\"11的http客户端相比第三方库\",{\"0\":{\"494\":1}}],[\"11的核心特性及其在实际开发中的应用\",{\"1\":{\"465\":1}}],[\"11中是实验性特性\",{\"1\":{\"492\":1}}],[\"11中得到了完善\",{\"1\":{\"486\":1}}],[\"11在性能优化方面做了很多工作\",{\"1\":{\"487\":1}}],[\"11标志着java模块化系统\",{\"1\":{\"486\":1}}],[\"11移除了以下不安全的加密算法\",{\"1\":{\"483\":1}}],[\"11添加了对tls\",{\"1\":{\"482\":1}}],[\"11将http客户端api标准化\",{\"1\":{\"488\":1}}],[\"11将其开源并包含在openjdk中\",{\"1\":{\"480\":1}}],[\"11将java\",{\"1\":{\"471\":1}}],[\"11允许直接运行单个\",{\"1\":{\"479\":1}}],[\"11允许在lambda表达式的参数中使用var\",{\"1\":{\"469\":1}}],[\"11引入了实验性的zgc\",{\"1\":{\"476\":1}}],[\"11新方式\",{\"1\":{\"473\":1,\"474\":1}}],[\"11新增\",{\"1\":{\"468\":1}}],[\"11为集合接口添加了toarray\",{\"1\":{\"473\":1}}],[\"11为string类添加了多个实用方法\",{\"1\":{\"472\":1}}],[\"11进一步扩展了其使用范围\",{\"1\":{\"468\":1}}],[\"11不仅整合了java\",{\"1\":{\"465\":1}}],[\"11是oracle于2018年9月发布的长期支持\",{\"1\":{\"465\":1}}],[\"11\",{\"0\":{\"464\":1,\"1731\":1,\"1776\":1,\"1826\":1,\"2056\":1,\"2057\":1,\"2058\":1,\"2059\":1},\"1\":{\"264\":1,\"286\":1,\"471\":1,\"472\":4,\"479\":1,\"566\":2,\"728\":1,\"1059\":1,\"1443\":1,\"1470\":1,\"1488\":1,\"1489\":2,\"1495\":1,\"1687\":22,\"1779\":1,\"1877\":1,\"1879\":1,\"2109\":1,\"2265\":1,\"2400\":1,\"2434\":1,\"3246\":1,\"3282\":2}}],[\"119\",{\"1\":{\"3266\":4}}],[\"1199\",{\"1\":{\"125\":1}}],[\"1198\",{\"1\":{\"125\":1}}],[\"1197\",{\"1\":{\"125\":1}}],[\"1196\",{\"1\":{\"125\":1}}],[\"1195\",{\"1\":{\"125\":1}}],[\"1194\",{\"1\":{\"125\":1}}],[\"1193\",{\"1\":{\"125\":1}}],[\"1192\",{\"1\":{\"125\":1}}],[\"1191\",{\"1\":{\"125\":1}}],[\"1190\",{\"1\":{\"125\":1}}],[\"118\",{\"1\":{\"3273\":1}}],[\"1189\",{\"1\":{\"125\":1}}],[\"1188\",{\"1\":{\"125\":1}}],[\"1187\",{\"1\":{\"125\":1}}],[\"1186\",{\"1\":{\"125\":1}}],[\"1185\",{\"1\":{\"125\":1}}],[\"1184\",{\"1\":{\"125\":1}}],[\"1183\",{\"1\":{\"125\":1}}],[\"1182\",{\"1\":{\"125\":1}}],[\"1181\",{\"1\":{\"125\":1}}],[\"11800\",{\"1\":{\"1538\":1,\"1548\":1,\"3104\":1}}],[\"1180\",{\"1\":{\"125\":1}}],[\"1179\",{\"1\":{\"125\":1}}],[\"1178\",{\"1\":{\"125\":1}}],[\"1177\",{\"1\":{\"125\":1}}],[\"1176\",{\"1\":{\"125\":1}}],[\"1175\",{\"1\":{\"125\":1}}],[\"1174\",{\"1\":{\"125\":1}}],[\"1173\",{\"1\":{\"125\":1}}],[\"1172\",{\"1\":{\"125\":1}}],[\"1171\",{\"1\":{\"125\":1}}],[\"1170\",{\"1\":{\"125\":1}}],[\"1169\",{\"1\":{\"125\":1}}],[\"1168\",{\"1\":{\"125\":1}}],[\"1167\",{\"1\":{\"125\":1}}],[\"1166\",{\"1\":{\"125\":1}}],[\"1165\",{\"1\":{\"125\":1}}],[\"1164\",{\"1\":{\"125\":1}}],[\"1163\",{\"1\":{\"125\":1}}],[\"1162\",{\"1\":{\"125\":1}}],[\"1161\",{\"1\":{\"125\":1}}],[\"1160\",{\"1\":{\"125\":1,\"1483\":2,\"1498\":2,\"1499\":2}}],[\"115kb\",{\"1\":{\"1527\":2}}],[\"115\",{\"1\":{\"1410\":2}}],[\"1159\",{\"1\":{\"125\":1}}],[\"1158\",{\"1\":{\"125\":1}}],[\"1157\",{\"1\":{\"125\":1}}],[\"1156\",{\"1\":{\"125\":1}}],[\"1155\",{\"1\":{\"125\":1}}],[\"1154\",{\"1\":{\"125\":1}}],[\"1153\",{\"1\":{\"125\":1,\"1885\":2}}],[\"1152\",{\"1\":{\"125\":1}}],[\"1151\",{\"1\":{\"125\":1}}],[\"1150\",{\"1\":{\"125\":1}}],[\"114\",{\"1\":{\"1662\":4,\"1920\":1}}],[\"1149\",{\"1\":{\"125\":1}}],[\"1148\",{\"1\":{\"125\":1}}],[\"1147\",{\"1\":{\"125\":1}}],[\"1146\",{\"1\":{\"125\":1}}],[\"1145\",{\"1\":{\"125\":1}}],[\"1144\",{\"1\":{\"125\":1}}],[\"1143\",{\"1\":{\"125\":1}}],[\"1142\",{\"1\":{\"125\":1}}],[\"1141\",{\"1\":{\"125\":1}}],[\"1140\",{\"1\":{\"125\":1}}],[\"1139\",{\"1\":{\"125\":1}}],[\"1138\",{\"1\":{\"125\":1}}],[\"11371\",{\"1\":{\"997\":2}}],[\"1137\",{\"1\":{\"125\":1}}],[\"1136\",{\"1\":{\"125\":1}}],[\"1135\",{\"1\":{\"125\":1}}],[\"1134\",{\"1\":{\"125\":1}}],[\"1133\",{\"1\":{\"125\":1}}],[\"1132\",{\"1\":{\"125\":1}}],[\"1131\",{\"1\":{\"125\":1}}],[\"1130\",{\"1\":{\"125\":1}}],[\"1129\",{\"1\":{\"125\":1}}],[\"1128\",{\"1\":{\"125\":1}}],[\"1127\",{\"1\":{\"125\":1}}],[\"1126\",{\"1\":{\"125\":1}}],[\"1125\",{\"1\":{\"125\":1}}],[\"1124\",{\"1\":{\"125\":1}}],[\"1123\",{\"1\":{\"125\":1}}],[\"1122\",{\"1\":{\"125\":1}}],[\"1121\",{\"1\":{\"125\":1}}],[\"1120\",{\"1\":{\"125\":1}}],[\"111\",{\"1\":{\"140\":1,\"1416\":1,\"1871\":2,\"2188\":1}}],[\"1119\",{\"1\":{\"125\":1}}],[\"1118\",{\"1\":{\"125\":1}}],[\"1117\",{\"1\":{\"125\":1}}],[\"1116\",{\"1\":{\"125\":1}}],[\"1115\",{\"1\":{\"125\":1}}],[\"1114\",{\"1\":{\"125\":1}}],[\"1113\",{\"1\":{\"125\":1}}],[\"1112\",{\"1\":{\"125\":1}}],[\"1111\",{\"1\":{\"125\":1,\"2112\":3}}],[\"1110\",{\"1\":{\"125\":1}}],[\"110\",{\"1\":{\"280\":1}}],[\"1109\",{\"1\":{\"125\":1}}],[\"1108\",{\"1\":{\"125\":1}}],[\"1107\",{\"1\":{\"125\":1}}],[\"1106\",{\"1\":{\"125\":1}}],[\"1105\",{\"1\":{\"125\":1}}],[\"1104\",{\"1\":{\"125\":1}}],[\"1103\",{\"1\":{\"125\":1}}],[\"1102\",{\"1\":{\"125\":1}}],[\"1101\",{\"1\":{\"125\":1,\"2112\":2}}],[\"1100\",{\"1\":{\"125\":1,\"2112\":3}}],[\"17位小数\",{\"1\":{\"2099\":1}}],[\"177\",{\"1\":{\"1851\":1}}],[\"170\",{\"1\":{\"1660\":1}}],[\"172\",{\"1\":{\"1516\":1,\"1517\":2,\"1520\":2,\"1523\":2,\"1660\":4}}],[\"17后\",{\"0\":{\"522\":1},\"1\":{\"522\":1}}],[\"17的npe增强仍能提供精确的错误定位\",{\"1\":{\"521\":1}}],[\"17的npe增强特性与optional类是解决空值问题的不同层面方案\",{\"1\":{\"521\":1}}],[\"17的npe增强特性与optional类的关系是什么\",{\"0\":{\"521\":1}}],[\"17的npe增强特性默认启用\",{\"1\":{\"507\":1}}],[\"17的npe增强特性并非简单的消息文本改进\",{\"1\":{\"503\":1}}],[\"17的增强npe消息\",{\"1\":{\"510\":1}}],[\"17的实现非常高效\",{\"1\":{\"506\":1}}],[\"17引入了新的字节码属性nullpointerexceptioninfo\",{\"1\":{\"505\":1}}],[\"17也能准确识别空值来源\",{\"1\":{\"502\":1}}],[\"17错误消息\",{\"1\":{\"501\":1,\"502\":1}}],[\"17能精确指出链条中哪个环节出现了null\",{\"1\":{\"501\":1}}],[\"17会明确指出\",{\"1\":{\"500\":1}}],[\"17+推荐使用switch表达式\",{\"1\":{\"2062\":1}}],[\"17+\",{\"1\":{\"500\":1,\"2062\":1}}],[\"17通过精确识别空值变量和传播路径\",{\"1\":{\"499\":1}}],[\"17之前\",{\"1\":{\"499\":1}}],[\"17作为oracle在2021年9月发布的长期支持\",{\"1\":{\"497\":1}}],[\"179\",{\"1\":{\"280\":1,\"1478\":1,\"1677\":1,\"1685\":2,\"1688\":2,\"1764\":6,\"1799\":3}}],[\"17\",{\"0\":{\"496\":1},\"1\":{\"115\":8,\"266\":4,\"566\":1,\"728\":1,\"1066\":1,\"1488\":1,\"1489\":2,\"1495\":1,\"1516\":1,\"1517\":2,\"1520\":2,\"1523\":2,\"1586\":2,\"1635\":1,\"2020\":2,\"2035\":1,\"2195\":1,\"2434\":1,\"2491\":1,\"3086\":1}}],[\"12月\",{\"1\":{\"1586\":2}}],[\"12c镜像创建的容器\",{\"1\":{\"1570\":1}}],[\"12c启动日志\",{\"1\":{\"1569\":1}}],[\"12c容器内\",{\"1\":{\"1570\":1}}],[\"12c容器内将密码的有效期设置为永久\",{\"1\":{\"1570\":1}}],[\"12c容器\",{\"1\":{\"1569\":1}}],[\"12c最新版本的镜像\",{\"1\":{\"1568\":1}}],[\"12c\",{\"1\":{\"1568\":2,\"1569\":4,\"1570\":1,\"1571\":1}}],[\"12<\",{\"1\":{\"584\":1}}],[\"1299\",{\"1\":{\"125\":1}}],[\"1298\",{\"1\":{\"125\":1}}],[\"1297\",{\"1\":{\"125\":1}}],[\"1296\",{\"1\":{\"125\":1}}],[\"1295\",{\"1\":{\"125\":1}}],[\"1294\",{\"1\":{\"125\":1}}],[\"1293\",{\"1\":{\"125\":1}}],[\"1292\",{\"1\":{\"125\":1}}],[\"1291\",{\"1\":{\"125\":1}}],[\"1290\",{\"1\":{\"125\":1}}],[\"128~127的整数\",{\"1\":{\"1049\":1}}],[\"128\",{\"1\":{\"232\":22,\"1040\":2,\"1684\":22,\"1687\":3,\"2099\":1,\"3125\":1,\"3282\":1}}],[\"1289\",{\"1\":{\"125\":1}}],[\"1288\",{\"1\":{\"125\":1}}],[\"1287\",{\"1\":{\"125\":1}}],[\"1286\",{\"1\":{\"125\":1}}],[\"1285\",{\"1\":{\"125\":1}}],[\"1284\",{\"1\":{\"125\":1}}],[\"1283\",{\"1\":{\"125\":1}}],[\"1282\",{\"1\":{\"125\":1}}],[\"1281\",{\"1\":{\"125\":1}}],[\"12800\",{\"1\":{\"1538\":1,\"1546\":2}}],[\"1280\",{\"1\":{\"125\":1}}],[\"127\",{\"1\":{\"236\":1,\"285\":2,\"294\":1,\"1040\":2,\"1094\":4,\"1355\":2,\"1360\":1,\"1390\":2,\"1532\":1,\"1533\":1,\"1577\":1,\"1578\":1,\"1644\":1,\"1734\":1,\"1763\":1,\"1787\":4,\"1788\":2,\"1875\":1,\"1916\":1,\"2099\":1,\"3065\":1,\"3066\":1,\"3190\":7,\"3267\":1}}],[\"1279\",{\"1\":{\"125\":1}}],[\"1278\",{\"1\":{\"125\":1}}],[\"1277\",{\"1\":{\"125\":1}}],[\"1276\",{\"1\":{\"125\":1}}],[\"1275\",{\"1\":{\"125\":1}}],[\"1274\",{\"1\":{\"125\":1}}],[\"1273\",{\"1\":{\"125\":1}}],[\"1272\",{\"1\":{\"125\":1}}],[\"1271\",{\"1\":{\"125\":1}}],[\"1270\",{\"1\":{\"125\":1}}],[\"1259\",{\"1\":{\"125\":1}}],[\"1258\",{\"1\":{\"125\":1}}],[\"1257\",{\"1\":{\"125\":1}}],[\"1256\",{\"1\":{\"125\":1}}],[\"1255\",{\"1\":{\"125\":1}}],[\"1254\",{\"1\":{\"125\":1}}],[\"1253\",{\"1\":{\"125\":1}}],[\"1252\",{\"1\":{\"125\":1}}],[\"1251\",{\"1\":{\"125\":1}}],[\"125021305\",{\"1\":{\"1642\":1}}],[\"1250\",{\"1\":{\"125\":1}}],[\"124\",{\"1\":{\"1503\":5,\"1504\":1,\"1813\":1}}],[\"1249\",{\"1\":{\"125\":1}}],[\"1248\",{\"1\":{\"125\":1}}],[\"1247\",{\"1\":{\"125\":1}}],[\"1246\",{\"1\":{\"125\":1}}],[\"1245\",{\"1\":{\"125\":1}}],[\"1244\",{\"1\":{\"125\":1}}],[\"1243\",{\"1\":{\"125\":1}}],[\"1242\",{\"1\":{\"125\":1}}],[\"1241\",{\"1\":{\"125\":1}}],[\"1240\",{\"1\":{\"125\":1}}],[\"123+0800\",{\"1\":{\"774\":1}}],[\"123\",{\"1\":{\"539\":1,\"1040\":2,\"1044\":1,\"1294\":1,\"1301\":1,\"2198\":4,\"2902\":1,\"3002\":2,\"3017\":2,\"3019\":1}}],[\"123l\",{\"1\":{\"521\":1,\"3002\":1}}],[\"1239\",{\"1\":{\"125\":1}}],[\"1238\",{\"1\":{\"125\":1}}],[\"1237\",{\"1\":{\"125\":1}}],[\"1236\",{\"1\":{\"125\":1}}],[\"1235\",{\"1\":{\"125\":1}}],[\"1234546\",{\"1\":{\"1787\":1}}],[\"12345\",{\"1\":{\"1094\":1,\"2266\":2,\"3190\":3}}],[\"1234567\",{\"1\":{\"2271\":1}}],[\"123456解决方案\",{\"1\":{\"2232\":1}}],[\"123456\",{\"1\":{\"99\":2,\"100\":2,\"102\":2,\"107\":1,\"108\":1,\"219\":3,\"223\":3,\"227\":1,\"229\":1,\"404\":1,\"451\":2,\"456\":1,\"1363\":1,\"1638\":3,\"1736\":2,\"1737\":2,\"1764\":1,\"1787\":1}}],[\"1234\",{\"1\":{\"125\":1}}],[\"1233\",{\"1\":{\"125\":1}}],[\"1232\",{\"1\":{\"125\":1}}],[\"1231\",{\"1\":{\"125\":1}}],[\"12301\",{\"1\":{\"1878\":1}}],[\"1230\",{\"1\":{\"125\":1}}],[\"1229\",{\"1\":{\"125\":1}}],[\"122834930\",{\"1\":{\"1536\":1}}],[\"1228\",{\"1\":{\"125\":1}}],[\"1227\",{\"1\":{\"125\":1}}],[\"1226\",{\"1\":{\"125\":1}}],[\"1225\",{\"1\":{\"125\":1}}],[\"1224\",{\"1\":{\"125\":1}}],[\"1223\",{\"1\":{\"125\":1}}],[\"1222\",{\"1\":{\"125\":1}}],[\"1221\",{\"1\":{\"125\":1}}],[\"1220\",{\"1\":{\"125\":1}}],[\"1219\",{\"1\":{\"125\":1}}],[\"121849257\",{\"1\":{\"281\":1}}],[\"1218\",{\"1\":{\"125\":1}}],[\"1217\",{\"1\":{\"125\":1}}],[\"1216\",{\"1\":{\"125\":1}}],[\"1215\",{\"1\":{\"125\":1}}],[\"1214\",{\"1\":{\"125\":1}}],[\"1213\",{\"1\":{\"125\":1}}],[\"1212\",{\"1\":{\"125\":1}}],[\"1211\",{\"1\":{\"125\":1}}],[\"1210\",{\"1\":{\"125\":1}}],[\"120\",{\"1\":{\"1069\":1,\"3003\":2}}],[\"1209\",{\"1\":{\"125\":1}}],[\"1208\",{\"1\":{\"125\":1}}],[\"1207\",{\"1\":{\"125\":1}}],[\"1206\",{\"1\":{\"125\":1}}],[\"1205\",{\"1\":{\"125\":1}}],[\"1204\",{\"1\":{\"125\":1}}],[\"1203\",{\"1\":{\"125\":1}}],[\"1202\",{\"1\":{\"125\":1}}],[\"1201\",{\"1\":{\"125\":1}}],[\"1200\",{\"1\":{\"125\":1}}],[\"126z\",{\"1\":{\"1661\":1}}],[\"1269\",{\"1\":{\"125\":1}}],[\"1268\",{\"1\":{\"125\":1}}],[\"1267\",{\"1\":{\"125\":1}}],[\"1266\",{\"1\":{\"125\":1}}],[\"1265\",{\"1\":{\"125\":1}}],[\"1264\",{\"1\":{\"125\":1}}],[\"1263\",{\"1\":{\"125\":1}}],[\"1262\",{\"1\":{\"125\":1}}],[\"1261\",{\"1\":{\"125\":1}}],[\"1260\",{\"1\":{\"125\":1}}],[\"126\",{\"1\":{\"115\":1}}],[\"12\",{\"0\":{\"1732\":1,\"1777\":1,\"1827\":1,\"2060\":1,\"2061\":1,\"2062\":1,\"2063\":1},\"1\":{\"115\":8,\"585\":1,\"728\":1,\"1037\":2,\"1059\":1,\"1427\":1,\"1470\":1,\"1564\":2,\"1687\":1,\"1698\":1,\"2109\":1,\"2112\":1,\"2601\":1,\"3246\":1}}],[\"16编码的文件开头标识\",{\"1\":{\"2884\":1}}],[\"16支持以处理复杂字符\",{\"1\":{\"2289\":1}}],[\"16个字符足以避免初始扩容\",{\"1\":{\"2282\":1}}],[\"162\",{\"1\":{\"1887\":1}}],[\"169\",{\"1\":{\"1660\":1}}],[\"16777619\",{\"1\":{\"3086\":1}}],[\"167\",{\"1\":{\"1660\":1}}],[\"1675\",{\"1\":{\"115\":4}}],[\"16h\",{\"1\":{\"1660\":1}}],[\"1651146995000\",{\"1\":{\"1563\":1}}],[\"16位unicode\",{\"1\":{\"1221\":1}}],[\"1631352818\",{\"1\":{\"1764\":2}}],[\"16381838\",{\"1\":{\"1536\":1}}],[\"163\",{\"1\":{\"982\":1,\"1649\":3,\"1688\":3,\"1879\":2,\"3257\":1}}],[\"16<\",{\"1\":{\"711\":1}}],[\"16及之前\",{\"1\":{\"500\":1}}],[\"16\",{\"1\":{\"263\":1,\"728\":1,\"1181\":1,\"1196\":1,\"1198\":1,\"1536\":1,\"1660\":4,\"1779\":3,\"2263\":4,\"2271\":2,\"2282\":1,\"2289\":1,\"2320\":1,\"2367\":1,\"2400\":3,\"2404\":1,\"2434\":1,\"2463\":1,\"2491\":1,\"2520\":1,\"2596\":1,\"2599\":1,\"2601\":1,\"2651\":1,\"2881\":1,\"2885\":1,\"3275\":1,\"3282\":1}}],[\"16867\",{\"1\":{\"160\":1}}],[\"168\",{\"1\":{\"102\":2,\"110\":1,\"249\":1,\"280\":1,\"1404\":2,\"1405\":2,\"1406\":2,\"1410\":2,\"1502\":1,\"1524\":2,\"1530\":2,\"1563\":2,\"1601\":1,\"1638\":8,\"1641\":7,\"1660\":1,\"1666\":1,\"1667\":2,\"1669\":1,\"1677\":1,\"1685\":2,\"1688\":2,\"1698\":1,\"1711\":1,\"1713\":11,\"1764\":7,\"1799\":3,\"1851\":1,\"1877\":1,\"1879\":1,\"1920\":1,\"3177\":1,\"3250\":1,\"3266\":8,\"3267\":4,\"3273\":5,\"3276\":2,\"3282\":1}}],[\"191\",{\"1\":{\"1724\":2}}],[\"1900\",{\"1\":{\"1578\":1}}],[\"19\",{\"1\":{\"728\":1,\"1618\":1,\"1635\":2,\"1638\":1,\"1660\":4,\"1750\":1,\"1793\":1}}],[\"1999年\",{\"1\":{\"577\":1}}],[\"1998年\",{\"1\":{\"574\":1}}],[\"1996年\",{\"1\":{\"574\":1}}],[\"1995年\",{\"1\":{\"574\":1}}],[\"1995\",{\"0\":{\"574\":1}}],[\"1990\",{\"1\":{\"545\":1}}],[\"19876\",{\"1\":{\"250\":1,\"251\":1}}],[\"192\",{\"1\":{\"102\":2,\"110\":1,\"249\":1,\"280\":1,\"1404\":2,\"1405\":2,\"1406\":2,\"1410\":1,\"1502\":1,\"1524\":2,\"1530\":1,\"1563\":2,\"1601\":1,\"1638\":8,\"1641\":7,\"1666\":1,\"1667\":2,\"1669\":1,\"1685\":2,\"1688\":2,\"1698\":1,\"1711\":1,\"1713\":11,\"1764\":7,\"1799\":3,\"1851\":1,\"1877\":1,\"1879\":1,\"3177\":1,\"3250\":1,\"3266\":8,\"3267\":4,\"3273\":5,\"3276\":2,\"3282\":1}}],[\"19th\",{\"1\":{\"23\":1}}],[\"10s\",{\"1\":{\"2905\":2}}],[\"10中成为保留类型名称\",{\"1\":{\"2084\":1}}],[\"10库\",{\"1\":{\"1735\":1}}],[\"10月\",{\"1\":{\"1586\":2}}],[\"10=9\",{\"1\":{\"1469\":1}}],[\"10=2\",{\"1\":{\"1469\":1}}],[\"10=1\",{\"1\":{\"1469\":1}}],[\"10=0\",{\"1\":{\"1469\":2}}],[\"10px\",{\"1\":{\"1469\":1}}],[\"10m\",{\"1\":{\"1395\":1,\"1396\":1,\"1397\":2}}],[\"10mb\",{\"1\":{\"1224\":1}}],[\"10及之前\",{\"1\":{\"468\":1}}],[\"10引入了var关键字用于局部变量类型推断\",{\"1\":{\"468\":1}}],[\"10的特性\",{\"1\":{\"465\":1}}],[\"10w+\",{\"1\":{\"129\":1}}],[\"109m\",{\"1\":{\"3276\":1}}],[\"1099\",{\"1\":{\"125\":1,\"3107\":1}}],[\"1098\",{\"1\":{\"125\":1}}],[\"1097\",{\"1\":{\"125\":1}}],[\"1096\",{\"1\":{\"125\":1}}],[\"1095\",{\"1\":{\"125\":1}}],[\"1094\",{\"1\":{\"125\":1}}],[\"1093\",{\"1\":{\"125\":1}}],[\"1092\",{\"1\":{\"125\":1}}],[\"10912\",{\"1\":{\"250\":2}}],[\"10911\",{\"1\":{\"250\":2}}],[\"1091\",{\"1\":{\"125\":1}}],[\"10909\",{\"1\":{\"250\":2}}],[\"1090\",{\"1\":{\"125\":1}}],[\"108\",{\"1\":{\"2188\":2}}],[\"1089\",{\"1\":{\"125\":1}}],[\"1088\",{\"1\":{\"125\":1}}],[\"1087\",{\"1\":{\"125\":1}}],[\"1086\",{\"1\":{\"125\":1}}],[\"1085\",{\"1\":{\"125\":1}}],[\"1084\",{\"1\":{\"125\":1}}],[\"1083\",{\"1\":{\"125\":1}}],[\"1082\",{\"1\":{\"125\":1}}],[\"1081\",{\"1\":{\"125\":1}}],[\"1080\",{\"1\":{\"125\":1}}],[\"1069\",{\"1\":{\"125\":1}}],[\"1068\",{\"1\":{\"125\":1}}],[\"1067\",{\"1\":{\"125\":1}}],[\"1066\",{\"1\":{\"125\":1}}],[\"1065\",{\"1\":{\"125\":1}}],[\"1064\",{\"1\":{\"125\":1}}],[\"1063\",{\"1\":{\"125\":1}}],[\"1062\",{\"1\":{\"125\":1}}],[\"1061\",{\"1\":{\"125\":1}}],[\"1060\",{\"1\":{\"125\":1}}],[\"105\",{\"1\":{\"1764\":1}}],[\"1059\",{\"1\":{\"125\":1}}],[\"1058\",{\"1\":{\"125\":1}}],[\"1057\",{\"1\":{\"125\":1}}],[\"1056\",{\"1\":{\"125\":1}}],[\"1055\",{\"1\":{\"125\":1}}],[\"1054\",{\"1\":{\"125\":1}}],[\"105361948\",{\"1\":{\"1738\":1}}],[\"1053\",{\"1\":{\"125\":1}}],[\"1052\",{\"1\":{\"125\":1}}],[\"1051\",{\"1\":{\"125\":1}}],[\"1050\",{\"1\":{\"125\":1}}],[\"104\",{\"1\":{\"2188\":1}}],[\"1049\",{\"1\":{\"125\":1}}],[\"1048\",{\"1\":{\"125\":1}}],[\"1047\",{\"1\":{\"125\":1}}],[\"1046\",{\"1\":{\"125\":1}}],[\"1045\",{\"1\":{\"125\":1}}],[\"1044\",{\"1\":{\"125\":1}}],[\"1043\",{\"1\":{\"125\":1}}],[\"1042\",{\"1\":{\"125\":1}}],[\"1041\",{\"1\":{\"125\":1}}],[\"1040\",{\"1\":{\"125\":1}}],[\"1029\",{\"1\":{\"125\":1}}],[\"1028\",{\"1\":{\"125\":1}}],[\"1027\",{\"1\":{\"125\":1}}],[\"1026\",{\"1\":{\"125\":1}}],[\"1025\",{\"1\":{\"125\":1}}],[\"10240\",{\"1\":{\"1734\":1,\"1764\":1}}],[\"1024\",{\"1\":{\"125\":1,\"216\":1,\"232\":1,\"303\":1,\"694\":6,\"729\":1,\"746\":1,\"747\":1,\"1111\":1,\"1221\":1,\"1224\":5,\"1228\":1,\"1235\":2,\"1238\":5,\"1315\":1,\"1324\":1,\"1332\":1,\"1338\":2,\"1385\":1,\"1595\":1,\"1684\":1,\"1833\":8,\"2831\":1,\"2833\":1,\"2843\":1,\"2844\":1,\"2855\":1,\"2857\":2,\"2868\":4,\"2878\":2,\"2885\":1,\"2892\":1,\"2893\":1,\"2897\":1,\"2914\":1,\"2915\":1,\"2916\":1,\"2917\":2,\"2921\":2,\"3065\":2,\"3066\":1,\"3079\":1,\"3116\":1,\"3118\":1,\"3120\":1,\"3126\":1}}],[\"1023\",{\"1\":{\"125\":1}}],[\"1022\",{\"1\":{\"125\":1}}],[\"1021\",{\"1\":{\"125\":1}}],[\"1020\",{\"1\":{\"125\":1}}],[\"1079\",{\"1\":{\"125\":1}}],[\"1077\",{\"1\":{\"125\":1}}],[\"1076\",{\"1\":{\"125\":1}}],[\"1075\",{\"1\":{\"125\":1}}],[\"1073\",{\"1\":{\"125\":1}}],[\"1072\",{\"1\":{\"125\":1}}],[\"1071\",{\"1\":{\"125\":1}}],[\"1070\",{\"1\":{\"125\":1}}],[\"1078\",{\"1\":{\"115\":2,\"125\":1}}],[\"1074\",{\"1\":{\"115\":1,\"125\":1}}],[\"1019\",{\"1\":{\"125\":1}}],[\"1018\",{\"1\":{\"125\":1}}],[\"1017\",{\"1\":{\"125\":1}}],[\"1016\",{\"1\":{\"125\":1}}],[\"1015\",{\"1\":{\"125\":1}}],[\"1014\",{\"1\":{\"125\":1}}],[\"1013\",{\"1\":{\"125\":1}}],[\"1012\",{\"1\":{\"125\":1}}],[\"1011\",{\"1\":{\"125\":1}}],[\"1010\",{\"1\":{\"125\":1}}],[\"101\",{\"1\":{\"102\":1,\"1865\":1,\"2188\":1}}],[\"1039\",{\"1\":{\"125\":1}}],[\"1038\",{\"1\":{\"125\":1}}],[\"1037\",{\"1\":{\"125\":1}}],[\"1036\",{\"1\":{\"125\":1}}],[\"1035\",{\"1\":{\"125\":1}}],[\"1034\",{\"1\":{\"125\":1}}],[\"1033\",{\"1\":{\"125\":1}}],[\"1032\",{\"1\":{\"125\":1}}],[\"1031\",{\"1\":{\"125\":1}}],[\"1030\",{\"1\":{\"125\":1}}],[\"103\",{\"1\":{\"102\":1,\"1496\":2,\"1497\":1,\"1498\":2,\"1499\":3}}],[\"100g\",{\"1\":{\"3264\":4,\"3275\":2}}],[\"100倍\",{\"1\":{\"2974\":1}}],[\"100秒\",{\"1\":{\"1882\":1}}],[\"100m\",{\"1\":{\"1615\":1,\"1675\":1,\"1746\":1}}],[\"100mb\",{\"1\":{\"1238\":1,\"2868\":1}}],[\"100px\",{\"1\":{\"1440\":3,\"1442\":1}}],[\"100个连接\",{\"1\":{\"193\":1}}],[\"100\",{\"1\":{\"160\":1,\"193\":2,\"538\":1,\"609\":2,\"693\":1,\"1038\":1,\"1053\":2,\"1058\":1,\"1123\":2,\"1238\":1,\"1397\":1,\"1638\":1,\"1833\":2,\"1887\":6,\"2080\":1,\"2099\":1,\"2101\":1,\"2113\":1,\"2280\":2,\"2311\":1,\"2466\":1,\"2837\":1,\"2849\":2,\"2868\":1,\"3208\":1}}],[\"1009\",{\"1\":{\"125\":1}}],[\"10086\",{\"1\":{\"3177\":1}}],[\"1008\",{\"1\":{\"125\":1}}],[\"1007\",{\"1\":{\"125\":1}}],[\"1006\",{\"1\":{\"125\":1}}],[\"1005\",{\"1\":{\"125\":1}}],[\"1004\",{\"1\":{\"125\":1}}],[\"1003\",{\"1\":{\"125\":1}}],[\"1002m\",{\"1\":{\"1885\":2}}],[\"1002\",{\"1\":{\"125\":1,\"1885\":1}}],[\"10014\",{\"1\":{\"1697\":1,\"1698\":2,\"1713\":6}}],[\"10010\",{\"1\":{\"1650\":6,\"1713\":6}}],[\"10013\",{\"1\":{\"1548\":1,\"1650\":6}}],[\"1001\",{\"1\":{\"98\":1,\"125\":1,\"2903\":1}}],[\"1000mi\",{\"1\":{\"1698\":1}}],[\"10009\",{\"1\":{\"1650\":6,\"1713\":6}}],[\"10008\",{\"1\":{\"1650\":6,\"1713\":6}}],[\"10007\",{\"1\":{\"1650\":6,\"1713\":6}}],[\"10006\",{\"1\":{\"1650\":6,\"1713\":6}}],[\"10005\",{\"1\":{\"1650\":6,\"1713\":6}}],[\"10004\",{\"1\":{\"1638\":1,\"1650\":6,\"1713\":6}}],[\"10003\",{\"1\":{\"1638\":1,\"1650\":6,\"1713\":6}}],[\"10002\",{\"1\":{\"1638\":1,\"1661\":2,\"1713\":6}}],[\"10001\",{\"1\":{\"1638\":1,\"1646\":2,\"1650\":6,\"1713\":6}}],[\"10000l\",{\"1\":{\"2080\":1,\"2099\":1}}],[\"1000000\",{\"1\":{\"2311\":1,\"2409\":1,\"2452\":5}}],[\"10000000\",{\"1\":{\"1264\":1}}],[\"100000\",{\"1\":{\"1043\":1,\"1179\":1,\"1578\":1,\"2276\":1,\"2327\":1,\"2449\":5,\"2524\":1,\"2536\":1}}],[\"10000\",{\"1\":{\"626\":1,\"677\":1,\"1041\":2,\"1056\":1,\"1150\":1,\"1193\":1,\"1638\":1,\"2202\":2,\"2328\":1,\"2522\":1}}],[\"10000次请求对应的性能\",{\"1\":{\"193\":1}}],[\"1000\",{\"1\":{\"98\":1,\"106\":1,\"125\":1,\"193\":1,\"609\":2,\"625\":1,\"626\":1,\"675\":1,\"676\":1,\"1056\":1,\"1151\":1,\"1186\":1,\"1237\":2,\"1337\":1,\"1443\":1,\"2080\":1,\"2099\":1,\"2278\":1,\"2328\":1,\"2344\":2,\"2355\":2,\"2386\":1,\"2423\":1,\"2523\":1,\"2524\":1,\"2539\":1,\"2555\":2,\"2604\":1,\"2614\":1,\"2685\":1,\"3100\":1}}],[\"10\",{\"0\":{\"1730\":1,\"1775\":1,\"1825\":1,\"1912\":1,\"2052\":1,\"2053\":1,\"2054\":1},\"1\":{\"48\":1,\"85\":1,\"115\":1,\"190\":2,\"232\":13,\"246\":1,\"263\":1,\"306\":1,\"307\":1,\"468\":1,\"538\":1,\"543\":1,\"544\":1,\"566\":1,\"606\":1,\"625\":1,\"626\":1,\"677\":1,\"728\":2,\"773\":1,\"774\":1,\"1037\":1,\"1040\":2,\"1053\":1,\"1058\":1,\"1059\":1,\"1144\":1,\"1145\":1,\"1198\":1,\"1224\":1,\"1243\":1,\"1270\":2,\"1280\":1,\"1397\":1,\"1443\":2,\"1444\":1,\"1469\":4,\"1478\":1,\"1483\":5,\"1484\":1,\"1490\":2,\"1495\":1,\"1498\":5,\"1499\":5,\"1530\":1,\"1532\":1,\"1533\":1,\"1534\":2,\"1535\":5,\"1586\":5,\"1613\":2,\"1626\":6,\"1638\":2,\"1643\":1,\"1644\":2,\"1660\":4,\"1661\":6,\"1673\":2,\"1684\":13,\"1698\":1,\"1715\":6,\"1735\":1,\"1736\":1,\"1744\":2,\"1779\":1,\"1865\":3,\"1879\":1,\"1887\":1,\"2057\":1,\"2078\":3,\"2079\":1,\"2080\":1,\"2089\":1,\"2099\":1,\"2101\":1,\"2109\":1,\"2110\":1,\"2113\":5,\"2114\":2,\"2132\":1,\"2133\":1,\"2146\":1,\"2150\":1,\"2161\":1,\"2216\":2,\"2269\":2,\"2271\":1,\"2316\":3,\"2318\":1,\"2320\":1,\"2327\":1,\"2328\":1,\"2406\":2,\"2407\":1,\"2408\":2,\"2433\":1,\"2466\":1,\"2522\":1,\"2539\":1,\"2661\":3,\"2785\":2,\"2849\":2,\"2970\":1,\"2986\":1,\"3025\":1,\"3028\":1,\"3035\":2,\"3082\":1,\"3100\":1,\"3217\":1,\"3246\":1,\"3256\":1,\"3266\":8,\"3267\":4,\"3273\":7,\"3276\":2,\"3282\":10}}],[\"1\",{\"0\":{\"34\":1,\"37\":1,\"41\":1,\"47\":1,\"52\":1,\"58\":1,\"62\":1,\"68\":1,\"73\":1,\"79\":1,\"80\":2,\"81\":1,\"84\":1,\"89\":1,\"93\":1,\"126\":1,\"145\":1,\"146\":2,\"148\":2,\"149\":1,\"150\":2,\"151\":1,\"152\":1,\"153\":1,\"154\":1,\"155\":1,\"156\":2,\"157\":1,\"159\":1,\"160\":2,\"161\":1,\"162\":1,\"164\":1,\"165\":2,\"166\":1,\"167\":1,\"171\":1,\"175\":1,\"176\":2,\"177\":1,\"180\":1,\"184\":1,\"197\":1,\"198\":2,\"199\":1,\"206\":1,\"210\":1,\"215\":1,\"218\":1,\"221\":1,\"225\":1,\"238\":1,\"248\":1,\"253\":1,\"271\":1,\"308\":1,\"311\":1,\"321\":1,\"335\":1,\"348\":1,\"363\":1,\"377\":1,\"388\":1,\"391\":1,\"396\":1,\"402\":1,\"403\":2,\"404\":1,\"409\":1,\"415\":1,\"421\":1,\"427\":1,\"432\":1,\"438\":1,\"443\":1,\"449\":1,\"454\":1,\"467\":1,\"468\":2,\"469\":1,\"471\":1,\"476\":1,\"479\":1,\"482\":2,\"485\":1,\"486\":1,\"490\":1,\"499\":1,\"500\":2,\"501\":1,\"502\":1,\"504\":1,\"508\":1,\"512\":1,\"513\":1,\"517\":1,\"526\":1,\"537\":1,\"541\":1,\"547\":1,\"548\":1,\"552\":1,\"561\":1,\"562\":1,\"566\":1,\"573\":1,\"574\":1,\"577\":1,\"580\":1,\"583\":1,\"586\":1,\"588\":2,\"589\":1,\"590\":1,\"592\":1,\"595\":1,\"599\":1,\"605\":2,\"606\":1,\"607\":1,\"609\":1,\"612\":1,\"615\":1,\"621\":2,\"622\":1,\"623\":1,\"625\":1,\"628\":1,\"631\":1,\"637\":2,\"638\":1,\"639\":1,\"641\":1,\"645\":1,\"648\":1,\"654\":2,\"655\":1,\"656\":1,\"658\":1,\"662\":1,\"665\":1,\"671\":2,\"672\":1,\"673\":1,\"675\":1,\"679\":1,\"683\":1,\"687\":1,\"689\":2,\"690\":1,\"691\":1,\"693\":1,\"696\":1,\"700\":1,\"706\":2,\"707\":1,\"708\":1,\"710\":1,\"713\":1,\"717\":1,\"723\":2,\"724\":1,\"725\":1,\"727\":1,\"731\":1,\"735\":1,\"741\":2,\"742\":1,\"743\":1,\"745\":1,\"749\":1,\"753\":1,\"759\":2,\"760\":1,\"761\":2,\"762\":1,\"763\":1,\"764\":2,\"765\":1,\"766\":1,\"767\":1,\"768\":1,\"769\":2,\"770\":1,\"772\":1,\"776\":1,\"780\":1,\"787\":2,\"788\":3,\"789\":2,\"790\":2,\"791\":1,\"792\":2,\"793\":1,\"794\":1,\"795\":2,\"796\":1,\"797\":1,\"798\":1,\"800\":1,\"801\":2,\"802\":1,\"804\":1,\"809\":1,\"813\":1,\"821\":2,\"822\":3,\"823\":2,\"824\":2,\"825\":1,\"826\":2,\"827\":1,\"828\":1,\"829\":2,\"830\":1,\"831\":1,\"832\":1,\"834\":1,\"835\":2,\"836\":1,\"838\":1,\"843\":1,\"847\":1,\"855\":2,\"856\":3,\"857\":2,\"858\":2,\"859\":1,\"860\":2,\"861\":1,\"862\":1,\"863\":2,\"864\":1,\"865\":1,\"866\":1,\"868\":1,\"869\":2,\"870\":1,\"872\":1,\"877\":1,\"881\":1,\"889\":2,\"890\":3,\"891\":2,\"892\":2,\"893\":1,\"894\":2,\"895\":1,\"896\":1,\"897\":2,\"898\":1,\"899\":1,\"900\":1,\"902\":1,\"903\":2,\"904\":1,\"906\":1,\"911\":1,\"915\":1,\"924\":1,\"936\":1,\"949\":1,\"971\":1,\"995\":1,\"1009\":1,\"1010\":2,\"1011\":1,\"1012\":1,\"1014\":1,\"1020\":1,\"1023\":1,\"1033\":2,\"1034\":1,\"1036\":1,\"1037\":2,\"1038\":1,\"1040\":1,\"1043\":1,\"1046\":1,\"1048\":1,\"1051\":1,\"1052\":2,\"1053\":1,\"1055\":1,\"1063\":1,\"1071\":1,\"1076\":1,\"1091\":1,\"1094\":1,\"1097\":1,\"1098\":1,\"1103\":1,\"1104\":1,\"1107\":1,\"1110\":1,\"1111\":1,\"1115\":1,\"1121\":1,\"1122\":2,\"1123\":1,\"1125\":1,\"1128\":1,\"1131\":1,\"1134\":1,\"1143\":1,\"1160\":1,\"1164\":1,\"1173\":2,\"1174\":1,\"1175\":1,\"1177\":1,\"1178\":2,\"1179\":1,\"1181\":1,\"1184\":1,\"1185\":2,\"1186\":1,\"1189\":1,\"1190\":2,\"1191\":1,\"1193\":1,\"1198\":1,\"1202\":1,\"1203\":2,\"1204\":1,\"1205\":1,\"1206\":1,\"1208\":1,\"1220\":1,\"1221\":2,\"1222\":1,\"1224\":1,\"1227\":1,\"1234\":1,\"1242\":1,\"1243\":2,\"1244\":1,\"1246\":1,\"1249\":1,\"1258\":1,\"1259\":2,\"1260\":1,\"1261\":1,\"1263\":1,\"1266\":1,\"1269\":1,\"1273\":1,\"1275\":1,\"1285\":1,\"1286\":2,\"1287\":1,\"1288\":1,\"1290\":1,\"1293\":1,\"1294\":2,\"1295\":1,\"1296\":1,\"1298\":1,\"1301\":1,\"1310\":1,\"1311\":2,\"1312\":1,\"1314\":1,\"1318\":1,\"1323\":1,\"1324\":2,\"1325\":1,\"1326\":1,\"1328\":1,\"1330\":1,\"1335\":1,\"1336\":2,\"1337\":1,\"1338\":1,\"1339\":1,\"1341\":1,\"1351\":1,\"1357\":1,\"1362\":1,\"1395\":1,\"1404\":1,\"1414\":1,\"1430\":2,\"1431\":1,\"1432\":1,\"1433\":1,\"1434\":1,\"1435\":1,\"1436\":1,\"1437\":1,\"1441\":1,\"1446\":2,\"1447\":1,\"1448\":1,\"1449\":1,\"1455\":1,\"1461\":1,\"1466\":1,\"1468\":1,\"1474\":1,\"1480\":1,\"1486\":1,\"1497\":1,\"1508\":1,\"1515\":1,\"1522\":1,\"1529\":1,\"1537\":1,\"1540\":1,\"1544\":1,\"1562\":1,\"1577\":1,\"1580\":1,\"1588\":1,\"1593\":1,\"1598\":1,\"1603\":1,\"1626\":1,\"1633\":1,\"1636\":1,\"1640\":1,\"1648\":1,\"1679\":1,\"1683\":1,\"1684\":1,\"1687\":1,\"1690\":1,\"1702\":1,\"1705\":1,\"1715\":1,\"1721\":1,\"1734\":1,\"1763\":1,\"1766\":1,\"1813\":1,\"1816\":1,\"1890\":1,\"1894\":1,\"1901\":1,\"1903\":1,\"1914\":1,\"1944\":1,\"1957\":1,\"1970\":1,\"1983\":1,\"1994\":1,\"1996\":1,\"2004\":1,\"2005\":2,\"2007\":1,\"2009\":1,\"2012\":1,\"2016\":1,\"2017\":2,\"2018\":1,\"2020\":1,\"2023\":1,\"2026\":1,\"2031\":1,\"2032\":2,\"2033\":1,\"2035\":1,\"2037\":1,\"2039\":1,\"2044\":1,\"2050\":1,\"2053\":1,\"2057\":1,\"2061\":1,\"2065\":1,\"2070\":1,\"2076\":1,\"2089\":1,\"2099\":1,\"2109\":1,\"2123\":1,\"2125\":1,\"2128\":1,\"2132\":1,\"2139\":2,\"2142\":1,\"2143\":2,\"2144\":1,\"2146\":1,\"2149\":1,\"2154\":1,\"2155\":2,\"2156\":1,\"2158\":1,\"2162\":1,\"2165\":1,\"2166\":2,\"2167\":1,\"2169\":1,\"2173\":1,\"2176\":1,\"2177\":2,\"2178\":1,\"2180\":1,\"2184\":1,\"2187\":1,\"2188\":2,\"2189\":1,\"2191\":1,\"2194\":1,\"2200\":1,\"2201\":2,\"2202\":1,\"2204\":1,\"2208\":1,\"2211\":1,\"2212\":2,\"2213\":1,\"2214\":1,\"2216\":1,\"2220\":1,\"2223\":1,\"2226\":1,\"2227\":2,\"2228\":1,\"2230\":1,\"2235\":1,\"2238\":1,\"2239\":2,\"2240\":1,\"2242\":1,\"2245\":1,\"2248\":1,\"2251\":1,\"2252\":2,\"2253\":1,\"2255\":1,\"2258\":1,\"2261\":1,\"2262\":2,\"2263\":1,\"2265\":1,\"2268\":1,\"2271\":1,\"2274\":1,\"2275\":2,\"2276\":1,\"2278\":1,\"2283\":1,\"2286\":1,\"2287\":2,\"2288\":1,\"2289\":1,\"2291\":1,\"2294\":1,\"2299\":1,\"2302\":1,\"2306\":1,\"2307\":2,\"2308\":1,\"2310\":1,\"2312\":2,\"2314\":2,\"2315\":1,\"2316\":1,\"2317\":1,\"2318\":2,\"2319\":1,\"2320\":1,\"2322\":1,\"2323\":2,\"2324\":1,\"2331\":1,\"2339\":1,\"2340\":2,\"2341\":1,\"2342\":1,\"2344\":1,\"2348\":1,\"2351\":1,\"2359\":1,\"2361\":2,\"2362\":1,\"2363\":1,\"2364\":1,\"2365\":2,\"2366\":1,\"2367\":1,\"2369\":1,\"2375\":1,\"2381\":1,\"2382\":2,\"2383\":1,\"2385\":1,\"2388\":1,\"2396\":1,\"2398\":2,\"2399\":1,\"2400\":1,\"2401\":1,\"2402\":2,\"2403\":1,\"2404\":1,\"2406\":1,\"2412\":1,\"2418\":1,\"2419\":2,\"2420\":1,\"2422\":1,\"2430\":1,\"2432\":2,\"2433\":1,\"2434\":1,\"2436\":1,\"2443\":1,\"2448\":1,\"2457\":1,\"2459\":2,\"2460\":1,\"2461\":1,\"2462\":1,\"2463\":1,\"2465\":1,\"2470\":1,\"2475\":1,\"2476\":2,\"2477\":1,\"2480\":1,\"2487\":1,\"2489\":2,\"2490\":1,\"2491\":1,\"2493\":1,\"2500\":1,\"2505\":1,\"2514\":1,\"2516\":2,\"2517\":1,\"2518\":1,\"2519\":1,\"2520\":1,\"2522\":1,\"2527\":1,\"2532\":1,\"2533\":2,\"2534\":1,\"2536\":1,\"2539\":1,\"2545\":1,\"2547\":2,\"2548\":1,\"2549\":1,\"2551\":1,\"2554\":1,\"2557\":1,\"2561\":1,\"2565\":1,\"2567\":2,\"2568\":1,\"2569\":1,\"2571\":1,\"2573\":1,\"2577\":1,\"2580\":1,\"2584\":1,\"2589\":1,\"2591\":2,\"2592\":1,\"2595\":1,\"2598\":1,\"2599\":2,\"2600\":1,\"2601\":1,\"2604\":1,\"2607\":1,\"2612\":1,\"2617\":1,\"2619\":2,\"2620\":1,\"2623\":1,\"2624\":1,\"2626\":1,\"2627\":2,\"2628\":1,\"2629\":1,\"2630\":1,\"2634\":1,\"2639\":1,\"2644\":1,\"2646\":2,\"2647\":1,\"2650\":1,\"2651\":1,\"2653\":1,\"2654\":2,\"2655\":1,\"2656\":1,\"2657\":1,\"2660\":1,\"2663\":1,\"2668\":1,\"2673\":2,\"2675\":2,\"2676\":1,\"2677\":1,\"2679\":1,\"2687\":1,\"2691\":1,\"2699\":1,\"2701\":2,\"2702\":1,\"2703\":1,\"2704\":1,\"2706\":1,\"2707\":3,\"2708\":1,\"2709\":1,\"2710\":1,\"2714\":1,\"2715\":2,\"2716\":1,\"2719\":1,\"2720\":2,\"2721\":1,\"2723\":1,\"2729\":2,\"2732\":1,\"2733\":2,\"2734\":1,\"2736\":1,\"2740\":1,\"2744\":1,\"2745\":2,\"2746\":1,\"2748\":1,\"2755\":1,\"2758\":1,\"2759\":2,\"2760\":1,\"2761\":1,\"2763\":1,\"2766\":1,\"2769\":1,\"2770\":2,\"2771\":1,\"2772\":1,\"2781\":1,\"2784\":1,\"2791\":1,\"2794\":1,\"2803\":1,\"2806\":1,\"2807\":1,\"2815\":1,\"2818\":1,\"2827\":2,\"2830\":1,\"2838\":1,\"2841\":1,\"2850\":1,\"2853\":1,\"2862\":1,\"2865\":1,\"2874\":1,\"2877\":1,\"2886\":1,\"2889\":1,\"2898\":1,\"2901\":1,\"2910\":1,\"2913\":1,\"2925\":1,\"2935\":1,\"2946\":1,\"2947\":2,\"2948\":1,\"2949\":1,\"2951\":1,\"2955\":1,\"2964\":1,\"2965\":2,\"2966\":1,\"2968\":1,\"2979\":1,\"2980\":2,\"2981\":1,\"2983\":1,\"2986\":1,\"2989\":1,\"2998\":1,\"2999\":2,\"3000\":1,\"3002\":1,\"3005\":1,\"3007\":1,\"3015\":1,\"3016\":2,\"3017\":1,\"3019\":1,\"3023\":1,\"3027\":1,\"3033\":1,\"3034\":2,\"3035\":1,\"3036\":1,\"3038\":1,\"3045\":1,\"3046\":2,\"3047\":1,\"3049\":1,\"3052\":1,\"3057\":1,\"3058\":2,\"3059\":1,\"3061\":1,\"3064\":1,\"3074\":1,\"3075\":2,\"3076\":1,\"3078\":1,\"3082\":1,\"3085\":1,\"3095\":1,\"3096\":2,\"3097\":1,\"3099\":1,\"3102\":1,\"3106\":1,\"3115\":1,\"3116\":2,\"3117\":1,\"3118\":1,\"3120\":1,\"3123\":1,\"3134\":1,\"3145\":1,\"3147\":1,\"3158\":1,\"3159\":2,\"3160\":1,\"3162\":1,\"3164\":1,\"3174\":1,\"3175\":2,\"3176\":1,\"3177\":1,\"3179\":1,\"3182\":1,\"3187\":1,\"3194\":1,\"3203\":1,\"3204\":2,\"3205\":1,\"3206\":1,\"3208\":1,\"3211\":1,\"3214\":1,\"3217\":1,\"3222\":1,\"3232\":1,\"3234\":1,\"3237\":1,\"3240\":1,\"3243\":1,\"3246\":1,\"3265\":1,\"3272\":1,\"3274\":1,\"3275\":2,\"3276\":1,\"3278\":1,\"3281\":1,\"3321\":1,\"3323\":2,\"3325\":1,\"3326\":1,\"3327\":1,\"3328\":1,\"3329\":1,\"3330\":1,\"3331\":1,\"3332\":1,\"3334\":1},\"1\":{\"20\":1,\"21\":1,\"29\":2,\"31\":2,\"48\":1,\"49\":1,\"58\":2,\"59\":1,\"68\":2,\"85\":3,\"86\":1,\"89\":3,\"90\":3,\"114\":3,\"115\":8,\"116\":1,\"121\":2,\"122\":2,\"125\":4,\"129\":1,\"137\":1,\"147\":2,\"150\":1,\"154\":1,\"157\":1,\"166\":1,\"171\":2,\"178\":1,\"189\":3,\"190\":4,\"191\":3,\"192\":3,\"216\":1,\"235\":1,\"236\":1,\"238\":2,\"239\":2,\"242\":4,\"249\":1,\"261\":2,\"263\":1,\"264\":1,\"267\":1,\"282\":1,\"283\":5,\"284\":3,\"285\":5,\"286\":3,\"287\":3,\"288\":3,\"289\":8,\"291\":1,\"292\":3,\"294\":3,\"305\":1,\"307\":1,\"439\":1,\"459\":3,\"461\":2,\"462\":1,\"463\":3,\"472\":2,\"482\":2,\"495\":1,\"537\":1,\"539\":1,\"543\":2,\"545\":3,\"574\":2,\"575\":1,\"577\":1,\"578\":2,\"580\":1,\"626\":1,\"629\":1,\"658\":1,\"675\":1,\"676\":5,\"693\":1,\"717\":2,\"728\":1,\"729\":1,\"735\":1,\"738\":1,\"746\":1,\"747\":1,\"756\":2,\"797\":1,\"831\":1,\"865\":1,\"899\":1,\"997\":2,\"1037\":2,\"1044\":1,\"1053\":1,\"1055\":2,\"1068\":1,\"1069\":1,\"1079\":1,\"1087\":1,\"1094\":4,\"1095\":3,\"1111\":1,\"1123\":1,\"1132\":1,\"1139\":2,\"1160\":3,\"1161\":13,\"1162\":3,\"1164\":3,\"1165\":1,\"1166\":6,\"1168\":1,\"1170\":4,\"1178\":2,\"1179\":1,\"1182\":3,\"1186\":1,\"1191\":1,\"1193\":2,\"1194\":2,\"1198\":1,\"1221\":1,\"1224\":2,\"1225\":1,\"1227\":1,\"1228\":1,\"1238\":3,\"1246\":2,\"1250\":1,\"1295\":3,\"1296\":2,\"1315\":1,\"1321\":1,\"1324\":3,\"1325\":4,\"1332\":1,\"1337\":2,\"1349\":1,\"1354\":1,\"1355\":3,\"1360\":1,\"1385\":1,\"1388\":1,\"1390\":2,\"1392\":1,\"1399\":1,\"1402\":2,\"1412\":3,\"1414\":2,\"1416\":1,\"1417\":1,\"1418\":1,\"1420\":2,\"1427\":1,\"1431\":2,\"1432\":1,\"1433\":2,\"1434\":2,\"1435\":2,\"1439\":1,\"1440\":3,\"1441\":1,\"1443\":4,\"1444\":6,\"1445\":1,\"1447\":1,\"1450\":1,\"1455\":2,\"1456\":2,\"1457\":2,\"1458\":7,\"1459\":3,\"1461\":2,\"1462\":2,\"1463\":2,\"1464\":2,\"1467\":5,\"1469\":3,\"1478\":1,\"1481\":3,\"1482\":2,\"1483\":4,\"1484\":2,\"1495\":2,\"1496\":2,\"1497\":1,\"1498\":4,\"1499\":4,\"1500\":1,\"1501\":2,\"1503\":5,\"1504\":3,\"1507\":1,\"1508\":1,\"1512\":1,\"1513\":3,\"1515\":1,\"1518\":1,\"1522\":1,\"1526\":1,\"1527\":8,\"1529\":1,\"1531\":1,\"1532\":5,\"1533\":1,\"1538\":1,\"1557\":3,\"1559\":2,\"1563\":1,\"1564\":3,\"1576\":1,\"1577\":11,\"1578\":2,\"1581\":2,\"1582\":2,\"1583\":5,\"1586\":6,\"1595\":1,\"1607\":1,\"1609\":3,\"1610\":4,\"1613\":1,\"1623\":2,\"1626\":2,\"1630\":1,\"1633\":4,\"1635\":6,\"1636\":1,\"1637\":2,\"1638\":3,\"1641\":3,\"1642\":8,\"1644\":1,\"1648\":1,\"1649\":1,\"1650\":6,\"1658\":1,\"1660\":5,\"1667\":3,\"1669\":1,\"1673\":1,\"1677\":7,\"1682\":1,\"1684\":1,\"1685\":1,\"1687\":10,\"1688\":1,\"1696\":1,\"1698\":2,\"1711\":1,\"1713\":11,\"1714\":2,\"1715\":2,\"1724\":8,\"1734\":4,\"1735\":1,\"1736\":1,\"1738\":1,\"1739\":2,\"1744\":1,\"1755\":2,\"1760\":1,\"1763\":2,\"1764\":9,\"1767\":1,\"1768\":1,\"1769\":1,\"1770\":1,\"1771\":1,\"1778\":2,\"1779\":8,\"1780\":1,\"1786\":3,\"1787\":5,\"1788\":9,\"1790\":1,\"1794\":1,\"1799\":1,\"1833\":3,\"1844\":1,\"1866\":1,\"1881\":2,\"1884\":1,\"1886\":2,\"1887\":4,\"1895\":2,\"1897\":1,\"1907\":1,\"1916\":1,\"1920\":2,\"2035\":1,\"2047\":1,\"2078\":1,\"2080\":1,\"2099\":2,\"2100\":1,\"2115\":2,\"2126\":1,\"2128\":1,\"2144\":2,\"2146\":1,\"2147\":3,\"2149\":2,\"2151\":3,\"2155\":1,\"2158\":1,\"2167\":10,\"2169\":3,\"2170\":3,\"2180\":4,\"2181\":1,\"2188\":1,\"2194\":1,\"2195\":1,\"2196\":1,\"2197\":1,\"2198\":1,\"2202\":1,\"2207\":1,\"2212\":3,\"2214\":3,\"2216\":2,\"2217\":2,\"2220\":2,\"2223\":2,\"2228\":1,\"2230\":2,\"2231\":2,\"2246\":2,\"2272\":1,\"2289\":2,\"2291\":1,\"2294\":1,\"2295\":4,\"2316\":5,\"2318\":4,\"2320\":2,\"2323\":2,\"2324\":3,\"2325\":1,\"2326\":3,\"2327\":1,\"2328\":1,\"2329\":1,\"2334\":1,\"2341\":1,\"2346\":4,\"2354\":5,\"2355\":1,\"2356\":2,\"2363\":6,\"2369\":1,\"2370\":1,\"2371\":5,\"2372\":1,\"2373\":1,\"2386\":1,\"2391\":1,\"2404\":3,\"2406\":2,\"2408\":1,\"2410\":2,\"2413\":1,\"2423\":2,\"2427\":1,\"2434\":2,\"2437\":3,\"2438\":2,\"2440\":4,\"2441\":4,\"2455\":7,\"2463\":2,\"2465\":5,\"2466\":1,\"2467\":1,\"2468\":7,\"2477\":1,\"2480\":3,\"2484\":1,\"2489\":1,\"2491\":2,\"2495\":2,\"2498\":1,\"2503\":4,\"2505\":1,\"2511\":3,\"2512\":4,\"2513\":1,\"2520\":4,\"2522\":3,\"2524\":2,\"2534\":4,\"2549\":3,\"2551\":1,\"2569\":2,\"2571\":1,\"2573\":2,\"2575\":2,\"2578\":2,\"2580\":4,\"2588\":1,\"2596\":6,\"2599\":1,\"2600\":3,\"2601\":3,\"2604\":3,\"2612\":1,\"2613\":2,\"2614\":1,\"2615\":1,\"2616\":1,\"2624\":1,\"2632\":1,\"2634\":1,\"2651\":4,\"2655\":1,\"2660\":1,\"2666\":1,\"2668\":1,\"2669\":1,\"2670\":1,\"2677\":1,\"2702\":1,\"2704\":2,\"2707\":1,\"2708\":1,\"2709\":6,\"2710\":6,\"2711\":6,\"2712\":17,\"2716\":3,\"2717\":1,\"2721\":3,\"2724\":4,\"2727\":3,\"2809\":1,\"2821\":1,\"2826\":1,\"2831\":1,\"2833\":1,\"2837\":1,\"2841\":1,\"2843\":1,\"2849\":1,\"2853\":1,\"2866\":1,\"2868\":2,\"2873\":5,\"2878\":2,\"2881\":1,\"2885\":1,\"2891\":1,\"2892\":1,\"2893\":1,\"2897\":2,\"2903\":1,\"2909\":1,\"2911\":1,\"2914\":1,\"2915\":1,\"2916\":1,\"2921\":6,\"2927\":1,\"2942\":2,\"2969\":1,\"2970\":1,\"2971\":1,\"2983\":1,\"2994\":1,\"2999\":2,\"3000\":1,\"3002\":1,\"3005\":1,\"3017\":1,\"3023\":1,\"3024\":2,\"3025\":3,\"3035\":5,\"3040\":1,\"3047\":4,\"3065\":3,\"3066\":3,\"3070\":5,\"3085\":2,\"3104\":1,\"3107\":1,\"3113\":1,\"3118\":1,\"3120\":1,\"3125\":1,\"3134\":1,\"3177\":2,\"3190\":7,\"3208\":1,\"3212\":4,\"3218\":1,\"3232\":1,\"3245\":2,\"3246\":15,\"3248\":1,\"3250\":1,\"3256\":1,\"3260\":1,\"3264\":1,\"3267\":2,\"3269\":1,\"3271\":1,\"3273\":13,\"3275\":2,\"3276\":1,\"3282\":4}}],[\"ibatis\",{\"1\":{\"3164\":1}}],[\"ibdata1\",{\"1\":{\"1586\":2}}],[\"i<num\",{\"1\":{\"2809\":1}}],[\"i<n\",{\"1\":{\"2726\":2}}],[\"i=0\",{\"1\":{\"2726\":2,\"2809\":1}}],[\"i=1\",{\"1\":{\"20\":1}}],[\"i4\",{\"1\":{\"2101\":2}}],[\"i3\",{\"1\":{\"2101\":1}}],[\"i2\",{\"1\":{\"2101\":2}}],[\"i则改成icmp方式\",{\"1\":{\"1879\":1}}],[\"i是表示insert\",{\"1\":{\"1876\":1}}],[\"iy6dn0\",{\"1\":{\"1648\":1,\"1685\":1}}],[\"i52okm\",{\"1\":{\"1648\":1,\"1685\":1}}],[\"i18n\",{\"1\":{\"1517\":1,\"1520\":1}}],[\"ignore\",{\"1\":{\"1503\":2}}],[\"ignored\",{\"1\":{\"125\":4}}],[\"ivh\",{\"1\":{\"1420\":1,\"1482\":2,\"1583\":5,\"1769\":1,\"1770\":1,\"1904\":1}}],[\"iu\",{\"1\":{\"1371\":1,\"1372\":1}}],[\"ie\",{\"1\":{\"1337\":1}}],[\"ihttpmethoddealmodel\",{\"1\":{\"292\":3}}],[\"i++\",{\"1\":{\"284\":1,\"286\":2,\"625\":1,\"626\":1,\"675\":1,\"677\":2,\"773\":1,\"1041\":2,\"1043\":3,\"1056\":3,\"1095\":1,\"1123\":2,\"1150\":1,\"1151\":1,\"1160\":2,\"1161\":1,\"1162\":2,\"1166\":2,\"1170\":3,\"1179\":2,\"1181\":1,\"1186\":1,\"1224\":1,\"1238\":2,\"1250\":2,\"1264\":3,\"1280\":2,\"1312\":1,\"1440\":1,\"1443\":1,\"1444\":1,\"1453\":2,\"2078\":1,\"2128\":1,\"2129\":1,\"2130\":1,\"2132\":1,\"2133\":1,\"2134\":1,\"2147\":1,\"2158\":2,\"2170\":1,\"2173\":1,\"2174\":1,\"2181\":2,\"2183\":1,\"2202\":2,\"2212\":1,\"2214\":1,\"2228\":1,\"2234\":1,\"2269\":1,\"2276\":3,\"2280\":2,\"2294\":1,\"2295\":1,\"2311\":2,\"2325\":1,\"2327\":5,\"2328\":2,\"2348\":1,\"2409\":3,\"2440\":1,\"2449\":3,\"2452\":2,\"2466\":1,\"2495\":1,\"2505\":1,\"2522\":1,\"2524\":2,\"2536\":1,\"2604\":1,\"2708\":1,\"2709\":1,\"2715\":1,\"2716\":1,\"2721\":1,\"2724\":1,\"2726\":2,\"2809\":1,\"2868\":1,\"2897\":1,\"2986\":2,\"3000\":1,\"3002\":1,\"3007\":1,\"3086\":3}}],[\"i+1\",{\"1\":{\"20\":1}}],[\"ipaddr=\",{\"1\":{\"3266\":4}}],[\"ipaddress\",{\"1\":{\"1516\":1,\"2071\":1,\"3255\":1}}],[\"ipinfo\",{\"1\":{\"3246\":7}}],[\"ipip\",{\"1\":{\"1634\":1,\"1638\":1,\"1675\":1}}],[\"ip模型将复杂的网络通信分解为多个独立的层次\",{\"1\":{\"3068\":1}}],[\"ip模型是实际应用中广泛采用的网络模型\",{\"1\":{\"3059\":1}}],[\"ip四层模型\",{\"0\":{\"3059\":1}}],[\"ip协议栈的底层机制\",{\"1\":{\"3072\":1}}],[\"ip协议栈\",{\"1\":{\"3055\":1}}],[\"ip协议深度解析\",{\"0\":{\"1310\":1}}],[\"ipv6init=\",{\"1\":{\"3266\":4}}],[\"ipv6init=yes\",{\"1\":{\"1918\":1}}],[\"ipv6\",{\"1\":{\"1918\":4,\"3266\":16}}],[\"ipv4\",{\"1\":{\"1569\":1,\"1918\":1,\"3266\":4,\"3271\":2}}],[\"ip地址过滤\",{\"1\":{\"3107\":1}}],[\"ip地址和端口\",{\"1\":{\"3065\":1}}],[\"ip地址\",{\"0\":{\"3266\":1},\"1\":{\"1917\":2,\"2071\":1}}],[\"iptable\",{\"1\":{\"1788\":1}}],[\"iptables\",{\"0\":{\"1876\":1},\"1\":{\"1610\":2,\"1788\":1,\"1835\":1,\"1876\":8}}],[\"ip和端口号不正确\",{\"1\":{\"1788\":1}}],[\"ip=0\",{\"1\":{\"1734\":1,\"1764\":1}}],[\"ip=127\",{\"1\":{\"242\":2}}],[\"ippool\",{\"1\":{\"1638\":1}}],[\"ip+port\",{\"1\":{\"1636\":1,\"1797\":1}}],[\"ip+端口+仓库名+镜像名\",{\"1\":{\"1795\":1}}],[\"ip+端口8080\",{\"1\":{\"1547\":1}}],[\"ip+端口\",{\"1\":{\"1535\":1,\"1630\":1,\"1696\":1,\"1719\":1}}],[\"ip6tables\",{\"1\":{\"1610\":2}}],[\"ip直连的方式实现文件同步\",{\"0\":{\"1502\":1}}],[\"ip绑定\",{\"0\":{\"1406\":1}}],[\"ip4\",{\"1\":{\"1092\":2,\"3180\":2,\"3190\":2}}],[\"ipset\",{\"1\":{\"1610\":1,\"1636\":1,\"1677\":1}}],[\"ips`\",{\"1\":{\"232\":1,\"1684\":1}}],[\"ipsock\",{\"1\":{\"125\":2}}],[\"ip`\",{\"1\":{\"232\":4,\"1684\":4}}],[\"ip\",{\"0\":{\"1406\":1,\"1665\":1},\"1\":{\"125\":1,\"186\":1,\"208\":1,\"216\":1,\"232\":3,\"1094\":1,\"1406\":1,\"1407\":1,\"1519\":1,\"1637\":1,\"1648\":2,\"1649\":2,\"1650\":10,\"1656\":2,\"1660\":2,\"1684\":3,\"1764\":1,\"1806\":1,\"1823\":2,\"1881\":1,\"1920\":1,\"3206\":1,\"3218\":1,\"3271\":2,\"3273\":2}}],[\"ip套接字\",{\"1\":{\"125\":1}}],[\"ios部署文档\",{\"0\":{\"3288\":1}}],[\"iostat\",{\"0\":{\"1884\":1},\"1\":{\"1835\":1,\"1884\":1}}],[\"iopool\",{\"1\":{\"3218\":3}}],[\"io密集型应用\",{\"1\":{\"3130\":1}}],[\"io密集型任务\",{\"1\":{\"629\":1}}],[\"io密集型任务的线程数可以设置为cpu核心数\",{\"1\":{\"602\":1}}],[\"io处理与业务分离\",{\"1\":{\"3121\":1}}],[\"io层\",{\"1\":{\"3089\":1}}],[\"io体系的基础\",{\"1\":{\"2839\":1}}],[\"io操作完成后通知应用程序\",{\"1\":{\"3080\":1}}],[\"io操作直接与buffer交互\",{\"1\":{\"3079\":1}}],[\"io操作仍在应用线程中完成\",{\"1\":{\"2921\":1}}],[\"io操作必须捕获或声明ioexception\",{\"1\":{\"2848\":1}}],[\"io操作必须进行异常处理\",{\"1\":{\"2836\":1}}],[\"io操作的平均等待时间\",{\"1\":{\"1884\":1}}],[\"io中一种特殊的输入流\",{\"1\":{\"2887\":1}}],[\"io中用于方便地输出各种数据类型的特殊流\",{\"1\":{\"2899\":1}}],[\"io中用于在字节流和字符流之间进行转换的特殊流\",{\"1\":{\"2875\":1}}],[\"io中用于直接操作文件的流类型\",{\"1\":{\"2828\":1}}],[\"io中提供的一种带缓冲功能的流\",{\"1\":{\"2863\":1}}],[\"io中以字符为单位处理数据的流类型\",{\"1\":{\"2851\":1}}],[\"io中最基础的流类型\",{\"1\":{\"2839\":1}}],[\"io中的bufferedinputstream\",{\"1\":{\"1333\":1}}],[\"io瓶颈\",{\"1\":{\"2728\":1}}],[\"io或网络\",{\"1\":{\"2728\":1}}],[\"io读写\",{\"0\":{\"1887\":1},\"1\":{\"1835\":1}}],[\"io线程仅处理网络读写\",{\"1\":{\"1347\":1}}],[\"io事件\",{\"1\":{\"1328\":1}}],[\"io模型\",{\"1\":{\"3072\":1}}],[\"io模型的演进以及分布式系统的通信设计原则\",{\"1\":{\"3072\":1}}],[\"io模型选择\",{\"1\":{\"1347\":1,\"3091\":1}}],[\"io模型经历了从bio到nio再到aio的演进\",{\"1\":{\"1313\":1}}],[\"io模型演进\",{\"0\":{\"1313\":1,\"3077\":1}}],[\"io框架广泛应用了多种设计模式\",{\"1\":{\"1231\":1}}],[\"io流未正确关闭导致资源泄漏\",{\"1\":{\"1234\":1}}],[\"io流设计模式分析\",{\"0\":{\"1231\":1}}],[\"io流基础概念辨析\",{\"0\":{\"1220\":1}}],[\"io流是java编程中的核心知识点\",{\"1\":{\"1218\":1}}],[\"io流\",{\"0\":{\"1217\":1,\"3328\":1}}],[\"io流等资源未关闭\",{\"1\":{\"781\":1}}],[\"ioc示例\",{\"1\":{\"580\":1}}],[\"ioc的设计思想是解耦\",{\"1\":{\"329\":1}}],[\"ioc容器使用反射的主要步骤\",{\"1\":{\"2999\":1}}],[\"ioc容器反射应用简化实现\",{\"1\":{\"2999\":1}}],[\"ioc容器的核心功能是对象的创建和依赖注入\",{\"1\":{\"2999\":1}}],[\"ioc容器的反射应用\",{\"0\":{\"2999\":1}}],[\"ioc容器能装下\",{\"1\":{\"459\":1}}],[\"ioc容器\",{\"0\":{\"321\":1},\"1\":{\"1266\":1}}],[\"ioc是一种设计原则\",{\"1\":{\"319\":1}}],[\"ioc与di详解\",{\"0\":{\"318\":1}}],[\"ioc\",{\"1\":{\"309\":1,\"311\":1,\"317\":1,\"319\":1,\"3009\":1}}],[\"io异常\",{\"1\":{\"269\":1,\"1044\":1,\"1326\":1,\"1337\":1}}],[\"ioexceptionevent\",{\"1\":{\"1094\":1,\"3190\":1}}],[\"ioexception\",{\"1\":{\"269\":3,\"270\":1,\"274\":1,\"286\":4,\"434\":1,\"456\":1,\"729\":2,\"746\":2,\"747\":2,\"1044\":2,\"1221\":2,\"1222\":2,\"1224\":4,\"1225\":2,\"1228\":4,\"1232\":2,\"1234\":3,\"1237\":1,\"1238\":6,\"1247\":3,\"1253\":2,\"1314\":3,\"1315\":4,\"1321\":3,\"1324\":3,\"1326\":6,\"1336\":2,\"1337\":1,\"1338\":2,\"1431\":3,\"1440\":2,\"1443\":3,\"1444\":3,\"1974\":2,\"1987\":2,\"1988\":2,\"2037\":1,\"2831\":3,\"2832\":2,\"2833\":2,\"2837\":4,\"2843\":3,\"2844\":2,\"2845\":3,\"2849\":4,\"2855\":3,\"2856\":2,\"2857\":3,\"2861\":2,\"2866\":2,\"2867\":2,\"2868\":4,\"2873\":5,\"2878\":3,\"2879\":3,\"2880\":2,\"2885\":2,\"2891\":2,\"2892\":2,\"2893\":1,\"2897\":1,\"2903\":3,\"2915\":2,\"2916\":4,\"2917\":2,\"2921\":10,\"2927\":4,\"2935\":2,\"2951\":1,\"3065\":6,\"3066\":4,\"3078\":1,\"3117\":1,\"3118\":3,\"3120\":5}}],[\"io\",{\"0\":{\"1314\":1,\"1315\":1,\"1316\":1},\"1\":{\"125\":1,\"128\":1,\"193\":1,\"269\":1,\"286\":3,\"728\":6,\"994\":1,\"1004\":1,\"1221\":1,\"1222\":2,\"1224\":1,\"1225\":1,\"1227\":1,\"1228\":1,\"1232\":1,\"1238\":2,\"1431\":1,\"1443\":1,\"1444\":1,\"1609\":3,\"1613\":2,\"1633\":1,\"1638\":5,\"1648\":27,\"1649\":27,\"1650\":180,\"1660\":5,\"1661\":12,\"1667\":1,\"1673\":2,\"1677\":1,\"1685\":27,\"1688\":27,\"1698\":12,\"1713\":198,\"1744\":2,\"1781\":2,\"2263\":2,\"2287\":1,\"2831\":2,\"2832\":2,\"2833\":3,\"2837\":6,\"2843\":3,\"2844\":3,\"2845\":5,\"2849\":7,\"2855\":5,\"2856\":5,\"2857\":5,\"2861\":5,\"2866\":5,\"2867\":5,\"2868\":5,\"2873\":2,\"2878\":3,\"2879\":3,\"2880\":7,\"2885\":2,\"2891\":3,\"2892\":4,\"2893\":1,\"2897\":1,\"2902\":3,\"2903\":3,\"2904\":2,\"2905\":1,\"2909\":2,\"2911\":1,\"2913\":1,\"2915\":3,\"2916\":1,\"2917\":1,\"2921\":2,\"2927\":3,\"2938\":1,\"3065\":6,\"3066\":2,\"3102\":1,\"3107\":1,\"3113\":2,\"3120\":1,\"3214\":1,\"3261\":1}}],[\"illegalstateexception\",{\"0\":{\"2477\":1},\"1\":{\"1326\":1,\"2441\":2,\"2498\":4}}],[\"illegalaccessexception\",{\"1\":{\"1069\":1,\"2989\":1,\"3003\":1}}],[\"illegalargumentexception\",{\"1\":{\"517\":2,\"521\":1,\"1203\":1,\"1295\":1,\"1948\":2,\"1949\":2,\"1962\":4,\"1974\":2,\"1975\":2,\"1987\":2,\"2183\":1,\"2436\":2,\"2512\":1,\"2571\":2,\"2708\":1,\"2715\":1,\"2947\":1,\"2949\":1}}],[\"illegal\",{\"1\":{\"125\":4,\"2436\":1}}],[\"irc\",{\"1\":{\"122\":1}}],[\"imap\",{\"1\":{\"1649\":1,\"1688\":1}}],[\"image基本信息中可以查看\",{\"1\":{\"3246\":1}}],[\"imagepullsecrets\",{\"1\":{\"1648\":1,\"1649\":1,\"1650\":10,\"1661\":1,\"1685\":1,\"1688\":1,\"1698\":1,\"1713\":11}}],[\"imagepullpolicy\",{\"1\":{\"1648\":1,\"1649\":1,\"1650\":10,\"1661\":1,\"1685\":1,\"1688\":1,\"1698\":1,\"1713\":11}}],[\"imagerepo\",{\"1\":{\"1638\":1}}],[\"image=\",{\"1\":{\"1551\":1}}],[\"images\",{\"1\":{\"255\":1,\"1635\":1,\"1637\":2,\"1667\":1,\"1801\":1}}],[\"image\",{\"0\":{\"1668\":1},\"1\":{\"248\":5,\"250\":4,\"251\":1,\"257\":1,\"459\":5,\"460\":3,\"461\":3,\"462\":5,\"463\":3,\"991\":1,\"1004\":1,\"1402\":4,\"1414\":2,\"1416\":1,\"1417\":2,\"1502\":1,\"1503\":3,\"1504\":2,\"1535\":2,\"1541\":1,\"1542\":1,\"1546\":2,\"1548\":1,\"1551\":1,\"1552\":1,\"1562\":3,\"1563\":1,\"1569\":2,\"1571\":1,\"1578\":1,\"1630\":1,\"1641\":3,\"1648\":1,\"1649\":1,\"1650\":10,\"1653\":2,\"1654\":2,\"1655\":5,\"1658\":1,\"1660\":3,\"1661\":2,\"1662\":1,\"1667\":1,\"1677\":2,\"1679\":1,\"1680\":1,\"1681\":1,\"1685\":3,\"1688\":3,\"1690\":1,\"1691\":1,\"1692\":1,\"1693\":1,\"1694\":1,\"1696\":2,\"1698\":2,\"1702\":1,\"1703\":1,\"1704\":2,\"1706\":2,\"1707\":2,\"1708\":1,\"1709\":1,\"1710\":2,\"1711\":1,\"1713\":11,\"1719\":1,\"1764\":1,\"1779\":2,\"1799\":3,\"3245\":1,\"3246\":11,\"3250\":2,\"3261\":3,\"3263\":1,\"3271\":3,\"3272\":3,\"3273\":20,\"3276\":2,\"3278\":3,\"3279\":6,\"3281\":2,\"3282\":8}}],[\"immutableuser\",{\"1\":{\"2779\":2}}],[\"immutablemap\",{\"1\":{\"2406\":2}}],[\"immutableset\",{\"1\":{\"2369\":1}}],[\"immutablecollections\",{\"1\":{\"2358\":3}}],[\"immutablelist\",{\"1\":{\"1191\":2,\"2320\":2,\"2323\":1,\"2358\":2}}],[\"immediate\",{\"1\":{\"1574\":1,\"3276\":1}}],[\"immovables\",{\"1\":{\"285\":2}}],[\"implied\",{\"1\":{\"1578\":1}}],[\"impl\",{\"1\":{\"490\":1,\"1443\":1,\"1444\":1,\"2763\":1}}],[\"implementation\",{\"1\":{\"585\":1}}],[\"implement\",{\"1\":{\"541\":1}}],[\"implements\",{\"1\":{\"290\":1,\"292\":1,\"293\":2,\"382\":1,\"430\":2,\"434\":1,\"541\":1,\"592\":2,\"1094\":1,\"1211\":2,\"1212\":1,\"1225\":1,\"1267\":2,\"1949\":1,\"2077\":2,\"2100\":1,\"2263\":3,\"2287\":1,\"2356\":4,\"2388\":1,\"2441\":1,\"2466\":2,\"2467\":1,\"2498\":2,\"2577\":1,\"2654\":1,\"2669\":1,\"2679\":1,\"2680\":1,\"2734\":1,\"2742\":2,\"2746\":3,\"2748\":2,\"2808\":1,\"2921\":2,\"2938\":1,\"2960\":1,\"2968\":1,\"3002\":1,\"3005\":2,\"3021\":2,\"3049\":1,\"3190\":1,\"3208\":1,\"3217\":1,\"3218\":1}}],[\"implemented\",{\"1\":{\"125\":3}}],[\"import注解导入一个配置类\",{\"1\":{\"423\":1}}],[\"import注解并导入了一些配置类\",{\"1\":{\"417\":1,\"461\":1}}],[\"import原理\",{\"0\":{\"418\":1,\"462\":1}}],[\"import\",{\"1\":{\"269\":13,\"279\":8,\"286\":12,\"289\":11,\"290\":4,\"293\":2,\"417\":1,\"418\":1,\"419\":1,\"423\":1,\"461\":1,\"462\":1,\"463\":3,\"471\":5,\"925\":1,\"1052\":2,\"1094\":5,\"1095\":3,\"1160\":1,\"1162\":2,\"1221\":1,\"1222\":1,\"1224\":2,\"1225\":2,\"1228\":9,\"1232\":4,\"1238\":14,\"1264\":4,\"1267\":3,\"1269\":1,\"1270\":1,\"1280\":1,\"1431\":6,\"1443\":10,\"1444\":13,\"1474\":1,\"1569\":1,\"1798\":1,\"1914\":1,\"2147\":1,\"2149\":1,\"2150\":1,\"2151\":1,\"2170\":1,\"2216\":1,\"2217\":1,\"2218\":1,\"2220\":1,\"2221\":2,\"2223\":1,\"2224\":1,\"2228\":1,\"2269\":1,\"2282\":1,\"2323\":4,\"2324\":2,\"2325\":4,\"2326\":4,\"2327\":3,\"2328\":5,\"2329\":3,\"2369\":2,\"2373\":5,\"2406\":2,\"2407\":2,\"2408\":2,\"2409\":3,\"2410\":5,\"2427\":2,\"2429\":4,\"2465\":4,\"2466\":4,\"2467\":3,\"2468\":2,\"2485\":1,\"2512\":1,\"2513\":5,\"2522\":5,\"2523\":6,\"2524\":2,\"2525\":4,\"2544\":3,\"2685\":1,\"2768\":4,\"2810\":1,\"2831\":2,\"2832\":2,\"2833\":3,\"2837\":7,\"2843\":3,\"2844\":3,\"2845\":5,\"2849\":7,\"2855\":6,\"2856\":5,\"2857\":5,\"2861\":6,\"2866\":5,\"2867\":5,\"2868\":5,\"2873\":2,\"2878\":4,\"2879\":4,\"2880\":8,\"2881\":2,\"2885\":6,\"2891\":3,\"2892\":5,\"2893\":3,\"2897\":3,\"2902\":3,\"2903\":4,\"2904\":2,\"2905\":2,\"2909\":2,\"2914\":1,\"2915\":5,\"2916\":9,\"2917\":5,\"2921\":16,\"2927\":3,\"2938\":1,\"2968\":2,\"2969\":1,\"2970\":1,\"2971\":1,\"2974\":3,\"2983\":1,\"2984\":1,\"2986\":1,\"2989\":2,\"3002\":2,\"3003\":2,\"3005\":5,\"3007\":4,\"3010\":3,\"3065\":9,\"3066\":7,\"3135\":1,\"3137\":1,\"3147\":4,\"3149\":2,\"3159\":3,\"3160\":2,\"3164\":2,\"3165\":2,\"3166\":9,\"3190\":5,\"3205\":4,\"3206\":4,\"3208\":6,\"3209\":4,\"3212\":5,\"3214\":6,\"3215\":7,\"3217\":5}}],[\"importing\",{\"1\":{\"208\":1}}],[\"im\",{\"1\":{\"122\":4}}],[\"imgsrc\",{\"1\":{\"1469\":3,\"1470\":1}}],[\"imgs\",{\"1\":{\"1469\":3}}],[\"img\",{\"1\":{\"101\":1,\"104\":1,\"109\":1,\"112\":2,\"114\":4,\"306\":1,\"1440\":1,\"1469\":11,\"1722\":1,\"1723\":1,\"1760\":1,\"3260\":1}}],[\"is2q29raxhpv3zesmj6dki2s3vxdnhqbtf5wfgvevpbtdd1u1gkcunntc84ujjjsm53duzhtnfvs\",{\"1\":{\"3273\":1}}],[\"ishizaka\",{\"1\":{\"3273\":1}}],[\"isr\",{\"1\":{\"2855\":2,\"2861\":2,\"2878\":4}}],[\"isreadable\",{\"1\":{\"1228\":1,\"1315\":1,\"1324\":1,\"2916\":1,\"2921\":1,\"3079\":1,\"3118\":1}}],[\"isreplacevar\",{\"1\":{\"289\":3}}],[\"iso\",{\"1\":{\"2837\":2,\"2881\":1,\"2885\":1,\"3058\":1}}],[\"isolation\",{\"1\":{\"348\":1}}],[\"isstatic\",{\"1\":{\"3007\":1}}],[\"issingleton\",{\"1\":{\"2999\":1}}],[\"issameobject\",{\"1\":{\"2194\":1}}],[\"issuccess\",{\"1\":{\"2955\":1,\"3224\":1}}],[\"issubset\",{\"1\":{\"2372\":1}}],[\"issuablesubscriptionvisitor\",{\"1\":{\"2027\":1}}],[\"issupported\",{\"1\":{\"2881\":1}}],[\"issupportedformat\",{\"1\":{\"1974\":3,\"1987\":2}}],[\"issupport\",{\"1\":{\"292\":3}}],[\"issued\",{\"1\":{\"279\":1}}],[\"isvalidstatetransition\",{\"1\":{\"3223\":1}}],[\"isvalid\",{\"1\":{\"2061\":2,\"2554\":1,\"3241\":1}}],[\"isvipchannel=false\",{\"1\":{\"250\":1}}],[\"ismaster\",{\"1\":{\"1738\":2,\"1764\":1}}],[\"isconnected\",{\"1\":{\"1326\":2}}],[\"isclosed\",{\"1\":{\"1326\":7}}],[\"isletterordigit\",{\"1\":{\"1165\":2}}],[\"islowercase\",{\"1\":{\"1087\":1}}],[\"ispositionindex\",{\"1\":{\"2494\":2,\"2498\":1}}],[\"ispositive\",{\"1\":{\"1253\":2}}],[\"isperson\",{\"1\":{\"2115\":1}}],[\"ispalindrome\",{\"1\":{\"1165\":3}}],[\"ispresent\",{\"1\":{\"474\":1,\"544\":2,\"554\":1}}],[\"isuppercase\",{\"1\":{\"1087\":1}}],[\"isinterrupted\",{\"1\":{\"610\":1}}],[\"istio\",{\"1\":{\"1648\":1,\"1649\":1,\"1650\":10,\"1661\":1,\"1685\":1,\"1688\":1,\"1698\":1,\"1713\":11}}],[\"istio等服务网格技术补充传统java\",{\"1\":{\"571\":1}}],[\"istrue\",{\"1\":{\"287\":4}}],[\"isgreaterthan5\",{\"1\":{\"557\":2}}],[\"isenum\",{\"1\":{\"3007\":1}}],[\"iselementindex\",{\"1\":{\"2495\":2}}],[\"isequalignorecase\",{\"1\":{\"2194\":1}}],[\"isequal\",{\"1\":{\"2194\":1}}],[\"isevenandgreaterthan5\",{\"1\":{\"557\":1}}],[\"iseven\",{\"1\":{\"557\":2}}],[\"isempty\",{\"1\":{\"474\":1,\"495\":1,\"642\":1,\"1095\":1,\"1164\":2,\"1165\":1,\"1166\":1,\"1170\":1,\"1962\":1,\"1975\":1,\"2058\":2,\"2205\":2,\"2314\":1,\"2324\":1,\"2327\":1,\"2467\":1,\"2476\":1,\"2480\":1,\"2554\":2,\"2555\":1,\"2577\":1,\"2578\":1,\"2585\":1,\"2688\":1,\"2949\":1,\"2953\":1,\"3086\":2,\"3212\":1}}],[\"isarray\",{\"1\":{\"2234\":1,\"3007\":1}}],[\"isactive\",{\"1\":{\"2032\":1,\"2759\":2}}],[\"isacceptable\",{\"1\":{\"1228\":1,\"1315\":1,\"1324\":1,\"2916\":1,\"2921\":1,\"3079\":1,\"3118\":1}}],[\"isanagram\",{\"1\":{\"1170\":1}}],[\"isannotationpresent\",{\"1\":{\"1069\":2,\"2999\":1,\"3002\":1,\"3003\":3,\"3005\":1,\"3137\":1,\"3149\":2}}],[\"isafter\",{\"1\":{\"545\":2}}],[\"isamchk\",{\"1\":{\"125\":1}}],[\"isblank\",{\"1\":{\"472\":2,\"1059\":1}}],[\"isfile\",{\"1\":{\"286\":1}}],[\"isnotempty\",{\"1\":{\"284\":1,\"289\":1}}],[\"isnull\",{\"1\":{\"267\":2}}],[\"is\",{\"0\":{\"1664\":2},\"1\":{\"122\":2,\"125\":6,\"235\":1,\"500\":1,\"501\":1,\"502\":2,\"504\":1,\"541\":1,\"542\":1,\"544\":1,\"575\":1,\"729\":2,\"746\":2,\"747\":2,\"1004\":1,\"1005\":2,\"1496\":2,\"1513\":1,\"1578\":3,\"1677\":1,\"1788\":2,\"1831\":2,\"1938\":1,\"2408\":1,\"2808\":1,\"2868\":2,\"3003\":1,\"3087\":1,\"3276\":1,\"3282\":2}}],[\"ifs\",{\"1\":{\"3276\":2}}],[\"iftop\",{\"1\":{\"3099\":2}}],[\"ifelsedemo\",{\"1\":{\"2125\":1}}],[\"ifcfg\",{\"1\":{\"1918\":1,\"3266\":8}}],[\"ifconfig\",{\"1\":{\"1851\":1,\"1875\":1}}],[\"ifnotpresent\",{\"1\":{\"1649\":1,\"1688\":1}}],[\"ifpresent\",{\"1\":{\"544\":1}}],[\"if\",{\"0\":{\"2061\":1,\"2125\":1},\"1\":{\"122\":2,\"216\":1,\"267\":2,\"269\":1,\"284\":3,\"285\":2,\"286\":7,\"287\":3,\"289\":6,\"292\":1,\"293\":1,\"307\":1,\"430\":1,\"441\":1,\"456\":3,\"474\":2,\"502\":1,\"504\":1,\"517\":2,\"554\":2,\"613\":2,\"658\":1,\"746\":1,\"993\":1,\"994\":2,\"1044\":2,\"1055\":1,\"1068\":2,\"1069\":4,\"1087\":8,\"1095\":4,\"1161\":6,\"1162\":3,\"1164\":3,\"1165\":2,\"1166\":2,\"1170\":5,\"1181\":3,\"1182\":2,\"1190\":2,\"1203\":1,\"1209\":2,\"1228\":4,\"1234\":1,\"1237\":1,\"1238\":1,\"1247\":1,\"1250\":1,\"1253\":1,\"1295\":1,\"1314\":1,\"1315\":5,\"1324\":3,\"1325\":4,\"1326\":6,\"1338\":2,\"1410\":1,\"1411\":1,\"1431\":2,\"1440\":1,\"1443\":3,\"1444\":2,\"1578\":1,\"1640\":1,\"1764\":1,\"1825\":1,\"1872\":1,\"1881\":1,\"1949\":3,\"1962\":3,\"1974\":2,\"1975\":2,\"1987\":2,\"1988\":1,\"2027\":2,\"2032\":1,\"2033\":1,\"2058\":2,\"2061\":4,\"2078\":5,\"2125\":4,\"2132\":1,\"2133\":1,\"2134\":1,\"2161\":2,\"2183\":1,\"2204\":3,\"2205\":4,\"2207\":2,\"2212\":1,\"2213\":1,\"2214\":1,\"2228\":5,\"2234\":3,\"2255\":3,\"2272\":2,\"2291\":5,\"2294\":4,\"2295\":1,\"2296\":3,\"2318\":4,\"2327\":2,\"2340\":3,\"2341\":1,\"2370\":1,\"2382\":2,\"2407\":1,\"2420\":3,\"2436\":4,\"2437\":2,\"2438\":3,\"2439\":2,\"2440\":5,\"2441\":5,\"2448\":3,\"2450\":1,\"2466\":1,\"2476\":1,\"2477\":1,\"2485\":7,\"2494\":4,\"2495\":2,\"2496\":5,\"2497\":7,\"2498\":7,\"2507\":4,\"2508\":2,\"2512\":5,\"2513\":1,\"2534\":1,\"2536\":2,\"2544\":1,\"2554\":3,\"2571\":1,\"2573\":3,\"2574\":2,\"2575\":3,\"2600\":10,\"2601\":14,\"2605\":2,\"2628\":2,\"2629\":6,\"2630\":2,\"2655\":8,\"2656\":5,\"2657\":8,\"2660\":1,\"2681\":2,\"2682\":1,\"2683\":3,\"2684\":2,\"2704\":1,\"2707\":1,\"2708\":2,\"2709\":3,\"2710\":3,\"2711\":3,\"2715\":1,\"2716\":1,\"2721\":1,\"2724\":1,\"2727\":1,\"2733\":1,\"2749\":2,\"2750\":2,\"2809\":2,\"2831\":1,\"2843\":2,\"2849\":1,\"2873\":7,\"2881\":1,\"2897\":1,\"2916\":4,\"2921\":8,\"2927\":1,\"2942\":1,\"2947\":2,\"2949\":2,\"2953\":1,\"2955\":1,\"2959\":1,\"2986\":1,\"2987\":3,\"2990\":1,\"2999\":4,\"3000\":2,\"3002\":3,\"3003\":5,\"3005\":4,\"3007\":15,\"3023\":1,\"3024\":1,\"3035\":1,\"3065\":3,\"3079\":3,\"3086\":2,\"3087\":6,\"3117\":1,\"3118\":5,\"3120\":2,\"3137\":1,\"3149\":2,\"3154\":4,\"3162\":1,\"3170\":2,\"3205\":7,\"3208\":10,\"3209\":3,\"3212\":4,\"3215\":4,\"3218\":2,\"3222\":3,\"3223\":2,\"3224\":1,\"3238\":2,\"3241\":1,\"3244\":1}}],[\"id一致时用名称\",{\"1\":{\"3245\":1}}],[\"ids\",{\"1\":{\"2144\":1,\"2959\":2}}],[\"id的属性值\",{\"1\":{\"1455\":1,\"1460\":1}}],[\"id选择器\",{\"1\":{\"1455\":1}}],[\"id头\",{\"1\":{\"1094\":1,\"3190\":1}}],[\"id不正确\",{\"1\":{\"1005\":1}}],[\"id不能为空\",{\"1\":{\"428\":1}}],[\"id>\",{\"1\":{\"981\":1,\"984\":1,\"985\":1,\"998\":2,\"999\":7,\"1002\":1,\"1003\":1,\"1005\":1,\"3050\":2,\"3245\":2}}],[\"idle=5\",{\"1\":{\"445\":1}}],[\"id+name\",{\"1\":{\"279\":1}}],[\"ide插件\",{\"1\":{\"2002\":1}}],[\"idea将项目打成jar包\",{\"1\":{\"1645\":1}}],[\"idea的dependencies视图\",{\"1\":{\"1021\":1}}],[\"idea\",{\"1\":{\"510\":1}}],[\"idea常用插件\",{\"0\":{\"295\":1}}],[\"ideaworkspace\",{\"1\":{\"270\":1}}],[\"identitymatrix\",{\"1\":{\"2167\":1}}],[\"identity\",{\"1\":{\"440\":1,\"578\":1,\"3165\":1}}],[\"identitytoken\",{\"1\":{\"285\":4}}],[\"identified\",{\"1\":{\"99\":2,\"100\":2,\"107\":1,\"108\":1,\"228\":1,\"229\":1,\"1573\":1,\"1577\":1,\"1578\":3,\"1775\":1,\"1819\":3,\"1821\":1}}],[\"ident\",{\"1\":{\"125\":1}}],[\"id`\",{\"1\":{\"232\":47,\"1684\":47,\"1687\":2}}],[\"id作为bitmaps的offset\",{\"1\":{\"192\":1}}],[\"idn\",{\"1\":{\"186\":1}}],[\"id2\",{\"1\":{\"186\":1}}],[\"id1\",{\"1\":{\"186\":1}}],[\"id=1622500000000\",{\"1\":{\"3002\":1}}],[\"id=1\",{\"1\":{\"1530\":3}}],[\"id=103\",{\"1\":{\"98\":1}}],[\"id=101\",{\"1\":{\"98\":1,\"106\":1}}],[\"id=0\",{\"1\":{\"1530\":1}}],[\"id=\",{\"1\":{\"439\":5,\"1225\":1,\"1266\":1,\"1431\":3,\"1433\":3,\"1434\":3,\"1435\":3,\"1440\":2,\"1447\":1,\"1450\":2,\"1455\":1,\"1458\":1,\"1461\":3,\"1462\":16,\"1463\":6,\"1464\":9,\"1467\":4,\"1469\":4,\"2903\":1,\"3002\":1,\"3005\":1,\"3053\":2}}],[\"id=repl\",{\"1\":{\"171\":1}}],[\"id与repl\",{\"1\":{\"171\":1}}],[\"id名称\",{\"1\":{\"125\":1}}],[\"id索引\",{\"1\":{\"90\":1}}],[\"id字段和版本控制来实现乐观并发控制\",{\"1\":{\"54\":1}}],[\"id\",{\"1\":{\"37\":1,\"58\":1,\"89\":1,\"167\":2,\"171\":1,\"186\":7,\"208\":1,\"232\":22,\"280\":7,\"303\":1,\"307\":1,\"366\":3,\"380\":3,\"381\":9,\"427\":9,\"428\":1,\"438\":7,\"439\":8,\"440\":6,\"578\":2,\"580\":2,\"992\":1,\"997\":1,\"1068\":2,\"1069\":1,\"1092\":1,\"1225\":5,\"1455\":1,\"1464\":1,\"1590\":1,\"1595\":1,\"1600\":1,\"1642\":22,\"1656\":8,\"1667\":1,\"1684\":22,\"1711\":3,\"1764\":12,\"1791\":2,\"1809\":1,\"1827\":10,\"1833\":1,\"1841\":1,\"1887\":3,\"1948\":2,\"1949\":5,\"1962\":1,\"1997\":1,\"2007\":1,\"2054\":2,\"2266\":2,\"2734\":8,\"2759\":4,\"2779\":5,\"2959\":8,\"3000\":1,\"3002\":5,\"3003\":5,\"3005\":5,\"3049\":1,\"3050\":4,\"3052\":5,\"3053\":2,\"3085\":1,\"3141\":2,\"3154\":1,\"3164\":11,\"3165\":2,\"3170\":4,\"3180\":2,\"3199\":2,\"3209\":1,\"3245\":5,\"3246\":1,\"3271\":1,\"3273\":1,\"3282\":1}}],[\"inactive表示没有激活\",{\"1\":{\"3250\":1}}],[\"injectmocks\",{\"1\":{\"3166\":2}}],[\"inject\",{\"1\":{\"1648\":1,\"1649\":1,\"1650\":10,\"1661\":1,\"1685\":1,\"1688\":1,\"1698\":1,\"1713\":11}}],[\"inject生成依赖注入代码\",{\"1\":{\"1073\":1}}],[\"ingress\",{\"1\":{\"1648\":3,\"1649\":3,\"1650\":3,\"1685\":3,\"1688\":3,\"1713\":3}}],[\"independent\",{\"1\":{\"2044\":1}}],[\"indentation\",{\"1\":{\"2042\":1}}],[\"indexfor\",{\"1\":{\"2599\":1,\"2681\":2,\"2682\":1,\"2683\":1,\"2684\":1}}],[\"indexoutofboundsexception\",{\"0\":{\"2341\":1},\"1\":{\"2161\":1,\"2437\":1,\"2439\":6,\"2440\":1,\"2441\":1,\"2450\":1,\"2494\":3,\"2495\":4,\"2496\":1,\"2707\":1,\"2873\":1,\"2942\":1}}],[\"indexofsub\",{\"1\":{\"2195\":1}}],[\"indexof\",{\"1\":{\"289\":4,\"1041\":1,\"1170\":1,\"2195\":3,\"2314\":1,\"2324\":1,\"3212\":2}}],[\"index++\",{\"1\":{\"1043\":1,\"2440\":2}}],[\"index中索引类似的索引\",{\"1\":{\"125\":1}}],[\"index\",{\"1\":{\"113\":1,\"122\":2,\"125\":5,\"198\":1,\"202\":2,\"216\":3,\"232\":2,\"996\":1,\"1043\":3,\"1161\":2,\"1181\":6,\"1186\":2,\"1363\":1,\"1379\":3,\"1384\":1,\"1385\":3,\"1389\":6,\"1390\":6,\"1409\":3,\"1453\":6,\"1458\":3,\"1469\":2,\"1513\":1,\"1524\":1,\"1527\":1,\"1535\":1,\"1667\":1,\"2150\":2,\"2161\":4,\"2314\":6,\"2324\":2,\"2326\":2,\"2341\":3,\"2345\":2,\"2348\":1,\"2356\":2,\"2437\":7,\"2439\":25,\"2440\":20,\"2441\":2,\"2450\":4,\"2456\":2,\"2494\":13,\"2495\":21,\"2496\":4,\"2498\":9,\"2505\":1,\"2513\":2,\"2544\":2,\"2682\":2,\"2942\":6,\"3002\":2,\"3046\":1,\"3047\":2,\"3246\":1}}],[\"indexname\",{\"1\":{\"90\":1}}],[\"indexes\",{\"1\":{\"68\":1}}],[\"indices\",{\"1\":{\"1513\":1,\"1527\":1}}],[\"in2\",{\"1\":{\"1457\":2}}],[\"in1\",{\"1\":{\"1457\":2}}],[\"inputfiles\",{\"1\":{\"2893\":2,\"2897\":4}}],[\"input表示入站\",{\"1\":{\"1876\":1}}],[\"input\",{\"1\":{\"1440\":2,\"1450\":3,\"1457\":2,\"1459\":3,\"1524\":1,\"1535\":1,\"1788\":1,\"1876\":3,\"2047\":2,\"2861\":1,\"2867\":1,\"3215\":2}}],[\"inputstreams\",{\"1\":{\"2893\":3,\"2897\":4}}],[\"inputstream>\",{\"1\":{\"2890\":1}}],[\"inputstream和outputstream定义接口\",{\"1\":{\"2847\":1}}],[\"inputstream是所有输入字节流的超类\",{\"1\":{\"2841\":1}}],[\"inputstream抽象类\",{\"0\":{\"2841\":1}}],[\"inputstreamreader和filereader的主要区别及使用场景\",{\"1\":{\"2885\":1}}],[\"inputstreamreader和filereader有什么区别\",{\"1\":{\"2885\":1}}],[\"inputstreamreader和outputstreamwriter充当字节流和字符流之间的适配器\",{\"1\":{\"2859\":1}}],[\"inputstreamreader和outputstreamwriter是字节流与字符流之间的桥梁\",{\"1\":{\"2855\":1}}],[\"inputstreamreaderexample\",{\"1\":{\"2878\":1}}],[\"inputstreamreader示例\",{\"1\":{\"2878\":1}}],[\"inputstreamreader是字节流通向字符流的桥梁\",{\"1\":{\"2878\":1}}],[\"inputstreamreader详解\",{\"0\":{\"2878\":1}}],[\"inputstreamreader将字节流转换为字符流\",{\"1\":{\"2877\":1}}],[\"inputstreamreader将字节流适配为字符流\",{\"1\":{\"1231\":1}}],[\"inputstreamreader\",{\"1\":{\"1236\":1,\"1314\":1,\"2855\":3,\"2861\":3,\"2877\":1,\"2878\":5,\"2880\":2,\"2885\":1,\"2951\":1,\"3070\":1}}],[\"inputstreamtofile\",{\"1\":{\"286\":1}}],[\"inputstream\",{\"1\":{\"286\":10,\"729\":1,\"746\":1,\"747\":1,\"1221\":1,\"1314\":1,\"1321\":1,\"2868\":2,\"2873\":4,\"2890\":2,\"2911\":1,\"3065\":4,\"3070\":1,\"3078\":1}}],[\"innamespace\",{\"1\":{\"3244\":2}}],[\"innerhtml\",{\"1\":{\"1431\":1,\"1447\":1,\"1449\":3,\"1453\":4,\"1458\":8}}],[\"innodb\",{\"1\":{\"113\":2,\"122\":2,\"1586\":1}}],[\"inet6|awk\",{\"1\":{\"1875\":1}}],[\"inet|grep\",{\"1\":{\"1875\":1}}],[\"inetsocketaddress\",{\"1\":{\"1228\":2,\"1238\":2,\"1315\":1,\"1324\":1,\"1339\":1,\"2916\":2,\"2921\":4,\"3079\":1,\"3117\":1,\"3118\":1,\"3120\":1}}],[\"inetaddress\",{\"1\":{\"1104\":1,\"3066\":3}}],[\"inheritance\",{\"1\":{\"2730\":1}}],[\"inherited注解\",{\"0\":{\"1078\":1}}],[\"inherited仅对类注解有效\",{\"1\":{\"1064\":1,\"1078\":1,\"3140\":1,\"3153\":1}}],[\"inherited\",{\"1\":{\"1064\":1,\"1078\":1,\"3135\":2}}],[\"inherit\",{\"1\":{\"1038\":1}}],[\"inventoryservice\",{\"1\":{\"2007\":6,\"3160\":1}}],[\"invocationhandler\",{\"1\":{\"1267\":3,\"2994\":1,\"3002\":1,\"3005\":2}}],[\"invokeexact\",{\"1\":{\"1264\":1,\"2974\":1}}],[\"invokesuper\",{\"1\":{\"710\":1}}],[\"invoke\",{\"1\":{\"500\":1,\"501\":1,\"502\":1,\"504\":1,\"519\":1,\"729\":1,\"746\":1,\"1264\":4,\"1267\":2,\"1270\":2,\"2970\":5,\"2974\":3,\"2986\":1,\"2987\":4,\"2989\":1,\"2993\":2,\"2994\":1,\"3002\":3,\"3005\":3,\"3010\":4}}],[\"invite事务状态机\",{\"1\":{\"3208\":1}}],[\"invite事务\",{\"1\":{\"3208\":1}}],[\"invite请求\",{\"1\":{\"3232\":1}}],[\"invite请求已发送\",{\"1\":{\"3190\":1}}],[\"invite请求消息\",{\"1\":{\"3180\":1}}],[\"invite流程\",{\"0\":{\"3188\":1}}],[\"invite\",{\"1\":{\"1092\":2,\"1094\":2,\"3179\":1,\"3180\":2,\"3190\":2,\"3198\":1,\"3208\":2,\"3218\":1}}],[\"inviterequest\",{\"1\":{\"1092\":1,\"1094\":4,\"3190\":4,\"3232\":3}}],[\"inval\",{\"1\":{\"125\":2}}],[\"invalidateobject\",{\"1\":{\"3241\":1}}],[\"invaliduser\",{\"1\":{\"3003\":3}}],[\"invalidorderstatusexception\",{\"1\":{\"2948\":1}}],[\"invalid\",{\"1\":{\"125\":12,\"1095\":1,\"1295\":1,\"3003\":1,\"3005\":1,\"3223\":1}}],[\"inmemoryauthentication\",{\"1\":{\"451\":1}}],[\"inf\",{\"1\":{\"382\":1,\"419\":1,\"422\":1,\"423\":1,\"463\":3}}],[\"information\",{\"1\":{\"1831\":2,\"3282\":1}}],[\"info`\",{\"1\":{\"232\":3,\"1684\":3,\"1687\":2}}],[\"info\",{\"1\":{\"113\":3,\"122\":3,\"125\":7,\"169\":1,\"207\":1,\"208\":1,\"232\":13,\"267\":2,\"490\":2,\"724\":3,\"993\":1,\"1068\":4,\"1332\":1,\"1444\":2,\"1564\":2,\"1667\":1,\"1684\":13,\"1764\":1,\"2070\":1,\"2071\":2,\"2994\":1,\"3010\":1,\"3102\":2,\"3205\":14,\"3250\":1}}],[\"incubator\",{\"1\":{\"3276\":1}}],[\"inc\",{\"1\":{\"1578\":1}}],[\"inchannel\",{\"1\":{\"1321\":3}}],[\"include\",{\"1\":{\"216\":1,\"1385\":1,\"1417\":1,\"1595\":2}}],[\"incrby\",{\"1\":{\"200\":1}}],[\"incr\",{\"1\":{\"200\":1}}],[\"increase\",{\"1\":{\"1513\":1}}],[\"increasing\",{\"1\":{\"125\":1}}],[\"increments\",{\"1\":{\"2437\":2}}],[\"incrementandget\",{\"1\":{\"552\":1,\"663\":1,\"675\":1,\"1126\":1,\"1326\":1}}],[\"increment列\",{\"1\":{\"125\":1}}],[\"increment\",{\"1\":{\"98\":6,\"106\":3,\"125\":1,\"200\":1,\"201\":1,\"204\":1,\"232\":9,\"593\":1,\"659\":1,\"663\":1,\"675\":2,\"677\":1,\"1125\":1,\"1684\":9,\"1687\":7,\"1828\":1,\"2522\":1,\"3097\":1}}],[\"inconsistent\",{\"1\":{\"125\":2}}],[\"incorrect\",{\"1\":{\"125\":1}}],[\"intbuffer等\",{\"1\":{\"3116\":1}}],[\"int32\",{\"1\":{\"3085\":1}}],[\"intdata\",{\"1\":{\"3019\":1}}],[\"intlist\",{\"1\":{\"2452\":3,\"3035\":2}}],[\"intsingleton\",{\"1\":{\"1294\":1}}],[\"intstr\",{\"1\":{\"1040\":1}}],[\"intstream\",{\"1\":{\"288\":2,\"2452\":1}}],[\"intarraylist\",{\"1\":{\"2452\":1}}],[\"intarray\",{\"1\":{\"1280\":5,\"1295\":3,\"2167\":1,\"2223\":2,\"3023\":2,\"3025\":2}}],[\"intvalue\",{\"1\":{\"575\":1,\"2845\":2}}],[\"intfunction<t\",{\"1\":{\"473\":1,\"2320\":1}}],[\"introduction\",{\"1\":{\"335\":1,\"1609\":2}}],[\"integrated\",{\"1\":{\"3190\":1}}],[\"integer等\",{\"1\":{\"1275\":1}}],[\"integer>comparingbyvalue\",{\"1\":{\"2408\":1}}],[\"integer>>\",{\"1\":{\"2407\":1,\"2408\":1}}],[\"integer>\",{\"1\":{\"538\":1,\"539\":1,\"557\":4,\"1132\":1,\"1178\":2,\"1193\":1,\"2406\":5,\"2407\":3,\"2408\":4,\"2410\":4,\"2522\":1,\"2533\":1,\"2534\":1,\"2604\":1,\"2613\":2,\"2614\":1,\"2615\":1,\"2640\":1,\"2660\":2,\"2670\":2,\"2715\":1,\"3020\":1,\"3040\":1,\"3046\":1,\"3209\":1}}],[\"integer\",{\"1\":{\"284\":2,\"286\":3,\"428\":1,\"429\":1,\"440\":2,\"537\":1,\"539\":1,\"575\":1,\"1040\":9,\"1055\":6,\"1069\":1,\"1182\":1,\"1238\":4,\"1287\":1,\"1295\":1,\"1303\":1,\"1443\":2,\"1444\":2,\"2101\":1,\"2198\":1,\"2326\":2,\"2355\":1,\"2371\":6,\"2388\":1,\"2407\":1,\"2410\":1,\"2433\":2,\"2438\":1,\"2466\":1,\"2480\":1,\"2505\":3,\"2534\":1,\"2577\":1,\"2578\":1,\"2585\":1,\"2601\":2,\"2615\":2,\"2660\":1,\"2669\":1,\"2684\":1,\"3000\":1,\"3003\":3,\"3007\":1,\"3020\":1,\"3023\":4,\"3025\":1,\"3046\":1,\"3120\":3,\"3165\":1,\"3215\":1}}],[\"inter\",{\"1\":{\"2968\":2}}],[\"interactive\",{\"1\":{\"1104\":1,\"1354\":2}}],[\"internperformancetest\",{\"1\":{\"2311\":1}}],[\"internversiondiff\",{\"1\":{\"2246\":1}}],[\"intern\",{\"0\":{\"2244\":1,\"2245\":1,\"2297\":1},\"1\":{\"1041\":2,\"1169\":1,\"2189\":1,\"2206\":1,\"2244\":1,\"2245\":2,\"2246\":3,\"2256\":3,\"2297\":4,\"2303\":2,\"2308\":1,\"2311\":2}}],[\"internal宿主机访问无效的解决方法\",{\"1\":{\"3256\":1}}],[\"internaladdress\",{\"1\":{\"1638\":3}}],[\"internalresourceviewresolver\",{\"1\":{\"382\":2}}],[\"internal\",{\"1\":{\"235\":1,\"1660\":1,\"1940\":1,\"2256\":1,\"2956\":1,\"3010\":1,\"3256\":3}}],[\"interrupt\",{\"1\":{\"610\":2,\"1337\":1,\"2328\":1,\"2466\":2,\"2523\":2,\"2524\":1}}],[\"interruptedexception异常会清除中断标志\",{\"1\":{\"607\":1}}],[\"interruptedexception\",{\"1\":{\"592\":1,\"609\":2,\"610\":2,\"625\":1,\"626\":2,\"642\":2,\"660\":1,\"675\":1,\"676\":2,\"677\":1,\"1186\":1,\"1238\":2,\"1326\":2,\"1332\":1,\"1337\":1,\"1431\":1,\"1443\":1,\"2269\":1,\"2328\":1,\"2465\":1,\"2466\":2,\"2467\":1,\"2522\":1,\"2523\":3,\"2524\":1,\"2555\":2,\"2685\":1,\"3120\":1}}],[\"interrupted\",{\"1\":{\"125\":3,\"1677\":1,\"2921\":1}}],[\"interceptorregistry\",{\"1\":{\"430\":1}}],[\"intersection\",{\"1\":{\"281\":3,\"2372\":2}}],[\"interface关键字定义\",{\"1\":{\"3134\":1}}],[\"interfaces\",{\"1\":{\"2968\":2}}],[\"interface\",{\"1\":{\"122\":1,\"267\":1,\"287\":1,\"292\":1,\"293\":1,\"417\":1,\"423\":1,\"439\":1,\"440\":1,\"538\":1,\"541\":1,\"542\":1,\"575\":1,\"1066\":2,\"1068\":1,\"1069\":2,\"1077\":2,\"1078\":1,\"1079\":1,\"1087\":1,\"1206\":1,\"1211\":4,\"1212\":1,\"1267\":1,\"1569\":1,\"1948\":1,\"2007\":1,\"2077\":2,\"2100\":1,\"2314\":1,\"2742\":1,\"2746\":1,\"2748\":1,\"2766\":1,\"2808\":1,\"2999\":1,\"3002\":1,\"3003\":3,\"3005\":2,\"3021\":1,\"3046\":2,\"3049\":3,\"3050\":2,\"3052\":2,\"3134\":1,\"3135\":1,\"3136\":1,\"3137\":1,\"3141\":2,\"3145\":1,\"3154\":1,\"3162\":1,\"3164\":1,\"3170\":2,\"3212\":2,\"3215\":1,\"3217\":1}}],[\"int\",{\"1\":{\"232\":12,\"284\":4,\"286\":6,\"288\":2,\"289\":5,\"294\":1,\"366\":1,\"380\":1,\"381\":3,\"438\":3,\"439\":3,\"538\":7,\"539\":2,\"543\":1,\"545\":5,\"552\":1,\"575\":1,\"593\":2,\"625\":2,\"626\":2,\"639\":1,\"642\":4,\"658\":1,\"659\":2,\"663\":1,\"675\":1,\"676\":2,\"677\":2,\"693\":2,\"710\":1,\"729\":1,\"746\":1,\"747\":1,\"756\":1,\"773\":1,\"1037\":2,\"1038\":2,\"1040\":4,\"1041\":2,\"1043\":5,\"1044\":4,\"1052\":1,\"1053\":4,\"1055\":1,\"1056\":6,\"1058\":2,\"1066\":1,\"1079\":1,\"1094\":1,\"1095\":1,\"1104\":1,\"1111\":2,\"1123\":2,\"1125\":2,\"1126\":1,\"1139\":2,\"1144\":2,\"1145\":2,\"1150\":1,\"1151\":1,\"1160\":8,\"1161\":14,\"1162\":10,\"1164\":2,\"1165\":2,\"1166\":5,\"1170\":7,\"1179\":2,\"1181\":9,\"1182\":4,\"1186\":2,\"1193\":3,\"1203\":3,\"1205\":3,\"1208\":2,\"1221\":1,\"1222\":1,\"1224\":4,\"1225\":4,\"1228\":2,\"1237\":1,\"1238\":8,\"1243\":1,\"1246\":2,\"1249\":4,\"1250\":4,\"1253\":2,\"1264\":5,\"1269\":4,\"1270\":7,\"1280\":5,\"1295\":2,\"1312\":9,\"1315\":1,\"1321\":1,\"1324\":1,\"1325\":1,\"1326\":6,\"1336\":2,\"1337\":1,\"1338\":1,\"1684\":12,\"1687\":18,\"1998\":1,\"1999\":1,\"2078\":7,\"2079\":1,\"2080\":2,\"2089\":1,\"2090\":3,\"2091\":4,\"2099\":1,\"2100\":2,\"2101\":6,\"2109\":7,\"2110\":2,\"2112\":9,\"2113\":2,\"2114\":4,\"2115\":3,\"2125\":1,\"2126\":1,\"2128\":3,\"2129\":1,\"2130\":1,\"2132\":1,\"2133\":1,\"2134\":1,\"2143\":2,\"2144\":3,\"2146\":1,\"2147\":3,\"2149\":1,\"2150\":2,\"2151\":3,\"2158\":3,\"2159\":3,\"2161\":8,\"2166\":2,\"2167\":8,\"2169\":1,\"2170\":5,\"2173\":8,\"2174\":9,\"2180\":4,\"2181\":5,\"2183\":13,\"2194\":2,\"2195\":3,\"2198\":1,\"2202\":2,\"2207\":1,\"2212\":2,\"2214\":3,\"2216\":1,\"2217\":1,\"2220\":1,\"2223\":1,\"2224\":2,\"2228\":2,\"2230\":1,\"2231\":1,\"2232\":1,\"2234\":2,\"2240\":2,\"2263\":4,\"2269\":3,\"2272\":4,\"2276\":4,\"2278\":1,\"2280\":2,\"2282\":4,\"2288\":1,\"2289\":1,\"2291\":2,\"2294\":2,\"2295\":3,\"2296\":5,\"2311\":3,\"2314\":12,\"2318\":7,\"2324\":1,\"2325\":1,\"2326\":1,\"2327\":10,\"2328\":2,\"2329\":3,\"2345\":2,\"2348\":2,\"2355\":1,\"2356\":5,\"2369\":1,\"2386\":2,\"2388\":2,\"2409\":4,\"2423\":2,\"2427\":2,\"2433\":3,\"2434\":1,\"2436\":1,\"2437\":5,\"2438\":5,\"2439\":6,\"2440\":7,\"2441\":4,\"2449\":3,\"2450\":1,\"2452\":2,\"2456\":1,\"2466\":8,\"2467\":1,\"2490\":1,\"2494\":3,\"2495\":7,\"2496\":1,\"2498\":6,\"2505\":2,\"2512\":3,\"2513\":1,\"2522\":4,\"2524\":4,\"2525\":1,\"2533\":1,\"2536\":1,\"2539\":1,\"2544\":1,\"2551\":1,\"2555\":3,\"2571\":1,\"2573\":1,\"2574\":1,\"2575\":4,\"2577\":3,\"2599\":5,\"2600\":3,\"2601\":6,\"2604\":4,\"2605\":3,\"2612\":2,\"2614\":3,\"2623\":1,\"2627\":1,\"2628\":1,\"2632\":2,\"2642\":2,\"2655\":1,\"2668\":1,\"2669\":2,\"2679\":3,\"2680\":3,\"2681\":3,\"2682\":2,\"2683\":2,\"2684\":5,\"2704\":7,\"2707\":4,\"2708\":4,\"2709\":4,\"2710\":6,\"2711\":8,\"2715\":6,\"2716\":4,\"2721\":4,\"2724\":3,\"2727\":2,\"2733\":1,\"2734\":3,\"2736\":1,\"2738\":1,\"2741\":9,\"2745\":7,\"2766\":1,\"2784\":3,\"2785\":2,\"2786\":7,\"2795\":1,\"2798\":3,\"2809\":2,\"2821\":3,\"2831\":1,\"2833\":3,\"2837\":3,\"2841\":7,\"2842\":3,\"2843\":1,\"2844\":1,\"2845\":1,\"2848\":2,\"2849\":3,\"2853\":6,\"2854\":7,\"2855\":1,\"2856\":1,\"2857\":2,\"2866\":2,\"2867\":1,\"2868\":4,\"2869\":3,\"2873\":10,\"2878\":2,\"2885\":1,\"2891\":1,\"2892\":1,\"2893\":1,\"2897\":2,\"2903\":1,\"2909\":2,\"2914\":1,\"2916\":3,\"2917\":1,\"2921\":3,\"2927\":1,\"2938\":4,\"2942\":4,\"2965\":1,\"2968\":2,\"2969\":5,\"2970\":11,\"2971\":2,\"2980\":1,\"2983\":3,\"2984\":1,\"2986\":3,\"2989\":2,\"3000\":2,\"3002\":5,\"3003\":2,\"3005\":2,\"3007\":4,\"3019\":1,\"3046\":1,\"3047\":1,\"3052\":1,\"3065\":2,\"3079\":1,\"3086\":10,\"3087\":6,\"3117\":1,\"3118\":2,\"3125\":3,\"3134\":1,\"3136\":1,\"3137\":1,\"3141\":1,\"3145\":1,\"3162\":1,\"3164\":3,\"3206\":3,\"3208\":1,\"3212\":2,\"3225\":2,\"3237\":1,\"3240\":1,\"3244\":3}}],[\"intobj\",{\"1\":{\"3019\":2}}],[\"into\",{\"1\":{\"60\":1,\"68\":1,\"232\":2,\"366\":1,\"438\":1,\"439\":1,\"1642\":10,\"1684\":2,\"1687\":4,\"3005\":1,\"3052\":1,\"3164\":1}}],[\"insufficientfundsexception\",{\"1\":{\"2947\":1}}],[\"inspect\",{\"1\":{\"1516\":1,\"1800\":1,\"1806\":1,\"1811\":2,\"3246\":2,\"3255\":1}}],[\"ins3\",{\"1\":{\"1459\":5}}],[\"ins2\",{\"1\":{\"1459\":2}}],[\"ins1\",{\"1\":{\"1459\":2}}],[\"instructions\",{\"1\":{\"994\":1}}],[\"instanceof运算符\",{\"1\":{\"2115\":1}}],[\"instanceof\",{\"1\":{\"1055\":1,\"1069\":1,\"1209\":2,\"2115\":1,\"2294\":1,\"2600\":1,\"2601\":1,\"2749\":2,\"2990\":1,\"3003\":2,\"3007\":18,\"3035\":1}}],[\"instance2静态变量\",{\"1\":{\"1037\":1}}],[\"instance2实例变量\",{\"1\":{\"1037\":1}}],[\"instance2\",{\"1\":{\"1037\":3}}],[\"instance1静态变量\",{\"1\":{\"1037\":1}}],[\"instance1实例变量\",{\"1\":{\"1037\":1}}],[\"instance1\",{\"1\":{\"1037\":3}}],[\"instancemethod\",{\"1\":{\"1037\":1}}],[\"instancemethodlock\",{\"1\":{\"641\":1}}],[\"instancevar++\",{\"1\":{\"1037\":1}}],[\"instancevar\",{\"1\":{\"1037\":5}}],[\"instance\",{\"1\":{\"282\":2,\"584\":1,\"613\":5,\"1294\":7,\"1575\":1,\"2824\":1,\"3000\":3}}],[\"instantaneous\",{\"1\":{\"193\":1}}],[\"installer\",{\"1\":{\"1626\":4,\"1635\":2,\"1638\":2,\"1715\":4,\"3263\":1}}],[\"installed\",{\"1\":{\"120\":1,\"1496\":1,\"1610\":1,\"1671\":1,\"1741\":1}}],[\"installation\",{\"1\":{\"1609\":1,\"1635\":2,\"1637\":3}}],[\"installing\",{\"1\":{\"1609\":2}}],[\"install\",{\"1\":{\"120\":1,\"261\":1,\"263\":1,\"264\":7,\"940\":1,\"949\":1,\"950\":2,\"959\":1,\"960\":1,\"1416\":1,\"1420\":1,\"1476\":2,\"1486\":2,\"1494\":2,\"1501\":1,\"1503\":1,\"1504\":2,\"1612\":1,\"1613\":2,\"1620\":1,\"1628\":1,\"1630\":1,\"1672\":1,\"1673\":2,\"1677\":2,\"1717\":1,\"1735\":2,\"1738\":1,\"1743\":1,\"1744\":2,\"1752\":1,\"1779\":3,\"1785\":1,\"1790\":2,\"1898\":1,\"1907\":1,\"3245\":2,\"3246\":1,\"3263\":1,\"3271\":1,\"3273\":1}}],[\"ins\",{\"1\":{\"286\":3}}],[\"insecureregistries\",{\"1\":{\"1633\":1,\"1637\":1,\"1638\":1}}],[\"insecure将数据库初始化\",{\"1\":{\"121\":1}}],[\"insecure\",{\"1\":{\"121\":1,\"1584\":1,\"1621\":2,\"1666\":1,\"1669\":1,\"1753\":2}}],[\"inserted\",{\"1\":{\"2465\":2}}],[\"insertelementat\",{\"1\":{\"2454\":1}}],[\"insert>\",{\"1\":{\"439\":1}}],[\"insert\",{\"1\":{\"125\":4,\"232\":2,\"366\":1,\"438\":1,\"439\":1,\"1642\":10,\"1684\":2,\"1687\":4,\"1763\":1,\"2265\":1,\"3005\":1,\"3052\":3,\"3164\":3}}],[\"insertmanyoptions\",{\"1\":{\"288\":1}}],[\"insertmany\",{\"1\":{\"47\":1,\"84\":1,\"288\":1}}],[\"insertone\",{\"1\":{\"47\":1,\"84\":1,\"91\":1}}],[\"inittlscontext\",{\"1\":{\"3237\":1}}],[\"initwebrtcfactory\",{\"1\":{\"3232\":1}}],[\"initsipstack\",{\"1\":{\"3232\":1}}],[\"initcause\",{\"1\":{\"2937\":1}}],[\"initcontainers\",{\"1\":{\"1648\":1,\"1649\":1,\"1650\":10,\"1685\":1,\"1688\":1,\"1713\":11}}],[\"initchannel\",{\"1\":{\"1111\":1,\"1332\":1,\"3125\":1}}],[\"initiated\",{\"1\":{\"3209\":1}}],[\"initiate\",{\"1\":{\"1764\":4}}],[\"initiation\",{\"1\":{\"1089\":1,\"3172\":1,\"3201\":1}}],[\"initial\",{\"1\":{\"1447\":1,\"1450\":1,\"1455\":1,\"1456\":1,\"1457\":1,\"1458\":1,\"1459\":1,\"1461\":1,\"1462\":1,\"1463\":1,\"1464\":1,\"1467\":1,\"1469\":1,\"1560\":1,\"2601\":3}}],[\"initialcapacity\",{\"1\":{\"1193\":2,\"2436\":6,\"2571\":4,\"2604\":2,\"2614\":2,\"2627\":3}}],[\"initialization\",{\"1\":{\"741\":1,\"2760\":1}}],[\"initialize\",{\"0\":{\"1557\":1},\"1\":{\"115\":1,\"121\":2,\"125\":1,\"1584\":1,\"3218\":1}}],[\"init\",{\"1\":{\"125\":1,\"1087\":2,\"1094\":2,\"1369\":1,\"1370\":1,\"1371\":1,\"1372\":1,\"1373\":1,\"1503\":1,\"1507\":1,\"1876\":4,\"1919\":1,\"3214\":3,\"3232\":1,\"3237\":3,\"3250\":2}}],[\"ini中直接将数据存放目录引导至data所在路径\",{\"1\":{\"121\":1}}],[\"ini和data目录拷贝到mysql文件夹中\",{\"1\":{\"120\":1}}],[\"in\",{\"1\":{\"28\":1,\"121\":1,\"125\":24,\"283\":1,\"500\":2,\"994\":1,\"1092\":1,\"1314\":2,\"1321\":2,\"1369\":2,\"1370\":1,\"1371\":1,\"1372\":1,\"1373\":1,\"1569\":1,\"1578\":1,\"1881\":3,\"1887\":2,\"2873\":6,\"3065\":4,\"3070\":2,\"3078\":1,\"3180\":1,\"3190\":1,\"3276\":1,\"3282\":3}}],[\"i\",{\"1\":{\"20\":1,\"31\":1,\"122\":1,\"157\":2,\"284\":4,\"286\":9,\"469\":2,\"529\":1,\"625\":3,\"626\":3,\"675\":2,\"677\":4,\"773\":2,\"1005\":1,\"1041\":6,\"1043\":9,\"1056\":8,\"1095\":4,\"1123\":6,\"1150\":2,\"1151\":3,\"1160\":7,\"1161\":3,\"1162\":14,\"1166\":7,\"1170\":11,\"1179\":7,\"1181\":3,\"1186\":3,\"1224\":2,\"1238\":7,\"1250\":6,\"1264\":6,\"1280\":7,\"1295\":5,\"1312\":3,\"1440\":3,\"1443\":3,\"1444\":3,\"1453\":6,\"1564\":1,\"1610\":2,\"1672\":2,\"1778\":1,\"1809\":4,\"1868\":1,\"1871\":1,\"1874\":1,\"1876\":2,\"1878\":1,\"1879\":1,\"1881\":1,\"1892\":1,\"2078\":4,\"2080\":1,\"2099\":1,\"2101\":2,\"2128\":4,\"2129\":4,\"2130\":4,\"2132\":5,\"2133\":5,\"2134\":5,\"2147\":3,\"2158\":7,\"2170\":4,\"2173\":4,\"2174\":5,\"2181\":7,\"2183\":4,\"2202\":6,\"2212\":4,\"2214\":5,\"2228\":4,\"2230\":1,\"2231\":2,\"2234\":4,\"2269\":3,\"2276\":9,\"2280\":6,\"2294\":3,\"2295\":6,\"2311\":5,\"2325\":3,\"2327\":17,\"2328\":8,\"2348\":3,\"2409\":10,\"2440\":3,\"2441\":5,\"2449\":9,\"2452\":6,\"2466\":4,\"2472\":1,\"2495\":5,\"2505\":3,\"2522\":2,\"2524\":5,\"2536\":2,\"2573\":6,\"2580\":4,\"2600\":3,\"2604\":4,\"2681\":6,\"2683\":4,\"2684\":3,\"2707\":6,\"2708\":4,\"2709\":3,\"2715\":6,\"2716\":2,\"2721\":4,\"2724\":3,\"2809\":2,\"2868\":2,\"2897\":4,\"2986\":6,\"3000\":4,\"3002\":4,\"3007\":4,\"3086\":9,\"3099\":2,\"3220\":1,\"3246\":2}}],[\"itr\",{\"1\":{\"2441\":3,\"2498\":4}}],[\"itmed\",{\"1\":{\"1881\":1}}],[\"its\",{\"1\":{\"1569\":1,\"1578\":1,\"2440\":2}}],[\"itheima\",{\"1\":{\"1443\":2,\"1444\":3}}],[\"iterations\",{\"1\":{\"1250\":3,\"1264\":4,\"2276\":4,\"2311\":3,\"2986\":3}}],[\"iteratecollection\",{\"1\":{\"1185\":3}}],[\"iterator迭代器\",{\"1\":{\"2325\":1}}],[\"iterator<object>\",{\"1\":{\"2508\":1}}],[\"iterator<integer>\",{\"1\":{\"2505\":1}}],[\"iterator<map\",{\"1\":{\"2407\":1,\"2420\":1}}],[\"iterator<e>\",{\"1\":{\"2314\":1,\"2441\":2,\"2498\":3,\"2658\":1}}],[\"iterator<selectionkey>\",{\"1\":{\"1228\":1,\"1315\":1,\"1324\":1,\"2916\":1,\"2921\":1,\"3079\":1,\"3118\":1}}],[\"iterator<string>\",{\"1\":{\"1179\":1,\"1190\":1,\"1194\":1,\"2325\":1,\"2340\":1,\"2352\":1,\"2370\":1,\"2382\":1,\"2448\":1,\"2507\":1,\"2513\":1,\"2523\":1,\"2537\":1}}],[\"iterator<\",{\"1\":{\"1185\":1}}],[\"iteratorpatterndemo\",{\"1\":{\"1185\":1}}],[\"iterator\",{\"0\":{\"1185\":1},\"1\":{\"1179\":4,\"1185\":5,\"1190\":5,\"1194\":4,\"1228\":6,\"1315\":5,\"1324\":5,\"2314\":1,\"2325\":5,\"2332\":1,\"2340\":5,\"2352\":4,\"2370\":5,\"2382\":5,\"2407\":5,\"2420\":5,\"2441\":1,\"2448\":5,\"2498\":1,\"2505\":4,\"2507\":5,\"2508\":4,\"2513\":4,\"2523\":5,\"2537\":8,\"2658\":2,\"2916\":6,\"2921\":11,\"3079\":1,\"3118\":5}}],[\"items\",{\"1\":{\"1467\":2,\"2007\":2}}],[\"item\",{\"1\":{\"122\":2,\"269\":1,\"1296\":2,\"1467\":7,\"2007\":3,\"2319\":2,\"2448\":10,\"2450\":3,\"2485\":9,\"2490\":2,\"2495\":3,\"2496\":5,\"2497\":6,\"2498\":3,\"2507\":10,\"2508\":6,\"2513\":1,\"2551\":4,\"3007\":2}}],[\"itd\",{\"1\":{\"219\":1,\"222\":1}}],[\"it\",{\"1\":{\"14\":2,\"216\":1,\"219\":1,\"223\":1,\"227\":1,\"256\":1,\"1354\":1,\"1512\":1,\"1520\":1,\"1570\":1,\"1577\":1,\"1578\":4,\"1607\":1,\"1646\":1,\"2013\":1,\"3245\":2,\"3246\":3,\"3257\":1}}],[\"+cmd\",{\"1\":{\"3282\":1}}],[\"+buffers\",{\"1\":{\"1885\":1}}],[\"+bdcqzh\",{\"1\":{\"285\":1}}],[\"+bdcdyh+\",{\"1\":{\"285\":1}}],[\"+data\",{\"1\":{\"1440\":1}}],[\"+disableexplicitgc\",{\"1\":{\"780\":1,\"798\":1,\"832\":1,\"866\":1,\"900\":1}}],[\"+disableenhancednullpointerexception\",{\"1\":{\"508\":1}}],[\"+x\",{\"1\":{\"1369\":1,\"1370\":1,\"1371\":1,\"1372\":1,\"1373\":1,\"1620\":1,\"1624\":1,\"1633\":1,\"1637\":2,\"1677\":1,\"1714\":2,\"1747\":1,\"1752\":1,\"1756\":1,\"3246\":1,\"3248\":1}}],[\"+yyyy\",{\"1\":{\"1363\":1,\"1524\":1,\"1535\":2}}],[\"++j\",{\"1\":{\"2601\":1,\"2684\":1}}],[\"++modcount\",{\"1\":{\"2600\":1,\"2629\":1}}],[\"++bincount\",{\"1\":{\"2600\":1}}],[\"++a\",{\"1\":{\"2109\":1}}],[\"++i\",{\"1\":{\"1881\":1}}],[\"++n\",{\"1\":{\"1881\":1}}],[\"++size\",{\"1\":{\"2600\":1,\"2683\":1}}],[\"++state\",{\"1\":{\"1881\":1}}],[\"++s\",{\"1\":{\"1881\":2}}],[\"++\",{\"1\":{\"1166\":1,\"1170\":1}}],[\"+printcommandlineflags\",{\"1\":{\"798\":1,\"801\":1,\"832\":1,\"835\":1,\"866\":1,\"869\":1,\"900\":1,\"903\":1}}],[\"+printgc\",{\"1\":{\"796\":1,\"830\":1,\"864\":1,\"898\":1}}],[\"+printgcdatestamps\",{\"1\":{\"774\":1,\"796\":1,\"806\":1,\"830\":1,\"840\":1,\"864\":1,\"874\":1,\"898\":1,\"908\":1}}],[\"+printgcdetails\",{\"1\":{\"694\":1,\"774\":1,\"796\":1,\"805\":1,\"806\":1,\"830\":1,\"839\":1,\"840\":1,\"864\":1,\"873\":1,\"874\":1,\"898\":1,\"907\":1,\"908\":1}}],[\"+heapdumponoutofmemoryerror\",{\"1\":{\"796\":1,\"806\":1,\"830\":1,\"840\":1,\"864\":1,\"874\":1,\"898\":1,\"908\":1}}],[\"+heapdumponoutofmemoryerror参数获取堆转储文件\",{\"1\":{\"784\":1}}],[\"+<option>\",{\"1\":{\"790\":1,\"824\":1,\"858\":1,\"892\":1}}],[\"+username\",{\"1\":{\"1431\":2,\"1435\":1}}],[\"+useadaptivesizepolicy启用\",{\"1\":{\"811\":1,\"845\":1,\"879\":1,\"913\":1}}],[\"+useg1gc\",{\"1\":{\"795\":1,\"805\":1,\"806\":1,\"829\":1,\"839\":1,\"840\":1,\"863\":1,\"873\":1,\"874\":1,\"897\":1,\"907\":1,\"908\":1}}],[\"+useparallelgc\",{\"1\":{\"795\":1,\"829\":1,\"863\":1,\"897\":1}}],[\"+useparnewgc\",{\"1\":{\"795\":1,\"829\":1,\"863\":1,\"897\":1}}],[\"+usecompressedoops\",{\"1\":{\"798\":1,\"832\":1,\"866\":1,\"900\":1}}],[\"+useconcmarksweepgc\",{\"1\":{\"795\":1,\"829\":1,\"863\":1,\"897\":1}}],[\"+usecmscompactatfullcollection\",{\"1\":{\"783\":1}}],[\"+useserialgc\",{\"1\":{\"795\":1,\"829\":1,\"863\":1,\"897\":1}}],[\"+useepsilongc\",{\"1\":{\"477\":1}}],[\"+usezgc\",{\"1\":{\"476\":1}}],[\"+unlockexperimentalvmoptions\",{\"1\":{\"476\":1,\"477\":1}}],[\"+=\",{\"1\":{\"289\":1,\"1041\":1,\"1056\":1,\"1232\":1,\"1440\":1,\"1443\":1,\"1444\":1,\"2113\":1,\"2183\":1,\"2202\":1,\"2276\":1,\"2281\":1,\"2282\":1,\"2327\":4,\"2723\":1,\"2750\":1,\"2837\":1,\"2849\":1,\"2873\":2,\"3025\":1,\"3039\":1,\"3086\":3}}],[\"+zjh+\",{\"1\":{\"285\":1}}],[\"+\",{\"1\":{\"20\":1,\"31\":1,\"115\":9,\"121\":6,\"130\":1,\"267\":4,\"269\":1,\"281\":1,\"284\":3,\"286\":5,\"288\":3,\"289\":6,\"294\":3,\"303\":2,\"338\":4,\"434\":2,\"456\":1,\"469\":1,\"471\":2,\"491\":1,\"529\":1,\"537\":1,\"538\":1,\"557\":1,\"609\":5,\"625\":4,\"626\":4,\"629\":1,\"633\":1,\"642\":2,\"675\":1,\"676\":16,\"677\":1,\"693\":6,\"694\":9,\"710\":1,\"745\":5,\"746\":3,\"747\":3,\"772\":3,\"773\":1,\"792\":1,\"795\":5,\"826\":1,\"829\":5,\"860\":1,\"863\":5,\"894\":1,\"897\":5,\"1037\":9,\"1038\":1,\"1041\":5,\"1043\":9,\"1044\":9,\"1055\":2,\"1056\":4,\"1069\":12,\"1087\":6,\"1092\":15,\"1094\":10,\"1095\":11,\"1111\":1,\"1123\":2,\"1139\":1,\"1147\":3,\"1160\":4,\"1161\":10,\"1162\":1,\"1164\":4,\"1165\":2,\"1166\":2,\"1170\":1,\"1179\":8,\"1182\":5,\"1186\":2,\"1190\":3,\"1193\":2,\"1196\":3,\"1197\":1,\"1205\":2,\"1222\":4,\"1224\":4,\"1225\":12,\"1228\":6,\"1232\":2,\"1238\":7,\"1243\":1,\"1246\":1,\"1250\":6,\"1264\":6,\"1267\":5,\"1269\":4,\"1270\":5,\"1312\":7,\"1314\":3,\"1315\":3,\"1321\":6,\"1324\":10,\"1325\":1,\"1332\":2,\"1337\":2,\"1433\":1,\"1434\":1,\"1439\":10,\"1442\":2,\"1443\":11,\"1444\":8,\"1453\":6,\"1456\":2,\"1727\":1,\"1767\":1,\"1779\":1,\"1857\":1,\"1869\":1,\"1885\":5,\"1887\":2,\"2029\":1,\"2066\":2,\"2071\":2,\"2077\":1,\"2078\":5,\"2079\":2,\"2089\":1,\"2090\":1,\"2109\":1,\"2115\":2,\"2119\":1,\"2128\":2,\"2129\":1,\"2130\":1,\"2132\":1,\"2133\":1,\"2134\":1,\"2170\":2,\"2174\":1,\"2197\":2,\"2220\":2,\"2224\":3,\"2228\":1,\"2232\":4,\"2246\":1,\"2249\":5,\"2263\":2,\"2269\":2,\"2271\":5,\"2272\":2,\"2276\":6,\"2281\":2,\"2282\":1,\"2291\":1,\"2295\":4,\"2296\":1,\"2304\":3,\"2310\":1,\"2311\":1,\"2318\":3,\"2324\":11,\"2326\":9,\"2327\":20,\"2328\":4,\"2329\":9,\"2355\":1,\"2356\":1,\"2370\":1,\"2386\":1,\"2406\":5,\"2407\":14,\"2408\":4,\"2409\":14,\"2410\":1,\"2423\":2,\"2436\":1,\"2437\":3,\"2438\":1,\"2439\":3,\"2440\":2,\"2441\":1,\"2450\":1,\"2465\":7,\"2466\":2,\"2467\":4,\"2468\":9,\"2480\":2,\"2522\":3,\"2523\":3,\"2534\":3,\"2541\":3,\"2555\":2,\"2573\":2,\"2577\":3,\"2578\":1,\"2580\":2,\"2585\":2,\"2601\":2,\"2604\":4,\"2614\":1,\"2660\":2,\"2661\":8,\"2685\":2,\"2709\":3,\"2710\":2,\"2711\":2,\"2716\":1,\"2736\":4,\"2737\":3,\"2738\":2,\"2741\":5,\"2742\":3,\"2746\":6,\"2784\":1,\"2786\":4,\"2810\":1,\"2820\":2,\"2831\":1,\"2844\":2,\"2845\":4,\"2849\":4,\"2855\":1,\"2856\":4,\"2857\":4,\"2866\":2,\"2867\":4,\"2868\":4,\"2873\":1,\"2881\":1,\"2885\":1,\"2904\":4,\"2914\":8,\"2916\":6,\"2917\":1,\"2921\":16,\"2936\":4,\"2947\":1,\"2949\":1,\"2952\":1,\"2953\":3,\"2955\":1,\"2960\":1,\"2965\":5,\"2968\":6,\"2969\":9,\"2970\":4,\"2971\":8,\"2980\":2,\"2983\":4,\"2984\":4,\"2986\":8,\"2989\":3,\"2990\":1,\"2999\":2,\"3000\":3,\"3002\":21,\"3003\":16,\"3005\":12,\"3007\":14,\"3023\":2,\"3025\":2,\"3047\":1,\"3065\":5,\"3066\":5,\"3070\":3,\"3085\":2,\"3086\":2,\"3102\":1,\"3116\":6,\"3117\":1,\"3118\":4,\"3120\":2,\"3125\":3,\"3137\":2,\"3147\":1,\"3149\":4,\"3154\":1,\"3162\":3,\"3190\":1,\"3208\":3,\"3209\":4,\"3212\":1,\"3215\":22,\"3224\":5,\"3235\":3,\"3238\":1,\"3244\":3,\"3282\":6}}],[\"york\",{\"1\":{\"3007\":2}}],[\"your\",{\"1\":{\"994\":3,\"1004\":1,\"1841\":1}}],[\"you\",{\"1\":{\"993\":2,\"994\":3,\"997\":1,\"1004\":1,\"1513\":1,\"1578\":2,\"1677\":1,\"2013\":1,\"3282\":1}}],[\"younggc\",{\"1\":{\"772\":2}}],[\"youngcollector\",{\"1\":{\"772\":2}}],[\"yyy\",{\"1\":{\"1863\":1,\"1865\":2}}],[\"yyyy\",{\"1\":{\"545\":1,\"1535\":1,\"1564\":3,\"2072\":2,\"2765\":1}}],[\"y表示替换后的内容\",{\"1\":{\"1857\":1}}],[\"yagni\",{\"1\":{\"2013\":1}}],[\"yancheng20220512\",{\"1\":{\"1656\":1}}],[\"yaml中nfs\",{\"1\":{\"3276\":1}}],[\"yaml中资源对象名称为nfs\",{\"1\":{\"3276\":1}}],[\"yaml中配置的私服有问题\",{\"1\":{\"1669\":1}}],[\"yaml中的参数\",{\"1\":{\"1632\":1}}],[\"yaml形式\",{\"0\":{\"1647\":1}}],[\"yaml\",{\"1\":{\"406\":2,\"1633\":3,\"1634\":1,\"1637\":3,\"1638\":2,\"1656\":13,\"1658\":1,\"1659\":1,\"1675\":1,\"1677\":5,\"1711\":13,\"3276\":8}}],[\"yaml配置又是哪一版的\",{\"1\":{\"1637\":1}}],[\"yaml配置\",{\"0\":{\"404\":1}}],[\"yaml文件放在后\",{\"1\":{\"1637\":1}}],[\"yaml文件来配置数据库连接池\",{\"1\":{\"445\":1}}],[\"yaml文件\",{\"1\":{\"405\":4}}],[\"yaml文件的缩进和格式\",{\"1\":{\"397\":1}}],[\"yaml文件进行配置\",{\"1\":{\"391\":1}}],[\"yum\",{\"1\":{\"1420\":1,\"1475\":1,\"1476\":2,\"1486\":2,\"1499\":2,\"1501\":1,\"1503\":1,\"1504\":2,\"1580\":1,\"1610\":3,\"1612\":3,\"1613\":2,\"1671\":3,\"1672\":3,\"1673\":2,\"1675\":2,\"1677\":2,\"1738\":1,\"1741\":3,\"1743\":3,\"1744\":2,\"1765\":4,\"1778\":1,\"1779\":2,\"1790\":1,\"1898\":1,\"1907\":1,\"3245\":7,\"3271\":2,\"3273\":12}}],[\"yum安装\",{\"0\":{\"1473\":1},\"1\":{\"1420\":1}}],[\"yuque\",{\"1\":{\"118\":1}}],[\"yield\",{\"1\":{\"654\":1,\"2062\":1}}],[\"yml同级目录\",{\"1\":{\"3262\":1}}],[\"yml配置\",{\"1\":{\"3104\":1}}],[\"yml配置文件启动\",{\"1\":{\"1764\":1}}],[\"yml配置文件形式启动\",{\"1\":{\"1734\":1}}],[\"yml配置文件形式\",{\"1\":{\"1734\":1}}],[\"yml配置文件\",{\"0\":{\"1523\":1}}],[\"yml配置文件中添加上如下配置\",{\"1\":{\"1520\":1}}],[\"yml中数据库名称要于自建应用数据库连接对应\",{\"1\":{\"1688\":1}}],[\"yml形式\",{\"0\":{\"1685\":1}}],[\"yml文件中明文配置\",{\"1\":{\"1358\":1}}],[\"yml\",{\"1\":{\"250\":1,\"1351\":2,\"1357\":1,\"1511\":1,\"1512\":2,\"1517\":1,\"1518\":2,\"1520\":1,\"1523\":1,\"1526\":4,\"1627\":4,\"1630\":1,\"1716\":1,\"1734\":1,\"1764\":1,\"2020\":1,\"3246\":3,\"3250\":1,\"3263\":2}}],[\"yellow\",{\"1\":{\"1527\":1}}],[\"years\",{\"1\":{\"545\":1}}],[\"year\",{\"1\":{\"545\":1}}],[\"yet\",{\"1\":{\"125\":1,\"1764\":1}}],[\"yes|no\",{\"1\":{\"166\":1,\"173\":1,\"186\":1}}],[\"yes\",{\"1\":{\"115\":2,\"125\":2,\"186\":1,\"219\":1,\"1503\":2,\"1788\":1,\"1831\":1,\"3266\":20}}],[\"y\",{\"1\":{\"20\":2,\"1185\":1,\"1191\":1,\"1420\":1,\"1476\":2,\"1486\":2,\"1491\":1,\"1499\":2,\"1501\":1,\"1503\":1,\"1580\":1,\"1610\":1,\"1612\":1,\"1613\":2,\"1671\":1,\"1672\":1,\"1673\":2,\"1677\":2,\"1735\":1,\"1741\":1,\"1743\":1,\"1744\":2,\"1765\":4,\"1779\":2,\"1857\":1,\"1907\":1,\"2323\":1,\"2465\":1,\"2656\":6,\"3245\":3,\"3246\":1,\"3271\":1,\"3273\":1}}],[\"y^\",{\"1\":{\"20\":2}}],[\"lvm\",{\"1\":{\"3275\":3}}],[\"lvm2\",{\"1\":{\"3245\":1}}],[\"lk\",{\"1\":{\"1877\":1,\"1912\":1}}],[\"lm\",{\"1\":{\"1838\":1}}],[\"lm指long\",{\"1\":{\"1838\":1}}],[\"lb\",{\"1\":{\"1638\":1}}],[\"ln\",{\"1\":{\"1548\":1,\"1586\":1,\"1697\":1,\"1714\":1,\"1756\":1,\"1839\":1}}],[\"l\",{\"1\":{\"1504\":3,\"1635\":2,\"1637\":1,\"1660\":1,\"1714\":2,\"1747\":1,\"1838\":1,\"1860\":2,\"1877\":1,\"1880\":1,\"1909\":1,\"1911\":1,\"2080\":1,\"2099\":1,\"2101\":3,\"2188\":2,\"2292\":2,\"2494\":4,\"2497\":12,\"2657\":10,\"3096\":1,\"3246\":1,\"3248\":1,\"3269\":1}}],[\"l或者lsblk\",{\"1\":{\"1500\":1}}],[\"lj\",{\"1\":{\"1395\":1,\"1396\":1}}],[\"ljava\",{\"1\":{\"728\":10}}],[\"ls0tls1crudjtibdrvjusuzjq0furs0tls0tck1jsum0vendq\",{\"1\":{\"3273\":1}}],[\"ls0tls1crudjtibdrvjusuzjq0furs0tls0tck1jsujwekndq\",{\"1\":{\"3273\":1}}],[\"lsblk\",{\"1\":{\"1911\":1,\"3275\":1}}],[\"lsb\",{\"1\":{\"1903\":1}}],[\"lsof\",{\"1\":{\"1874\":1,\"1892\":1,\"3099\":1}}],[\"lsmod\",{\"1\":{\"1634\":1,\"1638\":1}}],[\"lsnrctl\",{\"1\":{\"1574\":3}}],[\"ls\",{\"1\":{\"1372\":1,\"1586\":1,\"1842\":1,\"1854\":1,\"3246\":3,\"3250\":3,\"3278\":1}}],[\"lset\",{\"1\":{\"202\":1}}],[\"lhelloworld\",{\"1\":{\"728\":1}}],[\"lt\",{\"0\":{\"1476\":1},\"1\":{\"1458\":2,\"1472\":1,\"1476\":3,\"1481\":3,\"1482\":2,\"1483\":2,\"1496\":4,\"1498\":2,\"1499\":3,\"2110\":1}}],[\"lts\",{\"1\":{\"465\":1,\"497\":1}}],[\"lts特性\",{\"0\":{\"464\":1}}],[\"ltrim\",{\"1\":{\"202\":1}}],[\"l62\",{\"1\":{\"270\":1}}],[\"l21\",{\"1\":{\"270\":1}}],[\"lrzsz\",{\"1\":{\"1898\":1}}],[\"lrwxrwxrwx\",{\"1\":{\"1586\":1}}],[\"lrem\",{\"1\":{\"202\":1}}],[\"lrange\",{\"1\":{\"202\":1}}],[\"lru缓存实现\",{\"1\":{\"2632\":1}}],[\"lru缓存实现示例\",{\"0\":{\"2632\":1}}],[\"lru实现\",{\"1\":{\"2628\":1}}],[\"lrucache<>\",{\"1\":{\"2427\":1,\"2632\":1}}],[\"lrucache<integer\",{\"1\":{\"2427\":1,\"2632\":1}}],[\"lrucache<k\",{\"1\":{\"2427\":1,\"2512\":1,\"2632\":1}}],[\"lrucache\",{\"1\":{\"2427\":1,\"2512\":1,\"2632\":1}}],[\"lru与lfu切换\",{\"1\":{\"190\":1}}],[\"lru\",{\"1\":{\"157\":3,\"2512\":1}}],[\"lpop\",{\"1\":{\"202\":1}}],[\"lpush\",{\"1\":{\"140\":3,\"202\":1}}],[\"lfu\",{\"1\":{\"157\":2}}],[\"lucene\",{\"1\":{\"1507\":1,\"1513\":1}}],[\"lua\",{\"1\":{\"130\":3}}],[\"lu时失败\",{\"1\":{\"125\":1}}],[\"lu的所有者\",{\"1\":{\"125\":1}}],[\"lu\",{\"1\":{\"125\":15}}],[\"ldconfig\",{\"1\":{\"1586\":2}}],[\"ldf\",{\"1\":{\"219\":2,\"234\":2,\"269\":1,\"270\":1,\"279\":1,\"283\":1,\"289\":4,\"1551\":1,\"1644\":1,\"1711\":1}}],[\"ld字节\",{\"1\":{\"125\":2}}],[\"ld字节堆栈用了\",{\"1\":{\"125\":1}}],[\"ld的列\",{\"1\":{\"125\":1}}],[\"ld上的列\",{\"1\":{\"125\":3}}],[\"ld上的值计数\",{\"1\":{\"125\":1}}],[\"ld上将null提供给了not\",{\"1\":{\"125\":1}}],[\"ld被解短\",{\"1\":{\"125\":1}}],[\"ld不包含所有列的数据\",{\"1\":{\"125\":1}}],[\"ld失败\",{\"1\":{\"125\":2}}],[\"ld堆栈的\",{\"1\":{\"125\":1}}],[\"ld\",{\"1\":{\"125\":18,\"1586\":1}}],[\"land\",{\"1\":{\"1814\":1,\"1833\":1,\"1834\":1,\"1895\":1,\"1897\":2}}],[\"lanp\",{\"1\":{\"1786\":1}}],[\"languages\",{\"1\":{\"2325\":13}}],[\"language\",{\"1\":{\"2195\":2}}],[\"lang=all\",{\"1\":{\"2994\":1}}],[\"lang=\",{\"1\":{\"1431\":1,\"1433\":1,\"1434\":1,\"1435\":1,\"1440\":1,\"1447\":1,\"1450\":1,\"1455\":1,\"1456\":1,\"1457\":1,\"1458\":1,\"1459\":1,\"1461\":1,\"1462\":1,\"1463\":1,\"1464\":1,\"1467\":1,\"1469\":1}}],[\"lang包\",{\"1\":{\"1281\":1}}],[\"lang\",{\"0\":{\"1557\":1},\"1\":{\"439\":1,\"500\":2,\"728\":13,\"749\":1,\"1052\":1,\"1063\":1,\"1260\":2,\"1261\":1,\"1264\":4,\"1267\":4,\"1269\":1,\"1270\":1,\"1280\":1,\"1281\":1,\"1558\":3,\"2185\":1,\"2234\":2,\"2325\":2,\"2768\":1,\"2818\":1,\"2820\":1,\"2966\":1,\"2968\":2,\"2969\":1,\"2970\":1,\"2971\":1,\"2974\":3,\"2983\":1,\"2984\":1,\"2986\":1,\"2989\":2,\"3002\":2,\"3003\":2,\"3005\":3,\"3007\":3,\"3010\":3,\"3135\":1,\"3137\":1,\"3145\":1,\"3147\":2,\"3149\":2}}],[\"la\",{\"1\":{\"1586\":1}}],[\"layout>\",{\"1\":{\"1564\":3}}],[\"layoutwrappingencoder\",{\"1\":{\"1564\":3}}],[\"layer\",{\"1\":{\"114\":1}}],[\"latin\",{\"1\":{\"2289\":1}}],[\"latch\",{\"1\":{\"1238\":4,\"2269\":3}}],[\"lateinitvar\",{\"1\":{\"1053\":2}}],[\"latest\",{\"0\":{\"1668\":1},\"1\":{\"218\":1,\"221\":1,\"225\":1,\"265\":1,\"1529\":1,\"1530\":2,\"1610\":3,\"1641\":2,\"1644\":2,\"1650\":1,\"1667\":2,\"1671\":3,\"1713\":1,\"1741\":3,\"1747\":1,\"2020\":1,\"3246\":2,\"3250\":1,\"3257\":1}}],[\"latency\",{\"1\":{\"193\":1,\"3109\":1}}],[\"laohan\",{\"1\":{\"998\":1}}],[\"lambda升序排序\",{\"1\":{\"2326\":1}}],[\"lambda等平台支持java函数\",{\"1\":{\"571\":1}}],[\"lambda\",{\"1\":{\"537\":1,\"2326\":1,\"2370\":1}}],[\"lambda表达式示例\",{\"1\":{\"575\":1}}],[\"lambda表达式中的this引用指向外部类\",{\"1\":{\"556\":1}}],[\"lambda表达式中的变量捕获\",{\"0\":{\"552\":1}}],[\"lambda表达式没有自己的作用域\",{\"1\":{\"556\":1}}],[\"lambda表达式不会生成单独的类文件\",{\"1\":{\"556\":1}}],[\"lambda表达式可以捕获外部作用域的变量\",{\"1\":{\"552\":1}}],[\"lambda表达式的性能通常优于匿名内部类\",{\"1\":{\"556\":1}}],[\"lambda表达式的使用场景包括\",{\"1\":{\"537\":1}}],[\"lambda表达式的基本语法如下\",{\"1\":{\"537\":1}}],[\"lambda表达式的本质是一个匿名函数\",{\"1\":{\"537\":1}}],[\"lambda表达式是java\",{\"1\":{\"537\":1}}],[\"lambda表达式\",{\"0\":{\"537\":1},\"1\":{\"1059\":1,\"2407\":2}}],[\"lambda参数类型推断增强\",{\"1\":{\"1059\":1}}],[\"lambda参数的var支持\",{\"0\":{\"469\":1}}],[\"lambda参数中使用var\",{\"1\":{\"468\":1}}],[\"lambda获取bean属性名称\",{\"1\":{\"279\":1}}],[\"lag\",{\"1\":{\"169\":1}}],[\"lag项维持在0或1视为正常\",{\"1\":{\"169\":1}}],[\"labels\",{\"1\":{\"1638\":1,\"1648\":6,\"1649\":6,\"1650\":42,\"1660\":2,\"1661\":2,\"1685\":6,\"1688\":6,\"1698\":2,\"1713\":46,\"3276\":2}}],[\"labeltaskinterval=300\",{\"1\":{\"235\":1}}],[\"label\",{\"1\":{\"125\":2,\"280\":1,\"1551\":1,\"1656\":1,\"1660\":3,\"1711\":1,\"3246\":1}}],[\"largefilecopy\",{\"1\":{\"2837\":1}}],[\"largeobject\",{\"1\":{\"2536\":1}}],[\"largelist\",{\"1\":{\"2451\":6}}],[\"largestring\",{\"1\":{\"1056\":2}}],[\"large\",{\"1\":{\"125\":2,\"1224\":5,\"1232\":1,\"1238\":1,\"1321\":1,\"2837\":1,\"2849\":1,\"2866\":1,\"2868\":5,\"2917\":1}}],[\"lastfailuretime\",{\"1\":{\"3087\":4}}],[\"lastaccesstime\",{\"1\":{\"2525\":2}}],[\"lastnode\",{\"1\":{\"2508\":3}}],[\"lastnext\",{\"1\":{\"2498\":2}}],[\"lastreturned\",{\"1\":{\"2498\":13}}],[\"lastret\",{\"1\":{\"2441\":6}}],[\"lastmonth\",{\"1\":{\"545\":1}}],[\"lastindexof\",{\"1\":{\"294\":4,\"2195\":2,\"2314\":1}}],[\"last\",{\"0\":{\"1850\":1},\"1\":{\"122\":1,\"125\":1,\"193\":3,\"216\":1,\"1458\":2,\"1687\":1,\"1835\":1,\"1850\":1,\"1881\":1,\"2371\":2,\"2441\":1,\"2490\":1,\"2494\":2,\"2495\":1,\"2496\":2,\"2497\":5,\"2498\":1,\"2628\":4,\"2629\":6,\"2661\":1}}],[\"le\",{\"1\":{\"2110\":1}}],[\"level=\",{\"1\":{\"1564\":1,\"3102\":4}}],[\"let\",{\"1\":{\"1431\":2,\"1433\":1,\"1434\":1,\"1435\":1,\"1440\":3,\"1443\":9,\"1444\":5,\"1447\":2,\"1449\":4,\"1453\":6,\"1455\":3,\"1456\":4,\"1457\":2,\"1458\":8,\"1459\":4,\"1461\":1,\"1462\":1,\"1467\":1,\"1469\":5,\"2440\":2}}],[\"leetcode\",{\"1\":{\"1166\":1}}],[\"leaked\",{\"1\":{\"3282\":1}}],[\"leave\",{\"1\":{\"3250\":1}}],[\"leastused\",{\"1\":{\"2512\":2}}],[\"least\",{\"1\":{\"502\":1,\"1513\":1,\"2512\":1}}],[\"leap\",{\"1\":{\"122\":1}}],[\"len\",{\"1\":{\"193\":2,\"286\":3,\"2240\":1,\"2282\":4,\"2551\":2,\"2833\":1,\"2841\":1,\"2842\":1,\"2853\":1,\"2854\":2,\"2869\":1,\"2873\":7,\"3065\":4,\"3079\":3}}],[\"lengthfieldprepender\",{\"1\":{\"3126\":1}}],[\"lengthfieldbasedframedecoder\",{\"1\":{\"1332\":1,\"3126\":2}}],[\"length个字节从数组b写入此输出流\",{\"1\":{\"2842\":1}}],[\"lengthcomparator\",{\"1\":{\"2660\":2}}],[\"length=2\",{\"1\":{\"2181\":1}}],[\"length=1\",{\"1\":{\"1774\":1}}],[\"length字段\",{\"1\":{\"1412\":1}}],[\"lengthbuffer\",{\"1\":{\"1325\":7}}],[\"lengthhandle\",{\"1\":{\"1264\":2}}],[\"lengthmethod\",{\"1\":{\"1264\":2}}],[\"lengthoptional\",{\"1\":{\"544\":1}}],[\"lengthsupplier\",{\"1\":{\"539\":2}}],[\"length\",{\"1\":{\"125\":2,\"286\":2,\"289\":4,\"468\":2,\"469\":1,\"500\":3,\"502\":3,\"504\":3,\"521\":1,\"538\":2,\"539\":2,\"544\":2,\"553\":2,\"729\":1,\"746\":1,\"747\":1,\"1092\":1,\"1095\":4,\"1160\":2,\"1161\":5,\"1162\":4,\"1164\":2,\"1165\":1,\"1166\":2,\"1170\":7,\"1181\":4,\"1264\":3,\"1280\":2,\"1295\":2,\"1312\":2,\"1325\":2,\"1440\":1,\"1443\":2,\"1444\":1,\"1453\":1,\"1455\":2,\"1456\":4,\"1457\":2,\"1458\":5,\"1459\":3,\"1469\":1,\"1560\":1,\"1949\":2,\"1962\":2,\"2065\":1,\"2147\":1,\"2151\":1,\"2158\":3,\"2159\":2,\"2161\":2,\"2170\":2,\"2173\":2,\"2174\":2,\"2181\":4,\"2183\":4,\"2205\":1,\"2207\":1,\"2212\":2,\"2214\":3,\"2228\":2,\"2234\":2,\"2263\":2,\"2265\":1,\"2269\":2,\"2271\":3,\"2272\":2,\"2282\":1,\"2291\":3,\"2294\":2,\"2295\":2,\"2296\":2,\"2318\":2,\"2328\":1,\"2356\":1,\"2370\":1,\"2436\":1,\"2437\":1,\"2438\":1,\"2441\":1,\"2573\":1,\"2599\":4,\"2600\":2,\"2601\":1,\"2616\":1,\"2660\":4,\"2681\":2,\"2682\":1,\"2683\":2,\"2684\":3,\"2707\":2,\"2708\":2,\"2709\":3,\"2710\":2,\"2715\":1,\"2721\":1,\"2727\":2,\"2733\":1,\"2742\":6,\"2831\":3,\"2833\":3,\"2873\":1,\"2897\":2,\"2917\":1,\"2927\":1,\"2983\":2,\"3002\":1,\"3003\":11,\"3007\":3,\"3023\":2,\"3024\":1,\"3066\":2,\"3085\":1,\"3086\":1,\"3165\":1,\"3180\":1}}],[\"less等linux内置的读取命令读取该文件\",{\"1\":{\"1787\":1}}],[\"less\",{\"1\":{\"125\":1,\"1949\":1,\"1962\":1}}],[\"leftof\",{\"1\":{\"2656\":3}}],[\"leftshift\",{\"1\":{\"2112\":1}}],[\"left++\",{\"1\":{\"1162\":1,\"1164\":1,\"1165\":2,\"2207\":1,\"2727\":1}}],[\"left\",{\"1\":{\"20\":3,\"1161\":6,\"1162\":6,\"1164\":4,\"1165\":6,\"1467\":1,\"1469\":1,\"2207\":4,\"2654\":1,\"2655\":3,\"2657\":9,\"2710\":5,\"2727\":7}}],[\"ll=\",{\"1\":{\"1842\":1}}],[\"llen\",{\"1\":{\"202\":1}}],[\"ll\",{\"1\":{\"115\":1,\"2196\":1}}],[\"lotail\",{\"1\":{\"2601\":6}}],[\"lohead\",{\"1\":{\"2601\":3}}],[\"lowfly\",{\"1\":{\"2748\":1}}],[\"lowfrequencystr\",{\"1\":{\"2256\":1}}],[\"lowerkey\",{\"1\":{\"2658\":1}}],[\"lower\",{\"1\":{\"1577\":1,\"1578\":2,\"1771\":1,\"2371\":2,\"2658\":1,\"2661\":1}}],[\"low\",{\"1\":{\"1513\":1}}],[\"loveleetcode\",{\"1\":{\"1166\":1}}],[\"lombok\",{\"0\":{\"300\":1},\"1\":{\"286\":1,\"1073\":1}}],[\"loopconcat\",{\"1\":{\"1056\":2}}],[\"loopperformancedemo\",{\"1\":{\"1043\":1}}],[\"loop属性值\",{\"1\":{\"153\":1}}],[\"lookup\",{\"1\":{\"1264\":4,\"2974\":4,\"3010\":5,\"3212\":2}}],[\"lookups\",{\"1\":{\"153\":1}}],[\"look\",{\"1\":{\"994\":1}}],[\"loom的一部分\",{\"1\":{\"524\":1}}],[\"lost\",{\"1\":{\"125\":1}}],[\"loadfactor\",{\"1\":{\"2593\":1,\"2601\":1,\"2604\":1,\"2627\":3,\"2679\":1,\"2684\":1}}],[\"loaddata\",{\"1\":{\"1253\":2}}],[\"loaddataatstart=false\",{\"1\":{\"235\":1}}],[\"loading\",{\"1\":{\"741\":1,\"1443\":3,\"1735\":2,\"2760\":1}}],[\"loader\",{\"1\":{\"729\":2}}],[\"loaded\",{\"1\":{\"125\":1}}],[\"loadclass\",{\"1\":{\"746\":1,\"1260\":1}}],[\"loadclassdata\",{\"1\":{\"729\":2,\"746\":2,\"747\":2}}],[\"loadclassfromfile\",{\"1\":{\"729\":2}}],[\"load\",{\"1\":{\"125\":2,\"1181\":2,\"1507\":1,\"1641\":1,\"1798\":1,\"2601\":1,\"3214\":2,\"3237\":1,\"3246\":2}}],[\"location正则案例\",{\"0\":{\"1393\":1}}],[\"location的语法能说出来吗\",{\"0\":{\"1392\":1}}],[\"location的作用是什么\",{\"0\":{\"1391\":1}}],[\"location指令的作用是根据用户请求的uri来执行不同的应用\",{\"1\":{\"1391\":1}}],[\"location区块开始\",{\"1\":{\"1385\":1}}],[\"location就是实际地址\",{\"1\":{\"1379\":1}}],[\"location\",{\"1\":{\"216\":2,\"1379\":1,\"1385\":2,\"1389\":2,\"1390\":2,\"1393\":5,\"1395\":1,\"1396\":1,\"1397\":1,\"1402\":2,\"1409\":1,\"1417\":1,\"3250\":1}}],[\"localdomain6\",{\"1\":{\"3267\":1}}],[\"localdomain4\",{\"1\":{\"3267\":1}}],[\"localdomain\",{\"1\":{\"3267\":2}}],[\"localdatetime\",{\"1\":{\"545\":1,\"1249\":4}}],[\"localdate\",{\"1\":{\"545\":9,\"566\":2}}],[\"localtag\",{\"1\":{\"3209\":1}}],[\"localtime\",{\"1\":{\"545\":1,\"1535\":4,\"1548\":1,\"1648\":2,\"1650\":20,\"1661\":2,\"1685\":2,\"1697\":1,\"1698\":2,\"1713\":22}}],[\"local目录下输入ls命令可以查询到当前目录已经多了一个redis子目录\",{\"1\":{\"1783\":1}}],[\"local库的sources集合\",{\"1\":{\"1763\":1}}],[\"locale\",{\"1\":{\"1517\":1,\"1520\":1}}],[\"localvar\",{\"1\":{\"1053\":2}}],[\"localvariabletable\",{\"1\":{\"728\":1}}],[\"localrepository>\",{\"1\":{\"973\":1}}],[\"localhost6\",{\"1\":{\"3267\":2}}],[\"localhost4\",{\"1\":{\"3267\":2}}],[\"localhost\",{\"1\":{\"125\":1,\"216\":1,\"251\":1,\"255\":1,\"257\":1,\"367\":1,\"403\":1,\"404\":1,\"406\":2,\"445\":2,\"1363\":1,\"1379\":1,\"1384\":1,\"1385\":1,\"1478\":2,\"1483\":1,\"1484\":3,\"1495\":3,\"1497\":1,\"1498\":1,\"1499\":1,\"1513\":1,\"1527\":1,\"1578\":1,\"1638\":1,\"1677\":1,\"1773\":1,\"1775\":1,\"1819\":1,\"1834\":1,\"1914\":2,\"3104\":1,\"3117\":1,\"3246\":1,\"3267\":4}}],[\"local\",{\"1\":{\"113\":1,\"125\":2,\"219\":1,\"720\":1,\"973\":1,\"998\":1,\"999\":1,\"1369\":2,\"1371\":1,\"1372\":1,\"1384\":2,\"1402\":3,\"1416\":2,\"1417\":1,\"1503\":2,\"1560\":1,\"1586\":1,\"1590\":2,\"1595\":1,\"1624\":3,\"1638\":3,\"1677\":1,\"1714\":5,\"1734\":7,\"1738\":1,\"1747\":3,\"1756\":3,\"1763\":1,\"1764\":3,\"1779\":3,\"1783\":3,\"1784\":2,\"1785\":7,\"1786\":2,\"1787\":1,\"1839\":1,\"3135\":1,\"3246\":2,\"3248\":2,\"3249\":1,\"3282\":5}}],[\"lockbasedconcurrentlist<t>\",{\"1\":{\"2544\":1}}],[\"lockbasedarraylist<e>\",{\"1\":{\"2456\":1}}],[\"locks\",{\"1\":{\"2282\":1,\"2429\":2,\"2513\":2,\"2544\":1}}],[\"lock`\",{\"1\":{\"1687\":2}}],[\"lock接口或信号量实现\",{\"1\":{\"618\":1}}],[\"lockedlinkedlist<e>\",{\"1\":{\"2513\":1}}],[\"locked\",{\"1\":{\"125\":3}}],[\"lock\",{\"1\":{\"125\":9,\"593\":3,\"642\":10,\"643\":4,\"659\":2,\"660\":5,\"1128\":1,\"1129\":4,\"1687\":1,\"2282\":4,\"2356\":7,\"2429\":7,\"2456\":7,\"2513\":9,\"2544\":7,\"2697\":4}}],[\"longestcommonprefix\",{\"1\":{\"1170\":1}}],[\"longvalue\",{\"1\":{\"1069\":1,\"3003\":1}}],[\"longadder通过分段cas\",{\"1\":{\"686\":1}}],[\"longadder和atomiclong的实现原理有何区别\",{\"1\":{\"686\":1}}],[\"longadder在高并发下会创建多个cell对象\",{\"1\":{\"685\":1}}],[\"longadder在高并发下将热点数据分散到多个cell中\",{\"1\":{\"680\":1}}],[\"longadder的内存开销\",{\"0\":{\"685\":1}}],[\"longadder的分段累加设计\",{\"0\":{\"680\":1}}],[\"longadderexample\",{\"1\":{\"677\":1}}],[\"longadder\",{\"1\":{\"672\":1,\"677\":2}}],[\"long>\",{\"1\":{\"440\":1,\"2007\":1,\"3050\":1}}],[\"long类型精度丢失\",{\"0\":{\"282\":1}}],[\"longtext\",{\"1\":{\"232\":5,\"1684\":5,\"1831\":1}}],[\"long\",{\"1\":{\"60\":1,\"125\":5,\"282\":2,\"427\":3,\"428\":1,\"438\":2,\"439\":3,\"440\":3,\"456\":1,\"521\":1,\"543\":1,\"553\":1,\"578\":1,\"580\":1,\"694\":3,\"1041\":1,\"1043\":1,\"1056\":1,\"1068\":3,\"1069\":4,\"1179\":1,\"1224\":2,\"1225\":1,\"1232\":3,\"1238\":3,\"1250\":6,\"1264\":4,\"1321\":1,\"1472\":1,\"1838\":1,\"1903\":1,\"1948\":1,\"1949\":1,\"1997\":1,\"2007\":2,\"2035\":1,\"2054\":1,\"2080\":1,\"2099\":1,\"2101\":1,\"2276\":4,\"2288\":1,\"2311\":2,\"2327\":17,\"2409\":12,\"2467\":4,\"2490\":1,\"2524\":2,\"2525\":2,\"2533\":1,\"2724\":3,\"2759\":2,\"2766\":1,\"2770\":2,\"2779\":3,\"2837\":2,\"2841\":2,\"2849\":5,\"2853\":2,\"2866\":2,\"2868\":2,\"2986\":7,\"3000\":1,\"3002\":8,\"3003\":7,\"3005\":2,\"3007\":1,\"3049\":1,\"3050\":1,\"3052\":2,\"3087\":3,\"3154\":1,\"3160\":1,\"3164\":2,\"3165\":1,\"3170\":2,\"3205\":1,\"3215\":4,\"3225\":1,\"3240\":1}}],[\"logexecutiontime\",{\"1\":{\"3160\":1}}],[\"logical\",{\"1\":{\"2111\":1}}],[\"logicaloperatordemo\",{\"1\":{\"2111\":1}}],[\"login=$\",{\"1\":{\"2020\":1}}],[\"loginvocationhandler\",{\"1\":{\"1267\":3}}],[\"logincontroller\",{\"1\":{\"456\":1}}],[\"logininterceptor\",{\"1\":{\"430\":2}}],[\"login\",{\"1\":{\"280\":1,\"430\":1,\"456\":3,\"1636\":1,\"1656\":1,\"1711\":1,\"1797\":1,\"3246\":1}}],[\"log<\",{\"1\":{\"2072\":2}}],[\"log4j2\",{\"1\":{\"2072\":1}}],[\"log文件中\",{\"1\":{\"1760\":1}}],[\"logpath=e\",{\"1\":{\"1763\":2}}],[\"logpath=\",{\"1\":{\"1734\":1,\"1739\":1,\"1764\":1}}],[\"logparameters\",{\"1\":{\"1068\":3,\"3002\":4,\"3137\":3}}],[\"log`\",{\"1\":{\"1687\":1}}],[\"logmaxage\",{\"1\":{\"1638\":1}}],[\"logresult\",{\"1\":{\"3002\":3}}],[\"logreturnvalue\",{\"1\":{\"1068\":3}}],[\"logrotate\",{\"1\":{\"1610\":2,\"1671\":2,\"1741\":2}}],[\"logback配置示例\",{\"1\":{\"2072\":1}}],[\"logback\",{\"1\":{\"1564\":13,\"2072\":2,\"3102\":3}}],[\"logbefore\",{\"1\":{\"338\":1}}],[\"logtime\",{\"1\":{\"1535\":2}}],[\"logout\",{\"1\":{\"3246\":1}}],[\"logo\",{\"1\":{\"1440\":1}}],[\"loglevel\",{\"1\":{\"1332\":1}}],[\"log注解标记需要记录日志的方法\",{\"1\":{\"1072\":1}}],[\"log注解\",{\"1\":{\"1068\":1}}],[\"logglue`\",{\"1\":{\"1687\":1}}],[\"logger>\",{\"1\":{\"1564\":1}}],[\"loggerfactory\",{\"1\":{\"1068\":1,\"2956\":1}}],[\"logger\",{\"1\":{\"518\":1,\"1068\":7,\"1564\":2,\"2072\":1,\"2956\":1,\"3102\":1}}],[\"loggingproxy\",{\"1\":{\"3002\":4}}],[\"logging注解\",{\"1\":{\"3002\":1}}],[\"loggingannotationprocessor\",{\"1\":{\"3002\":2}}],[\"loggingaspect\",{\"1\":{\"338\":1}}],[\"logginghandler\",{\"1\":{\"1332\":1}}],[\"logging<\",{\"1\":{\"953\":2}}],[\"logging\",{\"1\":{\"125\":2,\"1638\":1,\"1648\":1,\"1649\":1,\"1650\":10,\"1661\":1,\"1685\":1,\"1688\":1,\"1698\":1,\"1713\":11,\"3002\":10}}],[\"logannotation\",{\"1\":{\"3137\":5}}],[\"logappend\",{\"1\":{\"1734\":2,\"1739\":1,\"1763\":2,\"1764\":1}}],[\"logappend=true\",{\"1\":{\"1734\":1,\"1764\":1}}],[\"logaspect\",{\"1\":{\"1068\":2}}],[\"logaround\",{\"1\":{\"338\":1,\"1068\":1}}],[\"logafter\",{\"1\":{\"338\":1}}],[\"logfile\",{\"1\":{\"125\":1,\"2909\":2}}],[\"logservice\",{\"1\":{\"3159\":4}}],[\"logsidecar\",{\"1\":{\"1638\":1,\"1648\":1,\"1649\":1,\"1650\":10,\"1661\":1,\"1685\":1,\"1688\":1,\"1698\":1,\"1713\":11}}],[\"logs目录\",{\"1\":{\"1530\":1}}],[\"logs目录映射到宿主机的\",{\"1\":{\"1530\":1}}],[\"logstash和kibana三个开源工具组成\",{\"1\":{\"1507\":1}}],[\"logstash清洗消息\",{\"1\":{\"1505\":1,\"1535\":1}}],[\"logstash端口\",{\"1\":{\"1367\":1}}],[\"logstash\",{\"0\":{\"1372\":1},\"1\":{\"1362\":2,\"1364\":1,\"1372\":12,\"1507\":2,\"1522\":1,\"1523\":5,\"1524\":1,\"1526\":17,\"1527\":1,\"1638\":1,\"3103\":2}}],[\"logstash安全认证\",{\"0\":{\"1361\":1}}],[\"logstash设置连接方式\",{\"1\":{\"1349\":1}}],[\"logs期间出现错误\",{\"1\":{\"125\":1}}],[\"logs\",{\"1\":{\"113\":3,\"125\":1,\"216\":1,\"234\":2,\"245\":1,\"1384\":1,\"1509\":1,\"1510\":1,\"1512\":2,\"1523\":1,\"1530\":7,\"1535\":1,\"1564\":1,\"1569\":1,\"1577\":3,\"1578\":7,\"1595\":3,\"1646\":1,\"1734\":4,\"1764\":1,\"1788\":1,\"1791\":2,\"3103\":1,\"3109\":1,\"3245\":1,\"3246\":2}}],[\"log\",{\"0\":{\"2710\":1},\"1\":{\"20\":2,\"98\":2,\"102\":6,\"106\":1,\"110\":4,\"113\":3,\"122\":3,\"125\":10,\"193\":1,\"216\":1,\"219\":2,\"267\":2,\"286\":4,\"774\":1,\"805\":1,\"806\":3,\"839\":1,\"840\":3,\"873\":1,\"874\":3,\"907\":1,\"908\":3,\"1068\":7,\"1161\":1,\"1170\":1,\"1196\":1,\"1253\":1,\"1254\":2,\"1337\":2,\"1373\":1,\"1384\":2,\"1503\":3,\"1518\":3,\"1523\":1,\"1526\":3,\"1530\":2,\"1532\":2,\"1534\":2,\"1535\":5,\"1564\":11,\"1577\":1,\"1578\":4,\"1586\":2,\"1595\":10,\"1615\":2,\"1661\":1,\"1675\":2,\"1687\":1,\"1698\":1,\"1734\":5,\"1739\":2,\"1746\":2,\"1763\":4,\"1764\":2,\"1773\":2,\"1830\":1,\"1844\":1,\"1864\":1,\"1865\":2,\"1867\":1,\"1870\":2,\"1871\":3,\"1895\":2,\"1899\":1,\"1910\":1,\"2037\":2,\"2061\":4,\"2062\":1,\"2071\":5,\"2357\":4,\"2363\":4,\"2377\":1,\"2391\":1,\"2394\":1,\"2414\":1,\"2588\":2,\"2616\":1,\"2643\":1,\"2650\":1,\"2663\":1,\"2666\":1,\"2672\":2,\"2702\":2,\"2710\":1,\"2712\":3,\"2717\":1,\"2728\":1,\"2909\":2,\"2955\":1,\"2956\":2,\"2959\":2,\"2993\":2,\"3002\":16,\"3137\":1,\"3223\":1,\"3250\":1}}],[\"lifo\",{\"1\":{\"2468\":1,\"2547\":1}}],[\"lifetime\",{\"1\":{\"1822\":2}}],[\"life\",{\"1\":{\"1570\":1}}],[\"li\",{\"1\":{\"1453\":4}}],[\"lis\",{\"1\":{\"1453\":9}}],[\"list与map的泛型定义\",{\"1\":{\"3046\":1}}],[\"listn\",{\"1\":{\"2358\":1}}],[\"listadvancedoperations\",{\"1\":{\"2329\":1}}],[\"listperformancecomparison\",{\"1\":{\"2327\":1}}],[\"listpage\",{\"1\":{\"1563\":1}}],[\"list排序与查找示例\",{\"1\":{\"2326\":1}}],[\"listtraversal\",{\"1\":{\"2325\":1}}],[\"list遍历方式对比\",{\"1\":{\"2325\":1}}],[\"list的排序算法实现\",{\"0\":{\"2357\":1}}],[\"list的排序与查找\",{\"0\":{\"2326\":1}}],[\"list的高级操作示例\",{\"1\":{\"2329\":1}}],[\"list的高级操作\",{\"0\":{\"2329\":1}}],[\"list的遍历方式\",{\"0\":{\"2325\":1}}],[\"list的初始化与基本操作\",{\"0\":{\"2322\":1}}],[\"listcommonoperations\",{\"1\":{\"2324\":1}}],[\"listcollections\",{\"1\":{\"1738\":1}}],[\"list常用操作示例\",{\"1\":{\"2324\":1}}],[\"listitr\",{\"1\":{\"2498\":6}}],[\"listiterator<string>\",{\"1\":{\"2325\":1,\"2507\":1}}],[\"listiterator<e>\",{\"1\":{\"2314\":2,\"2498\":2}}],[\"listiterator双向迭代器\",{\"1\":{\"2325\":1}}],[\"listiterator\",{\"1\":{\"2314\":2,\"2325\":7,\"2332\":1,\"2498\":1,\"2507\":6}}],[\"listinitialization\",{\"1\":{\"2323\":1}}],[\"listindexes\",{\"1\":{\"68\":1,\"1738\":1}}],[\"list特有操作\",{\"1\":{\"2314\":1}}],[\"list接口继承了iterable接口\",{\"1\":{\"2332\":1}}],[\"list接口体现了java集合框架的核心设计思想\",{\"1\":{\"2331\":1}}],[\"list接口的泛型定义\",{\"1\":{\"3046\":1}}],[\"list接口的jdk版本特性\",{\"0\":{\"2320\":1}}],[\"list接口的继承体系\",{\"0\":{\"2315\":1}}],[\"list接口的定义如下\",{\"1\":{\"2314\":1}}],[\"list接口概述\",{\"0\":{\"2314\":1}}],[\"list是java集合框架中最基础的有序集合接口\",{\"1\":{\"2314\":1}}],[\"listdatabases\",{\"1\":{\"1738\":1}}],[\"list`\",{\"1\":{\"1687\":2}}],[\"list对象\",{\"1\":{\"1439\":2}}],[\"list转\",{\"1\":{\"1439\":2}}],[\"listsortandsearch\",{\"1\":{\"2326\":1}}],[\"lists\",{\"1\":{\"1178\":1}}],[\"listsupplier\",{\"1\":{\"539\":2}}],[\"list5\",{\"1\":{\"1178\":1}}],[\"list4\",{\"1\":{\"1178\":1}}],[\"list3\",{\"1\":{\"1178\":1}}],[\"list集合分页工具类\",{\"1\":{\"284\":1}}],[\"list集合\",{\"0\":{\"281\":1}}],[\"listener\",{\"1\":{\"3208\":1}}],[\"listener=yes\",{\"1\":{\"1530\":2}}],[\"listeners=plaintext\",{\"1\":{\"1530\":4,\"1535\":2}}],[\"listen\",{\"1\":{\"216\":1,\"1379\":1,\"1385\":1,\"1389\":2,\"1390\":2,\"1409\":1,\"1417\":2,\"1569\":1,\"1881\":1,\"3250\":1,\"3282\":1}}],[\"listeningpoint\",{\"1\":{\"1094\":4,\"3190\":4,\"3206\":13,\"3214\":4,\"3218\":2,\"3237\":2}}],[\"listening\",{\"1\":{\"165\":1}}],[\"list1\",{\"1\":{\"140\":3,\"281\":10,\"1178\":4}}],[\"list2\",{\"1\":{\"134\":1,\"281\":9,\"1178\":1,\"1439\":4}}],[\"list类型\",{\"1\":{\"134\":1}}],[\"list分区上使用\",{\"1\":{\"125\":1}}],[\"list分区与hash\",{\"1\":{\"125\":1}}],[\"list\",{\"0\":{\"1533\":1,\"2312\":1},\"1\":{\"122\":3,\"125\":8,\"130\":1,\"131\":1,\"284\":7,\"286\":8,\"293\":1,\"380\":1,\"473\":3,\"539\":2,\"553\":3,\"710\":2,\"781\":2,\"997\":1,\"998\":1,\"1043\":9,\"1053\":3,\"1059\":1,\"1162\":1,\"1174\":1,\"1178\":1,\"1185\":2,\"1190\":6,\"1191\":3,\"1198\":1,\"1301\":1,\"1374\":1,\"1439\":10,\"1443\":1,\"1444\":4,\"1475\":1,\"1503\":2,\"1533\":2,\"1534\":2,\"1610\":1,\"1635\":1,\"1637\":1,\"1671\":1,\"1741\":1,\"1930\":1,\"1932\":1,\"2054\":1,\"2320\":2,\"2323\":2,\"2324\":1,\"2325\":1,\"2326\":1,\"2327\":14,\"2328\":4,\"2329\":1,\"2340\":9,\"2341\":5,\"2342\":4,\"2344\":2,\"2346\":4,\"2352\":3,\"2355\":3,\"2356\":9,\"2358\":4,\"2369\":2,\"2448\":9,\"2449\":7,\"2450\":7,\"2452\":3,\"2456\":5,\"2505\":6,\"2507\":9,\"2508\":4,\"2509\":8,\"2513\":5,\"2523\":1,\"2536\":5,\"2537\":6,\"2544\":3,\"2942\":5,\"3007\":1,\"3017\":5,\"3035\":2,\"3038\":4,\"3039\":2,\"3040\":4,\"3046\":1,\"3164\":1,\"3212\":1,\"3275\":1}}],[\"list<sipprovider>\",{\"1\":{\"3218\":1}}],[\"list<string>转json\",{\"1\":{\"1439\":2}}],[\"list<string>\",{\"1\":{\"60\":1,\"281\":20,\"469\":1,\"472\":1,\"473\":1,\"529\":1,\"539\":2,\"543\":2,\"553\":1,\"574\":1,\"575\":1,\"1043\":1,\"1053\":1,\"1178\":5,\"1179\":2,\"1185\":1,\"1186\":2,\"1190\":2,\"1191\":4,\"1193\":1,\"1194\":4,\"1301\":1,\"1439\":2,\"2054\":1,\"2281\":1,\"2320\":2,\"2323\":7,\"2324\":2,\"2325\":1,\"2328\":4,\"2329\":1,\"2340\":2,\"2341\":1,\"2342\":2,\"2344\":1,\"2348\":1,\"2355\":2,\"2358\":3,\"2369\":1,\"2448\":3,\"2450\":1,\"2456\":2,\"2507\":1,\"2513\":2,\"2523\":1,\"2723\":2,\"2959\":1,\"3007\":3,\"3017\":1,\"3035\":5,\"3041\":2,\"3046\":1,\"3205\":1,\"3209\":1}}],[\"list<routeheader>\",{\"1\":{\"3212\":1}}],[\"list<dialoginfo>\",{\"1\":{\"3209\":1}}],[\"list<document>\",{\"1\":{\"47\":1,\"58\":1,\"68\":1,\"288\":1}}],[\"list<largeobject>\",{\"1\":{\"2536\":3}}],[\"list<map\",{\"1\":{\"2408\":1}}],[\"list<e>\",{\"1\":{\"2314\":2,\"2356\":7,\"2456\":2,\"2513\":1,\"3046\":1}}],[\"list<t>\",{\"1\":{\"2544\":1,\"3000\":2,\"3050\":1}}],[\"list<tree\",{\"1\":{\"2027\":1}}],[\"list<thread>\",{\"1\":{\"677\":1}}],[\"list<orderprocessingexception>\",{\"1\":{\"2953\":1}}],[\"list<order>\",{\"1\":{\"2007\":1,\"2953\":1,\"3160\":1}}],[\"list<orderitem>\",{\"1\":{\"2007\":1}}],[\"list<object>\",{\"1\":{\"781\":1,\"2451\":1}}],[\"list<product>\",{\"1\":{\"1998\":1}}],[\"list<person>>\",{\"1\":{\"2329\":1}}],[\"list<person>\",{\"1\":{\"1182\":2,\"2329\":3}}],[\"list<byte\",{\"1\":{\"1325\":2}}],[\"list<number>\",{\"1\":{\"1296\":1}}],[\"list<\",{\"1\":{\"1288\":1,\"1291\":1,\"1296\":2,\"3035\":2,\"3038\":1,\"3039\":1,\"3040\":1,\"3041\":2}}],[\"list<viaheader>\",{\"1\":{\"1094\":1,\"3190\":1}}],[\"list<heapobject>\",{\"1\":{\"710\":1}}],[\"list<user>转json\",{\"1\":{\"1439\":2}}],[\"list<user>\",{\"1\":{\"381\":1,\"427\":1,\"438\":1,\"439\":2,\"440\":3,\"449\":1,\"1440\":1,\"1975\":1,\"2057\":2,\"3000\":1,\"3052\":1}}],[\"list<chainfilter>\",{\"1\":{\"293\":3}}],[\"list<integer>\",{\"1\":{\"543\":2,\"575\":1,\"1162\":3,\"1182\":1,\"1296\":1,\"2326\":1,\"2327\":4,\"2346\":3,\"2449\":3,\"2452\":2,\"2505\":1,\"2712\":2,\"2942\":2,\"3035\":2,\"3047\":1}}],[\"list<integer>>\",{\"1\":{\"283\":2,\"543\":1}}],[\"list<ihttpmethoddealmodel>\",{\"1\":{\"292\":1}}],[\"list<file>\",{\"1\":{\"286\":1}}],[\"list<feedbackinfo>\",{\"1\":{\"270\":1}}],[\"li>\",{\"1\":{\"1443\":1,\"1444\":1,\"1462\":6}}],[\"lijie\",{\"1\":{\"1389\":4,\"1390\":4,\"1409\":1}}],[\"lightgreen\",{\"1\":{\"1467\":3}}],[\"light\",{\"1\":{\"1212\":9,\"1444\":2}}],[\"lian\",{\"1\":{\"286\":6}}],[\"license>\",{\"1\":{\"999\":1}}],[\"licenses>\",{\"1\":{\"999\":1}}],[\"licenses\",{\"1\":{\"999\":1}}],[\"license\",{\"1\":{\"125\":1,\"999\":2,\"1578\":4}}],[\"lilabel\",{\"1\":{\"125\":1}}],[\"ling\",{\"1\":{\"1573\":5,\"1575\":1}}],[\"linux部署文档\",{\"0\":{\"3309\":1}}],[\"linux防火墙常用命令\",{\"0\":{\"1922\":1}}],[\"linux刷新网卡\",{\"0\":{\"1919\":1}}],[\"linux网卡开机自启动\",{\"0\":{\"1918\":1}}],[\"linux新建定时任务\",{\"0\":{\"1909\":1}}],[\"linux同步网络时间\",{\"0\":{\"1907\":1}}],[\"linux常用命令\",{\"0\":{\"1888\":1}}],[\"linux关机\",{\"0\":{\"1837\":1},\"1\":{\"1835\":1}}],[\"linux安装redis\",{\"0\":{\"1780\":1}}],[\"linux安装nginx\",{\"0\":{\"1779\":1}}],[\"linux安装mysql\",{\"0\":{\"1765\":1}}],[\"linux安装mysql主从模式\",{\"0\":{\"96\":1}}],[\"linux安装mongo主从模式\",{\"0\":{\"1758\":1}}],[\"linux安装jdk\",{\"0\":{\"1720\":1}}],[\"linux系统下\",{\"1\":{\"1714\":1}}],[\"linux会在执行的时候发送一份邮件给你\",{\"1\":{\"1504\":1}}],[\"linux\",{\"0\":{\"1366\":1,\"1505\":1,\"1536\":1,\"1608\":1,\"1670\":1,\"1734\":1,\"1740\":1,\"1809\":1,\"1892\":1},\"1\":{\"1373\":1,\"1478\":3,\"1484\":4,\"1488\":4,\"1489\":2,\"1495\":4,\"1507\":1,\"1579\":2,\"1609\":2,\"1612\":1,\"1617\":2,\"1623\":1,\"1624\":2,\"1636\":1,\"1660\":4,\"1672\":1,\"1729\":1,\"1734\":2,\"1743\":1,\"1749\":1,\"1755\":1,\"1756\":1,\"1780\":1,\"1887\":1,\"1892\":1,\"1916\":1,\"2836\":1,\"2860\":1,\"3100\":2,\"3245\":1,\"3246\":4,\"3271\":1}}],[\"linux版\",{\"1\":{\"1354\":1,\"1917\":1}}],[\"lindaifeng\",{\"1\":{\"999\":4,\"1004\":1,\"1722\":1,\"1723\":1}}],[\"lindaifeng<\",{\"1\":{\"999\":1}}],[\"lindex\",{\"1\":{\"202\":1}}],[\"linknodelast\",{\"1\":{\"2628\":2}}],[\"linkfirst\",{\"1\":{\"2497\":2}}],[\"linkbefore\",{\"1\":{\"2494\":2,\"2498\":1}}],[\"linklast\",{\"1\":{\"2494\":3,\"2497\":1,\"2498\":1}}],[\"links\",{\"1\":{\"1578\":1,\"3250\":1}}],[\"links=0\",{\"1\":{\"1577\":1,\"1578\":2}}],[\"linking\",{\"1\":{\"741\":1,\"2760\":1}}],[\"linkedhashmap在jdk\",{\"1\":{\"2643\":2}}],[\"linkedhashmap和linkedhashset都是非线程安全的\",{\"1\":{\"2640\":1}}],[\"linkedhashmap的accessorder=true模式本质上是一种近似lru算法\",{\"1\":{\"2643\":1}}],[\"linkedhashmap的序列化需要特别注意\",{\"1\":{\"2641\":1}}],[\"linkedhashmap的迭代性能优于hashmap\",{\"1\":{\"2639\":1}}],[\"linkedhashmap的entry节点继承自hashmap的node节点\",{\"1\":{\"2623\":1}}],[\"linkedhashmap遵循了以下设计原则\",{\"1\":{\"2637\":1}}],[\"linkedhashmap通过增加双向链表的维护开销\",{\"1\":{\"2636\":1}}],[\"linkedhashmap通过重写afternoderemoval\",{\"1\":{\"2630\":1}}],[\"linkedhashmap提供两种迭代顺序\",{\"1\":{\"2635\":1}}],[\"linkedhashmap结合了哈希表和双向链表的优点\",{\"1\":{\"2634\":1}}],[\"linkedhashmap并未重写put方法\",{\"1\":{\"2628\":1}}],[\"linkedhashmap核心方法实现\",{\"0\":{\"2626\":1}}],[\"linkedhashmap核心变量\",{\"0\":{\"2621\":1}}],[\"linkedhashmap是hashmap的子类\",{\"1\":{\"2619\":1}}],[\"linkedhashmap<object\",{\"1\":{\"2642\":1}}],[\"linkedhashmap<k\",{\"1\":{\"2427\":1,\"2632\":1}}],[\"linkedhashmap<>\",{\"1\":{\"2406\":1,\"2631\":1,\"3007\":1}}],[\"linkedhashmap初始化\",{\"1\":{\"2406\":1}}],[\"linkedhashmap\",{\"0\":{\"2617\":1},\"1\":{\"1174\":1,\"2400\":1,\"2406\":6,\"2408\":2,\"2427\":1,\"2627\":1,\"2628\":5,\"2629\":3,\"2630\":2,\"3007\":1}}],[\"linkedhashset性能略低于hashset但提供有序性\",{\"1\":{\"2643\":1}}],[\"linkedhashset与hashset\",{\"1\":{\"2643\":1}}],[\"linkedhashset核心方法实现\",{\"0\":{\"2631\":1}}],[\"linkedhashset核心变量\",{\"0\":{\"2622\":1}}],[\"linkedhashset则是基于linkedhashmap实现的\",{\"1\":{\"2619\":1}}],[\"linkedhashset和treeset的性能对比及适用场景\",{\"0\":{\"2391\":1}}],[\"linkedhashset和treeset都是线程不安全的\",{\"1\":{\"2389\":1}}],[\"linkedhashset<>\",{\"1\":{\"2369\":1,\"2640\":1}}],[\"linkedhashset\",{\"0\":{\"2617\":1},\"1\":{\"1174\":1,\"2363\":1,\"2369\":1,\"2391\":1,\"2631\":1}}],[\"linkedblockingqueue<>\",{\"1\":{\"1326\":1,\"2478\":1,\"2524\":1,\"2539\":1}}],[\"linkedblockingqueue\",{\"1\":{\"634\":1,\"2461\":1,\"2465\":1,\"2518\":1,\"2524\":1}}],[\"linkedlist操作复杂度\",{\"1\":{\"2712\":1}}],[\"linkedlist等\",{\"1\":{\"2547\":1}}],[\"linkedlist是非线程安全的集合类\",{\"1\":{\"2513\":1}}],[\"linkedlist是java集合框架中基于双向链表实现的list接口实现类\",{\"1\":{\"2489\":1}}],[\"linkedlist可以与hashmap结合实现lru缓存\",{\"1\":{\"2512\":1}}],[\"linkedlist可能导致内存泄漏\",{\"1\":{\"2508\":1}}],[\"linkedlist如何实现lru缓存\",{\"0\":{\"2512\":1}}],[\"linkedlist为o\",{\"1\":{\"2511\":1}}],[\"linkedlist和arraylist作为list接口的两个主要实现类\",{\"1\":{\"2511\":1}}],[\"linkedlist和arraylist的性能对比及适用场景\",{\"0\":{\"2511\":1}}],[\"linkedlist实现了deque接口\",{\"1\":{\"2502\":1,\"2511\":1}}],[\"linkedlist实现了queue接口\",{\"1\":{\"2349\":1}}],[\"linkedlist针对索引访问进行了优化\",{\"1\":{\"2501\":1}}],[\"linkedlist类结构分析\",{\"0\":{\"2489\":1}}],[\"linkedlist源码\",{\"0\":{\"2487\":1}}],[\"linkedlist每个元素需要额外存储前后指针\",{\"1\":{\"2484\":1}}],[\"linkedlist需要创建节点对象\",{\"1\":{\"2484\":1}}],[\"linkedlist基于链表实现\",{\"1\":{\"2564\":1}}],[\"linkedlist基于节点\",{\"1\":{\"2484\":1}}],[\"linkedlist基于双向链表实现\",{\"1\":{\"2319\":1}}],[\"linkedlist中间删除\",{\"1\":{\"2354\":1}}],[\"linkedlist中间添加\",{\"1\":{\"2354\":1}}],[\"linkedlist尾部\",{\"1\":{\"2354\":2}}],[\"linkedlist的线程安全问题及解决方案\",{\"0\":{\"2513\":1}}],[\"linkedlist的remove\",{\"1\":{\"2512\":2}}],[\"linkedlist的removelast\",{\"1\":{\"2511\":1}}],[\"linkedlist的内存劣势越明显\",{\"1\":{\"2511\":1}}],[\"linkedlist的核心设计思想是基于双向链表实现\",{\"1\":{\"2500\":1}}],[\"linkedlist的get\",{\"1\":{\"2348\":1}}],[\"linkedlist的使用误区\",{\"0\":{\"2347\":1}}],[\"linkedlist的设计思想\",{\"0\":{\"2335\":1}}],[\"linkedlist的双向链表\",{\"0\":{\"2319\":1}}],[\"linkedlistremovefirsttime\",{\"1\":{\"2327\":2}}],[\"linkedlistremovelasttime\",{\"1\":{\"2327\":2}}],[\"linkedlistaccesstime\",{\"1\":{\"2327\":3}}],[\"linkedlistaddfirsttime\",{\"1\":{\"2327\":2}}],[\"linkedlistaddlasttime\",{\"1\":{\"2327\":2}}],[\"linkedlist2\",{\"1\":{\"2323\":1}}],[\"linkedlist1\",{\"1\":{\"2323\":1}}],[\"linkedlist同时实现了deque接口\",{\"1\":{\"2319\":1}}],[\"linkedlist遍历方式\",{\"1\":{\"1179\":1}}],[\"linkedlist迭代器遍历最快\",{\"1\":{\"1179\":1}}],[\"linkedlist<node>\",{\"1\":{\"2512\":1}}],[\"linkedlist<object>\",{\"1\":{\"2508\":1}}],[\"linkedlist<integer>\",{\"1\":{\"2505\":1}}],[\"linkedlist<>\",{\"1\":{\"286\":2,\"293\":1,\"642\":1,\"1179\":1,\"2323\":2,\"2327\":5,\"2348\":1,\"2476\":1,\"2478\":2,\"2505\":1,\"2506\":3,\"2507\":1,\"2508\":1,\"2509\":1,\"2512\":1,\"2513\":2,\"2555\":1,\"2712\":1,\"3007\":1}}],[\"linkedlist<string>\",{\"1\":{\"286\":2,\"2506\":1,\"2507\":1,\"2509\":1}}],[\"linkedlist\",{\"1\":{\"286\":5,\"293\":1,\"1174\":2,\"1179\":2,\"2316\":1,\"2320\":1,\"2323\":1,\"2327\":9,\"2348\":3,\"2354\":2,\"2461\":1,\"2493\":2,\"2503\":1,\"2511\":4,\"2513\":1,\"2548\":1,\"2712\":5}}],[\"link\",{\"1\":{\"165\":1,\"193\":1,\"1443\":1,\"1444\":2,\"1527\":1,\"1881\":1,\"3257\":2}}],[\"linebasedframedecoder\",{\"1\":{\"3126\":1}}],[\"linenumber++\",{\"1\":{\"2856\":1,\"2867\":1}}],[\"linenumber\",{\"1\":{\"2856\":3,\"2867\":3}}],[\"linenumbertable\",{\"1\":{\"724\":1,\"728\":1,\"733\":1}}],[\"linelist\",{\"1\":{\"472\":1}}],[\"lineseparator\",{\"1\":{\"2951\":1}}],[\"lines\",{\"1\":{\"472\":3,\"1059\":1,\"1095\":7,\"3205\":2}}],[\"line\",{\"1\":{\"122\":1,\"472\":4,\"1095\":1,\"1221\":3,\"1314\":5,\"1528\":1,\"1564\":1,\"2856\":3,\"2861\":3,\"2867\":3,\"2880\":3,\"2951\":3,\"3205\":13}}],[\"like\",{\"1\":{\"113\":1,\"115\":1,\"119\":1,\"1818\":1,\"1822\":1,\"1826\":1,\"1830\":1,\"1831\":1}}],[\"lib目录\",{\"1\":{\"1785\":1}}],[\"libnetsnmpmibs\",{\"1\":{\"1735\":1}}],[\"libcrypto\",{\"1\":{\"1735\":1}}],[\"libraries\",{\"1\":{\"1735\":2}}],[\"library\",{\"1\":{\"125\":1,\"999\":1,\"1005\":1,\"1586\":1,\"1637\":2,\"1638\":1,\"1667\":2,\"3257\":1}}],[\"lib和\",{\"1\":{\"1586\":1}}],[\"libll\",{\"1\":{\"1586\":1}}],[\"libllvm\",{\"1\":{\"1586\":13}}],[\"lib64\",{\"1\":{\"1586\":11}}],[\"libelf\",{\"1\":{\"1486\":1}}],[\"libs\",{\"1\":{\"1483\":1,\"1498\":1,\"1499\":1,\"1583\":1,\"1765\":1,\"1778\":1}}],[\"lib\",{\"1\":{\"113\":1,\"1577\":1,\"1578\":4,\"1586\":4,\"1606\":1,\"1610\":1,\"1632\":1,\"1634\":1,\"1638\":1,\"1667\":11,\"1671\":1,\"1675\":1,\"1731\":3,\"1741\":1,\"1764\":2,\"1778\":1,\"3246\":1,\"3271\":1}}],[\"limit=position\",{\"1\":{\"3116\":1}}],[\"limitcore=infinity\",{\"1\":{\"1620\":1,\"1752\":1}}],[\"limitnproc=infinity\",{\"1\":{\"1620\":1,\"1752\":1}}],[\"limitnofile=infinity\",{\"1\":{\"1620\":1,\"1752\":1}}],[\"limits\",{\"1\":{\"1610\":1,\"1698\":1}}],[\"limit\",{\"1\":{\"48\":1,\"85\":1,\"125\":1,\"204\":1,\"1395\":3,\"1396\":2,\"1397\":5,\"1558\":1,\"1570\":1,\"1809\":1,\"2914\":1,\"3116\":2}}],[\"=o\",{\"1\":{\"2726\":1}}],[\"=80\",{\"1\":{\"2269\":1}}],[\"=1\",{\"1\":{\"1828\":1}}],[\"=root\",{\"1\":{\"1503\":1}}],[\"=repl\",{\"1\":{\"171\":1}}],[\"=>\",{\"1\":{\"1363\":5,\"1524\":4,\"1535\":12}}],[\"=utf\",{\"1\":{\"286\":1}}],[\"=inputstreamtofile\",{\"1\":{\"286\":1}}],[\"==仅用于判断引用是否相同\",{\"1\":{\"2255\":1}}],[\"==与equals\",{\"0\":{\"2248\":1}}],[\"==用于比较对象引用\",{\"1\":{\"2204\":1}}],[\"===\",{\"1\":{\"1221\":3,\"2327\":4}}],[\"==200\",{\"1\":{\"285\":2}}],[\"==\",{\"1\":{\"284\":1,\"289\":5,\"293\":1,\"430\":1,\"504\":1,\"517\":2,\"543\":1,\"557\":1,\"575\":1,\"613\":2,\"642\":1,\"746\":1,\"1040\":2,\"1041\":3,\"1069\":2,\"1087\":3,\"1095\":2,\"1161\":4,\"1162\":3,\"1164\":3,\"1165\":1,\"1166\":2,\"1169\":1,\"1170\":3,\"1181\":5,\"1182\":3,\"1228\":2,\"1237\":1,\"1238\":2,\"1250\":1,\"1260\":3,\"1295\":1,\"1315\":1,\"1325\":1,\"1326\":1,\"1431\":2,\"1440\":2,\"1443\":2,\"1444\":2,\"1949\":3,\"1962\":3,\"1974\":2,\"1975\":2,\"1987\":2,\"1988\":1,\"2027\":1,\"2058\":2,\"2061\":1,\"2078\":3,\"2110\":1,\"2114\":1,\"2132\":1,\"2133\":1,\"2134\":1,\"2161\":1,\"2189\":3,\"2191\":1,\"2194\":2,\"2204\":1,\"2205\":3,\"2207\":2,\"2228\":4,\"2234\":1,\"2239\":3,\"2243\":1,\"2245\":4,\"2246\":2,\"2247\":1,\"2248\":4,\"2249\":3,\"2255\":1,\"2294\":2,\"2295\":1,\"2296\":2,\"2303\":3,\"2304\":3,\"2318\":1,\"2392\":2,\"2436\":1,\"2437\":1,\"2440\":2,\"2485\":5,\"2494\":3,\"2496\":4,\"2497\":7,\"2498\":6,\"2544\":2,\"2554\":6,\"2555\":1,\"2573\":2,\"2574\":1,\"2599\":1,\"2600\":9,\"2601\":6,\"2602\":2,\"2605\":3,\"2628\":1,\"2629\":3,\"2630\":2,\"2631\":2,\"2642\":1,\"2655\":2,\"2656\":6,\"2657\":4,\"2658\":1,\"2681\":2,\"2682\":1,\"2683\":1,\"2684\":2,\"2704\":1,\"2708\":2,\"2709\":1,\"2710\":3,\"2711\":2,\"2721\":1,\"2724\":1,\"2727\":1,\"2809\":1,\"2873\":6,\"2916\":2,\"2921\":2,\"2949\":2,\"2965\":4,\"2980\":1,\"2987\":1,\"2999\":1,\"3000\":1,\"3003\":1,\"3007\":1,\"3023\":2,\"3024\":2,\"3035\":1,\"3087\":3,\"3107\":3,\"3118\":2,\"3120\":1,\"3162\":1,\"3208\":1,\"3209\":1,\"3215\":2,\"3222\":1,\"3238\":2}}],[\"=99\",{\"1\":{\"160\":1}}],[\"=\",{\"1\":{\"20\":1,\"47\":2,\"48\":4,\"49\":4,\"50\":2,\"58\":2,\"59\":3,\"60\":2,\"68\":1,\"69\":1,\"70\":1,\"71\":1,\"91\":1,\"98\":6,\"106\":3,\"113\":2,\"125\":2,\"171\":1,\"216\":1,\"232\":16,\"249\":7,\"267\":11,\"269\":4,\"270\":2,\"279\":4,\"280\":7,\"281\":4,\"282\":1,\"283\":4,\"284\":8,\"286\":33,\"288\":3,\"289\":29,\"290\":1,\"291\":1,\"292\":1,\"293\":3,\"294\":7,\"307\":4,\"324\":1,\"325\":1,\"338\":1,\"366\":1,\"367\":1,\"368\":1,\"382\":1,\"407\":1,\"428\":7,\"429\":2,\"430\":1,\"434\":1,\"438\":6,\"439\":5,\"440\":2,\"445\":2,\"449\":2,\"450\":4,\"456\":7,\"468\":3,\"469\":2,\"471\":6,\"472\":10,\"473\":3,\"474\":1,\"479\":1,\"500\":1,\"501\":1,\"502\":2,\"517\":1,\"519\":1,\"521\":1,\"526\":2,\"527\":2,\"529\":4,\"537\":4,\"538\":9,\"539\":8,\"543\":9,\"544\":10,\"545\":15,\"552\":4,\"553\":3,\"554\":1,\"557\":10,\"566\":2,\"574\":2,\"575\":3,\"578\":3,\"580\":1,\"592\":4,\"593\":2,\"609\":1,\"610\":1,\"613\":1,\"625\":3,\"626\":4,\"629\":2,\"642\":6,\"643\":4,\"658\":4,\"659\":2,\"660\":3,\"663\":1,\"675\":5,\"676\":4,\"677\":6,\"693\":3,\"694\":4,\"710\":3,\"711\":1,\"727\":1,\"728\":34,\"729\":11,\"745\":5,\"746\":12,\"747\":8,\"756\":1,\"772\":3,\"773\":2,\"781\":1,\"792\":2,\"826\":2,\"860\":2,\"894\":2,\"1037\":6,\"1038\":3,\"1040\":16,\"1041\":16,\"1043\":13,\"1044\":5,\"1053\":8,\"1055\":8,\"1056\":13,\"1058\":4,\"1066\":4,\"1068\":10,\"1069\":11,\"1079\":3,\"1081\":1,\"1087\":5,\"1092\":1,\"1094\":27,\"1095\":8,\"1104\":3,\"1111\":6,\"1123\":4,\"1125\":1,\"1126\":2,\"1129\":1,\"1132\":1,\"1135\":1,\"1139\":3,\"1144\":2,\"1145\":2,\"1147\":3,\"1150\":2,\"1151\":4,\"1160\":6,\"1161\":15,\"1162\":11,\"1164\":7,\"1165\":5,\"1166\":7,\"1170\":9,\"1178\":9,\"1179\":10,\"1181\":32,\"1182\":10,\"1185\":2,\"1186\":5,\"1190\":4,\"1191\":4,\"1193\":4,\"1194\":5,\"1203\":2,\"1212\":2,\"1221\":10,\"1222\":11,\"1224\":19,\"1225\":10,\"1228\":13,\"1232\":7,\"1234\":4,\"1235\":2,\"1236\":2,\"1237\":1,\"1238\":16,\"1243\":1,\"1246\":1,\"1247\":3,\"1249\":6,\"1250\":8,\"1254\":4,\"1260\":6,\"1264\":15,\"1267\":5,\"1269\":8,\"1270\":7,\"1280\":3,\"1290\":2,\"1294\":3,\"1295\":5,\"1296\":2,\"1301\":3,\"1303\":1,\"1312\":3,\"1314\":8,\"1315\":14,\"1321\":11,\"1324\":17,\"1325\":11,\"1326\":12,\"1332\":5,\"1336\":4,\"1337\":2,\"1338\":5,\"1339\":1,\"1385\":1,\"1392\":1,\"1393\":1,\"1410\":1,\"1431\":6,\"1433\":1,\"1434\":1,\"1435\":1,\"1439\":26,\"1440\":8,\"1443\":16,\"1444\":11,\"1447\":2,\"1449\":4,\"1453\":6,\"1455\":3,\"1456\":4,\"1457\":2,\"1458\":8,\"1459\":4,\"1461\":1,\"1462\":1,\"1467\":1,\"1469\":7,\"1503\":10,\"1548\":1,\"1575\":2,\"1578\":8,\"1610\":4,\"1656\":3,\"1684\":16,\"1697\":1,\"1711\":8,\"1764\":4,\"1775\":2,\"1788\":1,\"1819\":1,\"1822\":1,\"1827\":11,\"1831\":9,\"1833\":1,\"1880\":4,\"1885\":1,\"1887\":1,\"1962\":2,\"1999\":2,\"2007\":4,\"2027\":1,\"2032\":1,\"2039\":3,\"2047\":1,\"2051\":2,\"2054\":3,\"2057\":4,\"2059\":3,\"2061\":1,\"2062\":1,\"2065\":7,\"2066\":3,\"2068\":2,\"2076\":4,\"2077\":2,\"2078\":13,\"2079\":1,\"2080\":10,\"2089\":2,\"2091\":4,\"2099\":8,\"2100\":5,\"2101\":13,\"2109\":7,\"2110\":9,\"2111\":9,\"2112\":9,\"2113\":7,\"2114\":4,\"2115\":5,\"2125\":1,\"2126\":1,\"2128\":4,\"2129\":2,\"2130\":2,\"2132\":2,\"2133\":2,\"2134\":2,\"2144\":8,\"2146\":2,\"2147\":2,\"2149\":1,\"2150\":2,\"2151\":3,\"2158\":3,\"2159\":2,\"2161\":6,\"2167\":11,\"2169\":2,\"2170\":3,\"2173\":6,\"2174\":6,\"2180\":3,\"2181\":5,\"2183\":11,\"2188\":8,\"2189\":4,\"2191\":3,\"2194\":7,\"2195\":7,\"2196\":6,\"2197\":6,\"2198\":7,\"2202\":5,\"2204\":2,\"2205\":1,\"2207\":6,\"2212\":2,\"2213\":3,\"2214\":3,\"2216\":3,\"2217\":2,\"2218\":1,\"2220\":2,\"2221\":2,\"2223\":3,\"2224\":3,\"2228\":2,\"2230\":1,\"2231\":1,\"2234\":4,\"2239\":4,\"2240\":2,\"2243\":2,\"2245\":5,\"2246\":4,\"2248\":4,\"2249\":6,\"2255\":2,\"2256\":3,\"2257\":1,\"2263\":1,\"2265\":1,\"2266\":1,\"2268\":1,\"2269\":6,\"2271\":1,\"2272\":6,\"2276\":13,\"2278\":3,\"2279\":3,\"2280\":4,\"2281\":1,\"2282\":3,\"2288\":2,\"2291\":6,\"2292\":3,\"2294\":7,\"2295\":7,\"2296\":1,\"2303\":4,\"2304\":8,\"2311\":8,\"2318\":11,\"2319\":3,\"2320\":2,\"2323\":7,\"2324\":5,\"2325\":4,\"2326\":4,\"2327\":28,\"2328\":8,\"2329\":10,\"2340\":5,\"2341\":3,\"2342\":2,\"2344\":1,\"2346\":3,\"2348\":3,\"2352\":2,\"2355\":3,\"2356\":13,\"2358\":3,\"2369\":11,\"2370\":3,\"2371\":9,\"2372\":8,\"2373\":3,\"2382\":3,\"2386\":2,\"2388\":1,\"2392\":4,\"2406\":5,\"2407\":3,\"2408\":5,\"2409\":15,\"2410\":4,\"2419\":4,\"2420\":3,\"2423\":3,\"2427\":2,\"2429\":2,\"2433\":4,\"2436\":9,\"2437\":2,\"2438\":5,\"2439\":2,\"2440\":10,\"2441\":11,\"2444\":1,\"2448\":5,\"2449\":6,\"2450\":5,\"2451\":3,\"2452\":5,\"2456\":6,\"2465\":5,\"2466\":11,\"2467\":4,\"2468\":3,\"2476\":3,\"2477\":2,\"2478\":4,\"2480\":1,\"2481\":1,\"2485\":11,\"2490\":5,\"2494\":10,\"2495\":9,\"2496\":26,\"2497\":23,\"2498\":16,\"2505\":6,\"2506\":8,\"2507\":6,\"2508\":7,\"2509\":5,\"2512\":11,\"2513\":10,\"2522\":6,\"2523\":4,\"2524\":9,\"2525\":6,\"2533\":3,\"2534\":1,\"2536\":5,\"2537\":3,\"2539\":6,\"2544\":11,\"2551\":2,\"2554\":5,\"2555\":4,\"2571\":2,\"2573\":3,\"2574\":5,\"2575\":7,\"2577\":3,\"2578\":1,\"2586\":1,\"2599\":1,\"2600\":20,\"2601\":40,\"2604\":4,\"2605\":6,\"2612\":3,\"2613\":2,\"2614\":3,\"2615\":3,\"2627\":1,\"2628\":9,\"2629\":16,\"2630\":9,\"2631\":1,\"2632\":2,\"2640\":2,\"2642\":1,\"2654\":1,\"2655\":19,\"2656\":11,\"2657\":22,\"2660\":3,\"2661\":2,\"2668\":1,\"2669\":3,\"2670\":2,\"2679\":1,\"2680\":3,\"2681\":15,\"2682\":7,\"2683\":12,\"2684\":18,\"2685\":8,\"2691\":2,\"2692\":1,\"2693\":1,\"2694\":1,\"2697\":4,\"2704\":7,\"2707\":3,\"2708\":3,\"2709\":7,\"2710\":5,\"2712\":4,\"2715\":3,\"2716\":6,\"2721\":1,\"2723\":2,\"2724\":3,\"2727\":5,\"2733\":2,\"2734\":5,\"2738\":1,\"2740\":3,\"2742\":5,\"2745\":6,\"2748\":1,\"2749\":2,\"2750\":2,\"2759\":3,\"2765\":1,\"2779\":3,\"2785\":4,\"2795\":1,\"2797\":1,\"2798\":1,\"2808\":1,\"2810\":1,\"2819\":1,\"2820\":1,\"2821\":2,\"2831\":7,\"2832\":3,\"2833\":5,\"2837\":11,\"2843\":11,\"2844\":7,\"2845\":7,\"2849\":16,\"2855\":6,\"2856\":7,\"2857\":10,\"2861\":8,\"2866\":10,\"2867\":7,\"2868\":19,\"2873\":10,\"2878\":9,\"2879\":5,\"2880\":6,\"2881\":3,\"2885\":8,\"2891\":7,\"2892\":10,\"2893\":9,\"2897\":12,\"2902\":2,\"2903\":3,\"2904\":2,\"2905\":1,\"2909\":5,\"2914\":4,\"2915\":8,\"2916\":13,\"2917\":6,\"2921\":33,\"2927\":7,\"2936\":1,\"2937\":1,\"2938\":4,\"2949\":1,\"2951\":5,\"2953\":1,\"2955\":2,\"2956\":1,\"2959\":3,\"2960\":1,\"2965\":4,\"2968\":6,\"2969\":11,\"2970\":13,\"2971\":10,\"2974\":4,\"2980\":2,\"2983\":7,\"2984\":4,\"2986\":12,\"2987\":3,\"2989\":6,\"2990\":2,\"2993\":2,\"2999\":12,\"3000\":16,\"3002\":17,\"3003\":21,\"3005\":12,\"3007\":32,\"3010\":5,\"3017\":4,\"3019\":5,\"3020\":5,\"3021\":1,\"3023\":5,\"3024\":4,\"3025\":4,\"3034\":2,\"3035\":6,\"3039\":1,\"3041\":1,\"3046\":4,\"3047\":2,\"3052\":1,\"3065\":21,\"3066\":9,\"3070\":7,\"3078\":4,\"3079\":10,\"3082\":3,\"3085\":7,\"3086\":11,\"3087\":16,\"3097\":3,\"3116\":3,\"3117\":5,\"3118\":12,\"3120\":3,\"3125\":8,\"3134\":3,\"3136\":1,\"3137\":4,\"3141\":4,\"3149\":3,\"3150\":1,\"3154\":6,\"3159\":2,\"3160\":1,\"3162\":6,\"3164\":11,\"3165\":8,\"3166\":2,\"3170\":13,\"3190\":27,\"3199\":9,\"3205\":9,\"3206\":5,\"3208\":20,\"3209\":10,\"3212\":16,\"3214\":8,\"3215\":38,\"3217\":2,\"3218\":16,\"3222\":4,\"3223\":2,\"3224\":4,\"3225\":3,\"3232\":4,\"3235\":5,\"3237\":6,\"3238\":9,\"3240\":5,\"3241\":2,\"3244\":6,\"3271\":1}}],[\"导航方法\",{\"1\":{\"2666\":1}}],[\"导航方法使用示例\",{\"0\":{\"2661\":1}}],[\"导航栏\",{\"1\":{\"5\":1,\"8\":1}}],[\"导入整个包\",{\"1\":{\"2768\":1}}],[\"导入单个类\",{\"1\":{\"2768\":1}}],[\"导入镜像文件\",{\"1\":{\"3246\":1}}],[\"导入镜像\",{\"1\":{\"1641\":1}}],[\"导入sql文件\",{\"1\":{\"1640\":1}}],[\"导入依赖\",{\"1\":{\"1564\":1}}],[\"导入依赖坐标后会加载jar包导入相应的字节码文件\",{\"1\":{\"459\":1}}],[\"导入jar到项目中\",{\"1\":{\"1563\":1}}],[\"导入仓库源\",{\"0\":{\"1474\":1}}],[\"导入\",{\"1\":{\"1438\":1,\"1441\":2,\"2768\":1}}],[\"导入其他类\",{\"1\":{\"461\":1}}],[\"导入一个importbeandefinitionregistrar自定义实现类\",{\"1\":{\"418\":1,\"462\":1}}],[\"导入一个importselector自定义实现类\",{\"1\":{\"418\":1,\"462\":1}}],[\"导入一个配置类\",{\"1\":{\"418\":1,\"462\":1}}],[\"导入一个bean类对象直接加载到中ioc容器中\",{\"1\":{\"418\":1,\"462\":1}}],[\"导入的类会被spring加载到ioc容器中\",{\"1\":{\"418\":1,\"462\":1}}],[\"导入文件\",{\"0\":{\"19\":1}}],[\"导出成镜像文件\",{\"1\":{\"3246\":1}}],[\"导出包供正常使用\",{\"1\":{\"3010\":1}}],[\"导出镜像文件名\",{\"1\":{\"3246\":1}}],[\"导出镜像\",{\"1\":{\"1641\":1}}],[\"导出公共api\",{\"1\":{\"490\":1}}],[\"导出excel文件\",{\"1\":{\"269\":1}}],[\"导出工具类\",{\"1\":{\"269\":1}}],[\"导致呼叫失败\",{\"1\":{\"3224\":1}}],[\"导致外部网络无法访问\",{\"1\":{\"3194\":1}}],[\"导致问题难以诊断\",{\"1\":{\"2959\":1}}],[\"导致后续写入覆盖数据\",{\"1\":{\"2920\":1}}],[\"导致线程安全问题和测试困难\",{\"1\":{\"2775\":1}}],[\"导致线程永久阻塞\",{\"1\":{\"1339\":1}}],[\"导致序列化后体积较大\",{\"1\":{\"2641\":1}}],[\"导致频繁扩容\",{\"1\":{\"2614\":1}}],[\"导致其所有方法都是同步的\",{\"1\":{\"2557\":1}}],[\"导致其加载的类也无法卸载\",{\"1\":{\"753\":1}}],[\"导致竞态条件\",{\"1\":{\"2534\":1}}],[\"导致性能损耗\",{\"1\":{\"2452\":1}}],[\"导致插入和查找性能下降\",{\"1\":{\"2385\":1}}],[\"导致数据不一致\",{\"1\":{\"3223\":1}}],[\"导致数据读取错误\",{\"1\":{\"1235\":1,\"2920\":1}}],[\"导致数组复制开销\",{\"1\":{\"2344\":1}}],[\"导致越界\",{\"1\":{\"2158\":1}}],[\"导致循环永远不会结束的情况\",{\"1\":{\"2138\":1}}],[\"导致cpu干正经事的时间少了\",{\"1\":{\"1887\":1}}],[\"导致cpu使用率100\",{\"1\":{\"1237\":1,\"2920\":1}}],[\"导致上下文切换\",{\"1\":{\"1887\":1}}],[\"导致找不到对应的镜像\",{\"1\":{\"1669\":1}}],[\"导致私服连接不上\",{\"1\":{\"1669\":1}}],[\"导致异常的原因\",{\"1\":{\"1558\":1}}],[\"导致程序不稳定\",{\"1\":{\"1337\":1}}],[\"导致资源耗尽\",{\"1\":{\"1336\":1}}],[\"导致错误\",{\"1\":{\"1311\":1}}],[\"导致中文乱码\",{\"1\":{\"1236\":1}}],[\"导致它们都无法继续执行的情况\",{\"1\":{\"1128\":1}}],[\"导致依赖它的代码无法正常工作\",{\"1\":{\"1011\":1}}],[\"导致堆内存动态调整\",{\"1\":{\"813\":1,\"847\":1,\"881\":1,\"915\":1}}],[\"导致对象无法回收\",{\"1\":{\"781\":1}}],[\"导致对数\",{\"1\":{\"191\":1}}],[\"导致对数据库服务器造成压力\",{\"1\":{\"190\":1,\"192\":1}}],[\"导致大对象无法分配内存\",{\"1\":{\"764\":1}}],[\"导致优先级反转\",{\"1\":{\"616\":1}}],[\"导致主从服务器数据库状态不一致\",{\"1\":{\"167\":1}}],[\"导致深度越高的slave与最顶层master间数据同步延迟\",{\"1\":{\"166\":1}}],[\"导库操作\",{\"1\":{\"121\":1}}],[\"mkfs\",{\"1\":{\"3275\":1}}],[\"mkdir\",{\"0\":{\"1865\":1},\"1\":{\"1402\":1,\"1417\":1,\"1487\":1,\"1509\":1,\"1569\":1,\"1577\":1,\"1578\":1,\"1590\":1,\"1595\":2,\"1605\":1,\"1615\":1,\"1626\":2,\"1667\":1,\"1675\":1,\"1715\":2,\"1728\":1,\"1734\":2,\"1746\":1,\"1768\":1,\"1779\":1,\"1835\":1,\"1865\":2,\"3250\":2,\"3262\":2,\"3271\":1,\"3273\":1,\"3275\":1}}],[\"m8rsfplbthftexpk1zhrxvlr280blf4zmpaslf2mwfxzhhcmnrruwovdwnua1qxru1kufbscm0rd\",{\"1\":{\"3273\":1}}],[\"m`\",{\"1\":{\"3248\":1}}],[\"m++\",{\"1\":{\"2078\":1}}],[\"m=\",{\"1\":{\"1794\":1,\"3205\":1}}],[\"m=audio\",{\"1\":{\"1092\":1,\"3180\":1,\"3190\":1}}],[\"mp3\",{\"1\":{\"1920\":2}}],[\"mp4\",{\"1\":{\"1779\":1}}],[\"mpkqrekysnsdwux0m7alea\",{\"1\":{\"1513\":1}}],[\"mf3为它的默认表空间\",{\"1\":{\"1573\":2}}],[\"mf3\",{\"1\":{\"1573\":3,\"1575\":1}}],[\"mf3数据表空间\",{\"1\":{\"1573\":2}}],[\"mrproper\",{\"1\":{\"1489\":2}}],[\"mrg\",{\"1\":{\"125\":1}}],[\"ml\",{\"0\":{\"1476\":1},\"1\":{\"1472\":1,\"1475\":1,\"1476\":3,\"1483\":1,\"1498\":1,\"1499\":1}}],[\"m一分钟接收一个请求\",{\"1\":{\"1395\":1}}],[\"m2\",{\"1\":{\"972\":2}}],[\"mmap+write\",{\"1\":{\"1232\":1,\"1321\":1}}],[\"mm\",{\"1\":{\"545\":1,\"1363\":1,\"1524\":1,\"1535\":4,\"1564\":5,\"2072\":3,\"2765\":1,\"3102\":1}}],[\"mv\",{\"1\":{\"1624\":3,\"1734\":1,\"1756\":1,\"1779\":1,\"1783\":1,\"3246\":1,\"3262\":1}}],[\"mvc成为web开发主流\",{\"1\":{\"580\":1}}],[\"mvc的请求\",{\"1\":{\"387\":1}}],[\"mvc通过dispatcherservlet\",{\"1\":{\"387\":1}}],[\"mvc设计模式是一种软件架构模式\",{\"1\":{\"387\":1}}],[\"mvc是如何实现mvc设计模式的\",{\"1\":{\"387\":1}}],[\"mvc提供的\",{\"1\":{\"387\":1}}],[\"mvc提供的注解\",{\"1\":{\"386\":1}}],[\"mvc提供的一个组件\",{\"1\":{\"383\":1}}],[\"mvc框架和restful\",{\"1\":{\"385\":1}}],[\"mvc框架\",{\"1\":{\"377\":1}}],[\"mvc\",{\"0\":{\"377\":1,\"382\":1},\"1\":{\"375\":1,\"377\":1}}],[\"mvnrepository\",{\"1\":{\"302\":1}}],[\"mvn\",{\"1\":{\"280\":1,\"949\":1,\"950\":2,\"951\":1,\"959\":1,\"960\":1,\"1020\":2,\"1025\":1,\"1656\":1,\"1711\":1,\"2020\":3,\"3246\":1}}],[\"mqshutdown\",{\"1\":{\"1834\":2}}],[\"mq\",{\"1\":{\"255\":1}}],[\"mqbroker\",{\"1\":{\"250\":1,\"1834\":1}}],[\"mqnamesrv\",{\"1\":{\"250\":1,\"1834\":1}}],[\"m1用arm64\",{\"1\":{\"1800\":1}}],[\"m1的镜像\",{\"1\":{\"233\":1}}],[\"m1芯片是arm64架构\",{\"1\":{\"224\":1}}],[\"m1\",{\"0\":{\"213\":1},\"1\":{\"233\":1,\"234\":2,\"246\":1}}],[\"mbean标签页中的java\",{\"1\":{\"3096\":1}}],[\"mb\",{\"1\":{\"157\":1,\"166\":1,\"171\":1,\"694\":4,\"1833\":21}}],[\"mgmt\",{\"1\":{\"125\":1}}],[\"m必须>=\",{\"1\":{\"125\":1}}],[\"m\",{\"1\":{\"125\":4,\"1395\":1,\"1396\":1,\"1491\":1,\"1714\":2,\"1747\":1,\"1788\":2,\"1794\":1,\"1879\":1,\"1885\":1,\"2078\":5,\"2649\":1,\"2658\":4,\"3246\":1}}],[\"micrometer\",{\"1\":{\"3097\":1}}],[\"micronaut等简化微服务开发\",{\"1\":{\"571\":1}}],[\"middleware\",{\"0\":{\"3304\":1}}],[\"middleint\",{\"1\":{\"3023\":2}}],[\"middle\",{\"1\":{\"3023\":4}}],[\"middlestr\",{\"1\":{\"3023\":2}}],[\"mid\",{\"1\":{\"1161\":6,\"2710\":6}}],[\"might\",{\"1\":{\"994\":1,\"2291\":1}}],[\"migration\",{\"1\":{\"186\":1}}],[\"mirror\",{\"1\":{\"1488\":2,\"1615\":1,\"1621\":1,\"1626\":1,\"1666\":1,\"1669\":1,\"1675\":1,\"1715\":1,\"1746\":1,\"1753\":1}}],[\"mirrors\",{\"1\":{\"982\":1,\"1480\":1,\"1481\":3,\"1488\":1,\"1612\":1,\"1615\":1,\"1621\":2,\"1666\":1,\"1669\":2,\"1672\":1,\"1675\":1,\"1743\":1,\"1746\":1,\"1753\":2,\"3271\":1,\"3273\":6}}],[\"mirrors>\",{\"1\":{\"981\":1}}],[\"mirror>\",{\"1\":{\"981\":1}}],[\"mirrorof>\",{\"1\":{\"981\":1}}],[\"mime\",{\"1\":{\"216\":1,\"1384\":2,\"1385\":1,\"1417\":1,\"1595\":1}}],[\"million\",{\"1\":{\"178\":2}}],[\"milliseconds\",{\"1\":{\"178\":1,\"186\":1,\"199\":1,\"200\":1,\"2467\":1}}],[\"misconf\",{\"1\":{\"1788\":1}}],[\"misses\",{\"1\":{\"193\":1}}],[\"miss\",{\"1\":{\"157\":1}}],[\"missing\",{\"1\":{\"125\":1,\"3238\":1}}],[\"mismatch\",{\"1\":{\"125\":5}}],[\"mincapacity\",{\"1\":{\"2272\":4,\"2318\":11,\"2355\":1,\"2434\":1,\"2437\":11,\"2438\":9}}],[\"miniovolumesize\",{\"1\":{\"1638\":1}}],[\"minimumcapacity\",{\"1\":{\"2272\":3,\"2282\":1}}],[\"minimum\",{\"1\":{\"445\":1,\"1513\":2}}],[\"min等注解\",{\"1\":{\"1069\":1}}],[\"minutes\",{\"1\":{\"1004\":1,\"2522\":1,\"2524\":1}}],[\"minusmonths\",{\"1\":{\"545\":1}}],[\"minor\",{\"1\":{\"708\":1,\"724\":1}}],[\"min来确保\",{\"1\":{\"288\":1}}],[\"min\",{\"1\":{\"125\":1,\"169\":2,\"186\":1,\"204\":1,\"288\":1,\"428\":2,\"1312\":1,\"1433\":1,\"1434\":1,\"1435\":1,\"1440\":1,\"1447\":1,\"1450\":1,\"1455\":1,\"1456\":1,\"1457\":1,\"1458\":1,\"1459\":1,\"1461\":1,\"1462\":1,\"1463\":1,\"1464\":1,\"1467\":1,\"1469\":1,\"2065\":1,\"2114\":1,\"2326\":3,\"2873\":1,\"3003\":7,\"3275\":1}}],[\"mixing\",{\"1\":{\"125\":1}}],[\"mix\",{\"1\":{\"125\":2}}],[\"mutablekey\",{\"1\":{\"2612\":3,\"2669\":4}}],[\"mutablelist\",{\"1\":{\"2342\":2,\"2358\":3}}],[\"mul\",{\"1\":{\"2109\":1}}],[\"multicast\",{\"1\":{\"3282\":1}}],[\"multicluster\",{\"1\":{\"1638\":1}}],[\"multiclass\",{\"1\":{\"479\":3}}],[\"multilinecommentdemo\",{\"1\":{\"2090\":1}}],[\"multilinestr\",{\"1\":{\"472\":2}}],[\"multioverview\",{\"1\":{\"1609\":1}}],[\"multiply\",{\"1\":{\"2007\":1,\"2183\":1}}],[\"multiplyby2andadd3\",{\"1\":{\"557\":1}}],[\"multiplyby2\",{\"1\":{\"557\":3}}],[\"multiplestreamsexample\",{\"1\":{\"2892\":1}}],[\"multiple\",{\"1\":{\"125\":3}}],[\"multipart\",{\"1\":{\"434\":2}}],[\"multipartfile\",{\"1\":{\"434\":1}}],[\"multi\",{\"1\":{\"206\":1,\"1814\":2,\"1833\":1,\"1834\":1}}],[\"multiupdate\",{\"1\":{\"125\":1}}],[\"music\",{\"1\":{\"1920\":1}}],[\"must\",{\"1\":{\"125\":4,\"993\":1,\"1586\":1,\"1949\":4,\"1962\":4,\"1974\":1,\"1975\":2,\"1987\":1,\"1988\":1,\"2512\":1,\"2708\":1,\"3003\":2}}],[\"much\",{\"1\":{\"125\":1}}],[\"muc\",{\"1\":{\"122\":7}}],[\"mc\",{\"1\":{\"122\":1}}],[\"meow\",{\"1\":{\"2749\":1}}],[\"mediumtext\",{\"1\":{\"1687\":2}}],[\"mediaports\",{\"1\":{\"3209\":1}}],[\"mediatypes\",{\"1\":{\"3209\":1}}],[\"mediainfo\",{\"1\":{\"3209\":8}}],[\"media\",{\"1\":{\"1393\":2,\"3205\":1}}],[\"merchantability\",{\"1\":{\"1578\":1}}],[\"merged\",{\"1\":{\"2893\":1,\"2897\":1}}],[\"merge等便捷方法\",{\"1\":{\"2428\":1}}],[\"merge\",{\"1\":{\"125\":2,\"2024\":1,\"2357\":1,\"2410\":1,\"2534\":1,\"2541\":1}}],[\"merge表中的所有表未同等定义\",{\"1\":{\"125\":1}}],[\"me\",{\"1\":{\"1548\":1,\"1552\":1}}],[\"menuconfig\",{\"1\":{\"1491\":1}}],[\"menuentry\",{\"1\":{\"1477\":1,\"1478\":1,\"1484\":1,\"1495\":1}}],[\"men\",{\"1\":{\"1459\":1}}],[\"meat\",{\"1\":{\"463\":1}}],[\"meterregistry\",{\"1\":{\"3097\":8}}],[\"metrics\",{\"1\":{\"1638\":1,\"3109\":1}}],[\"metaspaceoom\",{\"1\":{\"710\":2}}],[\"metaspacesize=<size>\",{\"1\":{\"792\":1,\"826\":1,\"860\":1,\"894\":1}}],[\"metaspacesize=10m\",{\"1\":{\"710\":1}}],[\"metaspacesize和\",{\"1\":{\"719\":1}}],[\"metaspacesize\",{\"1\":{\"702\":1}}],[\"metadata\",{\"1\":{\"125\":1,\"269\":1,\"1363\":2,\"1535\":1,\"1638\":2,\"1642\":2,\"1648\":6,\"1649\":6,\"1650\":42,\"1660\":2,\"1661\":2,\"1685\":6,\"1688\":6,\"1698\":2,\"1713\":46,\"3000\":3,\"3276\":2}}],[\"method=\",{\"1\":{\"3266\":4}}],[\"method=none\",{\"1\":{\"1918\":1}}],[\"method对象\",{\"1\":{\"3011\":2}}],[\"method对象等反射相关对象\",{\"1\":{\"1264\":1}}],[\"method和constructor的父类\",{\"1\":{\"2989\":1}}],[\"methodlookupdemo\",{\"1\":{\"2983\":1}}],[\"methodinvocationdemo\",{\"1\":{\"2970\":1}}],[\"methodinterceptor\",{\"1\":{\"710\":1}}],[\"methodkey\",{\"1\":{\"2960\":1}}],[\"methodc\",{\"1\":{\"2936\":2}}],[\"methodb\",{\"1\":{\"2936\":2}}],[\"methodaccessor有两个实现\",{\"1\":{\"2987\":1}}],[\"methodaccessor\",{\"1\":{\"2987\":2}}],[\"methoda\",{\"1\":{\"2936\":2}}],[\"methodargumentnotvalidexception\",{\"1\":{\"429\":2}}],[\"methoddemo\",{\"1\":{\"2784\":1}}],[\"methoddealmodel\",{\"1\":{\"292\":2}}],[\"methodtree\",{\"1\":{\"2027\":6}}],[\"methodtype\",{\"1\":{\"1264\":6,\"2974\":6,\"3010\":6}}],[\"method等\",{\"1\":{\"1276\":1}}],[\"methodhandledemo\",{\"1\":{\"2974\":1,\"3010\":1}}],[\"methodhandletime\",{\"1\":{\"1264\":2}}],[\"methodhandle调用\",{\"1\":{\"1264\":2}}],[\"methodhandles\",{\"1\":{\"1264\":3,\"2974\":3,\"3010\":3}}],[\"methodhandle\",{\"1\":{\"1264\":2,\"2974\":2,\"3010\":2}}],[\"methodref\",{\"1\":{\"728\":2}}],[\"methodname\",{\"1\":{\"267\":4,\"1068\":6,\"1087\":3,\"2046\":1,\"2993\":3}}],[\"methodsignature\",{\"1\":{\"267\":4}}],[\"method\",{\"0\":{\"3036\":1},\"1\":{\"267\":11,\"283\":1,\"338\":4,\"519\":3,\"539\":1,\"541\":3,\"542\":1,\"556\":1,\"575\":1,\"710\":1,\"724\":1,\"729\":3,\"746\":3,\"1064\":1,\"1068\":1,\"1078\":1,\"1087\":4,\"1095\":3,\"1145\":2,\"1261\":1,\"1264\":2,\"1267\":6,\"1270\":3,\"1324\":2,\"1408\":1,\"1412\":1,\"1432\":2,\"2027\":1,\"2784\":1,\"2921\":3,\"2966\":1,\"2970\":6,\"2974\":1,\"2975\":1,\"2981\":2,\"2983\":5,\"2986\":5,\"2987\":1,\"2989\":2,\"2993\":9,\"3002\":16,\"3005\":8,\"3035\":2,\"3107\":1,\"3135\":2,\"3137\":6,\"3149\":6,\"3154\":1,\"3170\":2,\"3205\":1,\"3208\":4,\"3215\":3,\"3238\":2}}],[\"meet0and1\",{\"1\":{\"1573\":1}}],[\"meet\",{\"1\":{\"186\":2,\"208\":1}}],[\"memlock\",{\"1\":{\"1610\":2}}],[\"memorycharstreamexample\",{\"1\":{\"2857\":1}}],[\"memoryleakexample\",{\"1\":{\"2451\":1,\"2508\":1}}],[\"memory=1\",{\"1\":{\"1788\":1}}],[\"memory=4g\",{\"1\":{\"1569\":1}}],[\"memoryoomdemo\",{\"1\":{\"710\":1}}],[\"memory\",{\"0\":{\"1667\":1},\"1\":{\"125\":11,\"156\":1,\"157\":1,\"193\":2,\"662\":1,\"1513\":1,\"1698\":2,\"1788\":1,\"2917\":1,\"3264\":4}}],[\"mem\",{\"1\":{\"125\":1,\"193\":1,\"1809\":2,\"1882\":1,\"1885\":1,\"3005\":1}}],[\"members\",{\"1\":{\"1764\":3}}],[\"member2\",{\"1\":{\"203\":2,\"204\":2}}],[\"member1\",{\"1\":{\"203\":2,\"204\":2}}],[\"member\",{\"1\":{\"122\":1,\"203\":1,\"204\":3,\"1642\":2,\"1677\":2}}],[\"messageprocessor\",{\"1\":{\"3217\":7,\"3218\":2}}],[\"messagedigest\",{\"1\":{\"3215\":3}}],[\"messages\",{\"1\":{\"1325\":3,\"1910\":1}}],[\"messagefactory\",{\"1\":{\"1094\":4,\"3190\":4,\"3199\":1,\"3208\":3,\"3215\":1}}],[\"messager\",{\"1\":{\"1087\":6}}],[\"messagecontentmodel\",{\"1\":{\"289\":4}}],[\"messagetemplate\",{\"1\":{\"289\":6}}],[\"message\",{\"1\":{\"122\":1,\"289\":1,\"428\":4,\"429\":1,\"468\":1,\"727\":2,\"728\":3,\"1044\":2,\"1069\":7,\"1094\":1,\"1095\":2,\"1228\":3,\"1249\":4,\"1315\":4,\"1325\":7,\"1656\":1,\"2051\":5,\"2065\":4,\"2937\":2,\"2938\":4,\"3003\":12,\"3065\":6,\"3066\":5,\"3085\":1,\"3103\":1,\"3117\":2,\"3125\":3,\"3190\":1,\"3205\":2,\"3209\":2,\"3212\":1,\"3215\":2,\"3217\":2,\"3218\":1,\"3240\":2}}],[\"myvolume\",{\"1\":{\"3278\":3}}],[\"myfunction\",{\"1\":{\"3136\":1}}],[\"myname\",{\"1\":{\"1807\":1}}],[\"mydata把磁盘挂载到这个目录就可以使用了\",{\"1\":{\"1500\":1}}],[\"mydata创建一个目录\",{\"1\":{\"1500\":1}}],[\"myip\",{\"1\":{\"1397\":1}}],[\"myinterfaceimpl\",{\"1\":{\"541\":1}}],[\"myinterface\",{\"1\":{\"541\":2,\"542\":2,\"575\":1}}],[\"myclass\",{\"1\":{\"1079\":2}}],[\"mycallable\",{\"1\":{\"592\":2}}],[\"myconfig\",{\"1\":{\"417\":1,\"423\":2}}],[\"myrunnable\",{\"1\":{\"592\":2}}],[\"myredis\",{\"1\":{\"219\":1}}],[\"mythread\",{\"1\":{\"592\":3}}],[\"myannotationprocessor<\",{\"1\":{\"3147\":1}}],[\"myannotationprocessor\",{\"1\":{\"3147\":1}}],[\"myannotation>\",{\"1\":{\"1081\":1,\"3150\":1}}],[\"myannotation注解不会被继承\",{\"1\":{\"1078\":1}}],[\"myannotation\",{\"1\":{\"1077\":2,\"1078\":3,\"1079\":3,\"1081\":2,\"3134\":4,\"3135\":1,\"3145\":1,\"3147\":1,\"3149\":6,\"3150\":2}}],[\"myapp\",{\"1\":{\"508\":1,\"3273\":2}}],[\"myaustin\",{\"1\":{\"289\":4}}],[\"myservername\",{\"1\":{\"1397\":1}}],[\"myservice\",{\"1\":{\"423\":3}}],[\"mysql命令\",{\"0\":{\"3314\":1}}],[\"mysql数据库\",{\"0\":{\"3286\":1}}],[\"mysql数据库部署\",{\"0\":{\"3277\":1}}],[\"mysql访问\",{\"0\":{\"3280\":1}}],[\"mysql部署\",{\"0\":{\"3279\":1}}],[\"mysql的文件\",{\"1\":{\"1873\":1}}],[\"mysql修改表名\",{\"0\":{\"1829\":1}}],[\"mysql8\",{\"1\":{\"1823\":1}}],[\"mysql常用命令\",{\"0\":{\"1815\":1}}],[\"mysql主从同步的作用\",{\"1\":{\"1760\":1}}],[\"mysql主动配置也需要重启\",{\"1\":{\"113\":1}}],[\"mysql信息\",{\"1\":{\"1579\":1}}],[\"mysql端口\",{\"1\":{\"1367\":1}}],[\"mysql客户端内存溢出\",{\"1\":{\"125\":1}}],[\"mysql服务器不可用\",{\"1\":{\"125\":1}}],[\"mysql源文件中的定义对应\",{\"1\":{\"125\":1}}],[\"mysql正使用\",{\"1\":{\"125\":1}}],[\"mysql是在\",{\"1\":{\"125\":1}}],[\"mysqladmin\",{\"1\":{\"125\":1}}],[\"mysql在1个联合操作中只能使用\",{\"1\":{\"125\":1}}],[\"mysql错误码\",{\"0\":{\"124\":1,\"125\":1}}],[\"mysql5\",{\"0\":{\"115\":1,\"117\":1,\"118\":1},\"1\":{\"1821\":1,\"1823\":1,\"3257\":1}}],[\"mysql开启ssl安全认证\",{\"0\":{\"114\":1}}],[\"mysql里面操作\",{\"1\":{\"102\":1,\"110\":1}}],[\"mysql>select\",{\"1\":{\"1775\":1}}],[\"mysql>update\",{\"1\":{\"1775\":1}}],[\"mysql>use\",{\"1\":{\"1775\":1}}],[\"mysql>mysqld\",{\"1\":{\"120\":1}}],[\"mysql>cd\",{\"1\":{\"119\":2,\"120\":2,\"121\":1}}],[\"mysql>flush\",{\"1\":{\"100\":2,\"108\":1}}],[\"mysql>\",{\"1\":{\"99\":2,\"100\":2,\"102\":2,\"103\":1,\"107\":1,\"108\":1,\"110\":1,\"111\":1,\"121\":2,\"123\":2,\"1577\":2,\"1578\":2}}],[\"mysqldata1\",{\"1\":{\"3282\":8}}],[\"mysqldump\",{\"1\":{\"1823\":2}}],[\"mysqld\",{\"1\":{\"98\":2,\"101\":1,\"106\":1,\"109\":1,\"115\":1,\"125\":2,\"1577\":1,\"1578\":9,\"1584\":1,\"1585\":7,\"1586\":3,\"1771\":1,\"1772\":1,\"1773\":1,\"1777\":1,\"1824\":1}}],[\"mysql\",{\"0\":{\"97\":1,\"105\":1,\"1768\":1,\"1778\":1},\"1\":{\"98\":2,\"102\":2,\"106\":1,\"110\":1,\"113\":6,\"115\":21,\"116\":2,\"118\":3,\"119\":6,\"120\":2,\"121\":3,\"122\":35,\"123\":2,\"129\":1,\"225\":2,\"226\":4,\"227\":2,\"229\":1,\"235\":7,\"367\":2,\"403\":1,\"404\":1,\"406\":2,\"445\":2,\"1577\":22,\"1578\":36,\"1581\":2,\"1582\":1,\"1583\":5,\"1586\":1,\"1610\":1,\"1643\":5,\"1644\":3,\"1648\":7,\"1649\":5,\"1678\":1,\"1682\":1,\"1685\":7,\"1688\":5,\"1767\":1,\"1768\":3,\"1769\":2,\"1770\":1,\"1773\":2,\"1775\":3,\"1778\":9,\"1819\":2,\"1873\":1,\"3104\":1,\"3246\":7,\"3257\":3,\"3282\":3}}],[\"mybatis注解配置\",{\"0\":{\"3164\":1}}],[\"mybatis的sql映射等核心功能都基于注解实现\",{\"1\":{\"3143\":1}}],[\"mybatis的resultmap支持泛型类型\",{\"1\":{\"3053\":1}}],[\"mybatis的集成\",{\"0\":{\"368\":1},\"1\":{\"371\":1}}],[\"mybatis支持泛型mapper接口\",{\"1\":{\"3052\":1}}],[\"mybatis中的泛型应用\",{\"0\":{\"3051\":1}}],[\"mybatis中的反射应用\",{\"0\":{\"3000\":1}}],[\"mybatisreflectiondemo\",{\"1\":{\"3000\":1}}],[\"mybatis结果集映射简化实现\",{\"1\":{\"3000\":1}}],[\"mybatis使用反射实现数据库结果集到java对象的映射\",{\"1\":{\"3000\":1}}],[\"mybatis<\",{\"1\":{\"439\":1}}],[\"mybatis依赖来简化mybatis的使用\",{\"1\":{\"439\":1}}],[\"mybatisconfig\",{\"1\":{\"368\":1,\"439\":1}}],[\"mybatis\",{\"0\":{\"439\":1},\"1\":{\"361\":1,\"364\":1,\"436\":1,\"439\":3,\"581\":1,\"1266\":2,\"2066\":1,\"2996\":1,\"3011\":1,\"3027\":1,\"3043\":1,\"3163\":1}}],[\"myhuaweicloud\",{\"1\":{\"286\":2}}],[\"my\",{\"1\":{\"98\":1,\"106\":1,\"113\":1,\"527\":1,\"1511\":1,\"1513\":1,\"1560\":1,\"1576\":1,\"1577\":2,\"1578\":5,\"1771\":1,\"1778\":2}}],[\"maj\",{\"1\":{\"3275\":1}}],[\"masknull\",{\"1\":{\"2682\":1,\"2683\":1}}],[\"master01\",{\"1\":{\"3265\":1,\"3266\":2,\"3267\":1,\"3273\":15,\"3276\":7,\"3278\":2,\"3282\":3}}],[\"master填入主节点\",{\"1\":{\"1677\":1}}],[\"master为机器名称\",{\"1\":{\"1610\":1}}],[\"master为保障数据稳定性\",{\"1\":{\"169\":1}}],[\"masterid\",{\"1\":{\"186\":1}}],[\"masterip\",{\"1\":{\"165\":3}}],[\"master连接的slave最小数量\",{\"1\":{\"186\":1}}],[\"master属性\",{\"1\":{\"180\":1}}],[\"master与slave的匹配顺序为第一个master与前n个slave分为一组\",{\"1\":{\"186\":1}}],[\"master与slave的数量要匹配\",{\"1\":{\"186\":1}}],[\"master与slave运行情况检测\",{\"1\":{\"177\":1}}],[\"master与slave间需要进行信息交换\",{\"1\":{\"169\":1}}],[\"master存活检测\",{\"1\":{\"177\":1}}],[\"master设定超时时间较短\",{\"1\":{\"172\":1}}],[\"master各种资源\",{\"1\":{\"172\":1}}],[\"master每1秒调用复制定时函数replicationcron\",{\"1\":{\"172\":1}}],[\"master的cpu占用过高\",{\"1\":{\"172\":1}}],[\"master的数据量会越来越大\",{\"1\":{\"171\":1}}],[\"master的数据复制到slave中\",{\"1\":{\"161\":1}}],[\"master重启后加载rdb文件\",{\"1\":{\"171\":1}}],[\"master内部创建master\",{\"1\":{\"171\":1}}],[\"master心跳\",{\"1\":{\"169\":1}}],[\"master记录已发送的信息对应的offset\",{\"1\":{\"167\":1}}],[\"master端\",{\"1\":{\"167\":1}}],[\"master复制偏移量\",{\"1\":{\"167\":1}}],[\"master都会将传播的命令记录下来\",{\"1\":{\"167\":1}}],[\"master在首次连接slave时\",{\"1\":{\"167\":1}}],[\"master将接收到的数据变更命令发送给slave\",{\"1\":{\"167\":1}}],[\"master发送ping指令频度较低\",{\"1\":{\"172\":1}}],[\"master发送的rdb文件增多\",{\"1\":{\"166\":1}}],[\"master发送给slave信息可以理解master是slave的一个客户端\",{\"1\":{\"166\":1}}],[\"master单机内存占用主机内存的比例不应过大\",{\"1\":{\"166\":1}}],[\"masterauth\",{\"1\":{\"165\":1}}],[\"master配置文件设置密码\",{\"1\":{\"165\":1}}],[\"master客户端发送命令设置密码\",{\"1\":{\"165\":1}}],[\"master系统信息\",{\"1\":{\"165\":1}}],[\"masterhostn\",{\"1\":{\"186\":1}}],[\"masterhost3\",{\"1\":{\"186\":1}}],[\"masterhost2\",{\"1\":{\"186\":1}}],[\"masterhost1\",{\"1\":{\"186\":1}}],[\"masterhost\",{\"1\":{\"165\":1}}],[\"masterportn\",{\"1\":{\"186\":1}}],[\"masterport3\",{\"1\":{\"186\":1}}],[\"masterport2\",{\"1\":{\"186\":1}}],[\"masterport1\",{\"1\":{\"186\":1}}],[\"masterport\",{\"1\":{\"165\":4}}],[\"master和slave互联\",{\"1\":{\"165\":1}}],[\"master和slave各自的职责不一样\",{\"1\":{\"161\":1}}],[\"master写\",{\"1\":{\"162\":1}}],[\"master中的ssl参数被忽略\",{\"1\":{\"125\":1}}],[\"master\",{\"1\":{\"101\":1,\"102\":12,\"109\":2,\"110\":6,\"113\":4,\"122\":1,\"125\":11,\"161\":2,\"165\":2,\"166\":1,\"171\":2,\"178\":6,\"180\":2,\"186\":17,\"193\":2,\"249\":1,\"1560\":2,\"1610\":1,\"1633\":1,\"1637\":1,\"1638\":1,\"1660\":2,\"1677\":7,\"1763\":1,\"1764\":1,\"3276\":1}}],[\"master24\",{\"1\":{\"1667\":1}}],[\"master2是否能同步\",{\"1\":{\"104\":1,\"112\":1}}],[\"master2\",{\"1\":{\"99\":1,\"100\":1,\"102\":1}}],[\"master2的机器上\",{\"1\":{\"99\":1,\"100\":1,\"102\":1,\"110\":1}}],[\"master2上\",{\"1\":{\"98\":1}}],[\"master14\",{\"1\":{\"1638\":3}}],[\"master1\",{\"1\":{\"99\":1,\"100\":1,\"102\":1,\"107\":1,\"108\":1,\"110\":1}}],[\"master1的机器上\",{\"1\":{\"99\":1,\"100\":1,\"102\":1,\"107\":1,\"108\":1}}],[\"master1上\",{\"1\":{\"98\":1,\"106\":1}}],[\"master1和master2二台服务器\",{\"1\":{\"98\":1,\"106\":1}}],[\"ma开头的文件\",{\"1\":{\"1873\":1}}],[\"ma\",{\"1\":{\"1578\":1,\"1873\":1,\"2987\":4}}],[\"made\",{\"1\":{\"1569\":1}}],[\"mag\",{\"1\":{\"1503\":6,\"1504\":1}}],[\"magic\",{\"1\":{\"125\":1,\"724\":1}}],[\"make\",{\"1\":{\"1416\":1,\"1486\":1,\"1489\":3,\"1491\":2,\"1493\":1,\"1494\":1,\"1779\":2,\"1784\":1,\"1785\":1}}],[\"makefriedchicken\",{\"1\":{\"291\":2}}],[\"mail\",{\"1\":{\"997\":1,\"1504\":1,\"1644\":13,\"1649\":5,\"1688\":5}}],[\"mailto\",{\"1\":{\"997\":1}}],[\"maintenance\",{\"1\":{\"1961\":1}}],[\"maintainer=\",{\"1\":{\"1551\":1}}],[\"maintainer\",{\"1\":{\"1548\":1,\"1697\":1,\"3246\":1}}],[\"main下都创建java\",{\"1\":{\"1865\":1}}],[\"mainline\",{\"1\":{\"1472\":1}}],[\"main\",{\"1\":{\"270\":1,\"280\":1,\"283\":1,\"286\":1,\"287\":1,\"289\":1,\"291\":1,\"293\":1,\"392\":1,\"393\":1,\"471\":1,\"479\":2,\"500\":5,\"501\":1,\"502\":1,\"592\":1,\"609\":1,\"610\":1,\"625\":1,\"626\":1,\"675\":1,\"676\":1,\"677\":1,\"693\":1,\"694\":1,\"710\":1,\"711\":1,\"727\":1,\"728\":1,\"729\":1,\"745\":1,\"746\":1,\"772\":1,\"773\":1,\"1037\":1,\"1040\":1,\"1041\":1,\"1043\":1,\"1044\":1,\"1055\":1,\"1056\":1,\"1058\":1,\"1069\":1,\"1094\":1,\"1144\":1,\"1145\":1,\"1147\":1,\"1150\":1,\"1151\":1,\"1160\":1,\"1161\":1,\"1162\":1,\"1164\":1,\"1165\":1,\"1166\":1,\"1178\":1,\"1179\":1,\"1182\":1,\"1185\":1,\"1186\":1,\"1190\":1,\"1191\":1,\"1193\":1,\"1194\":1,\"1221\":1,\"1222\":1,\"1224\":1,\"1225\":1,\"1228\":1,\"1232\":1,\"1238\":2,\"1243\":2,\"1246\":1,\"1247\":2,\"1250\":1,\"1260\":1,\"1264\":1,\"1267\":1,\"1269\":1,\"1270\":1,\"1280\":1,\"1295\":1,\"1296\":1,\"1314\":1,\"1315\":1,\"1321\":1,\"1324\":1,\"1332\":1,\"1595\":2,\"1650\":9,\"1656\":1,\"1711\":1,\"1713\":9,\"1865\":1,\"2020\":2,\"2089\":1,\"2123\":1,\"2125\":1,\"2126\":1,\"2128\":1,\"2129\":1,\"2130\":1,\"2132\":1,\"2133\":1,\"2134\":1,\"2239\":1,\"2243\":1,\"2245\":1,\"2246\":1,\"2248\":1,\"2249\":1,\"2265\":1,\"2266\":1,\"2269\":1,\"2271\":1,\"2276\":1,\"2292\":1,\"2303\":1,\"2304\":1,\"2311\":1,\"2323\":1,\"2324\":1,\"2325\":1,\"2326\":1,\"2327\":1,\"2328\":1,\"2329\":1,\"2369\":1,\"2370\":1,\"2371\":1,\"2372\":1,\"2373\":1,\"2406\":1,\"2407\":1,\"2408\":1,\"2409\":1,\"2410\":1,\"2427\":1,\"2465\":1,\"2466\":1,\"2467\":1,\"2468\":1,\"2522\":1,\"2523\":1,\"2524\":1,\"2577\":1,\"2604\":1,\"2632\":1,\"2660\":1,\"2661\":1,\"2685\":1,\"2712\":1,\"2742\":1,\"2785\":1,\"2819\":1,\"2831\":1,\"2832\":1,\"2833\":1,\"2837\":2,\"2843\":1,\"2844\":1,\"2845\":1,\"2849\":2,\"2855\":1,\"2856\":1,\"2857\":1,\"2861\":1,\"2866\":1,\"2867\":1,\"2868\":1,\"2878\":1,\"2879\":1,\"2880\":1,\"2881\":1,\"2885\":1,\"2891\":1,\"2892\":1,\"2893\":1,\"2897\":1,\"2902\":1,\"2903\":1,\"2904\":1,\"2905\":1,\"2909\":1,\"2914\":1,\"2915\":1,\"2916\":1,\"2917\":1,\"2921\":2,\"2936\":1,\"2965\":1,\"2968\":1,\"2969\":1,\"2970\":1,\"2971\":1,\"2974\":1,\"2980\":1,\"2983\":1,\"2984\":1,\"2986\":1,\"2989\":1,\"2990\":1,\"2999\":1,\"3000\":1,\"3002\":1,\"3003\":1,\"3005\":1,\"3007\":4,\"3010\":1,\"3023\":1,\"3024\":1,\"3025\":1,\"3065\":2,\"3066\":2,\"3085\":1,\"3116\":1,\"3117\":1,\"3118\":1,\"3120\":1,\"3125\":1,\"3137\":1,\"3190\":1}}],[\"matrixmultiplication\",{\"1\":{\"2183\":1}}],[\"matrixoperations\",{\"1\":{\"2173\":1,\"2174\":1}}],[\"matrix\",{\"1\":{\"1162\":13,\"2166\":1,\"2169\":4,\"2173\":4,\"2214\":5,\"2217\":2,\"2231\":3}}],[\"mathscore\",{\"1\":{\"3046\":1}}],[\"mathutils\",{\"1\":{\"2798\":1}}],[\"math\",{\"1\":{\"288\":1,\"538\":1,\"1052\":1,\"1181\":1,\"1209\":2,\"1312\":1,\"2318\":1,\"2437\":1,\"2742\":2,\"2768\":1,\"2808\":1,\"2873\":1}}],[\"matchlabels\",{\"1\":{\"1648\":2,\"1649\":2,\"1650\":11,\"1660\":1,\"1661\":1,\"1685\":2,\"1688\":2,\"1698\":1,\"1713\":12,\"3276\":1}}],[\"matching\",{\"1\":{\"125\":1}}],[\"match\",{\"1\":{\"125\":2,\"1535\":1}}],[\"may\",{\"1\":{\"283\":1,\"1788\":1}}],[\"maven仓库管理\",{\"0\":{\"3301\":1}}],[\"maven仓库生态的设计遵循了以下原则\",{\"1\":{\"987\":1}}],[\"maven仓库生态系统是maven的重要组成部分\",{\"1\":{\"969\":1}}],[\"maven仓库生态\",{\"0\":{\"968\":1}}],[\"mavensetting\",{\"1\":{\"1712\":1}}],[\"maven需要选中激活哪个profile配置\",{\"1\":{\"1645\":1}}],[\"maven默认使用最短路径优先的策略来解决依赖冲突\",{\"1\":{\"1014\":1}}],[\"maven<\",{\"1\":{\"981\":1}}],[\"maven2\",{\"1\":{\"975\":1,\"984\":1,\"985\":1,\"999\":1,\"1004\":1}}],[\"maven支持增量构建\",{\"1\":{\"951\":1}}],[\"maven构建优化的设计遵循了以下原则\",{\"1\":{\"965\":1}}],[\"maven构建优化是提高开发效率和项目质量的重要手段\",{\"1\":{\"947\":1}}],[\"maven构建优化\",{\"0\":{\"946\":1}}],[\"maven定义了标准的项目结构和构建流程\",{\"1\":{\"943\":1}}],[\"maven定义了三个主要的生命周期\",{\"1\":{\"940\":1}}],[\"maven定义了多种依赖范围\",{\"1\":{\"925\":1}}],[\"maven的仓库镜像是指一个仓库的副本\",{\"1\":{\"989\":1}}],[\"maven的仓库用于存储构建好的构件\",{\"1\":{\"939\":1}}],[\"maven的生命周期包含了一系列构建阶段\",{\"1\":{\"949\":1}}],[\"maven的约定优于配置原则有什么优缺点\",{\"1\":{\"945\":1}}],[\"maven的设计遵循了以下核心原则\",{\"1\":{\"943\":1}}],[\"maven的插件系统使其具有极强的扩展性\",{\"1\":{\"941\":1}}],[\"maven的依赖传递机制是指\",{\"1\":{\"1030\":1}}],[\"maven的依赖传递机制会导致间接依赖被引入到项目中\",{\"1\":{\"1010\":1}}],[\"maven的依赖传递机制可以自动解决间接依赖\",{\"1\":{\"926\":1}}],[\"maven的依赖管理机制可以自动解决项目所需的依赖库\",{\"1\":{\"938\":1}}],[\"maven的依赖管理设计遵循了以下原则\",{\"1\":{\"930\":1}}],[\"maven使用gav\",{\"1\":{\"937\":1}}],[\"maven是java开发中不可或缺的构建工具\",{\"1\":{\"934\":1}}],[\"maven核心概念\",{\"0\":{\"933\":1}}],[\"maven会从中央仓库下载依赖\",{\"1\":{\"975\":1}}],[\"maven会优先使用该版本\",{\"1\":{\"927\":1}}],[\"maven会选择在pom文件中声明较早的那个\",{\"1\":{\"1015\":1}}],[\"maven会选择在pom文件中声明较早的版本\",{\"1\":{\"927\":1}}],[\"maven会选择依赖路径最短的版本\",{\"1\":{\"927\":1}}],[\"maven提供了多种解决依赖冲突的策略\",{\"1\":{\"927\":1,\"1013\":1}}],[\"maven依赖\",{\"1\":{\"3097\":1,\"3104\":1}}],[\"maven依赖冲突解决的设计遵循了以下原则\",{\"1\":{\"1028\":1}}],[\"maven依赖管理示例\",{\"1\":{\"567\":1}}],[\"maven依赖查询插件\",{\"0\":{\"302\":1}}],[\"maven依赖辅助插件\",{\"0\":{\"301\":1}}],[\"maven项目必装\",{\"1\":{\"301\":1}}],[\"maven管理工具\",{\"1\":{\"301\":1}}],[\"maven\",{\"0\":{\"301\":1,\"302\":1,\"584\":1,\"1705\":1},\"1\":{\"280\":3,\"510\":1,\"584\":5,\"936\":1,\"941\":1,\"956\":1,\"957\":1,\"975\":1,\"981\":1,\"982\":4,\"984\":1,\"985\":1,\"994\":1,\"999\":4,\"1003\":4,\"1004\":2,\"1005\":1,\"1655\":1,\"1656\":3,\"1711\":3,\"2002\":1,\"2018\":1,\"3147\":1}}],[\"man\",{\"1\":{\"1165\":1}}],[\"mandatory\",{\"1\":{\"359\":1}}],[\"mandatory等\",{\"1\":{\"355\":1}}],[\"manage\",{\"1\":{\"1363\":1}}],[\"manager功能\",{\"1\":{\"3245\":1}}],[\"manager<\",{\"1\":{\"999\":1}}],[\"manager\",{\"1\":{\"266\":1,\"1000\":1,\"1527\":1,\"1612\":1,\"1672\":1,\"1743\":1,\"3245\":1}}],[\"management\",{\"1\":{\"256\":1}}],[\"many\",{\"1\":{\"125\":10}}],[\"mac环境下\",{\"1\":{\"3256\":1}}],[\"mac使用\",{\"1\":{\"2836\":1}}],[\"mac和windows客户端下安装完docker之后\",{\"1\":{\"1714\":1}}],[\"macgpg2\",{\"1\":{\"998\":1}}],[\"mac一般都会安装包管理器homebrew\",{\"1\":{\"264\":1}}],[\"mac安装nvm包管理器\",{\"1\":{\"264\":1}}],[\"mac安装n包管理器\",{\"1\":{\"264\":1}}],[\"mac安装node环境\",{\"0\":{\"258\":1}}],[\"mac安装包管理器\",{\"0\":{\"264\":1}}],[\"mac或windows安装node环境\",{\"0\":{\"259\":1}}],[\"mac\",{\"1\":{\"246\":1,\"2860\":1,\"3248\":1}}],[\"malformed\",{\"1\":{\"125\":1}}],[\"maxheap\",{\"1\":{\"2578\":6}}],[\"maxhistory>\",{\"1\":{\"1564\":1,\"2072\":1}}],[\"maxentry\",{\"1\":{\"2408\":2}}],[\"maxbytes\",{\"1\":{\"1833\":1}}],[\"maxsurge\",{\"1\":{\"1648\":1,\"1649\":1,\"1650\":10,\"1661\":1,\"1685\":1,\"1688\":1,\"1713\":11}}],[\"maxsize\",{\"1\":{\"1326\":7,\"2642\":7}}],[\"maxunavailable\",{\"1\":{\"1648\":1,\"1649\":1,\"1650\":10,\"1661\":1,\"1685\":1,\"1688\":1,\"1713\":11}}],[\"maxram\",{\"1\":{\"1638\":1}}],[\"maxfilesize>\",{\"1\":{\"1564\":1}}],[\"maxforwardsheader\",{\"1\":{\"1094\":3,\"3190\":3,\"3199\":1}}],[\"maxnewsize=1024m\",{\"1\":{\"1558\":1}}],[\"maxwindowsize\",{\"1\":{\"1312\":2}}],[\"maxgcpausemillis=100\",{\"1\":{\"806\":1,\"840\":1,\"874\":1,\"908\":1}}],[\"maxgcpausemillis=200\",{\"1\":{\"805\":1,\"839\":1,\"873\":1,\"907\":1}}],[\"maxgcpausemillis=<n>\",{\"1\":{\"797\":1,\"831\":1,\"865\":1,\"899\":1}}],[\"maxpoolsize\",{\"1\":{\"2539\":1,\"3225\":2}}],[\"maxpermsize=1024m\",{\"1\":{\"1558\":1}}],[\"maxpermsize=<size>\",{\"1\":{\"793\":1,\"827\":1,\"861\":1,\"895\":1}}],[\"maxpage\",{\"1\":{\"284\":3}}],[\"maxmetaspacesize限制元空间大小\",{\"1\":{\"814\":1,\"848\":1,\"882\":1,\"916\":1}}],[\"maxmetaspacesize=<size>\",{\"1\":{\"792\":1,\"826\":1,\"860\":1,\"894\":1}}],[\"maxmetaspacesize=10m\",{\"1\":{\"710\":1}}],[\"maxmetaspacesize控制元空间大小\",{\"1\":{\"719\":1}}],[\"maxmemory\",{\"1\":{\"156\":1,\"157\":4,\"694\":4}}],[\"maximumpoolsize\",{\"1\":{\"622\":1}}],[\"maximum\",{\"1\":{\"445\":1,\"2601\":4,\"2684\":1}}],[\"maxvalue只能在最后1个分区定义中使用\",{\"1\":{\"125\":1}}],[\"maxvalue\",{\"1\":{\"125\":1,\"1069\":3}}],[\"max\",{\"1\":{\"125\":9,\"169\":1,\"193\":1,\"204\":1,\"216\":1,\"219\":2,\"428\":1,\"434\":2,\"1069\":7,\"1238\":1,\"1513\":3,\"1518\":2,\"1526\":2,\"1560\":1,\"1578\":4,\"1610\":1,\"1615\":1,\"1667\":1,\"1675\":1,\"1746\":1,\"1823\":2,\"1826\":2,\"1833\":6,\"1999\":1,\"2065\":1,\"2114\":1,\"2272\":1,\"2318\":2,\"2326\":3,\"2355\":1,\"2408\":1,\"2433\":3,\"2437\":1,\"2438\":7,\"2601\":2,\"2684\":1,\"2708\":4,\"2798\":1,\"3003\":8,\"3120\":1,\"3180\":1,\"3218\":1}}],[\"margin\",{\"1\":{\"1440\":1}}],[\"markresetexample\",{\"1\":{\"2849\":1}}],[\"marksupported\",{\"1\":{\"2841\":1,\"2849\":1,\"2853\":1}}],[\"markerhub\",{\"1\":{\"1851\":1}}],[\"market\",{\"1\":{\"286\":2,\"1895\":1,\"1897\":2}}],[\"market01\",{\"1\":{\"285\":2}}],[\"mark\",{\"0\":{\"764\":1,\"765\":1,\"766\":1},\"1\":{\"720\":1,\"770\":1,\"2841\":1,\"2849\":1,\"2853\":1,\"2869\":1,\"2914\":2,\"3116\":1}}],[\"markdown\",{\"0\":{\"11\":1,\"12\":1,\"13\":1,\"14\":1},\"1\":{\"11\":2,\"12\":3,\"13\":1,\"14\":3,\"15\":2,\"16\":1,\"28\":3,\"29\":1,\"30\":2,\"31\":2},\"2\":{\"26\":1}}],[\"mariadb\",{\"1\":{\"112\":4,\"113\":4,\"1580\":3,\"1765\":7}}],[\"map等\",{\"1\":{\"3046\":1}}],[\"mapresultset\",{\"1\":{\"3000\":2}}],[\"mapreduce适合处理大规模的数据和复杂的计算\",{\"1\":{\"64\":1}}],[\"mapreduce虽然强大\",{\"1\":{\"63\":1}}],[\"mapreduceiterable<document>\",{\"1\":{\"59\":1}}],[\"mapreduce是一种分布式计算模型\",{\"1\":{\"59\":1,\"64\":1}}],[\"mapreduce\",{\"0\":{\"59\":1},\"1\":{\"59\":2,\"89\":2}}],[\"mapmode\",{\"1\":{\"2917\":1}}],[\"map排序与查找示例\",{\"1\":{\"2408\":1}}],[\"maptraversalexample\",{\"1\":{\"2407\":1}}],[\"maptoint\",{\"1\":{\"575\":1,\"2329\":1}}],[\"mapinitializationexample\",{\"1\":{\"2406\":1}}],[\"map接口的泛型定义\",{\"1\":{\"3046\":1}}],[\"map接口定义了键值对映射的规范\",{\"1\":{\"2412\":1}}],[\"map接口新增of\",{\"1\":{\"2404\":1}}],[\"map接口是java集合框架中的双列集合根接口\",{\"1\":{\"2398\":1}}],[\"map接口概述\",{\"0\":{\"2398\":1}}],[\"map接口则提供键值对存储能力\",{\"1\":{\"1173\":1}}],[\"map集合遍历方式示例\",{\"1\":{\"2407\":1}}],[\"map集合初始化与基本操作示例\",{\"1\":{\"2406\":1}}],[\"map集合\",{\"0\":{\"2396\":1}}],[\"map的key和value都不允许\",{\"1\":{\"2358\":1}}],[\"mapn\",{\"1\":{\"2358\":1}}],[\"map对象\",{\"1\":{\"1439\":2}}],[\"map转\",{\"1\":{\"1439\":2}}],[\"mapstruct等工具的核心技术\",{\"1\":{\"3161\":1}}],[\"mapsortandsearchexample\",{\"1\":{\"2408\":1}}],[\"maps\",{\"1\":{\"1178\":1}}],[\"map2\",{\"1\":{\"1178\":1,\"1439\":4}}],[\"map1\",{\"1\":{\"1178\":1}}],[\"map和工具类\",{\"1\":{\"1173\":1}}],[\"mappedfileexample\",{\"1\":{\"2917\":1}}],[\"mappedbytebuffer\",{\"1\":{\"2917\":2}}],[\"mapped\",{\"1\":{\"2917\":1}}],[\"mapperformancecomparison\",{\"1\":{\"2409\":1}}],[\"mapper>\",{\"1\":{\"439\":1}}],[\"mapper接口\",{\"1\":{\"439\":1}}],[\"mapper\",{\"1\":{\"368\":1,\"439\":6,\"1439\":11,\"1440\":2,\"3000\":2,\"3164\":1,\"3245\":1,\"3270\":1}}],[\"mapperscan\",{\"1\":{\"368\":1,\"439\":1}}],[\"mappingcount\",{\"1\":{\"2533\":1}}],[\"mapping\",{\"1\":{\"125\":1,\"2600\":1}}],[\"map=new\",{\"1\":{\"285\":1}}],[\"map<class<\",{\"1\":{\"3150\":1}}],[\"map<uncomparablekey\",{\"1\":{\"2668\":1}}],[\"map<mutablekey\",{\"1\":{\"2612\":1}}],[\"map<person\",{\"1\":{\"2605\":1}}],[\"map<k\",{\"1\":{\"2429\":1,\"2512\":1,\"2679\":1,\"2692\":1,\"3046\":1}}],[\"map<integer\",{\"1\":{\"543\":1,\"2409\":5,\"2715\":1}}],[\"map<object\",{\"1\":{\"283\":1,\"3007\":5}}],[\"map<string\",{\"1\":{\"279\":1,\"289\":5,\"643\":1,\"1178\":2,\"1193\":1,\"1439\":4,\"2039\":1,\"2057\":1,\"2059\":1,\"2329\":1,\"2406\":5,\"2407\":1,\"2408\":3,\"2410\":4,\"2419\":2,\"2423\":1,\"2522\":1,\"2525\":1,\"2604\":1,\"2613\":2,\"2614\":1,\"2640\":1,\"2660\":1,\"2670\":1,\"2999\":2,\"3046\":1,\"3208\":2,\"3209\":2}}],[\"map中有\",{\"1\":{\"283\":1}}],[\"map中没有\",{\"1\":{\"283\":2}}],[\"map高阶用法\",{\"0\":{\"283\":1}}],[\"map\",{\"1\":{\"125\":4,\"279\":1,\"283\":11,\"285\":3,\"286\":1,\"289\":6,\"543\":1,\"544\":1,\"553\":2,\"1059\":1,\"1132\":3,\"1174\":1,\"1178\":1,\"1198\":2,\"1439\":10,\"1513\":2,\"1610\":1,\"2007\":1,\"2059\":1,\"2329\":1,\"2358\":2,\"2392\":4,\"2406\":1,\"2407\":13,\"2408\":18,\"2409\":7,\"2410\":1,\"2419\":4,\"2420\":4,\"2423\":1,\"2427\":2,\"2429\":4,\"2520\":1,\"2522\":1,\"2525\":1,\"2533\":3,\"2534\":8,\"2594\":1,\"2602\":3,\"2612\":3,\"2614\":1,\"2615\":4,\"2622\":1,\"2631\":4,\"2632\":1,\"2642\":1,\"2654\":1,\"2660\":1,\"2668\":2,\"2669\":3,\"2680\":1,\"2691\":4,\"2693\":2,\"2694\":2,\"2697\":3,\"2917\":1,\"3007\":2}}],[\"mapfunction\",{\"1\":{\"59\":2}}],[\"map阶段\",{\"1\":{\"59\":1}}],[\"map阶段和reduce阶段\",{\"1\":{\"59\":1}}],[\"movie=3\",{\"1\":{\"3246\":1}}],[\"move\",{\"1\":{\"1205\":2,\"1210\":2}}],[\"mock\",{\"1\":{\"3166\":2}}],[\"mockitoextension\",{\"1\":{\"3166\":2}}],[\"mockito\",{\"1\":{\"3166\":5}}],[\"mockresultset\",{\"1\":{\"3000\":2}}],[\"mountpoint\",{\"1\":{\"3275\":1}}],[\"mountpath\",{\"1\":{\"1648\":2,\"1649\":1,\"1650\":20,\"1661\":4,\"1685\":2,\"1688\":1,\"1698\":2,\"1713\":22,\"3276\":1}}],[\"mount\",{\"1\":{\"1859\":1,\"3275\":1}}],[\"mounts\",{\"1\":{\"1811\":2}}],[\"mouseout\",{\"1\":{\"1452\":2}}],[\"mouseover\",{\"1\":{\"1452\":2}}],[\"mousedown\",{\"1\":{\"1440\":1}}],[\"mobicents\",{\"1\":{\"1107\":1}}],[\"modcount自增\",{\"1\":{\"2610\":1}}],[\"modcount\",{\"1\":{\"2437\":2,\"2441\":3,\"2444\":1,\"2498\":4,\"2568\":1,\"2593\":1,\"2648\":1,\"2679\":1}}],[\"modcount++\",{\"1\":{\"2318\":1,\"2437\":1,\"2440\":3,\"2494\":2,\"2496\":2,\"2497\":3,\"2573\":1,\"2574\":1,\"2655\":2,\"2683\":1}}],[\"mod\",{\"1\":{\"2109\":1}}],[\"modprobe\",{\"1\":{\"1610\":1,\"1634\":1,\"1638\":1,\"1675\":1}}],[\"modifiablelist\",{\"1\":{\"1191\":2}}],[\"modifiers\",{\"1\":{\"2968\":2,\"2987\":2}}],[\"modifier\",{\"1\":{\"1087\":3,\"1261\":1,\"2966\":1,\"2968\":2,\"3007\":2}}],[\"modified`\",{\"1\":{\"232\":10,\"1684\":10}}],[\"modifyreference\",{\"1\":{\"2785\":2}}],[\"modifyvalue\",{\"1\":{\"2785\":2}}],[\"modify\",{\"1\":{\"1578\":1,\"1788\":1,\"1831\":1}}],[\"modifyobject\",{\"1\":{\"1058\":2}}],[\"modifyprimitive\",{\"1\":{\"1058\":2}}],[\"modifyarray\",{\"1\":{\"1053\":1}}],[\"modules\",{\"1\":{\"1494\":1}}],[\"modules>\",{\"1\":{\"962\":1}}],[\"module模块实现让用户只有输入正常的用户名密码才允许访问web内容\",{\"1\":{\"1418\":1}}],[\"module模块提供了限制并发连接数的功能\",{\"1\":{\"1397\":1}}],[\"module模块来限制的访问频率\",{\"1\":{\"1395\":1}}],[\"module>\",{\"1\":{\"962\":3,\"2042\":2}}],[\"module\",{\"1\":{\"490\":2,\"1281\":2,\"1416\":2,\"1554\":1,\"1779\":10,\"2763\":1,\"3010\":2}}],[\"modulepath\",{\"1\":{\"490\":1}}],[\"modes\",{\"1\":{\"3278\":2}}],[\"mode设置为no\",{\"1\":{\"1786\":2}}],[\"modelversion>\",{\"1\":{\"584\":1,\"936\":1}}],[\"model\",{\"1\":{\"289\":1,\"377\":1,\"380\":6,\"387\":2,\"936\":1,\"2763\":1,\"3147\":2}}],[\"mode=\",{\"1\":{\"3266\":4}}],[\"mode=stable\",{\"1\":{\"1918\":1}}],[\"mode=standalone\",{\"1\":{\"234\":2,\"1643\":1}}],[\"mode=hostname\",{\"1\":{\"234\":1}}],[\"mode\",{\"1\":{\"125\":3,\"783\":1,\"1667\":2,\"1788\":1,\"1838\":1}}],[\"monday\",{\"1\":{\"1066\":1,\"2818\":1,\"2819\":3}}],[\"months\",{\"1\":{\"545\":1,\"1667\":6}}],[\"month\",{\"1\":{\"545\":3,\"2078\":2,\"2126\":2}}],[\"monitoring\",{\"1\":{\"1517\":1,\"1520\":1,\"1523\":3,\"1638\":4,\"1677\":1}}],[\"monitor\",{\"1\":{\"178\":1,\"193\":2,\"626\":3,\"651\":1,\"662\":1}}],[\"mongo命令\",{\"0\":{\"3313\":1}}],[\"mongorestore\",{\"1\":{\"1813\":1}}],[\"mongo数据备份与恢复\",{\"0\":{\"1813\":1}}],[\"mongo数据库\",{\"0\":{\"3284\":1}}],[\"mongo数据库命令参考\",{\"0\":{\"76\":1}}],[\"mongo数据库高级用法\",{\"0\":{\"65\":1}}],[\"mongo数据库进阶\",{\"0\":{\"55\":1}}],[\"mongo数据库实践\",{\"0\":{\"44\":1}}],[\"mongo数据库概述\",{\"0\":{\"34\":1}}],[\"mongo常用命令\",{\"0\":{\"1812\":1}}],[\"mongo的集群搭建完毕\",{\"1\":{\"1764\":1}}],[\"mongo的安装教程\",{\"0\":{\"1734\":1}}],[\"mongo有认证的情况\",{\"1\":{\"1764\":1}}],[\"mongo无认证的情况\",{\"1\":{\"1764\":1}}],[\"mongo副本集\",{\"0\":{\"1764\":1}}],[\"mongo主从模式\",{\"0\":{\"1763\":1}}],[\"mongodump\",{\"1\":{\"1813\":1}}],[\"mongod\",{\"1\":{\"1734\":2,\"1736\":1,\"1739\":1,\"1763\":2,\"1764\":1}}],[\"mongodb复制结构图\",{\"1\":{\"1761\":1}}],[\"mongodb会为其建立一个大小为若干mb的固定集合\",{\"1\":{\"1739\":1}}],[\"mongodb会在进行写入时建立一条journal日志\",{\"1\":{\"1739\":1}}],[\"mongodb也不例外\",{\"1\":{\"1739\":1}}],[\"mongodb分为社区版和企业版\",{\"1\":{\"1738\":1}}],[\"mongodb都提供了相应的解决方案\",{\"1\":{\"73\":1}}],[\"mongodb支持多文档事务\",{\"1\":{\"71\":1}}],[\"mongodb支持多种类型的索引\",{\"1\":{\"68\":1}}],[\"mongodb\",{\"1\":{\"69\":1,\"70\":1,\"288\":1,\"1503\":2,\"1734\":17,\"1736\":1,\"1738\":2,\"1739\":2,\"1759\":1,\"1763\":6,\"1764\":9}}],[\"mongodb提供了许多高级功能\",{\"1\":{\"66\":1}}],[\"mongodb提供了两种主要的聚合方式\",{\"1\":{\"56\":1}}],[\"mongodb提供了丰富的命令集来操作数据库\",{\"1\":{\"77\":1}}],[\"mongodb提供了丰富的选项和参数\",{\"1\":{\"52\":1}}],[\"mongodb提供了丰富的api来支持这些操作\",{\"1\":{\"45\":1}}],[\"mongodb通过\",{\"1\":{\"54\":1}}],[\"mongodb在设计上优先考虑了可用性和分区容错性\",{\"1\":{\"43\":1}}],[\"mongodb适合处理非结构化或半结构化数据\",{\"1\":{\"43\":1}}],[\"mongodb和关系型数据库的主要区别在于数据模型\",{\"1\":{\"43\":1}}],[\"mongodb和关系型数据库的主要区别是什么\",{\"1\":{\"43\":1}}],[\"mongodb是如何实现的\",{\"1\":{\"54\":1}}],[\"mongodb是如何在cap之间做出权衡的\",{\"1\":{\"43\":1}}],[\"mongodb是一个开源的nosql文档数据库\",{\"1\":{\"35\":1}}],[\"mongodb默认是最终一致性的\",{\"1\":{\"42\":1,\"94\":1}}],[\"mongodb的replication主要有两种\",{\"1\":{\"1759\":1}}],[\"mongodb的复制功能是使用操作日志oplog实现的\",{\"1\":{\"1739\":1}}],[\"mongodb的企业版下载链接\",{\"1\":{\"1738\":1}}],[\"mongodb的安装配置与开启审计日志\",{\"0\":{\"1733\":1}}],[\"mongodb的聚合管道是一种数据处理框架\",{\"1\":{\"95\":1}}],[\"mongodb的聚合系统设计灵感来自于unix管道\",{\"1\":{\"62\":1}}],[\"mongodb的读写关注级别控制了读写操作的一致性和可用性\",{\"1\":{\"95\":1}}],[\"mongodb的命令设计遵循了以下原则\",{\"1\":{\"93\":1}}],[\"mongodb的高级功能设计遵循了可扩展性和高可用性的原则\",{\"1\":{\"73\":1}}],[\"mongodb的crud操作设计遵循了简单直观的原则\",{\"1\":{\"52\":1}}],[\"mongodb的无模式是指不需要预定义表结构\",{\"1\":{\"43\":1}}],[\"mongodb的设计思想是拥抱数据的多样性和变化性\",{\"1\":{\"41\":1}}],[\"mongodb的设计理念是提供高性能\",{\"1\":{\"35\":1}}],[\"mongodb的主要优势\",{\"0\":{\"39\":1}}],[\"mongodb中使用系统分析器\",{\"1\":{\"1739\":1}}],[\"mongodb中有4种日志\",{\"1\":{\"1739\":1}}],[\"mongodb中的文档结构\",{\"1\":{\"37\":1}}],[\"mongodb中最基本的数据单元\",{\"1\":{\"37\":1}}],[\"mongo27017\",{\"1\":{\"1734\":1}}],[\"mongologs\",{\"1\":{\"1503\":2,\"1504\":1}}],[\"mongo\",{\"0\":{\"222\":1,\"1814\":1},\"1\":{\"221\":1,\"222\":2,\"223\":2,\"1734\":1,\"1736\":2,\"1764\":3}}],[\"mongos2\",{\"1\":{\"70\":1}}],[\"mongos1\",{\"1\":{\"70\":1}}],[\"mongoclients\",{\"1\":{\"69\":1,\"70\":1}}],[\"mongoclient\",{\"1\":{\"69\":2,\"70\":2,\"71\":1}}],[\"motd\",{\"1\":{\"122\":1}}],[\"more\",{\"1\":{\"27\":1,\"125\":1,\"993\":1,\"1578\":1,\"3246\":2}}],[\"msec\",{\"1\":{\"3282\":1}}],[\"mset等\",{\"1\":{\"211\":1}}],[\"mss\",{\"1\":{\"3075\":1}}],[\"msvsgvehscohbqrcgtnsrg\",{\"1\":{\"1527\":1}}],[\"msg`\",{\"1\":{\"1687\":2}}],[\"msgcontent\",{\"1\":{\"289\":2}}],[\"msg\",{\"1\":{\"122\":1,\"287\":7,\"1332\":3,\"1564\":2,\"2072\":1,\"3102\":1,\"3125\":2,\"3282\":1}}],[\"msql的时候提示\",{\"1\":{\"121\":1}}],[\"ms\",{\"1\":{\"29\":1,\"1041\":2,\"1043\":4,\"1056\":2,\"1068\":2,\"1179\":3,\"1224\":2,\"1250\":2,\"1264\":3,\"1321\":2,\"2276\":3,\"2327\":10,\"2409\":6,\"2524\":1,\"2868\":2,\"2986\":3,\"3002\":1,\"3209\":1}}],[\"mdns\",{\"1\":{\"3282\":1}}],[\"mdbsbujzfyassous\",{\"1\":{\"1649\":1,\"1688\":1}}],[\"mdc\",{\"1\":{\"1564\":1}}],[\"mdd\",{\"1\":{\"1071\":1}}],[\"md5哈希计算\",{\"1\":{\"3215\":1}}],[\"md5hash\",{\"1\":{\"3215\":4}}],[\"md5消息摘要算法\",{\"1\":{\"483\":1}}],[\"md5digestashex\",{\"1\":{\"307\":1}}],[\"md5\",{\"1\":{\"232\":3,\"1684\":3,\"3215\":4}}],[\"md\",{\"1\":{\"16\":1,\"3215\":2}}],[\"pylixm\",{\"1\":{\"3276\":1}}],[\"python采用\",{\"1\":{\"1254\":1}}],[\"python\",{\"1\":{\"1178\":8,\"2325\":1}}],[\"p来绑定暴露端口\",{\"1\":{\"3246\":1}}],[\"pbx系统\",{\"0\":{\"3243\":1}}],[\"pw\",{\"1\":{\"2903\":8,\"2905\":7}}],[\"pwd\",{\"1\":{\"81\":2,\"223\":1,\"1736\":1,\"1737\":1}}],[\"pq\",{\"1\":{\"2480\":7,\"2481\":3,\"2577\":6,\"2585\":3}}],[\"p2\",{\"1\":{\"2329\":2,\"2388\":2,\"3282\":2}}],[\"p123456\",{\"1\":{\"3282\":1}}],[\"p1\",{\"1\":{\"2329\":2,\"2388\":2}}],[\"pmd\",{\"1\":{\"2017\":1,\"2020\":2}}],[\"pmaster\",{\"1\":{\"180\":1}}],[\"ppid\",{\"1\":{\"1882\":1}}],[\"pvc\",{\"1\":{\"3278\":4}}],[\"pvc准备\",{\"0\":{\"3278\":1}}],[\"pv\",{\"1\":{\"1867\":1,\"3278\":1}}],[\"pkill\",{\"1\":{\"1845\":1}}],[\"pcap\",{\"1\":{\"1878\":1,\"3099\":2}}],[\"pcre\",{\"1\":{\"1779\":2}}],[\"pcre兼容正则表达式库\",{\"1\":{\"1779\":1}}],[\"pcmu\",{\"1\":{\"1092\":1,\"3180\":1,\"3190\":1}}],[\"pdfjdk\",{\"1\":{\"1641\":1}}],[\"pdf镜像打包\",{\"0\":{\"1641\":1}}],[\"phantomreference\",{\"1\":{\"2698\":2}}],[\"phantom\",{\"1\":{\"2676\":1}}],[\"phase>\",{\"1\":{\"999\":1,\"2018\":1}}],[\"physical\",{\"1\":{\"1838\":1}}],[\"php\",{\"1\":{\"1412\":1,\"1636\":1}}],[\"p><\",{\"1\":{\"2921\":1}}],[\"p>\",{\"1\":{\"1324\":1,\"1456\":2}}],[\"png\",{\"1\":{\"286\":2,\"1399\":1,\"1400\":1,\"1722\":1,\"1723\":1}}],[\"pl\",{\"1\":{\"1880\":1}}],[\"please\",{\"1\":{\"993\":1,\"1788\":1}}],[\"plusweeks\",{\"1\":{\"545\":1}}],[\"plugin>\",{\"1\":{\"936\":1,\"941\":1,\"956\":1,\"957\":1,\"999\":4,\"1003\":2,\"1005\":1,\"2018\":1,\"3147\":1}}],[\"plugin<\",{\"1\":{\"936\":1,\"941\":1,\"956\":1,\"957\":1,\"999\":4,\"1003\":2,\"1005\":1,\"2018\":1,\"3147\":1}}],[\"plugins中的apm\",{\"1\":{\"1559\":1}}],[\"plugins中默认没有springcloud\",{\"1\":{\"1559\":1}}],[\"plugins目录中是可选的插件\",{\"1\":{\"1559\":1}}],[\"plugins>\",{\"1\":{\"936\":1,\"941\":1,\"999\":1,\"3147\":1}}],[\"plugins<\",{\"1\":{\"936\":1,\"941\":1,\"956\":1,\"957\":1,\"999\":4,\"1003\":2,\"1005\":1,\"2018\":1,\"3147\":1}}],[\"plugins\",{\"1\":{\"256\":1,\"1583\":1,\"1636\":1}}],[\"plugin\",{\"1\":{\"16\":1,\"122\":1,\"125\":1,\"1003\":2,\"1559\":1,\"1638\":1,\"2002\":1}}],[\"plain\",{\"1\":{\"1667\":2,\"1738\":1}}],[\"plaintext\",{\"1\":{\"1530\":2}}],[\"plane\",{\"1\":{\"1660\":1}}],[\"plan\",{\"1\":{\"1165\":1}}],[\"platform=amd64\",{\"1\":{\"1800\":1}}],[\"platform=linux\",{\"1\":{\"1793\":1}}],[\"platform=mysql\",{\"1\":{\"235\":1,\"1643\":1}}],[\"platformthread\",{\"1\":{\"526\":2}}],[\"platformtransactionmanager\",{\"1\":{\"353\":1}}],[\"platform\",{\"1\":{\"526\":1,\"1005\":2,\"1648\":1,\"1685\":1}}],[\"placeholdername\",{\"1\":{\"289\":2}}],[\"placeholderresolver\",{\"1\":{\"289\":1}}],[\"placeholderhelper\",{\"1\":{\"289\":2}}],[\"px\",{\"1\":{\"200\":1}}],[\"pttl\",{\"1\":{\"199\":1}}],[\"pivot\",{\"1\":{\"2357\":1}}],[\"picgo\",{\"1\":{\"1722\":1,\"1723\":1}}],[\"pink\",{\"1\":{\"1463\":1}}],[\"ping就是一个测试程序\",{\"1\":{\"1917\":1}}],[\"ping指令在网络中存在丢包\",{\"1\":{\"172\":1}}],[\"ping\",{\"1\":{\"169\":2,\"172\":1,\"1787\":2,\"1916\":1,\"3257\":1}}],[\"pid=7654\",{\"1\":{\"3282\":1}}],[\"pids\",{\"1\":{\"1809\":1}}],[\"pid文件\",{\"1\":{\"1384\":1}}],[\"pid\",{\"1\":{\"1384\":1,\"1578\":2,\"1595\":2,\"1736\":1,\"1882\":1,\"1892\":1}}],[\"pi\",{\"1\":{\"1052\":2,\"1209\":2,\"2742\":2,\"2768\":1,\"2798\":1,\"2808\":1}}],[\"pipedoutputstream\",{\"1\":{\"2897\":1}}],[\"pipedinputstream\",{\"1\":{\"2897\":1}}],[\"pipe\",{\"1\":{\"125\":1,\"3117\":2}}],[\"pipeline\",{\"1\":{\"58\":2,\"212\":1,\"280\":1,\"1111\":5,\"1332\":7,\"1656\":1,\"1711\":1,\"3125\":1}}],[\"pf\",{\"1\":{\"125\":1}}],[\"puppy\",{\"1\":{\"2077\":2}}],[\"purpose\",{\"1\":{\"1578\":1}}],[\"purge\",{\"1\":{\"125\":3}}],[\"push\",{\"1\":{\"280\":1,\"1641\":1,\"1656\":1,\"1711\":1,\"1799\":1,\"1828\":1,\"2020\":1,\"2465\":1,\"2468\":3,\"2506\":3,\"2544\":1,\"2551\":1,\"2554\":1,\"3246\":2}}],[\"puttreeval\",{\"1\":{\"2600\":1}}],[\"putval\",{\"1\":{\"2600\":2}}],[\"put方法实现\",{\"0\":{\"2600\":1,\"2628\":1,\"2655\":1,\"2683\":1}}],[\"put操作的核心实现\",{\"1\":{\"2600\":1}}],[\"put操作\",{\"1\":{\"2512\":1}}],[\"putifabsent\",{\"1\":{\"2410\":1,\"2534\":1,\"2544\":1}}],[\"putint\",{\"1\":{\"1325\":1}}],[\"putall\",{\"1\":{\"2406\":2}}],[\"put用于更新资源\",{\"1\":{\"433\":1}}],[\"putmapping\",{\"1\":{\"381\":1,\"427\":1}}],[\"putnextentry\",{\"1\":{\"286\":1}}],[\"put\",{\"1\":{\"279\":3,\"285\":1,\"289\":2,\"434\":1,\"643\":2,\"1132\":1,\"1181\":1,\"1228\":1,\"1235\":2,\"1238\":1,\"1315\":1,\"1325\":3,\"1439\":4,\"1767\":1,\"1897\":1,\"2392\":1,\"2406\":6,\"2407\":3,\"2408\":4,\"2409\":1,\"2419\":2,\"2427\":4,\"2429\":2,\"2462\":1,\"2465\":2,\"2466\":1,\"2467\":3,\"2512\":2,\"2522\":1,\"2534\":1,\"2600\":1,\"2602\":1,\"2604\":1,\"2605\":1,\"2612\":1,\"2631\":1,\"2632\":4,\"2655\":1,\"2658\":1,\"2660\":5,\"2668\":1,\"2669\":1,\"2683\":1,\"2685\":3,\"2688\":1,\"2691\":2,\"2693\":1,\"2697\":2,\"2715\":1,\"2914\":3,\"2916\":1,\"2917\":1,\"2921\":1,\"2999\":2,\"3007\":5,\"3046\":2,\"3086\":1,\"3116\":1,\"3118\":2,\"3120\":2,\"3170\":1,\"3208\":2,\"3209\":1}}],[\"pull一个然后给个标记推送至私服即可\",{\"1\":{\"1668\":1}}],[\"pullsecret\",{\"1\":{\"1648\":1,\"1649\":1,\"1650\":10,\"1685\":1,\"1688\":1,\"1713\":11}}],[\"pulllog\",{\"1\":{\"1504\":3}}],[\"pull\",{\"1\":{\"215\":1,\"218\":1,\"221\":1,\"225\":1,\"233\":1,\"238\":1,\"254\":1,\"1508\":1,\"1515\":1,\"1522\":1,\"1568\":1,\"1589\":1,\"1594\":1,\"1599\":1,\"1604\":1,\"1641\":4,\"1799\":1,\"2020\":1,\"2024\":1,\"3246\":2,\"3271\":1}}],[\"pub就是公钥\",{\"1\":{\"997\":1}}],[\"pub\",{\"1\":{\"997\":1,\"1488\":1,\"1841\":1}}],[\"published\",{\"1\":{\"1578\":1}}],[\"publish\",{\"1\":{\"993\":1,\"994\":4,\"3240\":1}}],[\"publicapi\",{\"1\":{\"3010\":1}}],[\"publicmethods\",{\"1\":{\"2983\":2}}],[\"publicmethod\",{\"1\":{\"2983\":2}}],[\"publicfield\",{\"1\":{\"2971\":6,\"2984\":4}}],[\"public成员应构成最小接口\",{\"1\":{\"2800\":1}}],[\"public修饰符\",{\"0\":{\"2798\":1}}],[\"publicclass\",{\"1\":{\"2761\":1}}],[\"publicvar\",{\"1\":{\"2076\":1}}],[\"public<\",{\"1\":{\"981\":1}}],[\"public\",{\"1\":{\"30\":1,\"115\":1,\"267\":5,\"269\":2,\"270\":1,\"279\":6,\"281\":4,\"282\":2,\"283\":5,\"284\":2,\"286\":9,\"287\":6,\"289\":8,\"290\":5,\"291\":4,\"292\":4,\"293\":6,\"307\":2,\"324\":3,\"325\":3,\"326\":2,\"338\":4,\"339\":1,\"352\":2,\"353\":3,\"354\":2,\"366\":3,\"367\":3,\"368\":2,\"380\":3,\"381\":6,\"382\":3,\"392\":4,\"407\":3,\"417\":1,\"423\":3,\"427\":6,\"428\":3,\"429\":4,\"430\":4,\"434\":5,\"438\":8,\"439\":5,\"440\":8,\"441\":2,\"445\":3,\"449\":3,\"450\":3,\"451\":3,\"452\":4,\"456\":8,\"471\":2,\"479\":4,\"500\":2,\"501\":4,\"502\":2,\"517\":2,\"521\":1,\"538\":1,\"541\":4,\"542\":1,\"554\":2,\"574\":1,\"575\":1,\"578\":1,\"580\":3,\"592\":5,\"593\":3,\"609\":2,\"610\":2,\"613\":2,\"625\":2,\"626\":2,\"641\":4,\"642\":3,\"643\":3,\"658\":3,\"659\":3,\"660\":3,\"663\":3,\"675\":3,\"676\":2,\"677\":2,\"693\":2,\"694\":2,\"710\":5,\"711\":2,\"727\":3,\"729\":3,\"745\":2,\"746\":3,\"747\":2,\"772\":2,\"773\":2,\"781\":2,\"982\":2,\"993\":1,\"1004\":1,\"1037\":9,\"1038\":6,\"1040\":2,\"1041\":2,\"1043\":2,\"1044\":7,\"1052\":5,\"1053\":6,\"1055\":2,\"1056\":5,\"1058\":4,\"1066\":3,\"1068\":5,\"1069\":7,\"1077\":2,\"1078\":5,\"1079\":3,\"1081\":2,\"1087\":4,\"1094\":10,\"1095\":2,\"1104\":1,\"1111\":4,\"1125\":3,\"1144\":2,\"1145\":3,\"1147\":2,\"1150\":2,\"1151\":2,\"1160\":2,\"1161\":4,\"1162\":3,\"1164\":5,\"1165\":3,\"1166\":3,\"1170\":3,\"1178\":2,\"1179\":2,\"1181\":5,\"1182\":8,\"1185\":2,\"1186\":2,\"1190\":2,\"1191\":2,\"1193\":2,\"1194\":2,\"1203\":5,\"1204\":5,\"1205\":7,\"1206\":4,\"1208\":8,\"1209\":10,\"1210\":8,\"1211\":11,\"1212\":13,\"1221\":2,\"1222\":2,\"1224\":2,\"1225\":4,\"1228\":2,\"1232\":2,\"1238\":12,\"1243\":4,\"1246\":3,\"1247\":4,\"1249\":6,\"1250\":2,\"1253\":4,\"1260\":2,\"1264\":2,\"1267\":5,\"1269\":3,\"1270\":2,\"1280\":2,\"1287\":3,\"1290\":6,\"1294\":3,\"1295\":3,\"1296\":3,\"1303\":1,\"1312\":3,\"1314\":2,\"1315\":2,\"1321\":2,\"1324\":2,\"1325\":3,\"1326\":7,\"1332\":2,\"1336\":2,\"1337\":2,\"1338\":2,\"1431\":1,\"1439\":6,\"1440\":1,\"1443\":1,\"1444\":1,\"1578\":3,\"1642\":2,\"1940\":1,\"1948\":1,\"1949\":3,\"1961\":1,\"1962\":4,\"1974\":2,\"1975\":2,\"1987\":2,\"1988\":2,\"1996\":2,\"1997\":2,\"1999\":2,\"2007\":9,\"2012\":3,\"2027\":3,\"2033\":1,\"2035\":2,\"2042\":1,\"2046\":1,\"2051\":3,\"2054\":2,\"2061\":2,\"2065\":2,\"2068\":2,\"2076\":3,\"2077\":5,\"2078\":2,\"2079\":3,\"2080\":1,\"2089\":2,\"2090\":2,\"2091\":6,\"2099\":1,\"2100\":2,\"2101\":2,\"2109\":2,\"2110\":2,\"2111\":2,\"2112\":2,\"2113\":2,\"2114\":2,\"2115\":2,\"2123\":2,\"2125\":2,\"2126\":2,\"2128\":2,\"2129\":2,\"2130\":2,\"2132\":2,\"2133\":2,\"2134\":3,\"2161\":4,\"2173\":2,\"2174\":2,\"2183\":2,\"2190\":1,\"2207\":3,\"2212\":2,\"2213\":2,\"2214\":2,\"2216\":2,\"2217\":2,\"2218\":2,\"2220\":2,\"2221\":2,\"2223\":2,\"2224\":4,\"2228\":5,\"2232\":1,\"2234\":2,\"2239\":2,\"2240\":3,\"2243\":2,\"2245\":2,\"2246\":2,\"2248\":2,\"2249\":2,\"2256\":3,\"2263\":8,\"2265\":2,\"2266\":2,\"2268\":2,\"2269\":2,\"2271\":2,\"2276\":2,\"2281\":1,\"2282\":3,\"2291\":4,\"2292\":2,\"2294\":1,\"2295\":1,\"2296\":2,\"2297\":1,\"2299\":1,\"2303\":2,\"2304\":2,\"2311\":2,\"2314\":1,\"2318\":2,\"2323\":2,\"2324\":2,\"2325\":2,\"2326\":2,\"2327\":2,\"2328\":2,\"2329\":8,\"2356\":13,\"2369\":2,\"2370\":2,\"2371\":2,\"2372\":2,\"2373\":2,\"2388\":1,\"2392\":4,\"2406\":2,\"2407\":2,\"2408\":2,\"2409\":2,\"2410\":2,\"2427\":3,\"2429\":3,\"2436\":3,\"2437\":2,\"2439\":2,\"2440\":3,\"2441\":4,\"2451\":5,\"2456\":5,\"2465\":2,\"2466\":6,\"2467\":6,\"2468\":2,\"2485\":3,\"2493\":2,\"2494\":2,\"2495\":2,\"2496\":3,\"2497\":6,\"2498\":15,\"2508\":4,\"2512\":7,\"2513\":3,\"2522\":2,\"2523\":2,\"2524\":2,\"2525\":7,\"2544\":11,\"2551\":2,\"2552\":2,\"2554\":1,\"2555\":3,\"2571\":1,\"2573\":1,\"2574\":1,\"2577\":5,\"2600\":1,\"2602\":3,\"2604\":2,\"2605\":3,\"2612\":1,\"2627\":1,\"2629\":1,\"2631\":4,\"2632\":2,\"2642\":1,\"2655\":1,\"2658\":4,\"2660\":2,\"2661\":2,\"2669\":1,\"2679\":1,\"2680\":5,\"2682\":1,\"2683\":1,\"2685\":5,\"2697\":3,\"2704\":3,\"2707\":1,\"2708\":1,\"2709\":1,\"2710\":1,\"2711\":2,\"2712\":2,\"2715\":1,\"2716\":1,\"2721\":1,\"2723\":2,\"2724\":2,\"2727\":1,\"2733\":4,\"2734\":10,\"2736\":6,\"2737\":3,\"2738\":3,\"2741\":5,\"2742\":12,\"2745\":7,\"2746\":7,\"2748\":9,\"2749\":1,\"2750\":7,\"2759\":5,\"2761\":2,\"2765\":1,\"2770\":11,\"2779\":5,\"2784\":3,\"2785\":2,\"2786\":4,\"2792\":1,\"2794\":1,\"2795\":3,\"2797\":3,\"2798\":3,\"2807\":1,\"2808\":6,\"2809\":1,\"2810\":3,\"2818\":1,\"2819\":2,\"2821\":3,\"2822\":1,\"2824\":2,\"2831\":2,\"2832\":2,\"2833\":2,\"2837\":4,\"2843\":2,\"2844\":2,\"2845\":2,\"2849\":4,\"2855\":2,\"2856\":2,\"2857\":2,\"2861\":2,\"2866\":2,\"2867\":2,\"2868\":2,\"2873\":5,\"2878\":2,\"2879\":2,\"2880\":2,\"2881\":2,\"2885\":2,\"2890\":2,\"2891\":2,\"2892\":2,\"2893\":2,\"2897\":2,\"2902\":2,\"2903\":2,\"2904\":2,\"2905\":2,\"2909\":2,\"2914\":2,\"2915\":2,\"2916\":2,\"2917\":2,\"2921\":9,\"2927\":3,\"2935\":2,\"2936\":2,\"2937\":3,\"2938\":5,\"2942\":2,\"2947\":1,\"2948\":2,\"2949\":1,\"2951\":1,\"2952\":1,\"2953\":1,\"2955\":2,\"2956\":4,\"2959\":2,\"2960\":2,\"2965\":2,\"2968\":2,\"2969\":8,\"2970\":9,\"2971\":5,\"2974\":2,\"2980\":2,\"2983\":6,\"2984\":3,\"2986\":5,\"2987\":1,\"2989\":3,\"2990\":3,\"2993\":3,\"2999\":7,\"3000\":3,\"3002\":8,\"3003\":4,\"3005\":6,\"3007\":7,\"3010\":4,\"3019\":2,\"3020\":1,\"3021\":3,\"3023\":4,\"3024\":4,\"3025\":4,\"3034\":4,\"3035\":2,\"3036\":4,\"3038\":1,\"3039\":1,\"3040\":1,\"3041\":2,\"3046\":2,\"3049\":6,\"3050\":4,\"3052\":4,\"3065\":4,\"3066\":4,\"3085\":2,\"3086\":5,\"3087\":3,\"3097\":3,\"3116\":2,\"3117\":2,\"3118\":2,\"3120\":8,\"3125\":8,\"3134\":3,\"3135\":1,\"3136\":5,\"3137\":6,\"3141\":3,\"3145\":1,\"3147\":2,\"3149\":2,\"3150\":2,\"3154\":6,\"3159\":3,\"3160\":3,\"3162\":4,\"3164\":1,\"3165\":1,\"3166\":1,\"3170\":10,\"3190\":10,\"3199\":1,\"3205\":4,\"3206\":6,\"3208\":4,\"3209\":8,\"3212\":5,\"3214\":3,\"3215\":8,\"3217\":7,\"3218\":4,\"3222\":1,\"3223\":1,\"3224\":2,\"3225\":1,\"3232\":3,\"3235\":3,\"3237\":3,\"3238\":2,\"3240\":3,\"3241\":4,\"3244\":2}}],[\"pubsub\",{\"1\":{\"122\":6}}],[\"pseudosection\",{\"1\":{\"3282\":1}}],[\"ps查看\",{\"1\":{\"1629\":1,\"1718\":1}}],[\"psql\",{\"1\":{\"1607\":1}}],[\"ps2\",{\"1\":{\"1456\":2}}],[\"ps1\",{\"1\":{\"1456\":2}}],[\"psyounggen\",{\"1\":{\"774\":2}}],[\"ps\",{\"1\":{\"125\":3,\"256\":1,\"1736\":1,\"1780\":1,\"1786\":1,\"1796\":1,\"1852\":1,\"1853\":1,\"1856\":1,\"1892\":1,\"2902\":12,\"2904\":6,\"3245\":3,\"3246\":2,\"3250\":1,\"3271\":1,\"3273\":1}}],[\"pecs\",{\"1\":{\"3041\":1}}],[\"pecs原则\",{\"0\":{\"3041\":1}}],[\"pear\",{\"1\":{\"2660\":2}}],[\"peek操作的时间复杂度分别是多少\",{\"1\":{\"2588\":1}}],[\"peek方法\",{\"1\":{\"2349\":1}}],[\"peek\",{\"1\":{\"2349\":1,\"2462\":1,\"2468\":2,\"2476\":1,\"2551\":1,\"2588\":1}}],[\"peeklast\",{\"1\":{\"2319\":1}}],[\"peekfirst\",{\"1\":{\"2319\":1}}],[\"peerconnection\",{\"1\":{\"3232\":3}}],[\"peer\",{\"0\":{\"1669\":1}}],[\"people\",{\"1\":{\"2224\":2,\"2329\":13}}],[\"pending\",{\"1\":{\"2062\":1}}],[\"pexpire\",{\"1\":{\"199\":1}}],[\"perl\",{\"0\":{\"1668\":1},\"1\":{\"1667\":1}}],[\"personmap\",{\"1\":{\"2605\":3}}],[\"person\",{\"1\":{\"1182\":13,\"1269\":12,\"2077\":3,\"2091\":2,\"2100\":4,\"2115\":6,\"2224\":5,\"2232\":5,\"2329\":14,\"2388\":2,\"2605\":9,\"2810\":2,\"3007\":8}}],[\"personset\",{\"1\":{\"2388\":1}}],[\"persons\",{\"1\":{\"1182\":2}}],[\"persistentvolumes\",{\"1\":{\"3276\":1}}],[\"persistent\",{\"1\":{\"3245\":1}}],[\"persistence\",{\"1\":{\"193\":1,\"207\":1,\"1638\":1,\"3165\":1}}],[\"persist\",{\"1\":{\"199\":1,\"1788\":1}}],[\"perm\",{\"1\":{\"2990\":2}}],[\"permanentkey\",{\"1\":{\"2691\":1}}],[\"permanent参数确保规则在系统重启后仍然有效\",{\"1\":{\"1925\":1}}],[\"permanent\",{\"1\":{\"1397\":1,\"1417\":1,\"1925\":1,\"1926\":1,\"1927\":1,\"1928\":1}}],[\"permsize=<size>\",{\"1\":{\"793\":1,\"827\":1,\"861\":1,\"895\":1}}],[\"permitall\",{\"1\":{\"451\":1,\"456\":1,\"2012\":1}}],[\"permissionaspect\",{\"1\":{\"3154\":1}}],[\"permissionservice\",{\"1\":{\"3154\":4}}],[\"permissions\",{\"1\":{\"1569\":1,\"1684\":1,\"3154\":3}}],[\"permission`\",{\"1\":{\"232\":1}}],[\"permission\",{\"1\":{\"125\":1,\"1528\":1,\"1684\":1,\"2990\":1,\"3154\":7}}],[\"performancecomparison\",{\"1\":{\"2276\":1}}],[\"performancedemo\",{\"1\":{\"1151\":1}}],[\"performance\",{\"1\":{\"193\":1,\"3282\":1}}],[\"period\",{\"1\":{\"172\":1,\"545\":7}}],[\"period决定\",{\"1\":{\"169\":1}}],[\"per\",{\"1\":{\"129\":1,\"153\":1,\"171\":2,\"193\":1,\"2522\":3}}],[\"pem改成对应的名称即可\",{\"1\":{\"1677\":1}}],[\"pem文件的所属权限用户为mysql\",{\"1\":{\"116\":1}}],[\"pem\",{\"1\":{\"115\":12,\"116\":1,\"1417\":4,\"1677\":8}}],[\"pr\",{\"1\":{\"1882\":1}}],[\"prune\",{\"1\":{\"1802\":1,\"3245\":2,\"3246\":1}}],[\"prunid\",{\"1\":{\"180\":2}}],[\"pred\",{\"1\":{\"2494\":4}}],[\"predicate<integer>\",{\"1\":{\"557\":3}}],[\"predicate<string>\",{\"1\":{\"468\":2,\"538\":1}}],[\"predicate组合\",{\"1\":{\"557\":1}}],[\"predicate\",{\"1\":{\"468\":1,\"538\":3}}],[\"present\",{\"1\":{\"1687\":1,\"2392\":3,\"2594\":1,\"2602\":2,\"2622\":1,\"2631\":2,\"2649\":1,\"2658\":1}}],[\"prematurely\",{\"1\":{\"1507\":1}}],[\"prependto\",{\"1\":{\"1462\":2}}],[\"prepend\",{\"1\":{\"1462\":2,\"1465\":1}}],[\"preparation\",{\"1\":{\"741\":1}}],[\"prepared\",{\"1\":{\"994\":1}}],[\"prepare\",{\"1\":{\"125\":1}}],[\"pretenuresizethreshold参数控制大对象直接进入老年代\",{\"1\":{\"718\":1}}],[\"previousindex\",{\"1\":{\"2498\":1}}],[\"previous\",{\"1\":{\"2325\":1,\"2498\":2}}],[\"preview标记实验性功能\",{\"1\":{\"570\":1}}],[\"prev\",{\"1\":{\"1444\":1,\"2319\":4,\"2490\":4,\"2494\":2,\"2495\":1,\"2496\":9,\"2497\":8,\"2498\":1,\"2681\":4}}],[\"prevent\",{\"1\":{\"125\":1,\"1578\":1}}],[\"prevents\",{\"1\":{\"125\":1}}],[\"preauthorize\",{\"1\":{\"452\":2}}],[\"prehandle\",{\"1\":{\"430\":1}}],[\"prefix=\",{\"1\":{\"1416\":1,\"1779\":1,\"1785\":2,\"3266\":4}}],[\"prefix\",{\"1\":{\"289\":4,\"407\":1,\"438\":1,\"445\":2,\"1170\":7,\"2228\":3,\"3235\":5}}],[\"prefixstr\",{\"1\":{\"289\":2}}],[\"prefixkey\",{\"1\":{\"283\":4}}],[\"prefer\",{\"1\":{\"234\":1}}],[\"prefs\",{\"1\":{\"122\":1}}],[\"precision\",{\"1\":{\"125\":1,\"3165\":1}}],[\"prices\",{\"1\":{\"2216\":2}}],[\"priority\",{\"1\":{\"1764\":9}}],[\"priorityqueue操作时间复杂度分析\",{\"1\":{\"2588\":1}}],[\"priorityqueue和treeset有什么异同\",{\"1\":{\"2588\":1}}],[\"priorityqueue的时间复杂度分析\",{\"1\":{\"2588\":1}}],[\"priorityqueue的迭代器不保证按优先级顺序遍历元素\",{\"1\":{\"2585\":1}}],[\"priorityqueue的迭代器不保证有序遍历\",{\"1\":{\"2480\":1}}],[\"priorityqueue是非线程安全的\",{\"1\":{\"2586\":1}}],[\"priorityqueue是基于优先级堆实现的无界队列\",{\"1\":{\"2567\":1}}],[\"priorityqueue会自动扩容\",{\"1\":{\"2581\":1}}],[\"priorityqueue底层使用二叉小顶堆实现\",{\"1\":{\"2580\":1}}],[\"priorityqueueexample\",{\"1\":{\"2577\":1}}],[\"priorityqueue中的元素按照指定的优先级顺序出队\",{\"1\":{\"2567\":1}}],[\"priorityqueue类结构分析\",{\"0\":{\"2567\":1}}],[\"priorityqueue不允许添加null元素\",{\"1\":{\"2481\":1,\"2584\":1}}],[\"priorityqueue<student>\",{\"1\":{\"2577\":1}}],[\"priorityqueue<string>\",{\"1\":{\"2481\":1}}],[\"priorityqueue<integer>\",{\"1\":{\"2480\":1,\"2578\":1}}],[\"priorityqueue<>\",{\"1\":{\"2465\":1,\"2480\":1,\"2481\":1,\"2577\":1,\"2578\":1,\"2586\":1}}],[\"priorityqueue陷阱\",{\"0\":{\"2479\":1}}],[\"priorityqueue基于二叉小顶堆实现\",{\"1\":{\"2472\":1}}],[\"priorityqueue\",{\"0\":{\"2565\":1},\"1\":{\"1174\":1,\"2461\":1,\"2465\":7,\"2478\":1,\"2571\":1}}],[\"priorityblockingqueue\",{\"1\":{\"634\":1}}],[\"primitiveboolean\",{\"1\":{\"1040\":1}}],[\"primitiveint\",{\"1\":{\"1040\":2}}],[\"primarykey\",{\"1\":{\"3141\":2}}],[\"primarydatasource\",{\"1\":{\"445\":1}}],[\"primary\",{\"1\":{\"125\":3,\"232\":10,\"445\":4,\"1684\":10,\"1687\":8}}],[\"printlist\",{\"1\":{\"3038\":3}}],[\"println\",{\"1\":{\"283\":2,\"289\":1,\"291\":3,\"293\":2,\"338\":4,\"469\":1,\"471\":3,\"474\":2,\"479\":2,\"491\":3,\"500\":1,\"501\":1,\"502\":1,\"517\":2,\"521\":1,\"526\":2,\"527\":1,\"529\":1,\"537\":3,\"538\":1,\"539\":1,\"541\":3,\"542\":1,\"544\":1,\"552\":2,\"557\":2,\"575\":2,\"592\":3,\"609\":5,\"610\":2,\"625\":1,\"626\":6,\"642\":2,\"658\":1,\"675\":1,\"676\":5,\"677\":1,\"693\":5,\"694\":5,\"710\":1,\"711\":3,\"727\":1,\"728\":3,\"745\":5,\"772\":3,\"773\":1,\"1037\":11,\"1038\":2,\"1040\":5,\"1041\":12,\"1043\":4,\"1044\":7,\"1052\":2,\"1055\":5,\"1056\":2,\"1058\":2,\"1069\":1,\"1094\":1,\"1095\":2,\"1111\":1,\"1123\":2,\"1147\":3,\"1160\":3,\"1161\":2,\"1162\":1,\"1164\":3,\"1165\":2,\"1166\":2,\"1179\":3,\"1182\":2,\"1185\":1,\"1186\":1,\"1190\":3,\"1191\":3,\"1194\":5,\"1204\":3,\"1205\":2,\"1206\":1,\"1210\":3,\"1211\":4,\"1212\":4,\"1221\":3,\"1222\":6,\"1224\":2,\"1225\":3,\"1228\":4,\"1232\":1,\"1238\":6,\"1243\":1,\"1246\":2,\"1247\":2,\"1250\":3,\"1260\":3,\"1264\":3,\"1267\":3,\"1269\":4,\"1270\":2,\"1280\":1,\"1287\":3,\"1295\":2,\"1296\":1,\"1312\":2,\"1314\":5,\"1315\":5,\"1321\":2,\"1324\":2,\"1332\":2,\"1439\":10,\"2077\":3,\"2078\":12,\"2079\":3,\"2089\":1,\"2100\":1,\"2123\":3,\"2125\":5,\"2126\":7,\"2128\":2,\"2129\":1,\"2130\":1,\"2132\":1,\"2133\":1,\"2134\":3,\"2146\":2,\"2147\":3,\"2149\":1,\"2150\":1,\"2151\":2,\"2158\":2,\"2159\":2,\"2169\":2,\"2170\":3,\"2180\":2,\"2181\":2,\"2189\":3,\"2191\":2,\"2212\":1,\"2213\":1,\"2214\":3,\"2216\":3,\"2217\":2,\"2218\":1,\"2220\":2,\"2221\":1,\"2223\":3,\"2224\":1,\"2228\":8,\"2230\":2,\"2231\":2,\"2239\":3,\"2243\":1,\"2245\":4,\"2246\":2,\"2248\":6,\"2249\":3,\"2265\":6,\"2266\":1,\"2269\":2,\"2271\":5,\"2276\":3,\"2280\":2,\"2292\":1,\"2303\":3,\"2304\":3,\"2324\":11,\"2325\":14,\"2326\":7,\"2327\":13,\"2328\":2,\"2329\":6,\"2346\":1,\"2352\":1,\"2358\":1,\"2370\":3,\"2371\":2,\"2406\":5,\"2407\":11,\"2408\":4,\"2409\":3,\"2410\":1,\"2427\":2,\"2450\":2,\"2465\":7,\"2466\":4,\"2467\":2,\"2468\":9,\"2477\":1,\"2522\":2,\"2523\":5,\"2537\":2,\"2555\":2,\"2632\":2,\"2660\":1,\"2661\":8,\"2685\":2,\"2736\":4,\"2737\":2,\"2738\":1,\"2742\":2,\"2746\":3,\"2748\":2,\"2784\":1,\"2785\":2,\"2797\":1,\"2808\":1,\"2809\":4,\"2810\":1,\"2819\":3,\"2820\":1,\"2822\":4,\"2831\":1,\"2832\":1,\"2833\":1,\"2837\":2,\"2843\":1,\"2844\":2,\"2845\":6,\"2849\":6,\"2855\":2,\"2856\":1,\"2857\":4,\"2861\":1,\"2866\":1,\"2867\":1,\"2868\":2,\"2878\":2,\"2879\":2,\"2880\":1,\"2881\":2,\"2885\":1,\"2893\":1,\"2897\":1,\"2902\":8,\"2903\":4,\"2904\":5,\"2909\":3,\"2914\":8,\"2915\":1,\"2916\":4,\"2917\":1,\"2921\":6,\"2927\":1,\"2936\":3,\"2965\":5,\"2968\":8,\"2969\":3,\"2970\":5,\"2971\":8,\"2974\":1,\"2980\":5,\"2983\":4,\"2984\":4,\"2986\":3,\"2989\":4,\"2990\":1,\"2999\":1,\"3000\":2,\"3002\":7,\"3003\":4,\"3005\":7,\"3007\":2,\"3010\":1,\"3023\":2,\"3024\":2,\"3025\":3,\"3035\":1,\"3038\":1,\"3047\":2,\"3065\":5,\"3066\":4,\"3079\":1,\"3085\":2,\"3116\":6,\"3117\":2,\"3118\":4,\"3120\":3,\"3125\":2,\"3137\":2,\"3147\":1,\"3149\":2,\"3190\":2,\"3199\":1,\"3208\":1,\"3209\":1,\"3244\":1}}],[\"printcharsetinfo\",{\"1\":{\"2881\":6}}],[\"printcustom\",{\"1\":{\"2228\":1}}],[\"printtype\",{\"1\":{\"2808\":1}}],[\"printhello\",{\"1\":{\"2784\":1}}],[\"printseasoninfo\",{\"1\":{\"2822\":1}}],[\"printshapeinfo\",{\"1\":{\"2742\":3}}],[\"printstream和printwriter的主要区别及选择依据\",{\"1\":{\"2909\":1}}],[\"printstream和printwriter有哪些主要区别\",{\"1\":{\"2909\":1}}],[\"printstream使用平台默认编码\",{\"1\":{\"2908\":1}}],[\"printstreamexample\",{\"1\":{\"2902\":1}}],[\"printstream示例\",{\"1\":{\"2902\":1}}],[\"printstream是字节打印流\",{\"1\":{\"2902\":1}}],[\"printstream详解\",{\"0\":{\"2902\":1}}],[\"printstream\",{\"1\":{\"728\":6,\"2902\":4,\"2904\":3,\"2909\":6}}],[\"printstacktrace\",{\"1\":{\"609\":1,\"625\":1,\"626\":2,\"676\":2,\"1186\":1,\"1221\":2,\"1222\":2,\"1225\":2,\"1228\":1,\"1232\":1,\"1234\":3,\"1238\":7,\"1247\":3,\"1314\":2,\"1332\":1,\"1337\":1,\"1431\":1,\"1443\":1,\"2524\":2,\"2685\":1,\"2831\":2,\"2832\":1,\"2833\":1,\"2837\":2,\"2843\":2,\"2844\":1,\"2845\":2,\"2849\":2,\"2855\":2,\"2856\":1,\"2857\":2,\"2861\":1,\"2866\":1,\"2867\":1,\"2868\":3,\"2878\":2,\"2879\":2,\"2880\":1,\"2885\":1,\"2891\":1,\"2892\":1,\"2893\":1,\"2897\":1,\"2902\":1,\"2903\":2,\"2909\":1,\"2915\":1,\"2916\":1,\"2917\":1,\"2921\":4,\"2927\":1,\"2936\":1,\"3065\":4,\"3066\":2,\"3078\":1,\"3120\":5,\"3125\":1,\"3208\":2,\"3217\":2}}],[\"printobjectarrays\",{\"1\":{\"2224\":1}}],[\"printprimitivearrays\",{\"1\":{\"2223\":1}}],[\"printwithcollectorsjoining\",{\"1\":{\"2221\":1}}],[\"printwithstreamforeach\",{\"1\":{\"2220\":1}}],[\"printwitharraysaslist\",{\"1\":{\"2218\":1}}],[\"printwitharraysdeeptostring\",{\"1\":{\"2217\":1}}],[\"printwitharraystostring\",{\"1\":{\"2216\":1}}],[\"printwriterexample\",{\"1\":{\"2903\":1}}],[\"printwriter示例\",{\"1\":{\"2903\":1}}],[\"printwriter是字符打印流\",{\"1\":{\"2903\":1}}],[\"printwriter详解\",{\"0\":{\"2903\":1}}],[\"printwriter\",{\"1\":{\"1314\":2,\"2903\":6,\"2905\":3,\"2908\":1,\"2909\":2}}],[\"print2darraywithloop\",{\"1\":{\"2214\":1}}],[\"printarraywithenhancedfor\",{\"1\":{\"2213\":1}}],[\"printarraywithforloop\",{\"1\":{\"2212\":1}}],[\"printinfo\",{\"1\":{\"2077\":1,\"2810\":1}}],[\"printf\",{\"1\":{\"1881\":4,\"2524\":1,\"2837\":1,\"2849\":1,\"2881\":1,\"2902\":1,\"2903\":1,\"2904\":1,\"2905\":6,\"2908\":1}}],[\"printmessage\",{\"1\":{\"727\":2,\"728\":1,\"729\":1,\"1087\":3}}],[\"printboth\",{\"1\":{\"557\":1}}],[\"printuppercase\",{\"1\":{\"557\":2}}],[\"print\",{\"1\":{\"557\":2,\"1160\":3,\"1161\":1,\"1221\":1,\"1287\":3,\"1477\":1,\"1478\":1,\"1484\":1,\"1495\":1,\"1856\":1,\"1870\":1,\"1872\":2,\"1873\":5,\"1875\":1,\"1881\":2,\"2170\":2,\"2212\":3,\"2213\":3,\"2214\":3,\"2220\":4,\"2228\":3,\"2480\":2,\"2577\":1,\"2578\":1,\"2585\":2,\"2878\":2,\"2891\":2,\"2892\":2,\"2899\":1,\"2902\":5,\"2903\":2,\"2904\":2,\"2927\":1}}],[\"pri\",{\"1\":{\"125\":1,\"1527\":2,\"3276\":2}}],[\"privs\",{\"1\":{\"1575\":1}}],[\"privileged=true\",{\"1\":{\"234\":1,\"1526\":1,\"1529\":1}}],[\"privileged\",{\"1\":{\"125\":1,\"216\":1,\"1535\":2,\"3271\":1,\"3273\":3}}],[\"privileges\",{\"1\":{\"100\":2,\"108\":1,\"230\":1,\"1577\":2,\"1578\":3,\"1775\":2,\"1820\":1,\"1821\":2}}],[\"privacy\",{\"1\":{\"122\":3,\"1918\":1,\"3266\":4}}],[\"privatefield\",{\"1\":{\"2984\":2}}],[\"privatefieldaccessdemo\",{\"1\":{\"1269\":1}}],[\"privatemethod\",{\"1\":{\"2970\":5,\"2983\":2,\"2989\":5}}],[\"privatemethodinvokedemo\",{\"1\":{\"1270\":1}}],[\"privateconstructor\",{\"1\":{\"2969\":3}}],[\"private修饰符\",{\"0\":{\"2795\":1}}],[\"privatevar\",{\"1\":{\"2076\":1}}],[\"privateregistry\",{\"1\":{\"1637\":1,\"1638\":1}}],[\"private\",{\"1\":{\"115\":1,\"122\":1,\"269\":1,\"279\":1,\"283\":1,\"286\":1,\"289\":5,\"290\":1,\"292\":1,\"293\":1,\"324\":1,\"325\":1,\"326\":1,\"352\":1,\"354\":2,\"366\":1,\"380\":1,\"381\":1,\"407\":4,\"427\":1,\"428\":3,\"429\":2,\"438\":1,\"439\":1,\"440\":4,\"441\":1,\"449\":1,\"450\":1,\"456\":2,\"501\":2,\"578\":2,\"580\":1,\"593\":2,\"613\":2,\"642\":5,\"643\":4,\"658\":2,\"659\":2,\"660\":2,\"663\":1,\"675\":1,\"676\":1,\"677\":1,\"693\":1,\"710\":1,\"727\":1,\"729\":1,\"746\":2,\"747\":2,\"781\":1,\"1038\":1,\"1044\":1,\"1052\":2,\"1053\":3,\"1068\":1,\"1069\":4,\"1081\":1,\"1087\":4,\"1094\":10,\"1111\":3,\"1125\":1,\"1151\":1,\"1181\":6,\"1182\":2,\"1185\":1,\"1203\":2,\"1208\":4,\"1209\":3,\"1212\":2,\"1221\":2,\"1224\":5,\"1225\":5,\"1228\":2,\"1238\":1,\"1243\":1,\"1249\":3,\"1250\":3,\"1264\":2,\"1267\":1,\"1269\":2,\"1270\":2,\"1290\":2,\"1294\":2,\"1312\":7,\"1315\":2,\"1321\":2,\"1324\":2,\"1325\":3,\"1326\":7,\"1439\":1,\"1949\":1,\"1962\":1,\"1974\":1,\"1987\":1,\"2007\":6,\"2039\":3,\"2051\":2,\"2065\":2,\"2068\":1,\"2076\":2,\"2091\":2,\"2100\":2,\"2161\":3,\"2190\":1,\"2224\":2,\"2228\":1,\"2232\":2,\"2240\":2,\"2269\":4,\"2272\":1,\"2276\":1,\"2282\":4,\"2288\":4,\"2289\":3,\"2318\":6,\"2319\":1,\"2327\":7,\"2328\":1,\"2329\":4,\"2356\":8,\"2388\":2,\"2392\":2,\"2409\":4,\"2427\":1,\"2429\":2,\"2433\":6,\"2437\":3,\"2438\":2,\"2439\":3,\"2440\":1,\"2441\":1,\"2451\":1,\"2456\":4,\"2466\":7,\"2467\":2,\"2485\":3,\"2490\":2,\"2494\":2,\"2495\":2,\"2497\":3,\"2498\":7,\"2508\":2,\"2512\":4,\"2513\":2,\"2522\":3,\"2523\":1,\"2524\":3,\"2525\":5,\"2544\":5,\"2555\":3,\"2575\":3,\"2577\":2,\"2605\":2,\"2612\":1,\"2628\":1,\"2632\":1,\"2642\":1,\"2656\":1,\"2657\":2,\"2668\":1,\"2669\":1,\"2679\":6,\"2680\":1,\"2681\":1,\"2682\":1,\"2684\":2,\"2685\":1,\"2697\":4,\"2704\":3,\"2711\":1,\"2733\":4,\"2734\":4,\"2736\":1,\"2738\":1,\"2742\":3,\"2748\":2,\"2750\":2,\"2759\":4,\"2765\":1,\"2771\":1,\"2779\":3,\"2785\":2,\"2792\":1,\"2794\":1,\"2795\":2,\"2807\":1,\"2808\":1,\"2810\":1,\"2821\":3,\"2849\":2,\"2866\":1,\"2868\":6,\"2873\":5,\"2881\":1,\"2916\":2,\"2921\":9,\"2935\":2,\"2936\":3,\"2937\":1,\"2938\":2,\"2955\":1,\"2956\":1,\"2965\":2,\"2968\":2,\"2969\":3,\"2970\":3,\"2971\":2,\"2980\":2,\"2983\":3,\"2984\":3,\"2986\":3,\"2989\":3,\"2990\":1,\"2993\":1,\"2999\":7,\"3000\":5,\"3002\":7,\"3003\":3,\"3005\":4,\"3007\":7,\"3010\":1,\"3019\":1,\"3020\":2,\"3021\":1,\"3034\":2,\"3049\":2,\"3050\":1,\"3052\":1,\"3086\":3,\"3087\":10,\"3097\":3,\"3118\":2,\"3125\":1,\"3134\":1,\"3141\":2,\"3150\":1,\"3154\":1,\"3159\":3,\"3162\":5,\"3165\":5,\"3166\":3,\"3170\":2,\"3190\":8,\"3205\":19,\"3206\":4,\"3208\":5,\"3209\":14,\"3212\":3,\"3214\":4,\"3215\":8,\"3217\":2,\"3218\":10,\"3232\":2,\"3235\":4,\"3237\":2,\"3238\":1,\"3240\":2,\"3241\":2,\"3244\":3}}],[\"priv\",{\"1\":{\"122\":4}}],[\"provisioner\",{\"1\":{\"3276\":10}}],[\"provider\",{\"1\":{\"1554\":1}}],[\"provided\",{\"1\":{\"925\":1,\"938\":1}}],[\"provides\",{\"1\":{\"490\":1}}],[\"probability\",{\"1\":{\"3104\":1}}],[\"probe\",{\"1\":{\"125\":4}}],[\"proactor\",{\"1\":{\"3091\":1}}],[\"proactor模式\",{\"1\":{\"2921\":1,\"3091\":1}}],[\"proot\",{\"1\":{\"1773\":1}}],[\"progress\",{\"1\":{\"2837\":2,\"2849\":2}}],[\"progressdeadlineseconds\",{\"1\":{\"1661\":1,\"1698\":1}}],[\"program\",{\"1\":{\"1578\":3,\"2195\":1}}],[\"programming\",{\"1\":{\"1041\":4,\"2195\":1}}],[\"prop\",{\"1\":{\"1464\":3,\"1465\":1,\"1467\":4,\"1469\":3,\"1470\":4}}],[\"property\",{\"1\":{\"3164\":2}}],[\"property=\",{\"1\":{\"3053\":5}}],[\"propertyplaceutil\",{\"1\":{\"289\":3}}],[\"propertyplaceholderhelper\",{\"1\":{\"289\":4}}],[\"properties文件中的\",{\"1\":{\"1530\":1}}],[\"properties>\",{\"1\":{\"998\":1,\"999\":1,\"1005\":1}}],[\"properties中配置两个数据源的相关参数\",{\"1\":{\"445\":1}}],[\"properties中配置文件上传的相关参数\",{\"1\":{\"434\":1}}],[\"properties或application\",{\"1\":{\"445\":1}}],[\"properties配置\",{\"0\":{\"403\":1}}],[\"properties\",{\"1\":{\"234\":2,\"235\":1,\"393\":1,\"397\":1,\"405\":4,\"1094\":6,\"1369\":1,\"1370\":2,\"1644\":4,\"3190\":5,\"3206\":7,\"3218\":10}}],[\"pro\",{\"1\":{\"1041\":1}}],[\"projectkey=my\",{\"1\":{\"2020\":1}}],[\"project>\",{\"1\":{\"583\":1,\"584\":1,\"936\":1}}],[\"project\",{\"1\":{\"571\":1,\"936\":1,\"957\":1,\"992\":1,\"999\":1,\"1005\":1,\"1642\":16,\"2000\":2,\"2020\":1,\"2763\":2}}],[\"profiling\",{\"1\":{\"3100\":1}}],[\"profile中添加重命名配置\",{\"1\":{\"1842\":1}}],[\"profile中的操作\",{\"1\":{\"1739\":1}}],[\"profile的固定集合\",{\"1\":{\"1739\":1}}],[\"profile集合并不存在\",{\"1\":{\"1739\":1}}],[\"profiler\",{\"1\":{\"1739\":1,\"3100\":4}}],[\"profile文件\",{\"1\":{\"1624\":1}}],[\"profile>\",{\"1\":{\"998\":1,\"999\":1}}],[\"profiles>\",{\"1\":{\"998\":1,\"999\":1}}],[\"profiles允许我们在不同的环境下使用不同的配置\",{\"1\":{\"406\":1}}],[\"profiles\",{\"0\":{\"406\":1},\"1\":{\"406\":3}}],[\"profile\",{\"1\":{\"405\":2,\"1570\":1,\"1624\":2,\"1731\":1,\"1732\":1,\"1736\":1,\"1739\":1,\"3100\":1}}],[\"profactories文件\",{\"1\":{\"463\":1}}],[\"productservice\",{\"1\":{\"3170\":1}}],[\"productnotfoundexception\",{\"1\":{\"2949\":1}}],[\"productrepository\",{\"1\":{\"2949\":1,\"3170\":2}}],[\"productid=\",{\"1\":{\"3002\":2}}],[\"productid\",{\"1\":{\"2949\":5,\"3002\":7}}],[\"productcount\",{\"1\":{\"2466\":11}}],[\"product\",{\"1\":{\"2466\":6,\"2949\":5,\"3170\":5}}],[\"productlist\",{\"1\":{\"1998\":1}}],[\"producerlist\",{\"1\":{\"3041\":2}}],[\"producerconsumer\",{\"1\":{\"2555\":1}}],[\"producerconsumerexample\",{\"1\":{\"2466\":1}}],[\"producerconsumerwithlock\",{\"1\":{\"642\":1}}],[\"producer\",{\"1\":{\"1534\":2,\"2466\":3,\"2524\":3,\"3041\":2}}],[\"produce\",{\"1\":{\"642\":1,\"2555\":1}}],[\"prod\",{\"1\":{\"406\":2,\"1642\":1,\"1650\":10,\"1661\":1,\"3002\":3}}],[\"prot\",{\"1\":{\"1630\":1}}],[\"proto3\",{\"1\":{\"3085\":1}}],[\"proto文件\",{\"1\":{\"3085\":1}}],[\"protobufdemo\",{\"1\":{\"3085\":1}}],[\"protobuf序列化示例\",{\"1\":{\"3085\":1}}],[\"protobuf使用示例\",{\"1\":{\"3085\":1}}],[\"protobuf\",{\"1\":{\"3085\":1}}],[\"protobuf等\",{\"1\":{\"1347\":1}}],[\"prototype\",{\"1\":{\"327\":1}}],[\"protocol=tcp\",{\"1\":{\"1569\":1}}],[\"protocol\",{\"0\":{\"1664\":1},\"1\":{\"125\":1,\"1089\":1,\"1412\":1,\"1648\":4,\"1649\":2,\"1650\":22,\"1661\":1,\"1685\":4,\"1688\":2,\"1698\":1,\"1713\":24,\"3172\":1,\"3176\":1,\"3201\":1}}],[\"protectedmethod\",{\"1\":{\"2983\":1}}],[\"protected跨包访问陷阱\",{\"1\":{\"2801\":1}}],[\"protected修饰符设计初衷是支持继承体系中的成员访问控制\",{\"1\":{\"2802\":1}}],[\"protected修饰符\",{\"0\":{\"2797\":1}}],[\"protectedvar\",{\"1\":{\"2076\":1}}],[\"protected\",{\"1\":{\"291\":7,\"354\":1,\"451\":2,\"456\":2,\"746\":1,\"747\":1,\"1332\":2,\"1431\":2,\"1440\":2,\"1443\":2,\"1444\":2,\"1788\":1,\"2076\":2,\"2427\":1,\"2632\":1,\"2642\":1,\"2733\":1,\"2736\":2,\"2745\":2,\"2765\":1,\"2792\":1,\"2794\":1,\"2797\":2,\"2807\":1,\"2983\":1}}],[\"prometheusvolumesize\",{\"1\":{\"1638\":1}}],[\"prometheusmemoryrequest\",{\"1\":{\"1638\":1}}],[\"prometheus\",{\"1\":{\"193\":1,\"1638\":1}}],[\"prole\",{\"1\":{\"180\":2}}],[\"prohibit\",{\"1\":{\"125\":1}}],[\"prohibited信息所拒绝\",{\"1\":{\"1940\":1}}],[\"prohibited信息和ipv6的icmp6\",{\"1\":{\"1940\":1}}],[\"prohibited\",{\"1\":{\"125\":1}}],[\"proxyrouter\",{\"1\":{\"3212\":2,\"3218\":3}}],[\"proxy类实现\",{\"1\":{\"1267\":1}}],[\"proxytargetclass\",{\"1\":{\"267\":1}}],[\"proxy\",{\"0\":{\"3183\":1},\"1\":{\"216\":6,\"264\":2,\"710\":2,\"1267\":5,\"1384\":1,\"1390\":1,\"1395\":1,\"1396\":1,\"1409\":4,\"1417\":1,\"1918\":1,\"2994\":1,\"3002\":5,\"3005\":3,\"3250\":1,\"3266\":4,\"3282\":1}}],[\"proxy65\",{\"1\":{\"122\":1}}],[\"proxies\",{\"1\":{\"122\":1}}],[\"proc下面每个pid目录\",{\"1\":{\"1880\":1}}],[\"procaccess\",{\"1\":{\"125\":1}}],[\"proceeding\",{\"1\":{\"3208\":1}}],[\"proceedingjoinpoint\",{\"1\":{\"338\":5,\"1068\":1,\"3154\":1,\"3170\":2}}],[\"proceed\",{\"1\":{\"338\":1,\"1068\":1,\"3154\":1,\"3170\":2}}],[\"procedure\",{\"1\":{\"125\":4}}],[\"processmessage\",{\"1\":{\"3240\":1}}],[\"processmanagement\",{\"1\":{\"1734\":2,\"1764\":1}}],[\"processpayment\",{\"1\":{\"2955\":1}}],[\"processsingleorder\",{\"1\":{\"2953\":1}}],[\"processnumber\",{\"1\":{\"2809\":1}}],[\"processname\",{\"1\":{\"1369\":2,\"1370\":1}}],[\"processlist\",{\"1\":{\"2508\":1}}],[\"processdata\",{\"1\":{\"2033\":1,\"2281\":1}}],[\"processdialogterminated\",{\"1\":{\"1094\":1,\"3190\":1}}],[\"processdynamicparams\",{\"1\":{\"289\":3}}],[\"processdynamicparamwithsingleparam\",{\"1\":{\"289\":1}}],[\"processtransactionterminated\",{\"1\":{\"1094\":1,\"3190\":1}}],[\"processtimeout\",{\"1\":{\"1094\":1,\"3190\":1,\"3208\":1,\"3217\":3}}],[\"processingpool\",{\"1\":{\"3218\":3}}],[\"processingexception\",{\"1\":{\"2959\":2}}],[\"processingenv\",{\"1\":{\"1087\":3,\"3162\":2}}],[\"processingenvironment\",{\"1\":{\"1087\":1}}],[\"processing\",{\"1\":{\"2062\":1,\"3147\":2}}],[\"processingstreamexample\",{\"1\":{\"1222\":1}}],[\"processioexception\",{\"1\":{\"1094\":1,\"3190\":1}}],[\"processresponse\",{\"1\":{\"1094\":1,\"3190\":1,\"3208\":1,\"3217\":3}}],[\"processrequest\",{\"1\":{\"1094\":1,\"3190\":1,\"3208\":1,\"3217\":3,\"3218\":1}}],[\"processorder\",{\"1\":{\"1044\":3,\"2032\":1,\"2054\":1,\"2061\":1,\"2796\":1,\"2948\":2}}],[\"processed\",{\"1\":{\"997\":1}}],[\"processedstream\",{\"1\":{\"543\":2}}],[\"processes\",{\"1\":{\"216\":1,\"1385\":1,\"1575\":1,\"1595\":1}}],[\"processuser\",{\"1\":{\"517\":2}}],[\"process\",{\"1\":{\"122\":1,\"554\":2,\"563\":1,\"993\":1,\"1087\":1,\"1325\":1,\"1650\":9,\"1656\":1,\"1677\":2,\"1711\":1,\"1713\":9,\"2059\":2,\"2935\":2,\"2959\":4,\"3002\":2,\"3147\":1,\"3162\":1}}],[\"procs\",{\"1\":{\"122\":1}}],[\"proc\",{\"1\":{\"122\":1,\"125\":6,\"1838\":5,\"1852\":1,\"1854\":1,\"1880\":1,\"1903\":1}}],[\"p\",{\"1\":{\"115\":1,\"121\":1,\"122\":1,\"123\":1,\"193\":1,\"198\":1,\"216\":1,\"219\":2,\"222\":1,\"226\":1,\"227\":1,\"234\":4,\"239\":1,\"242\":2,\"250\":1,\"255\":2,\"280\":1,\"1417\":1,\"1456\":2,\"1502\":2,\"1509\":1,\"1512\":2,\"1513\":1,\"1518\":1,\"1526\":4,\"1529\":4,\"1530\":3,\"1569\":5,\"1577\":4,\"1578\":5,\"1590\":2,\"1595\":2,\"1600\":1,\"1601\":1,\"1605\":1,\"1606\":1,\"1610\":2,\"1615\":1,\"1643\":2,\"1644\":2,\"1646\":1,\"1656\":1,\"1667\":1,\"1675\":1,\"1711\":1,\"1727\":1,\"1734\":2,\"1746\":1,\"1767\":1,\"1773\":1,\"1775\":1,\"1779\":1,\"1787\":1,\"1788\":1,\"1814\":1,\"1823\":2,\"1833\":1,\"1834\":1,\"1852\":1,\"1865\":3,\"1876\":1,\"1879\":1,\"1882\":1,\"2195\":1,\"2600\":10,\"2628\":8,\"2629\":8,\"2630\":5,\"2657\":26,\"2681\":4,\"3086\":2,\"3099\":1,\"3125\":4,\"3126\":2,\"3245\":3,\"3250\":1,\"3271\":4,\"3282\":1}}],[\"populatebean\",{\"1\":{\"2999\":2}}],[\"pop\",{\"1\":{\"2465\":2,\"2468\":1,\"2506\":1,\"2544\":1,\"2551\":1,\"2554\":1,\"2704\":1}}],[\"poi等\",{\"1\":{\"1984\":1}}],[\"pointcut\",{\"1\":{\"267\":4,\"335\":1}}],[\"pointer\",{\"1\":{\"125\":1,\"720\":1}}],[\"pod\",{\"1\":{\"1661\":1,\"1808\":2}}],[\"pod名称\",{\"1\":{\"1634\":1}}],[\"pods\",{\"1\":{\"1634\":2,\"1808\":2}}],[\"pom文件\",{\"0\":{\"936\":1,\"1696\":1}}],[\"pom文件示例\",{\"1\":{\"584\":1}}],[\"pom\",{\"0\":{\"1003\":1},\"1\":{\"584\":2,\"936\":1,\"2018\":1}}],[\"poolconfig\",{\"1\":{\"3241\":1}}],[\"pool\",{\"1\":{\"445\":1,\"724\":1,\"728\":1,\"1326\":9,\"3218\":1}}],[\"pojo\",{\"1\":{\"289\":2}}],[\"polymorphism\",{\"1\":{\"2730\":1}}],[\"polllast\",{\"1\":{\"2319\":1}}],[\"pollfirst\",{\"1\":{\"2319\":1,\"2552\":1}}],[\"poll\",{\"0\":{\"2574\":1},\"1\":{\"280\":1,\"642\":1,\"1326\":1,\"1656\":1,\"1711\":1,\"2349\":2,\"2462\":2,\"2465\":2,\"2468\":1,\"2480\":1,\"2506\":1,\"2524\":1,\"2552\":1,\"2555\":1,\"2574\":1,\"2577\":1,\"2578\":1,\"2585\":1,\"2588\":2,\"2681\":1}}],[\"policy\",{\"1\":{\"157\":3,\"3278\":1}}],[\"policy=0\",{\"1\":{\"99\":1,\"1774\":1}}],[\"poffset\",{\"1\":{\"180\":1}}],[\"ports\",{\"1\":{\"250\":3,\"1535\":2,\"1569\":1,\"1648\":2,\"1649\":2,\"1650\":20,\"1660\":1,\"1661\":1,\"1685\":2,\"1688\":2,\"1698\":1,\"1713\":22,\"1930\":1,\"3246\":2,\"3250\":1,\"3271\":1,\"3273\":1}}],[\"port=27018\",{\"1\":{\"1763\":1}}],[\"port=27017\",{\"1\":{\"1734\":1,\"1763\":1}}],[\"port=25\",{\"1\":{\"1644\":1}}],[\"port=9092\",{\"1\":{\"1535\":1}}],[\"port=80\",{\"1\":{\"1925\":1,\"1926\":1}}],[\"port=8081\",{\"1\":{\"1895\":1}}],[\"port=8080\",{\"1\":{\"403\":1}}],[\"port=8091\",{\"1\":{\"242\":2}}],[\"port=$\",{\"1\":{\"235\":1}}],[\"port\",{\"1\":{\"165\":1,\"178\":1,\"180\":1,\"186\":8,\"198\":1,\"208\":1,\"235\":2,\"404\":1,\"450\":1,\"1094\":4,\"1111\":7,\"1326\":6,\"1336\":4,\"1337\":1,\"1339\":1,\"1412\":2,\"1511\":1,\"1524\":1,\"1560\":2,\"1569\":1,\"1578\":1,\"1638\":6,\"1648\":3,\"1649\":3,\"1650\":11,\"1677\":1,\"1685\":3,\"1688\":3,\"1713\":12,\"1734\":2,\"1764\":2,\"1813\":2,\"1874\":1,\"1878\":1,\"2921\":2,\"3099\":1,\"3107\":2,\"3125\":8,\"3177\":2,\"3206\":9,\"3237\":2,\"3246\":2,\"3263\":1,\"3273\":1}}],[\"portfolio\",{\"1\":{\"2\":1}}],[\"positive\",{\"1\":{\"2512\":1}}],[\"position=0\",{\"1\":{\"3116\":1}}],[\"position++\",{\"1\":{\"2873\":1}}],[\"position指向缓冲区末尾\",{\"1\":{\"1235\":1}}],[\"position\",{\"1\":{\"1232\":2,\"1238\":3,\"1440\":1,\"1469\":1,\"2849\":1,\"2873\":8,\"2914\":1,\"3116\":1}}],[\"postgres96\",{\"1\":{\"1607\":1}}],[\"postgresql\",{\"1\":{\"1605\":1,\"1606\":2}}],[\"postgres\",{\"1\":{\"1603\":1,\"1604\":1,\"1606\":2,\"1607\":2}}],[\"postresponse\",{\"1\":{\"471\":1}}],[\"postrequest\",{\"1\":{\"471\":2}}],[\"post请求示例\",{\"1\":{\"471\":1}}],[\"postforentity\",{\"1\":{\"450\":1}}],[\"post\",{\"1\":{\"434\":1,\"471\":1,\"1432\":2,\"1434\":2,\"1435\":2,\"1436\":3,\"1440\":1,\"1443\":1,\"1444\":1,\"1563\":1,\"1914\":1}}],[\"post用于创建资源\",{\"1\":{\"433\":1}}],[\"postmapping\",{\"1\":{\"381\":1,\"427\":1,\"428\":1,\"434\":1,\"456\":1,\"2007\":1,\"2065\":1}}],[\"postmapping等注解\",{\"1\":{\"378\":1}}],[\"post等\",{\"1\":{\"292\":1,\"3198\":1}}],[\"post方法远程调用\",{\"1\":{\"285\":1}}],[\"pos=0\",{\"1\":{\"113\":1}}],[\"pos=154\",{\"1\":{\"110\":1}}],[\"pos=698\",{\"1\":{\"102\":1}}],[\"pos=951\",{\"1\":{\"102\":1}}],[\"pos\",{\"1\":{\"102\":1,\"110\":1}}],[\"pa\",{\"1\":{\"3245\":1}}],[\"pair<>\",{\"1\":{\"3020\":1}}],[\"pair<string\",{\"1\":{\"3020\":1}}],[\"pair<k\",{\"1\":{\"3020\":1}}],[\"pair\",{\"1\":{\"3020\":4}}],[\"paymentresult\",{\"1\":{\"2955\":6}}],[\"paymentserviceunavailableexception\",{\"1\":{\"2955\":1}}],[\"paymentservice\",{\"1\":{\"2955\":3}}],[\"paymentfailedexception\",{\"1\":{\"2948\":1,\"2955\":1}}],[\"payment\",{\"1\":{\"2746\":4}}],[\"pay\",{\"1\":{\"1650\":9,\"1713\":9,\"2746\":4}}],[\"payload的内容只经过了\",{\"1\":{\"303\":1}}],[\"payload\",{\"1\":{\"303\":4}}],[\"pagingandsortingrepository<t\",{\"1\":{\"3050\":1}}],[\"pagination\",{\"1\":{\"1444\":3}}],[\"pagenum\",{\"1\":{\"1444\":3}}],[\"pages\",{\"1\":{\"1444\":2}}],[\"pagesize\",{\"1\":{\"284\":11,\"1443\":8,\"1444\":11}}],[\"pageinfo<>\",{\"1\":{\"1444\":1}}],[\"pageinfo<list<news>>\",{\"1\":{\"1444\":1}}],[\"pageinfo\",{\"1\":{\"1444\":9}}],[\"pagequery\",{\"1\":{\"1443\":1,\"1444\":1}}],[\"pagehelper\",{\"1\":{\"1443\":1,\"1444\":2}}],[\"pagelist\",{\"1\":{\"284\":3}}],[\"pagelistutils\",{\"1\":{\"284\":1}}],[\"page<\",{\"1\":{\"284\":1}}],[\"page手动分页工具类\",{\"0\":{\"284\":1}}],[\"page\",{\"1\":{\"28\":1,\"216\":1,\"284\":5,\"452\":2,\"1385\":1,\"1443\":5,\"1444\":10,\"1885\":1}}],[\"panama\",{\"1\":{\"1165\":1}}],[\"palindromechecker\",{\"1\":{\"1165\":1}}],[\"pack\",{\"1\":{\"1325\":1}}],[\"packagename\",{\"1\":{\"3162\":4}}],[\"packageutils\",{\"1\":{\"2765\":1}}],[\"package\",{\"1\":{\"279\":1,\"280\":1,\"289\":1,\"940\":1,\"999\":1,\"1496\":1,\"1656\":1,\"1711\":1,\"2733\":1,\"2762\":1,\"2796\":1,\"2810\":1,\"3085\":1,\"3135\":1,\"3246\":1,\"3273\":2}}],[\"packet=512m\",{\"1\":{\"1823\":2}}],[\"packets\",{\"1\":{\"125\":1}}],[\"packet\",{\"1\":{\"125\":8,\"1578\":1,\"3066\":8}}],[\"passed\",{\"1\":{\"3003\":2}}],[\"passive\",{\"1\":{\"1886\":1}}],[\"pass\",{\"1\":{\"1390\":1,\"1395\":1,\"1396\":1,\"1409\":1,\"1417\":1,\"1813\":1,\"3250\":1}}],[\"passbyvaluedemo\",{\"1\":{\"1058\":1}}],[\"passphrase>\",{\"1\":{\"998\":1}}],[\"passphrase>填写你生成秘钥时输入的密码<\",{\"1\":{\"998\":1}}],[\"pass=guest\",{\"1\":{\"255\":1}}],[\"passwd密码文件\",{\"1\":{\"1426\":1}}],[\"passwd文件\",{\"0\":{\"1426\":1}}],[\"passwd\",{\"1\":{\"125\":1,\"1421\":1,\"1422\":1,\"1423\":1,\"1426\":3,\"1427\":1,\"1855\":1,\"1872\":1}}],[\"passwords\",{\"1\":{\"1354\":2}}],[\"password>\",{\"1\":{\"998\":1}}],[\"passwordencoder\",{\"1\":{\"451\":2,\"2068\":3}}],[\"passwordvariable\",{\"1\":{\"280\":1,\"1656\":1,\"1711\":1}}],[\"password=password\",{\"1\":{\"1774\":1}}],[\"password=1qazxsw\",{\"1\":{\"1643\":1,\"1644\":1}}],[\"password=123456\",{\"1\":{\"226\":1,\"235\":1,\"403\":1,\"445\":2,\"1578\":1,\"1644\":2,\"3246\":1}}],[\"password=zz\",{\"1\":{\"1606\":1}}],[\"password=\",{\"1\":{\"102\":2,\"110\":1,\"1577\":1,\"1578\":1}}],[\"password\",{\"1\":{\"81\":1,\"99\":1,\"122\":1,\"125\":3,\"165\":5,\"198\":1,\"229\":1,\"232\":1,\"257\":1,\"280\":4,\"367\":1,\"404\":1,\"407\":1,\"451\":2,\"1357\":1,\"1358\":1,\"1363\":1,\"1423\":1,\"1427\":1,\"1431\":2,\"1433\":2,\"1434\":2,\"1435\":2,\"1457\":3,\"1503\":5,\"1504\":2,\"1523\":1,\"1563\":1,\"1570\":1,\"1578\":2,\"1607\":1,\"1638\":4,\"1648\":1,\"1649\":2,\"1656\":3,\"1684\":2,\"1685\":1,\"1688\":2,\"1711\":4,\"1773\":1,\"1774\":2,\"1780\":1,\"1813\":1,\"1819\":3,\"1822\":2,\"2065\":1,\"3053\":2,\"3215\":6,\"3237\":2}}],[\"path=$path\",{\"1\":{\"1731\":1}}],[\"path=$java\",{\"1\":{\"1624\":1}}],[\"path=\",{\"1\":{\"1586\":1}}],[\"path\",{\"1\":{\"434\":1,\"729\":4,\"746\":3,\"747\":2,\"973\":1,\"1238\":1,\"1324\":4,\"1503\":2,\"1523\":3,\"1535\":1,\"1648\":1,\"1650\":10,\"1661\":3,\"1685\":1,\"1698\":1,\"1713\":11,\"1734\":2,\"1738\":2,\"1764\":1,\"1974\":2,\"1987\":2,\"1988\":1,\"2921\":3,\"3104\":1,\"3276\":2}}],[\"pathvariable\",{\"1\":{\"380\":1,\"381\":3,\"427\":3}}],[\"paths\",{\"1\":{\"125\":1,\"1232\":3,\"1238\":2,\"2917\":2}}],[\"pattern>\",{\"1\":{\"1564\":3,\"2072\":1,\"3102\":1}}],[\"pattern\",{\"1\":{\"199\":1,\"1231\":4,\"1535\":1,\"1564\":3,\"2065\":1,\"2308\":1}}],[\"parnew收集器\",{\"1\":{\"765\":1,\"769\":1}}],[\"parentfield\",{\"1\":{\"2984\":4}}],[\"parentof\",{\"1\":{\"2656\":32}}],[\"parent\",{\"1\":{\"1078\":2,\"2575\":3,\"2654\":1,\"2655\":6,\"2656\":1,\"2657\":16,\"2984\":2,\"3036\":1}}],[\"parent>\",{\"1\":{\"394\":1}}],[\"parent<string>\",{\"1\":{\"3036\":1}}],[\"parent<t>\",{\"1\":{\"3036\":1}}],[\"parent<\",{\"1\":{\"394\":1}}],[\"parallelgcthreads=<n>\",{\"1\":{\"797\":1,\"831\":1,\"865\":1,\"899\":1}}],[\"parallelstream\",{\"1\":{\"269\":1,\"272\":1,\"543\":1}}],[\"parallel\",{\"1\":{\"178\":1,\"766\":1,\"769\":1,\"770\":2,\"795\":1,\"797\":1,\"809\":1,\"811\":1,\"829\":1,\"831\":1,\"843\":1,\"845\":1,\"863\":1,\"865\":1,\"877\":1,\"879\":1,\"897\":1,\"899\":1,\"911\":1,\"913\":1}}],[\"param3\",{\"1\":{\"3002\":1}}],[\"param2\",{\"1\":{\"3002\":1,\"3246\":3}}],[\"param1\",{\"1\":{\"3002\":2,\"3246\":3}}],[\"paramname\",{\"1\":{\"3002\":2}}],[\"param`\",{\"1\":{\"1687\":4}}],[\"parametertypes\",{\"1\":{\"2983\":2}}],[\"parametertype=\",{\"1\":{\"439\":3}}],[\"parameterdemo\",{\"1\":{\"2785\":1}}],[\"parameterizedtypereference<list<user>>\",{\"1\":{\"450\":1}}],[\"parameter\",{\"1\":{\"125\":3,\"1069\":2,\"1261\":1,\"2966\":1,\"3016\":1,\"3135\":2}}],[\"parameters\",{\"1\":{\"125\":2,\"537\":2,\"1295\":1,\"2027\":1,\"3002\":3,\"3137\":1}}],[\"param\",{\"1\":{\"125\":3,\"235\":1,\"269\":6,\"279\":6,\"283\":5,\"284\":3,\"286\":11,\"289\":17,\"307\":2,\"1038\":3,\"1161\":3,\"1162\":1,\"1164\":3,\"1165\":1,\"1166\":1,\"1326\":4,\"1648\":1,\"1685\":1,\"1738\":2,\"1914\":1,\"1948\":2,\"1962\":3,\"1974\":5,\"1975\":2,\"1987\":4,\"1988\":1,\"2035\":1,\"2051\":1,\"2091\":4,\"2327\":4,\"2436\":2,\"2437\":7,\"2438\":2,\"2439\":7,\"2440\":3,\"2493\":1,\"2494\":8,\"2495\":6,\"2496\":3,\"2497\":5,\"2498\":3,\"2512\":4,\"2551\":1,\"2552\":1,\"2554\":1,\"2571\":2,\"2573\":1,\"2575\":4,\"2599\":3,\"2600\":2,\"2602\":3,\"2627\":3,\"2629\":1,\"2631\":3,\"2632\":4,\"2655\":2,\"2658\":3,\"2680\":5,\"2682\":1,\"2683\":2,\"2684\":1,\"2707\":3,\"2708\":1,\"2709\":1,\"2710\":2,\"2711\":2,\"2715\":2,\"2716\":1,\"2721\":2,\"2927\":1,\"3002\":1,\"3052\":1,\"3190\":3,\"3205\":2,\"3206\":4,\"3212\":1}}],[\"params=\",{\"1\":{\"1644\":2}}],[\"params\",{\"1\":{\"125\":2,\"279\":5,\"289\":2,\"1384\":6,\"1432\":2}}],[\"paramcount\",{\"1\":{\"125\":1}}],[\"part3\",{\"1\":{\"2893\":1,\"2897\":1}}],[\"part2\",{\"1\":{\"2893\":1,\"2897\":1}}],[\"part1\",{\"1\":{\"2893\":1,\"2897\":1}}],[\"part\",{\"1\":{\"125\":6,\"3275\":2}}],[\"parts\",{\"1\":{\"125\":2,\"3215\":2}}],[\"particular\",{\"1\":{\"1578\":1}}],[\"partition仅能在range\",{\"1\":{\"125\":1}}],[\"partition仅能在hash\",{\"1\":{\"125\":1}}],[\"partitions\",{\"1\":{\"125\":3,\"1532\":2}}],[\"partitioning\",{\"1\":{\"125\":1}}],[\"partitioning能使用values\",{\"1\":{\"125\":1}}],[\"partitioning需要values\",{\"1\":{\"125\":1}}],[\"partition\",{\"1\":{\"43\":1,\"125\":25}}],[\"partialdata\",{\"1\":{\"2914\":2}}],[\"partial\",{\"1\":{\"20\":1}}],[\"partial^r\",{\"1\":{\"20\":1}}],[\"parsesipsdp\",{\"1\":{\"3232\":1}}],[\"parsesdpcontent\",{\"1\":{\"3205\":2}}],[\"parselong\",{\"1\":{\"3215\":1}}],[\"parsemediainfo\",{\"1\":{\"3209\":2}}],[\"parsefrom\",{\"1\":{\"3085\":1}}],[\"parseboolean\",{\"1\":{\"2198\":1}}],[\"parseexception\",{\"1\":{\"1095\":4,\"3205\":2}}],[\"parsedouble\",{\"1\":{\"1040\":1,\"2198\":1}}],[\"parseddate\",{\"1\":{\"545\":1}}],[\"parseinstance\",{\"1\":{\"711\":2}}],[\"parseint\",{\"1\":{\"539\":3,\"1040\":1,\"1055\":1,\"1443\":2,\"1444\":2,\"2101\":1,\"2198\":1}}],[\"parseclaimsjws\",{\"1\":{\"456\":2}}],[\"parserequest\",{\"1\":{\"1095\":1,\"3205\":1}}],[\"parser\",{\"1\":{\"456\":2}}],[\"parseobj\",{\"1\":{\"289\":1}}],[\"parsetoken\",{\"1\":{\"279\":1}}],[\"parse\",{\"1\":{\"125\":1,\"279\":4,\"545\":1,\"3137\":2,\"3149\":1}}],[\"对实时性要求高的场景\",{\"1\":{\"3227\":1}}],[\"对可靠性要求高的场景\",{\"1\":{\"3227\":1}}],[\"对可变对象参数进行防御性拷贝\",{\"1\":{\"2307\":1}}],[\"对对话操作进行同步\",{\"1\":{\"3223\":1}}],[\"对已完成事务的重传\",{\"1\":{\"3222\":1}}],[\"对已经带缓冲的流再次包装缓冲流\",{\"1\":{\"2873\":1}}],[\"对最终响应后的重传请求直接丢弃\",{\"1\":{\"3222\":1}}],[\"对话状态维护容易出现并发问题\",{\"1\":{\"3223\":1}}],[\"对话状态维护\",{\"0\":{\"3223\":1}}],[\"对话状态枚举\",{\"1\":{\"3209\":1}}],[\"对话信息类\",{\"1\":{\"3209\":1}}],[\"对话管理代码示例\",{\"1\":{\"3209\":1}}],[\"对话生命周期包括\",{\"1\":{\"3209\":1}}],[\"对话生命周期管理\",{\"0\":{\"3209\":1}}],[\"对话\",{\"1\":{\"3209\":1}}],[\"对反射操作中使用的类名\",{\"1\":{\"3011\":1}}],[\"对使用者而言\",{\"1\":{\"2889\":1}}],[\"对文件进行大量随机读写操作\",{\"1\":{\"2873\":1}}],[\"对方法参数进行合法性校验\",{\"1\":{\"2788\":1}}],[\"对敏感操作进行权限检查\",{\"1\":{\"2771\":1}}],[\"对视图的修改会反映到底层map\",{\"1\":{\"2665\":1}}],[\"对关键操作进行同步\",{\"1\":{\"2456\":1}}],[\"对null值严格检查\",{\"1\":{\"2415\":1}}],[\"对称差集\",{\"1\":{\"2372\":1}}],[\"对所有类可见\",{\"1\":{\"2765\":1}}],[\"对所有方法加锁\",{\"1\":{\"2429\":1}}],[\"对所有public方法添加synchronized修饰符\",{\"1\":{\"2356\":1}}],[\"对所有操作均进行记录\",{\"1\":{\"139\":1}}],[\"对不可变集合执行修改操作\",{\"1\":{\"2342\":1}}],[\"对不同类型的数据有良好的适应性\",{\"1\":{\"2357\":1}}],[\"对不同代采用不同回收策略\",{\"1\":{\"776\":1}}],[\"对不同区域采用不同回收算法\",{\"1\":{\"767\":1}}],[\"对修改操作抛出unsupportedoperationexception\",{\"1\":{\"2336\":1,\"2358\":1}}],[\"对修改关闭\",{\"1\":{\"1209\":1,\"1273\":1,\"1298\":1,\"2746\":1}}],[\"对频繁出现的字符串\",{\"1\":{\"2311\":1}}],[\"对频繁出现空值的变量考虑添加\",{\"1\":{\"522\":1}}],[\"对数时间复杂度o\",{\"0\":{\"2710\":1}}],[\"对数时间\",{\"1\":{\"2702\":1}}],[\"对数组元素\",{\"1\":{\"2416\":1}}],[\"对数组进行升序排序\",{\"1\":{\"2149\":1}}],[\"对数据库的瓶颈排查\",{\"1\":{\"190\":1}}],[\"对数据进行删除的选择策略\",{\"1\":{\"157\":1}}],[\"对数据非常敏感\",{\"1\":{\"142\":1}}],[\"对用户输入的html内容使用白名单过滤\",{\"1\":{\"2067\":1}}],[\"对物理机暴露2122\",{\"1\":{\"1569\":1}}],[\"对网页的部\",{\"1\":{\"1436\":1}}],[\"对网页的部分内容进行局部更新\",{\"1\":{\"1430\":1}}],[\"对网页的某部分进行更新\",{\"1\":{\"1432\":1}}],[\"对网站通过密码进行访问\",{\"1\":{\"1418\":1}}],[\"对每个run使用插入排序进行排序\",{\"1\":{\"2357\":1}}],[\"对每个接口服务进行拦截\",{\"1\":{\"1383\":1}}],[\"对每个expires\",{\"1\":{\"153\":1}}],[\"对性能要求不高的小型应用\",{\"1\":{\"1347\":1}}],[\"对扩展开放\",{\"1\":{\"1209\":1,\"1298\":1}}],[\"对hashmap的所有方法添加synchronized同步锁\",{\"1\":{\"1197\":1}}],[\"对sip消息进行压缩\",{\"1\":{\"1115\":1}}],[\"对相似请求进行批处理\",{\"1\":{\"1113\":1}}],[\"对常用值\",{\"1\":{\"1049\":1}}],[\"对响应时间敏感的应用选择cms或g1\",{\"1\":{\"818\":1,\"852\":1,\"886\":1,\"920\":1}}],[\"对停顿时间有要求的应用\",{\"1\":{\"784\":1}}],[\"对volatile字段的写操作happens\",{\"1\":{\"656\":1}}],[\"对低延迟要求高的应用\",{\"1\":{\"495\":1}}],[\"对应的键值对会被自动移除\",{\"1\":{\"2675\":1}}],[\"对应的value\",{\"1\":{\"2629\":1}}],[\"对应的选举最终得票多的\",{\"1\":{\"182\":1}}],[\"对应位置元素相加\",{\"1\":{\"2174\":1}}],[\"对应域名网站目录下新增index\",{\"1\":{\"1389\":1}}],[\"对应用吞吐量影响小\",{\"1\":{\"476\":1}}],[\"对客户端来说当于明文存储\",{\"1\":{\"303\":1}}],[\"对中文路径进行截取转义\",{\"1\":{\"294\":1}}],[\"对key进行业务层传输加密服务\",{\"1\":{\"192\":1}}],[\"对查询结果为null的数据进行缓存\",{\"1\":{\"192\":1}}],[\"对自然流量激增的数据延长过期时间或设置为永久性key\",{\"1\":{\"191\":1}}],[\"对即将过期数据做访问量分析\",{\"1\":{\"190\":1}}],[\"对某个expires\",{\"1\":{\"153\":1}}],[\"对该空间的数据进行检测\",{\"1\":{\"148\":1}}],[\"对业务数据非常敏感\",{\"1\":{\"142\":1}}],[\"对list\",{\"1\":{\"140\":1}}],[\"对同一数据的多条写命令合并为一条命令\",{\"1\":{\"140\":1}}],[\"对一系列存储的数据进行编组\",{\"1\":{\"133\":1}}],[\"对子查询的循环引用\",{\"1\":{\"125\":1}}],[\"对比总结\",{\"1\":{\"2356\":1}}],[\"对比concurrenthashmap的实现原理\",{\"0\":{\"1197\":1}}],[\"对比\",{\"1\":{\"114\":1,\"1407\":1}}],[\"对象池减少创建开销\",{\"1\":{\"3128\":1}}],[\"对象深拷贝等\",{\"1\":{\"3006\":1}}],[\"对象参数为null\",{\"1\":{\"2970\":1,\"2971\":1}}],[\"对象等\",{\"1\":{\"2901\":1}}],[\"对象数组打印时显示类似com\",{\"1\":{\"2232\":1}}],[\"对象数组打印无意义内容\",{\"0\":{\"2232\":1}}],[\"对象数组打印依赖于对象的tostring\",{\"1\":{\"2224\":1}}],[\"对象数组\",{\"0\":{\"2224\":1}}],[\"对象以及它们之间的关系\",{\"1\":{\"2077\":1}}],[\"对象相互转换\",{\"1\":{\"1454\":1}}],[\"对象和字符串等\",{\"1\":{\"2899\":1}}],[\"对象和\",{\"1\":{\"1454\":1}}],[\"对象转为\",{\"1\":{\"1454\":2}}],[\"对象转换为jquery对象\",{\"1\":{\"1449\":1}}],[\"对象转换成\",{\"1\":{\"1449\":2}}],[\"对象转\",{\"1\":{\"1439\":1}}],[\"对象或集合转换成\",{\"1\":{\"1438\":1,\"1440\":1}}],[\"对象形式\",{\"1\":{\"1435\":1,\"1436\":1}}],[\"对象序列化完成\",{\"1\":{\"1225\":1}}],[\"对象序列化是将对象转换为字节序列的过程\",{\"1\":{\"1225\":1}}],[\"对象序列化与反序列化示例\",{\"1\":{\"1225\":1}}],[\"对象序列化与反序列化\",{\"0\":{\"1225\":1},\"1\":{\"1225\":1}}],[\"对象封装了数据和方法\",{\"1\":{\"1216\":1}}],[\"对象内容可变\",{\"1\":{\"2813\":1}}],[\"对象内容被修改\",{\"1\":{\"1058\":1}}],[\"对象内存布局包括\",{\"1\":{\"720\":1}}],[\"对象内存布局分析\",{\"0\":{\"711\":1}}],[\"对象类型参数\",{\"1\":{\"1058\":1}}],[\"对象不是integer类型\",{\"1\":{\"1055\":1}}],[\"对象存活判定算法\",{\"0\":{\"760\":1}}],[\"对象存活时间长\",{\"1\":{\"713\":1,\"767\":1}}],[\"对象存活时间短\",{\"1\":{\"713\":1,\"767\":1}}],[\"对象头包含哈希码\",{\"1\":{\"720\":1}}],[\"对象头包含哪些信息\",{\"1\":{\"720\":1}}],[\"对象头\",{\"1\":{\"720\":1}}],[\"对象在内存中的布局是怎样的\",{\"1\":{\"720\":1}}],[\"对象优先在eden区分配\",{\"1\":{\"708\":1}}],[\"对象实例分配的主要区域\",{\"1\":{\"707\":1}}],[\"对象创建过多且无法回收\",{\"1\":{\"700\":1}}],[\"对象方法引用\",{\"1\":{\"539\":1}}],[\"对象的创建和依赖关系由应用程序自身管理\",{\"1\":{\"311\":1}}],[\"对象中的属性值做变量替换\",{\"1\":{\"289\":1}}],[\"对象\",{\"1\":{\"38\":1,\"1433\":1,\"1434\":1,\"1436\":1,\"1438\":1,\"1440\":1,\"1443\":1,\"1444\":2,\"1449\":7,\"1451\":2,\"1453\":2,\"1454\":6,\"2243\":2,\"2902\":1}}],[\"对于字段缓存\",{\"1\":{\"3011\":1}}],[\"对于方法缓存\",{\"1\":{\"3011\":1}}],[\"对于通过反射加载的类名\",{\"1\":{\"3010\":1}}],[\"对于性能要求极高的场景\",{\"1\":{\"3010\":1}}],[\"对于同一个类加载器加载的同一个类\",{\"1\":{\"2975\":1}}],[\"对于高频操作\",{\"1\":{\"2942\":1}}],[\"对于频繁使用的反射操作\",{\"1\":{\"3010\":1}}],[\"对于频繁发生的已知异常\",{\"1\":{\"2942\":1}}],[\"对于频繁调用的方法\",{\"1\":{\"1264\":1}}],[\"对于关键数据\",{\"1\":{\"2896\":1}}],[\"对于顺序读写\",{\"1\":{\"2872\":1}}],[\"对于网络流可能不准确\",{\"1\":{\"2848\":1}}],[\"对于引用类型\",{\"1\":{\"2790\":1}}],[\"对于索引为i的节点\",{\"1\":{\"2580\":1}}],[\"对于队列操作\",{\"1\":{\"2564\":1}}],[\"对于已遍历的节点\",{\"1\":{\"2543\":1}}],[\"对于简单计数\",{\"1\":{\"2534\":1}}],[\"对于自定义对象作为键\",{\"1\":{\"2422\":1}}],[\"对于包含可变对象的不可变集合\",{\"1\":{\"2358\":1}}],[\"对于包含多个类的单文件程序\",{\"1\":{\"479\":1}}],[\"对于基本类型数组\",{\"1\":{\"2357\":1}}],[\"对于静态资源比如图片\",{\"1\":{\"1401\":1}}],[\"对于超大文件\",{\"1\":{\"1238\":1}}],[\"对于复杂的多维数据\",{\"1\":{\"2178\":1}}],[\"对于复杂的循环条件\",{\"1\":{\"2138\":1}}],[\"对于复杂配置\",{\"1\":{\"1086\":1}}],[\"对于复合操作\",{\"1\":{\"600\":1}}],[\"对于对象\",{\"1\":{\"1058\":1}}],[\"对于初学者来说\",{\"1\":{\"945\":1}}],[\"对于初级开发容易养成依赖\",{\"1\":{\"298\":1}}],[\"对于特殊需求的项目可能需要额外的配置\",{\"1\":{\"945\":1}}],[\"对于static\",{\"1\":{\"756\":1}}],[\"对于start\",{\"1\":{\"125\":1}}],[\"对于小规模数据或简单操作\",{\"1\":{\"553\":1}}],[\"对于小型应用\",{\"1\":{\"492\":1}}],[\"对于i\",{\"1\":{\"533\":1}}],[\"对于链式调用\",{\"1\":{\"501\":1}}],[\"对于习惯了第三方库的开发者\",{\"1\":{\"494\":1}}],[\"对于了解jwt的同学来说\",{\"1\":{\"306\":1}}],[\"对于一些比较重要的权限\",{\"1\":{\"305\":1}}],[\"对于子分区\",{\"1\":{\"125\":1}}],[\"对于子程序\",{\"1\":{\"125\":1}}],[\"对于分区引擎\",{\"1\":{\"125\":1}}],[\"对于各分区\",{\"1\":{\"125\":1}}],[\"对于每个分区\",{\"1\":{\"125\":1}}],[\"对于float\",{\"1\":{\"125\":1}}],[\"对于函数\",{\"1\":{\"125\":1}}],[\"对于该过程\",{\"1\":{\"125\":1}}],[\"对于行\",{\"1\":{\"125\":2}}],[\"对于cpu密集型任务\",{\"1\":{\"529\":1}}],[\"对于case语句\",{\"1\":{\"125\":1}}],[\"对于current\",{\"1\":{\"125\":1}}],[\"对于character\",{\"1\":{\"125\":1}}],[\"对于操作\",{\"1\":{\"125\":3}}],[\"对于共享库\",{\"1\":{\"125\":1}}],[\"对于所使用的表类型\",{\"1\":{\"125\":1}}],[\"对于过程\",{\"1\":{\"125\":2}}],[\"对于列\",{\"1\":{\"125\":3}}],[\"对于表\",{\"1\":{\"125\":3}}],[\"对于需要强一致性的场景\",{\"1\":{\"94\":1}}],[\"对于不需要严格一致性的场景\",{\"1\":{\"74\":1}}],[\"对于大型sip消息\",{\"1\":{\"3227\":1}}],[\"对于大文件传输\",{\"1\":{\"2872\":1}}],[\"对于大多数应用场景\",{\"1\":{\"2455\":1}}],[\"对于大多数java网络应用\",{\"1\":{\"1238\":1}}],[\"对于大数据量且哈希冲突可能性高的场景\",{\"1\":{\"1196\":1}}],[\"对于大数据集\",{\"1\":{\"63\":1}}],[\"对于大量小文件的合并\",{\"1\":{\"2896\":1}}],[\"对于大量数据的操作\",{\"1\":{\"94\":1,\"211\":1}}],[\"对于大量的数据\",{\"1\":{\"74\":1}}],[\"对于大量的小文档\",{\"1\":{\"42\":1}}],[\"对于\",{\"1\":{\"30\":1,\"125\":6}}],[\"对\",{\"1\":{\"15\":1}}],[\"会执行\",{\"1\":{\"3246\":1}}],[\"会被替换为其边界类型\",{\"1\":{\"3034\":1}}],[\"会被替换为object\",{\"1\":{\"3034\":1}}],[\"会被转发到容器内部的9092端口\",{\"1\":{\"1530\":1}}],[\"会失去泛型的类型安全优势\",{\"1\":{\"3028\":1}}],[\"会覆盖try或catch中的return值\",{\"1\":{\"2930\":1}}],[\"会产生不同的执行结果\",{\"1\":{\"2739\":1}}],[\"会产生各种问题\",{\"1\":{\"304\":1}}],[\"会发生什么\",{\"1\":{\"2616\":1}}],[\"会淘汰最近最少使用的元素\",{\"1\":{\"2512\":1}}],[\"会唤醒notfull条件上的生产者\",{\"1\":{\"2483\":1}}],[\"会唤醒notempty条件上的消费者\",{\"1\":{\"2483\":1}}],[\"会触发多次扩容\",{\"1\":{\"2449\":1}}],[\"会触发扩容\",{\"1\":{\"2272\":1,\"2344\":1}}],[\"会影响视图\",{\"1\":{\"2358\":1}}],[\"会影响原列表\",{\"1\":{\"2346\":1}}],[\"会影响redis服务器响应时间和指令吞吐量\",{\"1\":{\"151\":1}}],[\"会复制字符串到永久代\",{\"1\":{\"2297\":1}}],[\"会检查元素是否为数组类型\",{\"1\":{\"2234\":1}}],[\"会检查你代码中需要优化的地方\",{\"1\":{\"298\":1}}],[\"会从\",{\"1\":{\"1873\":5}}],[\"会在test\",{\"1\":{\"1865\":1}}],[\"会提示未认证\",{\"1\":{\"1787\":1}}],[\"会看到configure\",{\"1\":{\"1779\":1}}],[\"会以恒定的速率源源不断产生令牌\",{\"1\":{\"1400\":1}}],[\"会把所有进程的id号写到此文件\",{\"1\":{\"1384\":1}}],[\"会做一个健康检查\",{\"1\":{\"1377\":1}}],[\"会有很多个密码\",{\"1\":{\"1354\":1}}],[\"会抛出securityexception\",{\"1\":{\"2990\":1}}],[\"会抛出异常\",{\"1\":{\"2984\":1}}],[\"会抛出nullpointerexception\",{\"1\":{\"2896\":1,\"2927\":1}}],[\"会抛出classcastexception\",{\"1\":{\"2388\":1}}],[\"会抛出concurrentmodificationexception\",{\"1\":{\"1190\":1,\"2340\":1,\"2448\":1,\"2507\":1}}],[\"会抛出unsupportedoperationexception\",{\"1\":{\"1191\":3}}],[\"会抛出此异常\",{\"1\":{\"1190\":1,\"2382\":1}}],[\"会创建新的栈帧\",{\"1\":{\"1145\":1}}],[\"会话状态同步\",{\"0\":{\"3235\":1}}],[\"会话数\",{\"1\":{\"3228\":1}}],[\"会话终止流程\",{\"0\":{\"3189\":1}}],[\"会话终止\",{\"1\":{\"3175\":1,\"3189\":1}}],[\"会话修改\",{\"1\":{\"3175\":1}}],[\"会话建立流程\",{\"0\":{\"3188\":1}}],[\"会话建立\",{\"1\":{\"3175\":1}}],[\"会话初始协议\",{\"1\":{\"3172\":1}}],[\"会话分析\",{\"1\":{\"3107\":1}}],[\"会话层\",{\"1\":{\"3058\":1}}],[\"会话类\",{\"1\":{\"2525\":1}}],[\"会话对象\",{\"1\":{\"2525\":1}}],[\"会话超时管理\",{\"1\":{\"2486\":1}}],[\"会话迁移\",{\"1\":{\"1116\":1}}],[\"会话保持\",{\"0\":{\"1116\":1}}],[\"会话流程\",{\"1\":{\"1089\":1}}],[\"会让你输入用户名和邮箱\",{\"1\":{\"997\":1}}],[\"会让你产生一种所有知识都懂假象\",{\"1\":{\"0\":1}}],[\"会通过编译器确保其他线程只能看到初始化完成的值\",{\"1\":{\"668\":1}}],[\"会释放锁\",{\"1\":{\"618\":1}}],[\"会为可能抛出npe的操作插入额外的空值检查代码\",{\"1\":{\"504\":1}}],[\"会加载其配置类\",{\"1\":{\"463\":1}}],[\"会加载这个注解内部中的\",{\"1\":{\"419\":1,\"463\":1}}],[\"会自动关闭所有被组合的输入流\",{\"1\":{\"2889\":1}}],[\"会自动转换回链表\",{\"1\":{\"2394\":1}}],[\"会自动创建一个文件夹\",{\"1\":{\"1635\":1}}],[\"会自动处理ld\",{\"1\":{\"1586\":1}}],[\"会自动继承该项目的依赖\",{\"1\":{\"932\":1,\"967\":1}}],[\"会自动装配不同的服务器\",{\"1\":{\"416\":1,\"460\":1}}],[\"会自动给出代码替代方案\",{\"1\":{\"298\":1}}],[\"会造成策略类膨胀\",{\"1\":{\"292\":1}}],[\"会大量占用cpu性能\",{\"1\":{\"172\":1}}],[\"会导致包管理与继承体系的权限控制混淆\",{\"1\":{\"2802\":1}}],[\"会导致异常行为\",{\"1\":{\"2671\":1}}],[\"会导致全部slave的全量复制操作\",{\"1\":{\"171\":1}}],[\"会导致数据溢出\",{\"1\":{\"166\":1}}],[\"会将链表转换为红黑树\",{\"1\":{\"2394\":1}}],[\"会将规则作用于默认域\",{\"1\":{\"1940\":1}}],[\"会将该指令存储到缓冲区中\",{\"1\":{\"167\":1}}],[\"会将自己的运行id发送给slave\",{\"1\":{\"167\":1}}],[\"会对带宽造成巨大冲击\",{\"1\":{\"166\":1}}],[\"会引发oom\",{\"1\":{\"157\":1}}],[\"会调用\",{\"1\":{\"156\":1}}],[\"会丢失数据\",{\"1\":{\"141\":1}}],[\"会使用\",{\"1\":{\"14\":1}}],[\"请联系管理员\",{\"1\":{\"2959\":1}}],[\"请稍后重试\",{\"1\":{\"2955\":1,\"2956\":1}}],[\"请举例说明在遵循编码规范的同时进行性能调优的实践方法\",{\"1\":{\"2041\":1}}],[\"请设计一套规范落地的完整解决方案\",{\"1\":{\"2029\":1}}],[\"请结合具体业务场景分析服务拆分的决策过程和演进策略\",{\"1\":{\"2014\":1}}],[\"请谨慎操作\",{\"1\":{\"1675\":1}}],[\"请注意\",{\"1\":{\"1635\":1}}],[\"请一定要有备用的逻辑部署方案可以随时切换\",{\"1\":{\"1632\":1}}],[\"请升级成\",{\"1\":{\"1557\":1}}],[\"请选择\",{\"1\":{\"1459\":1,\"1464\":1}}],[\"请重试\",{\"1\":{\"1253\":1}}],[\"请重新创建视图\",{\"1\":{\"125\":1}}],[\"请求消息在未收到响应时会重传\",{\"1\":{\"3195\":1}}],[\"请求消息\",{\"1\":{\"3179\":2}}],[\"请求消息包含方法\",{\"1\":{\"1092\":1}}],[\"请求指标\",{\"1\":{\"3111\":1}}],[\"请求率\",{\"1\":{\"3109\":1}}],[\"请求关闭连接\",{\"1\":{\"3070\":1}}],[\"请求建立连接\",{\"1\":{\"3070\":1}}],[\"请求路由\",{\"1\":{\"2921\":1,\"3183\":1}}],[\"请求头和请求体\",{\"1\":{\"3070\":1}}],[\"请求头\",{\"1\":{\"2065\":1}}],[\"请求头中的content\",{\"1\":{\"1412\":2}}],[\"请求查询分页数据\",{\"1\":{\"1443\":1}}],[\"请求\",{\"1\":{\"1440\":1}}],[\"请求成功后的回调函数\",{\"1\":{\"1440\":1,\"1443\":1,\"1444\":1}}],[\"请求成功后调用的回调函数\",{\"1\":{\"1435\":1}}],[\"请求成功时调用的回调函数\",{\"1\":{\"1435\":1,\"1436\":1}}],[\"请求资源路径\",{\"1\":{\"1435\":1}}],[\"请求资源的路径\",{\"1\":{\"1432\":1}}],[\"请求参数\",{\"1\":{\"1433\":1,\"1434\":1,\"1435\":1,\"1440\":1}}],[\"请求已完成\",{\"1\":{\"1432\":1}}],[\"请求已接收\",{\"1\":{\"1432\":1}}],[\"请求未初始化\",{\"1\":{\"1432\":1}}],[\"请求的目标地址\",{\"1\":{\"3211\":1}}],[\"请求的发送者\",{\"1\":{\"3180\":1}}],[\"请求的接收者\",{\"1\":{\"3180\":1}}],[\"请求的方式\",{\"1\":{\"1443\":1,\"1444\":1}}],[\"请求的资源路径\",{\"1\":{\"1433\":2,\"1434\":2,\"1435\":1,\"1436\":2,\"1440\":1,\"1443\":1,\"1444\":1}}],[\"请求的参数\",{\"1\":{\"1432\":1,\"1443\":1,\"1444\":1}}],[\"请求的类型\",{\"1\":{\"1432\":1}}],[\"请求到达服务器的端口号\",{\"1\":{\"1412\":1}}],[\"请求使用的协议\",{\"1\":{\"1412\":1}}],[\"请求主机头字段\",{\"1\":{\"1412\":1}}],[\"请求宽恕比请求许可更容易\",{\"1\":{\"1254\":1}}],[\"请求id\",{\"1\":{\"1249\":1,\"3110\":1}}],[\"请求与保持条件\",{\"1\":{\"648\":1}}],[\"请求完成\",{\"1\":{\"529\":1}}],[\"请求失败后自动重试\",{\"1\":{\"3087\":1}}],[\"请求失败后调用的回调函数\",{\"1\":{\"1435\":1}}],[\"请求失败时调用的回调函数\",{\"1\":{\"1435\":1,\"1436\":1}}],[\"请求失败\",{\"1\":{\"491\":1}}],[\"请求处理中\",{\"1\":{\"1432\":1}}],[\"请求处理\",{\"1\":{\"292\":1}}],[\"请求方式\",{\"1\":{\"292\":1,\"1435\":2,\"1436\":1,\"1440\":1}}],[\"请求数量较高\",{\"1\":{\"189\":1}}],[\"请求部分同步数据\",{\"1\":{\"166\":1}}],[\"请求同步数据\",{\"1\":{\"166\":1}}],[\"请复位语句并再次执行\",{\"1\":{\"125\":1}}],[\"请再次尝试事务\",{\"1\":{\"125\":1}}],[\"请将密码更改为新格式\",{\"1\":{\"125\":1}}],[\"请考虑升级mysql客户端\",{\"1\":{\"125\":1}}],[\"请尝试重新启动事务\",{\"1\":{\"125\":2}}],[\"请尝试修复\",{\"1\":{\"125\":1}}],[\"请更正config文件\",{\"1\":{\"125\":1}}],[\"请配置slave并执行start\",{\"1\":{\"125\":1}}],[\"请首先运行stop\",{\"1\":{\"125\":1}}],[\"请参见支持矩阵\",{\"1\":{\"1635\":1}}],[\"请参阅与你的mysql版本对应的手册\",{\"1\":{\"125\":1}}],[\"请参阅手册以了解可使用那种权限\",{\"1\":{\"125\":1}}],[\"请参阅手册以了解可能的与操作系统有关的缺陷\",{\"1\":{\"125\":1}}],[\"请参考手册\",{\"1\":{\"125\":1}}],[\"请用\",{\"1\":{\"125\":1}}],[\"请检查数据一致性\",{\"1\":{\"125\":1}}],[\"请检查系统资源\",{\"1\":{\"125\":1}}],[\"请检查on条件\",{\"1\":{\"125\":1}}],[\"请检查where\",{\"1\":{\"125\":1}}],[\"请检查列\",{\"1\":{\"125\":1}}],[\"请检查是否mysqld或其他进程使用了所有可用内存\",{\"1\":{\"125\":1}}],[\"请使用unique取而代之\",{\"1\":{\"125\":1}}],[\"请使用drop\",{\"1\":{\"125\":2}}],[\"请使用\",{\"1\":{\"125\":4}}],[\"请使用blob或text取而代之\",{\"1\":{\"125\":1}}],[\"请使用绝对链接\",{\"1\":{\"30\":1}}],[\"请修复之\",{\"1\":{\"125\":1}}],[\"请阅读\",{\"1\":{\"13\":1,\"15\":1}}],[\"请先阅读\",{\"1\":{\"12\":1}}],[\"是lombok\",{\"1\":{\"3161\":1}}],[\"是框架开发和代码分析的重要技术\",{\"1\":{\"3132\":1}}],[\"是网络通信的端点\",{\"1\":{\"3064\":1}}],[\"是使用通配符的指导原则\",{\"1\":{\"3041\":1}}],[\"是面向抽象编程的重要体现\",{\"1\":{\"3027\":1}}],[\"是面试重点考察内容\",{\"1\":{\"1312\":1}}],[\"是面试高频考点\",{\"1\":{\"1224\":1}}],[\"是许多主流java框架\",{\"1\":{\"2996\":1}}],[\"是日常开发中输出数据的常用工具\",{\"1\":{\"2899\":1}}],[\"是整个java\",{\"1\":{\"2839\":1}}],[\"是封装的核心体现\",{\"1\":{\"2795\":1}}],[\"是封装的典型应用\",{\"1\":{\"2734\":1}}],[\"是创建对象的模板\",{\"1\":{\"2758\":1}}],[\"是运行时多态\",{\"1\":{\"2752\":1}}],[\"是运行时反射解析注解的必要条件\",{\"1\":{\"1064\":1}}],[\"是编译时多态\",{\"1\":{\"2752\":1}}],[\"是其唯一数据结构\",{\"1\":{\"2672\":1}}],[\"是其他数据结构的基础\",{\"1\":{\"2155\":1}}],[\"是黑色\",{\"1\":{\"2650\":1}}],[\"是指\",{\"1\":{\"2543\":1}}],[\"是指根据应用特性找到的最优参数组合\",{\"1\":{\"818\":1,\"852\":1,\"886\":1,\"920\":1}}],[\"是通过专门的不可变实现类实现的\",{\"1\":{\"2358\":1}}],[\"是归并排序和插入排序的混合体\",{\"1\":{\"2357\":1}}],[\"是打印数组的便捷工具\",{\"1\":{\"2215\":1}}],[\"是处理多维数据的基础\",{\"1\":{\"2163\":1}}],[\"是实现其他复杂数据结构的基础\",{\"1\":{\"2140\":1}}],[\"是基于ieee\",{\"1\":{\"2105\":1}}],[\"是不可取的\",{\"1\":{\"1887\":1}}],[\"是不是要维护每台session\",{\"1\":{\"304\":1}}],[\"是为了提高\",{\"1\":{\"1887\":1}}],[\"是规定的命令结尾\",{\"1\":{\"1873\":1}}],[\"是删除命令\",{\"1\":{\"1873\":1}}],[\"是副本集名称\",{\"1\":{\"1764\":1}}],[\"是因为对外暴露的端口不可用访问权限已被禁止\",{\"1\":{\"1569\":1}}],[\"是发生在gc占用大量时间为释放很小空间的时候发生的\",{\"1\":{\"1558\":1}}],[\"是用java\",{\"1\":{\"1507\":1}}],[\"是需要时启用\",{\"1\":{\"1491\":1}}],[\"是禁用\",{\"1\":{\"1491\":1}}],[\"是启用\",{\"1\":{\"1491\":1}}],[\"是在使用时直接调用\",{\"1\":{\"1446\":1}}],[\"是在select\",{\"1\":{\"125\":1}}],[\"是无状态的\",{\"1\":{\"1414\":1}}],[\"是以安全为目标的http通道\",{\"1\":{\"1414\":1}}],[\"是互联网上应用最为广泛的一种网络协议\",{\"1\":{\"1414\":1}}],[\"是object\",{\"1\":{\"1288\":1}}],[\"是object类的方法\",{\"1\":{\"618\":1}}],[\"是反射的入口\",{\"1\":{\"1261\":1}}],[\"是提高io性能的关键技术\",{\"1\":{\"1232\":1}}],[\"是类\",{\"1\":{\"1129\":1}}],[\"是关键字\",{\"1\":{\"1129\":1}}],[\"是系统进行资源分配和调度的一个独立单位\",{\"1\":{\"1122\":1}}],[\"是操作系统调度的基本单位\",{\"1\":{\"1122\":1}}],[\"是操作系统管理的内核态线程\",{\"1\":{\"526\":1}}],[\"是maven的核心文件\",{\"1\":{\"936\":1}}],[\"是堆中线程私有的一小块区域\",{\"1\":{\"720\":1}}],[\"是执行java字节码的虚拟计算机\",{\"1\":{\"689\":1}}],[\"是理解java内存模型的基础\",{\"1\":{\"656\":1}}],[\"是thread类的静态方法\",{\"1\":{\"618\":1}}],[\"是sip中两个ua之间的持久会话上下文\",{\"1\":{\"3209\":1}}],[\"是servlet规范提供的一个组件\",{\"1\":{\"383\":1}}],[\"是spring\",{\"1\":{\"383\":1}}],[\"是spring提供的一个web\",{\"1\":{\"377\":1}}],[\"是spring提供的一个jdbc模板类\",{\"1\":{\"363\":1}}],[\"是spring框架的另一个核心概念\",{\"1\":{\"333\":1}}],[\"是spring框架的核心概念\",{\"1\":{\"319\":1}}],[\"是遵循rest原则的api\",{\"1\":{\"378\":1}}],[\"是jdk5引入的一种元数据机制\",{\"1\":{\"3132\":1}}],[\"是jdk\",{\"1\":{\"1227\":1,\"1238\":1,\"2911\":1,\"3113\":1}}],[\"是jdbc的标准接口\",{\"1\":{\"369\":1}}],[\"是jdbctemplate的扩展\",{\"1\":{\"363\":1}}],[\"是jvm实际采用的算法\",{\"1\":{\"762\":1}}],[\"是jvm实现跨平台的基础\",{\"1\":{\"723\":1}}],[\"是jvm自动管理内存的机制\",{\"1\":{\"759\":1}}],[\"是jvm管理的用户态线程\",{\"1\":{\"526\":1}}],[\"是java泛型实现的核心机制\",{\"1\":{\"3034\":1}}],[\"是java\",{\"1\":{\"2863\":1,\"2887\":1,\"2899\":1}}],[\"是java中一种特殊的引用类型\",{\"1\":{\"2816\":1}}],[\"是java中用于组织类和接口的命名空间\",{\"1\":{\"2762\":1}}],[\"是java的核心特性\",{\"1\":{\"1200\":1}}],[\"是java语言的核心组件之一\",{\"1\":{\"1141\":1}}],[\"是java编程的基石\",{\"1\":{\"1033\":1}}],[\"是java并发工具的基础框架\",{\"1\":{\"639\":1}}],[\"是java持久化api\",{\"1\":{\"364\":1}}],[\"是另一个流行的orm框架\",{\"1\":{\"364\":1}}],[\"是beanfactory的子接口\",{\"1\":{\"321\":1}}],[\"是ioc容器的基本接口\",{\"1\":{\"321\":1}}],[\"是负载\",{\"1\":{\"303\":1}}],[\"是否需要优先级选择\",{\"1\":{\"2542\":1}}],[\"是否有界\",{\"1\":{\"2542\":1}}],[\"是否正确返回object\",{\"1\":{\"2436\":1}}],[\"是否从尾部删除\",{\"1\":{\"2327\":1}}],[\"是否添加到尾部\",{\"1\":{\"2327\":1}}],[\"是否为空\",{\"1\":{\"2324\":1}}],[\"是否为回文\",{\"1\":{\"1165\":1}}],[\"是否包含apple\",{\"1\":{\"2324\":1}}],[\"是否包含适当的单元测试\",{\"1\":{\"2023\":1}}],[\"是否处理了异常情况\",{\"1\":{\"2023\":1}}],[\"是否遵循架构设计原则\",{\"1\":{\"2023\":1}}],[\"是否支持=\",{\"1\":{\"2881\":1}}],[\"是否支持\",{\"1\":{\"1974\":1,\"1987\":1}}],[\"是否设置为开机自启\",{\"0\":{\"1938\":1}}],[\"是否成功安装\",{\"1\":{\"1747\":1}}],[\"是否启动完成无报错\",{\"1\":{\"1655\":1,\"1710\":1}}],[\"是否启用cluster\",{\"1\":{\"186\":1}}],[\"是否只读\",{\"1\":{\"1503\":2}}],[\"是否允许客户端可以查看可用模块列表\",{\"1\":{\"1503\":2}}],[\"是否异步\",{\"1\":{\"1435\":1}}],[\"是否异步请求\",{\"1\":{\"1435\":1,\"1436\":1}}],[\"是否记录返回值\",{\"1\":{\"1068\":1}}],[\"是否记录参数\",{\"1\":{\"1068\":1}}],[\"是否满足条件\",{\"1\":{\"459\":1}}],[\"是否被篡改\",{\"1\":{\"303\":1}}],[\"是否替换变量\",{\"1\":{\"289\":1}}],[\"是否在线\",{\"1\":{\"180\":1}}],[\"是否高可用\",{\"1\":{\"161\":1}}],[\"是持久化之外的一种数据冗余方式\",{\"1\":{\"162\":1}}],[\"是分情况的\",{\"1\":{\"147\":1}}],[\"是视图或临时表\",{\"1\":{\"125\":1}}],[\"是一组以8字节为基础单位的二进制流\",{\"1\":{\"723\":1}}],[\"是一组原子性的操作\",{\"1\":{\"348\":1}}],[\"是一个时间服务器\",{\"1\":{\"1907\":1}}],[\"是一个\",{\"1\":{\"1446\":1,\"1448\":1,\"2748\":1}}],[\"是一个客户端和服务器端请求和应答的标准\",{\"1\":{\"1414\":1}}],[\"是一个流行的orm框架\",{\"1\":{\"364\":1}}],[\"是一个分布式系统\",{\"1\":{\"176\":1}}],[\"是一个先进先出\",{\"1\":{\"167\":1}}],[\"是一个随机的十六进制字符\",{\"1\":{\"167\":1}}],[\"是一个基于\",{\"1\":{\"127\":1}}],[\"是一个全新的数据库\",{\"1\":{\"121\":1}}],[\"是一种用于建立\",{\"1\":{\"3172\":1}}],[\"是一种无连接的\",{\"1\":{\"3062\":1}}],[\"是一种面向连接的\",{\"1\":{\"3061\":1}}],[\"是一种允许在定义类\",{\"1\":{\"3016\":1}}],[\"是一种不允许包含重复元素的集合\",{\"1\":{\"2361\":1}}],[\"是一种保护机制\",{\"1\":{\"1558\":1}}],[\"是一种轻量级的数据交换格式\",{\"1\":{\"1437\":1}}],[\"是一种抽象的内存模型\",{\"1\":{\"703\":1}}],[\"是一种软件架构风格\",{\"1\":{\"378\":1}}],[\"是一种优化数据库连接使用的技术\",{\"1\":{\"369\":1}}],[\"是一种\",{\"1\":{\"125\":1}}],[\"是1种global变量\",{\"1\":{\"125\":1}}],[\"是1种session变量\",{\"1\":{\"125\":1}}],[\"是只读的\",{\"1\":{\"125\":1}}],[\"是数据库操作的基础\",{\"1\":{\"45\":1}}],[\"是\",{\"1\":{\"13\":1,\"303\":1,\"1435\":1,\"1436\":1,\"2201\":2,\"2316\":2,\"2363\":5,\"2400\":7,\"2461\":5,\"3250\":1}}],[\"是什么\",{\"1\":{\"0\":1}}],[\"为自定义注解编写清晰文档\",{\"1\":{\"3169\":1}}],[\"为方法添加横切关注点\",{\"1\":{\"3009\":1}}],[\"为方法调用提供横切关注点\",{\"1\":{\"2992\":1}}],[\"为用户提供一致的错误体验\",{\"1\":{\"2960\":1}}],[\"为用户名输入框绑定鼠标点击事件\",{\"1\":{\"1440\":2}}],[\"为用户名绑定失去焦点事件\",{\"1\":{\"1433\":1,\"1434\":1,\"1435\":1}}],[\"为文本处理提供了便捷的api\",{\"1\":{\"2851\":1}}],[\"为所有方法添加synchronized同步块\",{\"1\":{\"2456\":1,\"2513\":1}}],[\"为普通set集合添加线程同步功能\",{\"1\":{\"2379\":1}}],[\"为未来版本的扩展预留空间\",{\"1\":{\"2083\":1}}],[\"为分隔符\",{\"1\":{\"1872\":1}}],[\"为分页按钮绑定单击事件\",{\"1\":{\"1444\":2}}],[\"为分页按钮区域设置页数参数\",{\"1\":{\"1444\":2}}],[\"为启动成功\",{\"1\":{\"1578\":1}}],[\"为确保内核树绝对干净\",{\"1\":{\"1489\":1}}],[\"为序号数字\",{\"1\":{\"1478\":1}}],[\"为停止按钮绑定单击事件\",{\"1\":{\"1470\":2}}],[\"为开始按钮绑定单击事件\",{\"1\":{\"1469\":2}}],[\"为反选按钮添加单击事件\",{\"1\":{\"1467\":1}}],[\"为反选按钮绑定单击事件\",{\"1\":{\"1467\":1}}],[\"为全不选按钮添加单击事件\",{\"1\":{\"1467\":1}}],[\"为全不选按钮绑定单击事件\",{\"1\":{\"1467\":1}}],[\"为全选按钮添加单击事件\",{\"1\":{\"1467\":1}}],[\"为全选按钮绑定单击事件\",{\"1\":{\"1467\":1}}],[\"为其添加checked属性\",{\"1\":{\"1467\":3}}],[\"为其添加\",{\"1\":{\"1467\":3}}],[\"为当前窗口绑定滚动条滚动事件\",{\"1\":{\"1443\":2}}],[\"为姓名绑定失去焦点事件\",{\"1\":{\"1431\":1}}],[\"为集合设置合适的初始容量可以减少扩容次数\",{\"1\":{\"1193\":1}}],[\"为后续学习打下坚实基础\",{\"1\":{\"934\":1}}],[\"为起点\",{\"1\":{\"762\":1}}],[\"为native方法服务\",{\"1\":{\"707\":1}}],[\"为null\",{\"1\":{\"500\":1}}],[\"为本地方法服务\",{\"1\":{\"691\":1}}],[\"为避免内存溢出删除的key的总数量\",{\"1\":{\"193\":1}}],[\"为避免slave进行全量复制\",{\"1\":{\"166\":1}}],[\"为防止数据量过大造成客户端缓冲区溢出\",{\"1\":{\"140\":1}}],[\"为了维持泛型类型的多态性\",{\"1\":{\"3036\":1}}],[\"为了保证hashset能正确检查重复元素\",{\"1\":{\"2393\":1}}],[\"为了避免服务器崩溃\",{\"1\":{\"1403\":1}}],[\"为了避免单点redis服务器故障\",{\"1\":{\"161\":1}}],[\"为了减少盗用\",{\"1\":{\"305\":2}}],[\"为了解决这个问题\",{\"1\":{\"140\":1}}],[\"为了丰富文档写作\",{\"1\":{\"15\":1}}],[\"为列\",{\"1\":{\"125\":2}}],[\"为1个或多个请求的用户授权\",{\"1\":{\"125\":1}}],[\"为表\",{\"1\":{\"125\":1}}],[\"为行\",{\"1\":{\"125\":2}}],[\"为\",{\"1\":{\"125\":1,\"289\":1}}],[\"为基于tcp等可靠连接的应用层协议提供安全性保证\",{\"1\":{\"114\":1}}],[\"为slave配置复制位置\",{\"1\":{\"101\":1,\"109\":1}}],[\"为每个客户端创建新线程处理\",{\"1\":{\"1314\":1}}],[\"为每个对象添加引用计数器\",{\"1\":{\"761\":1}}],[\"为每个\",{\"1\":{\"13\":1}}],[\"为什么netty选择基于nio而非aio实现\",{\"1\":{\"3130\":1}}],[\"为什么nginx性能这么高\",{\"0\":{\"1378\":1}}],[\"为什么挥手需要四次而握手只需要三次\",{\"1\":{\"3070\":1}}],[\"为什么需要泛型\",{\"0\":{\"3017\":1}}],[\"为什么需要三次握手\",{\"1\":{\"1311\":1}}],[\"为什么许多主流框架\",{\"1\":{\"3011\":1}}],[\"为什么反射调用在jdk9及以上版本中对模块化类的访问会受到限制\",{\"1\":{\"2994\":1}}],[\"为什么在高性能系统中应避免在循环中创建异常对象\",{\"1\":{\"2942\":1}}],[\"为什么hashmap在jdk\",{\"1\":{\"2672\":1}}],[\"为什么hashmap的容量必须是2的幂次方\",{\"1\":{\"2616\":1}}],[\"为什么它比hashmap的迭代器更快\",{\"1\":{\"2643\":1}}],[\"为什么基本类型数组和对象数组的打印方式需要区分对待\",{\"1\":{\"2233\":1}}],[\"为什么stringbuilder和stringbuffer的默认初始容量是16\",{\"1\":{\"2281\":1}}],[\"为什么string类被设计为不可变的\",{\"1\":{\"2206\":1}}],[\"为什么survivor区需要两个\",{\"1\":{\"720\":1}}],[\"为什么就多了一个\",{\"1\":{\"1396\":1}}],[\"为什么time\",{\"1\":{\"1311\":1}}],[\"为什么java泛型要使用类型擦除\",{\"1\":{\"3029\":1}}],[\"为什么java反射可以访问私有成员\",{\"1\":{\"2975\":1}}],[\"为什么java将异常分为受检异常和非受检异常\",{\"1\":{\"2931\":1}}],[\"为什么java不允许在外部类上使用protected修饰符\",{\"1\":{\"2802\":1}}],[\"为什么java中没有goto关键字的实际应用\",{\"1\":{\"2814\":1}}],[\"为什么java中没有真正的引用传递\",{\"1\":{\"2790\":1}}],[\"为什么java中的浮点数不适合用于金融计算\",{\"1\":{\"2105\":1}}],[\"为什么java中的class对象是单例的\",{\"0\":{\"1279\":1}}],[\"为什么java中的异常必须显式捕获或声明\",{\"1\":{\"1254\":1}}],[\"为什么java官方推荐使用deque接口及其实现类替代stack类\",{\"1\":{\"2564\":1}}],[\"为什么java要避免使用goto语句\",{\"1\":{\"2138\":1}}],[\"为什么java要区分基本数据类型和引用数据类型\",{\"1\":{\"2105\":1}}],[\"为什么java要区分static和final这两个关键字\",{\"1\":{\"2085\":1}}],[\"为什么java要保留一些关键字\",{\"1\":{\"2085\":1}}],[\"为什么java类文件要使用魔数0xcafebabe\",{\"1\":{\"738\":1}}],[\"为什么企业需要搭建私服仓库\",{\"1\":{\"989\":1}}],[\"为什么建议将\",{\"1\":{\"818\":1,\"852\":1,\"886\":1,\"920\":1}}],[\"为什么readwritelock支持锁降级而不支持锁升级\",{\"1\":{\"651\":1}}],[\"为什么redis的命令通常是大写的\",{\"1\":{\"212\":1}}],[\"为什么redis这么快\",{\"0\":{\"128\":1}}],[\"为什么说注释是代码的\",{\"1\":{\"2095\":1}}],[\"为什么说文档自动化工具是软件开发中不可或缺的一部分\",{\"1\":{\"1992\":1}}],[\"为什么说文档生态系统是软件开发中不可或缺的一部分\",{\"1\":{\"1979\":1}}],[\"为什么说文档管理体系是软件开发中不可或缺的一部分\",{\"1\":{\"1966\":1}}],[\"为什么说api文档是软件开发中不可或缺的一部分\",{\"1\":{\"1953\":1}}],[\"为什么说泛型是java的语法糖\",{\"1\":{\"1304\":1}}],[\"为什么说java中的string是不可变的\",{\"1\":{\"703\":1}}],[\"为什么说jdbctemplate简化了jdbc的使用\",{\"1\":{\"373\":1}}],[\"为什么说spring是轻量级的\",{\"1\":{\"317\":1}}],[\"为什么说mongodb是无模式的\",{\"1\":{\"43\":1}}],[\"为什么要了解运算符的优先级\",{\"1\":{\"2119\":1}}],[\"为什么要做动静分离\",{\"0\":{\"1401\":1}}],[\"为什么要使用线程池\",{\"0\":{\"1134\":1}}],[\"为什么要用nginx\",{\"0\":{\"1377\":1}}],[\"为什么要用jwt\",{\"1\":{\"304\":1}}],[\"为什么要用redis\",{\"0\":{\"129\":1}}],[\"为什么要有aof\",{\"1\":{\"139\":1}}],[\"为什么要开启ssl认证\",{\"1\":{\"114\":1}}],[\"为什么不直接用\",{\"1\":{\"128\":1}}],[\"为什么\",{\"0\":{\"1271\":1},\"1\":{\"0\":1}}],[\"文中所有ip均为内网ip\",{\"1\":{\"3264\":1}}],[\"文化建设\",{\"1\":{\"2029\":1}}],[\"文本格式与可扩展性\",{\"1\":{\"3220\":1}}],[\"文本格式过滤\",{\"1\":{\"1535\":1}}],[\"文本\",{\"1\":{\"2830\":1,\"2839\":1}}],[\"文本数据用printwriter\",{\"1\":{\"2909\":1}}],[\"文本数据\",{\"1\":{\"1221\":1}}],[\"文本型\",{\"1\":{\"1101\":1}}],[\"文本块预览\",{\"1\":{\"1059\":1}}],[\"文本索引\",{\"1\":{\"68\":1}}],[\"文档规范\",{\"0\":{\"3320\":1}}],[\"文档缺失\",{\"1\":{\"3169\":1}}],[\"文档化\",{\"1\":{\"2093\":1}}],[\"文档注释的优势主要有以下几点\",{\"1\":{\"2095\":1}}],[\"文档注释有什么优势\",{\"1\":{\"2095\":1}}],[\"文档注释以\",{\"1\":{\"2091\":1}}],[\"文档注释\",{\"0\":{\"2091\":1}}],[\"文档路径\",{\"1\":{\"1988\":1}}],[\"文档测试工具类\",{\"1\":{\"1988\":1}}],[\"文档测试工具示例\",{\"0\":{\"1988\":1}}],[\"文档测试工具\",{\"1\":{\"1984\":1}}],[\"文档转换工具\",{\"1\":{\"1984\":1}}],[\"文档转换工具等\",{\"1\":{\"1971\":1}}],[\"文档生成工具类\",{\"1\":{\"1987\":1}}],[\"文档生成工具示例\",{\"0\":{\"1987\":1}}],[\"文档生成工具\",{\"1\":{\"1984\":1}}],[\"文档生态系统也可以确保项目的所有文档都得到妥善的创建\",{\"1\":{\"1979\":1}}],[\"文档生态系统是协作和共享项目文档的重要机制\",{\"1\":{\"1979\":1}}],[\"文档生态系统是软件开发过程中不可或缺的一部分\",{\"1\":{\"1968\":1}}],[\"文档生态系统应该具有一定的可扩展性\",{\"1\":{\"1972\":1}}],[\"文档生态系统应该具有一定的灵活性\",{\"1\":{\"1972\":1}}],[\"文档生态系统应该确保文档的安全性和保密性\",{\"1\":{\"1972\":1}}],[\"文档生态系统应该是一个完整的系统\",{\"1\":{\"1972\":1}}],[\"文档生态系统应该满足开发者的实际需求\",{\"1\":{\"1972\":1}}],[\"文档生态系统的设计思想是协作和共享\",{\"1\":{\"1977\":1}}],[\"文档生态系统的设计原则\",{\"0\":{\"1972\":1}}],[\"文档生态系统的实现示例\",{\"0\":{\"1973\":1}}],[\"文档生态系统的基本要素\",{\"0\":{\"1971\":1}}],[\"文档生态系统的重要性\",{\"0\":{\"1970\":1}}],[\"文档生态系统\",{\"0\":{\"1967\":1}}],[\"文档自动化工具也可以确保项目的所有文档都得到妥善的创建\",{\"1\":{\"1992\":1}}],[\"文档自动化工具是自动化和智能化创建\",{\"1\":{\"1992\":1}}],[\"文档自动化工具是软件开发过程中不可或缺的一部分\",{\"1\":{\"1981\":1}}],[\"文档自动化工具应该具有一定的可扩展性\",{\"1\":{\"1985\":1}}],[\"文档自动化工具应该具有一定的灵活性\",{\"1\":{\"1985\":1}}],[\"文档自动化工具应该确保文档的安全性和保密性\",{\"1\":{\"1985\":1}}],[\"文档自动化工具应该是一个完整的系统\",{\"1\":{\"1985\":1}}],[\"文档自动化工具应该满足开发者的实际需求\",{\"1\":{\"1985\":1}}],[\"文档自动化工具的设计思想是自动化和智能化\",{\"1\":{\"1990\":1}}],[\"文档自动化工具的设计原则\",{\"0\":{\"1985\":1}}],[\"文档自动化工具的实现示例\",{\"0\":{\"1986\":1}}],[\"文档自动化工具的基本类型\",{\"0\":{\"1984\":1}}],[\"文档自动化工具的重要性\",{\"0\":{\"1983\":1}}],[\"文档自动化工具\",{\"0\":{\"1980\":1}}],[\"文档审核流程\",{\"1\":{\"1975\":2}}],[\"文档流程类\",{\"1\":{\"1975\":1}}],[\"文档流程示例\",{\"0\":{\"1975\":1}}],[\"文档格式\",{\"1\":{\"1974\":1,\"1987\":2}}],[\"文档工具类\",{\"1\":{\"1974\":1}}],[\"文档工具类示例\",{\"0\":{\"1974\":1}}],[\"文档id\",{\"1\":{\"1962\":1}}],[\"文档对象\",{\"1\":{\"1962\":2,\"1975\":1}}],[\"文档管理工具\",{\"1\":{\"1971\":1,\"1984\":1}}],[\"文档管理类\",{\"1\":{\"1962\":1}}],[\"文档管理类示例\",{\"0\":{\"1962\":1}}],[\"文档管理体系也可以确保项目的所有文档都得到妥善的组织\",{\"1\":{\"1966\":1}}],[\"文档管理体系是组织\",{\"1\":{\"1966\":1}}],[\"文档管理体系是软件开发过程中不可或缺的一部分\",{\"1\":{\"1955\":1}}],[\"文档管理体系应该具有一定的可扩展性\",{\"1\":{\"1959\":1}}],[\"文档管理体系应该具有一定的灵活性\",{\"1\":{\"1959\":1}}],[\"文档管理体系应该确保文档的安全性和保密性\",{\"1\":{\"1959\":1}}],[\"文档管理体系应该是一个完整的系统\",{\"1\":{\"1959\":1}}],[\"文档管理体系应该满足开发者的实际需求\",{\"1\":{\"1959\":1}}],[\"文档管理体系的设计思想是组织\",{\"1\":{\"1964\":1}}],[\"文档管理体系的设计原则\",{\"0\":{\"1959\":1}}],[\"文档管理体系的实现示例\",{\"0\":{\"1960\":1}}],[\"文档管理体系的基本要素\",{\"0\":{\"1958\":1}}],[\"文档管理体系的重要性\",{\"0\":{\"1957\":1}}],[\"文档管理体系设计\",{\"0\":{\"1954\":1}}],[\"文档权限\",{\"1\":{\"1958\":1}}],[\"文档维护\",{\"1\":{\"1958\":1}}],[\"文档检索工具\",{\"1\":{\"1971\":1,\"1984\":1}}],[\"文档检索\",{\"1\":{\"1958\":1}}],[\"文档存储路径\",{\"1\":{\"1962\":2}}],[\"文档存储\",{\"1\":{\"1958\":1}}],[\"文档分类枚举\",{\"1\":{\"1961\":1}}],[\"文档分类示例\",{\"0\":{\"1961\":1}}],[\"文档分类\",{\"1\":{\"1958\":1}}],[\"文档操作命令\",{\"0\":{\"83\":1}}],[\"文档操作命令以及高级命令\",{\"1\":{\"77\":1}}],[\"文档可以有不同的字段和结构\",{\"1\":{\"43\":1}}],[\"文档中的键值对\",{\"1\":{\"37\":1}}],[\"文档的集合\",{\"1\":{\"37\":1}}],[\"文档\",{\"1\":{\"37\":1,\"1447\":1,\"1971\":1}}],[\"文件使用的是\",{\"1\":{\"3246\":1}}],[\"文件的存放目录下\",{\"1\":{\"3246\":1}}],[\"文件io操作\",{\"1\":{\"3117\":1}}],[\"文件通道\",{\"1\":{\"2915\":1}}],[\"文件分隔符\",{\"1\":{\"2897\":1}}],[\"文件合并完成\",{\"1\":{\"2893\":1}}],[\"文件编码转换完成\",{\"1\":{\"2880\":1}}],[\"文件编码转换成功\",{\"1\":{\"2861\":1}}],[\"文件大小远小于缓冲区大小\",{\"1\":{\"2873\":1}}],[\"文件处理完成\",{\"1\":{\"2867\":1}}],[\"文件写入成功\",{\"1\":{\"2855\":1,\"2879\":1}}],[\"文件操作\",{\"1\":{\"2848\":1}}],[\"文件操作等\",{\"1\":{\"2847\":1}}],[\"文件路径\",{\"1\":{\"2927\":1}}],[\"文件路径问题\",{\"1\":{\"2836\":1}}],[\"文件路径+名称\",{\"1\":{\"1898\":1}}],[\"文件复制成功\",{\"1\":{\"2833\":1,\"2843\":1,\"2856\":1}}],[\"文件复制完成\",{\"1\":{\"1232\":1,\"2866\":1,\"2915\":1}}],[\"文件内容\",{\"1\":{\"2831\":1,\"2855\":1,\"2878\":1}}],[\"文件内容已放最下面\",{\"1\":{\"1577\":1,\"1578\":1}}],[\"文件流设计遵循了以下核心思想\",{\"1\":{\"2835\":1}}],[\"文件流根据处理数据的单位不同\",{\"1\":{\"2830\":1}}],[\"文件流的分类与特点\",{\"0\":{\"2830\":1}}],[\"文件流是java\",{\"1\":{\"2828\":1}}],[\"文件流\",{\"0\":{\"2827\":1}}],[\"文件读取失败\",{\"1\":{\"2037\":1}}],[\"文件里最长的那一行是多少个字\",{\"1\":{\"1860\":1}}],[\"文件目录基本信息\",{\"0\":{\"1859\":1},\"1\":{\"1835\":1}}],[\"文件会保存到当前的\",{\"1\":{\"1641\":1,\"1798\":1}}],[\"文件会越来越大\",{\"1\":{\"140\":1}}],[\"文件可执行\",{\"1\":{\"1637\":1}}],[\"文件默认放在\",{\"1\":{\"1586\":1}}],[\"文件日志\",{\"1\":{\"1564\":1}}],[\"文件最后添加一行\",{\"1\":{\"1513\":1}}],[\"文件更小\",{\"1\":{\"1488\":1}}],[\"文件夹打包\",{\"1\":{\"1898\":1}}],[\"文件夹下载\",{\"1\":{\"1898\":1}}],[\"文件夹占了多少空间\",{\"1\":{\"1859\":1}}],[\"文件夹中存在nginx文件\",{\"1\":{\"1416\":1}}],[\"文件夹的图片\",{\"1\":{\"30\":1}}],[\"文件中\",{\"1\":{\"1504\":1}}],[\"文件中填写连接es的用户凭证\",{\"1\":{\"1357\":1}}],[\"文件中的不正确信息\",{\"1\":{\"125\":1}}],[\"文件服务器\",{\"1\":{\"1238\":1,\"3130\":1}}],[\"文件未找到\",{\"1\":{\"1044\":2,\"2037\":1}}],[\"文件上传完成\",{\"1\":{\"1238\":1}}],[\"文件上传成功\",{\"1\":{\"434\":1}}],[\"文件上传大小限制配置\",{\"1\":{\"216\":1}}],[\"文件下载后缓存目录文件要删除\",{\"1\":{\"286\":1}}],[\"文件下载\",{\"1\":{\"286\":1}}],[\"文件名开头是\",{\"1\":{\"1873\":1}}],[\"文件名可采用日期加随机数命名以防重名覆盖文件\",{\"1\":{\"286\":1}}],[\"文件名\",{\"1\":{\"269\":1,\"1793\":2,\"3246\":4}}],[\"文件意外结束\",{\"1\":{\"125\":2}}],[\"文件\",{\"1\":{\"125\":4,\"1244\":1,\"1441\":1,\"1444\":1,\"1446\":1,\"1447\":2,\"1448\":1,\"1504\":1,\"3246\":2,\"3250\":1}}],[\"文件放置在一起使用相对路径进行引用\",{\"1\":{\"30\":1}}],[\"文件生成页面\",{\"1\":{\"11\":1}}],[\"文章标题列表\",{\"1\":{\"8\":1}}],[\"中读写数据\",{\"1\":{\"3116\":1}}],[\"中观\",{\"1\":{\"3111\":1}}],[\"中被广泛应用\",{\"1\":{\"3027\":1}}],[\"中限制反射权限\",{\"1\":{\"2974\":1}}],[\"中文内容测试\",{\"1\":{\"2837\":1}}],[\"中文无效\",{\"1\":{\"1872\":1}}],[\"中序遍历可得到有序序列\",{\"1\":{\"2663\":1}}],[\"中等\",{\"1\":{\"2125\":1,\"2276\":1,\"2310\":1}}],[\"中集成checkstyle\",{\"1\":{\"2018\":1}}],[\"中占用了多少内存\",{\"0\":{\"1809\":1}}],[\"中bind\",{\"1\":{\"1788\":1}}],[\"中security下面的\",{\"1\":{\"1780\":1}}],[\"中可以一键重启\",{\"1\":{\"1574\":1}}],[\"中索引数据\",{\"1\":{\"1507\":1}}],[\"中选择器的语法\",{\"1\":{\"1455\":1,\"1460\":1}}],[\"中将事件封装成了对应的方法\",{\"1\":{\"1450\":1,\"1454\":1}}],[\"中同样也可以使用\",{\"1\":{\"1438\":1}}],[\"中来使用\",{\"1\":{\"1438\":1}}],[\"中也可以配置安全管理\",{\"1\":{\"1383\":1}}],[\"中有哪些限制\",{\"0\":{\"1281\":1}}],[\"中央仓库的特点\",{\"0\":{\"976\":1}}],[\"中央仓库的地址\",{\"0\":{\"975\":1}}],[\"中央仓库是maven官方提供的远程仓库\",{\"1\":{\"974\":1}}],[\"中央仓库\",{\"0\":{\"974\":1},\"1\":{\"990\":1}}],[\"中央仓库和私服仓库等多种仓库类型\",{\"1\":{\"969\":1}}],[\"中断线程\",{\"1\":{\"610\":1}}],[\"中间插入\",{\"1\":{\"2503\":1}}],[\"中间操作不会立即执行\",{\"1\":{\"543\":1}}],[\"中间操作\",{\"1\":{\"543\":2,\"2511\":1}}],[\"中间的节点既是master\",{\"1\":{\"166\":1}}],[\"中不同类的条件判断方法\",{\"1\":{\"415\":1,\"459\":1}}],[\"中存储了所使用的加密算法和\",{\"1\":{\"303\":1}}],[\"中存在残缺的文件类型标题\",{\"1\":{\"125\":1}}],[\"中存在无效的timestamp值\",{\"1\":{\"125\":1}}],[\"中增加的\",{\"1\":{\"130\":1}}],[\"中删除\",{\"1\":{\"125\":1}}],[\"中\",{\"1\":{\"125\":1,\"129\":1,\"304\":1,\"1760\":1,\"1841\":1,\"2201\":1,\"2275\":1,\"2310\":2,\"2316\":2,\"2518\":2,\"2975\":1}}],[\"中没有与create\",{\"1\":{\"125\":1}}],[\"中找到记录\",{\"1\":{\"125\":1}}],[\"中使用\",{\"1\":{\"31\":1}}],[\"中的项目对应的是\",{\"1\":{\"1680\":1}}],[\"中的lt是英文\",{\"1\":{\"1472\":1}}],[\"中的ml是英文\",{\"1\":{\"1472\":1}}],[\"中的ajax03项目\",{\"1\":{\"1441\":1}}],[\"中的线程池有哪些类型\",{\"0\":{\"1135\":1}}],[\"中的并发容器有哪些\",{\"0\":{\"1132\":1}}],[\"中的原子类包括\",{\"1\":{\"1126\":1}}],[\"中的原子类有哪些\",{\"0\":{\"1126\":1}}],[\"中的类\",{\"1\":{\"742\":1}}],[\"中的条目\",{\"1\":{\"283\":1}}],[\"中的未知列\",{\"1\":{\"125\":1}}],[\"中的记录已改变\",{\"1\":{\"125\":1}}],[\"中的第一个\",{\"1\":{\"28\":1}}],[\"中的\",{\"1\":{\"15\":1,\"130\":1,\"303\":1,\"1450\":1,\"1454\":1}}],[\"中很重要的一个概念\",{\"1\":{\"13\":1}}],[\"中自定义它们\",{\"1\":{\"8\":1}}],[\"中设置页面信息\",{\"1\":{\"29\":1}}],[\"中设置页面标题\",{\"1\":{\"28\":1}}],[\"中设置\",{\"1\":{\"2\":1}}],[\"夜间模式按钮\",{\"1\":{\"8\":1}}],[\"主reactor线程组\",{\"1\":{\"3125\":1}}],[\"主reactor\",{\"1\":{\"3083\":1,\"3121\":1}}],[\"主reactor处理连接建立\",{\"1\":{\"1347\":1}}],[\"主reactor负责连接建立\",{\"1\":{\"1328\":1}}],[\"主动测试系统容错能力\",{\"1\":{\"3109\":1}}],[\"主动关闭方发送ack包确认\",{\"1\":{\"3070\":1}}],[\"主动关闭方发送fin包\",{\"1\":{\"3070\":1}}],[\"主动关闭连接一端还没有等到另一端反馈期间的状态\",{\"1\":{\"1881\":1}}],[\"主动方收到fin包\",{\"1\":{\"1311\":1}}],[\"主动方发送fin包\",{\"1\":{\"1311\":1}}],[\"主动向slave发送命令\",{\"1\":{\"166\":1}}],[\"主流框架\",{\"1\":{\"3043\":1}}],[\"主流ide\",{\"1\":{\"510\":1}}],[\"主流方式\",{\"1\":{\"165\":1}}],[\"主数据源\",{\"1\":{\"445\":1}}],[\"主启动类\",{\"1\":{\"392\":1}}],[\"主键id\",{\"1\":{\"232\":2,\"1684\":2,\"1687\":2}}],[\"主观下线与客观下线\",{\"1\":{\"182\":1}}],[\"主从reactor模型示意图\",{\"1\":{\"3121\":1}}],[\"主从reactor多线程模式\",{\"1\":{\"3083\":1}}],[\"主从reactor多线程模型\",{\"1\":{\"1328\":1,\"3091\":1,\"3121\":1}}],[\"主从有它很大的局限性\",{\"1\":{\"1763\":1}}],[\"主从模式是mongodb最早的部署架构\",{\"1\":{\"1763\":1}}],[\"主从的原理和mysql类似\",{\"1\":{\"1760\":1}}],[\"主从和副本集\",{\"1\":{\"1759\":1}}],[\"主从断开的秒数\",{\"1\":{\"193\":1}}],[\"主从断开连接\",{\"1\":{\"165\":1}}],[\"主从之间数据吞吐量较大\",{\"1\":{\"189\":1}}],[\"主从服务器的复制偏移量\",{\"1\":{\"167\":1}}],[\"主从连接成功\",{\"1\":{\"165\":1}}],[\"主从复制常见问题\",{\"0\":{\"170\":1}}],[\"主从复制的工作流程\",{\"0\":{\"164\":1}}],[\"主从复制的作用\",{\"0\":{\"162\":1}}],[\"主从复制过程大体可以分为3个阶段\",{\"1\":{\"163\":1}}],[\"主从复制工作流程\",{\"0\":{\"163\":1}}],[\"主从复制即将master中的数据即时\",{\"1\":{\"161\":1}}],[\"主从复制概念\",{\"0\":{\"161\":1}}],[\"主从复制简介\",{\"0\":{\"159\":1}}],[\"主从复制\",{\"0\":{\"158\":1,\"1760\":1}}],[\"主库主客户端\",{\"1\":{\"161\":1}}],[\"主服务器数据库的每次操作都会记录在其二进制文件mysql\",{\"1\":{\"1760\":1}}],[\"主服务器的复制积压缓冲区\",{\"1\":{\"167\":1}}],[\"主服务器\",{\"1\":{\"161\":1}}],[\"主机时钟同步\",{\"0\":{\"3269\":1}}],[\"主机安全设置\",{\"0\":{\"3268\":1}}],[\"主机名与ip地址解析\",{\"0\":{\"3267\":1}}],[\"主机名\",{\"0\":{\"3265\":1}}],[\"主机池转变为单个虚拟\",{\"1\":{\"3250\":1}}],[\"主机ip也会变化\",{\"1\":{\"3256\":1}}],[\"主机ip\",{\"1\":{\"1764\":3}}],[\"主机\",{\"1\":{\"125\":4,\"3250\":1}}],[\"主节点能操作\",{\"1\":{\"1764\":1}}],[\"主节点启动监听\",{\"1\":{\"1764\":1}}],[\"主节点负责接收写的操作\",{\"1\":{\"1764\":1}}],[\"主节点挂了不能自动切换连接\",{\"1\":{\"1763\":1}}],[\"主节点记录在其上的所有操作oplog\",{\"1\":{\"1760\":1}}],[\"主节点点安装\",{\"1\":{\"1677\":1}}],[\"主节点上修改kk配置文件\",{\"1\":{\"1658\":1}}],[\"主节点\",{\"1\":{\"69\":1,\"161\":1,\"1763\":1}}],[\"主题名\",{\"1\":{\"1831\":1}}],[\"主题扩展了更多\",{\"1\":{\"16\":1}}],[\"主题扩展\",{\"0\":{\"16\":1}}],[\"主题也带有以下元素\",{\"1\":{\"8\":1}}],[\"主要功能包括\",{\"1\":{\"3183\":1}}],[\"主要功能与配置演示\",{\"0\":{\"3\":1}}],[\"主要体现在\",{\"1\":{\"3150\":1}}],[\"主要通过四个算法实现\",{\"1\":{\"3075\":1}}],[\"主要通过stringbuilder和stringbuffer类实现\",{\"1\":{\"2259\":1}}],[\"主要基于tcp\",{\"1\":{\"3055\":1}}],[\"主要基于通道\",{\"1\":{\"2911\":1}}],[\"主要原因有两点\",{\"1\":{\"2994\":1}}],[\"主要原因有以下几点\",{\"1\":{\"1264\":1}}],[\"主要用途\",{\"1\":{\"2897\":1}}],[\"主要用于读取操作\",{\"1\":{\"3038\":1}}],[\"主要用于处理字符输出\",{\"1\":{\"2903\":1}}],[\"主要用于处理字节输出\",{\"1\":{\"2902\":1}}],[\"主要用于处理大量的数据\",{\"1\":{\"75\":1}}],[\"主要用于后端每台服务器性能不均衡的情况下\",{\"1\":{\"1405\":1}}],[\"主要用于提供高可用性和数据冗余\",{\"1\":{\"75\":1}}],[\"主要出于代码可读性和结构化编程考虑\",{\"1\":{\"2814\":1}}],[\"主要实现类包括arraydeque\",{\"1\":{\"2547\":1}}],[\"主要实现类对比\",{\"0\":{\"2316\":1,\"2363\":1,\"2400\":1,\"2461\":1}}],[\"主要4步\",{\"1\":{\"1704\":1}}],[\"主要修改其中的\",{\"1\":{\"1698\":1}}],[\"主要影响release的问题大部分都是打包时漏了一些东西\",{\"1\":{\"1004\":1}}],[\"主要负责路由功能\",{\"1\":{\"3220\":1}}],[\"主要负责\",{\"1\":{\"759\":1}}],[\"主要分为三种变体\",{\"1\":{\"3121\":1}}],[\"主要分为\",{\"1\":{\"725\":1}}],[\"主要包括printstream和printwriter两个类\",{\"1\":{\"2899\":1}}],[\"主要包括inputstreamreader和outputstreamwriter两个类\",{\"1\":{\"2875\":1}}],[\"主要包括fileinputstream\",{\"1\":{\"2828\":1}}],[\"主要包括\",{\"1\":{\"557\":1,\"1281\":1}}],[\"主要执行的方法是加载扫描到的包中查找一个\",{\"1\":{\"463\":1}}],[\"主要是hostname\",{\"1\":{\"3263\":1}}],[\"主要是为了避免菱形继承问题\",{\"1\":{\"2753\":1}}],[\"主要是\",{\"1\":{\"461\":1}}],[\"主要是因为内存成本太高且\",{\"1\":{\"128\":1}}],[\"主要是单线程事件循环和\",{\"1\":{\"128\":1}}],[\"主要从\",{\"1\":{\"11\":1}}],[\"页面错误次数\",{\"1\":{\"1882\":1}}],[\"页面\",{\"1\":{\"1440\":1,\"1443\":1,\"1444\":1}}],[\"页面都会被转换为一个\",{\"1\":{\"31\":1}}],[\"页面内容\",{\"0\":{\"30\":1}}],[\"页面标题\",{\"0\":{\"28\":1},\"1\":{\"28\":1}}],[\"页面配置\",{\"0\":{\"27\":1},\"1\":{\"29\":1},\"2\":{\"33\":1}}],[\"页面引入配置\",{\"1\":{\"13\":1}}],[\"页面信息\",{\"0\":{\"29\":1},\"1\":{\"5\":1}}],[\"页脚\",{\"1\":{\"5\":1,\"8\":1}}],[\"贡献者\",{\"1\":{\"5\":1,\"8\":1}}],[\"侧边栏\",{\"1\":{\"5\":1,\"8\":1}}],[\"在原harbor安装目录下执行\",{\"1\":{\"3262\":1}}],[\"在容器中就可以使用\",{\"1\":{\"3257\":1}}],[\"在18\",{\"1\":{\"3256\":1}}],[\"在我们安装compose之前\",{\"1\":{\"3248\":1}}],[\"在我们数据库方面\",{\"1\":{\"114\":1}}],[\"在windos中是无法查看到这个虚拟路径的\",{\"1\":{\"3246\":1}}],[\"在一个服务上执行一个命令\",{\"1\":{\"3246\":1}}],[\"在一个空目录下\",{\"1\":{\"3246\":1}}],[\"在一个较短的时间内\",{\"1\":{\"190\":1}}],[\"在宿主机上打开80端口并把端口转发到宿主机上\",{\"1\":{\"3245\":1}}],[\"在本地查找是否有该镜像\",{\"1\":{\"3245\":1}}],[\"在本包和子类可见\",{\"1\":{\"2765\":1}}],[\"在注册即将过期前重新发送register请求\",{\"1\":{\"3199\":1}}],[\"在分布式系统架构中\",{\"1\":{\"3093\":1}}],[\"在分区函数中\",{\"1\":{\"125\":2}}],[\"在分区\",{\"1\":{\"125\":1}}],[\"在分区定义中\",{\"1\":{\"125\":1}}],[\"在没有泛型之前\",{\"1\":{\"3017\":1}}],[\"在没有与语句相关的结果集时试图读取行\",{\"1\":{\"125\":1}}],[\"在关键方法中添加调用者检查\",{\"1\":{\"3011\":1}}],[\"在应用启动时预加载常用的反射对象\",{\"1\":{\"3011\":1}}],[\"在bff层聚合多个微服务的异常信息\",{\"1\":{\"2960\":1}}],[\"在binlog索引中未发现目标日志\",{\"1\":{\"125\":1}}],[\"在异常中包含追踪id\",{\"1\":{\"2960\":1}}],[\"在微服务架构中\",{\"1\":{\"2960\":2,\"3111\":1}}],[\"在微服务架构设计中\",{\"1\":{\"2014\":1}}],[\"在可能出错的地方进行预判和保护\",{\"1\":{\"2958\":1}}],[\"在可能抛出异常前进行条件检查\",{\"1\":{\"2942\":1}}],[\"在批量操作中\",{\"1\":{\"2953\":1}}],[\"在某些jdk版本中存在selector空轮询bug\",{\"1\":{\"2920\":1}}],[\"在某些场景下性能可能不如专门优化的第三方库\",{\"1\":{\"494\":1}}],[\"在此输入流中标记当前位置\",{\"1\":{\"2841\":1,\"2853\":1}}],[\"在同一类中\",{\"1\":{\"2786\":1}}],[\"在同一个类中\",{\"1\":{\"2741\":1}}],[\"在代码块中定义\",{\"1\":{\"2767\":1}}],[\"在代码中读取配置的方式\",{\"1\":{\"407\":1}}],[\"在方法或代码块中定义\",{\"1\":{\"2767\":1}}],[\"在对象创建时初始化\",{\"1\":{\"2767\":1}}],[\"在类加载时初始化\",{\"1\":{\"2767\":1}}],[\"在缓存实现中\",{\"1\":{\"2698\":1}}],[\"在迭代过程中\",{\"1\":{\"2694\":1}}],[\"在迭代过程中修改集合\",{\"1\":{\"2448\":1,\"2507\":1}}],[\"在迭代过程中修改了集合结构\",{\"1\":{\"2340\":1}}],[\"在以下几种情况下会触发过期条目的清理\",{\"1\":{\"2688\":1}}],[\"在以下情况可能需要设置为不同值\",{\"1\":{\"818\":1,\"852\":1,\"886\":1,\"920\":1}}],[\"在每次操作前会清理过期条目\",{\"1\":{\"2687\":1}}],[\"在hashmap的基础上通过维护一个双向链表来保持元素的插入顺序或访问顺序\",{\"1\":{\"2619\":1}}],[\"在harbor目录中执行\",{\"1\":{\"1630\":1}}],[\"在保证线程安全的同时提供了较高的并发性能\",{\"1\":{\"2516\":1}}],[\"在保证功能完整性的同时\",{\"1\":{\"278\":1}}],[\"在性能和适用场景上有显著差异\",{\"1\":{\"2511\":1}}],[\"在性能敏感的场景中\",{\"1\":{\"1276\":1}}],[\"在链表尾部添加元素\",{\"1\":{\"2497\":1}}],[\"在链表头部添加元素\",{\"1\":{\"2497\":1}}],[\"在链表末尾添加指定元素\",{\"1\":{\"2494\":1}}],[\"在index位置插入新元素\",{\"1\":{\"2437\":1}}],[\"在指定位置插入元素\",{\"1\":{\"2437\":1,\"2494\":1}}],[\"在指定位置添加元素\",{\"1\":{\"2324\":1}}],[\"在并发环境下可能导致死循环或数据不一致\",{\"1\":{\"2426\":1}}],[\"在并发编程中\",{\"1\":{\"1254\":1}}],[\"在多线程环境下\",{\"1\":{\"3223\":1}}],[\"在多线程环境下进行并发修改可能导致数据不一致或concurrentmodificationexception异常\",{\"1\":{\"2513\":1}}],[\"在多线程环境下使用非线程安全的队列\",{\"1\":{\"2478\":1}}],[\"在多线程环境下使用非线程安全的map\",{\"1\":{\"2424\":1}}],[\"在多线程环境使用stringbuilder导致数据错乱\",{\"1\":{\"2279\":1}}],[\"在遍历期间对集合进行复制\",{\"1\":{\"2382\":1}}],[\"在真实世界的数据中\",{\"1\":{\"2357\":1}}],[\"在已知元素数量时\",{\"1\":{\"2355\":1}}],[\"在尾部添加元素\",{\"1\":{\"2319\":1}}],[\"在头部添加元素\",{\"1\":{\"2319\":1}}],[\"在堆中创建新对象\",{\"1\":{\"2303\":1}}],[\"在索引5处插入逗号\",{\"1\":{\"2265\":1}}],[\"在字符串常量池创建\",{\"1\":{\"2243\":1}}],[\"在编译期计算结果并合并相同字符串\",{\"1\":{\"2249\":1}}],[\"在编译期确定其值\",{\"1\":{\"2238\":1}}],[\"在编译期检查类名\",{\"1\":{\"1087\":1}}],[\"在编译期检查代码规范\",{\"0\":{\"1087\":1}}],[\"在金融计算中\",{\"1\":{\"2105\":1}}],[\"在值为空时调用\",{\"1\":{\"2053\":1}}],[\"在排查性能问题时\",{\"1\":{\"1886\":1}}],[\"在vim中通过如下设置文件编码和文件格式\",{\"1\":{\"1869\":1}}],[\"在各个用户的\",{\"1\":{\"1842\":1}}],[\"在网上查了一些相关解决方案\",{\"1\":{\"1788\":1}}],[\"在目录下找后缀是\",{\"1\":{\"1873\":1}}],[\"在目录\",{\"1\":{\"1786\":1,\"1787\":1}}],[\"在目标服务器保存密码\",{\"1\":{\"1503\":1}}],[\"在这里插入图片描述\",{\"1\":{\"1782\":1,\"1783\":1,\"1784\":1,\"1785\":1,\"1786\":3}}],[\"在文件最下方添加\",{\"1\":{\"1771\":1}}],[\"在子节点\",{\"1\":{\"1763\":1}}],[\"在子程序\",{\"1\":{\"125\":1}}],[\"在主节点挂了后\",{\"1\":{\"1763\":1}}],[\"在主服务器\",{\"1\":{\"125\":1}}],[\"在默认情况下\",{\"1\":{\"1759\":1}}],[\"在数据库安全的生命周期中\",{\"1\":{\"1738\":1}}],[\"在数据库服务器端可以通过抓包的方式获取数据\",{\"1\":{\"114\":1}}],[\"在根的usr文件夹里面新建一个java文件夹\",{\"0\":{\"1728\":1}}],[\"在从节点复制member\",{\"1\":{\"1677\":1}}],[\"在构建制品时项目pom文件中镜像源地址仓库名是否在harbor中有创建\",{\"1\":{\"1654\":1,\"1704\":1}}],[\"在构造方法中初始化\",{\"1\":{\"1053\":1}}],[\"在构造方法中初始化final变量\",{\"1\":{\"1038\":1}}],[\"在将镜像打包导出到本地\",{\"1\":{\"1641\":1}}],[\"在安装前可以先启用部分插件\",{\"1\":{\"1632\":1}}],[\"在安全管理器\",{\"1\":{\"1271\":1,\"2974\":1}}],[\"在kubesphere面板服务里查看nacos的外放访问端口\",{\"1\":{\"1696\":1}}],[\"在kubesphere上删除对应阻塞的容器重新安装\",{\"1\":{\"1677\":1}}],[\"在k8s安装完成后发现无法拉镜像\",{\"1\":{\"1632\":1}}],[\"在kibana6\",{\"1\":{\"1520\":1}}],[\"在机器硬盘不够大时\",{\"1\":{\"1632\":1}}],[\"在足够安全的外部防护下\",{\"1\":{\"1610\":1,\"1672\":1}}],[\"在~\",{\"1\":{\"1595\":1,\"3250\":1}}],[\"在docker中创建并启动一个oracle\",{\"1\":{\"1569\":1}}],[\"在default或on\",{\"1\":{\"125\":1}}],[\"在poi导出业务中存在报这种错误\",{\"1\":{\"1557\":1}}],[\"在pom\",{\"1\":{\"456\":1,\"1005\":1}}],[\"在项目接入中遇到问题二\",{\"1\":{\"1549\":1}}],[\"在项目选择上\",{\"1\":{\"533\":1}}],[\"在api网关层对异常信息进行过滤和脱敏\",{\"1\":{\"2960\":1}}],[\"在apm工具中添加npe异常的专项监控\",{\"1\":{\"522\":1}}],[\"在accessorder=true模式下\",{\"1\":{\"2639\":1}}],[\"在arm运行时上述kafka方式运行正常但无法连接至es\",{\"1\":{\"1535\":1}}],[\"在有网环境下下载镜像\",{\"1\":{\"1507\":1}}],[\"在有安全管理器的环境中\",{\"1\":{\"1275\":1}}],[\"在elasticsearch中\",{\"1\":{\"1507\":1}}],[\"在命令行输入\",{\"1\":{\"1504\":1}}],[\"在源服务器上安装好rsync后\",{\"1\":{\"1503\":1}}],[\"在线游戏等\",{\"1\":{\"3062\":1}}],[\"在线｜离线\",{\"0\":{\"1625\":1}}],[\"在线下载\",{\"1\":{\"1488\":1}}],[\"在线安装包下载\",{\"1\":{\"1626\":1,\"1715\":1}}],[\"在线安装docker\",{\"0\":{\"1611\":1,\"1742\":1,\"1747\":1}}],[\"在线安装\",{\"0\":{\"1632\":1,\"1677\":1},\"1\":{\"1420\":1,\"1715\":1}}],[\"在线启动\",{\"1\":{\"1370\":1}}],[\"在启动mongod时指定logpath参数即可\",{\"1\":{\"1739\":1}}],[\"在启动nginx\",{\"1\":{\"1417\":1}}],[\"在启动类上\",{\"1\":{\"419\":1,\"463\":1}}],[\"在完成一次系统调用后可以确定这个值\",{\"1\":{\"1412\":1}}],[\"在被访问的概率越大\",{\"1\":{\"1405\":1}}],[\"在企业中常用动静分离技术\",{\"1\":{\"1401\":1}}],[\"在normal模式下\",{\"1\":{\"1858\":1}}],[\"在nignx的conf目录\",{\"1\":{\"1426\":1}}],[\"在nio中\",{\"1\":{\"1330\":1}}],[\"在nginx下\",{\"1\":{\"1418\":1}}],[\"在nginx\",{\"1\":{\"1395\":1}}],[\"在后面的提示中配置密码\",{\"1\":{\"1354\":1}}],[\"在哪些场景下适合使用netty\",{\"1\":{\"1347\":1}}],[\"在使用第三方库时\",{\"1\":{\"1277\":1}}],[\"在使用反射的同时\",{\"1\":{\"3011\":1}}],[\"在使用反射时\",{\"1\":{\"1275\":1}}],[\"在使用反射或动态代理的场景中\",{\"1\":{\"519\":1}}],[\"在大多数业务场景中\",{\"1\":{\"2354\":1,\"2511\":1}}],[\"在大数据量和频繁修改场景下使用copyonwritearraylist\",{\"1\":{\"2536\":1}}],[\"在大数据量数组打印时\",{\"1\":{\"2233\":1}}],[\"在大数据量传输场景下性能更好\",{\"1\":{\"1238\":1}}],[\"在大型系统设计中\",{\"1\":{\"2717\":1}}],[\"在大型分布式团队中\",{\"1\":{\"2029\":1}}],[\"在大型项目迁移到java\",{\"0\":{\"522\":1}}],[\"在高并发网络编程中\",{\"1\":{\"1347\":1}}],[\"在高并发小数据量场景下性能优异\",{\"1\":{\"1238\":1}}],[\"在高并发场景下\",{\"1\":{\"679\":1,\"2041\":2,\"3130\":1}}],[\"在新项目中优先使用jdk\",{\"1\":{\"1198\":1}}],[\"在json文件或者bson文件中\",{\"1\":{\"1738\":1}}],[\"在jdk9及以上版本中\",{\"1\":{\"2281\":1}}],[\"在jdk\",{\"1\":{\"1197\":1,\"3010\":1,\"3011\":1}}],[\"在java安全编程中\",{\"1\":{\"3011\":1}}],[\"在java开发中\",{\"1\":{\"2209\":1}}],[\"在java中\",{\"1\":{\"596\":1,\"1205\":1,\"1206\":1,\"1216\":1,\"2676\":1,\"2759\":1,\"3204\":1}}],[\"在java生态系统中开发时\",{\"1\":{\"565\":1}}],[\"在java\",{\"1\":{\"499\":1,\"1264\":1,\"2921\":1}}],[\"在sip消息中正确设置contact头和via头\",{\"1\":{\"1104\":1}}],[\"在slave初次连接master后\",{\"1\":{\"166\":1}}],[\"在面试中常涉及协议原理\",{\"1\":{\"1089\":1}}],[\"在什么场景下应该选择linkedhashset\",{\"1\":{\"2643\":1}}],[\"在什么场景下应该选择使用aio\",{\"1\":{\"1238\":1}}],[\"在什么场景下应该选择注解\",{\"0\":{\"1086\":1}}],[\"在什么情况下应该使用泛型方法而非泛型类\",{\"1\":{\"3029\":1}}],[\"在什么情况下应该使用哪个\",{\"1\":{\"2885\":1}}],[\"在什么情况下应该使用乐观锁\",{\"1\":{\"602\":1}}],[\"在什么情况下可能需要设置为不同值\",{\"1\":{\"818\":1,\"852\":1,\"886\":1,\"920\":1}}],[\"在什么情况下cas性能不如锁机制\",{\"1\":{\"686\":1}}],[\"在循环中创建异常对象会导致频繁的堆栈跟踪生成和内存分配\",{\"1\":{\"2942\":1}}],[\"在循环中频繁调用flush\",{\"1\":{\"2873\":1}}],[\"在循环中使用+拼接字符串常量\",{\"1\":{\"2257\":1}}],[\"在循环\",{\"1\":{\"1083\":1}}],[\"在引入新的依赖前\",{\"1\":{\"1029\":1,\"1030\":1}}],[\"在低并发场景下\",{\"1\":{\"685\":1}}],[\"在操作hashmap前后手动加锁和解锁\",{\"1\":{\"1197\":1}}],[\"在操作前先获取锁\",{\"1\":{\"602\":1}}],[\"在操作过程中服务器关闭\",{\"1\":{\"125\":1}}],[\"在单线程环境下建议使用arraydeque替代\",{\"1\":{\"2561\":1}}],[\"在单核cpu中\",{\"1\":{\"588\":1}}],[\"在单元测试中故意引入空值场景\",{\"1\":{\"522\":1}}],[\"在父pom中使用dependencymanagement统一版本\",{\"1\":{\"567\":1}}],[\"在选择io模型时\",{\"1\":{\"1238\":1}}],[\"在选择时\",{\"1\":{\"494\":1}}],[\"在选举的时候每一个人手里都有一票\",{\"1\":{\"182\":1}}],[\"在会满足相应\",{\"1\":{\"463\":1}}],[\"在连接点抛出异常之后执行的通知\",{\"1\":{\"336\":1}}],[\"在连接点正常执行之后执行的通知\",{\"1\":{\"336\":1}}],[\"在连接点执行之后执行的通知\",{\"1\":{\"336\":1}}],[\"在连接点执行之前执行的通知\",{\"1\":{\"336\":1}}],[\"在实践中使用反射时\",{\"1\":{\"3010\":1}}],[\"在实践中进行一些改进\",{\"1\":{\"306\":1}}],[\"在实际应用中\",{\"1\":{\"3002\":1}}],[\"在实际开发中有着广泛的应用场景\",{\"1\":{\"2996\":1}}],[\"在实际开发中如何选择\",{\"1\":{\"2909\":1}}],[\"在实际开发中\",{\"1\":{\"2356\":1}}],[\"在实际开发和面试中\",{\"1\":{\"1187\":1}}],[\"在实际项目中如何选择使用虚拟线程还是异步编程模型\",{\"1\":{\"533\":1}}],[\"在实际使用中\",{\"1\":{\"212\":1}}],[\"在到期之前就会始终有效\",{\"1\":{\"305\":1}}],[\"在生产环境中配置适当的安全策略\",{\"1\":{\"3010\":1}}],[\"在生产环境中\",{\"1\":{\"211\":1}}],[\"在列表末尾添加指定元素\",{\"1\":{\"2437\":1}}],[\"在列表尾部移除并返回元素\",{\"1\":{\"202\":1}}],[\"在列表尾部添加元素\",{\"1\":{\"202\":1}}],[\"在列表头部移除并返回元素\",{\"1\":{\"202\":1}}],[\"在列表头部添加元素\",{\"1\":{\"202\":1}}],[\"在购物节期间\",{\"1\":{\"191\":1}}],[\"在内存受限情况下\",{\"1\":{\"2716\":1}}],[\"在内存占用与cpu占用之间寻找一种平衡\",{\"1\":{\"150\":1}}],[\"在内网里边告诉大家我要当选举人\",{\"1\":{\"182\":1}}],[\"在执行配置命令\",{\"1\":{\"1764\":1}}],[\"在执行每一个命令前\",{\"1\":{\"156\":1}}],[\"在执行命令前进行备份\",{\"1\":{\"95\":1}}],[\"在最终进行过期处理的时候\",{\"1\":{\"148\":1}}],[\"在不同的场景下使用不同的删除方式会有不同效果\",{\"1\":{\"147\":1}}],[\"在系统突然宕机的情况下丢失1秒内的数据\",{\"1\":{\"140\":1}}],[\"在特定的时间将保存的数据进行恢复的工作机制称为持久化\",{\"1\":{\"137\":1}}],[\"在查询方面提供更高的效率\",{\"1\":{\"135\":1}}],[\"在查询中\",{\"1\":{\"125\":1}}],[\"在该版本的句柄中\",{\"1\":{\"125\":1}}],[\"在该mysql版本中\",{\"1\":{\"125\":1}}],[\"在该子程序的在其声明没有deterministic\",{\"1\":{\"125\":1}}],[\"在其声明没有no\",{\"1\":{\"125\":1}}],[\"在其题头中有未知的类型\",{\"1\":{\"125\":1}}],[\"在相同块中声明了重复句柄\",{\"1\":{\"125\":1}}],[\"在事务分支中出现致命错误\",{\"1\":{\"125\":1}}],[\"在日志清除过程中出现未知错误\",{\"1\":{\"125\":1}}],[\"在日志清除过程中出现致命错误\",{\"1\":{\"125\":1}}],[\"在存储子程序句柄中不允许goto\",{\"1\":{\"125\":1}}],[\"在存储函数或触发程序中\",{\"1\":{\"125\":2}}],[\"在存储程序中不允许\",{\"1\":{\"125\":1}}],[\"在full\",{\"1\":{\"783\":1}}],[\"在function\",{\"1\":{\"125\":1}}],[\"在flush\",{\"1\":{\"125\":1}}],[\"在预处理语句协议中\",{\"1\":{\"125\":1}}],[\"在\",{\"0\":{\"1809\":1},\"1\":{\"125\":3,\"306\":1,\"807\":2,\"841\":2,\"875\":2,\"909\":2,\"1357\":1,\"1365\":1,\"1438\":1,\"1450\":1,\"1454\":1,\"1471\":1,\"1574\":1,\"1590\":1,\"1595\":1,\"3246\":4,\"3250\":1,\"3256\":1}}],[\"在优化期间简化了选择\",{\"1\":{\"125\":1}}],[\"在语句中使用了两次选项\",{\"1\":{\"125\":1}}],[\"在run\",{\"1\":{\"3246\":1}}],[\"在root\",{\"1\":{\"1773\":1}}],[\"在rollback期间出现错误\",{\"1\":{\"125\":1}}],[\"在redis根目录下找到redis\",{\"1\":{\"219\":1}}],[\"在redis中\",{\"1\":{\"148\":1}}],[\"在read\",{\"1\":{\"125\":1}}],[\"在channelpipeline中添加\",{\"1\":{\"3126\":1}}],[\"在checkpoint期间出现错误\",{\"1\":{\"125\":1}}],[\"在contact头域中使用公网地址\",{\"1\":{\"3224\":2}}],[\"在collection接口基础上扩展了队列特有操作\",{\"1\":{\"2470\":1}}],[\"在commit期间出现错误\",{\"1\":{\"125\":1}}],[\"在centos7环境中从5\",{\"1\":{\"118\":1}}],[\"在未安装docker时\",{\"1\":{\"1632\":1}}],[\"在未事先获取行的情况下试图读取列\",{\"1\":{\"125\":1}}],[\"在未指定键长度的键说明中使用了blob\",{\"1\":{\"125\":1}}],[\"在未来的发展过程中不断的巩固\",{\"1\":{\"0\":1}}],[\"在表达式a\",{\"1\":{\"2119\":2}}],[\"在表上定义了外键约束时\",{\"1\":{\"125\":1}}],[\"在表中\",{\"1\":{\"125\":1}}],[\"在表中未发现分区函数字段列表中的字段\",{\"1\":{\"125\":1}}],[\"在表中不存在\",{\"1\":{\"125\":1}}],[\"在表\",{\"1\":{\"125\":4}}],[\"在outer\",{\"1\":{\"125\":1}}],[\"在行\",{\"1\":{\"125\":3}}],[\"在客户端上对数据库做插入数据操作\",{\"1\":{\"114\":1}}],[\"在module\",{\"1\":{\"2994\":1}}],[\"在mongod\",{\"1\":{\"1764\":1}}],[\"在mongodb中\",{\"1\":{\"54\":1}}],[\"在mac下使用dos2unix进行文件格式化\",{\"1\":{\"1869\":1}}],[\"在macos上切换node\",{\"1\":{\"266\":1}}],[\"在maven中\",{\"1\":{\"924\":1}}],[\"在master关闭时执行命令shutdown\",{\"1\":{\"171\":1}}],[\"在master1上创建数据库\",{\"1\":{\"104\":1,\"112\":1}}],[\"在mysql错误日志中可找到更多错误消息\",{\"1\":{\"125\":1}}],[\"在mysql5\",{\"1\":{\"115\":1,\"121\":1}}],[\"在mysql服务器端通过tshark抓包的方式来模拟窃取数据\",{\"1\":{\"114\":1}}],[\"在mysqld里添加一下属性\",{\"1\":{\"98\":1,\"106\":1}}],[\"在测试环境中验证命令的效果\",{\"1\":{\"95\":1}}],[\"在聚合操作中\",{\"1\":{\"64\":1}}],[\"在页面禁用功能与布局\",{\"1\":{\"5\":1}}],[\"你好\",{\"1\":{\"2903\":1}}],[\"你可去阿里弄个自己的\",{\"1\":{\"1669\":1}}],[\"你可以看到如下变量值\",{\"1\":{\"115\":1}}],[\"你可以将图片和\",{\"1\":{\"30\":1}}],[\"你可以自由在这里书写你的\",{\"1\":{\"30\":1}}],[\"你可以在\",{\"1\":{\"28\":1,\"29\":1}}],[\"你可以在主题选项和页面的\",{\"1\":{\"8\":1}}],[\"你可以使用它轻松生成文档或博客站点\",{\"1\":{\"11\":1}}],[\"你可以通过设置页面的\",{\"1\":{\"5\":1}}],[\"你输入完成啦\",{\"1\":{\"1450\":1}}],[\"你要输入数据啦\",{\"1\":{\"1450\":1}}],[\"你上传的ssl证书的key文件路径\",{\"1\":{\"1417\":1}}],[\"你上传的ssl证书的pem文件路径\",{\"1\":{\"1417\":1}}],[\"你上传的是snapshot仓库\",{\"1\":{\"999\":1}}],[\"你自己的\",{\"1\":{\"1416\":2}}],[\"你会收到一份邮件\",{\"1\":{\"1004\":1}}],[\"你细想\",{\"1\":{\"304\":1}}],[\"你想想看\",{\"1\":{\"304\":1}}],[\"你的账户名\",{\"1\":{\"1795\":1}}],[\"你的域名\",{\"1\":{\"1417\":1}}],[\"你的\",{\"1\":{\"161\":1}}],[\"你说数据还会丢吗\",{\"1\":{\"137\":1}}],[\"你有什么样的方式呢\",{\"1\":{\"137\":1}}],[\"你有电池\",{\"1\":{\"136\":1}}],[\"你平常操作的所有信息都是在内存中的\",{\"1\":{\"136\":1}}],[\"你现在不能运行该命令\",{\"1\":{\"125\":1}}],[\"你试图引用的外部数据源不存在\",{\"1\":{\"125\":1}}],[\"你没有super权限\",{\"1\":{\"125\":1}}],[\"你或许打算使用不太安全的log\",{\"1\":{\"125\":2}}],[\"你正在使用安全更新模式\",{\"1\":{\"125\":1}}],[\"你正在已匿名用户身份使用mysql\",{\"1\":{\"125\":1}}],[\"你不是线程\",{\"1\":{\"125\":1}}],[\"你也可以创建并引入你自己的组件\",{\"1\":{\"31\":1}}],[\"你需要创建并编写\",{\"1\":{\"11\":1}}],[\"你应该在页面\",{\"1\":{\"2\":1}}],[\"档案主页\",{\"1\":{\"2\":1}}],[\"和目标容器通信\",{\"1\":{\"3257\":1}}],[\"和entrypoint配合使用\",{\"1\":{\"3246\":1}}],[\"和equals\",{\"1\":{\"2393\":1,\"2422\":1,\"2605\":1,\"2666\":1}}],[\"和响应消息\",{\"1\":{\"3179\":1}}],[\"和clear\",{\"1\":{\"3090\":1}}],[\"和conf文件中要保持一致\",{\"1\":{\"1764\":1}}],[\"和concurrenthashmap都采用了无锁设计\",{\"1\":{\"646\":1}}],[\"和应用层\",{\"1\":{\"3059\":1}}],[\"和下界通配符\",{\"1\":{\"3029\":1}}],[\"和非受检异常\",{\"1\":{\"2923\":1}}],[\"和内存映射文件等高级特性\",{\"1\":{\"2911\":1}}],[\"和内容比较\",{\"1\":{\"2247\":1}}],[\"和缓冲区\",{\"1\":{\"2911\":1}}],[\"和println\",{\"1\":{\"2899\":1,\"2901\":1}}],[\"和write\",{\"1\":{\"2833\":1,\"2848\":2,\"2909\":1,\"2920\":1}}],[\"和wait\",{\"1\":{\"618\":1}}],[\"和静态方法\",{\"1\":{\"2780\":1}}],[\"和初始化\",{\"1\":{\"2760\":1}}],[\"和初始化三个阶段\",{\"1\":{\"1146\":1}}],[\"和方法\",{\"1\":{\"2758\":1}}],[\"和行为\",{\"1\":{\"2732\":1}}],[\"和多态\",{\"1\":{\"2730\":1}}],[\"和虚引用\",{\"1\":{\"2676\":1}}],[\"和afternodeinsertion\",{\"1\":{\"2628\":1}}],[\"和addfirst\",{\"1\":{\"2511\":1}}],[\"和arrays\",{\"1\":{\"2233\":1}}],[\"和reset\",{\"1\":{\"2841\":1,\"2849\":1,\"2853\":1}}],[\"和resume\",{\"1\":{\"617\":1}}],[\"和readobject\",{\"1\":{\"2641\":1}}],[\"和remove\",{\"1\":{\"2345\":1}}],[\"和deeptostring\",{\"1\":{\"2215\":1}}],[\"和beta\",{\"1\":{\"1660\":1}}],[\"和transferfrom\",{\"1\":{\"1232\":1}}],[\"和媒体流\",{\"1\":{\"1105\":1}}],[\"和卸载\",{\"1\":{\"741\":1}}],[\"和老年代\",{\"1\":{\"707\":1}}],[\"和堆\",{\"1\":{\"697\":1}}],[\"和垃圾回收器\",{\"1\":{\"690\":1}}],[\"和新值\",{\"1\":{\"673\":1}}],[\"和system\",{\"1\":{\"2909\":1}}],[\"和stringbuffer\",{\"1\":{\"2261\":1}}],[\"和starttransaction\",{\"1\":{\"71\":1}}],[\"和submit\",{\"1\":{\"632\":1}}],[\"和notify\",{\"1\":{\"618\":1}}],[\"和终止\",{\"1\":{\"605\":1}}],[\"和文档支持\",{\"1\":{\"570\":1}}],[\"和控制器\",{\"1\":{\"387\":1}}],[\"和集成支持\",{\"1\":{\"371\":1}}],[\"和串行化\",{\"1\":{\"348\":1}}],[\"和持久性\",{\"1\":{\"348\":1}}],[\"和依赖注入\",{\"1\":{\"317\":1,\"319\":1}}],[\"和面向切面编程\",{\"1\":{\"309\":1}}],[\"和有效时间较长的\",{\"1\":{\"306\":1}}],[\"和主机\",{\"1\":{\"125\":1}}],[\"和用户代理服务器\",{\"1\":{\"3182\":1}}],[\"和用户\",{\"1\":{\"125\":1}}],[\"和limit\",{\"1\":{\"48\":1,\"54\":1}}],[\"和分区容错性\",{\"1\":{\"43\":1}}],[\"和\",{\"0\":{\"1129\":1},\"1\":{\"2\":1,\"12\":1,\"29\":1,\"125\":3,\"157\":1,\"272\":1,\"549\":1,\"550\":1,\"1430\":1,\"1436\":1,\"1675\":1,\"3068\":1}}],[\"t0kls0tls1ftkqgq0vsvelgsunbveutls0tlq==\",{\"1\":{\"3273\":1}}],[\"tcnative\",{\"1\":{\"3097\":2}}],[\"tcp+事务\",{\"1\":{\"3227\":1}}],[\"tcp的流传输更适合\",{\"1\":{\"3227\":1}}],[\"tcp保证消息按顺序到达\",{\"1\":{\"3227\":1}}],[\"tcp提供的可靠传输特性\",{\"1\":{\"3227\":1}}],[\"tcp是传输层协议\",{\"1\":{\"3227\":1}}],[\"tcp是流式协议\",{\"1\":{\"3069\":1}}],[\"tcpprovider\",{\"1\":{\"3218\":3}}],[\"tcplisteningpoint\",{\"1\":{\"3218\":2}}],[\"tcp服务端通道\",{\"1\":{\"3117\":1}}],[\"tcp服务器端示例\",{\"1\":{\"3065\":1}}],[\"tcp客户端通道\",{\"1\":{\"3117\":1}}],[\"tcp客户端示例\",{\"1\":{\"3065\":1}}],[\"tcp重传率\",{\"1\":{\"3111\":1}}],[\"tcp重传可能是因为网络环境恶劣\",{\"1\":{\"1886\":1}}],[\"tcp测试配置\",{\"1\":{\"3106\":1}}],[\"tcp参数调优\",{\"1\":{\"3091\":1}}],[\"tcp粘包\",{\"1\":{\"3090\":1,\"3126\":1}}],[\"tcp粘包是由于tcp是流式协议\",{\"1\":{\"1325\":1}}],[\"tcp拥塞控制是防止网络因过载而瘫痪的关键机制\",{\"1\":{\"3075\":1}}],[\"tcp三次握手过程\",{\"1\":{\"3070\":1}}],[\"tcp三次握手和四次挥手的具体过程是什么\",{\"1\":{\"3070\":1}}],[\"tcp三次握手与四次挥手\",{\"0\":{\"1311\":1}}],[\"tcp和udp协议分别满足不同场景的需求\",{\"1\":{\"3068\":1}}],[\"tcpclient\",{\"1\":{\"3065\":1}}],[\"tcpserver\",{\"1\":{\"3065\":1}}],[\"tcp通过滑动窗口机制实现流量控制\",{\"1\":{\"3076\":1}}],[\"tcp通过多种机制保证可靠传输\",{\"1\":{\"1312\":1}}],[\"tcp通信需要经历服务器端启动\",{\"1\":{\"3065\":1}}],[\"tcp通信流程\",{\"0\":{\"3065\":1}}],[\"tcp协议深度解析\",{\"0\":{\"3074\":1}}],[\"tcp协议\",{\"0\":{\"3061\":1}}],[\"tcp连接是全双工的\",{\"1\":{\"3070\":1}}],[\"tcp连接数可以用来判断性能问题是否由于建立了过多的连接\",{\"1\":{\"1886\":1}}],[\"tcp连接建立和断开的过程是面试高频考点\",{\"1\":{\"1311\":1}}],[\"tcpdump\",{\"0\":{\"1878\":1},\"1\":{\"1835\":1,\"1878\":1,\"3099\":3}}],[\"tcp调试利器\",{\"0\":{\"1877\":1},\"1\":{\"1835\":1}}],[\"tcpunpacker\",{\"1\":{\"1325\":1}}],[\"tcp滑动窗口机制简化模型\",{\"1\":{\"1312\":1}}],[\"tcp可靠传输机制\",{\"0\":{\"1312\":1}}],[\"tcp\",{\"0\":{\"1310\":1,\"3059\":1},\"1\":{\"125\":1,\"216\":1,\"1111\":1,\"1347\":1,\"1414\":1,\"1569\":2,\"1595\":1,\"1648\":8,\"1649\":2,\"1650\":44,\"1661\":2,\"1685\":8,\"1688\":2,\"1698\":2,\"1713\":48,\"1788\":2,\"1876\":1,\"1878\":1,\"1886\":1,\"1925\":1,\"1926\":1,\"3059\":2,\"3061\":1,\"3065\":1,\"3068\":1,\"3091\":1,\"3099\":2,\"3106\":1,\"3107\":2,\"3176\":1,\"3204\":1,\"3206\":2,\"3218\":1,\"3271\":4,\"3273\":2,\"3282\":1}}],[\"t表示类型参数是t或t的父类\",{\"1\":{\"3040\":1}}],[\"t表示类型参数是t或t的子类\",{\"1\":{\"3039\":1}}],[\"tf\",{\"1\":{\"2905\":1}}],[\"t=\",{\"1\":{\"3205\":1}}],[\"t=跟踪\",{\"1\":{\"1882\":1}}],[\"t=0\",{\"1\":{\"1092\":1,\"3180\":1,\"3190\":1}}],[\"tgz解压\",{\"1\":{\"1626\":2,\"1715\":2}}],[\"tgz\",{\"1\":{\"1618\":1,\"1626\":2,\"1715\":2,\"1734\":1,\"1750\":1,\"3263\":1}}],[\"tz=prc\",{\"1\":{\"1548\":1,\"1697\":1}}],[\"tz=asia\",{\"1\":{\"1535\":1}}],[\"tt\",{\"1\":{\"2905\":1}}],[\"tty\",{\"1\":{\"1845\":1,\"1882\":1}}],[\"ttf\",{\"1\":{\"1557\":1}}],[\"ttqvscpknyk7ha\",{\"1\":{\"1527\":1}}],[\"ttl\",{\"1\":{\"157\":1,\"199\":1}}],[\"ttl返回的值有三种情况\",{\"1\":{\"147\":1}}],[\"tsinghua\",{\"1\":{\"1488\":2}}],[\"tshark抓不到数据\",{\"1\":{\"114\":1}}],[\"tuln\",{\"1\":{\"3099\":2}}],[\"tuesday\",{\"1\":{\"2818\":1}}],[\"tuchaung\",{\"1\":{\"1722\":1,\"1723\":1}}],[\"tunlp\",{\"1\":{\"1892\":1}}],[\"tunnelnodeport\",{\"1\":{\"1638\":1}}],[\"tunnelport\",{\"1\":{\"1638\":1}}],[\"tuna\",{\"1\":{\"1488\":2}}],[\"turnoff\",{\"1\":{\"1212\":3}}],[\"turnon\",{\"1\":{\"1212\":5}}],[\"turn服务器获取公网地址\",{\"1\":{\"1104\":1,\"3194\":1}}],[\"td>\",{\"1\":{\"1467\":20}}],[\"t>通过泛型支持任意元素类型\",{\"1\":{\"1298\":1}}],[\"t>\",{\"1\":{\"1296\":2,\"3034\":1,\"3050\":1,\"3086\":2}}],[\"t>>\",{\"1\":{\"269\":1,\"271\":1}}],[\"txt\",{\"1\":{\"1044\":2,\"1221\":2,\"1222\":1,\"1224\":3,\"1232\":2,\"1234\":2,\"1236\":2,\"1247\":2,\"1635\":1,\"1637\":1,\"1763\":2,\"1866\":2,\"1871\":2,\"1872\":1,\"1877\":1,\"2831\":1,\"2832\":1,\"2833\":2,\"2837\":1,\"2849\":1,\"2855\":1,\"2856\":2,\"2861\":2,\"2867\":2,\"2878\":1,\"2879\":2,\"2880\":2,\"2885\":1,\"2893\":4,\"2897\":4,\"2902\":1,\"2903\":1,\"2915\":2,\"2917\":1,\"3096\":2}}],[\"txt<\",{\"1\":{\"999\":1}}],[\"tw\",{\"1\":{\"1347\":1}}],[\"twostreamsexample\",{\"1\":{\"2891\":1}}],[\"twosum\",{\"1\":{\"2715\":1}}],[\"two\",{\"1\":{\"994\":1,\"2323\":1,\"2809\":1}}],[\"twice\",{\"1\":{\"125\":1}}],[\"t参数启用并行构建\",{\"1\":{\"967\":1}}],[\"tlab用完后才使用共享区域分配\",{\"1\":{\"720\":1}}],[\"tlab是线程本地分配缓冲区\",{\"1\":{\"720\":1}}],[\"tlslisteningpoint\",{\"1\":{\"3237\":8}}],[\"tlsv1\",{\"1\":{\"3237\":2}}],[\"tls传输层\",{\"1\":{\"3237\":1}}],[\"tls的示例代码\",{\"1\":{\"3214\":1}}],[\"tls需要\",{\"1\":{\"3214\":1}}],[\"tls通过tls协议对sip消息进行加密传输\",{\"1\":{\"3214\":1}}],[\"tls配置类\",{\"1\":{\"3206\":1}}],[\"tls配置\",{\"1\":{\"3206\":1}}],[\"tlsconfig\",{\"1\":{\"3206\":7}}],[\"tls等传输协议的适配\",{\"1\":{\"3204\":1}}],[\"tlsenable\",{\"1\":{\"1638\":1}}],[\"tls加密传输\",{\"0\":{\"3237\":1}}],[\"tls加密\",{\"0\":{\"3214\":1},\"1\":{\"1347\":1}}],[\"tls\",{\"0\":{\"482\":1},\"1\":{\"482\":1,\"3123\":1,\"3206\":2,\"3214\":1,\"3237\":4}}],[\"t2\",{\"1\":{\"675\":3,\"1123\":2}}],[\"t1\",{\"1\":{\"675\":3,\"1123\":2}}],[\"typora\",{\"1\":{\"1722\":1,\"1723\":1}}],[\"typically\",{\"1\":{\"1004\":1}}],[\"typ\",{\"1\":{\"303\":1}}],[\"typeconversiondemo\",{\"1\":{\"2101\":1}}],[\"typeconversionpitfalls\",{\"1\":{\"1055\":1}}],[\"typereference<arraylist<user>>\",{\"1\":{\"1439\":1}}],[\"typereference<hashmap<string\",{\"1\":{\"1439\":1}}],[\"type字段\",{\"1\":{\"1412\":1}}],[\"type头\",{\"1\":{\"1094\":1,\"3190\":1}}],[\"typeelement\",{\"1\":{\"1087\":7,\"3147\":2,\"3162\":4}}],[\"typeelement>\",{\"1\":{\"1087\":1,\"3147\":1,\"3162\":1}}],[\"type=ethernet\",{\"1\":{\"1918\":1}}],[\"type=webtest\",{\"1\":{\"1660\":1}}],[\"type=websvr\",{\"1\":{\"1660\":1}}],[\"type=sign\",{\"1\":{\"1660\":1}}],[\"type=single\",{\"1\":{\"1512\":1}}],[\"type=notify\",{\"1\":{\"1620\":1,\"1752\":1}}],[\"type=\",{\"1\":{\"1431\":3,\"1433\":3,\"1434\":3,\"1435\":3,\"1440\":5,\"1450\":2,\"1457\":4,\"1459\":6,\"1461\":2,\"1462\":7,\"1463\":5,\"1464\":7,\"1467\":7,\"1469\":2,\"1831\":1,\"3053\":2,\"3266\":4}}],[\"type=com\",{\"1\":{\"445\":1}}],[\"type=$\",{\"1\":{\"235\":1}}],[\"type`\",{\"1\":{\"232\":3,\"1684\":3,\"1687\":7}}],[\"types\",{\"1\":{\"216\":1,\"1384\":2,\"1385\":1,\"1417\":1,\"1595\":1}}],[\"type\",{\"1\":{\"122\":1,\"125\":7,\"199\":1,\"216\":1,\"232\":1,\"235\":1,\"282\":1,\"285\":2,\"417\":1,\"423\":1,\"471\":2,\"1064\":1,\"1078\":1,\"1087\":1,\"1092\":1,\"1324\":1,\"1385\":1,\"1412\":1,\"1417\":1,\"1433\":2,\"1434\":2,\"1435\":2,\"1436\":2,\"1440\":1,\"1443\":1,\"1444\":1,\"1457\":1,\"1513\":1,\"1524\":1,\"1560\":1,\"1595\":1,\"1638\":2,\"1642\":2,\"1648\":3,\"1649\":2,\"1650\":21,\"1660\":2,\"1661\":4,\"1684\":1,\"1685\":3,\"1688\":2,\"1698\":2,\"1713\":23,\"1831\":4,\"1914\":1,\"2062\":3,\"2921\":1,\"2935\":1,\"3016\":1,\"3019\":1,\"3029\":1,\"3034\":2,\"3070\":1,\"3135\":5,\"3141\":1,\"3162\":1,\"3180\":1,\"3273\":1,\"3275\":1,\"3276\":1}}],[\"tmpl\",{\"1\":{\"1627\":2,\"3263\":1}}],[\"tmp\",{\"1\":{\"1501\":2,\"1502\":2,\"1880\":1,\"3246\":1}}],[\"tmppath\",{\"1\":{\"286\":2}}],[\"tmpdir\",{\"1\":{\"286\":2}}],[\"tmptable\",{\"1\":{\"125\":1}}],[\"t\",{\"0\":{\"3039\":1,\"3040\":1},\"1\":{\"125\":1,\"279\":1,\"283\":2,\"290\":4,\"472\":1,\"959\":1,\"1170\":3,\"1254\":2,\"1287\":1,\"1290\":3,\"1294\":4,\"1295\":2,\"1296\":1,\"1303\":2,\"1417\":1,\"1424\":1,\"1428\":1,\"1529\":1,\"1530\":2,\"1552\":1,\"1656\":1,\"1711\":1,\"1793\":2,\"1841\":1,\"1845\":1,\"1880\":1,\"1881\":1,\"2013\":1,\"2228\":2,\"2314\":2,\"2485\":5,\"2544\":9,\"2655\":18,\"3000\":1,\"3002\":3,\"3003\":1,\"3005\":3,\"3007\":7,\"3019\":3,\"3021\":4,\"3023\":4,\"3024\":4,\"3025\":4,\"3028\":1,\"3029\":2,\"3034\":4,\"3036\":1,\"3041\":2,\"3049\":2,\"3052\":2,\"3086\":4,\"3087\":2,\"3165\":1,\"3246\":4,\"3282\":2}}],[\"tailmap\",{\"1\":{\"3086\":4}}],[\"tailnext\",{\"1\":{\"2485\":3}}],[\"tail\",{\"1\":{\"1867\":1,\"1891\":1,\"1895\":1,\"1899\":1,\"1910\":1,\"2485\":7,\"2621\":1,\"2628\":2,\"2629\":2,\"2630\":1}}],[\"tar\",{\"1\":{\"1488\":4,\"1489\":2,\"1581\":1,\"1582\":2,\"1618\":1,\"1626\":2,\"1641\":2,\"1715\":2,\"1729\":1,\"1730\":1,\"1734\":1,\"1750\":1,\"1767\":1,\"1768\":2,\"1779\":4,\"1781\":1,\"1782\":3,\"1798\":4,\"1862\":2,\"1863\":4,\"1897\":4,\"1898\":7,\"3100\":3,\"3246\":4,\"3263\":1}}],[\"targetreplicas\",{\"1\":{\"3244\":4}}],[\"targetfile\",{\"1\":{\"2849\":4}}],[\"targetformat\",{\"1\":{\"1974\":3}}],[\"targetdata\",{\"1\":{\"2508\":2}}],[\"targetpath\",{\"1\":{\"1974\":3,\"1987\":3}}],[\"targetport\",{\"1\":{\"1648\":2,\"1649\":1,\"1650\":11,\"1685\":2,\"1688\":1,\"1713\":12}}],[\"target参数指定编译版本\",{\"1\":{\"735\":1}}],[\"target>\",{\"1\":{\"583\":1,\"941\":1,\"956\":1}}],[\"target\",{\"1\":{\"125\":1,\"186\":2,\"267\":1,\"340\":1,\"417\":1,\"423\":1,\"735\":1,\"1063\":1,\"1064\":1,\"1068\":1,\"1069\":2,\"1078\":1,\"1087\":1,\"1161\":7,\"1267\":5,\"1517\":1,\"1520\":1,\"1535\":1,\"1548\":2,\"1620\":3,\"1697\":2,\"1752\":3,\"1897\":1,\"1974\":1,\"1987\":1,\"2508\":2,\"2710\":4,\"2715\":3,\"2721\":3,\"2935\":1,\"3002\":13,\"3003\":3,\"3005\":11,\"3135\":2,\"3137\":1,\"3141\":2,\"3154\":1,\"3162\":1,\"3170\":2}}],[\"tab\",{\"1\":{\"2600\":8,\"2682\":3,\"2683\":6}}],[\"tab1\",{\"1\":{\"1467\":1}}],[\"table注解标记表名\",{\"1\":{\"3141\":1}}],[\"table`\",{\"1\":{\"1825\":1}}],[\"table>\",{\"1\":{\"1467\":1}}],[\"tablename\",{\"1\":{\"125\":1,\"3052\":2}}],[\"tableaccess\",{\"1\":{\"125\":1}}],[\"table取而代之\",{\"1\":{\"125\":2}}],[\"table删除所有列\",{\"1\":{\"125\":1}}],[\"tablespaces\",{\"1\":{\"1575\":1}}],[\"tablespace\",{\"1\":{\"1573\":2,\"1575\":3,\"1833\":10}}],[\"tables锁定了表\",{\"1\":{\"125\":1}}],[\"tables锁定表\",{\"1\":{\"125\":1}}],[\"tables\",{\"0\":{\"1665\":1},\"1\":{\"113\":1,\"122\":1,\"125\":3,\"1831\":1}}],[\"table\",{\"1\":{\"113\":6,\"122\":1,\"125\":30,\"232\":12,\"440\":1,\"578\":1,\"1181\":10,\"1577\":1,\"1578\":2,\"1684\":12,\"1687\":8,\"1771\":1,\"1828\":1,\"1829\":1,\"1831\":14,\"2166\":1,\"2593\":1,\"2600\":1,\"2601\":2,\"2679\":1,\"2681\":3,\"2682\":1,\"2684\":1,\"2935\":1,\"3141\":2,\"3165\":1}}],[\"take\",{\"1\":{\"1004\":1,\"1326\":1,\"2462\":1,\"2466\":1,\"2467\":1}}],[\"taobao\",{\"1\":{\"261\":1}}],[\"tag名\",{\"1\":{\"1795\":1}}],[\"tagline\",{\"1\":{\"1513\":1}}],[\"tag=1928301774\",{\"1\":{\"1092\":1,\"3180\":1}}],[\"tags\",{\"1\":{\"232\":2,\"237\":1,\"1684\":2}}],[\"tag`\",{\"1\":{\"232\":1,\"1684\":1}}],[\"tag\",{\"1\":{\"232\":6,\"1094\":1,\"1641\":5,\"1667\":1,\"1684\":6,\"1794\":1,\"1795\":4,\"1799\":4,\"3190\":1,\"3199\":1,\"3246\":2}}],[\"taskname\",{\"1\":{\"2467\":5}}],[\"taskkill\",{\"1\":{\"1892\":1}}],[\"taskid\",{\"1\":{\"625\":2,\"626\":1}}],[\"task\",{\"1\":{\"122\":1,\"527\":1,\"675\":3,\"677\":2,\"1527\":1,\"1677\":1,\"2328\":2,\"2467\":2}}],[\"teardown\",{\"1\":{\"3166\":1}}],[\"temurin\",{\"1\":{\"2020\":1}}],[\"tempdata\",{\"1\":{\"3165\":1}}],[\"temporaltype\",{\"1\":{\"3165\":1}}],[\"temporal\",{\"1\":{\"3165\":1}}],[\"temporarykey\",{\"1\":{\"2691\":1}}],[\"temporary\",{\"0\":{\"1667\":1},\"1\":{\"125\":1,\"993\":1}}],[\"templates\",{\"1\":{\"393\":1}}],[\"templatestr\",{\"1\":{\"289\":5}}],[\"template\",{\"1\":{\"293\":5,\"1363\":1,\"1648\":2,\"1649\":2,\"1650\":20,\"1660\":1,\"1661\":1,\"1685\":2,\"1688\":2,\"1698\":1,\"1713\":22,\"3276\":1}}],[\"temp\",{\"1\":{\"125\":1,\"1161\":2,\"1164\":2,\"1295\":2,\"1384\":5,\"2207\":2,\"2372\":3,\"2420\":3,\"2707\":2,\"2709\":2}}],[\"telnet\",{\"1\":{\"1916\":2}}],[\"tee\",{\"0\":{\"1870\":1},\"1\":{\"1615\":1,\"1675\":1,\"1746\":1,\"1835\":1,\"1858\":1,\"1870\":1}}],[\"terms\",{\"1\":{\"1578\":1}}],[\"term\",{\"1\":{\"1472\":1}}],[\"terminationgraceperiodseconds\",{\"1\":{\"1661\":1,\"1698\":1}}],[\"terminationmessagepolicy\",{\"1\":{\"1661\":1,\"1698\":1}}],[\"terminationmessagepath\",{\"1\":{\"1661\":1,\"1698\":1}}],[\"termination\",{\"1\":{\"1661\":1,\"1698\":1}}],[\"terminatedialog\",{\"1\":{\"3209\":1}}],[\"terminated\",{\"1\":{\"125\":2,\"605\":1,\"609\":1,\"3209\":3}}],[\"terminators\",{\"1\":{\"125\":1}}],[\"tenant\",{\"1\":{\"232\":12,\"1684\":12}}],[\"tenny\",{\"1\":{\"219\":1}}],[\"testing\",{\"1\":{\"3282\":1}}],[\"testimplementation\",{\"1\":{\"585\":1}}],[\"testuser\",{\"1\":{\"3166\":3}}],[\"testdirectcall\",{\"1\":{\"2986\":2}}],[\"testdocument\",{\"1\":{\"1988\":1}}],[\"testkey\",{\"1\":{\"2685\":2}}],[\"testqueue\",{\"1\":{\"2524\":5}}],[\"testputperformance\",{\"1\":{\"2409\":3}}],[\"testreflectioncall\",{\"1\":{\"2986\":3}}],[\"testremove\",{\"1\":{\"2327\":5}}],[\"testremoveperformance\",{\"1\":{\"2327\":2,\"2409\":3}}],[\"testresttemplate\",{\"1\":{\"450\":1}}],[\"testadd\",{\"1\":{\"2327\":5}}],[\"testaddperformance\",{\"1\":{\"2327\":2}}],[\"testaccessperformance\",{\"1\":{\"2327\":2}}],[\"test数据库名称\",{\"1\":{\"1737\":1}}],[\"test5\",{\"1\":{\"1546\":1,\"1548\":1,\"1656\":15}}],[\"test05\",{\"1\":{\"1439\":1}}],[\"test04\",{\"1\":{\"1439\":1}}],[\"test03\",{\"1\":{\"1439\":1}}],[\"test02\",{\"1\":{\"1439\":1}}],[\"test01\",{\"1\":{\"1439\":1}}],[\"testexceptionpath\",{\"1\":{\"1250\":2}}],[\"testnormalpath\",{\"1\":{\"1250\":2}}],[\"testfinally\",{\"1\":{\"1246\":2}}],[\"testbinding\",{\"1\":{\"1104\":1}}],[\"testconnection\",{\"1\":{\"3224\":1}}],[\"testcreateorder\",{\"1\":{\"2047\":1}}],[\"testcreateuser\",{\"1\":{\"450\":1}}],[\"testcalculatetotal\",{\"1\":{\"2046\":1}}],[\"testclass\",{\"1\":{\"746\":1}}],[\"testgetperformance\",{\"1\":{\"2409\":3}}],[\"testgetuserbyid\",{\"1\":{\"449\":1}}],[\"testgetallusers\",{\"1\":{\"449\":1,\"450\":1}}],[\"test依赖来简化单元测试的使用\",{\"1\":{\"449\":1}}],[\"test2\",{\"1\":{\"445\":1}}],[\"test123\",{\"1\":{\"1819\":1}}],[\"test12\",{\"1\":{\"1808\":1}}],[\"test1\",{\"1\":{\"445\":1}}],[\"test<\",{\"1\":{\"394\":1,\"449\":1}}],[\"test\",{\"1\":{\"91\":1,\"219\":2,\"280\":1,\"291\":1,\"367\":1,\"393\":1,\"403\":1,\"404\":1,\"449\":2,\"450\":3,\"456\":1,\"538\":1,\"746\":1,\"925\":1,\"938\":1,\"940\":1,\"950\":2,\"1069\":1,\"1079\":2,\"1247\":2,\"1264\":1,\"1294\":1,\"1303\":1,\"1426\":2,\"1439\":5,\"1656\":1,\"1661\":1,\"1711\":1,\"1829\":1,\"1865\":1,\"1870\":1,\"1914\":1,\"1961\":1,\"2045\":1,\"2047\":1,\"2134\":2,\"2311\":1,\"2327\":8,\"2868\":1,\"2986\":2,\"3005\":1,\"3038\":1,\"3134\":1,\"3166\":4}}],[\"text等\",{\"1\":{\"1433\":1,\"1434\":1,\"1435\":1,\"1436\":2}}],[\"text\",{\"1\":{\"232\":5,\"1041\":6,\"1095\":1,\"1324\":1,\"1431\":2,\"1433\":2,\"1434\":2,\"1435\":2,\"1440\":5,\"1443\":1,\"1444\":1,\"1450\":1,\"1457\":1,\"1459\":2,\"1464\":1,\"1467\":1,\"1667\":2,\"1684\":5,\"1687\":3,\"2855\":1,\"2878\":1,\"2921\":1,\"3070\":1,\"3205\":1}}],[\"text列\",{\"1\":{\"125\":3}}],[\"textfile\",{\"1\":{\"125\":1}}],[\"tex\",{\"0\":{\"20\":1}}],[\"trigger\",{\"1\":{\"1687\":2}}],[\"trimtosize\",{\"1\":{\"2445\":1,\"2451\":1}}],[\"trim\",{\"1\":{\"1041\":1,\"1095\":1,\"1315\":1,\"2949\":1,\"3205\":6}}],[\"tr>\",{\"1\":{\"1467\":5}}],[\"traffic\",{\"1\":{\"3099\":2,\"3109\":1}}],[\"traces\",{\"1\":{\"3109\":1}}],[\"trace\",{\"0\":{\"2936\":1},\"1\":{\"2070\":1,\"3104\":1}}],[\"tracert\",{\"1\":{\"1917\":1}}],[\"tracert是获得目标ip经过路径的所有地址\",{\"1\":{\"1917\":1}}],[\"traceroute\",{\"1\":{\"1879\":3,\"1917\":1}}],[\"traceroute默认使用udp方式\",{\"1\":{\"1879\":1}}],[\"traceidmdcpatternlogbacklayout\",{\"1\":{\"1564\":1}}],[\"traceidpatternlogbacklayout\",{\"1\":{\"1564\":2}}],[\"trade\",{\"1\":{\"1641\":2,\"1650\":45,\"1698\":1,\"1713\":56,\"1799\":2}}],[\"traditional\",{\"1\":{\"1321\":1}}],[\"traditionalcopy\",{\"1\":{\"1321\":2}}],[\"traditionalresourcehandling\",{\"1\":{\"1044\":2}}],[\"transpose\",{\"1\":{\"2173\":1}}],[\"transport\",{\"1\":{\"1352\":1,\"1560\":2}}],[\"transfermoney\",{\"1\":{\"2947\":1}}],[\"transfer\",{\"1\":{\"2684\":2}}],[\"transfercount\",{\"1\":{\"1232\":6}}],[\"transferto\",{\"1\":{\"434\":1,\"1232\":2,\"1238\":1,\"1321\":1,\"3130\":1}}],[\"transient字段不会被序列化\",{\"1\":{\"1225\":1}}],[\"transient关键字\",{\"1\":{\"1225\":1}}],[\"transient\",{\"1\":{\"1034\":1,\"1225\":1,\"2318\":1,\"2433\":1,\"2490\":3,\"3165\":1}}],[\"transition\",{\"1\":{\"122\":2,\"3223\":1}}],[\"translated\",{\"1\":{\"125\":1}}],[\"trans\",{\"1\":{\"125\":1}}],[\"transactionid\",{\"1\":{\"3208\":8}}],[\"transactionstate\",{\"1\":{\"3222\":2}}],[\"transactionstatus\",{\"1\":{\"354\":1}}],[\"transactions\",{\"1\":{\"3208\":2}}],[\"transactionproxydemo\",{\"1\":{\"3005\":1}}],[\"transactionproxy\",{\"1\":{\"3005\":4}}],[\"transactionterminatedevent\",{\"1\":{\"1094\":2,\"3190\":2}}],[\"transactiontemplate\",{\"1\":{\"354\":3}}],[\"transactioncallbackwithoutresult\",{\"1\":{\"354\":1}}],[\"transactionmanager\",{\"1\":{\"353\":1,\"3218\":3}}],[\"transactionaluserdao\",{\"1\":{\"3005\":4}}],[\"transactional注解确保自动回滚\",{\"1\":{\"2048\":1,\"2055\":1,\"2063\":1}}],[\"transactional注解\",{\"1\":{\"444\":1,\"3005\":1}}],[\"transactional注解来简化事务管理\",{\"1\":{\"441\":1}}],[\"transactional\",{\"1\":{\"352\":1,\"441\":1,\"1072\":1,\"2007\":1,\"3005\":8,\"3160\":2}}],[\"transaction\",{\"1\":{\"125\":3,\"3005\":3,\"3160\":1,\"3208\":4}}],[\"treeifybin\",{\"1\":{\"2600\":1}}],[\"treeify\",{\"1\":{\"2600\":1}}],[\"treenode<k\",{\"1\":{\"2600\":1,\"2601\":1}}],[\"treenode\",{\"1\":{\"2600\":1,\"2601\":1}}],[\"treemap与hashmap中红黑树的异同\",{\"1\":{\"2672\":1}}],[\"treemap与treeset类结构分析\",{\"0\":{\"2646\":1}}],[\"treemap的红黑树用于维护键的有序性\",{\"1\":{\"2672\":1}}],[\"treemap的submap\",{\"1\":{\"2672\":1}}],[\"treemap的范围查询\",{\"1\":{\"2671\":1}}],[\"treemap中的红黑树与hashmap中的红黑树有何异同\",{\"1\":{\"2672\":1}}],[\"treemap是非线程安全的\",{\"1\":{\"2670\":1}}],[\"treemap是基于红黑树实现的有序键值对存储结构\",{\"1\":{\"2646\":1}}],[\"treemap<mutablekey\",{\"1\":{\"2669\":1}}],[\"treemap<>\",{\"1\":{\"2406\":1,\"2409\":1,\"2419\":1,\"2660\":1,\"2668\":1,\"2669\":1,\"2670\":2,\"3007\":1,\"3086\":1}}],[\"treemap提供了多种视图\",{\"1\":{\"2665\":1}}],[\"treemap支持两种排序方式\",{\"1\":{\"2664\":1}}],[\"treemap采用红黑树作为底层数据结构\",{\"1\":{\"2663\":1}}],[\"treemap核心方法实现\",{\"0\":{\"2653\":1}}],[\"treemap核心变量\",{\"0\":{\"2648\":1}}],[\"treemap和treeset实现这些接口\",{\"1\":{\"2651\":1}}],[\"treemap源码\",{\"0\":{\"2644\":1}}],[\"treemap不允许null键\",{\"1\":{\"2419\":1}}],[\"treemapremovetime\",{\"1\":{\"2409\":2}}],[\"treemapgettime\",{\"1\":{\"2409\":2}}],[\"treemapputtime\",{\"1\":{\"2409\":2}}],[\"treemap初始化\",{\"1\":{\"2406\":1}}],[\"treemap\",{\"1\":{\"1174\":1,\"2400\":1,\"2406\":4,\"2409\":6,\"2419\":2,\"2660\":7,\"2666\":1}}],[\"treeset操作复杂度\",{\"1\":{\"2712\":1}}],[\"treesetnavigationexample\",{\"1\":{\"2661\":1}}],[\"treeset导航方法使用示例\",{\"1\":{\"2661\":1}}],[\"treeset核心方法实现\",{\"0\":{\"2658\":1}}],[\"treeset核心变量\",{\"0\":{\"2649\":1}}],[\"treeset有序但性能较差\",{\"1\":{\"2643\":1}}],[\"treeset的性能对比如何\",{\"1\":{\"2643\":1}}],[\"treeset使用误区\",{\"0\":{\"2387\":1}}],[\"treeset使用红黑树作为底层数据结构\",{\"1\":{\"2377\":1}}],[\"treeset<integer>\",{\"1\":{\"2371\":1,\"2661\":1}}],[\"treeset<>\",{\"1\":{\"2369\":1,\"2371\":3,\"2388\":1,\"2661\":1,\"2712\":1,\"3007\":1}}],[\"treeset自然排序\",{\"1\":{\"2371\":1}}],[\"treeset基于红黑树\",{\"1\":{\"2366\":1}}],[\"treeset\",{\"0\":{\"2366\":1,\"2644\":1},\"1\":{\"1174\":1,\"2363\":1,\"2369\":1,\"2391\":1,\"2712\":4}}],[\"tree\",{\"1\":{\"1020\":2,\"1384\":1,\"1779\":2,\"2027\":4}}],[\"tree命令查看项目的依赖树\",{\"1\":{\"1020\":1}}],[\"tree命令查看依赖树\",{\"1\":{\"931\":1,\"944\":1,\"945\":1}}],[\"tree分析依赖树\",{\"1\":{\"567\":1}}],[\"trg\",{\"1\":{\"125\":10}}],[\"truncate\",{\"1\":{\"1232\":1}}],[\"truncated\",{\"1\":{\"125\":4}}],[\"trulyimmutablelist\",{\"1\":{\"1191\":2}}],[\"trustmanagerfactory\",{\"1\":{\"3214\":7,\"3237\":6}}],[\"truststorepassword\",{\"1\":{\"3214\":2}}],[\"truststorepath\",{\"1\":{\"3206\":1,\"3214\":2}}],[\"truststore\",{\"1\":{\"3206\":1,\"3214\":3}}],[\"trusted\",{\"1\":{\"1940\":1}}],[\"trust\",{\"1\":{\"125\":2}}],[\"true表示访问顺序\",{\"1\":{\"2621\":1,\"2627\":1}}],[\"truevoly\",{\"1\":{\"1568\":2,\"1569\":2,\"1570\":1}}],[\"true创建bean\",{\"1\":{\"459\":1}}],[\"true\",{\"0\":{\"1814\":1},\"1\":{\"2\":2,\"232\":1,\"267\":1,\"280\":1,\"287\":2,\"307\":1,\"430\":1,\"456\":1,\"472\":1,\"658\":1,\"660\":1,\"710\":2,\"1040\":6,\"1041\":2,\"1068\":4,\"1069\":1,\"1087\":1,\"1111\":2,\"1161\":1,\"1165\":3,\"1170\":2,\"1182\":1,\"1208\":1,\"1222\":1,\"1228\":1,\"1237\":1,\"1253\":1,\"1260\":3,\"1263\":1,\"1264\":1,\"1269\":3,\"1270\":3,\"1271\":1,\"1312\":1,\"1314\":2,\"1315\":1,\"1324\":1,\"1325\":1,\"1326\":4,\"1352\":2,\"1431\":1,\"1432\":1,\"1435\":3,\"1436\":2,\"1443\":4,\"1464\":2,\"1467\":2,\"1469\":1,\"1470\":1,\"1517\":1,\"1520\":1,\"1535\":3,\"1560\":1,\"1638\":5,\"1642\":2,\"1648\":2,\"1649\":1,\"1650\":11,\"1656\":3,\"1661\":1,\"1684\":1,\"1685\":2,\"1688\":1,\"1698\":1,\"1711\":3,\"1713\":12,\"1734\":6,\"1738\":2,\"1764\":3,\"1814\":3,\"1833\":1,\"1834\":1,\"1974\":1,\"1975\":1,\"1987\":1,\"1988\":1,\"2080\":1,\"2084\":1,\"2099\":2,\"2110\":3,\"2111\":4,\"2115\":1,\"2189\":2,\"2194\":1,\"2195\":3,\"2198\":4,\"2204\":1,\"2213\":1,\"2223\":4,\"2239\":1,\"2243\":1,\"2245\":2,\"2246\":1,\"2248\":4,\"2249\":2,\"2294\":2,\"2303\":2,\"2304\":2,\"2318\":1,\"2324\":2,\"2327\":4,\"2356\":1,\"2427\":1,\"2437\":2,\"2440\":2,\"2485\":2,\"2494\":2,\"2496\":2,\"2544\":1,\"2552\":2,\"2555\":2,\"2573\":2,\"2600\":1,\"2605\":1,\"2628\":1,\"2632\":1,\"2642\":1,\"2685\":1,\"2709\":1,\"2759\":1,\"2845\":1,\"2902\":2,\"2903\":2,\"2904\":1,\"2916\":1,\"2921\":1,\"2959\":2,\"2969\":1,\"2970\":1,\"2971\":2,\"2974\":1,\"2975\":1,\"2980\":1,\"2986\":2,\"2989\":4,\"2990\":2,\"2993\":2,\"2999\":3,\"3000\":2,\"3002\":5,\"3003\":1,\"3005\":2,\"3007\":2,\"3010\":1,\"3011\":1,\"3035\":1,\"3069\":2,\"3070\":1,\"3078\":1,\"3082\":1,\"3118\":1,\"3125\":1,\"3137\":2,\"3141\":1,\"3147\":1,\"3154\":2,\"3162\":1,\"3164\":1,\"3170\":1,\"3214\":1,\"3215\":1,\"3218\":1,\"3225\":1}}],[\"trywithresourcesdemo\",{\"1\":{\"1247\":2}}],[\"trywithresources\",{\"1\":{\"1044\":2}}],[\"tryrelease等方法即可实现不同的同步语义\",{\"1\":{\"639\":1}}],[\"try\",{\"0\":{\"1246\":1,\"1247\":1,\"2951\":1},\"1\":{\"71\":1,\"91\":1,\"269\":1,\"274\":1,\"283\":1,\"286\":4,\"456\":1,\"518\":1,\"527\":1,\"609\":1,\"610\":1,\"625\":1,\"626\":2,\"642\":2,\"643\":2,\"676\":2,\"693\":1,\"710\":1,\"729\":1,\"746\":2,\"747\":2,\"1040\":1,\"1044\":7,\"1055\":2,\"1059\":1,\"1068\":1,\"1069\":2,\"1111\":1,\"1129\":1,\"1186\":1,\"1190\":1,\"1191\":3,\"1194\":2,\"1221\":2,\"1222\":2,\"1224\":3,\"1225\":2,\"1228\":1,\"1232\":1,\"1234\":4,\"1237\":1,\"1238\":4,\"1243\":1,\"1246\":1,\"1247\":3,\"1250\":1,\"1253\":3,\"1254\":1,\"1314\":2,\"1315\":1,\"1321\":2,\"1324\":1,\"1326\":3,\"1332\":1,\"1336\":1,\"1337\":3,\"1431\":1,\"1443\":1,\"1738\":1,\"2037\":1,\"2079\":1,\"2269\":1,\"2282\":1,\"2328\":1,\"2356\":2,\"2429\":2,\"2441\":1,\"2450\":1,\"2456\":1,\"2466\":2,\"2513\":2,\"2523\":2,\"2524\":3,\"2544\":2,\"2685\":1,\"2697\":2,\"2809\":1,\"2831\":2,\"2832\":1,\"2833\":1,\"2836\":1,\"2837\":2,\"2843\":2,\"2844\":2,\"2845\":2,\"2849\":2,\"2855\":2,\"2856\":1,\"2857\":4,\"2861\":1,\"2866\":1,\"2867\":1,\"2868\":3,\"2878\":2,\"2879\":2,\"2880\":1,\"2885\":2,\"2891\":1,\"2892\":1,\"2893\":2,\"2897\":2,\"2902\":1,\"2903\":2,\"2904\":1,\"2905\":1,\"2909\":1,\"2915\":1,\"2916\":1,\"2917\":1,\"2921\":4,\"2927\":2,\"2935\":1,\"2936\":1,\"2937\":1,\"2942\":1,\"2951\":2,\"2952\":1,\"2953\":1,\"2955\":1,\"2959\":6,\"2960\":1,\"2984\":1,\"2989\":1,\"2990\":1,\"2993\":2,\"3000\":1,\"3003\":3,\"3005\":4,\"3007\":1,\"3065\":8,\"3066\":2,\"3070\":1,\"3078\":1,\"3087\":1,\"3120\":5,\"3125\":1,\"3162\":1,\"3208\":2,\"3214\":2,\"3215\":1,\"3217\":2,\"3240\":1}}],[\"thursday\",{\"1\":{\"2818\":1}}],[\"th>\",{\"1\":{\"1467\":5}}],[\"though\",{\"1\":{\"1004\":1}}],[\"that\",{\"1\":{\"994\":2,\"1578\":1,\"1788\":1}}],[\"thanosruler\",{\"1\":{\"1638\":1}}],[\"than值必须严格增大\",{\"1\":{\"125\":1}}],[\"than\",{\"1\":{\"125\":1,\"193\":1,\"1496\":1,\"1949\":2,\"1962\":1}}],[\"threshold也翻倍\",{\"1\":{\"2601\":1}}],[\"threshold\",{\"1\":{\"2593\":1,\"2600\":2,\"2601\":3,\"2679\":1,\"2683\":1,\"2684\":2}}],[\"three\",{\"1\":{\"2323\":1}}],[\"threadid\",{\"1\":{\"2269\":3}}],[\"threadinterruptexample\",{\"1\":{\"610\":1}}],[\"thread1\",{\"1\":{\"1764\":1}}],[\"threadpool\",{\"1\":{\"3082\":2}}],[\"threadpoolmonitorexample\",{\"1\":{\"626\":1}}],[\"threadpoolexecutor\",{\"1\":{\"625\":3,\"626\":2,\"2539\":3,\"3082\":2,\"3225\":2}}],[\"threadfactorybuilder\",{\"1\":{\"3225\":1}}],[\"threadfactory\",{\"1\":{\"622\":1}}],[\"threadlocal<map<object\",{\"1\":{\"3007\":1}}],[\"threadlocal\",{\"1\":{\"1138\":1,\"3007\":1}}],[\"threadlocal中持有类加载器引用\",{\"1\":{\"753\":1}}],[\"threadlocal等方式减少锁竞争\",{\"1\":{\"650\":1}}],[\"threadlocal通过每个线程维护一个threadlocalmap来存储线程局部变量\",{\"1\":{\"618\":1}}],[\"threadlocal的实现原理是什么\",{\"1\":{\"618\":1}}],[\"threadlocal的内存泄漏风险\",{\"0\":{\"601\":1}}],[\"threadlocal如果使用不当\",{\"1\":{\"601\":1}}],[\"threadlocalrandom\",{\"1\":{\"269\":2}}],[\"threadcreationexample\",{\"1\":{\"592\":1}}],[\"threadsafehashmap<k\",{\"1\":{\"2429\":1}}],[\"threadsafemapexample\",{\"1\":{\"2410\":1}}],[\"threadsafesetdemo\",{\"1\":{\"2373\":1}}],[\"threadsafesingleton\",{\"1\":{\"613\":6}}],[\"threadsafelistdemo\",{\"1\":{\"2328\":2}}],[\"threadsafelistexamples\",{\"1\":{\"2328\":1}}],[\"threadsafecounter\",{\"1\":{\"593\":1}}],[\"threadstateexample\",{\"1\":{\"609\":5}}],[\"threads\",{\"1\":{\"125\":1,\"526\":2,\"677\":3,\"1535\":1,\"2328\":5,\"2524\":2}}],[\"thread\",{\"1\":{\"125\":5,\"500\":2,\"526\":4,\"527\":4,\"592\":6,\"609\":13,\"610\":6,\"625\":2,\"626\":2,\"654\":2,\"656\":1,\"675\":4,\"676\":4,\"677\":8,\"720\":1,\"754\":1,\"1041\":1,\"1094\":1,\"1123\":6,\"1238\":1,\"1254\":7,\"1314\":1,\"1337\":2,\"1431\":1,\"1443\":1,\"1564\":2,\"2072\":1,\"2269\":6,\"2279\":1,\"2328\":9,\"2466\":4,\"2522\":7,\"2523\":4,\"2524\":1,\"2555\":2,\"2685\":1,\"2921\":2,\"3078\":1,\"3096\":2,\"3102\":1,\"3120\":1,\"3208\":2,\"3218\":1}}],[\"throw结束\",{\"1\":{\"2062\":1}}],[\"throwable\",{\"1\":{\"338\":1,\"1068\":1,\"1238\":4,\"1249\":1,\"1254\":1,\"1267\":1,\"2925\":1,\"2938\":1,\"2974\":1,\"3002\":1,\"3005\":1,\"3010\":1,\"3120\":3,\"3125\":1,\"3154\":1,\"3170\":2}}],[\"throwing\",{\"1\":{\"336\":1}}],[\"throwmessage\",{\"1\":{\"287\":4}}],[\"throwmsg1\",{\"1\":{\"287\":1}}],[\"throwmsg\",{\"1\":{\"287\":7}}],[\"throw\",{\"1\":{\"283\":1,\"287\":3,\"441\":1,\"504\":1,\"517\":2,\"710\":1,\"746\":2,\"747\":1,\"1044\":2,\"1068\":1,\"1069\":4,\"1095\":2,\"1203\":1,\"1210\":1,\"1211\":1,\"1250\":1,\"1253\":2,\"1254\":2,\"1295\":1,\"1326\":2,\"1337\":1,\"1949\":3,\"1962\":3,\"1974\":2,\"1975\":2,\"1987\":2,\"1988\":1,\"2037\":2,\"2079\":1,\"2161\":1,\"2183\":1,\"2291\":3,\"2296\":3,\"2436\":1,\"2438\":1,\"2439\":2,\"2441\":5,\"2494\":1,\"2495\":1,\"2497\":4,\"2498\":5,\"2512\":1,\"2571\":1,\"2573\":1,\"2655\":1,\"2707\":1,\"2708\":1,\"2715\":1,\"2809\":1,\"2873\":2,\"2936\":1,\"2937\":2,\"2947\":2,\"2949\":2,\"2952\":1,\"2953\":1,\"2955\":2,\"2959\":1,\"2990\":1,\"2993\":1,\"2999\":1,\"3003\":4,\"3005\":4,\"3087\":2,\"3154\":2,\"3224\":1,\"3238\":2}}],[\"throwsbusinessexception\",{\"1\":{\"2047\":1}}],[\"throws\",{\"1\":{\"269\":2,\"270\":1,\"274\":1,\"283\":1,\"286\":3,\"290\":3,\"338\":1,\"368\":1,\"430\":1,\"434\":1,\"451\":2,\"456\":2,\"471\":1,\"592\":2,\"609\":1,\"610\":1,\"642\":2,\"660\":1,\"675\":1,\"677\":1,\"729\":3,\"746\":3,\"747\":2,\"1044\":1,\"1068\":1,\"1069\":2,\"1094\":3,\"1095\":1,\"1104\":1,\"1111\":2,\"1224\":4,\"1228\":2,\"1238\":2,\"1260\":1,\"1264\":1,\"1267\":1,\"1269\":1,\"1270\":1,\"1314\":1,\"1315\":3,\"1321\":3,\"1324\":3,\"1326\":4,\"1332\":2,\"1336\":2,\"1338\":2,\"1431\":2,\"1439\":5,\"1440\":2,\"1443\":2,\"1444\":2,\"1948\":3,\"1962\":4,\"1974\":4,\"1975\":2,\"1987\":4,\"1988\":3,\"2012\":1,\"2035\":2,\"2079\":2,\"2269\":1,\"2436\":2,\"2437\":1,\"2438\":1,\"2439\":4,\"2440\":1,\"2441\":5,\"2465\":1,\"2467\":1,\"2493\":1,\"2494\":2,\"2495\":3,\"2496\":1,\"2497\":4,\"2498\":10,\"2522\":1,\"2523\":1,\"2551\":1,\"2552\":1,\"2555\":2,\"2571\":1,\"2573\":1,\"2809\":1,\"2873\":4,\"2916\":2,\"2921\":4,\"2927\":3,\"2935\":1,\"2937\":2,\"2948\":2,\"2951\":1,\"2965\":1,\"2969\":1,\"2970\":1,\"2971\":1,\"2974\":1,\"2980\":1,\"2983\":1,\"2984\":1,\"2986\":2,\"2987\":1,\"2989\":1,\"2993\":1,\"2999\":4,\"3000\":3,\"3002\":3,\"3003\":1,\"3005\":2,\"3007\":2,\"3010\":1,\"3085\":1,\"3087\":1,\"3117\":1,\"3118\":3,\"3120\":1,\"3125\":3,\"3154\":1,\"3170\":2,\"3190\":3,\"3199\":1,\"3205\":1,\"3206\":4,\"3208\":2,\"3212\":2,\"3214\":2,\"3215\":4,\"3217\":2,\"3218\":3,\"3222\":1,\"3224\":1,\"3232\":1,\"3237\":2,\"3238\":1,\"3241\":1}}],[\"this关键字\",{\"1\":{\"2810\":1}}],[\"this引用\",{\"1\":{\"556\":1}}],[\"this\",{\"1\":{\"59\":1,\"89\":1,\"125\":1,\"324\":1,\"325\":1,\"340\":1,\"541\":1,\"542\":1,\"575\":1,\"580\":1,\"599\":1,\"641\":1,\"728\":1,\"746\":1,\"747\":1,\"993\":2,\"994\":4,\"997\":1,\"1034\":1,\"1038\":1,\"1044\":1,\"1094\":1,\"1111\":3,\"1181\":3,\"1182\":3,\"1203\":2,\"1212\":2,\"1225\":4,\"1238\":2,\"1249\":6,\"1267\":1,\"1269\":2,\"1290\":2,\"1294\":1,\"1312\":1,\"1326\":4,\"1444\":1,\"1452\":4,\"1467\":2,\"1578\":3,\"1962\":1,\"2007\":3,\"2051\":2,\"2077\":2,\"2091\":4,\"2224\":2,\"2240\":2,\"2268\":2,\"2282\":1,\"2291\":6,\"2294\":1,\"2296\":1,\"2318\":1,\"2319\":3,\"2329\":4,\"2356\":1,\"2388\":1,\"2427\":1,\"2436\":4,\"2441\":2,\"2466\":4,\"2467\":3,\"2485\":2,\"2490\":3,\"2493\":1,\"2512\":5,\"2525\":3,\"2544\":3,\"2555\":2,\"2571\":2,\"2577\":3,\"2600\":1,\"2601\":1,\"2605\":3,\"2627\":1,\"2632\":1,\"2642\":1,\"2669\":1,\"2680\":3,\"2733\":1,\"2734\":5,\"2738\":1,\"2742\":3,\"2745\":6,\"2748\":1,\"2750\":1,\"2759\":3,\"2779\":3,\"2795\":1,\"2808\":2,\"2810\":2,\"2821\":2,\"2873\":4,\"2921\":2,\"2938\":4,\"2969\":5,\"2970\":4,\"2971\":2,\"2983\":2,\"2986\":1,\"2989\":2,\"3002\":5,\"3003\":3,\"3005\":3,\"3007\":6,\"3010\":1,\"3019\":1,\"3020\":2,\"3021\":1,\"3034\":2,\"3086\":1,\"3087\":3,\"3097\":3,\"3120\":3,\"3125\":1,\"3159\":2,\"3170\":1,\"3190\":1,\"3212\":2,\"3215\":2,\"3217\":1,\"3240\":3,\"3241\":2}}],[\"thenreturn\",{\"1\":{\"3166\":1}}],[\"then\",{\"1\":{\"1831\":2,\"3240\":2}}],[\"thencomparing\",{\"1\":{\"1182\":1}}],[\"thenaccept\",{\"1\":{\"471\":1,\"491\":2}}],[\"thenapply\",{\"1\":{\"471\":1,\"491\":2}}],[\"these\",{\"1\":{\"993\":1}}],[\"there\",{\"1\":{\"283\":1,\"1764\":1}}],[\"the\",{\"0\":{\"1664\":1},\"1\":{\"28\":1,\"122\":2,\"235\":1,\"283\":1,\"501\":1,\"993\":1,\"994\":2,\"995\":1,\"1004\":1,\"1005\":1,\"1578\":10,\"1586\":1,\"1677\":3,\"1764\":1,\"1788\":2}}],[\"tohexstring\",{\"1\":{\"3215\":1}}],[\"toheader\",{\"1\":{\"1094\":3,\"3190\":3,\"3199\":3,\"3205\":6}}],[\"totag\",{\"1\":{\"3205\":1}}],[\"totalread\",{\"1\":{\"2837\":3,\"2849\":4}}],[\"totalconsumed++\",{\"1\":{\"2466\":1}}],[\"totalconsumed\",{\"1\":{\"2466\":3}}],[\"totaltime\",{\"1\":{\"2327\":6}}],[\"totalsizecap>\",{\"1\":{\"1564\":1}}],[\"total\",{\"1\":{\"997\":1,\"1833\":15,\"1881\":2,\"1885\":3,\"3025\":3,\"3097\":2}}],[\"totalmemory\",{\"1\":{\"694\":4}}],[\"to与from相同\",{\"1\":{\"3199\":1}}],[\"toread\",{\"1\":{\"2873\":5}}],[\"tomillis\",{\"1\":{\"2467\":1}}],[\"tomap\",{\"1\":{\"2408\":2}}],[\"tomcatwithgeoserver\",{\"1\":{\"1794\":1}}],[\"tomcat\",{\"1\":{\"1588\":1,\"1589\":1,\"1590\":6}}],[\"tomcat通过自定义类加载器实现了web应用之间的类隔离\",{\"1\":{\"750\":1}}],[\"tomcat<\",{\"1\":{\"416\":1}}],[\"toindex\",{\"1\":{\"2314\":1}}],[\"tointegerarray\",{\"1\":{\"286\":1}}],[\"todto\",{\"1\":{\"2007\":1}}],[\"today\",{\"1\":{\"545\":9}}],[\"toggleclass\",{\"1\":{\"1463\":2}}],[\"tovebro$vejtuis6utdvivgzbmdhj\",{\"1\":{\"1422\":1}}],[\"toaddress\",{\"1\":{\"1094\":2,\"3190\":2,\"3199\":2,\"3205\":1}}],[\"toarray\",{\"1\":{\"286\":1,\"473\":2,\"2314\":2,\"2436\":2,\"2509\":4}}],[\"touri\",{\"1\":{\"3190\":4}}],[\"touch\",{\"1\":{\"1369\":1,\"1370\":1,\"1371\":1,\"1372\":1,\"1373\":1,\"1511\":1,\"1734\":1,\"3246\":1}}],[\"touser\",{\"1\":{\"1094\":3}}],[\"touppercase\",{\"1\":{\"543\":1,\"553\":2,\"557\":1,\"2191\":1,\"2299\":1,\"3000\":1,\"3041\":1}}],[\"tobytearray\",{\"1\":{\"729\":1,\"746\":1,\"747\":1,\"2844\":1,\"3085\":1}}],[\"tobean\",{\"1\":{\"279\":1}}],[\"top的负载类似每秒的运行队列\",{\"1\":{\"1887\":1}}],[\"topology\",{\"1\":{\"1638\":1}}],[\"top++\",{\"1\":{\"1162\":1}}],[\"top\",{\"0\":{\"1882\":1},\"1\":{\"1162\":6,\"1417\":5,\"1440\":1,\"1469\":1,\"1835\":1,\"2506\":2,\"2544\":5,\"2554\":4,\"3245\":1}}],[\"toprintable\",{\"1\":{\"711\":2}}],[\"topics\",{\"1\":{\"1531\":1,\"1532\":2,\"1533\":2,\"1535\":2}}],[\"topic\",{\"1\":{\"122\":1,\"1532\":2,\"1534\":2,\"1535\":3}}],[\"tostringcache\",{\"1\":{\"2268\":1}}],[\"tostring\",{\"0\":{\"2216\":1},\"1\":{\"283\":2,\"574\":1,\"1040\":1,\"1041\":1,\"1056\":1,\"1068\":1,\"1087\":2,\"1151\":1,\"1164\":1,\"1182\":1,\"1225\":1,\"1295\":2,\"1962\":1,\"2147\":2,\"2149\":1,\"2151\":2,\"2202\":1,\"2207\":1,\"2216\":3,\"2223\":4,\"2224\":2,\"2227\":1,\"2228\":3,\"2230\":2,\"2231\":2,\"2232\":1,\"2233\":1,\"2234\":6,\"2265\":5,\"2266\":1,\"2280\":2,\"2329\":2,\"2577\":1,\"2723\":1,\"2831\":1,\"2857\":1,\"2951\":1,\"2968\":1,\"2983\":1,\"3000\":1,\"3002\":1,\"3007\":2,\"3086\":3,\"3136\":2,\"3162\":2,\"3190\":1,\"3205\":4,\"3209\":2,\"3212\":2,\"3215\":2}}],[\"tostringserializer\",{\"1\":{\"282\":3}}],[\"tolerations\",{\"1\":{\"1638\":3}}],[\"tolerance\",{\"1\":{\"43\":1}}],[\"tolowercase\",{\"1\":{\"1041\":1,\"1165\":2,\"2999\":1,\"3000\":1}}],[\"tolist\",{\"1\":{\"269\":1,\"472\":1,\"543\":2,\"553\":2,\"1178\":1,\"1190\":1,\"1198\":1,\"2329\":3,\"2340\":1,\"2408\":1,\"2448\":1,\"3209\":1}}],[\"tojsonstring\",{\"1\":{\"267\":2,\"285\":1}}],[\"toolkit\",{\"1\":{\"1564\":6}}],[\"tool\",{\"1\":{\"1551\":2,\"1635\":2,\"1637\":3}}],[\"tools\",{\"1\":{\"302\":1,\"1419\":1,\"1420\":2,\"1483\":2,\"1498\":2,\"1499\":2,\"1731\":1,\"3100\":1}}],[\"too\",{\"1\":{\"125\":27,\"1513\":1}}],[\"token以达到未退出浏览器未关闭一直登录的状态\",{\"1\":{\"306\":1}}],[\"token就过期\",{\"1\":{\"306\":1}}],[\"token续期\",{\"1\":{\"306\":1}}],[\"token\",{\"1\":{\"122\":1,\"279\":21,\"303\":8,\"304\":4,\"305\":3,\"306\":22,\"307\":2,\"430\":4,\"456\":11,\"2020\":1,\"3273\":4}}],[\"to\",{\"0\":{\"1665\":2,\"1666\":1},\"1\":{\"100\":2,\"102\":2,\"108\":1,\"110\":1,\"113\":1,\"122\":1,\"125\":8,\"169\":1,\"186\":2,\"228\":1,\"235\":1,\"264\":1,\"434\":1,\"746\":1,\"973\":1,\"993\":3,\"994\":3,\"1004\":3,\"1005\":1,\"1092\":1,\"1281\":1,\"1513\":1,\"1569\":2,\"1573\":1,\"1577\":1,\"1578\":3,\"1677\":2,\"1775\":1,\"1788\":3,\"1821\":1,\"1829\":1,\"1831\":1,\"1949\":1,\"1962\":1,\"2288\":1,\"2440\":2,\"2441\":1,\"2935\":1,\"2947\":1,\"3005\":3,\"3010\":1,\"3104\":1,\"3180\":2,\"3208\":1,\"3223\":1,\"3224\":1,\"3244\":1,\"3282\":1}}],[\"tocollection\",{\"1\":{\"2452\":1}}],[\"tochararray\",{\"1\":{\"1164\":1,\"2198\":1,\"2207\":1,\"2554\":1,\"2857\":1,\"3000\":1,\"3214\":3,\"3237\":2}}],[\"toc\",{\"1\":{\"8\":1}}],[\"timing\",{\"1\":{\"3205\":1}}],[\"timsort最初由python引入\",{\"1\":{\"2357\":1}}],[\"timsort能很好地利用这一点\",{\"1\":{\"2357\":1}}],[\"timsort是一种自适应的排序算法\",{\"1\":{\"2357\":1}}],[\"timsort算法原理\",{\"1\":{\"2357\":1}}],[\"time1\",{\"1\":{\"3269\":1}}],[\"timebasedrollingpolicy\",{\"1\":{\"2072\":1}}],[\"time+\",{\"1\":{\"1882\":1}}],[\"time`\",{\"1\":{\"1687\":16}}],[\"timezone\",{\"1\":{\"1535\":1,\"1548\":1,\"1697\":1}}],[\"timezone>\",{\"1\":{\"999\":1}}],[\"times\",{\"1\":{\"774\":1}}],[\"timestamp\",{\"1\":{\"38\":1,\"125\":3,\"232\":12,\"1249\":4,\"1535\":1,\"1764\":2,\"3103\":1,\"3165\":1,\"3215\":2}}],[\"timeunit\",{\"1\":{\"625\":1,\"626\":2,\"1186\":1,\"2465\":2,\"2467\":7,\"2522\":2,\"2523\":2,\"2524\":1,\"3082\":1,\"3225\":1,\"3235\":1}}],[\"timed\",{\"1\":{\"605\":1,\"609\":1}}],[\"time包下\",{\"1\":{\"545\":1}}],[\"time的时间至少是ping指令频度的5到10倍\",{\"1\":{\"172\":1}}],[\"timeout`\",{\"1\":{\"1687\":2}}],[\"timeoutstartsec=0\",{\"1\":{\"1620\":1,\"1752\":1}}],[\"timeoutevent\",{\"1\":{\"1094\":2,\"3190\":2,\"3208\":4,\"3217\":5}}],[\"timeout=30000\",{\"1\":{\"445\":1}}],[\"timeoutdate\",{\"1\":{\"307\":2}}],[\"timeout\",{\"0\":{\"1339\":1},\"1\":{\"125\":1,\"172\":1,\"178\":1,\"186\":1,\"216\":2,\"279\":2,\"1339\":1,\"1385\":1,\"1409\":3,\"1417\":1,\"1595\":1,\"2920\":1,\"3208\":1}}],[\"time\",{\"1\":{\"122\":5,\"125\":1,\"193\":1,\"307\":2,\"1469\":2,\"1470\":1,\"1570\":1,\"1648\":2,\"1650\":20,\"1661\":2,\"1685\":2,\"1698\":2,\"1713\":22,\"1881\":2,\"1882\":1,\"1907\":3,\"2462\":2,\"3002\":3,\"3053\":2,\"3165\":1,\"3282\":1}}],[\"tinyint\",{\"1\":{\"1687\":4}}],[\"tid\",{\"1\":{\"1564\":3}}],[\"ti\",{\"1\":{\"1531\":1}}],[\"ticket\",{\"1\":{\"993\":1,\"994\":1}}],[\"titles\",{\"1\":{\"1443\":3,\"1444\":3,\"1829\":2}}],[\"title>\",{\"1\":{\"1431\":1,\"1433\":1,\"1434\":1,\"1435\":1,\"1440\":1,\"1447\":1,\"1450\":1,\"1455\":1,\"1456\":1,\"1457\":1,\"1458\":1,\"1459\":1,\"1461\":1,\"1462\":1,\"1463\":1,\"1464\":1,\"1467\":1,\"1469\":1}}],[\"title\",{\"1\":{\"28\":3,\"1443\":2,\"1444\":2}}],[\"tip\",{\"1\":{\"0\":1}}],[\"介绍\",{\"0\":{\"2\":1,\"12\":1,\"297\":1,\"303\":1},\"1\":{\"12\":1,\"13\":1}}],[\"门户主页\",{\"0\":{\"1\":1}}],[\"但该指令必定执行\",{\"1\":{\"3246\":1}}],[\"但连接建立和关闭有额外开销\",{\"1\":{\"3227\":1}}],[\"但能被编译器或工具读取并处理\",{\"1\":{\"3132\":1}}],[\"但能保证元素有序\",{\"1\":{\"2391\":1}}],[\"但能保持元素的插入顺序\",{\"1\":{\"2391\":1}}],[\"但支持双向读写和非阻塞操作\",{\"1\":{\"3117\":1}}],[\"但支持unicode空白字符\",{\"1\":{\"472\":1}}],[\"但由于操作系统支持有限\",{\"1\":{\"3091\":1}}],[\"但编程复杂度高\",{\"1\":{\"3080\":1}}],[\"但具有传输速度快\",{\"1\":{\"3062\":1}}],[\"但具有双向性和异步操作能力\",{\"1\":{\"2915\":1}}],[\"但存在类型安全隐患\",{\"1\":{\"3035\":1}}],[\"但存在以下关键区别\",{\"1\":{\"2454\":1}}],[\"但反射提供了动态操作能力\",{\"1\":{\"2992\":1}}],[\"但操作会导致异常\",{\"1\":{\"2920\":1}}],[\"但显式调用flush\",{\"1\":{\"2860\":1}}],[\"但以字符为单位处理数据\",{\"1\":{\"2833\":1}}],[\"但外部类不能访问内部类的private成员\",{\"1\":{\"2801\":1}}],[\"但平均下来每个操作的复杂度较低的情况\",{\"1\":{\"2704\":1}}],[\"但值是强引用\",{\"1\":{\"2693\":1}}],[\"但有重要区别\",{\"1\":{\"2984\":1}}],[\"但有以下关键区别\",{\"1\":{\"2687\":1}}],[\"但有时候因为源码编译依赖问题\",{\"1\":{\"1471\":1}}],[\"但效率更高\",{\"1\":{\"2599\":1}}],[\"但持续优化哈希冲突处理\",{\"1\":{\"2596\":1}}],[\"但持续优化性能\",{\"1\":{\"2569\":1}}],[\"但随机访问性能较差\",{\"1\":{\"2564\":1}}],[\"但性能较差\",{\"1\":{\"2561\":1}}],[\"但性能通常比聚合管道低\",{\"1\":{\"63\":1}}],[\"但arraydeque性能持续优化\",{\"1\":{\"2549\":1}}],[\"但最终会达到一致\",{\"1\":{\"2529\":1}}],[\"但最坏情况是o\",{\"1\":{\"2357\":1}}],[\"但可以减少udp环境下的重传次数\",{\"1\":{\"3227\":1}}],[\"但可以通过completablefuture等方式模拟\",{\"1\":{\"2921\":1}}],[\"但可以通过第三方库如icu4j或juniversalchardet\",{\"1\":{\"2885\":1}}],[\"但可作为替代方案\",{\"1\":{\"2513\":1}}],[\"但可能有重复消息\",{\"1\":{\"3227\":1}}],[\"但可能导致栈溢出\",{\"1\":{\"2724\":1}}],[\"但可能导致已回收键对应的条目不会立即从表中移除\",{\"1\":{\"2688\":1}}],[\"但可能在未来版本中使用\",{\"1\":{\"2081\":1}}],[\"但可能会导致内存占用过高\",{\"1\":{\"212\":1}}],[\"但原因不同\",{\"1\":{\"2511\":1}}],[\"但所有方法都通过同步包装器实现线程安全\",{\"1\":{\"2456\":1}}],[\"但所有方法都添加了synchronized修饰\",{\"1\":{\"2267\":1}}],[\"但单次复制成本更低\",{\"1\":{\"2455\":1}}],[\"但更推荐使用collections\",{\"1\":{\"2454\":1}}],[\"但list本身仍占用内存\",{\"1\":{\"2451\":1}}],[\"但并发性能较差\",{\"1\":{\"2392\":1,\"2697\":1}}],[\"但并发执行\",{\"1\":{\"777\":2}}],[\"但元素无序\",{\"1\":{\"2391\":1}}],[\"但元素对象仍可变\",{\"1\":{\"2358\":1}}],[\"但treeset不允许\",{\"1\":{\"2383\":1}}],[\"但集合本身可变\",{\"1\":{\"2358\":1}}],[\"但需要额外处理过期条目\",{\"1\":{\"2689\":1}}],[\"但需要额外空间\",{\"1\":{\"2357\":1}}],[\"但需要显式指定依赖文件的路径\",{\"1\":{\"925\":1}}],[\"但它们协同工作以保证sip消息的可靠传输\",{\"1\":{\"3227\":1}}],[\"但它们可能在未来的版本中被赋予新的含义\",{\"1\":{\"2085\":1}}],[\"但它们是保留字\",{\"1\":{\"2084\":1}}],[\"但class不是\",{\"1\":{\"2084\":1}}],[\"但上方的方法治标不治本\",{\"1\":{\"1788\":1}}],[\"但从节点不能操作\",{\"1\":{\"1764\":1}}],[\"但相应的mongod的整体性能也会有所下降\",{\"1\":{\"1739\":1}}],[\"但通过自制应用统一管理各服务应用更方便管理\",{\"1\":{\"1713\":1}}],[\"但我们需要将数据存在当前服务器的文件目录下\",{\"1\":{\"1661\":1}}],[\"但建议docker自行安装\",{\"1\":{\"1632\":1}}],[\"但实际开发中一般是在linux环境中\",{\"1\":{\"1574\":1}}],[\"但实现方式有所不同\",{\"1\":{\"533\":1}}],[\"但如果想使用\",{\"1\":{\"1449\":1}}],[\"但如果你用的是台式机呢\",{\"1\":{\"136\":1}}],[\"但机制不同\",{\"1\":{\"1287\":1}}],[\"但顺序不同\",{\"1\":{\"1170\":1}}],[\"但jvm加载类时会被丢弃\",{\"1\":{\"1065\":1}}],[\"但java\",{\"1\":{\"506\":1}}],[\"但仍然编译测试代码\",{\"1\":{\"950\":1}}],[\"但增加单次gc时间\",{\"1\":{\"809\":1,\"843\":1,\"877\":1,\"911\":1}}],[\"但比并发标记短\",{\"1\":{\"777\":1}}],[\"但被nio使用\",{\"1\":{\"706\":1}}],[\"但线程优先级不能保证执行顺序\",{\"1\":{\"606\":1}}],[\"但无法获取索引\",{\"1\":{\"1160\":1}}],[\"但无法改变原引用的指向\",{\"1\":{\"1058\":1}}],[\"但无法继续前进\",{\"1\":{\"590\":1}}],[\"但无法直接指出哪个变量为null\",{\"1\":{\"499\":1}}],[\"但这需要绕过jvm的访问控制检查\",{\"1\":{\"2988\":1}}],[\"但这个示例展示了nio在网络编程中的基本应用\",{\"1\":{\"2921\":1}}],[\"但这不是推荐做法\",{\"1\":{\"1281\":1}}],[\"但这些类在jvm中被视为不同的类\",{\"1\":{\"750\":1}}],[\"但这些变量必须是final或事实上的final\",{\"1\":{\"552\":1}}],[\"但这也是\",{\"1\":{\"304\":1}}],[\"但goroutine使用channel进行通信\",{\"1\":{\"533\":1}}],[\"但提供禁用选项\",{\"1\":{\"514\":1}}],[\"但user不为null\",{\"1\":{\"501\":1}}],[\"但在实际工程中\",{\"1\":{\"2720\":1}}],[\"但在实际应用中容易出现问题\",{\"1\":{\"3222\":1}}],[\"但在实际应用中\",{\"1\":{\"1238\":1}}],[\"但在首次添加元素时才会初始化数组\",{\"1\":{\"2355\":1}}],[\"但在使用时仍需注意\",{\"1\":{\"492\":1}}],[\"但在生产环境下却启动不起来\",{\"1\":{\"121\":1}}],[\"但缺点是不能像编程式事务管理那样精细地控制事务\",{\"1\":{\"350\":1}}],[\"但缺点是代码会变得更加复杂\",{\"1\":{\"349\":1}}],[\"但也带来了一些特性限制\",{\"1\":{\"3034\":1}}],[\"但也给依赖反射的框架带来了挑战\",{\"1\":{\"1281\":1}}],[\"但也提供了灵活的配置选项以确保兼容性\",{\"1\":{\"507\":1}}],[\"但也是可以加密的\",{\"1\":{\"305\":1}}],[\"但也会增加性能开销\",{\"1\":{\"74\":1}}],[\"但也会增加系统的复杂性\",{\"1\":{\"74\":1}}],[\"但也会增加写操作的开销\",{\"1\":{\"74\":1}}],[\"但大写命令更符合行业惯例\",{\"1\":{\"212\":1}}],[\"但是不影响当前镜像\",{\"1\":{\"3246\":1}}],[\"但是不能超过列表的实际大小math\",{\"1\":{\"288\":1}}],[\"但是不能深究\",{\"1\":{\"0\":1}}],[\"但是我曾在处理拷贝大量数据\",{\"1\":{\"1887\":1}}],[\"但是我们还有另一种更加优雅的方式\",{\"1\":{\"1349\":1}}],[\"但是我们依然可以基于\",{\"1\":{\"306\":1}}],[\"但是当前不能持久化到磁盘disk\",{\"1\":{\"1788\":1}}],[\"但是搭建私有镜像默认使用的是\",{\"1\":{\"1666\":1}}],[\"但是会有几十分钟的空窗时间\",{\"1\":{\"1632\":1}}],[\"但是一旦出现就要卸载集群重装\",{\"1\":{\"1632\":1}}],[\"但是尽量在安装后再去启用\",{\"1\":{\"1632\":1}}],[\"但是动态处理能力不足\",{\"1\":{\"1401\":1}}],[\"但是也存在着一个问题\",{\"1\":{\"1396\":1}}],[\"但是处理动态页面则很鸡肋\",{\"1\":{\"1382\":1}}],[\"但是\",{\"1\":{\"1271\":1,\"1763\":1,\"2975\":1}}],[\"但是被迫实现这个方法\",{\"1\":{\"1211\":1}}],[\"但是结合用户登出时客户端删除\",{\"1\":{\"306\":1}}],[\"但是分布式web应用的普及\",{\"1\":{\"304\":1}}],[\"但是要注意也是性能瓶颈\",{\"1\":{\"191\":1}}],[\"但是跟之前的场景有点不太一样\",{\"1\":{\"191\":1}}],[\"但是缓存中又没有\",{\"1\":{\"189\":1}}],[\"但是更改了数据的存储位置\",{\"1\":{\"140\":1}}],[\"但是记录的是你所有的操作过程\",{\"1\":{\"137\":1}}],[\"但是把它保存下来不是你的目的\",{\"1\":{\"136\":1}}],[\"但是使用\",{\"1\":{\"129\":1}}],[\"但却是\",{\"1\":{\"125\":1}}],[\"但\",{\"1\":{\"125\":1}}],[\"但未定义为not\",{\"1\":{\"125\":1}}],[\"但不依赖于具体类型时\",{\"1\":{\"3038\":1}}],[\"但不包括继承的方法\",{\"1\":{\"2983\":1}}],[\"但不应在finally中使用return语句\",{\"1\":{\"2959\":1}}],[\"但不应替代良好的编程实践\",{\"1\":{\"517\":1}}],[\"但不过度使用异常控制流程\",{\"1\":{\"2958\":1}}],[\"但不保证元素顺序\",{\"1\":{\"2591\":1}}],[\"但不会抛出concurrentmodificationexception\",{\"1\":{\"2543\":1}}],[\"但不会所有配置都会加载而是有条件的加载\",{\"1\":{\"419\":1,\"463\":1}}],[\"但不适合需要频繁修改的场景\",{\"1\":{\"2395\":1}}],[\"但不要在生产环境中这样做\",{\"1\":{\"966\":1}}],[\"但不能提供水平扩展\",{\"1\":{\"74\":1}}],[\"但不需要固定的\",{\"1\":{\"37\":1}}],[\"但后期的维护和补丁也不可或缺\",{\"1\":{\"0\":1}}],[\"碎片化\",{\"1\":{\"0\":1}}],[\"盖好一栋大厦的关键在于打好地基\",{\"1\":{\"0\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const u=bt[s];e==="suggest"?self.postMessage([e,o,tt(t,u,n)]):e==="search"?self.postMessage([e,o,Z(t,u,n)]):self.postMessage({suggestions:[e,o,tt(t,u,n)],results:[e,o,Z(t,u,n)]})};
//# sourceMappingURL=index.js.map
