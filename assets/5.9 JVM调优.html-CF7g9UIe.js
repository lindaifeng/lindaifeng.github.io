import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as e,f as l}from"./app-yhW6njzi.js";const s={},n=l(`<h1 id="_5-6-jvm调优" tabindex="-1"><a class="header-anchor" href="#_5-6-jvm调优"><span>5.6 JVM调优</span></a></h1><h2 id="核心理论" tabindex="-1"><a class="header-anchor" href="#核心理论"><span>核心理论</span></a></h2><h3 id="_1-1-jvm参数分类" tabindex="-1"><a class="header-anchor" href="#_1-1-jvm参数分类"><span>1.1 JVM参数分类</span></a></h3><p>JVM参数根据稳定性和标准化程度分为三类：</p><h4 id="_1-1-1-标准参数-standard-options" tabindex="-1"><a class="header-anchor" href="#_1-1-1-标准参数-standard-options"><span>1.1.1 标准参数（Standard Options）</span></a></h4><ul><li>以<code>-</code>开头，所有JVM实现都必须支持</li><li>保持向后兼容</li><li>示例：<code>-version</code>、<code>-help</code>、<code>-cp</code>/<code>-classpath</code></li></ul><h4 id="_1-1-2-非标准参数-non-standard-options" tabindex="-1"><a class="header-anchor" href="#_1-1-2-非标准参数-non-standard-options"><span>1.1.2 非标准参数（Non-Standard Options）</span></a></h4><ul><li>以<code>-X</code>开头，特定JVM实现支持的扩展参数</li><li>可能在不同版本间变化</li><li>示例：<code>-Xms</code>、<code>-Xmx</code>、<code>-Xmn</code>、<code>-Xss</code></li></ul><h4 id="_1-1-3-高级参数-advanced-options" tabindex="-1"><a class="header-anchor" href="#_1-1-3-高级参数-advanced-options"><span>1.1.3 高级参数（Advanced Options）</span></a></h4><ul><li>以<code>-XX:</code>开头，用于高级调优和调试</li><li>稳定性差，可能随时移除</li><li>分为布尔型参数和键值对参数： <ul><li>布尔型：<code>-XX:+&lt;option&gt;</code>（启用）、<code>-XX:-&lt;option&gt;</code>（禁用）</li><li>键值对：<code>-XX:&lt;option&gt;=&lt;value&gt;</code></li></ul></li></ul><h3 id="_1-2-内存管理参数" tabindex="-1"><a class="header-anchor" href="#_1-2-内存管理参数"><span>1.2 内存管理参数</span></a></h3><h4 id="_1-2-1-堆内存参数" tabindex="-1"><a class="header-anchor" href="#_1-2-1-堆内存参数"><span>1.2.1 堆内存参数</span></a></h4><ul><li><code>-Xms&lt;size&gt;</code>：初始堆大小，默认物理内存的1/64</li><li><code>-Xmx&lt;size&gt;</code>：最大堆大小，默认物理内存的1/4</li><li><code>-Xmn&lt;size&gt;</code>：新生代大小（Eden + 2*Survivor）</li><li><code>-XX:NewRatio=&lt;n&gt;</code>：新生代与老年代比例（老年代/新生代 = n），默认2</li><li><code>-XX:SurvivorRatio=&lt;n&gt;</code>：Eden区与Survivor区比例（Eden/Survivor = n），默认8</li><li><code>-XX:MetaspaceSize=&lt;size&gt;</code>：元空间初始大小</li><li><code>-XX:MaxMetaspaceSize=&lt;size&gt;</code>：元空间最大大小（默认无限制）</li></ul><h4 id="_1-2-2-非堆内存参数" tabindex="-1"><a class="header-anchor" href="#_1-2-2-非堆内存参数"><span>1.2.2 非堆内存参数</span></a></h4><ul><li><code>-XX:PermSize=&lt;size&gt;</code>：永久代初始大小（JDK8及以上已移除，使用元空间）</li><li><code>-XX:MaxPermSize=&lt;size&gt;</code>：永久代最大大小（JDK8及以上已移除）</li><li><code>-Xss&lt;size&gt;</code>：每个线程的栈大小，默认1M</li></ul><h3 id="_1-3-gc相关参数" tabindex="-1"><a class="header-anchor" href="#_1-3-gc相关参数"><span>1.3 GC相关参数</span></a></h3><h4 id="_1-3-1-垃圾收集器选择" tabindex="-1"><a class="header-anchor" href="#_1-3-1-垃圾收集器选择"><span>1.3.1 垃圾收集器选择</span></a></h4><ul><li><code>-XX:+UseSerialGC</code>：使用Serial + Serial Old收集器组合</li><li><code>-XX:+UseParNewGC</code>：使用ParNew + Serial Old收集器组合</li><li><code>-XX:+UseConcMarkSweepGC</code>：使用ParNew + CMS + Serial Old收集器组合</li><li><code>-XX:+UseParallelGC</code>：使用Parallel Scavenge + Parallel Old收集器组合</li><li><code>-XX:+UseG1GC</code>：使用G1收集器</li></ul><h4 id="_1-3-2-gc日志参数" tabindex="-1"><a class="header-anchor" href="#_1-3-2-gc日志参数"><span>1.3.2 GC日志参数</span></a></h4><ul><li><code>-XX:+PrintGC</code>：打印简单GC日志</li><li><code>-XX:+PrintGCDetails</code>：打印详细GC日志</li><li><code>-XX:+PrintGCDateStamps</code>：打印GC发生的时间戳</li><li><code>-Xloggc:&lt;file&gt;</code>：将GC日志输出到指定文件</li><li><code>-XX:+HeapDumpOnOutOfMemoryError</code>：OOM时生成堆转储文件</li><li><code>-XX:HeapDumpPath=&lt;path&gt;</code>：堆转储文件路径</li></ul><h4 id="_1-3-3-gc调优参数" tabindex="-1"><a class="header-anchor" href="#_1-3-3-gc调优参数"><span>1.3.3 GC调优参数</span></a></h4><ul><li><code>-XX:MaxGCPauseMillis=&lt;n&gt;</code>：G1收集器目标最大停顿时间</li><li><code>-XX:GCTimeRatio=&lt;n&gt;</code>：Parallel Scavenge收集器吞吐量目标（1/(1+n)）</li><li><code>-XX:ParallelGCThreads=&lt;n&gt;</code>：并行GC线程数</li><li><code>-XX:ConcGCThreads=&lt;n&gt;</code>：CMS或G1并发GC线程数</li></ul><h3 id="_1-4-其他常用参数" tabindex="-1"><a class="header-anchor" href="#_1-4-其他常用参数"><span>1.4 其他常用参数</span></a></h3><ul><li><code>-XX:+DisableExplicitGC</code>：禁用System.gc()</li><li><code>-XX:+UseCompressedOops</code>：启用压缩普通对象指针（32位指针表示64位地址）</li><li><code>-XX:+PrintCommandLineFlags</code>：打印JVM启动时的参数</li><li><code>-D&lt;name&gt;=&lt;value&gt;</code>：设置系统属性</li></ul><h2 id="代码实践" tabindex="-1"><a class="header-anchor" href="#代码实践"><span>代码实践</span></a></h2><h3 id="_2-1-查看jvm参数" tabindex="-1"><a class="header-anchor" href="#_2-1-查看jvm参数"><span>2.1 查看JVM参数</span></a></h3><h4 id="_2-1-1-查看jvm默认参数" tabindex="-1"><a class="header-anchor" href="#_2-1-1-查看jvm默认参数"><span>2.1.1 查看JVM默认参数</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -XX:+PrintCommandLineFlags</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -version</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_2-1-2-查看进程jvm参数" tabindex="-1"><a class="header-anchor" href="#_2-1-2-查看进程jvm参数"><span>2.1.2 查看进程JVM参数</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 查找Java进程ID</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">jps</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 查看指定进程的JVM参数</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">jinfo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">pi</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">d&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-设置jvm参数示例" tabindex="-1"><a class="header-anchor" href="#_2-2-设置jvm参数示例"><span>2.2 设置JVM参数示例</span></a></h3><h4 id="_2-2-1-基本堆内存配置" tabindex="-1"><a class="header-anchor" href="#_2-2-1-基本堆内存配置"><span>2.2.1 基本堆内存配置</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Xms512m</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Xmx1024m</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -jar</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> app.jar</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_2-2-2-g1收集器配置" tabindex="-1"><a class="header-anchor" href="#_2-2-2-g1收集器配置"><span>2.2.2 G1收集器配置</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Xms2g</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Xmx2g</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -XX:+UseG1GC</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -XX:MaxGCPauseMillis=200</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -XX:+PrintGCDetails</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Xloggc:g1-gc.log</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -jar</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> app.jar</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_2-2-3-生产环境常用配置" tabindex="-1"><a class="header-anchor" href="#_2-2-3-生产环境常用配置"><span>2.2.3 生产环境常用配置</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -server</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Xms4g</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Xmx4g</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Xmn1g</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -XX:SurvivorRatio=8</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -XX:+UseG1GC</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -XX:MaxGCPauseMillis=100</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -XX:+PrintGCDetails</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -XX:+PrintGCDateStamps</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Xloggc:/var/log/app/gc.log</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -XX:+HeapDumpOnOutOfMemoryError</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -XX:HeapDumpPath=/var/log/app/heapdump.hprof</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -jar</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> app.jar</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_2-3-分析jvm参数配置" tabindex="-1"><a class="header-anchor" href="#_2-3-分析jvm参数配置"><span>2.3 分析JVM参数配置</span></a></h3><p>使用jconsole或jvisualvm连接Java进程，查看内存配置是否符合预期：</p><ol><li>启动jvisualvm</li><li>连接目标Java进程</li><li>在&quot;监视&quot;标签页查看堆内存使用情况</li><li>在&quot;JVM参数&quot;标签页查看当前JVM参数</li></ol><h2 id="设计思想" tabindex="-1"><a class="header-anchor" href="#设计思想"><span>设计思想</span></a></h2><h3 id="_3-1-参数设计的权衡原则" tabindex="-1"><a class="header-anchor" href="#_3-1-参数设计的权衡原则"><span>3.1 参数设计的权衡原则</span></a></h3><p>JVM参数设计体现了多种权衡：</p><ul><li><strong>内存与性能</strong>：更大的堆内存减少GC频率，但增加单次GC时间</li><li><strong>吞吐量与延迟</strong>：Parallel Scavenge关注吞吐量，CMS/G1关注延迟</li><li><strong>默认值与自定义</strong>：JVM提供合理默认值，同时允许根据应用特性自定义</li><li><strong>简单性与灵活性</strong>：标准参数简单易用，高级参数提供灵活调优</li></ul><h3 id="_3-2-分代思想在参数中的体现" tabindex="-1"><a class="header-anchor" href="#_3-2-分代思想在参数中的体现"><span>3.2 分代思想在参数中的体现</span></a></h3><p>内存分代思想在JVM参数中得到充分体现：</p><ul><li>NewRatio和SurvivorRatio参数控制新生代与老年代比例</li><li>不同代有独立的GC参数和收集器选择</li><li>新生代大小直接影响Minor GC频率和耗时</li></ul><h3 id="_3-3-自适应调优理念" tabindex="-1"><a class="header-anchor" href="#_3-3-自适应调优理念"><span>3.3 自适应调优理念</span></a></h3><p>Parallel Scavenge收集器引入自适应调优理念：</p><ul><li>通过-XX:+UseAdaptiveSizePolicy启用</li><li>JVM根据当前系统运行情况自动调整新生代大小、Eden与Survivor比例等参数</li><li>减少人工调优负担，适合对JVM调优不熟悉的场景</li></ul><h2 id="避坑指南" tabindex="-1"><a class="header-anchor" href="#避坑指南"><span>避坑指南</span></a></h2><h3 id="_4-1-堆内存设置不当" tabindex="-1"><a class="header-anchor" href="#_4-1-堆内存设置不当"><span>4.1 堆内存设置不当</span></a></h3><ul><li><strong>内存过小</strong>：频繁GC，甚至OOM 解决：根据应用内存需求合理设置-Xms和-Xmx</li><li><strong>内存过大</strong>：单次GC时间过长，浪费系统资源 解决：堆内存一般不超过物理内存的70%，大内存建议使用G1收集器</li><li><strong>Xms与Xmx不一致</strong>：导致堆内存动态调整，影响性能 解决：生产环境建议将Xms和Xmx设置为相同值</li></ul><h3 id="_4-2-元空间溢出" tabindex="-1"><a class="header-anchor" href="#_4-2-元空间溢出"><span>4.2 元空间溢出</span></a></h3><ul><li>原因：元空间大小未限制，类加载过多导致溢出</li><li>解决：设置-XX:MaxMetaspaceSize限制元空间大小，排查类加载泄漏</li></ul><h3 id="_4-3-过度调优" tabindex="-1"><a class="header-anchor" href="#_4-3-过度调优"><span>4.3 过度调优</span></a></h3><ul><li>问题：盲目调整大量参数，不仅无法提升性能，还可能引入新问题</li><li>解决：遵循&quot;先监控，后调优&quot;原则，只调整有明确优化目标的参数</li></ul><h3 id="_4-4-忽略gc日志" tabindex="-1"><a class="header-anchor" href="#_4-4-忽略gc日志"><span>4.4 忽略GC日志</span></a></h3><ul><li>问题：不开启GC日志，无法分析GC问题</li><li>解决：生产环境务必开启GC日志记录，包括详细信息和时间戳</li></ul><h3 id="_4-5-错误使用废弃参数" tabindex="-1"><a class="header-anchor" href="#_4-5-错误使用废弃参数"><span>4.5 错误使用废弃参数</span></a></h3><ul><li>问题：使用JDK版本中已废弃或移除的参数（如JDK8使用PermSize）</li><li>解决：查阅对应JDK版本的官方文档，确认参数可用性</li></ul><h2 id="深度思考题" tabindex="-1"><a class="header-anchor" href="#深度思考题"><span>深度思考题</span></a></h2><ol><li>为什么建议将-Xms和-Xmx设置为相同值？在什么情况下可能需要设置为不同值？</li><li>如何根据应用特点选择合适的垃圾收集器？</li><li>什么是JVM参数的&quot;黄金比例&quot;？如何确定适合特定应用的参数配置？</li></ol><p>思考题回答：</p><ol><li><p>将-Xms和-Xmx设置为相同值可以避免堆内存动态扩展，减少内存调整带来的性能开销。在以下情况可能需要设置为不同值：</p><ul><li>应用启动初期内存需求小，后期需求增长</li><li>服务器内存资源紧张，需要多个应用共享内存</li><li>开发测试环境，希望节省内存资源</li></ul></li><li><p>选择垃圾收集器应考虑：</p><ul><li>应用类型：桌面应用可容忍较长停顿，优先选择Serial收集器；服务器应用关注吞吐量或延迟</li><li>堆内存大小：大堆内存（&gt;4GB）优先选择G1</li><li>延迟要求：对响应时间敏感的应用选择CMS或G1</li><li>吞吐量要求：批处理应用选择Parallel Scavenge</li><li>JDK版本：JDK9及以上G1为默认收集器，JDK17引入ZGC/Shenandoah等低延迟收集器</li></ul></li><li><p>JVM参数的&quot;黄金比例&quot;是指根据应用特性找到的最优参数组合，没有统一标准。确定方法：</p><ul><li>基准测试：建立性能基准，测量不同参数组合的性能指标</li><li>监控分析：收集生产环境GC日志、内存使用情况</li><li>逐步调整：一次只调整一个参数，观察影响</li><li>关注瓶颈：优先解决明显的性能瓶颈（如频繁Full GC）</li><li>考虑硬件：根据CPU核心数、内存大小调整并行线程数等参数</li></ul></li></ol>`,65),t=[n];function h(d,r){return e(),a("div",null,t)}const p=i(s,[["render",h],["__file","5.9 JVM调优.html.vue"]]),g=JSON.parse('{"path":"/java/6%E3%80%81JVM%E5%8E%9F%E7%90%86/5.9%20JVM%E8%B0%83%E4%BC%98.html","title":"5.6 JVM调优","lang":"zh-CN","frontmatter":{"description":"5.6 JVM调优 核心理论 1.1 JVM参数分类 JVM参数根据稳定性和标准化程度分为三类： 1.1.1 标准参数（Standard Options） 以-开头，所有JVM实现都必须支持 保持向后兼容 示例：-version、-help、-cp/-classpath 1.1.2 非标准参数（Non-Standard Options） 以-X开头，特...","head":[["meta",{"property":"og:url","content":"http://blog.lindaifeng.vip/java/6%E3%80%81JVM%E5%8E%9F%E7%90%86/5.9%20JVM%E8%B0%83%E4%BC%98.html"}],["meta",{"property":"og:site_name","content":"文档演示"}],["meta",{"property":"og:title","content":"5.6 JVM调优"}],["meta",{"property":"og:description","content":"5.6 JVM调优 核心理论 1.1 JVM参数分类 JVM参数根据稳定性和标准化程度分为三类： 1.1.1 标准参数（Standard Options） 以-开头，所有JVM实现都必须支持 保持向后兼容 示例：-version、-help、-cp/-classpath 1.1.2 非标准参数（Non-Standard Options） 以-X开头，特..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-04T07:10:04.000Z"}],["meta",{"property":"article:author","content":"清峰"}],["meta",{"property":"article:modified_time","content":"2025-07-04T07:10:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"5.6 JVM调优\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-04T07:10:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"清峰\\",\\"url\\":\\"http://blog.lindaifeng.vip/\\"}]}"]]},"headers":[{"level":2,"title":"核心理论","slug":"核心理论","link":"#核心理论","children":[{"level":3,"title":"1.1 JVM参数分类","slug":"_1-1-jvm参数分类","link":"#_1-1-jvm参数分类","children":[]},{"level":3,"title":"1.2 内存管理参数","slug":"_1-2-内存管理参数","link":"#_1-2-内存管理参数","children":[]},{"level":3,"title":"1.3 GC相关参数","slug":"_1-3-gc相关参数","link":"#_1-3-gc相关参数","children":[]},{"level":3,"title":"1.4 其他常用参数","slug":"_1-4-其他常用参数","link":"#_1-4-其他常用参数","children":[]}]},{"level":2,"title":"代码实践","slug":"代码实践","link":"#代码实践","children":[{"level":3,"title":"2.1 查看JVM参数","slug":"_2-1-查看jvm参数","link":"#_2-1-查看jvm参数","children":[]},{"level":3,"title":"2.2 设置JVM参数示例","slug":"_2-2-设置jvm参数示例","link":"#_2-2-设置jvm参数示例","children":[]},{"level":3,"title":"2.3 分析JVM参数配置","slug":"_2-3-分析jvm参数配置","link":"#_2-3-分析jvm参数配置","children":[]}]},{"level":2,"title":"设计思想","slug":"设计思想","link":"#设计思想","children":[{"level":3,"title":"3.1 参数设计的权衡原则","slug":"_3-1-参数设计的权衡原则","link":"#_3-1-参数设计的权衡原则","children":[]},{"level":3,"title":"3.2 分代思想在参数中的体现","slug":"_3-2-分代思想在参数中的体现","link":"#_3-2-分代思想在参数中的体现","children":[]},{"level":3,"title":"3.3 自适应调优理念","slug":"_3-3-自适应调优理念","link":"#_3-3-自适应调优理念","children":[]}]},{"level":2,"title":"避坑指南","slug":"避坑指南","link":"#避坑指南","children":[{"level":3,"title":"4.1 堆内存设置不当","slug":"_4-1-堆内存设置不当","link":"#_4-1-堆内存设置不当","children":[]},{"level":3,"title":"4.2 元空间溢出","slug":"_4-2-元空间溢出","link":"#_4-2-元空间溢出","children":[]},{"level":3,"title":"4.3 过度调优","slug":"_4-3-过度调优","link":"#_4-3-过度调优","children":[]},{"level":3,"title":"4.4 忽略GC日志","slug":"_4-4-忽略gc日志","link":"#_4-4-忽略gc日志","children":[]},{"level":3,"title":"4.5 错误使用废弃参数","slug":"_4-5-错误使用废弃参数","link":"#_4-5-错误使用废弃参数","children":[]}]},{"level":2,"title":"深度思考题","slug":"深度思考题","link":"#深度思考题","children":[]}],"git":{"createdTime":1751613004000,"updatedTime":1751613004000,"contributors":[{"name":"ldf","email":"1305366530@qq.com","commits":1}]},"readingTime":{"minutes":6.13,"words":1839},"filePathRelative":"java/6、JVM原理/5.9 JVM调优.md","localizedDate":"2025年7月4日","autoDesc":true,"excerpt":"\\n<h2>核心理论</h2>\\n<h3>1.1 JVM参数分类</h3>\\n<p>JVM参数根据稳定性和标准化程度分为三类：</p>\\n<h4>1.1.1 标准参数（Standard Options）</h4>\\n<ul>\\n<li>以<code>-</code>开头，所有JVM实现都必须支持</li>\\n<li>保持向后兼容</li>\\n<li>示例：<code>-version</code>、<code>-help</code>、<code>-cp</code>/<code>-classpath</code></li>\\n</ul>\\n<h4>1.1.2 非标准参数（Non-Standard Options）</h4>"}');export{p as comp,g as data};
