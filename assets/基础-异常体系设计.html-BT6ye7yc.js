import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,b as l,f as i,o as t,r as e}from"./app-D1ifS0UH.js";const h={},k=i('<h1 id="基础-异常体系设计" tabindex="-1"><a class="header-anchor" href="#基础-异常体系设计"><span>基础-异常体系设计</span></a></h1><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>异常是程序运行过程中出现的意外情况，Java通过异常处理机制提供了一种结构化的错误处理方式。Java异常体系以<code>Throwable</code>为根类，分为<code>Error</code>和<code>Exception</code>两大分支，其中<code>Exception</code>又分为受检异常（Checked Exception）和非受检异常（Unchecked Exception）。</p>',3),p=i(`<h2 id="知识要点" tabindex="-1"><a class="header-anchor" href="#知识要点"><span>知识要点</span></a></h2><h3 id="_1-异常体系结构" tabindex="-1"><a class="header-anchor" href="#_1-异常体系结构"><span>1. 异常体系结构</span></a></h3><p>Java异常体系的核心类层次结构如下：</p><ul><li><code>Throwable</code>: 所有错误和异常的父类，包含异常信息和堆栈跟踪</li><li><code>Error</code>: 表示严重错误，如<code>OutOfMemoryError</code>，程序通常无法恢复</li><li><code>Exception</code>: 表示程序可以处理的异常 <ul><li><code>RuntimeException</code>: 非受检异常，编译器不强制捕获</li><li>其他Exception子类: 受检异常，编译器强制要求捕获或声明抛出</li></ul></li></ul><h3 id="_2-异常的分类" tabindex="-1"><a class="header-anchor" href="#_2-异常的分类"><span>2. 异常的分类</span></a></h3><ul><li><strong>受检异常（Checked Exception）</strong>: 编译期检查的异常，必须显式捕获或声明抛出，如<code>IOException</code>、<code>ClassNotFoundException</code></li><li><strong>非受检异常（Unchecked Exception）</strong>: 运行时异常，编译器不强制处理，通常由程序逻辑错误导致，如<code>NullPointerException</code>、<code>ArrayIndexOutOfBoundsException</code></li></ul><h3 id="_3-异常的基本使用" tabindex="-1"><a class="header-anchor" href="#_3-异常的基本使用"><span>3. 异常的基本使用</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> java.io.FileInputStream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> java.io.FileNotFoundException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> java.io.IOException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> * 异常处理基本示例</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ExceptionBasicExample</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    /**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">     * 读取文件内容</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">     * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">@param</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> filePath</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> 文件路径</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">     * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">@throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> FileNotFoundException</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> 如果文件不存在</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">     * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">@throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> IOException</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> 如果读取文件时发生错误</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">     */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> readFile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> filePath</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> FileNotFoundException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> IOException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        FileInputStream</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> fis</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            fis </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> FileInputStream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(filePath);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> data</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> fis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">read</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (data </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">((</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">char</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) data);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                data </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> fis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">read</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">finally</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">            // 确保资源关闭</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (fis </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                    fis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">close</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">IOException</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                    e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">printStackTrace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    /**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">     * 演示运行时异常</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">     */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> demonstrateRuntimeException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> str</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 会抛出NullPointerException，无需显式捕获</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="知识扩展" tabindex="-1"><a class="header-anchor" href="#知识扩展"><span>知识扩展</span></a></h2><h3 id="设计思想" tabindex="-1"><a class="header-anchor" href="#设计思想"><span>设计思想</span></a></h3><p>异常体系设计遵循了以下原则：</p><ol><li><strong>层次化</strong>: 通过类继承构建异常体系，便于分类和处理</li><li><strong>区分错误类型</strong>: 将严重错误(Error)与普通异常(Exception)分离</li><li><strong>编译时检查</strong>: 受检异常确保程序员处理可预见的错误</li><li><strong>异常链</strong>: 支持异常包装，保留原始异常信息</li></ol><h3 id="避坑指南" tabindex="-1"><a class="header-anchor" href="#避坑指南"><span>避坑指南</span></a></h3><ol><li><strong>避免捕获Exception基类</strong>: 这会隐藏潜在错误，应该捕获具体异常</li><li><strong>不要忽略异常</strong>: 空的catch块会导致错误被掩盖</li><li><strong>资源释放</strong>: 使用try-finally或try-with-resources确保资源正确释放</li><li><strong>异常信息</strong>: 提供有意义的异常消息，便于调试</li><li><strong>不要在finally中使用return</strong>: 会覆盖try或catch中的return值</li></ol><h3 id="深度思考题" tabindex="-1"><a class="header-anchor" href="#深度思考题"><span>深度思考题</span></a></h3><p><strong>思考题</strong>: 为什么Java将异常分为受检异常和非受检异常？这种设计有什么优缺点？</p><p><strong>思考题回答</strong>: Java的异常分类设计基于错误的可预测性和处理责任。受检异常用于表示可预见且应该处理的错误（如文件操作），强制程序员处理这些情况，提高了代码健壮性。非受检异常用于表示编程错误（如空指针），这类错误通常应该在开发阶段修复，而非运行时处理。</p><p>优点：提高代码可靠性，强制处理可预见错误，使异常处理更加结构化。 缺点：有时过度使用受检异常会导致代码臃肿（如IO操作），程序员可能会用空catch块简单规避，反而降低代码质量。Java 8的Stream API和Lambda表达式更倾向于使用非受检异常，反映了设计思想的演变。</p>`,18);function r(d,c){const s=e("Mermaid");return t(),n("div",null,[k,l(s,{id:"mermaid-9",code:"eJx9kU1ugkAYhveegsQtJghUEZMmwDCWpCn9cTdxgTgU4pQxw0x02fQCXfYAvYSLXoeeo5QBSo1xlu/zPZnv55lFu1RZgoFSPQctU0b30ZrglTIaXSsu8hmjbCVpHXnIP8R4xzOay9irY4AeRc6zF3yW+qh8//j+fC2/3srjURJQE4juBCH3NMs5ZieurFigIN/gQyh4mLhU5JvipMyvy25QEJ4FAXp6uO2RGsUkKgqAE6XgTMRcMKwkGSH20PQceKWpVUy32B4aluUbnhpTQpm9TzOO5/99/LufxoWmaRiTzgWGDnV4yW2banx9PJtAo/M1YE6d8QWfyY23v0NvrE07G8KZpWmNvSZRvJ33Rq+O2U3eS105Ty/xVKD6f532CFQXbQeDH2/StoU="}),p])}const g=a(h,[["render",r],["__file","基础-异常体系设计.html.vue"]]),y=JSON.parse('{"path":"/java/2%E3%80%81Java%E5%9F%BA%E7%A1%80/1.6%20%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/%E5%9F%BA%E7%A1%80-%E5%BC%82%E5%B8%B8%E4%BD%93%E7%B3%BB%E8%AE%BE%E8%AE%A1.html","title":"基础-异常体系设计","lang":"zh-CN","frontmatter":{"description":"基础-异常体系设计 概述 异常是程序运行过程中出现的意外情况，Java通过异常处理机制提供了一种结构化的错误处理方式。Java异常体系以Throwable为根类，分为Error和Exception两大分支，其中Exception又分为受检异常（Checked Exception）和非受检异常（Unchecked Exception）。 知识要点 1. ...","head":[["meta",{"property":"og:url","content":"http://blog.lindaifeng.vip/java/2%E3%80%81Java%E5%9F%BA%E7%A1%80/1.6%20%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/%E5%9F%BA%E7%A1%80-%E5%BC%82%E5%B8%B8%E4%BD%93%E7%B3%BB%E8%AE%BE%E8%AE%A1.html"}],["meta",{"property":"og:site_name","content":"文档演示"}],["meta",{"property":"og:title","content":"基础-异常体系设计"}],["meta",{"property":"og:description","content":"基础-异常体系设计 概述 异常是程序运行过程中出现的意外情况，Java通过异常处理机制提供了一种结构化的错误处理方式。Java异常体系以Throwable为根类，分为Error和Exception两大分支，其中Exception又分为受检异常（Checked Exception）和非受检异常（Unchecked Exception）。 知识要点 1. ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-04T07:10:04.000Z"}],["meta",{"property":"article:author","content":"清峰"}],["meta",{"property":"article:modified_time","content":"2025-07-04T07:10:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"基础-异常体系设计\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-04T07:10:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"清峰\\",\\"url\\":\\"http://blog.lindaifeng.vip/\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"知识要点","slug":"知识要点","link":"#知识要点","children":[{"level":3,"title":"1. 异常体系结构","slug":"_1-异常体系结构","link":"#_1-异常体系结构","children":[]},{"level":3,"title":"2. 异常的分类","slug":"_2-异常的分类","link":"#_2-异常的分类","children":[]},{"level":3,"title":"3. 异常的基本使用","slug":"_3-异常的基本使用","link":"#_3-异常的基本使用","children":[]}]},{"level":2,"title":"知识扩展","slug":"知识扩展","link":"#知识扩展","children":[{"level":3,"title":"设计思想","slug":"设计思想","link":"#设计思想","children":[]},{"level":3,"title":"避坑指南","slug":"避坑指南","link":"#避坑指南","children":[]},{"level":3,"title":"深度思考题","slug":"深度思考题","link":"#深度思考题","children":[]}]}],"git":{"createdTime":1751613004000,"updatedTime":1751613004000,"contributors":[{"name":"ldf","email":"1305366530@qq.com","commits":1}]},"readingTime":{"minutes":3.16,"words":947},"filePathRelative":"java/2、Java基础/1.6 异常处理/基础-异常体系设计.md","localizedDate":"2025年7月4日","autoDesc":true,"excerpt":"\\n<h2>概述</h2>\\n<p>异常是程序运行过程中出现的意外情况，Java通过异常处理机制提供了一种结构化的错误处理方式。Java异常体系以<code>Throwable</code>为根类，分为<code>Error</code>和<code>Exception</code>两大分支，其中<code>Exception</code>又分为受检异常（Checked Exception）和非受检异常（Unchecked Exception）。</p>\\n<h2>知识要点</h2>\\n<h3>1. 异常体系结构</h3>\\n<p>Java异常体系的核心类层次结构如下：</p>\\n<ul>\\n<li><code>Throwable</code>: 所有错误和异常的父类，包含异常信息和堆栈跟踪</li>\\n<li><code>Error</code>: 表示严重错误，如<code>OutOfMemoryError</code>，程序通常无法恢复</li>\\n<li><code>Exception</code>: 表示程序可以处理的异常\\n<ul>\\n<li><code>RuntimeException</code>: 非受检异常，编译器不强制捕获</li>\\n<li>其他Exception子类: 受检异常，编译器强制要求捕获或声明抛出</li>\\n</ul>\\n</li>\\n</ul>"}');export{g as comp,y as data};
