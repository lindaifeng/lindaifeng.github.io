import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,o as n,f as a}from"./app-1glq8-TT.js";const e={},l=a(`<blockquote><p>更新中....</p></blockquote><h1 id="一、docker安装" tabindex="-1"><a class="header-anchor" href="#一、docker安装"><span>一、docker安装</span></a></h1><p>1、yum 包更新到最新</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>yum update</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>2、安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>yum install -y yum-utils device-mapper-persistent-data lvm2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>3、 设置yum源</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>4、 安装docker，出现输入的界面都按 y</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>yum install -y docker-ce</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>5、 查看docker版本，验证是否验证成功</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker -v</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>虚拟机，镜像，容器</p><p>虚拟机：以操作系统为内核创建的一个虚拟的操作系统</p><p>镜像：类似于安装包。</p><p>容器：类似于进程，运行在虚拟机里的一个个app。</p><h1 id="二、docker常用命令" tabindex="-1"><a class="header-anchor" href="#二、docker常用命令"><span>二、docker常用命令</span></a></h1><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>查询所有容器</span></span>
<span class="line"><span>docker ps -a</span></span>
<span class="line"><span>查看运行中的容器</span></span>
<span class="line"><span>docker ps</span></span>
<span class="line"><span>停止容器</span></span>
<span class="line"><span>docker stop 容器id</span></span>
<span class="line"><span>删除容器</span></span>
<span class="line"><span>docker rm -f id</span></span>
<span class="line"><span>启动容器(前台运行)</span></span>
<span class="line"><span>docker run -p 80:80 nginx</span></span>
<span class="line"><span>后台运行</span></span>
<span class="line"><span>docker run -d -p 80:80 nginx</span></span>
<span class="line"><span>启动容器并进入交互式模式(默认加sh)</span></span>
<span class="line"><span>docker run -it 镜像id sh</span></span>
<span class="line"><span>进入容器内部</span></span>
<span class="line"><span>docker exec -it 容器id sh</span></span>
<span class="line"><span>删除镜像</span></span>
<span class="line"><span>docker rmi 镜像id(id一致时用名称:标签删docker rmi ubuntu13:v2)</span></span>
<span class="line"><span>查看镜像版本</span></span>
<span class="line"><span>docker search 镜像名</span></span>
<span class="line"><span></span></span>
<span class="line"><span>批量停止所有容器</span></span>
<span class="line"><span>docker stop $(docker ps -qa)</span></span>
<span class="line"><span>删除容器</span></span>
<span class="line"><span>docker rm -f id</span></span>
<span class="line"><span>查看所有容器id</span></span>
<span class="line"><span>docker pa -aq</span></span>
<span class="line"><span></span></span>
<span class="line"><span>后台容器在线运行</span></span>
<span class="line"><span>docker attach id</span></span>
<span class="line"><span>打印后台运行容器日志 （动态打印跟踪 -f）</span></span>
<span class="line"><span>docker logs id</span></span>
<span class="line"><span></span></span>
<span class="line"><span>查看容器进程</span></span>
<span class="line"><span>docker top id</span></span>
<span class="line"><span></span></span>
<span class="line"><span>快速清理所有退出的容器</span></span>
<span class="line"><span>docker system prune -f</span></span>
<span class="line"><span>快速清理所有没有使用的镜像</span></span>
<span class="line"><span>docker image prune -f</span></span>
<span class="line"><span></span></span>
<span class="line"><span>容器自动重启</span></span>
<span class="line"><span>docker run --restart=always</span></span>
<span class="line"><span>已经启动了则可以使用</span></span>
<span class="line"><span>docker update --restart=always &lt;CONTAINER ID&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>关闭自动重启</span></span>
<span class="line"><span>docker update --restart=no &lt;CONTAINER ID&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>docker run -d -p 80:80 --name 容器名 镜像名</p><p>背后发生了什么：</p><p>1、在本地查找是否有该镜像</p><p>2、没有则去远程仓库找该镜像，默认docker hub仓库</p><p>3、下载最新镜像</p><p>4、基于该镜像创建一个容器，并且准备运行</p><p>5、docker engine分配给这个容器一个虚拟的ip地址</p><p>6、在宿主机上打开80端口并把端口转发到宿主机上</p><p>7、启动容器，运行指令（这里是一个shell脚本去启动命令）</p></blockquote><h2 id="_1-镜像导入导出" tabindex="-1"><a class="header-anchor" href="#_1-镜像导入导出"><span>1）镜像导入导出</span></a></h2><p>·导出成镜像文件</p><p>docker image save 镜像名 -o 导出镜像文件名</p><p>docker image save nginx:v1 -o nginx.image</p><p>·导入镜像文件</p><p>docker image load -i 当前文件夹下的镜像文件名</p><p>docker image load -i ./nginx.image</p><h1 id="三、docker-file镜像构建" tabindex="-1"><a class="header-anchor" href="#三、docker-file镜像构建"><span>三、docker file镜像构建</span></a></h1><p>一、镜像获取</p><blockquote><p>1、registry拉取（公有、私有）</p><p>2、dockfile在线构建</p><p>3、file文件离线导入</p></blockquote><p>二、构建dockerfile的基本结构</p><blockquote><p>From 以什么为基础（基础镜像）</p><p>Run 运行一些linux命令安装软件（运行环境）</p><p>Add 添加一些文件</p><p>Cmd 执行一些文件命令</p><p>env 引用变量</p><p>copy 复制文件到进行中</p><p>entrypoint 与cmd作用相同，但该指令必定执行，多个cmd执行做后一个</p></blockquote><table><thead><tr><th>关键字</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>FROM</td><td>指定父镜像</td><td>指定dockerfile基于那个image构建</td></tr><tr><td>MAINTAINER</td><td>作者信息</td><td>用来标明这个dockerfile谁写的</td></tr><tr><td>LABEL</td><td>标签</td><td>用来标明dockerfile的标签 可以使用Label代替Maintainer 最终都是在docker image基本信息中可以查看</td></tr><tr><td>RUN</td><td>执行命令</td><td>执行一段命令 默认是/bin/sh 格式: RUN command 或者 RUN [&quot;command&quot; , &quot;param1&quot;,&quot;param2&quot;]</td></tr><tr><td>CMD</td><td>容器启动命令</td><td>提供启动容器时候的默认命令 和ENTRYPOINT配合使用.格式 CMD command param1 param2 或者 CMD [&quot;command&quot; , &quot;param1&quot;,&quot;param2&quot;]</td></tr><tr><td>ENTRYPOINT</td><td>入口</td><td>一般在制作一些执行就关闭的容器中会使用</td></tr><tr><td>COPY</td><td>复制文件</td><td>build的时候复制文件到image中</td></tr><tr><td>ADD</td><td>添加文件</td><td>build的时候添加文件到image中 不仅仅局限于当前build上下文 可以来源于远程服务</td></tr><tr><td>ENV</td><td>环境变量</td><td>指定build时候的环境变量 可以在启动的容器的时候 通过-e覆盖 格式ENV name=value</td></tr><tr><td>ARG</td><td>构建参数</td><td>构建参数 只在构建的时候使用的参数 如果有ENV 那么ENV的相同名字的值始终覆盖arg的参数</td></tr><tr><td>VOLUME</td><td>定义外部可以挂载的数据卷</td><td>指定build的image那些目录可以启动的时候挂载到文件系统中 启动容器的时候使用 -v 绑定 格式 VOLUME [&quot;目录&quot;]</td></tr><tr><td>EXPOSE</td><td>暴露端口</td><td>定义容器运行的时候监听的端口 启动容器的使用-p来绑定暴露端口 格式: EXPOSE 8080 或者 EXPOSE 8080/udp</td></tr><tr><td>WORKDIR</td><td>工作目录</td><td>指定容器内部的工作目录 如果没有创建则自动创建 如果指定/ 使用的是绝对地址 如果不是/开头那么是在上一条workdir的路径的相对路径</td></tr><tr><td>USER</td><td>指定执行用户</td><td>指定build或者启动的时候 用户 在RUN CMD ENTRYPONT执行的时候的用户</td></tr><tr><td>HEALTHCHECK</td><td>健康检查</td><td>指定监测当前容器的健康监测的命令 基本上没用 因为很多时候 应用本身有健康监测机制</td></tr><tr><td>ONBUILD</td><td>触发器</td><td>当存在ONBUILD关键字的镜像作为基础镜像的时候 当执行FROM完成之后 会执行 ONBUILD的命令 但是不影响当前镜像 用处也不怎么大</td></tr><tr><td>STOPSIGNAL</td><td>发送信号量到宿主机</td><td>该STOPSIGNAL指令设置将发送到容器的系统调用信号以退出。</td></tr><tr><td>SHELL</td><td>指定执行脚本的shell</td><td>指定RUN CMD ENTRYPOINT 执行命令的时候 使用的shell</td></tr></tbody></table><p>三、构建命令：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Hello名称名 .当前文件位置</span></span>
<span class="line"><span>Docker image build -t hello .</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>四、构建示例</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>示例1:构建一个ubuntu镜像，启动时打印出hello dockerName</span></span>
<span class="line"><span>1、创建Dockerfile目录</span></span>
<span class="line"><span>2、编辑文件 vim docker-ubuntu</span></span>
<span class="line"><span>FROM ubuntu:21.04</span></span>
<span class="line"><span>RUN apt-get update  &amp;&amp; \\</span></span>
<span class="line"><span>    apt-get install -y wget &amp;&amp; \\</span></span>
<span class="line"><span>    wget https://github.com/ipinfo/cli/releases/download/ipinfo-2.0.1/ipinfo_2.0.1_linux_amd64.tar.gz &amp;&amp; \\</span></span>
<span class="line"><span>    tar zxf ipinfo_2.0.1_linux_amd64.tar.gz &amp;&amp; \\</span></span>
<span class="line"><span>    mv ipinfo_2.0.1_linux_amd64 /usr/bin/ipinfo &amp;&amp; \\</span></span>
<span class="line"><span>    rm -rf ipinfo_2.0.1_linux_amd64.tar.gz</span></span>
<span class="line"><span></span></span>
<span class="line"><span>env NAME=dockerName</span></span>
<span class="line"><span>cmd echo &quot;hello $NAME&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>3、构建镜像文件</span></span>
<span class="line"><span>docker build -f 文件名 -t 镜像名:版本 .当前目录路径</span></span>
<span class="line"><span>docker build -f docker-ubuntu -t ubuntu:v1 .</span></span>
<span class="line"><span></span></span>
<span class="line"><span>打包容器成镜像</span></span>
<span class="line"><span>docker commit 容器ID 镜像名称</span></span>
<span class="line"><span>4、执行容器</span></span>
<span class="line"><span>Docker	run -it ubuntu:v1 	启动一个交互式容器</span></span>
<span class="line"><span>Docker	run —rm -it ubuntu:v1 执行后容器停止删除容器</span></span>
<span class="line"><span>Docker	run —rm -it ubuntu:v1 echo “打印语句”</span></span>
<span class="line"><span></span></span>
<span class="line"><span>5、上传镜像</span></span>
<span class="line"><span>登录远程仓库（用户名密码）</span></span>
<span class="line"><span>docker login/logout</span></span>
<span class="line"><span>容器命名（跟镜像仓库名保持一致）</span></span>
<span class="line"><span>docker image tag 原镜像名 新镜像名</span></span>
<span class="line"><span>docker image tag ubuntu:v1 1305366530/ubuntu:v1</span></span>
<span class="line"><span>docker push 路径/镜像名</span></span>
<span class="line"><span>docker push 1305366530/ubuntu:v1</span></span>
<span class="line"><span></span></span>
<span class="line"><span>修改文件</span></span>
<span class="line"><span>Echo “修改内容” 文件名</span></span>
<span class="line"><span>查看文件</span></span>
<span class="line"><span>more 文件名</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>多阶段构建</span></span>
<span class="line"><span>as 别名</span></span>
<span class="line"><span>—from 引入</span></span>
<span class="line"><span>￼</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>示例2:构建一个nginx镜像</span></span>
<span class="line"><span></span></span>
<span class="line"><span>构建dockerfile</span></span>
<span class="line"><span>1、在一个空目录下，新建一个名为 Dockerfile 文件，并在文件内添加以下内容：</span></span>
<span class="line"><span>FROM nginx</span></span>
<span class="line"><span>RUN echo &#39;这是一个本地构建的nginx镜像&#39; &gt; /usr/share/nginx/html/index.html</span></span>
<span class="line"><span>2、在 Dockerfile 文件的存放目录下，执行构建动作。. 代表本次执行的上下文路径</span></span>
<span class="line"><span>docker build -t nginx:v3 .</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="四、docker存储-volume数据卷" tabindex="-1"><a class="header-anchor" href="#四、docker存储-volume数据卷"><span>四、docker存储 volume数据卷</span></a></h1><p>Windows中使用弊端：volume路径是保存在虚拟机里面的，在windos中是无法查看到这个虚拟路径的</p><p>-v参数：指定数据卷存储位置</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>dockera安装mysql</span></span>
<span class="line"><span>1、docker pull mysql:5.7</span></span>
<span class="line"><span>2、docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=123456 -d -v mysql-data:/var/lib/mysql mysql:5.7</span></span>
<span class="line"><span>3、查看volume</span></span>
<span class="line"><span>docker volume ls</span></span>
<span class="line"><span>4、查看volume路径</span></span>
<span class="line"><span>docker volume inspect mysql-data</span></span>
<span class="line"><span>5、查看volume文件</span></span>
<span class="line"><span>Docker volume ls (查看所有持久化文件)</span></span>
<span class="line"><span>docker volume inspect volumename（查看持久化路径）</span></span>
<span class="line"><span>docker volume prune (删除没有使用的volume)</span></span>
<span class="line"><span>More 路径/文件名（查看文件内容）</span></span>
<span class="line"><span>6、强制删除容器，查看volume是否存在</span></span>
<span class="line"><span>docker rm -f id</span></span>
<span class="line"><span>docker volume ls</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="_5、docker网络" tabindex="-1"><a class="header-anchor" href="#_5、docker网络"><span>5、docker网络</span></a></h1><h1 id="_6、docker-compose" tabindex="-1"><a class="header-anchor" href="#_6、docker-compose"><span>6、docker compose</span></a></h1><ul><li><p>使用 Docker Compose 可以轻松、高效的管理容器，它是一个用于定义和运行多容器 Docker 的应用程序工具</p><figure><img src="https://gitee.com/lindaifeng/img/raw/master/img/20220123231219.png" alt="1" tabindex="0" loading="lazy"><figcaption>1</figcaption></figure><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>示例：docker-compose.yml</span></span>
<span class="line"><span>version: &quot;3.8&quot;</span></span>
<span class="line"><span>service:</span></span>
<span class="line"><span>    flask-demo:</span></span>
<span class="line"><span>        image: flask-demo:latest</span></span>
<span class="line"><span>        environment:</span></span>
<span class="line"><span>            - REDIS_HOST=redis-server</span></span>
<span class="line"><span>        network:</span></span>
<span class="line"><span>            - demo-network</span></span>
<span class="line"><span>        ports:</span></span>
<span class="line"><span>            - 8080:5000</span></span>
<span class="line"><span>    redis-server:</span></span>
<span class="line"><span>        image: redis:latest</span></span>
<span class="line"><span>        networks:</span></span>
<span class="line"><span>            - demo-network</span></span>
<span class="line"><span>    networks:</span></span>
<span class="line"><span>        demo-network:</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-ruby line-numbers-mode" data-highlighter="shiki" data-ext="ruby" data-title="ruby" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">安装 </span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">Docker</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> Compose</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 可以通过下面命令自动下载适应版本的 </span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">Compose</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">，并为安装脚本添加执行权限</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">sudo curl </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">L</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> https</span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">//</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">github.com</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">docker</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">compose</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">releases</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">download</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1.21</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">docker</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">compose</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$(uname </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">s)</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$(uname </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">m) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">o </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">usr</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">local</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">bin</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">docker</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">compose</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">sudo chmod </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">x </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">usr</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">local</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">bin</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">docker</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">compose</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">查看安装是否成功</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">docker</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">compose </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">v</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>快速入门</span></span>
<span class="line"><span>1、打包项目，获得 jar 包 docker-demo-0.0.1-SNAPSHOT.jar</span></span>
<span class="line"><span>mvn clean package</span></span>
<span class="line"><span>2、在 jar 包所在路径创建 Dockerfile 文件，添加以下内容</span></span>
<span class="line"><span>FROM java:8</span></span>
<span class="line"><span>VOLUME /tmp</span></span>
<span class="line"><span>ADD docker-demo-0.0.1-SNAPSHOT.jar app.jar</span></span>
<span class="line"><span>RUN bash -c &#39;touch /app.jar&#39;</span></span>
<span class="line"><span>EXPOSE 9000</span></span>
<span class="line"><span>ENTRYPOINT [&quot;java&quot;,&quot;-Djava.security.egd=file:/dev/./urandom&quot;,&quot;-jar&quot;,&quot;app.jar&quot;]</span></span>
<span class="line"><span>3、在 jar 包所在路径创建文件 docker-compose.yml，添加以下内容</span></span>
<span class="line"><span>version: &#39;2&#39; # 表示该 Docker-Compose 文件使用的是 Version 2 file</span></span>
<span class="line"><span>services:</span></span>
<span class="line"><span>  docker-demo:  # 指定服务名称</span></span>
<span class="line"><span>    build: .  # 指定 Dockerfile 所在路径</span></span>
<span class="line"><span>    ports:    # 指定端口映射</span></span>
<span class="line"><span>      - &quot;9000:8761&quot;</span></span>
<span class="line"><span>4、在 docker-compose.yml 所在路径下执行该命令 Compose 就会自动构建镜像并使用镜像启动容器</span></span>
<span class="line"><span>docker-compose up</span></span>
<span class="line"><span>docker-compose up -d  // 后台启动并运行容器</span></span>
<span class="line"><span>5、访问 http://localhost:9000/hello 即可访问微服务接口</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Docker Compose 常用命令与配置</span></span>
<span class="line"><span>常见命令</span></span>
<span class="line"><span>1、ps：列出所有运行容器</span></span>
<span class="line"><span>docker-compose ps</span></span>
<span class="line"><span>2、logs：查看服务日志输出</span></span>
<span class="line"><span>docker-compose logs</span></span>
<span class="line"><span>3、port：打印绑定的公共端口，下面命令可以输出 eureka 服务 8761 端口所绑定的公共端口</span></span>
<span class="line"><span>docker-compose port eureka 8761</span></span>
<span class="line"><span>4、build：构建或者重新构建服务</span></span>
<span class="line"><span>docker-compose build</span></span>
<span class="line"><span>5、start：启动指定服务已存在的容器</span></span>
<span class="line"><span>docker-compose start eureka</span></span>
<span class="line"><span>6、stop：停止已运行的服务的容器</span></span>
<span class="line"><span>docker-compose stop eureka</span></span>
<span class="line"><span>7、rm：删除指定服务的容器</span></span>
<span class="line"><span>docker-compose rm eureka</span></span>
<span class="line"><span>8、up：构建、启动容器</span></span>
<span class="line"><span>docker-compose up</span></span>
<span class="line"><span>9、kill：通过发送 SIGKILL 信号来停止指定服务的容器</span></span>
<span class="line"><span>docker-compose kill eureka</span></span>
<span class="line"><span>10、pull：下载服务镜像</span></span>
<span class="line"><span>11、scale：设置指定服务运气容器的个数，以 service=num 形式指定</span></span>
<span class="line"><span>docker-compose scale user=3 movie=3</span></span>
<span class="line"><span>12、run：在一个服务上执行一个命令</span></span>
<span class="line"><span>docker-compose run web bash</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="docker-compose示例" tabindex="-1"><a class="header-anchor" href="#docker-compose示例"><span>Docker Compose示例：</span></a></h2><h3 id="一、安装docker-compose" tabindex="-1"><a class="header-anchor" href="#一、安装docker-compose"><span>一、安装Docker Compose</span></a></h3><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># Compose目前已经完全支持Linux、Mac OS和Windows，在我们安装Compose之前，需要先安装Docker。下面我 们以编译好的二进制包方式安装在Linux系统中。 </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">curl</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -L</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://github.com/docker/compose/releases/download/1.22.0/docker-compose-\`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">uname</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">uname</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> -o</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /usr/local/bin/docker-compose</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 设置文件可执行权限 </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">chmod</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> +x</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /usr/local/bin/docker-compose</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 查看版本信息 </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker-compose</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -version</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二、卸载docker-compose" tabindex="-1"><a class="header-anchor" href="#二、卸载docker-compose"><span>二、卸载Docker Compose</span></a></h3><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 二进制包方式安装的，删除二进制文件即可</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">rm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /usr/local/bin/docker-compose</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="三、-使用docker-compose编排nginx-springboot项目" tabindex="-1"><a class="header-anchor" href="#三、-使用docker-compose编排nginx-springboot项目"><span>三、 使用docker compose编排nginx+springboot项目</span></a></h3><ol><li>创建docker-compose目录</li></ol><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mkdir</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ~/docker-compose</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ~/docker-compose</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>编写 docker-compose.yml 文件</li></ol><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">version:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;3&#39;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">services:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  nginx:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">   image:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> nginx</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">   ports:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 80:80</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">   links:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> app</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">   volumes:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ./nginx/conf.d:/etc/nginx/conf.d</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  app:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    image:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> app</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    expose:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;8080&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>创建./nginx/conf.d目录</li></ol><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mkdir</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ./nginx/conf.d</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="4"><li>在./nginx/conf.d目录下 编写itheima.conf文件</li></ol><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">server</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    listen</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 80</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    access_log</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> off</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    location</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        proxy_pass</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> http://app:8080</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>在~/docker-compose 目录下 使用docker-compose 启动容器</li></ol><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker-compose</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> up</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="6"><li>测试访问</li></ol><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">http://192.168.149.135/hello</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h1 id="_7、docker-swarm容器编排" tabindex="-1"><a class="header-anchor" href="#_7、docker-swarm容器编排"><span>7、docker swarm容器编排</span></a></h1><p>docker compose不建议在生产环境使用，因为是它是运行在单机环境下</p><p>多机的环境下则需要用到docker swarm。</p><blockquote><p>Docker Swarm 是 Docker 的集群管理工具。它将 Docker 主机池转变为单个虚拟 Docker 主机。 Docker Swarm 提供了标准的 Docker API，所有任何已经与 Docker 守护程序通信的工具都可以使用 Swarm 轻松地扩展到多个主机。</p></blockquote><p>k8s在容器编排领域处于绝对领先的地位</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>查看是否激活swarm模式（默认没有）</span></span>
<span class="line"><span>docker info</span></span>
<span class="line"><span>Swarm: inactive表示没有激活</span></span>
<span class="line"><span>激活swarm，两个方法</span></span>
<span class="line"><span>1、初始化一个swarm集群</span></span>
<span class="line"><span>docker swarm init</span></span>
<span class="line"><span>docker node ls（查看集群节点）</span></span>
<span class="line"><span>2、加入一个已存在的swarm集群</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker swarm init(初始化集群)</span></span>
<span class="line"><span>docker node ls（查看集群节点）</span></span>
<span class="line"><span>docker swarm leave --force（强制离开集群）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>创建一个nginx服务</span></span>
<span class="line"><span>docker service create nginx:latest</span></span>
<span class="line"><span>查看nginx服务</span></span>
<span class="line"><span>docker service ls</span></span>
<span class="line"><span>docker service ps 服务id</span></span>
<span class="line"><span>复制三个service</span></span>
<span class="line"><span>docker service update 服务id --replicas 3</span></span>
<span class="line"><span>当我们删除一个容器后，swarm会帮我们创建一个容器运行起来（即创建容器又帮我们维护容器）</span></span>
<span class="line"><span>docker rm -f 容器id</span></span>
<span class="line"><span>要想删除则需要对service进行操作</span></span>
<span class="line"><span>docker service rm 服务ID</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="_8、docker-多架构支持" tabindex="-1"><a class="header-anchor" href="#_8、docker-多架构支持"><span>8、docker 多架构支持</span></a></h1>`,73),p=[l];function d(r,t){return n(),i("div",null,p)}const k=s(e,[["render",d],["__file","Docker介绍.html.vue"]]),o=JSON.parse('{"path":"/middleware/%E5%AE%B9%E5%99%A8%E5%8C%96%E6%8A%80%E6%9C%AF/Docker%E6%8A%80%E6%9C%AF/Docker%E4%BB%8B%E7%BB%8D.html","title":"Docker介绍","lang":"zh-CN","frontmatter":{"title":"Docker介绍","category":["Docker指南"],"tag":["Docker"],"order":1,"description":"更新中.... 一、docker安装 1、yum 包更新到最新 2、安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的 3、 设置yum源 4、 安装docker，出现输入的界面都按 y 5、 查看docker版本，验证是否验证成功 虚拟机，镜像，容器 虚拟机：以操作系统为内...","head":[["meta",{"property":"og:url","content":"http://blog.lindaifeng.vip/middleware/%E5%AE%B9%E5%99%A8%E5%8C%96%E6%8A%80%E6%9C%AF/Docker%E6%8A%80%E6%9C%AF/Docker%E4%BB%8B%E7%BB%8D.html"}],["meta",{"property":"og:site_name","content":"文档演示"}],["meta",{"property":"og:title","content":"Docker介绍"}],["meta",{"property":"og:description","content":"更新中.... 一、docker安装 1、yum 包更新到最新 2、安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的 3、 设置yum源 4、 安装docker，出现输入的界面都按 y 5、 查看docker版本，验证是否验证成功 虚拟机，镜像，容器 虚拟机：以操作系统为内..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://gitee.com/lindaifeng/img/raw/master/img/20220123231219.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-11T03:57:59.000Z"}],["meta",{"property":"article:author","content":"清峰"}],["meta",{"property":"article:tag","content":"Docker"}],["meta",{"property":"article:modified_time","content":"2024-09-11T03:57:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Docker介绍\\",\\"image\\":[\\"https://gitee.com/lindaifeng/img/raw/master/img/20220123231219.png\\"],\\"dateModified\\":\\"2024-09-11T03:57:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"清峰\\",\\"url\\":\\"http://blog.lindaifeng.vip/\\"}]}"]]},"headers":[{"level":2,"title":"1）镜像导入导出","slug":"_1-镜像导入导出","link":"#_1-镜像导入导出","children":[]},{"level":2,"title":"Docker Compose示例：","slug":"docker-compose示例","link":"#docker-compose示例","children":[{"level":3,"title":"一、安装Docker Compose","slug":"一、安装docker-compose","link":"#一、安装docker-compose","children":[]},{"level":3,"title":"二、卸载Docker Compose","slug":"二、卸载docker-compose","link":"#二、卸载docker-compose","children":[]},{"level":3,"title":"三、 使用docker compose编排nginx+springboot项目","slug":"三、-使用docker-compose编排nginx-springboot项目","link":"#三、-使用docker-compose编排nginx-springboot项目","children":[]}]}],"git":{"createdTime":1725875953000,"updatedTime":1726027079000,"contributors":[{"name":"ldf","email":"1305366530@qq.com","commits":1}]},"readingTime":{"minutes":10.3,"words":3091},"filePathRelative":"middleware/容器化技术/Docker技术/Docker介绍.md","localizedDate":"2024年9月9日","autoDesc":true,"excerpt":"<blockquote>\\n<p>更新中....</p>\\n</blockquote>\\n<h1>一、docker安装</h1>\\n<p>1、yum 包更新到最新</p>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>yum update</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>"}');export{k as comp,o as data};
