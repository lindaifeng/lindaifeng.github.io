import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,b as t,d as i,f as l,o as e,r as h}from"./app-D1ifS0UH.js";const p={},k=i("h1",{id:"_3-spring-aop编程",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#_3-spring-aop编程"},[i("span",null,"3. Spring AOP编程")])],-1),r=i("h2",{id:"概述",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#概述"},[i("span",null,"概述")])],-1),d=i("p",null,"面向切面编程(AOP)是Spring框架的另一个核心概念，它允许将横切关注点（如日志、事务）从业务逻辑中分离出来。AOP的核心思想是将应用程序中的关注点分离，使得代码更加清晰、可维护。",-1),g=l(`<h2 id="知识要点" tabindex="-1"><a class="header-anchor" href="#知识要点"><span>知识要点</span></a></h2><h3 id="_1-aop的核心概念" tabindex="-1"><a class="header-anchor" href="#_1-aop的核心概念"><span>1. AOP的核心概念</span></a></h3><ul><li><strong>切面(Aspect)</strong>: 横切关注点的模块化，它包含了通知和切点。</li><li><strong>连接点(Joinpoint)</strong>: 程序执行过程中的一个点，如方法的执行、异常的抛出等。</li><li><strong>通知(Advice)</strong>: 切面在特定连接点上执行的动作，包括前置通知、后置通知、环绕通知、异常通知和最终通知。</li><li><strong>切点(Pointcut)</strong>: 定义了哪些连接点会被拦截，通常使用表达式来定义。</li><li><strong>引入(Introduction)</strong>: 允许向现有的类添加新的方法或字段。</li></ul><h3 id="_2-通知的类型" tabindex="-1"><a class="header-anchor" href="#_2-通知的类型"><span>2. 通知的类型</span></a></h3><ul><li><strong>前置通知(Before)</strong>: 在连接点执行之前执行的通知。</li><li><strong>后置通知(After)</strong>: 在连接点执行之后执行的通知，无论连接点是否正常执行。</li><li><strong>返回通知(After-returning)</strong>: 在连接点正常执行之后执行的通知。</li><li><strong>异常通知(After-throwing)</strong>: 在连接点抛出异常之后执行的通知。</li><li><strong>环绕通知(Around)</strong>: 包围连接点的通知，它可以在连接点执行之前和之后执行，甚至可以控制是否执行连接点。</li></ul><h3 id="_3-代码示例" tabindex="-1"><a class="header-anchor" href="#_3-代码示例"><span>3. 代码示例</span></a></h3><h4 id="切面类的定义" tabindex="-1"><a class="header-anchor" href="#切面类的定义"><span>切面类的定义</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Aspect</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Component</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> LoggingAspect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 前置通知</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Before</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;execution(* com.example.service.*.*(..))&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> logBefore</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">JoinPoint</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> joinPoint</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Before method: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> joinPoint</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getSignature</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 后置通知</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">After</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;execution(* com.example.service.*.*(..))&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> logAfter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">JoinPoint</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> joinPoint</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;After method: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> joinPoint</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getSignature</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 环绕通知</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Around</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;execution(* com.example.service.*.*(..))&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> logAround</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ProceedingJoinPoint</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> proceedingJoinPoint</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Throwable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Around method start: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> proceedingJoinPoint</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getSignature</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Object</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> result</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> proceedingJoinPoint</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">proceed</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Around method end: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> proceedingJoinPoint</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getSignature</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> result;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="启用aop" tabindex="-1"><a class="header-anchor" href="#启用aop"><span>启用AOP</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">EnableAspectJAutoProxy</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> AppConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 配置其他bean</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-切点表达式" tabindex="-1"><a class="header-anchor" href="#_4-切点表达式"><span>4. 切点表达式</span></a></h3><ul><li><strong>execution</strong>: 用于匹配方法执行的连接点。</li><li><strong>within</strong>: 用于匹配特定类型内的所有方法。</li><li><strong>this</strong>: 用于匹配特定类型的bean的方法。</li><li><strong>target</strong>: 用于匹配特定目标类型的方法。</li><li><strong>args</strong>: 用于匹配特定参数类型的方法。</li><li><strong>@annotation</strong>: 用于匹配带有特定注解的方法。</li></ul><h2 id="知识扩展" tabindex="-1"><a class="header-anchor" href="#知识扩展"><span>知识扩展</span></a></h2><h3 id="设计思想" tabindex="-1"><a class="header-anchor" href="#设计思想"><span>设计思想</span></a></h3><p>AOP的设计思想是关注点分离，它通过将横切关注点（如日志、事务）从业务逻辑中分离出来，使得代码更加清晰、可维护。</p><h3 id="避坑指南" tabindex="-1"><a class="header-anchor" href="#避坑指南"><span>避坑指南</span></a></h3><ul><li>避免过度使用AOP，否则会导致代码难以理解和调试。</li><li>注意切点表达式的精度，避免拦截不必要的方法。</li><li>注意通知的执行顺序，特别是当有多个切面时。</li></ul><h3 id="深度思考题" tabindex="-1"><a class="header-anchor" href="#深度思考题"><span>深度思考题</span></a></h3><p><strong>深度思考题:</strong> 环绕通知和其他通知有什么区别？ <strong>思考题回答:</strong> 环绕通知包围连接点，它可以在连接点执行之前和之后执行，甚至可以控制是否执行连接点；而其他通知只在连接点的特定时刻执行，不能控制连接点的执行。</p><p><strong>深度思考题:</strong> 什么是AspectJ？它和Spring AOP有什么区别？ <strong>思考题回答:</strong> AspectJ是一个完整的AOP框架，它提供了更强大的AOP功能，包括编译时织入、加载时织入等；而Spring AOP是基于代理的AOP实现，它只支持运行时织入，而且只支持方法级别的连接点。不过，Spring AOP可以集成AspectJ，以获得更强大的AOP功能。</p>`,20);function o(A,c){const s=h("Mermaid");return e(),n("div",null,[k,r,d,t(s,{id:"mermaid-9",code:"eJxLL0osyFAIceFSAALHaEf/gGfLmp7u3xqroKtrp+AU/bSj/eXcRRqOxQWpySWasRBlYDnn6Bf75z3rW/q8aaeGV35mXgEQo6pwiX7ZMOv5/KUajillmcmpKHKuIJNBWgNA2pJLUXW6RT/dM/Vp61INz7ySovyU0uSSzPw8oAqwkuScxOJil9Q0heKSIqBMaVGqQlpmTo6Vsomzo5upgQ5QOD871UrZ2MLC1dhZJzk/J7/IqjwjsyTVGlV/Yk56flFmSUYuVL+RoaWZmzFcv4GLibmjIap+hAFAl8LtRzJXwUnHWcdFx1XHDWG8NRcAP1B4rQ=="}),g])}const u=a(p,[["render",o],["__file","3. Spring AOP编程.html.vue"]]),F=JSON.parse('{"path":"/frame/spring/3.%20Spring%20AOP%E7%BC%96%E7%A8%8B.html","title":"3. Spring AOP编程","lang":"zh-CN","frontmatter":{"description":"3. Spring AOP编程 概述 面向切面编程(AOP)是Spring框架的另一个核心概念，它允许将横切关注点（如日志、事务）从业务逻辑中分离出来。AOP的核心思想是将应用程序中的关注点分离，使得代码更加清晰、可维护。 知识要点 1. AOP的核心概念 切面(Aspect): 横切关注点的模块化，它包含了通知和切点。 连接点(Joinpoint):...","head":[["meta",{"property":"og:url","content":"http://blog.lindaifeng.vip/frame/spring/3.%20Spring%20AOP%E7%BC%96%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"文档演示"}],["meta",{"property":"og:title","content":"3. Spring AOP编程"}],["meta",{"property":"og:description","content":"3. Spring AOP编程 概述 面向切面编程(AOP)是Spring框架的另一个核心概念，它允许将横切关注点（如日志、事务）从业务逻辑中分离出来。AOP的核心思想是将应用程序中的关注点分离，使得代码更加清晰、可维护。 知识要点 1. AOP的核心概念 切面(Aspect): 横切关注点的模块化，它包含了通知和切点。 连接点(Joinpoint):..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-04T08:30:59.000Z"}],["meta",{"property":"article:author","content":"清峰"}],["meta",{"property":"article:modified_time","content":"2025-07-04T08:30:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"3. Spring AOP编程\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-04T08:30:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"清峰\\",\\"url\\":\\"http://blog.lindaifeng.vip/\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"知识要点","slug":"知识要点","link":"#知识要点","children":[{"level":3,"title":"1. AOP的核心概念","slug":"_1-aop的核心概念","link":"#_1-aop的核心概念","children":[]},{"level":3,"title":"2. 通知的类型","slug":"_2-通知的类型","link":"#_2-通知的类型","children":[]},{"level":3,"title":"3. 代码示例","slug":"_3-代码示例","link":"#_3-代码示例","children":[]},{"level":3,"title":"4. 切点表达式","slug":"_4-切点表达式","link":"#_4-切点表达式","children":[]}]},{"level":2,"title":"知识扩展","slug":"知识扩展","link":"#知识扩展","children":[{"level":3,"title":"设计思想","slug":"设计思想","link":"#设计思想","children":[]},{"level":3,"title":"避坑指南","slug":"避坑指南","link":"#避坑指南","children":[]},{"level":3,"title":"深度思考题","slug":"深度思考题","link":"#深度思考题","children":[]}]}],"git":{"createdTime":1751617859000,"updatedTime":1751617859000,"contributors":[{"name":"ldf","email":"1305366530@qq.com","commits":1}]},"readingTime":{"minutes":3.12,"words":937},"filePathRelative":"frame/spring/3. Spring AOP编程.md","localizedDate":"2025年7月4日","autoDesc":true,"excerpt":"\\n<h2>概述</h2>\\n<p>面向切面编程(AOP)是Spring框架的另一个核心概念，它允许将横切关注点（如日志、事务）从业务逻辑中分离出来。AOP的核心思想是将应用程序中的关注点分离，使得代码更加清晰、可维护。</p>\\n<h2>知识要点</h2>\\n<h3>1. AOP的核心概念</h3>\\n<ul>\\n<li><strong>切面(Aspect)</strong>: 横切关注点的模块化，它包含了通知和切点。</li>\\n<li><strong>连接点(Joinpoint)</strong>: 程序执行过程中的一个点，如方法的执行、异常的抛出等。</li>\\n<li><strong>通知(Advice)</strong>: 切面在特定连接点上执行的动作，包括前置通知、后置通知、环绕通知、异常通知和最终通知。</li>\\n<li><strong>切点(Pointcut)</strong>: 定义了哪些连接点会被拦截，通常使用表达式来定义。</li>\\n<li><strong>引入(Introduction)</strong>: 允许向现有的类添加新的方法或字段。</li>\\n</ul>"}');export{u as comp,F as data};
