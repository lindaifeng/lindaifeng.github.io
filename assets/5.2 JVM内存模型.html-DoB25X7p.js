import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,f as n}from"./app-yhW6njzi.js";const l={},t=n(`<h1 id="_5-2-jvm内存模型" tabindex="-1"><a class="header-anchor" href="#_5-2-jvm内存模型"><span>5.2 JVM内存模型</span></a></h1><h2 id="核心理论" tabindex="-1"><a class="header-anchor" href="#核心理论"><span>核心理论</span></a></h2><h3 id="_1-1-jvm内存区域划分" tabindex="-1"><a class="header-anchor" href="#_1-1-jvm内存区域划分"><span>1.1 JVM内存区域划分</span></a></h3><p>JVM内存分为线程私有区域和线程共享区域：</p><ul><li><strong>线程私有</strong>：程序计数器、虚拟机栈、本地方法栈</li><li><strong>线程共享</strong>：堆、方法区（JDK 8后为元空间）</li><li><strong>直接内存</strong>：不属于JVM运行时数据区，但被NIO使用</li></ul><h3 id="_1-2-各内存区域详解" tabindex="-1"><a class="header-anchor" href="#_1-2-各内存区域详解"><span>1.2 各内存区域详解</span></a></h3><ul><li><strong>程序计数器</strong>：当前线程执行字节码的行号指示器，唯一不会OOM的区域</li><li><strong>虚拟机栈</strong>：每个方法调用创建栈帧，存储局部变量表、操作数栈、动态链接、方法出口</li><li><strong>本地方法栈</strong>：为Native方法服务，HotSpot将其与虚拟机栈合二为一</li><li><strong>堆</strong>：对象实例分配的主要区域，GC的主要战场，可分为新生代（Eden、Survivor）和老年代</li><li><strong>方法区</strong>：存储类元信息、常量池、静态变量等，JDK 8用元空间替代永久代，元空间使用本地内存</li><li><strong>运行时常量池</strong>：方法区的一部分，存储编译期生成的字面量和符号引用</li></ul><h3 id="_1-3-内存分配策略" tabindex="-1"><a class="header-anchor" href="#_1-3-内存分配策略"><span>1.3 内存分配策略</span></a></h3><ul><li><strong>对象优先在Eden区分配</strong>：大对象（如长字符串、数组）直接进入老年代</li><li><strong>长期存活对象进入老年代</strong>：通过年龄计数器判断，默认15岁晋升</li><li><strong>动态对象年龄判定</strong>：Survivor区中相同年龄对象总和超过一半，年龄大于等于该年龄的对象进入老年代</li><li><strong>空间分配担保</strong>：Minor GC前检查老年代最大可用连续空间是否大于新生代对象总大小</li></ul><h2 id="代码实践" tabindex="-1"><a class="header-anchor" href="#代码实践"><span>代码实践</span></a></h2><h3 id="_2-1-内存区域oom异常演示" tabindex="-1"><a class="header-anchor" href="#_2-1-内存区域oom异常演示"><span>2.1 内存区域OOM异常演示</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MemoryOOMDemo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 堆内存溢出</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> HeapObject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> heapOOM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        List</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">HeapObject</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ArrayList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> HeapObject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 虚拟机栈溢出</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> stackDepth </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> stackSOF</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            stackDepth++;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">            stackSOF</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">StackOverflowError</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;栈深度: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> stackDepth);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            throw</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> e;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 方法区（元空间）溢出</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> metaspaceOOM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">            Enhancer</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> enhancer</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Enhancer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            enhancer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setSuperclass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">HeapObject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            enhancer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setUseCache</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            enhancer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setCallback</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">((MethodInterceptor) (obj, method, args1, proxy) </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> proxy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">invokeSuper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(obj, args1));</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            enhancer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">create</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 分别运行以下方法观察不同OOM异常</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // heapOOM();      // -Xms20m -Xmx20m</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // stackSOF();     // -Xss128k</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // metaspaceOOM(); // -XX:MetaspaceSize=10m -XX:MaxMetaspaceSize=10m</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-对象内存布局分析" tabindex="-1"><a class="header-anchor" href="#_2-2-对象内存布局分析"><span>2.2 对象内存布局分析</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ObjectLayoutDemo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Object</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> obj</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Object</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ClassLayout</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">parseInstance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(obj).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toPrintable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 演示对象头Mark Word变化</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        synchronized</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (obj) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;加锁后对象布局:&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ClassLayout</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">parseInstance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(obj).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toPrintable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>依赖：需要引入jol-core依赖</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;org.openjdk.jol&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;jol-core&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;0.16&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="设计思想" tabindex="-1"><a class="header-anchor" href="#设计思想"><span>设计思想</span></a></h2><h3 id="_3-1-内存分代回收思想" tabindex="-1"><a class="header-anchor" href="#_3-1-内存分代回收思想"><span>3.1 内存分代回收思想</span></a></h3><p>基于对象生命周期的不同，将堆分为新生代和老年代：</p><ul><li><strong>新生代</strong>：对象存活时间短，回收频繁，采用标记-复制算法</li><li><strong>老年代</strong>：对象存活时间长，回收较少，采用标记-清除或标记-整理算法 这种分代设计提高了垃圾回收效率，降低了内存碎片</li></ul><h3 id="_3-2-栈帧结构设计" tabindex="-1"><a class="header-anchor" href="#_3-2-栈帧结构设计"><span>3.2 栈帧结构设计</span></a></h3><p>栈帧包含：</p><ul><li><strong>局部变量表</strong>：存储方法参数和局部变量</li><li><strong>操作数栈</strong>：方法执行的工作区</li><li><strong>动态链接</strong>：指向运行时常量池的方法引用</li><li><strong>方法出口</strong>：方法正常或异常退出的位置 栈帧的设计实现了方法的独立执行环境和高效调用</li></ul><h3 id="_3-3-元空间替代永久代的设计考量" tabindex="-1"><a class="header-anchor" href="#_3-3-元空间替代永久代的设计考量"><span>3.3 元空间替代永久代的设计考量</span></a></h3><p>JDK 8用元空间替代永久代的原因：</p><ul><li>永久代大小难以确定，容易OOM</li><li>元空间使用本地内存，受系统内存限制</li><li>便于HotSpot与JRockit合并，统一内存管理</li></ul><h2 id="避坑指南" tabindex="-1"><a class="header-anchor" href="#避坑指南"><span>避坑指南</span></a></h2><h3 id="_4-1-堆内存参数设置" tabindex="-1"><a class="header-anchor" href="#_4-1-堆内存参数设置"><span>4.1 堆内存参数设置</span></a></h3><ul><li><strong>-Xms与-Xmx</strong>：建议设置为相同值，避免运行时动态调整堆大小</li><li><strong>新生代与老年代比例</strong>：默认1:2，可通过-XX:NewRatio调整</li><li><strong>Survivor区比例</strong>：默认Eden:S0:S1=8:1:1，可通过-XX:SurvivorRatio调整</li></ul><h3 id="_4-2-大对象处理" tabindex="-1"><a class="header-anchor" href="#_4-2-大对象处理"><span>4.2 大对象处理</span></a></h3><ul><li>避免创建过大对象（如几MB的数组），可分块处理</li><li>使用-XX:PretenureSizeThreshold参数控制大对象直接进入老年代</li><li>注意NIO直接内存使用，避免DirectMemoryOOM</li></ul><h3 id="_4-3-元空间优化" tabindex="-1"><a class="header-anchor" href="#_4-3-元空间优化"><span>4.3 元空间优化</span></a></h3><ul><li>JDK 8+通过-XX:MetaspaceSize和-XX:MaxMetaspaceSize控制元空间大小</li><li>避免频繁创建和卸载类，如动态代理、反射等场景</li><li>监控元空间使用，防止内存泄漏</li></ul><h2 id="深度思考题" tabindex="-1"><a class="header-anchor" href="#深度思考题"><span>深度思考题</span></a></h2><ol><li>为什么Survivor区需要两个（From和To）？</li><li>对象在内存中的布局是怎样的？对象头包含哪些信息？</li><li>什么是TLAB（Thread Local Allocation Buffer）？它的作用是什么？</li></ol><p>思考题回答：</p><ol><li><p>Survivor区设计两个是为了实现复制算法，解决内存碎片问题。每次GC时，将Eden和From区存活对象复制到To区，清空Eden和From区，然后From和To区角色互换。这样保证总有一个Survivor区为空，避免内存碎片。</p></li><li><p>对象内存布局包括：对象头（Mark Word、Klass Pointer）、实例数据和对齐填充。对象头包含哈希码、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID等信息。</p></li><li><p>TLAB是线程本地分配缓冲区，是堆中线程私有的一小块区域。它的作用是避免多线程竞争，提高对象分配效率。线程优先在TLAB中分配对象，TLAB用完后才使用共享区域分配。</p></li></ol>`,37),h=[t];function e(k,p){return a(),s("div",null,h)}const g=i(l,[["render",e],["__file","5.2 JVM内存模型.html.vue"]]),A=JSON.parse('{"path":"/java/6%E3%80%81JVM%E5%8E%9F%E7%90%86/5.2%20JVM%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B.html","title":"5.2 JVM内存模型","lang":"zh-CN","frontmatter":{"description":"5.2 JVM内存模型 核心理论 1.1 JVM内存区域划分 JVM内存分为线程私有区域和线程共享区域： 线程私有：程序计数器、虚拟机栈、本地方法栈 线程共享：堆、方法区（JDK 8后为元空间） 直接内存：不属于JVM运行时数据区，但被NIO使用 1.2 各内存区域详解 程序计数器：当前线程执行字节码的行号指示器，唯一不会OOM的区域 虚拟机栈：每个方...","head":[["meta",{"property":"og:url","content":"http://blog.lindaifeng.vip/java/6%E3%80%81JVM%E5%8E%9F%E7%90%86/5.2%20JVM%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"文档演示"}],["meta",{"property":"og:title","content":"5.2 JVM内存模型"}],["meta",{"property":"og:description","content":"5.2 JVM内存模型 核心理论 1.1 JVM内存区域划分 JVM内存分为线程私有区域和线程共享区域： 线程私有：程序计数器、虚拟机栈、本地方法栈 线程共享：堆、方法区（JDK 8后为元空间） 直接内存：不属于JVM运行时数据区，但被NIO使用 1.2 各内存区域详解 程序计数器：当前线程执行字节码的行号指示器，唯一不会OOM的区域 虚拟机栈：每个方..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-04T07:10:04.000Z"}],["meta",{"property":"article:author","content":"清峰"}],["meta",{"property":"article:modified_time","content":"2025-07-04T07:10:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"5.2 JVM内存模型\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-04T07:10:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"清峰\\",\\"url\\":\\"http://blog.lindaifeng.vip/\\"}]}"]]},"headers":[{"level":2,"title":"核心理论","slug":"核心理论","link":"#核心理论","children":[{"level":3,"title":"1.1 JVM内存区域划分","slug":"_1-1-jvm内存区域划分","link":"#_1-1-jvm内存区域划分","children":[]},{"level":3,"title":"1.2 各内存区域详解","slug":"_1-2-各内存区域详解","link":"#_1-2-各内存区域详解","children":[]},{"level":3,"title":"1.3 内存分配策略","slug":"_1-3-内存分配策略","link":"#_1-3-内存分配策略","children":[]}]},{"level":2,"title":"代码实践","slug":"代码实践","link":"#代码实践","children":[{"level":3,"title":"2.1 内存区域OOM异常演示","slug":"_2-1-内存区域oom异常演示","link":"#_2-1-内存区域oom异常演示","children":[]},{"level":3,"title":"2.2 对象内存布局分析","slug":"_2-2-对象内存布局分析","link":"#_2-2-对象内存布局分析","children":[]}]},{"level":2,"title":"设计思想","slug":"设计思想","link":"#设计思想","children":[{"level":3,"title":"3.1 内存分代回收思想","slug":"_3-1-内存分代回收思想","link":"#_3-1-内存分代回收思想","children":[]},{"level":3,"title":"3.2 栈帧结构设计","slug":"_3-2-栈帧结构设计","link":"#_3-2-栈帧结构设计","children":[]},{"level":3,"title":"3.3 元空间替代永久代的设计考量","slug":"_3-3-元空间替代永久代的设计考量","link":"#_3-3-元空间替代永久代的设计考量","children":[]}]},{"level":2,"title":"避坑指南","slug":"避坑指南","link":"#避坑指南","children":[{"level":3,"title":"4.1 堆内存参数设置","slug":"_4-1-堆内存参数设置","link":"#_4-1-堆内存参数设置","children":[]},{"level":3,"title":"4.2 大对象处理","slug":"_4-2-大对象处理","link":"#_4-2-大对象处理","children":[]},{"level":3,"title":"4.3 元空间优化","slug":"_4-3-元空间优化","link":"#_4-3-元空间优化","children":[]}]},{"level":2,"title":"深度思考题","slug":"深度思考题","link":"#深度思考题","children":[]}],"git":{"createdTime":1751613004000,"updatedTime":1751613004000,"contributors":[{"name":"ldf","email":"1305366530@qq.com","commits":1}]},"readingTime":{"minutes":4.48,"words":1343},"filePathRelative":"java/6、JVM原理/5.2 JVM内存模型.md","localizedDate":"2025年7月4日","autoDesc":true,"excerpt":"\\n<h2>核心理论</h2>\\n<h3>1.1 JVM内存区域划分</h3>\\n<p>JVM内存分为线程私有区域和线程共享区域：</p>\\n<ul>\\n<li><strong>线程私有</strong>：程序计数器、虚拟机栈、本地方法栈</li>\\n<li><strong>线程共享</strong>：堆、方法区（JDK 8后为元空间）</li>\\n<li><strong>直接内存</strong>：不属于JVM运行时数据区，但被NIO使用</li>\\n</ul>\\n<h3>1.2 各内存区域详解</h3>\\n<ul>\\n<li><strong>程序计数器</strong>：当前线程执行字节码的行号指示器，唯一不会OOM的区域</li>\\n<li><strong>虚拟机栈</strong>：每个方法调用创建栈帧，存储局部变量表、操作数栈、动态链接、方法出口</li>\\n<li><strong>本地方法栈</strong>：为Native方法服务，HotSpot将其与虚拟机栈合二为一</li>\\n<li><strong>堆</strong>：对象实例分配的主要区域，GC的主要战场，可分为新生代（Eden、Survivor）和老年代</li>\\n<li><strong>方法区</strong>：存储类元信息、常量池、静态变量等，JDK 8用元空间替代永久代，元空间使用本地内存</li>\\n<li><strong>运行时常量池</strong>：方法区的一部分，存储编译期生成的字面量和符号引用</li>\\n</ul>"}');export{g as comp,A as data};
