import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,b as e,d as i,f as l,o as t,r as h}from"./app-X4Oeetgs.js";const k={},p=i("h1",{id:"_3-mongo数据库进阶-聚合操作",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#_3-mongo数据库进阶-聚合操作"},[i("span",null,"3. Mongo数据库进阶-聚合操作")])],-1),d=i("h2",{id:"概述",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#概述"},[i("span",null,"概述")])],-1),r=i("p",null,"聚合操作是MongoDB中的高级查询功能，它允许我们对数据进行复杂的处理和分析，如分组、筛选、排序、计算等。MongoDB提供了两种主要的聚合方式：聚合管道和MapReduce。",-1),o=l(`<h2 id="知识要点" tabindex="-1"><a class="header-anchor" href="#知识要点"><span>知识要点</span></a></h2><h3 id="_1-聚合管道" tabindex="-1"><a class="header-anchor" href="#_1-聚合管道"><span>1. 聚合管道</span></a></h3><p>聚合管道是一系列的操作，每个操作接收输入文档，处理后输出结果文档，然后传递给下一个操作。</p><ul><li><strong>常用管道阶段</strong>: <ul><li><code>$match</code>: 过滤文档</li><li><code>$group</code>: 分组文档</li><li><code>$sort</code>: 排序文档</li><li><code>$skip</code>/<code>$limit</code>: 分页</li><li><code>$project</code>: 投影文档</li><li><code>$unwind</code>: 展开数组</li><li><code>$lookup</code>: 左连接其他集合</li></ul></li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 示例：聚合管道</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Document</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> pipeline </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">asList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;$match&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;age&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;$gt&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">25</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))),</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;$group&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;_id&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;$address.city&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;count&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;$sum&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;avgAge&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;$avg&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;$age&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))),</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;$sort&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;count&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">AggregateIterable</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Document</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> result </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> collection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">aggregate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(pipeline);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-mapreduce" tabindex="-1"><a class="header-anchor" href="#_2-mapreduce"><span>2. MapReduce</span></a></h3><p>MapReduce是一种分布式计算模型，它包括两个主要阶段：map阶段和reduce阶段。</p><ul><li><strong>map阶段</strong>: 将数据分解成键值对</li><li><strong>reduce阶段</strong>: 合并相同键的值</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 示例：MapReduce</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> mapFunction </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;function() { emit(this.address.city, 1); }&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> reduceFunction </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;function(key, values) { return Array.sum(values); }&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">MapReduceIterable</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Document</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> result </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> collection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mapReduce</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(mapFunction, reduceFunction);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-单目聚合函数" tabindex="-1"><a class="header-anchor" href="#_3-单目聚合函数"><span>3. 单目聚合函数</span></a></h3><p>单目聚合函数是针对整个集合的聚合操作，如计数、求和、平均值等。</p><ul><li><code>count()</code>: 计算文档数量</li><li><code>distinct()</code>: 查找指定字段的不同值</li><li><code>aggregateOne()</code>: 执行聚合操作并返回单个结果</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 示例：单目聚合函数</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">long</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> count </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> collection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">countDocuments</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> cities </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> collection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">distinct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;address.city&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">into</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ArrayList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;());</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="知识扩展" tabindex="-1"><a class="header-anchor" href="#知识扩展"><span>知识扩展</span></a></h2><h3 id="_1-设计思想" tabindex="-1"><a class="header-anchor" href="#_1-设计思想"><span>1. 设计思想</span></a></h3><p>MongoDB的聚合系统设计灵感来自于Unix管道，它允许我们通过组合简单的操作来构建复杂的查询。这种设计理念使得聚合操作既灵活又强大，可以满足各种复杂的数据处理需求。</p><h3 id="_2-避坑指南" tabindex="-1"><a class="header-anchor" href="#_2-避坑指南"><span>2. 避坑指南</span></a></h3><ul><li>聚合管道的顺序很重要，尽量将<code>$match</code>放在前面，以减少后续操作的数据量。</li><li>对于大数据集，考虑使用索引来提高聚合操作的性能。</li><li>注意聚合操作的内存限制，如果操作的数据量过大，可能会导致性能问题或失败。</li><li>MapReduce虽然强大，但性能通常比聚合管道低，尽量使用聚合管道。</li></ul><h3 id="_3-深度思考题" tabindex="-1"><a class="header-anchor" href="#_3-深度思考题"><span>3. 深度思考题</span></a></h3><ul><li>聚合管道和MapReduce的主要区别是什么？各自的适用场景是什么？</li><li>如何优化聚合操作的性能？</li><li>什么是覆盖索引？它在聚合操作中有什么作用？</li></ul><p><strong>深度思考题回答:</strong></p><ul><li>聚合管道是一系列的操作，每个操作处理输入文档并输出结果文档，然后传递给下一个操作；MapReduce是一种分布式计算模型，包括map阶段和reduce阶段。聚合管道适合处理中等规模的数据和复杂的查询；MapReduce适合处理大规模的数据和复杂的计算。</li><li>优化聚合操作的性能可以从以下几个方面入手：使用合适的索引、合理安排管道阶段的顺序、限制返回的数据量、避免不必要的计算等。</li><li>覆盖索引是一种特殊的索引，它包含了查询所需的所有字段，使得MongoDB不需要读取文档就可以返回查询结果。在聚合操作中，覆盖索引可以显著提高性能，特别是对于那些只需要访问索引中包含的字段的操作。</li></ul>`,22);function c(g,B){const s=h("Mermaid");return t(),n("div",null,[p,d,r,e(s,{id:"mermaid-9",code:"eJxLL0osyFAIceFSAALH6BeNs55O6Hg2uffJ3jmxCrq6dgpOULHn6xa+bJwcC1EHlnGO9k0sCEpNKU1ORRZ2iX7aO/X57HUQbU/b9z6buiGWC6wgOSexuNglNU2hILUoLb8oNzEvOVUhLTMnx0rZzc3Z0MBcp7ikKD87FcS1tDAw0EnOz8kvskrKSUzOtkaYoOCo46TjrOOCbIw1FwBYakpK"}),o])}const y=a(k,[["render",c],["__file","3.Mongo数据库进阶-聚合操作.html.vue"]]),F=JSON.parse('{"path":"/database/Mongo%E6%95%B0%E6%8D%AE%E5%BA%93/3.Mongo%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9B%E9%98%B6-%E8%81%9A%E5%90%88%E6%93%8D%E4%BD%9C.html","title":"3. Mongo数据库进阶-聚合操作","lang":"zh-CN","frontmatter":{"description":"3. Mongo数据库进阶-聚合操作 概述 聚合操作是MongoDB中的高级查询功能，它允许我们对数据进行复杂的处理和分析，如分组、筛选、排序、计算等。MongoDB提供了两种主要的聚合方式：聚合管道和MapReduce。 知识要点 1. 聚合管道 聚合管道是一系列的操作，每个操作接收输入文档，处理后输出结果文档，然后传递给下一个操作。 常用管道阶段:...","head":[["meta",{"property":"og:url","content":"http://blog.lindaifeng.vip/database/Mongo%E6%95%B0%E6%8D%AE%E5%BA%93/3.Mongo%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9B%E9%98%B6-%E8%81%9A%E5%90%88%E6%93%8D%E4%BD%9C.html"}],["meta",{"property":"og:site_name","content":"文档演示"}],["meta",{"property":"og:title","content":"3. Mongo数据库进阶-聚合操作"}],["meta",{"property":"og:description","content":"3. Mongo数据库进阶-聚合操作 概述 聚合操作是MongoDB中的高级查询功能，它允许我们对数据进行复杂的处理和分析，如分组、筛选、排序、计算等。MongoDB提供了两种主要的聚合方式：聚合管道和MapReduce。 知识要点 1. 聚合管道 聚合管道是一系列的操作，每个操作接收输入文档，处理后输出结果文档，然后传递给下一个操作。 常用管道阶段:..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-04T09:13:27.000Z"}],["meta",{"property":"article:author","content":"清峰"}],["meta",{"property":"article:modified_time","content":"2025-07-04T09:13:27.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"3. Mongo数据库进阶-聚合操作\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-04T09:13:27.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"清峰\\",\\"url\\":\\"http://blog.lindaifeng.vip/\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"知识要点","slug":"知识要点","link":"#知识要点","children":[{"level":3,"title":"1. 聚合管道","slug":"_1-聚合管道","link":"#_1-聚合管道","children":[]},{"level":3,"title":"2. MapReduce","slug":"_2-mapreduce","link":"#_2-mapreduce","children":[]},{"level":3,"title":"3. 单目聚合函数","slug":"_3-单目聚合函数","link":"#_3-单目聚合函数","children":[]}]},{"level":2,"title":"知识扩展","slug":"知识扩展","link":"#知识扩展","children":[{"level":3,"title":"1. 设计思想","slug":"_1-设计思想","link":"#_1-设计思想","children":[]},{"level":3,"title":"2. 避坑指南","slug":"_2-避坑指南","link":"#_2-避坑指南","children":[]},{"level":3,"title":"3. 深度思考题","slug":"_3-深度思考题","link":"#_3-深度思考题","children":[]}]}],"git":{"createdTime":1751617859000,"updatedTime":1751620407000,"contributors":[{"name":"ldf","email":"1305366530@qq.com","commits":2}]},"readingTime":{"minutes":3.06,"words":918},"filePathRelative":"database/Mongo数据库/3.Mongo数据库进阶-聚合操作.md","localizedDate":"2025年7月4日","autoDesc":true,"excerpt":"\\n<h2>概述</h2>\\n<p>聚合操作是MongoDB中的高级查询功能，它允许我们对数据进行复杂的处理和分析，如分组、筛选、排序、计算等。MongoDB提供了两种主要的聚合方式：聚合管道和MapReduce。</p>\\n<h2>知识要点</h2>\\n<h3>1. 聚合管道</h3>\\n<p>聚合管道是一系列的操作，每个操作接收输入文档，处理后输出结果文档，然后传递给下一个操作。</p>\\n<ul>\\n<li><strong>常用管道阶段</strong>:\\n<ul>\\n<li><code>$match</code>: 过滤文档</li>\\n<li><code>$group</code>: 分组文档</li>\\n<li><code>$sort</code>: 排序文档</li>\\n<li><code>$skip</code>/<code>$limit</code>: 分页</li>\\n<li><code>$project</code>: 投影文档</li>\\n<li><code>$unwind</code>: 展开数组</li>\\n<li><code>$lookup</code>: 左连接其他集合</li>\\n</ul>\\n</li>\\n</ul>"}');export{y as comp,F as data};
