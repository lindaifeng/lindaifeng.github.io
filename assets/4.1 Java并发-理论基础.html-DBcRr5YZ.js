import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,f as n}from"./app-yhW6njzi.js";const l={},h=n(`<h1 id="_4-1-java并发-理论基础" tabindex="-1"><a class="header-anchor" href="#_4-1-java并发-理论基础"><span>4.1 Java并发-理论基础</span></a></h1><h2 id="核心理论" tabindex="-1"><a class="header-anchor" href="#核心理论"><span>核心理论</span></a></h2><h3 id="_1-1-并发与并行的区别" tabindex="-1"><a class="header-anchor" href="#_1-1-并发与并行的区别"><span>1.1 并发与并行的区别</span></a></h3><p>并发是指多个任务在同一时间段内交替执行，而并行则是指多个任务在同一时刻同时执行。在单核CPU中，只能实现并发；而在多核CPU中，可以实现并行。</p><h3 id="_1-2-线程与进程的关系" tabindex="-1"><a class="header-anchor" href="#_1-2-线程与进程的关系"><span>1.2 线程与进程的关系</span></a></h3><p>进程是操作系统进行资源分配的基本单位，线程是CPU调度的基本单位。一个进程可以包含多个线程，线程共享进程的内存空间和资源。</p><h3 id="_1-3-并发编程的挑战" tabindex="-1"><a class="header-anchor" href="#_1-3-并发编程的挑战"><span>1.3 并发编程的挑战</span></a></h3><ul><li>线程安全问题：多个线程同时访问共享资源可能导致数据不一致</li><li>死锁：两个或多个线程互相等待对方释放资源</li><li>活锁：线程不断重复执行相同的操作，但无法继续前进</li><li>性能问题：线程创建、上下文切换等开销</li></ul><h2 id="代码实践" tabindex="-1"><a class="header-anchor" href="#代码实践"><span>代码实践</span></a></h2><h3 id="_2-1-创建线程的三种方式" tabindex="-1"><a class="header-anchor" href="#_2-1-创建线程的三种方式"><span>2.1 创建线程的三种方式</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 方式一：继承Thread类</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyThread</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Thread running&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 方式二：实现Runnable接口</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyRunnable</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Runnable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Runnable running&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 方式三：使用Callable和Future</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyCallable</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Callable</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> call</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Exception</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Callable result&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ThreadCreationExample</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ExecutionException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> InterruptedException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 方式一</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        MyThread</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> thread</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> MyThread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 方式二</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Thread</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> runnableThread</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> MyRunnable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        runnableThread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 方式三</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        ExecutorService</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> executor</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Executors</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">newSingleThreadExecutor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Future</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">future</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> executor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">submit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> MyCallable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">future</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        executor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">shutdown</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-线程安全的计数器实现" tabindex="-1"><a class="header-anchor" href="#_2-2-线程安全的计数器实现"><span>2.2 线程安全的计数器实现</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ThreadSafeCounter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> count </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> lock </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Object</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> increment</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        synchronized</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (lock) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            count++;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getCount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        synchronized</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (lock) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> count;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="设计思想" tabindex="-1"><a class="header-anchor" href="#设计思想"><span>设计思想</span></a></h2><h3 id="_3-1-并发编程模型" tabindex="-1"><a class="header-anchor" href="#_3-1-并发编程模型"><span>3.1 并发编程模型</span></a></h3><ul><li>共享内存模型：线程通过共享内存进行通信，如Java</li><li>消息传递模型：线程通过发送消息进行通信，如Actor模型</li></ul><h3 id="_3-2-不可变对象设计" tabindex="-1"><a class="header-anchor" href="#_3-2-不可变对象设计"><span>3.2 不可变对象设计</span></a></h3><p>不可变对象天生是线程安全的，因为它们的状态在创建后不会改变。在Java中，可以通过将类声明为final，所有字段声明为final来创建不可变对象。</p><h3 id="_3-3-线程池设计理念" tabindex="-1"><a class="header-anchor" href="#_3-3-线程池设计理念"><span>3.3 线程池设计理念</span></a></h3><p>线程池通过预先创建一定数量的线程，重用线程来减少线程创建和销毁的开销，提高系统性能。Java中的ThreadPoolExecutor是线程池的核心实现。</p><h2 id="避坑指南" tabindex="-1"><a class="header-anchor" href="#避坑指南"><span>避坑指南</span></a></h2><h3 id="_4-1-synchronized关键字的正确使用" tabindex="-1"><a class="header-anchor" href="#_4-1-synchronized关键字的正确使用"><span>4.1 synchronized关键字的正确使用</span></a></h3><ul><li>避免在非静态方法上使用synchronized(this)，可能导致死锁</li><li>不要同步String常量或基本类型的包装类对象</li><li>尽量减小同步代码块的范围</li></ul><h3 id="_4-2-volatile关键字的局限性" tabindex="-1"><a class="header-anchor" href="#_4-2-volatile关键字的局限性"><span>4.2 volatile关键字的局限性</span></a></h3><p>volatile只能保证可见性和有序性，不能保证原子性。对于复合操作（如i++），仍需要使用synchronized或原子类。</p><h3 id="_4-3-threadlocal的内存泄漏风险" tabindex="-1"><a class="header-anchor" href="#_4-3-threadlocal的内存泄漏风险"><span>4.3 ThreadLocal的内存泄漏风险</span></a></h3><p>ThreadLocal如果使用不当，可能导致内存泄漏。需要注意在使用完ThreadLocal后调用remove()方法清除线程局部变量。</p><h2 id="深度思考题" tabindex="-1"><a class="header-anchor" href="#深度思考题"><span>深度思考题</span></a></h2><ol><li>什么是Java内存模型（JMM）？它如何保证多线程的内存可见性、原子性和有序性？</li><li>乐观锁和悲观锁的区别是什么？在什么情况下应该使用乐观锁？</li><li>线程池的核心参数有哪些？如何合理配置线程池参数？</li></ol><p>思考题回答：</p><ol><li><p>Java内存模型（JMM）定义了线程和主内存之间的抽象关系，规定所有变量存储在主内存中，线程操作变量时需要将变量加载到工作内存中。JMM通过volatile、synchronized和final关键字以及Happens-Before规则来保证多线程的内存可见性、原子性和有序性。</p></li><li><p>乐观锁假设并发操作不会发生冲突，只在提交操作时检查是否有冲突；悲观锁则假设并发操作会发生冲突，在操作前先获取锁。乐观锁适用于读多写少的场景，如缓存更新；悲观锁适用于写多读少的场景，如数据库更新。</p></li><li><p>线程池的核心参数包括核心线程数、最大线程数、队列容量、拒绝策略等。配置线程池时需要考虑CPU核心数、任务类型（CPU密集型或IO密集型）、任务执行时间等因素。例如，CPU密集型任务的线程数可以设置为CPU核心数+1，IO密集型任务的线程数可以设置为CPU核心数*2。</p></li></ol>`,31),e=[h];function t(k,p){return a(),s("div",null,e)}const A=i(l,[["render",t],["__file","4.1 Java并发-理论基础.html.vue"]]),c=JSON.parse('{"path":"/java/4%E3%80%81%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E8%89%BA%E6%9C%AF/4.1%20Java%E5%B9%B6%E5%8F%91-%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html","title":"4.1 Java并发-理论基础","lang":"zh-CN","frontmatter":{"description":"4.1 Java并发-理论基础 核心理论 1.1 并发与并行的区别 并发是指多个任务在同一时间段内交替执行，而并行则是指多个任务在同一时刻同时执行。在单核CPU中，只能实现并发；而在多核CPU中，可以实现并行。 1.2 线程与进程的关系 进程是操作系统进行资源分配的基本单位，线程是CPU调度的基本单位。一个进程可以包含多个线程，线程共享进程的内存空间和...","head":[["meta",{"property":"og:url","content":"http://blog.lindaifeng.vip/java/4%E3%80%81%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E8%89%BA%E6%9C%AF/4.1%20Java%E5%B9%B6%E5%8F%91-%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html"}],["meta",{"property":"og:site_name","content":"文档演示"}],["meta",{"property":"og:title","content":"4.1 Java并发-理论基础"}],["meta",{"property":"og:description","content":"4.1 Java并发-理论基础 核心理论 1.1 并发与并行的区别 并发是指多个任务在同一时间段内交替执行，而并行则是指多个任务在同一时刻同时执行。在单核CPU中，只能实现并发；而在多核CPU中，可以实现并行。 1.2 线程与进程的关系 进程是操作系统进行资源分配的基本单位，线程是CPU调度的基本单位。一个进程可以包含多个线程，线程共享进程的内存空间和..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-04T07:10:04.000Z"}],["meta",{"property":"article:author","content":"清峰"}],["meta",{"property":"article:modified_time","content":"2025-07-04T07:10:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"4.1 Java并发-理论基础\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-04T07:10:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"清峰\\",\\"url\\":\\"http://blog.lindaifeng.vip/\\"}]}"]]},"headers":[{"level":2,"title":"核心理论","slug":"核心理论","link":"#核心理论","children":[{"level":3,"title":"1.1 并发与并行的区别","slug":"_1-1-并发与并行的区别","link":"#_1-1-并发与并行的区别","children":[]},{"level":3,"title":"1.2 线程与进程的关系","slug":"_1-2-线程与进程的关系","link":"#_1-2-线程与进程的关系","children":[]},{"level":3,"title":"1.3 并发编程的挑战","slug":"_1-3-并发编程的挑战","link":"#_1-3-并发编程的挑战","children":[]}]},{"level":2,"title":"代码实践","slug":"代码实践","link":"#代码实践","children":[{"level":3,"title":"2.1 创建线程的三种方式","slug":"_2-1-创建线程的三种方式","link":"#_2-1-创建线程的三种方式","children":[]},{"level":3,"title":"2.2 线程安全的计数器实现","slug":"_2-2-线程安全的计数器实现","link":"#_2-2-线程安全的计数器实现","children":[]}]},{"level":2,"title":"设计思想","slug":"设计思想","link":"#设计思想","children":[{"level":3,"title":"3.1 并发编程模型","slug":"_3-1-并发编程模型","link":"#_3-1-并发编程模型","children":[]},{"level":3,"title":"3.2 不可变对象设计","slug":"_3-2-不可变对象设计","link":"#_3-2-不可变对象设计","children":[]},{"level":3,"title":"3.3 线程池设计理念","slug":"_3-3-线程池设计理念","link":"#_3-3-线程池设计理念","children":[]}]},{"level":2,"title":"避坑指南","slug":"避坑指南","link":"#避坑指南","children":[{"level":3,"title":"4.1 synchronized关键字的正确使用","slug":"_4-1-synchronized关键字的正确使用","link":"#_4-1-synchronized关键字的正确使用","children":[]},{"level":3,"title":"4.2 volatile关键字的局限性","slug":"_4-2-volatile关键字的局限性","link":"#_4-2-volatile关键字的局限性","children":[]},{"level":3,"title":"4.3 ThreadLocal的内存泄漏风险","slug":"_4-3-threadlocal的内存泄漏风险","link":"#_4-3-threadlocal的内存泄漏风险","children":[]}]},{"level":2,"title":"深度思考题","slug":"深度思考题","link":"#深度思考题","children":[]}],"git":{"createdTime":1751613004000,"updatedTime":1751613004000,"contributors":[{"name":"ldf","email":"1305366530@qq.com","commits":1}]},"readingTime":{"minutes":3.72,"words":1115},"filePathRelative":"java/4、并发编程艺术/4.1 Java并发-理论基础.md","localizedDate":"2025年7月4日","autoDesc":true,"excerpt":"\\n<h2>核心理论</h2>\\n<h3>1.1 并发与并行的区别</h3>\\n<p>并发是指多个任务在同一时间段内交替执行，而并行则是指多个任务在同一时刻同时执行。在单核CPU中，只能实现并发；而在多核CPU中，可以实现并行。</p>\\n<h3>1.2 线程与进程的关系</h3>\\n<p>进程是操作系统进行资源分配的基本单位，线程是CPU调度的基本单位。一个进程可以包含多个线程，线程共享进程的内存空间和资源。</p>\\n<h3>1.3 并发编程的挑战</h3>\\n<ul>\\n<li>线程安全问题：多个线程同时访问共享资源可能导致数据不一致</li>\\n<li>死锁：两个或多个线程互相等待对方释放资源</li>\\n<li>活锁：线程不断重复执行相同的操作，但无法继续前进</li>\\n<li>性能问题：线程创建、上下文切换等开销</li>\\n</ul>"}');export{A as comp,c as data};
