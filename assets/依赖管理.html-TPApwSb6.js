import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,b as a,d as i,f as n,o as t,r as h}from"./app-D1ifS0UH.js";const p={},r=i("h1",{id:"依赖管理",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#依赖管理"},[i("span",null,"依赖管理")])],-1),d=i("h2",{id:"概述",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#概述"},[i("span",null,"概述")])],-1),k=i("p",null,"依赖管理是Maven的核心功能之一，它能够自动解决项目所需的依赖库，并处理版本冲突。本章节将深入探讨Maven的依赖管理机制，帮助你掌握如何高效地管理项目依赖。",-1),g=n(`<h2 id="知识要点" tabindex="-1"><a class="header-anchor" href="#知识要点"><span>知识要点</span></a></h2><h3 id="_1-依赖声明" tabindex="-1"><a class="header-anchor" href="#_1-依赖声明"><span>1. 依赖声明</span></a></h3><p>在Maven中，依赖声明是通过POM文件中的<code>&lt;dependencies&gt;</code>元素来实现的。一个典型的依赖声明如下：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;org.springframework&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;spring-core&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;5.3.8&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>groupId</code>、<code>artifactId</code>和<code>version</code>组成了Maven的坐标系统，用于唯一标识一个依赖。</p><h3 id="_2-依赖范围" tabindex="-1"><a class="header-anchor" href="#_2-依赖范围"><span>2. 依赖范围</span></a></h3><p>Maven定义了多种依赖范围，用于控制依赖在不同阶段的可见性：</p>`,7),o=n(`<ul><li><strong>compile</strong>：默认范围，编译和运行时都需要</li><li><strong>provided</strong>：编译时需要，运行时由容器提供</li><li><strong>runtime</strong>：运行时需要，编译时不需要</li><li><strong>test</strong>：只在测试时需要</li><li><strong>system</strong>：类似于provided，但需要显式指定依赖文件的路径</li><li><strong>import</strong>：用于导入其他POM文件中的依赖管理配置</li></ul><h3 id="_3-依赖传递" tabindex="-1"><a class="header-anchor" href="#_3-依赖传递"><span>3. 依赖传递</span></a></h3><p>Maven的依赖传递机制可以自动解决间接依赖。例如，如果项目A依赖项目B，而项目B又依赖项目C，那么Maven会自动将项目C添加到项目A的依赖中。</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">&lt;!-- 项目A依赖B，B依赖C --&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">&lt;!-- 则A会间接依赖C --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;com.example&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;B&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;1.0&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-依赖冲突" tabindex="-1"><a class="header-anchor" href="#_4-依赖冲突"><span>4. 依赖冲突</span></a></h3><p>当项目中存在多个版本的同一依赖时，就会发生依赖冲突。Maven提供了多种解决依赖冲突的策略：</p><ol><li><strong>最短路径优先</strong>：Maven会选择依赖路径最短的版本</li><li><strong>声明顺序优先</strong>：如果依赖路径长度相同，Maven会选择在POM文件中声明较早的版本</li><li><strong>显式声明优先</strong>：如果显式声明了某个版本，Maven会优先使用该版本</li></ol><h3 id="_5-依赖排除" tabindex="-1"><a class="header-anchor" href="#_5-依赖排除"><span>5. 依赖排除</span></a></h3><p>如果不想引入某个传递依赖，可以使用<code>&lt;exclusions&gt;</code>元素来排除它：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;com.example&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;B&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;1.0&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">exclusions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">exclusion</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;com.example&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;C&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">exclusion</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">exclusions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="知识扩展" tabindex="-1"><a class="header-anchor" href="#知识扩展"><span>知识扩展</span></a></h2><h3 id="设计思想" tabindex="-1"><a class="header-anchor" href="#设计思想"><span>设计思想</span></a></h3><p>Maven的依赖管理设计遵循了以下原则：</p><ol><li><strong>自动解决</strong>：自动解决项目所需的依赖库</li><li><strong>传递性</strong>：通过依赖传递机制减少重复声明</li><li><strong>冲突解决</strong>：提供多种策略解决依赖冲突</li><li><strong>版本控制</strong>：通过版本号精确控制依赖版本</li></ol><h3 id="避坑指南" tabindex="-1"><a class="header-anchor" href="#避坑指南"><span>避坑指南</span></a></h3><ol><li><strong>依赖冲突</strong>：使用<code>mvn dependency:tree</code>命令查看依赖树，找出冲突的版本</li><li><strong>不必要的依赖</strong>：定期检查项目依赖，移除不必要的依赖</li><li><strong>版本不一致</strong>：使用<code>&lt;dependencyManagement&gt;</code>标签统一管理依赖版本</li><li><strong>快照版本</strong>：谨慎使用快照版本，因为它们可能会随时变化</li></ol><h3 id="深度思考题" tabindex="-1"><a class="header-anchor" href="#深度思考题"><span>深度思考题</span></a></h3><p><strong>思考题:</strong> 什么是依赖传递？它有什么优缺点？</p><p><strong>回答:</strong> 依赖传递是指当项目依赖另一个项目时，会自动继承该项目的依赖。</p><p>优点：</p><ol><li>减少了重复声明依赖的工作量</li><li>简化了项目配置</li><li>确保了依赖版本的一致性</li></ol><p>缺点：</p><ol><li>可能会引入不必要的依赖</li><li>可能会导致依赖冲突</li><li>增加了项目的复杂性</li></ol><p><strong>思考题:</strong> 如何统一管理项目中的依赖版本？</p><p><strong>回答:</strong></p><ol><li>使用<code>&lt;dependencyManagement&gt;</code>标签在父POM文件中统一管理依赖版本</li><li>使用属性（如<code>&lt;spring.version&gt;5.3.8&lt;/spring.version&gt;</code>）来管理版本号</li><li>定期更新依赖版本，确保使用最新的稳定版本</li><li>避免使用快照版本，除非有特殊需求</li></ol>`,26);function c(B,A){const s=h("Mermaid");return t(),e("div",null,[r,d,k,a(s,{id:"mermaid-9",code:"eJxLL0osyFAIceFSAALH6Cf75r7YOu35uoXPJ7TFKujq2ik4QcWeLt7wbEZfLEQdWMYZKvOip/np7C3IMi5QmSd7FrxsmIQs4wozrW3T81WNyDJuUJlnfZNezlwSywWWSs5JLC52SU1TKC4pKk0uKS1KVUjLzMmxUjZxdnQzNdABCudnp1opG1tYuBo76yTn5+QXWZVnZJakWiP0Ay2Aa+cCAFtPYE8="}),g,a(s,{id:"mermaid-29",code:"eJxLL0osyFDwCeJSAALH6Cf75r7YOu1FT/PT2VtiFXR17RScopPzcwsyc1JjIUrAgs7RBUX5ZZkpqSnIoi7RRaV5JZm5KEpdo0tSi0uQRdyiiyuLS1JzkcXcozNzC/KLgOrAgsk5icXFLqlpCsXJ+QWpCmmZOTlWyibOjm6mBjrFJUX52alWysYWFq7GztYI9QpOOs46LjquOm467hCNXABae0Hc"}),o])}const m=l(p,[["render",c],["__file","依赖管理.html.vue"]]),u=JSON.parse('{"path":"/java/7%E3%80%81Maven%E4%BB%93%E5%BA%93%E7%AE%A1%E7%90%86/%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86.html","title":"依赖管理","lang":"zh-CN","frontmatter":{"description":"依赖管理 概述 依赖管理是Maven的核心功能之一，它能够自动解决项目所需的依赖库，并处理版本冲突。本章节将深入探讨Maven的依赖管理机制，帮助你掌握如何高效地管理项目依赖。 知识要点 1. 依赖声明 在Maven中，依赖声明是通过POM文件中的<dependencies>元素来实现的。一个典型的依赖声明如下： 其中，groupId、artifact...","head":[["meta",{"property":"og:url","content":"http://blog.lindaifeng.vip/java/7%E3%80%81Maven%E4%BB%93%E5%BA%93%E7%AE%A1%E7%90%86/%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"文档演示"}],["meta",{"property":"og:title","content":"依赖管理"}],["meta",{"property":"og:description","content":"依赖管理 概述 依赖管理是Maven的核心功能之一，它能够自动解决项目所需的依赖库，并处理版本冲突。本章节将深入探讨Maven的依赖管理机制，帮助你掌握如何高效地管理项目依赖。 知识要点 1. 依赖声明 在Maven中，依赖声明是通过POM文件中的<dependencies>元素来实现的。一个典型的依赖声明如下： 其中，groupId、artifact..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-04T07:10:04.000Z"}],["meta",{"property":"article:author","content":"清峰"}],["meta",{"property":"article:modified_time","content":"2025-07-04T07:10:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"依赖管理\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-04T07:10:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"清峰\\",\\"url\\":\\"http://blog.lindaifeng.vip/\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"知识要点","slug":"知识要点","link":"#知识要点","children":[{"level":3,"title":"1. 依赖声明","slug":"_1-依赖声明","link":"#_1-依赖声明","children":[]},{"level":3,"title":"2. 依赖范围","slug":"_2-依赖范围","link":"#_2-依赖范围","children":[]},{"level":3,"title":"3. 依赖传递","slug":"_3-依赖传递","link":"#_3-依赖传递","children":[]},{"level":3,"title":"4. 依赖冲突","slug":"_4-依赖冲突","link":"#_4-依赖冲突","children":[]},{"level":3,"title":"5. 依赖排除","slug":"_5-依赖排除","link":"#_5-依赖排除","children":[]}]},{"level":2,"title":"知识扩展","slug":"知识扩展","link":"#知识扩展","children":[{"level":3,"title":"设计思想","slug":"设计思想","link":"#设计思想","children":[]},{"level":3,"title":"避坑指南","slug":"避坑指南","link":"#避坑指南","children":[]},{"level":3,"title":"深度思考题","slug":"深度思考题","link":"#深度思考题","children":[]}]}],"git":{"createdTime":1751377947000,"updatedTime":1751613004000,"contributors":[{"name":"ldf","email":"1305366530@qq.com","commits":3}]},"readingTime":{"minutes":3.41,"words":1023},"filePathRelative":"java/7、Maven仓库管理/依赖管理.md","localizedDate":"2025年7月1日","autoDesc":true,"excerpt":"\\n<h2>概述</h2>\\n<p>依赖管理是Maven的核心功能之一，它能够自动解决项目所需的依赖库，并处理版本冲突。本章节将深入探讨Maven的依赖管理机制，帮助你掌握如何高效地管理项目依赖。</p>\\n<h2>知识要点</h2>\\n<h3>1. 依赖声明</h3>\\n<p>在Maven中，依赖声明是通过POM文件中的<code>&lt;dependencies&gt;</code>元素来实现的。一个典型的依赖声明如下：</p>\\n<div class=\\"language-xml line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"xml\\" data-title=\\"xml\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&lt;</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">dependency</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">    &lt;</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">groupId</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&gt;org.springframework&lt;/</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">groupId</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">    &lt;</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">artifactId</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&gt;spring-core&lt;/</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">artifactId</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">    &lt;</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">version</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&gt;5.3.8&lt;/</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">version</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&lt;/</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">dependency</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&gt;</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}');export{m as comp,u as data};
