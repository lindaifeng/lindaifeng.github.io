import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,b as l,d as i,f as e,o as t,r as h}from"./app-1glq8-TT.js";const p={},r=i("h1",{id:"_4-spring事务管理",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#_4-spring事务管理"},[i("span",null,"4. Spring事务管理")])],-1),k=i("h2",{id:"概述",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#概述"},[i("span",null,"概述")])],-1),d=i("p",null,"事务管理是企业级应用程序开发中不可或缺的一部分，它确保了数据的一致性和完整性。Spring提供了强大的事务管理支持，包括编程式事务管理和声明式事务管理。",-1),c=e(`<h2 id="知识要点" tabindex="-1"><a class="header-anchor" href="#知识要点"><span>知识要点</span></a></h2><h3 id="_1-事务的基本概念" tabindex="-1"><a class="header-anchor" href="#_1-事务的基本概念"><span>1. 事务的基本概念</span></a></h3><ul><li><strong>事务</strong>: 是一组原子性的操作，要么全部执行成功，要么全部执行失败。</li><li><strong>ACID特性</strong>: 原子性(Atomicity)、一致性(Consistency)、隔离性(Isolation)和持久性(Durability)。</li><li><strong>事务的隔离级别</strong>: 读未提交(Read Uncommitted)、读提交(Read Committed)、可重复读(Repeatable Read)和串行化(Serializable)。</li><li><strong>事务的传播行为</strong>: 定义了当一个事务方法调用另一个事务方法时，事务如何传播。</li></ul><h3 id="_2-编程式事务管理" tabindex="-1"><a class="header-anchor" href="#_2-编程式事务管理"><span>2. 编程式事务管理</span></a></h3><ul><li>使用TransactionTemplate或PlatformTransactionManager手动管理事务。</li><li>优点是可以更精细地控制事务，但缺点是代码会变得更加复杂。</li></ul><h3 id="_3-声明式事务管理" tabindex="-1"><a class="header-anchor" href="#_3-声明式事务管理"><span>3. 声明式事务管理</span></a></h3><ul><li>基于AOP实现，通过注解或XML配置来管理事务。</li><li>优点是代码更加简洁，但缺点是不能像编程式事务管理那样精细地控制事务。</li></ul><h3 id="_4-代码示例" tabindex="-1"><a class="header-anchor" href="#_4-代码示例"><span>4. 代码示例</span></a></h3><h4 id="基于注解的事务管理" tabindex="-1"><a class="header-anchor" href="#基于注解的事务管理"><span>基于注解的事务管理</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Service</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UserService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Autowired</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UserDao</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> userDao</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 声明式事务管理</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Transactional</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> saveUser</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">User</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        userDao</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">save</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(user);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="启用事务管理" tabindex="-1"><a class="header-anchor" href="#启用事务管理"><span>启用事务管理</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">EnableTransactionManagement</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> AppConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Bean</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> DataSource</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> dataSource</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 配置数据源</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> DriverManagerDataSource</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Bean</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> PlatformTransactionManager</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> transactionManager</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">DataSource</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> dataSource</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> DataSourceTransactionManager</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(dataSource);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="编程式事务管理" tabindex="-1"><a class="header-anchor" href="#编程式事务管理"><span>编程式事务管理</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Service</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UserService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Autowired</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UserDao</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> userDao</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Autowired</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> TransactionTemplate</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> transactionTemplate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 编程式事务管理</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> saveUser</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">User</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        transactionTemplate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">execute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> TransactionCallbackWithoutResult</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            protected</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> doInTransactionWithoutResult</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">TransactionStatus</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> status</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                userDao</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">save</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(user);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        });</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-事务的隔离级别和传播行为" tabindex="-1"><a class="header-anchor" href="#_5-事务的隔离级别和传播行为"><span>5. 事务的隔离级别和传播行为</span></a></h3><ul><li><strong>隔离级别</strong>: 决定了事务之间的隔离程度，避免了脏读、不可重复读和幻读等问题。</li><li><strong>传播行为</strong>: 定义了当一个事务方法调用另一个事务方法时，事务如何传播，如REQUIRED、SUPPORTS、MANDATORY等。</li></ul><h2 id="知识扩展" tabindex="-1"><a class="header-anchor" href="#知识扩展"><span>知识扩展</span></a></h2><h3 id="设计思想" tabindex="-1"><a class="header-anchor" href="#设计思想"><span>设计思想</span></a></h3><p>Spring的事务管理设计思想是简化事务管理，它通过提供声明式事务管理，使得开发者可以专注于业务逻辑，而不是事务管理的细节。</p><h3 id="避坑指南" tabindex="-1"><a class="header-anchor" href="#避坑指南"><span>避坑指南</span></a></h3><ul><li>尽量使用声明式事务管理，因为它更加简洁。</li><li>注意事务的边界，避免将不必要的操作包含在事务中。</li><li>注意事务的隔离级别和传播行为的选择，避免出现并发问题。</li><li>避免在事务中执行耗时的操作，因为这会导致数据库连接被长时间占用。</li></ul><h3 id="深度思考题" tabindex="-1"><a class="header-anchor" href="#深度思考题"><span>深度思考题</span></a></h3><p><strong>深度思考题:</strong> 声明式事务管理和编程式事务管理各有什么优缺点？ <strong>思考题回答:</strong> 声明式事务管理的优点是代码更加简洁，缺点是不能像编程式事务管理那样精细地控制事务；编程式事务管理的优点是可以更精细地控制事务，缺点是代码会变得更加复杂。</p><p><strong>深度思考题:</strong> 什么是事务的传播行为？Spring支持哪些传播行为？ <strong>思考题回答:</strong> 事务的传播行为定义了当一个事务方法调用另一个事务方法时，事务如何传播。Spring支持以下传播行为：</p><ul><li>REQUIRED: 如果当前没有事务，就创建一个新事务；如果当前有事务，就加入到这个事务中。</li><li>SUPPORTS: 如果当前有事务，就加入到这个事务中；如果当前没有事务，就以非事务的方式执行。</li><li>MANDATORY: 如果当前有事务，就加入到这个事务中；如果当前没有事务，就抛出异常。</li><li>REQUIRES_NEW: 无论当前是否有事务，都创建一个新的事务。</li><li>NOT_SUPPORTED: 以非事务的方式执行，如果当前有事务，就暂停这个事务。</li><li>NEVER: 以非事务的方式执行，如果当前有事务，就抛出异常。</li><li>NESTED: 如果当前有事务，就创建一个嵌套的事务；如果当前没有事务，就创建一个新事务。</li></ul>`,25);function g(A,o){const s=h("Mermaid");return t(),n("div",null,[r,k,d,l(s,{id:"mermaid-9",code:"eJxLL0osyFAIceFSAALH6Ce7up92LXy+buHzCW2xCrq6dgpO0c/3THu+ovvpnn4USYgGsBLn6KeLNzyb0YdViTNYiUv00/m7nuzqe7Z5xYvli5/PasGl0BWqMMLXB0MVWFlyTmJxsUtqmkJxSVFpcklpUapCWmZOjpWyibOjm6mBDlA4PzvVStnYwsLV2FknOT8nv8iqPCOzJNUaVX9iTnp+UWZJRi5Uv5GhpZmbMVy/gYuJuaMhqn6EAUCfw+1HMlfBScdZx0XHFWG4NRcALJqQNA=="}),c])}const v=a(p,[["render",g],["__file","4. Spring事务管理.html.vue"]]),u=JSON.parse('{"path":"/frame/spring/4.%20Spring%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86.html","title":"4. Spring事务管理","lang":"zh-CN","frontmatter":{"description":"4. Spring事务管理 概述 事务管理是企业级应用程序开发中不可或缺的一部分，它确保了数据的一致性和完整性。Spring提供了强大的事务管理支持，包括编程式事务管理和声明式事务管理。 知识要点 1. 事务的基本概念 事务: 是一组原子性的操作，要么全部执行成功，要么全部执行失败。 ACID特性: 原子性(Atomicity)、一致性(Consist...","head":[["meta",{"property":"og:url","content":"http://blog.lindaifeng.vip/frame/spring/4.%20Spring%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"文档演示"}],["meta",{"property":"og:title","content":"4. Spring事务管理"}],["meta",{"property":"og:description","content":"4. Spring事务管理 概述 事务管理是企业级应用程序开发中不可或缺的一部分，它确保了数据的一致性和完整性。Spring提供了强大的事务管理支持，包括编程式事务管理和声明式事务管理。 知识要点 1. 事务的基本概念 事务: 是一组原子性的操作，要么全部执行成功，要么全部执行失败。 ACID特性: 原子性(Atomicity)、一致性(Consist..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-04T08:30:59.000Z"}],["meta",{"property":"article:author","content":"清峰"}],["meta",{"property":"article:modified_time","content":"2025-07-04T08:30:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"4. Spring事务管理\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-04T08:30:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"清峰\\",\\"url\\":\\"http://blog.lindaifeng.vip/\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"知识要点","slug":"知识要点","link":"#知识要点","children":[{"level":3,"title":"1. 事务的基本概念","slug":"_1-事务的基本概念","link":"#_1-事务的基本概念","children":[]},{"level":3,"title":"2. 编程式事务管理","slug":"_2-编程式事务管理","link":"#_2-编程式事务管理","children":[]},{"level":3,"title":"3. 声明式事务管理","slug":"_3-声明式事务管理","link":"#_3-声明式事务管理","children":[]},{"level":3,"title":"4. 代码示例","slug":"_4-代码示例","link":"#_4-代码示例","children":[]},{"level":3,"title":"5. 事务的隔离级别和传播行为","slug":"_5-事务的隔离级别和传播行为","link":"#_5-事务的隔离级别和传播行为","children":[]}]},{"level":2,"title":"知识扩展","slug":"知识扩展","link":"#知识扩展","children":[{"level":3,"title":"设计思想","slug":"设计思想","link":"#设计思想","children":[]},{"level":3,"title":"避坑指南","slug":"避坑指南","link":"#避坑指南","children":[]},{"level":3,"title":"深度思考题","slug":"深度思考题","link":"#深度思考题","children":[]}]}],"git":{"createdTime":1751617859000,"updatedTime":1751617859000,"contributors":[{"name":"ldf","email":"1305366530@qq.com","commits":1}]},"readingTime":{"minutes":3.68,"words":1105},"filePathRelative":"frame/spring/4. Spring事务管理.md","localizedDate":"2025年7月4日","autoDesc":true,"excerpt":"\\n<h2>概述</h2>\\n<p>事务管理是企业级应用程序开发中不可或缺的一部分，它确保了数据的一致性和完整性。Spring提供了强大的事务管理支持，包括编程式事务管理和声明式事务管理。</p>\\n<h2>知识要点</h2>\\n<h3>1. 事务的基本概念</h3>\\n<ul>\\n<li><strong>事务</strong>: 是一组原子性的操作，要么全部执行成功，要么全部执行失败。</li>\\n<li><strong>ACID特性</strong>: 原子性(Atomicity)、一致性(Consistency)、隔离性(Isolation)和持久性(Durability)。</li>\\n<li><strong>事务的隔离级别</strong>: 读未提交(Read Uncommitted)、读提交(Read Committed)、可重复读(Repeatable Read)和串行化(Serializable)。</li>\\n<li><strong>事务的传播行为</strong>: 定义了当一个事务方法调用另一个事务方法时，事务如何传播。</li>\\n</ul>"}');export{v as comp,u as data};
