import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,b as t,d as n,f as l,o as a,r as o}from"./app-0tUtxoNY.js";const s={},p=n("h1",{id:"_1-spring框架概述",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-spring框架概述"},[n("span",null,"1. Spring框架概述")])],-1),g=n("h2",{id:"概述",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#概述"},[n("span",null,"概述")])],-1),h=n("p",null,"Spring是一个开源的轻量级Java开发框架，它简化了企业级应用程序的开发。Spring的核心是控制反转(IoC)和面向切面编程(AOP)，它提供了全面的基础设施支持，包括数据访问、事务管理、Web开发等。",-1),c=l('<h2 id="知识要点" tabindex="-1"><a class="header-anchor" href="#知识要点"><span>知识要点</span></a></h2><h3 id="_1-spring的核心特性" tabindex="-1"><a class="header-anchor" href="#_1-spring的核心特性"><span>1. Spring的核心特性</span></a></h3><ul><li><strong>控制反转(IoC)</strong>: 传统的Java应用程序中，对象的创建和依赖关系由应用程序自身管理，而在Spring中，这些由Spring容器管理。</li><li><strong>面向切面编程(AOP)</strong>: 允许将横切关注点（如日志、事务）从业务逻辑中分离出来。</li><li><strong>轻量级</strong>: Spring的核心JAR文件很小，不会给应用程序带来额外的负担。</li><li><strong>非侵入性</strong>: 应用程序代码不需要实现Spring特定的接口。</li><li><strong>可测试性</strong>: Spring的设计使得测试变得容易。</li><li><strong>模块化</strong>: Spring由多个模块组成，可以根据需要选择使用。</li></ul><h3 id="_2-spring的历史" tabindex="-1"><a class="header-anchor" href="#_2-spring的历史"><span>2. Spring的历史</span></a></h3><ul><li>2002年，Rod Johnson发布了《Expert One-On-One J2EE Design and Development》一书，其中包含了Spring的早期思想。</li><li>2003年，Spring框架正式发布。</li><li>随着时间的推移，Spring不断发展，现在已经成为Java开发中最受欢迎的框架之一。</li></ul><h3 id="_3-spring的整体架构" tabindex="-1"><a class="header-anchor" href="#_3-spring的整体架构"><span>3. Spring的整体架构</span></a></h3><ul><li><strong>核心容器</strong>: 包含BeanFactory和ApplicationContext，负责对象的创建和管理。</li><li><strong>AOP模块</strong>: 提供面向切面编程的支持。</li><li><strong>事务模块</strong>: 提供声明式事务管理的支持。</li><li><strong>数据访问模块</strong>: 提供对JDBC、ORM框架等的支持。</li><li><strong>Web模块</strong>: 提供对Web开发的支持。</li><li><strong>集成模块</strong>: 提供与其他框架的集成支持。</li></ul><h2 id="知识扩展" tabindex="-1"><a class="header-anchor" href="#知识扩展"><span>知识扩展</span></a></h2><h3 id="设计思想" tabindex="-1"><a class="header-anchor" href="#设计思想"><span>设计思想</span></a></h3><p>Spring的设计思想是简化Java开发，它通过以下方式实现:</p><ul><li>提供一个统一的编程模型</li><li>消除样板代码</li><li>促进良好的编程实践</li><li>提供对第三方框架的集成支持</li></ul><h3 id="避坑指南" tabindex="-1"><a class="header-anchor" href="#避坑指南"><span>避坑指南</span></a></h3><ul><li>不要过度使用Spring的特性，保持代码简洁。</li><li>注意版本兼容性问题，不同版本的Spring可能有不同的API。</li><li>避免在XML配置文件中放入过多的配置，考虑使用Java配置。</li></ul><h3 id="深度思考题" tabindex="-1"><a class="header-anchor" href="#深度思考题"><span>深度思考题</span></a></h3><p><strong>深度思考题:</strong> Spring的控制反转(IoC)和依赖注入(DI)有什么区别？ <strong>思考题回答:</strong> 控制反转是一种设计原则，它将对象的创建和管理从应用程序转移到框架；而依赖注入是实现控制反转的一种方式，它通过构造函数、setter方法或字段注入依赖对象。</p><p><strong>深度思考题:</strong> 为什么说Spring是轻量级的？ <strong>思考题回答:</strong> Spring的核心JAR文件很小（大约1MB左右），而且它不需要任何特殊的容器就可以运行，此外，Spring的非侵入性设计也使得应用程序不会依赖于Spring的特定API。</p>',16);function d(S,m){const i=o("Mermaid");return a(),e("div",null,[p,g,h,t(i,{id:"mermaid-9",code:"eJxLL0osyFAIceFSAALH6OCCosy89GcL257N2xaroKtrp+AU/WzBjqf7m5+u2/l05opYiDqwjHO0o3/A8z3Tnq/oRhZ2iX6yq/tp18Ln6xY+n9CGLOMa/Wzqhme9616s2/9y+jpkGbfo8NSkp3sanvZPRBZ2j345u+1Zx4Snrdue7J4GdRUXWEFyTmJxsUtqmkJxSVFpcklpUapCWmZOjpWyibOjm6mBDlA4PzvVStnYwsLV2FknOT8nv8iqPCOzJNUaVX9iTnp+UWZJRi5Uv5GhpZmbMVy/gYuJuaMhHv0FqUVp+UW5iXnJMBe4uTkbGpjDTXBzs7QwMICakJSTmJxtjeQFoE/hPkAyWcFJx1nHRcdVx03HHeFEay4A1KeaEQ=="}),c])}const v=r(s,[["render",d],["__file","1. Spring框架概述.html.vue"]]),f=JSON.parse('{"path":"/frame/spring/1.%20Spring%E6%A1%86%E6%9E%B6%E6%A6%82%E8%BF%B0.html","title":"1. Spring框架概述","lang":"zh-CN","frontmatter":{"description":"1. Spring框架概述 概述 Spring是一个开源的轻量级Java开发框架，它简化了企业级应用程序的开发。Spring的核心是控制反转(IoC)和面向切面编程(AOP)，它提供了全面的基础设施支持，包括数据访问、事务管理、Web开发等。 知识要点 1. Spring的核心特性 控制反转(IoC): 传统的Java应用程序中，对象的创建和依赖关系由...","head":[["meta",{"property":"og:url","content":"http://blog.lindaifeng.vip/frame/spring/1.%20Spring%E6%A1%86%E6%9E%B6%E6%A6%82%E8%BF%B0.html"}],["meta",{"property":"og:site_name","content":"文档演示"}],["meta",{"property":"og:title","content":"1. Spring框架概述"}],["meta",{"property":"og:description","content":"1. Spring框架概述 概述 Spring是一个开源的轻量级Java开发框架，它简化了企业级应用程序的开发。Spring的核心是控制反转(IoC)和面向切面编程(AOP)，它提供了全面的基础设施支持，包括数据访问、事务管理、Web开发等。 知识要点 1. Spring的核心特性 控制反转(IoC): 传统的Java应用程序中，对象的创建和依赖关系由..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-04T08:30:59.000Z"}],["meta",{"property":"article:author","content":"清峰"}],["meta",{"property":"article:modified_time","content":"2025-07-04T08:30:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"1. Spring框架概述\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-04T08:30:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"清峰\\",\\"url\\":\\"http://blog.lindaifeng.vip/\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"知识要点","slug":"知识要点","link":"#知识要点","children":[{"level":3,"title":"1. Spring的核心特性","slug":"_1-spring的核心特性","link":"#_1-spring的核心特性","children":[]},{"level":3,"title":"2. Spring的历史","slug":"_2-spring的历史","link":"#_2-spring的历史","children":[]},{"level":3,"title":"3. Spring的整体架构","slug":"_3-spring的整体架构","link":"#_3-spring的整体架构","children":[]}]},{"level":2,"title":"知识扩展","slug":"知识扩展","link":"#知识扩展","children":[{"level":3,"title":"设计思想","slug":"设计思想","link":"#设计思想","children":[]},{"level":3,"title":"避坑指南","slug":"避坑指南","link":"#避坑指南","children":[]},{"level":3,"title":"深度思考题","slug":"深度思考题","link":"#深度思考题","children":[]}]}],"git":{"createdTime":1751617859000,"updatedTime":1751617859000,"contributors":[{"name":"ldf","email":"1305366530@qq.com","commits":1}]},"readingTime":{"minutes":2.72,"words":815},"filePathRelative":"frame/spring/1. Spring框架概述.md","localizedDate":"2025年7月4日","autoDesc":true,"excerpt":"\\n<h2>概述</h2>\\n<p>Spring是一个开源的轻量级Java开发框架，它简化了企业级应用程序的开发。Spring的核心是控制反转(IoC)和面向切面编程(AOP)，它提供了全面的基础设施支持，包括数据访问、事务管理、Web开发等。</p>\\n<h2>知识要点</h2>\\n<h3>1. Spring的核心特性</h3>\\n<ul>\\n<li><strong>控制反转(IoC)</strong>: 传统的Java应用程序中，对象的创建和依赖关系由应用程序自身管理，而在Spring中，这些由Spring容器管理。</li>\\n<li><strong>面向切面编程(AOP)</strong>: 允许将横切关注点（如日志、事务）从业务逻辑中分离出来。</li>\\n<li><strong>轻量级</strong>: Spring的核心JAR文件很小，不会给应用程序带来额外的负担。</li>\\n<li><strong>非侵入性</strong>: 应用程序代码不需要实现Spring特定的接口。</li>\\n<li><strong>可测试性</strong>: Spring的设计使得测试变得容易。</li>\\n<li><strong>模块化</strong>: Spring由多个模块组成，可以根据需要选择使用。</li>\\n</ul>"}');export{v as comp,f as data};
