import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,b as e,d as i,f as l,o as t,r as h}from"./app-yhW6njzi.js";const r={},p=i("h1",{id:"_2-spring-ioc与di详解",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#_2-spring-ioc与di详解"},[i("span",null,"2. Spring IOC与DI详解")])],-1),k=i("h2",{id:"概述",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#概述"},[i("span",null,"概述")])],-1),d=i("p",null,"控制反转(IoC)和依赖注入(DI)是Spring框架的核心概念。IoC是一种设计原则，它将对象的创建和管理从应用程序转移到框架；而DI是实现IoC的一种方式，它通过构造函数、setter方法或字段注入依赖对象。",-1),o=l(`<h2 id="知识要点" tabindex="-1"><a class="header-anchor" href="#知识要点"><span>知识要点</span></a></h2><h3 id="_1-ioc容器" tabindex="-1"><a class="header-anchor" href="#_1-ioc容器"><span>1. IoC容器</span></a></h3><ul><li><strong>BeanFactory</strong>: 是IoC容器的基本接口，提供了获取bean、检查bean是否存在等基本功能。</li><li><strong>ApplicationContext</strong>: 是BeanFactory的子接口，提供了更多的功能，如国际化支持、事件传播等。</li><li><strong>常见的ApplicationContext实现</strong>: ClassPathXmlApplicationContext、FileSystemXmlApplicationContext、AnnotationConfigApplicationContext等。</li></ul><h3 id="_2-依赖注入的方式" tabindex="-1"><a class="header-anchor" href="#_2-依赖注入的方式"><span>2. 依赖注入的方式</span></a></h3><ul><li><strong>构造函数注入</strong>: 通过构造函数的参数注入依赖对象。</li><li><strong>Setter方法注入</strong>: 通过setter方法注入依赖对象。</li><li><strong>字段注入</strong>: 直接在字段上使用@Autowired注解注入依赖对象。</li></ul><h3 id="_3-代码示例" tabindex="-1"><a class="header-anchor" href="#_3-代码示例"><span>3. 代码示例</span></a></h3><h4 id="构造函数注入" tabindex="-1"><a class="header-anchor" href="#构造函数注入"><span>构造函数注入</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UserService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UserDao</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> userDao</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 构造函数注入</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> UserService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">UserDao</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> userDao</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">userDao</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> userDao;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> saveUser</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        userDao</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">save</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="setter方法注入" tabindex="-1"><a class="header-anchor" href="#setter方法注入"><span>Setter方法注入</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UserService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UserDao</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> userDao</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // Setter方法注入</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> setUserDao</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">UserDao</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> userDao</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">userDao</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> userDao;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> saveUser</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        userDao</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">save</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="字段注入" tabindex="-1"><a class="header-anchor" href="#字段注入"><span>字段注入</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UserService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 字段注入</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Autowired</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UserDao</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> userDao</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> saveUser</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        userDao</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">save</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-bean的作用域" tabindex="-1"><a class="header-anchor" href="#_4-bean的作用域"><span>4. Bean的作用域</span></a></h3><ul><li><strong>singleton</strong>: 默认值，整个应用程序中只有一个bean实例。</li><li><strong>prototype</strong>: 每次请求都会创建一个新的bean实例。</li><li><strong>request</strong>: 每个HTTP请求创建一个新的bean实例，仅在Web应用中有效。</li><li><strong>session</strong>: 每个HTTP会话创建一个新的bean实例，仅在Web应用中有效。</li><li><strong>global-session</strong>: 每个全局HTTP会话创建一个新的bean实例，仅在Portlet应用中有效。</li></ul><h2 id="知识扩展" tabindex="-1"><a class="header-anchor" href="#知识扩展"><span>知识扩展</span></a></h2><h3 id="设计思想" tabindex="-1"><a class="header-anchor" href="#设计思想"><span>设计思想</span></a></h3><p>IoC的设计思想是解耦，它通过将对象的创建和管理从应用程序转移到框架，使得应用程序更加关注业务逻辑，而不是对象的创建和管理。</p><h3 id="避坑指南" tabindex="-1"><a class="header-anchor" href="#避坑指南"><span>避坑指南</span></a></h3><ul><li>尽量使用构造函数注入，因为它可以确保依赖对象在实例化时就被注入。</li><li>避免循环依赖，即两个或多个对象相互依赖。</li><li>注意bean的作用域，避免在多线程环境下使用不正确的作用域。</li></ul><h3 id="深度思考题" tabindex="-1"><a class="header-anchor" href="#深度思考题"><span>深度思考题</span></a></h3><p><strong>深度思考题:</strong> 构造函数注入和Setter方法注入各有什么优缺点？ <strong>思考题回答:</strong> 构造函数注入的优点是可以确保依赖对象在实例化时就被注入，缺点是当依赖对象较多时，构造函数会变得很长；Setter方法注入的优点是可以在实例化后再注入依赖对象，缺点是不能确保依赖对象在实例化时就被注入。</p><p><strong>深度思考题:</strong> 什么是循环依赖？Spring是如何解决循环依赖的？ <strong>思考题回答:</strong> 循环依赖是指两个或多个对象相互依赖，例如A依赖于B，B又依赖于A。Spring通过三级缓存机制解决循环依赖，具体来说，Spring会先创建bean的实例，然后再注入依赖对象。</p>`,22);function c(g,A){const s=h("Mermaid");return t(),n("div",null,[p,k,d,e(s,{id:"mermaid-9",code:"eJxLL0osyFAIceFSAALHaM9856frdj6duSJWQVfXTsEp2ik1Me/pullPdnbGQpSAxZ0h4h2zn+7ehSzuEv1k39wXW6c927ziaetSZBlXsI7nU+Y/nbj36cQVz+bMf75u4fMJbbFcYEXJOYnFxS6paQrFJUWlySWlRakKaZk5OVbKJs6ObqYGOkDh/OxUK2VjCwtXY2ed5Pyc/CKr8ozMklRrVP2JOen5RZklGblQ/UaGlmZuxnD9Bi4m5o6GqPoRBgDdCrcfyVwFJx1nHRcdV4Th1lwAiwZu4A=="}),o])}const v=a(r,[["render",c],["__file","2. Spring IoC与DI详解.html.vue"]]),u=JSON.parse('{"path":"/frame/spring/2.%20Spring%20IoC%E4%B8%8EDI%E8%AF%A6%E8%A7%A3.html","title":"2. Spring IOC与DI详解","lang":"zh-CN","frontmatter":{"description":"2. Spring IOC与DI详解 概述 控制反转(IoC)和依赖注入(DI)是Spring框架的核心概念。IoC是一种设计原则，它将对象的创建和管理从应用程序转移到框架；而DI是实现IoC的一种方式，它通过构造函数、setter方法或字段注入依赖对象。 知识要点 1. IoC容器 BeanFactory: 是IoC容器的基本接口，提供了获取bean...","head":[["meta",{"property":"og:url","content":"http://blog.lindaifeng.vip/frame/spring/2.%20Spring%20IoC%E4%B8%8EDI%E8%AF%A6%E8%A7%A3.html"}],["meta",{"property":"og:site_name","content":"文档演示"}],["meta",{"property":"og:title","content":"2. Spring IOC与DI详解"}],["meta",{"property":"og:description","content":"2. Spring IOC与DI详解 概述 控制反转(IoC)和依赖注入(DI)是Spring框架的核心概念。IoC是一种设计原则，它将对象的创建和管理从应用程序转移到框架；而DI是实现IoC的一种方式，它通过构造函数、setter方法或字段注入依赖对象。 知识要点 1. IoC容器 BeanFactory: 是IoC容器的基本接口，提供了获取bean..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-04T08:30:59.000Z"}],["meta",{"property":"article:author","content":"清峰"}],["meta",{"property":"article:modified_time","content":"2025-07-04T08:30:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"2. Spring IOC与DI详解\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-04T08:30:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"清峰\\",\\"url\\":\\"http://blog.lindaifeng.vip/\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"知识要点","slug":"知识要点","link":"#知识要点","children":[{"level":3,"title":"1. IoC容器","slug":"_1-ioc容器","link":"#_1-ioc容器","children":[]},{"level":3,"title":"2. 依赖注入的方式","slug":"_2-依赖注入的方式","link":"#_2-依赖注入的方式","children":[]},{"level":3,"title":"3. 代码示例","slug":"_3-代码示例","link":"#_3-代码示例","children":[]},{"level":3,"title":"4. Bean的作用域","slug":"_4-bean的作用域","link":"#_4-bean的作用域","children":[]}]},{"level":2,"title":"知识扩展","slug":"知识扩展","link":"#知识扩展","children":[{"level":3,"title":"设计思想","slug":"设计思想","link":"#设计思想","children":[]},{"level":3,"title":"避坑指南","slug":"避坑指南","link":"#避坑指南","children":[]},{"level":3,"title":"深度思考题","slug":"深度思考题","link":"#深度思考题","children":[]}]}],"git":{"createdTime":1751617859000,"updatedTime":1751617859000,"contributors":[{"name":"ldf","email":"1305366530@qq.com","commits":1}]},"readingTime":{"minutes":2.79,"words":838},"filePathRelative":"frame/spring/2. Spring IoC与DI详解.md","localizedDate":"2025年7月4日","autoDesc":true,"excerpt":"\\n<h2>概述</h2>\\n<p>控制反转(IoC)和依赖注入(DI)是Spring框架的核心概念。IoC是一种设计原则，它将对象的创建和管理从应用程序转移到框架；而DI是实现IoC的一种方式，它通过构造函数、setter方法或字段注入依赖对象。</p>\\n<h2>知识要点</h2>\\n<h3>1. IoC容器</h3>\\n<ul>\\n<li><strong>BeanFactory</strong>: 是IoC容器的基本接口，提供了获取bean、检查bean是否存在等基本功能。</li>\\n<li><strong>ApplicationContext</strong>: 是BeanFactory的子接口，提供了更多的功能，如国际化支持、事件传播等。</li>\\n<li><strong>常见的ApplicationContext实现</strong>: ClassPathXmlApplicationContext、FileSystemXmlApplicationContext、AnnotationConfigApplicationContext等。</li>\\n</ul>"}');export{v as comp,u as data};
