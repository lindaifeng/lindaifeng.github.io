import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,b as n,d as i,f as l,o as e,r as h}from"./app-D1ifS0UH.js";const p={},d=i("h1",{id:"_1-4-4-权限修饰符",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#_1-4-4-权限修饰符"},[i("span",null,"1.4.4 权限修饰符")])],-1),k=i("h2",{id:"概述",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#概述"},[i("span",null,"概述")])],-1),r=i("p",null,"权限修饰符是Java实现封装特性的核心机制，通过控制类、方法和属性的访问范围，保障代码安全性和封装性。本章将详细讲解Java中的四种权限修饰符（private、default、protected、public）的作用范围、使用场景及最佳实践。",-1),c=l(`<h2 id="知识要点" tabindex="-1"><a class="header-anchor" href="#知识要点"><span>知识要点</span></a></h2><h3 id="_1-权限修饰符作用范围" tabindex="-1"><a class="header-anchor" href="#_1-权限修饰符作用范围"><span>1. 权限修饰符作用范围</span></a></h3><p>Java四种权限修饰符的访问控制范围如下表所示：</p><table><thead><tr><th>修饰符</th><th>本类</th><th>本包</th><th>子类</th><th>其他包</th></tr></thead><tbody><tr><td>private</td><td>✅</td><td>❌</td><td>❌</td><td>❌</td></tr><tr><td>default</td><td>✅</td><td>✅</td><td>❌</td><td>❌</td></tr><tr><td>protected</td><td>✅</td><td>✅</td><td>✅</td><td>❌</td></tr><tr><td>public</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td></tr></tbody></table><h3 id="_2-private修饰符" tabindex="-1"><a class="header-anchor" href="#_2-private修饰符"><span>2. private修饰符</span></a></h3><p>私有修饰符，仅在当前类内部可见，是封装的核心体现：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> User</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> // 私有属性</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> age</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 通过公共方法暴露访问接口</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> name;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> setName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> name;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>使用场景</strong>：类的属性、内部辅助方法，避免外部直接访问和修改。</p><h3 id="_3-default修饰符-包私有" tabindex="-1"><a class="header-anchor" href="#_3-default修饰符-包私有"><span>3. default修饰符（包私有）</span></a></h3><p>无显式修饰符，默认在同一包内可见：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 包com.example.service</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> com.example.service</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> OrderService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> // 包私有类</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> processOrder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 包私有方法</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 业务逻辑</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>使用场景</strong>：包内组件协作，不对外暴露的实现类。</p><h3 id="_4-protected修饰符" tabindex="-1"><a class="header-anchor" href="#_4-protected修饰符"><span>4. protected修饰符</span></a></h3><p>受保护修饰符，允许子类访问父类成员：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 父类</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Animal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    protected</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    protected</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> eat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;动物进食&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 子类</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Dog</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Animal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> bark</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        name </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;小狗&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 访问父类protected属性</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        eat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(); </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 调用父类protected方法</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>：子类只能访问自己继承的protected成员，不能访问其他子类实例的protected成员。</p><h3 id="_5-public修饰符" tabindex="-1"><a class="header-anchor" href="#_5-public修饰符"><span>5. public修饰符</span></a></h3><p>公共修饰符，全局可见，用于对外提供接口：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MathUtils</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> double</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> PI </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3.1415926</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> max</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> b </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> b;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="知识扩展" tabindex="-1"><a class="header-anchor" href="#知识扩展"><span>知识扩展</span></a></h2><h3 id="设计思想" tabindex="-1"><a class="header-anchor" href="#设计思想"><span>设计思想</span></a></h3><ol><li><strong>最小权限原则</strong>：尽可能使用小范围的权限修饰符，降低组件间耦合</li><li><strong>接口隔离原则</strong>：public成员应构成最小接口，隐藏内部实现细节</li><li><strong>开闭原则</strong>：通过protected预留扩展点，允许子类重写扩展功能</li></ol><h3 id="避坑指南" tabindex="-1"><a class="header-anchor" href="#避坑指南"><span>避坑指南</span></a></h3><ol><li><strong>protected跨包访问陷阱</strong>：跨包子类只能通过继承关系访问protected成员，不能通过父类实例直接访问</li><li><strong>内部类权限问题</strong>：内部类可以访问外部类的private成员，但外部类不能访问内部类的private成员</li><li><strong>接口成员权限</strong>：接口中定义的成员默认都是public static final，方法默认是public abstract</li></ol><h3 id="深度思考题" tabindex="-1"><a class="header-anchor" href="#深度思考题"><span>深度思考题</span></a></h3><p><strong>问题</strong>：为什么Java不允许在外部类上使用protected修饰符？ <strong>回答</strong>：外部类的访问控制主要通过包结构管理，protected修饰符设计初衷是支持继承体系中的成员访问控制。如果允许外部类使用protected，会导致包管理与继承体系的权限控制混淆，违背Java简洁的设计哲学。</p>`,26);function A(g,o){const s=h("Mermaid");return e(),t("div",null,[d,k,r,n(s,{id:"mermaid-9",code:"eJx9j09LAkEYxu99ioGOTbBm5Z8g0F3X/7dug4d1HXVxbWVd66qEUSHpwRRBg6DSg2kSBNnBL+PM6rdId023guYwh/f3PM/7PilVyKXBCbcFFs+DaOdi3qpNJ4P506vef46B3d1j4EU5VToTNAz0bom2r2Om2GAsSuCkUJA1QCrlv5hbWBUNixpOAFJtTicdevNoFfhQrhCXJRGQcp+URybyGohHtN3XR5+kOpx1SyZhDeJfksU+K+EMEliRHfJS+2X1GYIgIuUeGRWtJITIuK7Xe6Q9pq2h2TmMyOieFrtmJVJprKQGjCDa+KBvd7PBZN4c0NsuuXq38iha715GDB702qXJjU+UhXyew0mQ19SCqBVUDJKSLLu391kPf8DAxVjJYPe23en02VkoKrKius/TkoaPfvoFOaWokpbOrvx7Ntchb1/7GW7f4bH9489hNamoWeFU/L6A51kb41gn8LzLyTCrhLgsiBkzYRMDPDC06WGZeyELOeiDPPTDAAzCMIzA6ObirS817PM/"}),c])}const v=a(p,[["render",A],["__file","1.4.4 权限修饰符.html.vue"]]),u=JSON.parse('{"path":"/java/2%E3%80%81Java%E5%9F%BA%E7%A1%80/1.4%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/1.4.4%20%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6.html","title":"1.4.4 权限修饰符","lang":"zh-CN","frontmatter":{"description":"1.4.4 权限修饰符 概述 权限修饰符是Java实现封装特性的核心机制，通过控制类、方法和属性的访问范围，保障代码安全性和封装性。本章将详细讲解Java中的四种权限修饰符（private、default、protected、public）的作用范围、使用场景及最佳实践。 知识要点 1. 权限修饰符作用范围 Java四种权限修饰符的访问控制范围如下表所...","head":[["meta",{"property":"og:url","content":"http://blog.lindaifeng.vip/java/2%E3%80%81Java%E5%9F%BA%E7%A1%80/1.4%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/1.4.4%20%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6.html"}],["meta",{"property":"og:site_name","content":"文档演示"}],["meta",{"property":"og:title","content":"1.4.4 权限修饰符"}],["meta",{"property":"og:description","content":"1.4.4 权限修饰符 概述 权限修饰符是Java实现封装特性的核心机制，通过控制类、方法和属性的访问范围，保障代码安全性和封装性。本章将详细讲解Java中的四种权限修饰符（private、default、protected、public）的作用范围、使用场景及最佳实践。 知识要点 1. 权限修饰符作用范围 Java四种权限修饰符的访问控制范围如下表所..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-04T07:10:04.000Z"}],["meta",{"property":"article:author","content":"清峰"}],["meta",{"property":"article:modified_time","content":"2025-07-04T07:10:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"1.4.4 权限修饰符\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-04T07:10:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"清峰\\",\\"url\\":\\"http://blog.lindaifeng.vip/\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"知识要点","slug":"知识要点","link":"#知识要点","children":[{"level":3,"title":"1. 权限修饰符作用范围","slug":"_1-权限修饰符作用范围","link":"#_1-权限修饰符作用范围","children":[]},{"level":3,"title":"2. private修饰符","slug":"_2-private修饰符","link":"#_2-private修饰符","children":[]},{"level":3,"title":"3. default修饰符（包私有）","slug":"_3-default修饰符-包私有","link":"#_3-default修饰符-包私有","children":[]},{"level":3,"title":"4. protected修饰符","slug":"_4-protected修饰符","link":"#_4-protected修饰符","children":[]},{"level":3,"title":"5. public修饰符","slug":"_5-public修饰符","link":"#_5-public修饰符","children":[]}]},{"level":2,"title":"知识扩展","slug":"知识扩展","link":"#知识扩展","children":[{"level":3,"title":"设计思想","slug":"设计思想","link":"#设计思想","children":[]},{"level":3,"title":"避坑指南","slug":"避坑指南","link":"#避坑指南","children":[]},{"level":3,"title":"深度思考题","slug":"深度思考题","link":"#深度思考题","children":[]}]}],"git":{"createdTime":1751613004000,"updatedTime":1751613004000,"contributors":[{"name":"ldf","email":"1305366530@qq.com","commits":1}]},"readingTime":{"minutes":2.87,"words":862},"filePathRelative":"java/2、Java基础/1.4 面向对象/1.4.4 权限修饰符.md","localizedDate":"2025年7月4日","autoDesc":true,"excerpt":"\\n<h2>概述</h2>\\n<p>权限修饰符是Java实现封装特性的核心机制，通过控制类、方法和属性的访问范围，保障代码安全性和封装性。本章将详细讲解Java中的四种权限修饰符（private、default、protected、public）的作用范围、使用场景及最佳实践。</p>\\n<h2>知识要点</h2>\\n<h3>1. 权限修饰符作用范围</h3>\\n<p>Java四种权限修饰符的访问控制范围如下表所示：</p>\\n<table>\\n<thead>\\n<tr>\\n<th>修饰符</th>\\n<th>本类</th>\\n<th>本包</th>\\n<th>子类</th>\\n<th>其他包</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>private</td>\\n<td>✅</td>\\n<td>❌</td>\\n<td>❌</td>\\n<td>❌</td>\\n</tr>\\n<tr>\\n<td>default</td>\\n<td>✅</td>\\n<td>✅</td>\\n<td>❌</td>\\n<td>❌</td>\\n</tr>\\n<tr>\\n<td>protected</td>\\n<td>✅</td>\\n<td>✅</td>\\n<td>✅</td>\\n<td>❌</td>\\n</tr>\\n<tr>\\n<td>public</td>\\n<td>✅</td>\\n<td>✅</td>\\n<td>✅</td>\\n<td>✅</td>\\n</tr>\\n</tbody>\\n</table>"}');export{v as comp,u as data};
