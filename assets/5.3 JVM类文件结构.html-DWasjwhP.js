import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,o as a,f as n}from"./app-X4Oeetgs.js";const l={},e=n(`<h1 id="_5-3-jvm类文件结构" tabindex="-1"><a class="header-anchor" href="#_5-3-jvm类文件结构"><span>5.3 JVM类文件结构</span></a></h1><h2 id="核心理论" tabindex="-1"><a class="header-anchor" href="#核心理论"><span>核心理论</span></a></h2><h3 id="_1-1-类文件格式概述" tabindex="-1"><a class="header-anchor" href="#_1-1-类文件格式概述"><span>1.1 类文件格式概述</span></a></h3><p>Java类文件（.class）是一组以8字节为基础单位的二进制流，采用一种类似C语言结构体的伪结构来存储数据，包括无符号数和表两种数据类型。类文件格式严格规定了类的各种信息如何存储，是JVM实现跨平台的基础。</p><h3 id="_1-2-类文件结构详解" tabindex="-1"><a class="header-anchor" href="#_1-2-类文件结构详解"><span>1.2 类文件结构详解</span></a></h3><p>类文件结构由以下部分组成（按顺序排列）：</p><ul><li><strong>魔数（Magic Number）</strong>：0xCAFEBABE，标识文件类型</li><li><strong>版本号（Version）</strong>： minor_version和major_version，如JDK 8对应52.0</li><li><strong>常量池（Constant Pool）</strong>：存储字面量和符号引用，类文件的核心</li><li><strong>访问标志（Access Flags）</strong>：标识类的访问权限和属性（如public、abstract、final）</li><li><strong>类索引、父类索引和接口索引集合</strong>：确定类的继承关系</li><li><strong>字段表集合（Field Info）</strong>：描述类的字段信息</li><li><strong>方法表集合（Method Info）</strong>：描述类的方法信息</li><li><strong>属性表集合（Attribute Info）</strong>：存储额外信息（如Code、LineNumberTable）</li></ul><h3 id="_1-3-常量池类型" tabindex="-1"><a class="header-anchor" href="#_1-3-常量池类型"><span>1.3 常量池类型</span></a></h3><p>常量池包含17种常量类型，主要分为：</p><ul><li><strong>字面量</strong>：字符串常量、整数、浮点数等</li><li><strong>符号引用</strong>：类和接口符号引用、字段符号引用、方法符号引用 常量池是类加载过程中解析阶段的主要依据，将符号引用转换为直接引用。</li></ul><h2 id="代码实践" tabindex="-1"><a class="header-anchor" href="#代码实践"><span>代码实践</span></a></h2><h3 id="_2-1-查看类文件结构" tabindex="-1"><a class="header-anchor" href="#_2-1-查看类文件结构"><span>2.1 查看类文件结构</span></a></h3><p>使用javap命令分析类文件：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 编译Java文件</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">javac</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> HelloWorld.java</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 查看类文件结构</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">javap</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> HelloWorld.class</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>HelloWorld.java代码：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> HelloWorld</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> message </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Hello, JVM!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> printMessage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(message);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> HelloWorld</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">printMessage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-解析常量池示例" tabindex="-1"><a class="header-anchor" href="#_2-2-解析常量池示例"><span>2.2 解析常量池示例</span></a></h3><p>以下是javap输出的部分常量池信息：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Constant pool:</span></span>
<span class="line"><span>   #1 = Methodref          #6.#20         // java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line"><span>   #2 = Fieldref           #5.#21         // HelloWorld.message:Ljava/lang/String;</span></span>
<span class="line"><span>   #3 = Fieldref           #22.#23        // java/lang/System.out:Ljava/io/PrintStream;</span></span>
<span class="line"><span>   #4 = Methodref          #24.#25        // java/io/PrintStream.println:(Ljava/lang/String;)V</span></span>
<span class="line"><span>   #5 = Class              #26            // HelloWorld</span></span>
<span class="line"><span>   #6 = Class              #27            // java/lang/Object</span></span>
<span class="line"><span>   #7 = Utf8               message</span></span>
<span class="line"><span>   #8 = Utf8               Ljava/lang/String;</span></span>
<span class="line"><span>   #9 = Utf8               &lt;init&gt;</span></span>
<span class="line"><span>  #10 = Utf8               ()V</span></span>
<span class="line"><span>  #11 = Utf8               Code</span></span>
<span class="line"><span>  #12 = Utf8               LineNumberTable</span></span>
<span class="line"><span>  #13 = Utf8               LocalVariableTable</span></span>
<span class="line"><span>  #14 = Utf8               this</span></span>
<span class="line"><span>  #15 = Utf8               LHelloWorld;</span></span>
<span class="line"><span>  #16 = Utf8               printMessage</span></span>
<span class="line"><span>  #17 = Utf8               main</span></span>
<span class="line"><span>  #18 = Utf8               ([Ljava/lang/String;)V</span></span>
<span class="line"><span>  #19 = Utf8               SourceFile</span></span>
<span class="line"><span>  #20 = NameAndType        #9:#10         // &quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line"><span>  #21 = NameAndType        #7:#8          // message:Ljava/lang/String;</span></span>
<span class="line"><span>  #22 = Class              #28            // java/lang/System</span></span>
<span class="line"><span>  #23 = NameAndType        #29:#30        // out:Ljava/io/PrintStream;</span></span>
<span class="line"><span>  #24 = Class              #31            // java/io/PrintStream</span></span>
<span class="line"><span>  #25 = NameAndType        #32:#33        // println:(Ljava/lang/String;)V</span></span>
<span class="line"><span>  #26 = Utf8               HelloWorld</span></span>
<span class="line"><span>  #27 = Utf8               java/lang/Object</span></span>
<span class="line"><span>  #28 = Utf8               java/lang/System</span></span>
<span class="line"><span>  #29 = Utf8               out</span></span>
<span class="line"><span>  #30 = Utf8               Ljava/io/PrintStream;</span></span>
<span class="line"><span>  #31 = Utf8               java/io/PrintStream</span></span>
<span class="line"><span>  #32 = Utf8               println</span></span>
<span class="line"><span>  #33 = Utf8               (Ljava/lang/String;)V</span></span>
<span class="line"><span>  #34 = Utf8               HelloWorld.java</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-自定义类加载器读取类文件" tabindex="-1"><a class="header-anchor" href="#_2-3-自定义类加载器读取类文件"><span>2.3 自定义类加载器读取类文件</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> CustomClassLoader</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ClassLoader</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> loadClassFromFile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> IOException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">        byte</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">b</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> loadClassData</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(path);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> defineClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, b, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;"> byte</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">[] </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">loadClassData</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> IOException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        File</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> file</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> File</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(path);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">InputStream</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> is</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> FileInputStream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(file);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">             ByteArrayOutputStream</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> baos</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ByteArrayOutputStream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()) {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">            byte</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">buffer</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;"> byte</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1024</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> bytesRead</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ((bytesRead </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> is</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">read</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(buffer)) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                baos</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">write</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(buffer, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, bytesRead);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> baos</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toByteArray</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Exception</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        CustomClassLoader</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> loader</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> CustomClassLoader</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Class</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">clazz</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> loader</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">loadClassFromFile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;HelloWorld.class&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Object</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> obj</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> clazz</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">newInstance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Method</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> method</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> clazz</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getMethod</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;printMessage&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        method</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">invoke</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(obj);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="设计思想" tabindex="-1"><a class="header-anchor" href="#设计思想"><span>设计思想</span></a></h2><h3 id="_3-1-类文件的二进制格式设计" tabindex="-1"><a class="header-anchor" href="#_3-1-类文件的二进制格式设计"><span>3.1 类文件的二进制格式设计</span></a></h3><p>类文件采用紧凑的二进制格式，具有以下优点：</p><ul><li>节省存储空间和传输带宽</li><li>快速解析和验证</li><li>平台无关性，只与JVM规范相关 这种设计使得Java字节码可以在任何实现JVM规范的虚拟机上运行。</li></ul><h3 id="_3-2-常量池的共享设计" tabindex="-1"><a class="header-anchor" href="#_3-2-常量池的共享设计"><span>3.2 常量池的共享设计</span></a></h3><p>常量池集中存储类中所有的字面量和符号引用，实现了数据共享，减少了冗余。常量池中的常量被类的字段、方法等共享引用，提高了内存利用率。</p><h3 id="_3-3-属性表的可扩展性设计" tabindex="-1"><a class="header-anchor" href="#_3-3-属性表的可扩展性设计"><span>3.3 属性表的可扩展性设计</span></a></h3><p>属性表机制使得类文件格式具有良好的可扩展性。JVM规范定义了一些标准属性（如Code、LineNumberTable），同时允许自定义属性，只需保证JVM能忽略不认识的属性即可。</p><h2 id="避坑指南" tabindex="-1"><a class="header-anchor" href="#避坑指南"><span>避坑指南</span></a></h2><h3 id="_4-1-版本号不兼容问题" tabindex="-1"><a class="header-anchor" href="#_4-1-版本号不兼容问题"><span>4.1 版本号不兼容问题</span></a></h3><ul><li>编译的class文件版本高于运行时JVM版本会导致UnsupportedClassVersionError</li><li>解决：使用-target参数指定编译版本，如javac -target 1.8 HelloWorld.java</li></ul><h3 id="_4-2-常量池溢出" tabindex="-1"><a class="header-anchor" href="#_4-2-常量池溢出"><span>4.2 常量池溢出</span></a></h3><ul><li>常量池容量有限制（u2类型，最大65535项），过多常量会导致编译失败</li><li>解决：拆分大类，减少常量数量，避免在代码中生成过多字符串常量</li></ul><h3 id="_4-3-类文件验证失败" tabindex="-1"><a class="header-anchor" href="#_4-3-类文件验证失败"><span>4.3 类文件验证失败</span></a></h3><ul><li>类文件不符合JVM规范会导致VerifyError</li><li>常见原因：手动修改class文件、低版本编译器编译高版本特性</li><li>解决：使用标准编译器，避免手动修改class文件</li></ul><h2 id="深度思考题" tabindex="-1"><a class="header-anchor" href="#深度思考题"><span>深度思考题</span></a></h2><ol><li>为什么Java类文件要使用魔数0xCAFEBABE？</li><li>常量池中的符号引用和直接引用有什么区别？何时进行转换？</li><li>如何判断一个class文件是否被篡改过？</li></ol><p>思考题回答：</p><ol><li><p>魔数0xCAFEBABE是Java创始人James Gosling选择的，灵感来自于他喜欢的咖啡（CAFE BABE）。魔数的作用是快速识别文件类型，避免JVM加载非class文件。</p></li><li><p>符号引用是用一组符号描述所引用的目标，与虚拟机实现的内存布局无关；直接引用是可以直接指向目标的指针、偏移量或句柄，与内存布局相关。转换发生在类加载的解析阶段，当符号引用所代表的目标已被加载到内存中时。</p></li><li><p>可以通过以下方式判断class文件是否被篡改：1）校验文件的数字签名（如果有）；2）计算文件的哈希值并与可信哈希值比对；3）使用javap等工具分析类结构，检查是否有异常方法或属性；4）利用JVM的类验证机制，被篡改的class文件通常无法通过验证。</p></li></ol>`,40),t=[e];function h(p,k){return a(),i("div",null,t)}const g=s(l,[["render",h],["__file","5.3 JVM类文件结构.html.vue"]]),c=JSON.parse('{"path":"/java/6%E3%80%81JVM%E5%8E%9F%E7%90%86/5.3%20JVM%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84.html","title":"5.3 JVM类文件结构","lang":"zh-CN","frontmatter":{"description":"5.3 JVM类文件结构 核心理论 1.1 类文件格式概述 Java类文件（.class）是一组以8字节为基础单位的二进制流，采用一种类似C语言结构体的伪结构来存储数据，包括无符号数和表两种数据类型。类文件格式严格规定了类的各种信息如何存储，是JVM实现跨平台的基础。 1.2 类文件结构详解 类文件结构由以下部分组成（按顺序排列）： 魔数（Magic ...","head":[["meta",{"property":"og:url","content":"http://blog.lindaifeng.vip/java/6%E3%80%81JVM%E5%8E%9F%E7%90%86/5.3%20JVM%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84.html"}],["meta",{"property":"og:site_name","content":"文档演示"}],["meta",{"property":"og:title","content":"5.3 JVM类文件结构"}],["meta",{"property":"og:description","content":"5.3 JVM类文件结构 核心理论 1.1 类文件格式概述 Java类文件（.class）是一组以8字节为基础单位的二进制流，采用一种类似C语言结构体的伪结构来存储数据，包括无符号数和表两种数据类型。类文件格式严格规定了类的各种信息如何存储，是JVM实现跨平台的基础。 1.2 类文件结构详解 类文件结构由以下部分组成（按顺序排列）： 魔数（Magic ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-04T07:10:04.000Z"}],["meta",{"property":"article:author","content":"清峰"}],["meta",{"property":"article:modified_time","content":"2025-07-04T07:10:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"5.3 JVM类文件结构\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-04T07:10:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"清峰\\",\\"url\\":\\"http://blog.lindaifeng.vip/\\"}]}"]]},"headers":[{"level":2,"title":"核心理论","slug":"核心理论","link":"#核心理论","children":[{"level":3,"title":"1.1 类文件格式概述","slug":"_1-1-类文件格式概述","link":"#_1-1-类文件格式概述","children":[]},{"level":3,"title":"1.2 类文件结构详解","slug":"_1-2-类文件结构详解","link":"#_1-2-类文件结构详解","children":[]},{"level":3,"title":"1.3 常量池类型","slug":"_1-3-常量池类型","link":"#_1-3-常量池类型","children":[]}]},{"level":2,"title":"代码实践","slug":"代码实践","link":"#代码实践","children":[{"level":3,"title":"2.1 查看类文件结构","slug":"_2-1-查看类文件结构","link":"#_2-1-查看类文件结构","children":[]},{"level":3,"title":"2.2 解析常量池示例","slug":"_2-2-解析常量池示例","link":"#_2-2-解析常量池示例","children":[]},{"level":3,"title":"2.3 自定义类加载器读取类文件","slug":"_2-3-自定义类加载器读取类文件","link":"#_2-3-自定义类加载器读取类文件","children":[]}]},{"level":2,"title":"设计思想","slug":"设计思想","link":"#设计思想","children":[{"level":3,"title":"3.1 类文件的二进制格式设计","slug":"_3-1-类文件的二进制格式设计","link":"#_3-1-类文件的二进制格式设计","children":[]},{"level":3,"title":"3.2 常量池的共享设计","slug":"_3-2-常量池的共享设计","link":"#_3-2-常量池的共享设计","children":[]},{"level":3,"title":"3.3 属性表的可扩展性设计","slug":"_3-3-属性表的可扩展性设计","link":"#_3-3-属性表的可扩展性设计","children":[]}]},{"level":2,"title":"避坑指南","slug":"避坑指南","link":"#避坑指南","children":[{"level":3,"title":"4.1 版本号不兼容问题","slug":"_4-1-版本号不兼容问题","link":"#_4-1-版本号不兼容问题","children":[]},{"level":3,"title":"4.2 常量池溢出","slug":"_4-2-常量池溢出","link":"#_4-2-常量池溢出","children":[]},{"level":3,"title":"4.3 类文件验证失败","slug":"_4-3-类文件验证失败","link":"#_4-3-类文件验证失败","children":[]}]},{"level":2,"title":"深度思考题","slug":"深度思考题","link":"#深度思考题","children":[]}],"git":{"createdTime":1751613004000,"updatedTime":1751613004000,"contributors":[{"name":"ldf","email":"1305366530@qq.com","commits":1}]},"readingTime":{"minutes":4.69,"words":1407},"filePathRelative":"java/6、JVM原理/5.3 JVM类文件结构.md","localizedDate":"2025年7月4日","autoDesc":true,"excerpt":"\\n<h2>核心理论</h2>\\n<h3>1.1 类文件格式概述</h3>\\n<p>Java类文件（.class）是一组以8字节为基础单位的二进制流，采用一种类似C语言结构体的伪结构来存储数据，包括无符号数和表两种数据类型。类文件格式严格规定了类的各种信息如何存储，是JVM实现跨平台的基础。</p>\\n<h3>1.2 类文件结构详解</h3>\\n<p>类文件结构由以下部分组成（按顺序排列）：</p>\\n<ul>\\n<li><strong>魔数（Magic Number）</strong>：0xCAFEBABE，标识文件类型</li>\\n<li><strong>版本号（Version）</strong>： minor_version和major_version，如JDK 8对应52.0</li>\\n<li><strong>常量池（Constant Pool）</strong>：存储字面量和符号引用，类文件的核心</li>\\n<li><strong>访问标志（Access Flags）</strong>：标识类的访问权限和属性（如public、abstract、final）</li>\\n<li><strong>类索引、父类索引和接口索引集合</strong>：确定类的继承关系</li>\\n<li><strong>字段表集合（Field Info）</strong>：描述类的字段信息</li>\\n<li><strong>方法表集合（Method Info）</strong>：描述类的方法信息</li>\\n<li><strong>属性表集合（Attribute Info）</strong>：存储额外信息（如Code、LineNumberTable）</li>\\n</ul>"}');export{g as comp,c as data};
